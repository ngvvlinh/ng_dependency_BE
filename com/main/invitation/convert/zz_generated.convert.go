// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	invitation "etop.vn/api/main/invitation"
	invitationmodel "etop.vn/backend/com/main/invitation/model"
	conversion "etop.vn/backend/pkg/common/conversion"
)

/*
Custom conversions:
    Invitation          // in use
    InvitationDB        // in use
    createInvitation    // in use

Ignored functions:
    ConvertRolesToStrings    // params are not pointer to named types
    ConvertStringsToRoles    // params are not pointer to named types
    GenerateToken            // not recognized
    GetExpiresAt             // not recognized
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*invitationmodel.Invitation)(nil), (*invitation.Invitation)(nil), func(arg, out interface{}) error {
		Convert_invitationmodel_Invitation_invitation_Invitation(arg.(*invitationmodel.Invitation), out.(*invitation.Invitation))
		return nil
	})
	s.Register(([]*invitationmodel.Invitation)(nil), (*[]*invitation.Invitation)(nil), func(arg, out interface{}) error {
		out0 := Convert_invitationmodel_Invitations_invitation_Invitations(arg.([]*invitationmodel.Invitation))
		*out.(*[]*invitation.Invitation) = out0
		return nil
	})
	s.Register((*invitation.Invitation)(nil), (*invitationmodel.Invitation)(nil), func(arg, out interface{}) error {
		Convert_invitation_Invitation_invitationmodel_Invitation(arg.(*invitation.Invitation), out.(*invitationmodel.Invitation))
		return nil
	})
	s.Register(([]*invitation.Invitation)(nil), (*[]*invitationmodel.Invitation)(nil), func(arg, out interface{}) error {
		out0 := Convert_invitation_Invitations_invitationmodel_Invitations(arg.([]*invitation.Invitation))
		*out.(*[]*invitationmodel.Invitation) = out0
		return nil
	})
	s.Register((*invitation.CreateInvitationArgs)(nil), (*invitation.Invitation)(nil), func(arg, out interface{}) error {
		Apply_invitation_CreateInvitationArgs_invitation_Invitation(arg.(*invitation.CreateInvitationArgs), out.(*invitation.Invitation))
		return nil
	})
}

//-- convert etop.vn/api/main/invitation.Invitation --//

func Convert_invitationmodel_Invitation_invitation_Invitation(arg *invitationmodel.Invitation, out *invitation.Invitation) *invitation.Invitation {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &invitation.Invitation{}
	}
	Invitation(arg, out)
	return out
}

func convert_invitationmodel_Invitation_invitation_Invitation(arg *invitationmodel.Invitation, out *invitation.Invitation) {
	out.ID = arg.ID                 // simple assign
	out.AccountID = arg.AccountID   // simple assign
	out.Email = arg.Email           // simple assign
	out.Roles = nil                 // types do not match
	out.Token = arg.Token           // simple assign
	out.Status = arg.Status         // simple assign
	out.InvitedBy = arg.InvitedBy   // simple assign
	out.AcceptedAt = arg.AcceptedAt // simple assign
	out.RejectedAt = arg.RejectedAt // simple assign
	out.ExpiresAt = arg.ExpiresAt   // simple assign
	out.CreatedAt = arg.CreatedAt   // simple assign
	out.UpdatedAt = arg.UpdatedAt   // simple assign
}

func Convert_invitationmodel_Invitations_invitation_Invitations(args []*invitationmodel.Invitation) (outs []*invitation.Invitation) {
	tmps := make([]invitation.Invitation, len(args))
	outs = make([]*invitation.Invitation, len(args))
	for i := range tmps {
		outs[i] = Convert_invitationmodel_Invitation_invitation_Invitation(args[i], &tmps[i])
	}
	return outs
}

func Convert_invitation_Invitation_invitationmodel_Invitation(arg *invitation.Invitation, out *invitationmodel.Invitation) *invitationmodel.Invitation {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &invitationmodel.Invitation{}
	}
	InvitationDB(arg, out)
	return out
}

func convert_invitation_Invitation_invitationmodel_Invitation(arg *invitation.Invitation, out *invitationmodel.Invitation) {
	out.ID = arg.ID                 // simple assign
	out.AccountID = arg.AccountID   // simple assign
	out.Email = arg.Email           // simple assign
	out.Roles = nil                 // types do not match
	out.Token = arg.Token           // simple assign
	out.Status = arg.Status         // simple assign
	out.InvitedBy = arg.InvitedBy   // simple assign
	out.AcceptedAt = arg.AcceptedAt // simple assign
	out.RejectedAt = arg.RejectedAt // simple assign
	out.ExpiresAt = arg.ExpiresAt   // simple assign
	out.CreatedAt = arg.CreatedAt   // simple assign
	out.UpdatedAt = arg.UpdatedAt   // simple assign
	out.DeletedAt = time.Time{}     // zero value
}

func Convert_invitation_Invitations_invitationmodel_Invitations(args []*invitation.Invitation) (outs []*invitationmodel.Invitation) {
	tmps := make([]invitationmodel.Invitation, len(args))
	outs = make([]*invitationmodel.Invitation, len(args))
	for i := range tmps {
		outs[i] = Convert_invitation_Invitation_invitationmodel_Invitation(args[i], &tmps[i])
	}
	return outs
}

func Apply_invitation_CreateInvitationArgs_invitation_Invitation(arg *invitation.CreateInvitationArgs, out *invitation.Invitation) *invitation.Invitation {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &invitation.Invitation{}
	}
	createInvitation(arg, out)
	return out
}

func apply_invitation_CreateInvitationArgs_invitation_Invitation(arg *invitation.CreateInvitationArgs, out *invitation.Invitation) {
	out.ID = 0                    // zero value
	out.AccountID = arg.AccountID // simple assign
	out.Email = arg.Email         // simple assign
	out.Roles = arg.Roles         // simple assign
	out.Token = ""                // zero value
	out.Status = arg.Status       // simple assign
	out.InvitedBy = arg.InvitedBy // simple assign
	out.AcceptedAt = time.Time{}  // zero value
	out.RejectedAt = time.Time{}  // zero value
	out.ExpiresAt = time.Time{}   // zero value
	out.CreatedAt = time.Time{}   // zero value
	out.UpdatedAt = time.Time{}   // zero value
}
