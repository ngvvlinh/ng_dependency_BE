// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type ShopShipmentPriceLists []*ShopShipmentPriceList

const __sqlShopShipmentPriceList_Table = "shop_shipment_price_list"
const __sqlShopShipmentPriceList_ListCols = "\"shop_id\",\"shipment_price_list_id\",\"note\",\"created_at\",\"updated_at\",\"deleted_at\",\"updated_by\",\"wl_partner_id\""
const __sqlShopShipmentPriceList_ListColsOnConflict = "\"shop_id\" = EXCLUDED.\"shop_id\",\"shipment_price_list_id\" = EXCLUDED.\"shipment_price_list_id\",\"note\" = EXCLUDED.\"note\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\",\"updated_by\" = EXCLUDED.\"updated_by\",\"wl_partner_id\" = EXCLUDED.\"wl_partner_id\""
const __sqlShopShipmentPriceList_Insert = "INSERT INTO \"shop_shipment_price_list\" (" + __sqlShopShipmentPriceList_ListCols + ") VALUES"
const __sqlShopShipmentPriceList_Select = "SELECT " + __sqlShopShipmentPriceList_ListCols + " FROM \"shop_shipment_price_list\""
const __sqlShopShipmentPriceList_Select_history = "SELECT " + __sqlShopShipmentPriceList_ListCols + " FROM history.\"shop_shipment_price_list\""
const __sqlShopShipmentPriceList_UpdateAll = "UPDATE \"shop_shipment_price_list\" SET (" + __sqlShopShipmentPriceList_ListCols + ")"
const __sqlShopShipmentPriceList_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT shop_shipment_price_list_pkey DO UPDATE SET"

func (m *ShopShipmentPriceList) SQLTableName() string  { return "shop_shipment_price_list" }
func (m *ShopShipmentPriceLists) SQLTableName() string { return "shop_shipment_price_list" }
func (m *ShopShipmentPriceList) SQLListCols() string   { return __sqlShopShipmentPriceList_ListCols }

func (m *ShopShipmentPriceList) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlShopShipmentPriceList_ListCols + " FROM \"shop_shipment_price_list\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *ShopShipmentPriceList) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "shop_shipment_price_list"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"shop_id": {
			ColumnName:       "shop_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"shipment_price_list_id": {
			ColumnName:       "shipment_price_list_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"note": {
			ColumnName:       "note",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_at": {
			ColumnName:       "deleted_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_by": {
			ColumnName:       "updated_by",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"wl_partner_id": {
			ColumnName:       "wl_partner_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "shop_shipment_price_list", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*ShopShipmentPriceList)(nil))
}

func (m *ShopShipmentPriceList) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ShopID,
		m.ShipmentPriceListID,
		core.String(m.Note),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
		m.UpdatedBy,
		m.WLPartnerID,
	}
}

func (m *ShopShipmentPriceList) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ShopID,
		&m.ShipmentPriceListID,
		(*core.String)(&m.Note),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
		&m.UpdatedBy,
		&m.WLPartnerID,
	}
}

func (m *ShopShipmentPriceList) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopShipmentPriceLists) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopShipmentPriceLists, 0, 128)
	for rows.Next() {
		m := new(ShopShipmentPriceList)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopShipmentPriceList) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopShipmentPriceList_Select)
	return nil
}

func (_ *ShopShipmentPriceLists) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopShipmentPriceList_Select)
	return nil
}

func (m *ShopShipmentPriceList) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopShipmentPriceList_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopShipmentPriceLists) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopShipmentPriceList_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(8)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopShipmentPriceList) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlShopShipmentPriceList_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopShipmentPriceList_ListColsOnConflict)
	return nil
}

func (ms ShopShipmentPriceLists) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlShopShipmentPriceList_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopShipmentPriceList_ListColsOnConflict)
	return nil
}

func (m *ShopShipmentPriceList) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_shipment_price_list")
	w.WriteRawString(" SET ")
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.ShipmentPriceListID != 0 {
		flag = true
		w.WriteName("shipment_price_list_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShipmentPriceListID)
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if m.UpdatedBy != 0 {
		flag = true
		w.WriteName("updated_by")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UpdatedBy)
	}
	if m.WLPartnerID != 0 {
		flag = true
		w.WriteName("wl_partner_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WLPartnerID)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopShipmentPriceList) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopShipmentPriceList_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopShipmentPriceListHistory map[string]interface{}
type ShopShipmentPriceListHistories []map[string]interface{}

func (m *ShopShipmentPriceListHistory) SQLTableName() string {
	return "history.\"shop_shipment_price_list\""
}
func (m ShopShipmentPriceListHistories) SQLTableName() string {
	return "history.\"shop_shipment_price_list\""
}

func (m *ShopShipmentPriceListHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopShipmentPriceList_Select_history)
	return nil
}

func (m ShopShipmentPriceListHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopShipmentPriceList_Select_history)
	return nil
}

func (m ShopShipmentPriceListHistory) ShopID() core.Interface { return core.Interface{m["shop_id"]} }
func (m ShopShipmentPriceListHistory) ShipmentPriceListID() core.Interface {
	return core.Interface{m["shipment_price_list_id"]}
}
func (m ShopShipmentPriceListHistory) Note() core.Interface { return core.Interface{m["note"]} }
func (m ShopShipmentPriceListHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m ShopShipmentPriceListHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}
func (m ShopShipmentPriceListHistory) DeletedAt() core.Interface {
	return core.Interface{m["deleted_at"]}
}
func (m ShopShipmentPriceListHistory) UpdatedBy() core.Interface {
	return core.Interface{m["updated_by"]}
}
func (m ShopShipmentPriceListHistory) WLPartnerID() core.Interface {
	return core.Interface{m["wl_partner_id"]}
}

func (m *ShopShipmentPriceListHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopShipmentPriceListHistory, 8)
	res["shop_id"] = data[0]
	res["shipment_price_list_id"] = data[1]
	res["note"] = data[2]
	res["created_at"] = data[3]
	res["updated_at"] = data[4]
	res["deleted_at"] = data[5]
	res["updated_by"] = data[6]
	res["wl_partner_id"] = data[7]
	*m = res
	return nil
}

func (ms *ShopShipmentPriceListHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	res := make(ShopShipmentPriceListHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopShipmentPriceListHistory)
		m["shop_id"] = data[0]
		m["shipment_price_list_id"] = data[1]
		m["note"] = data[2]
		m["created_at"] = data[3]
		m["updated_at"] = data[4]
		m["deleted_at"] = data[5]
		m["updated_by"] = data[6]
		m["wl_partner_id"] = data[7]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
