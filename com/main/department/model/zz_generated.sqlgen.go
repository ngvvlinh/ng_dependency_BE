// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type Departments []*Department

const __sqlDepartment_Table = "department"
const __sqlDepartment_ListCols = "\"id\",\"account_id\",\"name\",\"description\",\"created_at\",\"updated_at\",\"deleted_at\""
const __sqlDepartment_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"account_id\" = EXCLUDED.\"account_id\",\"name\" = EXCLUDED.\"name\",\"description\" = EXCLUDED.\"description\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\""
const __sqlDepartment_Insert = "INSERT INTO \"department\" (" + __sqlDepartment_ListCols + ") VALUES"
const __sqlDepartment_Select = "SELECT " + __sqlDepartment_ListCols + " FROM \"department\""
const __sqlDepartment_Select_history = "SELECT " + __sqlDepartment_ListCols + " FROM history.\"department\""
const __sqlDepartment_UpdateAll = "UPDATE \"department\" SET (" + __sqlDepartment_ListCols + ")"
const __sqlDepartment_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT department_pkey DO UPDATE SET"

func (m *Department) SQLTableName() string  { return "department" }
func (m *Departments) SQLTableName() string { return "department" }
func (m *Department) SQLListCols() string   { return __sqlDepartment_ListCols }

func (m *Department) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlDepartment_ListCols + " FROM \"department\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *Department) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "department"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"account_id": {
			ColumnName:       "account_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"name": {
			ColumnName:       "name",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"description": {
			ColumnName:       "description",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_at": {
			ColumnName:       "deleted_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "department", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*Department)(nil))
}

func (m *Department) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.AccountID,
		core.String(m.Name),
		core.String(m.Description),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
	}
}

func (m *Department) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.AccountID,
		(*core.String)(&m.Name),
		(*core.String)(&m.Description),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *Department) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Departments) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Departments, 0, 128)
	for rows.Next() {
		m := new(Department)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Department) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlDepartment_Select)
	return nil
}

func (_ *Departments) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlDepartment_Select)
	return nil
}

func (m *Department) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlDepartment_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Departments) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlDepartment_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(7)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Department) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlDepartment_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlDepartment_ListColsOnConflict)
	return nil
}

func (ms Departments) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlDepartment_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlDepartment_ListColsOnConflict)
	return nil
}

func (m *Department) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("department")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.AccountID != 0 {
		flag = true
		w.WriteName("account_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccountID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if true { // always update time
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Department) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlDepartment_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type DepartmentHistory map[string]interface{}
type DepartmentHistories []map[string]interface{}

func (m *DepartmentHistory) SQLTableName() string  { return "history.\"department\"" }
func (m DepartmentHistories) SQLTableName() string { return "history.\"department\"" }

func (m *DepartmentHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlDepartment_Select_history)
	return nil
}

func (m DepartmentHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlDepartment_Select_history)
	return nil
}

func (m DepartmentHistory) ID() core.Interface          { return core.Interface{m["id"]} }
func (m DepartmentHistory) AccountID() core.Interface   { return core.Interface{m["account_id"]} }
func (m DepartmentHistory) Name() core.Interface        { return core.Interface{m["name"]} }
func (m DepartmentHistory) Description() core.Interface { return core.Interface{m["description"]} }
func (m DepartmentHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m DepartmentHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }
func (m DepartmentHistory) DeletedAt() core.Interface   { return core.Interface{m["deleted_at"]} }

func (m *DepartmentHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(DepartmentHistory, 7)
	res["id"] = data[0]
	res["account_id"] = data[1]
	res["name"] = data[2]
	res["description"] = data[3]
	res["created_at"] = data[4]
	res["updated_at"] = data[5]
	res["deleted_at"] = data[6]
	*m = res
	return nil
}

func (ms *DepartmentHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	res := make(DepartmentHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(DepartmentHistory)
		m["id"] = data[0]
		m["account_id"] = data[1]
		m["name"] = data[2]
		m["description"] = data[3]
		m["created_at"] = data[4]
		m["updated_at"] = data[5]
		m["deleted_at"] = data[6]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
