// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	department "o.o/api/main/department"
	departmentmodel "o.o/backend/com/main/department/model"
	conversion "o.o/backend/pkg/common/conversion"
)

/*
Custom conversions: (none)

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*departmentmodel.Department)(nil), (*department.Department)(nil), func(arg, out interface{}) error {
		Convert_departmentmodel_Department_department_Department(arg.(*departmentmodel.Department), out.(*department.Department))
		return nil
	})
	s.Register(([]*departmentmodel.Department)(nil), (*[]*department.Department)(nil), func(arg, out interface{}) error {
		out0 := Convert_departmentmodel_Departments_department_Departments(arg.([]*departmentmodel.Department))
		*out.(*[]*department.Department) = out0
		return nil
	})
	s.Register((*department.Department)(nil), (*departmentmodel.Department)(nil), func(arg, out interface{}) error {
		Convert_department_Department_departmentmodel_Department(arg.(*department.Department), out.(*departmentmodel.Department))
		return nil
	})
	s.Register(([]*department.Department)(nil), (*[]*departmentmodel.Department)(nil), func(arg, out interface{}) error {
		out0 := Convert_department_Departments_departmentmodel_Departments(arg.([]*department.Department))
		*out.(*[]*departmentmodel.Department) = out0
		return nil
	})
	s.Register((*department.CreateDepartmentArgs)(nil), (*department.Department)(nil), func(arg, out interface{}) error {
		Apply_department_CreateDepartmentArgs_department_Department(arg.(*department.CreateDepartmentArgs), out.(*department.Department))
		return nil
	})
	s.Register((*department.UpdateDepartmentArgs)(nil), (*department.Department)(nil), func(arg, out interface{}) error {
		Apply_department_UpdateDepartmentArgs_department_Department(arg.(*department.UpdateDepartmentArgs), out.(*department.Department))
		return nil
	})
}

//-- convert o.o/api/main/department.Department --//

func Convert_departmentmodel_Department_department_Department(arg *departmentmodel.Department, out *department.Department) *department.Department {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &department.Department{}
	}
	convert_departmentmodel_Department_department_Department(arg, out)
	return out
}

func convert_departmentmodel_Department_department_Department(arg *departmentmodel.Department, out *department.Department) {
	out.ID = arg.ID                   // simple assign
	out.AccountID = arg.AccountID     // simple assign
	out.Name = arg.Name               // simple assign
	out.Description = arg.Description // simple assign
	out.Count = 0                     // zero value
	out.CreatedAt = arg.CreatedAt     // simple assign
	out.UpdatedAt = arg.UpdatedAt     // simple assign
	out.DeletedAt = arg.DeletedAt     // simple assign
}

func Convert_departmentmodel_Departments_department_Departments(args []*departmentmodel.Department) (outs []*department.Department) {
	if args == nil {
		return nil
	}
	tmps := make([]department.Department, len(args))
	outs = make([]*department.Department, len(args))
	for i := range tmps {
		outs[i] = Convert_departmentmodel_Department_department_Department(args[i], &tmps[i])
	}
	return outs
}

func Convert_department_Department_departmentmodel_Department(arg *department.Department, out *departmentmodel.Department) *departmentmodel.Department {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &departmentmodel.Department{}
	}
	convert_department_Department_departmentmodel_Department(arg, out)
	return out
}

func convert_department_Department_departmentmodel_Department(arg *department.Department, out *departmentmodel.Department) {
	out.ID = arg.ID                   // simple assign
	out.AccountID = arg.AccountID     // simple assign
	out.Name = arg.Name               // simple assign
	out.Description = arg.Description // simple assign
	out.CreatedAt = arg.CreatedAt     // simple assign
	out.UpdatedAt = arg.UpdatedAt     // simple assign
	out.DeletedAt = arg.DeletedAt     // simple assign
}

func Convert_department_Departments_departmentmodel_Departments(args []*department.Department) (outs []*departmentmodel.Department) {
	if args == nil {
		return nil
	}
	tmps := make([]departmentmodel.Department, len(args))
	outs = make([]*departmentmodel.Department, len(args))
	for i := range tmps {
		outs[i] = Convert_department_Department_departmentmodel_Department(args[i], &tmps[i])
	}
	return outs
}

func Apply_department_CreateDepartmentArgs_department_Department(arg *department.CreateDepartmentArgs, out *department.Department) *department.Department {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &department.Department{}
	}
	apply_department_CreateDepartmentArgs_department_Department(arg, out)
	return out
}

func apply_department_CreateDepartmentArgs_department_Department(arg *department.CreateDepartmentArgs, out *department.Department) {
	out.ID = 0                        // zero value
	out.AccountID = arg.AccountID     // simple assign
	out.Name = arg.Name               // simple assign
	out.Description = arg.Description // simple assign
	out.Count = 0                     // zero value
	out.CreatedAt = time.Time{}       // zero value
	out.UpdatedAt = time.Time{}       // zero value
	out.DeletedAt = time.Time{}       // zero value
}

func Apply_department_UpdateDepartmentArgs_department_Department(arg *department.UpdateDepartmentArgs, out *department.Department) *department.Department {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &department.Department{}
	}
	apply_department_UpdateDepartmentArgs_department_Department(arg, out)
	return out
}

func apply_department_UpdateDepartmentArgs_department_Department(arg *department.UpdateDepartmentArgs, out *department.Department) {
	out.ID = arg.ID                   // simple assign
	out.AccountID = arg.AccountID     // simple assign
	out.Name = arg.Name               // simple assign
	out.Description = arg.Description // simple assign
	out.Count = out.Count             // no change
	out.CreatedAt = out.CreatedAt     // no change
	out.UpdatedAt = out.UpdatedAt     // no change
	out.DeletedAt = out.DeletedAt     // no change
}
