// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	etop "etop.vn/api/main/etop"
	stocktaking "etop.vn/api/main/stocktaking"
	stocktakingmodel "etop.vn/backend/com/main/stocktaking/model"
	conversion "etop.vn/backend/pkg/common/conversion"
	etopmodel "etop.vn/backend/pkg/etop/model"
)

/*
Custom conversions:
    ConvertCreateStocktake    // in use
    ConvertUpdateStocktake    // in use

Ignored functions:
    GenerateCode    // params are not pointer to named types
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*stocktakingmodel.Attribute)(nil), (*stocktaking.Attribute)(nil), func(arg, out interface{}) error {
		Convert_stocktakingmodel_Attribute_stocktaking_Attribute(arg.(*stocktakingmodel.Attribute), out.(*stocktaking.Attribute))
		return nil
	})
	s.Register(([]*stocktakingmodel.Attribute)(nil), (*[]*stocktaking.Attribute)(nil), func(arg, out interface{}) error {
		out0 := Convert_stocktakingmodel_Attributes_stocktaking_Attributes(arg.([]*stocktakingmodel.Attribute))
		*out.(*[]*stocktaking.Attribute) = out0
		return nil
	})
	s.Register((*stocktaking.Attribute)(nil), (*stocktakingmodel.Attribute)(nil), func(arg, out interface{}) error {
		Convert_stocktaking_Attribute_stocktakingmodel_Attribute(arg.(*stocktaking.Attribute), out.(*stocktakingmodel.Attribute))
		return nil
	})
	s.Register(([]*stocktaking.Attribute)(nil), (*[]*stocktakingmodel.Attribute)(nil), func(arg, out interface{}) error {
		out0 := Convert_stocktaking_Attributes_stocktakingmodel_Attributes(arg.([]*stocktaking.Attribute))
		*out.(*[]*stocktakingmodel.Attribute) = out0
		return nil
	})
	s.Register((*stocktakingmodel.ShopStocktake)(nil), (*stocktaking.ShopStocktake)(nil), func(arg, out interface{}) error {
		Convert_stocktakingmodel_ShopStocktake_stocktaking_ShopStocktake(arg.(*stocktakingmodel.ShopStocktake), out.(*stocktaking.ShopStocktake))
		return nil
	})
	s.Register(([]*stocktakingmodel.ShopStocktake)(nil), (*[]*stocktaking.ShopStocktake)(nil), func(arg, out interface{}) error {
		out0 := Convert_stocktakingmodel_ShopStocktakes_stocktaking_ShopStocktakes(arg.([]*stocktakingmodel.ShopStocktake))
		*out.(*[]*stocktaking.ShopStocktake) = out0
		return nil
	})
	s.Register((*stocktaking.ShopStocktake)(nil), (*stocktakingmodel.ShopStocktake)(nil), func(arg, out interface{}) error {
		Convert_stocktaking_ShopStocktake_stocktakingmodel_ShopStocktake(arg.(*stocktaking.ShopStocktake), out.(*stocktakingmodel.ShopStocktake))
		return nil
	})
	s.Register(([]*stocktaking.ShopStocktake)(nil), (*[]*stocktakingmodel.ShopStocktake)(nil), func(arg, out interface{}) error {
		out0 := Convert_stocktaking_ShopStocktakes_stocktakingmodel_ShopStocktakes(arg.([]*stocktaking.ShopStocktake))
		*out.(*[]*stocktakingmodel.ShopStocktake) = out0
		return nil
	})
	s.Register((*stocktaking.CreateStocktakeRequest)(nil), (*stocktaking.ShopStocktake)(nil), func(arg, out interface{}) error {
		Apply_stocktaking_CreateStocktakeRequest_stocktaking_ShopStocktake(arg.(*stocktaking.CreateStocktakeRequest), out.(*stocktaking.ShopStocktake))
		return nil
	})
	s.Register((*stocktaking.UpdateStocktakeRequest)(nil), (*stocktaking.ShopStocktake)(nil), func(arg, out interface{}) error {
		Apply_stocktaking_UpdateStocktakeRequest_stocktaking_ShopStocktake(arg.(*stocktaking.UpdateStocktakeRequest), out.(*stocktaking.ShopStocktake))
		return nil
	})
	s.Register((*stocktakingmodel.StocktakeLine)(nil), (*stocktaking.StocktakeLine)(nil), func(arg, out interface{}) error {
		Convert_stocktakingmodel_StocktakeLine_stocktaking_StocktakeLine(arg.(*stocktakingmodel.StocktakeLine), out.(*stocktaking.StocktakeLine))
		return nil
	})
	s.Register(([]*stocktakingmodel.StocktakeLine)(nil), (*[]*stocktaking.StocktakeLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_stocktakingmodel_StocktakeLines_stocktaking_StocktakeLines(arg.([]*stocktakingmodel.StocktakeLine))
		*out.(*[]*stocktaking.StocktakeLine) = out0
		return nil
	})
	s.Register((*stocktaking.StocktakeLine)(nil), (*stocktakingmodel.StocktakeLine)(nil), func(arg, out interface{}) error {
		Convert_stocktaking_StocktakeLine_stocktakingmodel_StocktakeLine(arg.(*stocktaking.StocktakeLine), out.(*stocktakingmodel.StocktakeLine))
		return nil
	})
	s.Register(([]*stocktaking.StocktakeLine)(nil), (*[]*stocktakingmodel.StocktakeLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_stocktaking_StocktakeLines_stocktakingmodel_StocktakeLines(arg.([]*stocktaking.StocktakeLine))
		*out.(*[]*stocktakingmodel.StocktakeLine) = out0
		return nil
	})
}

//-- convert etop.vn/api/main/stocktaking.Attribute --//

func Convert_stocktakingmodel_Attribute_stocktaking_Attribute(arg *stocktakingmodel.Attribute, out *stocktaking.Attribute) *stocktaking.Attribute {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &stocktaking.Attribute{}
	}
	convert_stocktakingmodel_Attribute_stocktaking_Attribute(arg, out)
	return out
}

func convert_stocktakingmodel_Attribute_stocktaking_Attribute(arg *stocktakingmodel.Attribute, out *stocktaking.Attribute) {
	out.Name = arg.Name   // simple assign
	out.Value = arg.Value // simple assign
}

func Convert_stocktakingmodel_Attributes_stocktaking_Attributes(args []*stocktakingmodel.Attribute) (outs []*stocktaking.Attribute) {
	tmps := make([]stocktaking.Attribute, len(args))
	outs = make([]*stocktaking.Attribute, len(args))
	for i := range tmps {
		outs[i] = Convert_stocktakingmodel_Attribute_stocktaking_Attribute(args[i], &tmps[i])
	}
	return outs
}

func Convert_stocktaking_Attribute_stocktakingmodel_Attribute(arg *stocktaking.Attribute, out *stocktakingmodel.Attribute) *stocktakingmodel.Attribute {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &stocktakingmodel.Attribute{}
	}
	convert_stocktaking_Attribute_stocktakingmodel_Attribute(arg, out)
	return out
}

func convert_stocktaking_Attribute_stocktakingmodel_Attribute(arg *stocktaking.Attribute, out *stocktakingmodel.Attribute) {
	out.Name = arg.Name   // simple assign
	out.Value = arg.Value // simple assign
}

func Convert_stocktaking_Attributes_stocktakingmodel_Attributes(args []*stocktaking.Attribute) (outs []*stocktakingmodel.Attribute) {
	tmps := make([]stocktakingmodel.Attribute, len(args))
	outs = make([]*stocktakingmodel.Attribute, len(args))
	for i := range tmps {
		outs[i] = Convert_stocktaking_Attribute_stocktakingmodel_Attribute(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/api/main/stocktaking.ShopStocktake --//

func Convert_stocktakingmodel_ShopStocktake_stocktaking_ShopStocktake(arg *stocktakingmodel.ShopStocktake, out *stocktaking.ShopStocktake) *stocktaking.ShopStocktake {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &stocktaking.ShopStocktake{}
	}
	convert_stocktakingmodel_ShopStocktake_stocktaking_ShopStocktake(arg, out)
	return out
}

func convert_stocktakingmodel_ShopStocktake_stocktaking_ShopStocktake(arg *stocktakingmodel.ShopStocktake, out *stocktaking.ShopStocktake) {
	out.ID = arg.ID                       // simple assign
	out.ShopID = arg.ShopID               // simple assign
	out.TotalQuantity = arg.TotalQuantity // simple assign
	out.CreatedBy = arg.CreatedBy         // simple assign
	out.UpdatedBy = arg.UpdatedBy         // simple assign
	out.CancelReason = arg.CancelReason   // simple assign
	out.Note = arg.Note                   // simple assign
	out.Code = arg.Code                   // simple assign
	out.CodeNorm = arg.CodeNorm           // simple assign
	out.CreatedAt = arg.CreatedAt         // simple assign
	out.UpdatedAt = arg.UpdatedAt         // simple assign
	out.ConfirmedAt = arg.ConfirmedAt     // simple assign
	out.CancelledAt = arg.CancelledAt     // simple assign
	out.Lines = Convert_stocktakingmodel_StocktakeLines_stocktaking_StocktakeLines(arg.Lines)
	out.Status = etop.Status3(arg.Status) // simple conversion
}

func Convert_stocktakingmodel_ShopStocktakes_stocktaking_ShopStocktakes(args []*stocktakingmodel.ShopStocktake) (outs []*stocktaking.ShopStocktake) {
	tmps := make([]stocktaking.ShopStocktake, len(args))
	outs = make([]*stocktaking.ShopStocktake, len(args))
	for i := range tmps {
		outs[i] = Convert_stocktakingmodel_ShopStocktake_stocktaking_ShopStocktake(args[i], &tmps[i])
	}
	return outs
}

func Convert_stocktaking_ShopStocktake_stocktakingmodel_ShopStocktake(arg *stocktaking.ShopStocktake, out *stocktakingmodel.ShopStocktake) *stocktakingmodel.ShopStocktake {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &stocktakingmodel.ShopStocktake{}
	}
	convert_stocktaking_ShopStocktake_stocktakingmodel_ShopStocktake(arg, out)
	return out
}

func convert_stocktaking_ShopStocktake_stocktakingmodel_ShopStocktake(arg *stocktaking.ShopStocktake, out *stocktakingmodel.ShopStocktake) {
	out.ID = arg.ID                            // simple assign
	out.ShopID = arg.ShopID                    // simple assign
	out.TotalQuantity = arg.TotalQuantity      // simple assign
	out.CreatedBy = arg.CreatedBy              // simple assign
	out.UpdatedBy = arg.UpdatedBy              // simple assign
	out.CancelReason = arg.CancelReason        // simple assign
	out.Code = arg.Code                        // simple assign
	out.CodeNorm = arg.CodeNorm                // simple assign
	out.Status = etopmodel.Status3(arg.Status) // simple conversion
	out.CreatedAt = arg.CreatedAt              // simple assign
	out.UpdatedAt = arg.UpdatedAt              // simple assign
	out.ConfirmedAt = arg.ConfirmedAt          // simple assign
	out.CancelledAt = arg.CancelledAt          // simple assign
	out.Lines = Convert_stocktaking_StocktakeLines_stocktakingmodel_StocktakeLines(arg.Lines)
	out.Note = arg.Note // simple assign
}

func Convert_stocktaking_ShopStocktakes_stocktakingmodel_ShopStocktakes(args []*stocktaking.ShopStocktake) (outs []*stocktakingmodel.ShopStocktake) {
	tmps := make([]stocktakingmodel.ShopStocktake, len(args))
	outs = make([]*stocktakingmodel.ShopStocktake, len(args))
	for i := range tmps {
		outs[i] = Convert_stocktaking_ShopStocktake_stocktakingmodel_ShopStocktake(args[i], &tmps[i])
	}
	return outs
}

func Apply_stocktaking_CreateStocktakeRequest_stocktaking_ShopStocktake(arg *stocktaking.CreateStocktakeRequest, out *stocktaking.ShopStocktake) *stocktaking.ShopStocktake {
	return ConvertCreateStocktake(arg, out)
}

func apply_stocktaking_CreateStocktakeRequest_stocktaking_ShopStocktake(arg *stocktaking.CreateStocktakeRequest, out *stocktaking.ShopStocktake) {
	out.ID = 0                            // zero value
	out.ShopID = arg.ShopID               // simple assign
	out.TotalQuantity = arg.TotalQuantity // simple assign
	out.CreatedBy = arg.CreatedBy         // simple assign
	out.UpdatedBy = 0                     // zero value
	out.CancelReason = ""                 // zero value
	out.Note = arg.Note                   // simple assign
	out.Code = ""                         // zero value
	out.CodeNorm = 0                      // zero value
	out.CreatedAt = time.Time{}           // zero value
	out.UpdatedAt = time.Time{}           // zero value
	out.ConfirmedAt = time.Time{}         // zero value
	out.CancelledAt = time.Time{}         // zero value
	out.Lines = arg.Lines                 // simple assign
	out.Status = 0                        // zero value
}

func Apply_stocktaking_UpdateStocktakeRequest_stocktaking_ShopStocktake(arg *stocktaking.UpdateStocktakeRequest, out *stocktaking.ShopStocktake) *stocktaking.ShopStocktake {
	return ConvertUpdateStocktake(arg, out)
}

func apply_stocktaking_UpdateStocktakeRequest_stocktaking_ShopStocktake(arg *stocktaking.UpdateStocktakeRequest, out *stocktaking.ShopStocktake) {
	out.ID = arg.ID                       // simple assign
	out.ShopID = arg.ShopID               // simple assign
	out.TotalQuantity = arg.TotalQuantity // simple assign
	out.CreatedBy = out.CreatedBy         // no change
	out.UpdatedBy = arg.UpdatedBy         // simple assign
	out.CancelReason = out.CancelReason   // no change
	out.Note = arg.Note                   // simple assign
	out.Code = out.Code                   // no change
	out.CodeNorm = out.CodeNorm           // no change
	out.CreatedAt = out.CreatedAt         // no change
	out.UpdatedAt = out.UpdatedAt         // no change
	out.ConfirmedAt = out.ConfirmedAt     // no change
	out.CancelledAt = out.CancelledAt     // no change
	out.Lines = arg.Lines                 // simple assign
	out.Status = out.Status               // no change
}

//-- convert etop.vn/api/main/stocktaking.StocktakeLine --//

func Convert_stocktakingmodel_StocktakeLine_stocktaking_StocktakeLine(arg *stocktakingmodel.StocktakeLine, out *stocktaking.StocktakeLine) *stocktaking.StocktakeLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &stocktaking.StocktakeLine{}
	}
	convert_stocktakingmodel_StocktakeLine_stocktaking_StocktakeLine(arg, out)
	return out
}

func convert_stocktakingmodel_StocktakeLine_stocktaking_StocktakeLine(arg *stocktakingmodel.StocktakeLine, out *stocktaking.StocktakeLine) {
	out.ProductID = arg.ProductID     // simple assign
	out.ProductName = arg.ProductName // simple assign
	out.VariantID = arg.VariantID     // simple assign
	out.OldQuantity = arg.OldQuantity // simple assign
	out.NewQuantity = arg.NewQuantity // simple assign
	out.VariantName = arg.VariantName // simple assign
	out.Code = arg.Code               // simple assign
	out.ImageURL = arg.ImageURL       // simple assign
	out.CostPrice = arg.CostPrice     // simple assign
	out.Attributes = Convert_stocktakingmodel_Attributes_stocktaking_Attributes(arg.Attributes)
}

func Convert_stocktakingmodel_StocktakeLines_stocktaking_StocktakeLines(args []*stocktakingmodel.StocktakeLine) (outs []*stocktaking.StocktakeLine) {
	tmps := make([]stocktaking.StocktakeLine, len(args))
	outs = make([]*stocktaking.StocktakeLine, len(args))
	for i := range tmps {
		outs[i] = Convert_stocktakingmodel_StocktakeLine_stocktaking_StocktakeLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_stocktaking_StocktakeLine_stocktakingmodel_StocktakeLine(arg *stocktaking.StocktakeLine, out *stocktakingmodel.StocktakeLine) *stocktakingmodel.StocktakeLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &stocktakingmodel.StocktakeLine{}
	}
	convert_stocktaking_StocktakeLine_stocktakingmodel_StocktakeLine(arg, out)
	return out
}

func convert_stocktaking_StocktakeLine_stocktakingmodel_StocktakeLine(arg *stocktaking.StocktakeLine, out *stocktakingmodel.StocktakeLine) {
	out.ProductName = arg.ProductName // simple assign
	out.ProductID = arg.ProductID     // simple assign
	out.VariantID = arg.VariantID     // simple assign
	out.OldQuantity = arg.OldQuantity // simple assign
	out.NewQuantity = arg.NewQuantity // simple assign
	out.VariantName = arg.VariantName // simple assign
	out.Name = ""                     // zero value
	out.Code = arg.Code               // simple assign
	out.ImageURL = arg.ImageURL       // simple assign
	out.Attributes = Convert_stocktaking_Attributes_stocktakingmodel_Attributes(arg.Attributes)
	out.CostPrice = arg.CostPrice // simple assign
}

func Convert_stocktaking_StocktakeLines_stocktakingmodel_StocktakeLines(args []*stocktaking.StocktakeLine) (outs []*stocktakingmodel.StocktakeLine) {
	tmps := make([]stocktakingmodel.StocktakeLine, len(args))
	outs = make([]*stocktakingmodel.StocktakeLine, len(args))
	for i := range tmps {
		outs[i] = Convert_stocktaking_StocktakeLine_stocktakingmodel_StocktakeLine(args[i], &tmps[i])
	}
	return outs
}
