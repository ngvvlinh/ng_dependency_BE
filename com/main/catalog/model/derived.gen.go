// Code generated by goderive DO NOT EDIT.

package model

import (
	"database/sql"
	"time"

	sq "etop.vn/backend/pkg/common/sq"
	core "etop.vn/backend/pkg/common/sq/core"
)

type SQLWriter = core.SQLWriter

// Type ShopVariantWithProduct represents a join
func sqlgenShopVariantWithProduct(_ *ShopVariantWithProduct, _ *ShopProduct, as sq.AS, t0 sq.JOIN_TYPE, _ *ShopVariant, a0 sq.AS, c0 string) bool {
	__sqlShopVariantWithProduct_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlShopVariantWithProduct_As = as
	__sqlShopVariantWithProduct_JoinAs = []sq.AS{a0}
	__sqlShopVariantWithProduct_JoinConds = []string{c0}
	return true
}

type ShopVariantWithProducts []*ShopVariantWithProduct

var __sqlShopVariantWithProduct_JoinTypes []sq.JOIN_TYPE
var __sqlShopVariantWithProduct_As sq.AS
var __sqlShopVariantWithProduct_JoinAs []sq.AS
var __sqlShopVariantWithProduct_JoinConds []string

func (m *ShopVariantWithProduct) SQLTableName() string  { return "shop_product" }
func (m *ShopVariantWithProducts) SQLTableName() string { return "shop_product" }

func (m *ShopVariantWithProduct) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopVariantWithProducts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopVariantWithProducts, 0, 128)
	for rows.Next() {
		m := new(ShopVariantWithProduct)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ShopVariantWithProduct) SQLSelect(w SQLWriter) error {
	(*ShopVariantWithProduct)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ShopVariantWithProduct)(nil).__sqlJoin(w, __sqlShopVariantWithProduct_JoinTypes)
	return nil
}

func (m *ShopVariantWithProducts) SQLSelect(w SQLWriter) error {
	return (*ShopVariantWithProduct)(nil).SQLSelect(w)
}

func (m *ShopVariantWithProduct) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlShopVariantWithProduct_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ShopVariantWithProducts) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ShopVariantWithProduct)(nil).SQLJoin(w, types)
}

func (m *ShopVariantWithProduct) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlShopVariantWithProduct_As), (*ShopProduct)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopVariantWithProduct_JoinAs[0]), (*ShopVariant)(nil).SQLListCols())
}

func (m *ShopVariantWithProduct) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("shop_product")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopVariantWithProduct_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*ShopVariant)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopVariantWithProduct_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopVariantWithProduct_JoinConds[0])
}

func (m *ShopVariantWithProduct) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.ShopProduct = new(ShopProduct)
	args = append(args, m.ShopProduct.SQLScanArgs(opts)...)
	m.ShopVariant = new(ShopVariant)
	args = append(args, m.ShopVariant.SQLScanArgs(opts)...)

	return args
}

// Type ShopVariant represents table shop_variant
func sqlgenShopVariant(_ *ShopVariant) bool { return true }

type ShopVariants []*ShopVariant

const __sqlShopVariant_Table = "shop_variant"
const __sqlShopVariant_ListCols = "\"shop_id\",\"variant_id\",\"product_id\",\"code\",\"name\",\"description\",\"desc_html\",\"short_desc\",\"image_urls\",\"note\",\"tags\",\"cost_price\",\"list_price\",\"retail_price\",\"status\",\"attributes\",\"created_at\",\"updated_at\",\"deleted_at\",\"name_norm\",\"attr_norm_kv\""
const __sqlShopVariant_Insert = "INSERT INTO \"shop_variant\" (" + __sqlShopVariant_ListCols + ") VALUES"
const __sqlShopVariant_Select = "SELECT " + __sqlShopVariant_ListCols + " FROM \"shop_variant\""
const __sqlShopVariant_Select_history = "SELECT " + __sqlShopVariant_ListCols + " FROM history.\"shop_variant\""
const __sqlShopVariant_UpdateAll = "UPDATE \"shop_variant\" SET (" + __sqlShopVariant_ListCols + ")"

func (m *ShopVariant) SQLTableName() string  { return "shop_variant" }
func (m *ShopVariants) SQLTableName() string { return "shop_variant" }
func (m *ShopVariant) SQLListCols() string   { return __sqlShopVariant_ListCols }

func (m *ShopVariant) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ShopID),
		core.Int64(m.VariantID),
		core.Int64(m.ProductID),
		core.String(m.Code),
		core.String(m.Name),
		core.String(m.Description),
		core.String(m.DescHTML),
		core.String(m.ShortDesc),
		core.Array{m.ImageURLs, opts},
		core.String(m.Note),
		core.Array{m.Tags, opts},
		core.Int32(m.CostPrice),
		core.Int32(m.ListPrice),
		core.Int32(m.RetailPrice),
		core.Int(m.Status),
		core.JSON{m.Attributes},
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
		core.String(m.NameNorm),
		core.String(m.AttrNormKv),
	}
}

func (m *ShopVariant) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ShopID),
		(*core.Int64)(&m.VariantID),
		(*core.Int64)(&m.ProductID),
		(*core.String)(&m.Code),
		(*core.String)(&m.Name),
		(*core.String)(&m.Description),
		(*core.String)(&m.DescHTML),
		(*core.String)(&m.ShortDesc),
		core.Array{&m.ImageURLs, opts},
		(*core.String)(&m.Note),
		core.Array{&m.Tags, opts},
		(*core.Int32)(&m.CostPrice),
		(*core.Int32)(&m.ListPrice),
		(*core.Int32)(&m.RetailPrice),
		(*core.Int)(&m.Status),
		core.JSON{&m.Attributes},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
		(*core.String)(&m.NameNorm),
		(*core.String)(&m.AttrNormKv),
	}
}

func (m *ShopVariant) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopVariants) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopVariants, 0, 128)
	for rows.Next() {
		m := new(ShopVariant)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopVariant) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Select)
	return nil
}

func (_ *ShopVariants) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Select)
	return nil
}

func (m *ShopVariant) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(21)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopVariants) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(21)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopVariant) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_variant")
	w.WriteRawString(" SET ")
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.VariantID != 0 {
		flag = true
		w.WriteName("variant_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.VariantID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.DescHTML != "" {
		flag = true
		w.WriteName("desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DescHTML)
	}
	if m.ShortDesc != "" {
		flag = true
		w.WriteName("short_desc")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShortDesc)
	}
	if m.ImageURLs != nil {
		flag = true
		w.WriteName("image_urls")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ImageURLs, opts})
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if m.Tags != nil {
		flag = true
		w.WriteName("tags")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.Tags, opts})
	}
	if m.CostPrice != 0 {
		flag = true
		w.WriteName("cost_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CostPrice)
	}
	if m.ListPrice != 0 {
		flag = true
		w.WriteName("list_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ListPrice)
	}
	if m.RetailPrice != 0 {
		flag = true
		w.WriteName("retail_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RetailPrice)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if m.Attributes != nil {
		flag = true
		w.WriteName("attributes")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Attributes})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if m.NameNorm != "" {
		flag = true
		w.WriteName("name_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.NameNorm)
	}
	if m.AttrNormKv != "" {
		flag = true
		w.WriteName("attr_norm_kv")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AttrNormKv)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopVariant) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(21)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopVariantHistory map[string]interface{}
type ShopVariantHistories []map[string]interface{}

func (m *ShopVariantHistory) SQLTableName() string  { return "history.\"shop_variant\"" }
func (m ShopVariantHistories) SQLTableName() string { return "history.\"shop_variant\"" }

func (m *ShopVariantHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Select_history)
	return nil
}

func (m ShopVariantHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Select_history)
	return nil
}

func (m ShopVariantHistory) ShopID() core.Interface      { return core.Interface{m["shop_id"]} }
func (m ShopVariantHistory) VariantID() core.Interface   { return core.Interface{m["variant_id"]} }
func (m ShopVariantHistory) ProductID() core.Interface   { return core.Interface{m["product_id"]} }
func (m ShopVariantHistory) Code() core.Interface        { return core.Interface{m["code"]} }
func (m ShopVariantHistory) Name() core.Interface        { return core.Interface{m["name"]} }
func (m ShopVariantHistory) Description() core.Interface { return core.Interface{m["description"]} }
func (m ShopVariantHistory) DescHTML() core.Interface    { return core.Interface{m["desc_html"]} }
func (m ShopVariantHistory) ShortDesc() core.Interface   { return core.Interface{m["short_desc"]} }
func (m ShopVariantHistory) ImageURLs() core.Interface   { return core.Interface{m["image_urls"]} }
func (m ShopVariantHistory) Note() core.Interface        { return core.Interface{m["note"]} }
func (m ShopVariantHistory) Tags() core.Interface        { return core.Interface{m["tags"]} }
func (m ShopVariantHistory) CostPrice() core.Interface   { return core.Interface{m["cost_price"]} }
func (m ShopVariantHistory) ListPrice() core.Interface   { return core.Interface{m["list_price"]} }
func (m ShopVariantHistory) RetailPrice() core.Interface { return core.Interface{m["retail_price"]} }
func (m ShopVariantHistory) Status() core.Interface      { return core.Interface{m["status"]} }
func (m ShopVariantHistory) Attributes() core.Interface  { return core.Interface{m["attributes"]} }
func (m ShopVariantHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m ShopVariantHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }
func (m ShopVariantHistory) DeletedAt() core.Interface   { return core.Interface{m["deleted_at"]} }
func (m ShopVariantHistory) NameNorm() core.Interface    { return core.Interface{m["name_norm"]} }
func (m ShopVariantHistory) AttrNormKv() core.Interface  { return core.Interface{m["attr_norm_kv"]} }

func (m *ShopVariantHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 21)
	args := make([]interface{}, 21)
	for i := 0; i < 21; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopVariantHistory, 21)
	res["shop_id"] = data[0]
	res["variant_id"] = data[1]
	res["product_id"] = data[2]
	res["code"] = data[3]
	res["name"] = data[4]
	res["description"] = data[5]
	res["desc_html"] = data[6]
	res["short_desc"] = data[7]
	res["image_urls"] = data[8]
	res["note"] = data[9]
	res["tags"] = data[10]
	res["cost_price"] = data[11]
	res["list_price"] = data[12]
	res["retail_price"] = data[13]
	res["status"] = data[14]
	res["attributes"] = data[15]
	res["created_at"] = data[16]
	res["updated_at"] = data[17]
	res["deleted_at"] = data[18]
	res["name_norm"] = data[19]
	res["attr_norm_kv"] = data[20]
	*m = res
	return nil
}

func (ms *ShopVariantHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 21)
	args := make([]interface{}, 21)
	for i := 0; i < 21; i++ {
		args[i] = &data[i]
	}
	res := make(ShopVariantHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopVariantHistory)
		m["shop_id"] = data[0]
		m["variant_id"] = data[1]
		m["product_id"] = data[2]
		m["code"] = data[3]
		m["name"] = data[4]
		m["description"] = data[5]
		m["desc_html"] = data[6]
		m["short_desc"] = data[7]
		m["image_urls"] = data[8]
		m["note"] = data[9]
		m["tags"] = data[10]
		m["cost_price"] = data[11]
		m["list_price"] = data[12]
		m["retail_price"] = data[13]
		m["status"] = data[14]
		m["attributes"] = data[15]
		m["created_at"] = data[16]
		m["updated_at"] = data[17]
		m["deleted_at"] = data[18]
		m["name_norm"] = data[19]
		m["attr_norm_kv"] = data[20]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ShopProduct represents table shop_product
func sqlgenShopProduct(_ *ShopProduct) bool { return true }

type ShopProducts []*ShopProduct

const __sqlShopProduct_Table = "shop_product"
const __sqlShopProduct_ListCols = "\"shop_id\",\"product_id\",\"code\",\"name\",\"description\",\"desc_html\",\"short_desc\",\"image_urls\",\"note\",\"tags\",\"unit\",\"category_id\",\"vendor_id\",\"cost_price\",\"list_price\",\"retail_price\",\"status\",\"created_at\",\"updated_at\",\"deleted_at\",\"name_norm\",\"name_norm_ua\",\"product_type\""
const __sqlShopProduct_Insert = "INSERT INTO \"shop_product\" (" + __sqlShopProduct_ListCols + ") VALUES"
const __sqlShopProduct_Select = "SELECT " + __sqlShopProduct_ListCols + " FROM \"shop_product\""
const __sqlShopProduct_Select_history = "SELECT " + __sqlShopProduct_ListCols + " FROM history.\"shop_product\""
const __sqlShopProduct_UpdateAll = "UPDATE \"shop_product\" SET (" + __sqlShopProduct_ListCols + ")"

func (m *ShopProduct) SQLTableName() string  { return "shop_product" }
func (m *ShopProducts) SQLTableName() string { return "shop_product" }
func (m *ShopProduct) SQLListCols() string   { return __sqlShopProduct_ListCols }

func (m *ShopProduct) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ShopID),
		core.Int64(m.ProductID),
		core.String(m.Code),
		core.String(m.Name),
		core.String(m.Description),
		core.String(m.DescHTML),
		core.String(m.ShortDesc),
		core.Array{m.ImageURLs, opts},
		core.String(m.Note),
		core.Array{m.Tags, opts},
		core.String(m.Unit),
		core.Int64(m.CategoryID),
		core.Int64(m.VendorID),
		core.Int32(m.CostPrice),
		core.Int32(m.ListPrice),
		core.Int32(m.RetailPrice),
		core.Int(m.Status),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
		core.String(m.NameNorm),
		core.String(m.NameNormUa),
		core.String(m.ProductType),
	}
}

func (m *ShopProduct) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ShopID),
		(*core.Int64)(&m.ProductID),
		(*core.String)(&m.Code),
		(*core.String)(&m.Name),
		(*core.String)(&m.Description),
		(*core.String)(&m.DescHTML),
		(*core.String)(&m.ShortDesc),
		core.Array{&m.ImageURLs, opts},
		(*core.String)(&m.Note),
		core.Array{&m.Tags, opts},
		(*core.String)(&m.Unit),
		(*core.Int64)(&m.CategoryID),
		(*core.Int64)(&m.VendorID),
		(*core.Int32)(&m.CostPrice),
		(*core.Int32)(&m.ListPrice),
		(*core.Int32)(&m.RetailPrice),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
		(*core.String)(&m.NameNorm),
		(*core.String)(&m.NameNormUa),
		(*core.String)(&m.ProductType),
	}
}

func (m *ShopProduct) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopProducts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopProducts, 0, 128)
	for rows.Next() {
		m := new(ShopProduct)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopProduct) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_Select)
	return nil
}

func (_ *ShopProducts) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_Select)
	return nil
}

func (m *ShopProduct) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(23)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopProducts) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(23)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopProduct) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_product")
	w.WriteRawString(" SET ")
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.DescHTML != "" {
		flag = true
		w.WriteName("desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DescHTML)
	}
	if m.ShortDesc != "" {
		flag = true
		w.WriteName("short_desc")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShortDesc)
	}
	if m.ImageURLs != nil {
		flag = true
		w.WriteName("image_urls")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ImageURLs, opts})
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if m.Tags != nil {
		flag = true
		w.WriteName("tags")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.Tags, opts})
	}
	if m.Unit != "" {
		flag = true
		w.WriteName("unit")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Unit)
	}
	if m.CategoryID != 0 {
		flag = true
		w.WriteName("category_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CategoryID)
	}
	if m.VendorID != 0 {
		flag = true
		w.WriteName("vendor_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.VendorID)
	}
	if m.CostPrice != 0 {
		flag = true
		w.WriteName("cost_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CostPrice)
	}
	if m.ListPrice != 0 {
		flag = true
		w.WriteName("list_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ListPrice)
	}
	if m.RetailPrice != 0 {
		flag = true
		w.WriteName("retail_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RetailPrice)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if m.NameNorm != "" {
		flag = true
		w.WriteName("name_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.NameNorm)
	}
	if m.NameNormUa != "" {
		flag = true
		w.WriteName("name_norm_ua")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.NameNormUa)
	}
	if m.ProductType != "" {
		flag = true
		w.WriteName("product_type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductType)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopProduct) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(23)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopProductHistory map[string]interface{}
type ShopProductHistories []map[string]interface{}

func (m *ShopProductHistory) SQLTableName() string  { return "history.\"shop_product\"" }
func (m ShopProductHistories) SQLTableName() string { return "history.\"shop_product\"" }

func (m *ShopProductHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_Select_history)
	return nil
}

func (m ShopProductHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_Select_history)
	return nil
}

func (m ShopProductHistory) ShopID() core.Interface      { return core.Interface{m["shop_id"]} }
func (m ShopProductHistory) ProductID() core.Interface   { return core.Interface{m["product_id"]} }
func (m ShopProductHistory) Code() core.Interface        { return core.Interface{m["code"]} }
func (m ShopProductHistory) Name() core.Interface        { return core.Interface{m["name"]} }
func (m ShopProductHistory) Description() core.Interface { return core.Interface{m["description"]} }
func (m ShopProductHistory) DescHTML() core.Interface    { return core.Interface{m["desc_html"]} }
func (m ShopProductHistory) ShortDesc() core.Interface   { return core.Interface{m["short_desc"]} }
func (m ShopProductHistory) ImageURLs() core.Interface   { return core.Interface{m["image_urls"]} }
func (m ShopProductHistory) Note() core.Interface        { return core.Interface{m["note"]} }
func (m ShopProductHistory) Tags() core.Interface        { return core.Interface{m["tags"]} }
func (m ShopProductHistory) Unit() core.Interface        { return core.Interface{m["unit"]} }
func (m ShopProductHistory) CategoryID() core.Interface  { return core.Interface{m["category_id"]} }
func (m ShopProductHistory) VendorID() core.Interface    { return core.Interface{m["vendor_id"]} }
func (m ShopProductHistory) CostPrice() core.Interface   { return core.Interface{m["cost_price"]} }
func (m ShopProductHistory) ListPrice() core.Interface   { return core.Interface{m["list_price"]} }
func (m ShopProductHistory) RetailPrice() core.Interface { return core.Interface{m["retail_price"]} }
func (m ShopProductHistory) Status() core.Interface      { return core.Interface{m["status"]} }
func (m ShopProductHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m ShopProductHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }
func (m ShopProductHistory) DeletedAt() core.Interface   { return core.Interface{m["deleted_at"]} }
func (m ShopProductHistory) NameNorm() core.Interface    { return core.Interface{m["name_norm"]} }
func (m ShopProductHistory) NameNormUa() core.Interface  { return core.Interface{m["name_norm_ua"]} }
func (m ShopProductHistory) ProductType() core.Interface { return core.Interface{m["product_type"]} }

func (m *ShopProductHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 23)
	args := make([]interface{}, 23)
	for i := 0; i < 23; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopProductHistory, 23)
	res["shop_id"] = data[0]
	res["product_id"] = data[1]
	res["code"] = data[2]
	res["name"] = data[3]
	res["description"] = data[4]
	res["desc_html"] = data[5]
	res["short_desc"] = data[6]
	res["image_urls"] = data[7]
	res["note"] = data[8]
	res["tags"] = data[9]
	res["unit"] = data[10]
	res["category_id"] = data[11]
	res["vendor_id"] = data[12]
	res["cost_price"] = data[13]
	res["list_price"] = data[14]
	res["retail_price"] = data[15]
	res["status"] = data[16]
	res["created_at"] = data[17]
	res["updated_at"] = data[18]
	res["deleted_at"] = data[19]
	res["name_norm"] = data[20]
	res["name_norm_ua"] = data[21]
	res["product_type"] = data[22]
	*m = res
	return nil
}

func (ms *ShopProductHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 23)
	args := make([]interface{}, 23)
	for i := 0; i < 23; i++ {
		args[i] = &data[i]
	}
	res := make(ShopProductHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopProductHistory)
		m["shop_id"] = data[0]
		m["product_id"] = data[1]
		m["code"] = data[2]
		m["name"] = data[3]
		m["description"] = data[4]
		m["desc_html"] = data[5]
		m["short_desc"] = data[6]
		m["image_urls"] = data[7]
		m["note"] = data[8]
		m["tags"] = data[9]
		m["unit"] = data[10]
		m["category_id"] = data[11]
		m["vendor_id"] = data[12]
		m["cost_price"] = data[13]
		m["list_price"] = data[14]
		m["retail_price"] = data[15]
		m["status"] = data[16]
		m["created_at"] = data[17]
		m["updated_at"] = data[18]
		m["deleted_at"] = data[19]
		m["name_norm"] = data[20]
		m["name_norm_ua"] = data[21]
		m["product_type"] = data[22]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ProductShopCollection represents table product_shop_collection
func sqlgenProductShopCollection(_ *ProductShopCollection) bool { return true }

type ProductShopCollections []*ProductShopCollection

const __sqlProductShopCollection_Table = "product_shop_collection"
const __sqlProductShopCollection_ListCols = "\"collection_id\",\"product_id\",\"shop_id\",\"status\",\"created_at\",\"updated_at\""
const __sqlProductShopCollection_Insert = "INSERT INTO \"product_shop_collection\" (" + __sqlProductShopCollection_ListCols + ") VALUES"
const __sqlProductShopCollection_Select = "SELECT " + __sqlProductShopCollection_ListCols + " FROM \"product_shop_collection\""
const __sqlProductShopCollection_Select_history = "SELECT " + __sqlProductShopCollection_ListCols + " FROM history.\"product_shop_collection\""
const __sqlProductShopCollection_UpdateAll = "UPDATE \"product_shop_collection\" SET (" + __sqlProductShopCollection_ListCols + ")"

func (m *ProductShopCollection) SQLTableName() string  { return "product_shop_collection" }
func (m *ProductShopCollections) SQLTableName() string { return "product_shop_collection" }
func (m *ProductShopCollection) SQLListCols() string   { return __sqlProductShopCollection_ListCols }

func (m *ProductShopCollection) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.CollectionID),
		core.Int64(m.ProductID),
		core.Int64(m.ShopID),
		core.Int(m.Status),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *ProductShopCollection) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.CollectionID),
		(*core.Int64)(&m.ProductID),
		(*core.Int64)(&m.ShopID),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *ProductShopCollection) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductShopCollections) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductShopCollections, 0, 128)
	for rows.Next() {
		m := new(ProductShopCollection)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ProductShopCollection) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_Select)
	return nil
}

func (_ *ProductShopCollections) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_Select)
	return nil
}

func (m *ProductShopCollection) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ProductShopCollections) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(6)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ProductShopCollection) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("product_shop_collection")
	w.WriteRawString(" SET ")
	if m.CollectionID != 0 {
		flag = true
		w.WriteName("collection_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CollectionID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ProductShopCollection) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ProductShopCollectionHistory map[string]interface{}
type ProductShopCollectionHistories []map[string]interface{}

func (m *ProductShopCollectionHistory) SQLTableName() string {
	return "history.\"product_shop_collection\""
}
func (m ProductShopCollectionHistories) SQLTableName() string {
	return "history.\"product_shop_collection\""
}

func (m *ProductShopCollectionHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_Select_history)
	return nil
}

func (m ProductShopCollectionHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_Select_history)
	return nil
}

func (m ProductShopCollectionHistory) CollectionID() core.Interface {
	return core.Interface{m["collection_id"]}
}
func (m ProductShopCollectionHistory) ProductID() core.Interface {
	return core.Interface{m["product_id"]}
}
func (m ProductShopCollectionHistory) ShopID() core.Interface { return core.Interface{m["shop_id"]} }
func (m ProductShopCollectionHistory) Status() core.Interface { return core.Interface{m["status"]} }
func (m ProductShopCollectionHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m ProductShopCollectionHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *ProductShopCollectionHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ProductShopCollectionHistory, 6)
	res["collection_id"] = data[0]
	res["product_id"] = data[1]
	res["shop_id"] = data[2]
	res["status"] = data[3]
	res["created_at"] = data[4]
	res["updated_at"] = data[5]
	*m = res
	return nil
}

func (ms *ProductShopCollectionHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	res := make(ProductShopCollectionHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ProductShopCollectionHistory)
		m["collection_id"] = data[0]
		m["product_id"] = data[1]
		m["shop_id"] = data[2]
		m["status"] = data[3]
		m["created_at"] = data[4]
		m["updated_at"] = data[5]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ShopCategory represents table shop_category
func sqlgenShopCategory(_ *ShopCategory) bool { return true }

type ShopCategories []*ShopCategory

const __sqlShopCategory_Table = "shop_category"
const __sqlShopCategory_ListCols = "\"id\",\"parent_id\",\"shop_id\",\"name\",\"status\",\"created_at\",\"updated_at\",\"deleted_at\""
const __sqlShopCategory_Insert = "INSERT INTO \"shop_category\" (" + __sqlShopCategory_ListCols + ") VALUES"
const __sqlShopCategory_Select = "SELECT " + __sqlShopCategory_ListCols + " FROM \"shop_category\""
const __sqlShopCategory_Select_history = "SELECT " + __sqlShopCategory_ListCols + " FROM history.\"shop_category\""
const __sqlShopCategory_UpdateAll = "UPDATE \"shop_category\" SET (" + __sqlShopCategory_ListCols + ")"

func (m *ShopCategory) SQLTableName() string   { return "shop_category" }
func (m *ShopCategories) SQLTableName() string { return "shop_category" }
func (m *ShopCategory) SQLListCols() string    { return __sqlShopCategory_ListCols }

func (m *ShopCategory) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ParentID),
		core.Int64(m.ShopID),
		core.String(m.Name),
		core.Int(m.Status),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
	}
}

func (m *ShopCategory) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ParentID),
		(*core.Int64)(&m.ShopID),
		(*core.String)(&m.Name),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *ShopCategory) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopCategories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopCategories, 0, 128)
	for rows.Next() {
		m := new(ShopCategory)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopCategory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCategory_Select)
	return nil
}

func (_ *ShopCategories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCategory_Select)
	return nil
}

func (m *ShopCategory) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCategory_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopCategories) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCategory_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(8)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopCategory) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_category")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ParentID != 0 {
		flag = true
		w.WriteName("parent_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ParentID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopCategory) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCategory_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopCategoryHistory map[string]interface{}
type ShopCategoryHistories []map[string]interface{}

func (m *ShopCategoryHistory) SQLTableName() string  { return "history.\"shop_category\"" }
func (m ShopCategoryHistories) SQLTableName() string { return "history.\"shop_category\"" }

func (m *ShopCategoryHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCategory_Select_history)
	return nil
}

func (m ShopCategoryHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCategory_Select_history)
	return nil
}

func (m ShopCategoryHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m ShopCategoryHistory) ParentID() core.Interface  { return core.Interface{m["parent_id"]} }
func (m ShopCategoryHistory) ShopID() core.Interface    { return core.Interface{m["shop_id"]} }
func (m ShopCategoryHistory) Name() core.Interface      { return core.Interface{m["name"]} }
func (m ShopCategoryHistory) Status() core.Interface    { return core.Interface{m["status"]} }
func (m ShopCategoryHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m ShopCategoryHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }
func (m ShopCategoryHistory) DeletedAt() core.Interface { return core.Interface{m["deleted_at"]} }

func (m *ShopCategoryHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopCategoryHistory, 8)
	res["id"] = data[0]
	res["parent_id"] = data[1]
	res["shop_id"] = data[2]
	res["name"] = data[3]
	res["status"] = data[4]
	res["created_at"] = data[5]
	res["updated_at"] = data[6]
	res["deleted_at"] = data[7]
	*m = res
	return nil
}

func (ms *ShopCategoryHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	res := make(ShopCategoryHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopCategoryHistory)
		m["id"] = data[0]
		m["parent_id"] = data[1]
		m["shop_id"] = data[2]
		m["name"] = data[3]
		m["status"] = data[4]
		m["created_at"] = data[5]
		m["updated_at"] = data[6]
		m["deleted_at"] = data[7]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ShopCollection represents table shop_collection
func sqlgenShopCollection(_ *ShopCollection) bool { return true }

type ShopCollections []*ShopCollection

const __sqlShopCollection_Table = "shop_collection"
const __sqlShopCollection_ListCols = "\"id\",\"shop_id\",\"name\",\"description\",\"desc_html\",\"short_desc\",\"created_at\",\"updated_at\""
const __sqlShopCollection_Insert = "INSERT INTO \"shop_collection\" (" + __sqlShopCollection_ListCols + ") VALUES"
const __sqlShopCollection_Select = "SELECT " + __sqlShopCollection_ListCols + " FROM \"shop_collection\""
const __sqlShopCollection_Select_history = "SELECT " + __sqlShopCollection_ListCols + " FROM history.\"shop_collection\""
const __sqlShopCollection_UpdateAll = "UPDATE \"shop_collection\" SET (" + __sqlShopCollection_ListCols + ")"

func (m *ShopCollection) SQLTableName() string  { return "shop_collection" }
func (m *ShopCollections) SQLTableName() string { return "shop_collection" }
func (m *ShopCollection) SQLListCols() string   { return __sqlShopCollection_ListCols }

func (m *ShopCollection) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ShopID),
		core.String(m.Name),
		core.String(m.Description),
		core.String(m.DescHTML),
		core.String(m.ShortDesc),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *ShopCollection) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ShopID),
		(*core.String)(&m.Name),
		(*core.String)(&m.Description),
		(*core.String)(&m.DescHTML),
		(*core.String)(&m.ShortDesc),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *ShopCollection) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopCollections) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopCollections, 0, 128)
	for rows.Next() {
		m := new(ShopCollection)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopCollection) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_Select)
	return nil
}

func (_ *ShopCollections) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_Select)
	return nil
}

func (m *ShopCollection) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopCollections) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(8)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopCollection) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_collection")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.DescHTML != "" {
		flag = true
		w.WriteName("desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DescHTML)
	}
	if m.ShortDesc != "" {
		flag = true
		w.WriteName("short_desc")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShortDesc)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopCollection) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopCollectionHistory map[string]interface{}
type ShopCollectionHistories []map[string]interface{}

func (m *ShopCollectionHistory) SQLTableName() string  { return "history.\"shop_collection\"" }
func (m ShopCollectionHistories) SQLTableName() string { return "history.\"shop_collection\"" }

func (m *ShopCollectionHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_Select_history)
	return nil
}

func (m ShopCollectionHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_Select_history)
	return nil
}

func (m ShopCollectionHistory) ID() core.Interface          { return core.Interface{m["id"]} }
func (m ShopCollectionHistory) ShopID() core.Interface      { return core.Interface{m["shop_id"]} }
func (m ShopCollectionHistory) Name() core.Interface        { return core.Interface{m["name"]} }
func (m ShopCollectionHistory) Description() core.Interface { return core.Interface{m["description"]} }
func (m ShopCollectionHistory) DescHTML() core.Interface    { return core.Interface{m["desc_html"]} }
func (m ShopCollectionHistory) ShortDesc() core.Interface   { return core.Interface{m["short_desc"]} }
func (m ShopCollectionHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m ShopCollectionHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }

func (m *ShopCollectionHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopCollectionHistory, 8)
	res["id"] = data[0]
	res["shop_id"] = data[1]
	res["name"] = data[2]
	res["description"] = data[3]
	res["desc_html"] = data[4]
	res["short_desc"] = data[5]
	res["created_at"] = data[6]
	res["updated_at"] = data[7]
	*m = res
	return nil
}

func (ms *ShopCollectionHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	res := make(ShopCollectionHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopCollectionHistory)
		m["id"] = data[0]
		m["shop_id"] = data[1]
		m["name"] = data[2]
		m["description"] = data[3]
		m["desc_html"] = data[4]
		m["short_desc"] = data[5]
		m["created_at"] = data[6]
		m["updated_at"] = data[7]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ShopProductCollection represents table shop_product_collection
func sqlgenShopProductCollection(_ *ShopProductCollection) bool { return true }

type ShopProductCollections []*ShopProductCollection

const __sqlShopProductCollection_Table = "shop_product_collection"
const __sqlShopProductCollection_ListCols = "\"product_id\",\"collection_id\",\"shop_id\",\"created_at\",\"updated_at\""
const __sqlShopProductCollection_Insert = "INSERT INTO \"shop_product_collection\" (" + __sqlShopProductCollection_ListCols + ") VALUES"
const __sqlShopProductCollection_Select = "SELECT " + __sqlShopProductCollection_ListCols + " FROM \"shop_product_collection\""
const __sqlShopProductCollection_Select_history = "SELECT " + __sqlShopProductCollection_ListCols + " FROM history.\"shop_product_collection\""
const __sqlShopProductCollection_UpdateAll = "UPDATE \"shop_product_collection\" SET (" + __sqlShopProductCollection_ListCols + ")"

func (m *ShopProductCollection) SQLTableName() string  { return "shop_product_collection" }
func (m *ShopProductCollections) SQLTableName() string { return "shop_product_collection" }
func (m *ShopProductCollection) SQLListCols() string   { return __sqlShopProductCollection_ListCols }

func (m *ShopProductCollection) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ProductID),
		core.Int64(m.CollectionID),
		core.Int64(m.ShopID),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *ShopProductCollection) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ProductID),
		(*core.Int64)(&m.CollectionID),
		(*core.Int64)(&m.ShopID),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *ShopProductCollection) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopProductCollections) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopProductCollections, 0, 128)
	for rows.Next() {
		m := new(ShopProductCollection)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopProductCollection) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProductCollection_Select)
	return nil
}

func (_ *ShopProductCollections) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProductCollection_Select)
	return nil
}

func (m *ShopProductCollection) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProductCollection_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(5)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopProductCollections) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProductCollection_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(5)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopProductCollection) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_product_collection")
	w.WriteRawString(" SET ")
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.CollectionID != 0 {
		flag = true
		w.WriteName("collection_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CollectionID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopProductCollection) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProductCollection_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(5)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopProductCollectionHistory map[string]interface{}
type ShopProductCollectionHistories []map[string]interface{}

func (m *ShopProductCollectionHistory) SQLTableName() string {
	return "history.\"shop_product_collection\""
}
func (m ShopProductCollectionHistories) SQLTableName() string {
	return "history.\"shop_product_collection\""
}

func (m *ShopProductCollectionHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProductCollection_Select_history)
	return nil
}

func (m ShopProductCollectionHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProductCollection_Select_history)
	return nil
}

func (m ShopProductCollectionHistory) ProductID() core.Interface {
	return core.Interface{m["product_id"]}
}
func (m ShopProductCollectionHistory) CollectionID() core.Interface {
	return core.Interface{m["collection_id"]}
}
func (m ShopProductCollectionHistory) ShopID() core.Interface { return core.Interface{m["shop_id"]} }
func (m ShopProductCollectionHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m ShopProductCollectionHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *ShopProductCollectionHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 5)
	args := make([]interface{}, 5)
	for i := 0; i < 5; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopProductCollectionHistory, 5)
	res["product_id"] = data[0]
	res["collection_id"] = data[1]
	res["shop_id"] = data[2]
	res["created_at"] = data[3]
	res["updated_at"] = data[4]
	*m = res
	return nil
}

func (ms *ShopProductCollectionHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 5)
	args := make([]interface{}, 5)
	for i := 0; i < 5; i++ {
		args[i] = &data[i]
	}
	res := make(ShopProductCollectionHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopProductCollectionHistory)
		m["product_id"] = data[0]
		m["collection_id"] = data[1]
		m["shop_id"] = data[2]
		m["created_at"] = data[3]
		m["updated_at"] = data[4]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
