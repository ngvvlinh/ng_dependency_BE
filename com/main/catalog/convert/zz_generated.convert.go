// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	catalog "etop.vn/api/main/catalog"
	catalogmodel "etop.vn/backend/com/main/catalog/model"
	etopmodel "etop.vn/backend/pkg/etop/model"
)

func convert_catalog_ShopProduct_catalogmodel_ShopProduct(in *catalog.ShopProduct, out *catalogmodel.ShopProduct) {
	out.ShopID = in.ShopID                    // simple assign
	out.ProductID = in.ProductID              // simple assign
	out.CollectionIDs = nil                   // types do not match
	out.Code = in.Code                        // simple assign
	out.Name = in.Name                        // simple assign
	out.Description = ""                      // zero value
	out.DescHTML = ""                         // zero value
	out.ShortDesc = ""                        // zero value
	out.ImageURLs = nil                       // types do not match
	out.Note = in.Note                        // simple assign
	out.Tags = nil                            // types do not match
	out.Unit = in.Unit                        // simple assign
	out.CategoryID = in.CategoryID            // simple assign
	out.CostPrice = 0                         // zero value
	out.ListPrice = 0                         // zero value
	out.RetailPrice = 0                       // zero value
	out.Status = etopmodel.Status3(in.Status) // simple conversion
	out.CreatedAt = in.CreatedAt              // simple assign
	out.UpdatedAt = in.UpdatedAt              // simple assign
	out.DeletedAt = time.Time{}               // zero value
	out.NameNorm = ""                         // zero value
	out.NameNormUa = ""                       // zero value
}

func convert_catalog_ShopProducts_catalogmodel_ShopProducts(ins []*catalog.ShopProduct) (outs []*catalogmodel.ShopProduct) {
	tmps := make([]catalogmodel.ShopProduct, len(ins))
	outs = make([]*catalogmodel.ShopProduct, len(ins))
	for i := range tmps {
		out := &tmps[i]
		outs[i] = out
		convert_catalog_ShopProduct_catalogmodel_ShopProduct(ins[i], out)
	}
	return outs
}

func convert_catalogmodel_ShopProduct_catalog_ShopProduct(in *catalogmodel.ShopProduct, out *catalog.ShopProduct) {
	out.ShopID = in.ShopID                          // simple assign
	out.ProductID = in.ProductID                    // simple assign
	out.Code = in.Code                              // simple assign
	out.Name = in.Name                              // simple assign
	out.Unit = in.Unit                              // simple assign
	out.ImageURLs = nil                             // types do not match
	out.Note = in.Note                              // simple assign
	out.DescriptionInfo = catalog.DescriptionInfo{} // zero value
	out.PriceInfo = catalog.PriceInfo{}             // zero value
	out.CategoryID = in.CategoryID                  // simple assign
	out.CollectionIDs = nil                         // types do not match
	out.Tags = nil                                  // types do not match
	out.Status = int32(in.Status)                   // simple conversion
	out.CreatedAt = in.CreatedAt                    // simple assign
	out.UpdatedAt = in.UpdatedAt                    // simple assign
}

func convert_catalogmodel_ShopProducts_catalog_ShopProducts(ins []*catalogmodel.ShopProduct) (outs []*catalog.ShopProduct) {
	tmps := make([]catalog.ShopProduct, len(ins))
	outs = make([]*catalog.ShopProduct, len(ins))
	for i := range tmps {
		out := &tmps[i]
		outs[i] = out
		convert_catalogmodel_ShopProduct_catalog_ShopProduct(ins[i], out)
	}
	return outs
}

func convert_catalog_ShopVariant_catalogmodel_ShopVariant(in *catalog.ShopVariant, out *catalogmodel.ShopVariant) {
	out.ShopID = in.ShopID                    // simple assign
	out.VariantID = in.VariantID              // simple assign
	out.ProductID = in.ProductID              // simple assign
	out.Code = in.Code                        // simple assign
	out.Name = in.Name                        // simple assign
	out.Description = ""                      // zero value
	out.DescHTML = ""                         // zero value
	out.ShortDesc = ""                        // zero value
	out.ImageURLs = nil                       // types do not match
	out.Note = in.Note                        // simple assign
	out.Tags = nil                            // zero value
	out.CostPrice = 0                         // zero value
	out.ListPrice = 0                         // zero value
	out.RetailPrice = 0                       // zero value
	out.Status = etopmodel.Status3(in.Status) // simple conversion
	out.Attributes = nil                      // types do not match
	out.CreatedAt = in.CreatedAt              // simple assign
	out.UpdatedAt = in.UpdatedAt              // simple assign
	out.DeletedAt = time.Time{}               // zero value
	out.NameNorm = ""                         // zero value
	out.AttrNormKv = ""                       // zero value
}

func convert_catalog_ShopVariants_catalogmodel_ShopVariants(ins []*catalog.ShopVariant) (outs []*catalogmodel.ShopVariant) {
	tmps := make([]catalogmodel.ShopVariant, len(ins))
	outs = make([]*catalogmodel.ShopVariant, len(ins))
	for i := range tmps {
		out := &tmps[i]
		outs[i] = out
		convert_catalog_ShopVariant_catalogmodel_ShopVariant(ins[i], out)
	}
	return outs
}

func convert_catalogmodel_ShopVariant_catalog_ShopVariant(in *catalogmodel.ShopVariant, out *catalog.ShopVariant) {
	out.ShopID = in.ShopID                          // simple assign
	out.ProductID = in.ProductID                    // simple assign
	out.VariantID = in.VariantID                    // simple assign
	out.Code = in.Code                              // simple assign
	out.Name = in.Name                              // simple assign
	out.DescriptionInfo = catalog.DescriptionInfo{} // zero value
	out.ImageURLs = nil                             // types do not match
	out.Status = int16(in.Status)                   // simple conversion
	out.Attributes = nil                            // types do not match
	out.PriceInfo = catalog.PriceInfo{}             // zero value
	out.Note = in.Note                              // simple assign
	out.CreatedAt = in.CreatedAt                    // simple assign
	out.UpdatedAt = in.UpdatedAt                    // simple assign
}

func convert_catalogmodel_ShopVariants_catalog_ShopVariants(ins []*catalogmodel.ShopVariant) (outs []*catalog.ShopVariant) {
	tmps := make([]catalog.ShopVariant, len(ins))
	outs = make([]*catalog.ShopVariant, len(ins))
	for i := range tmps {
		out := &tmps[i]
		outs[i] = out
		convert_catalogmodel_ShopVariant_catalog_ShopVariant(ins[i], out)
	}
	return outs
}
