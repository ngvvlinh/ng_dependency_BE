// Code generated by goderive DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	"time"

	"etop.vn/backend/pkg/common/sql/cmsql"
	core "etop.vn/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

// Type Refund represents table refund
func sqlgenRefund(_ *Refund) bool { return true }

type Refunds []*Refund

const __sqlRefund_Table = "refund"
const __sqlRefund_ListCols = "\"id\",\"shop_id\",\"order_id\",\"code\",\"code_norm\",\"note\",\"lines\",\"discount\",\"created_at\",\"updated_at\",\"cancelled_at\",\"confirmed_at\",\"created_by\",\"updated_by\",\"cancel_reason\",\"status\",\"customer_id\",\"total_amount\",\"basket_value\""
const __sqlRefund_Insert = "INSERT INTO \"refund\" (" + __sqlRefund_ListCols + ") VALUES"
const __sqlRefund_Select = "SELECT " + __sqlRefund_ListCols + " FROM \"refund\""
const __sqlRefund_Select_history = "SELECT " + __sqlRefund_ListCols + " FROM history.\"refund\""
const __sqlRefund_UpdateAll = "UPDATE \"refund\" SET (" + __sqlRefund_ListCols + ")"

func (m *Refund) SQLTableName() string  { return "refund" }
func (m *Refunds) SQLTableName() string { return "refund" }
func (m *Refund) SQLListCols() string   { return __sqlRefund_ListCols }

func (m *Refund) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlRefund_ListCols + " FROM \"refund\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*Refund)(nil))
}

func (m *Refund) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.ShopID,
		m.OrderID,
		core.String(m.Code),
		core.Int(m.CodeNorm),
		core.String(m.Note),
		core.JSON{m.Lines},
		core.Int(m.Discount),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.CancelledAt),
		core.Time(m.ConfirmedAt),
		m.CreatedBy,
		m.UpdatedBy,
		core.String(m.CancelReason),
		m.Status,
		m.CustomerID,
		core.Int(m.TotalAmount),
		core.Int(m.BasketValue),
	}
}

func (m *Refund) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.ShopID,
		&m.OrderID,
		(*core.String)(&m.Code),
		(*core.Int)(&m.CodeNorm),
		(*core.String)(&m.Note),
		core.JSON{&m.Lines},
		(*core.Int)(&m.Discount),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.CancelledAt),
		(*core.Time)(&m.ConfirmedAt),
		&m.CreatedBy,
		&m.UpdatedBy,
		(*core.String)(&m.CancelReason),
		&m.Status,
		&m.CustomerID,
		(*core.Int)(&m.TotalAmount),
		(*core.Int)(&m.BasketValue),
	}
}

func (m *Refund) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Refunds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Refunds, 0, 128)
	for rows.Next() {
		m := new(Refund)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Refund) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlRefund_Select)
	return nil
}

func (_ *Refunds) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlRefund_Select)
	return nil
}

func (m *Refund) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlRefund_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(19)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Refunds) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlRefund_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(19)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Refund) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("refund")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.OrderID != 0 {
		flag = true
		w.WriteName("order_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderID)
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.CodeNorm != 0 {
		flag = true
		w.WriteName("code_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CodeNorm)
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if m.Lines != nil {
		flag = true
		w.WriteName("lines")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Lines})
	}
	if m.Discount != 0 {
		flag = true
		w.WriteName("discount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Discount)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.CancelledAt.IsZero() {
		flag = true
		w.WriteName("cancelled_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CancelledAt)
	}
	if !m.ConfirmedAt.IsZero() {
		flag = true
		w.WriteName("confirmed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ConfirmedAt)
	}
	if m.CreatedBy != 0 {
		flag = true
		w.WriteName("created_by")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedBy)
	}
	if m.UpdatedBy != 0 {
		flag = true
		w.WriteName("updated_by")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UpdatedBy)
	}
	if m.CancelReason != "" {
		flag = true
		w.WriteName("cancel_reason")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CancelReason)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if m.CustomerID != 0 {
		flag = true
		w.WriteName("customer_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CustomerID)
	}
	if m.TotalAmount != 0 {
		flag = true
		w.WriteName("total_amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalAmount)
	}
	if m.BasketValue != 0 {
		flag = true
		w.WriteName("basket_value")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.BasketValue)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Refund) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlRefund_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(19)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type RefundHistory map[string]interface{}
type RefundHistories []map[string]interface{}

func (m *RefundHistory) SQLTableName() string  { return "history.\"refund\"" }
func (m RefundHistories) SQLTableName() string { return "history.\"refund\"" }

func (m *RefundHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlRefund_Select_history)
	return nil
}

func (m RefundHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlRefund_Select_history)
	return nil
}

func (m RefundHistory) ID() core.Interface           { return core.Interface{m["id"]} }
func (m RefundHistory) ShopID() core.Interface       { return core.Interface{m["shop_id"]} }
func (m RefundHistory) OrderID() core.Interface      { return core.Interface{m["order_id"]} }
func (m RefundHistory) Code() core.Interface         { return core.Interface{m["code"]} }
func (m RefundHistory) CodeNorm() core.Interface     { return core.Interface{m["code_norm"]} }
func (m RefundHistory) Note() core.Interface         { return core.Interface{m["note"]} }
func (m RefundHistory) Lines() core.Interface        { return core.Interface{m["lines"]} }
func (m RefundHistory) Discount() core.Interface     { return core.Interface{m["discount"]} }
func (m RefundHistory) CreatedAt() core.Interface    { return core.Interface{m["created_at"]} }
func (m RefundHistory) UpdatedAt() core.Interface    { return core.Interface{m["updated_at"]} }
func (m RefundHistory) CancelledAt() core.Interface  { return core.Interface{m["cancelled_at"]} }
func (m RefundHistory) ConfirmedAt() core.Interface  { return core.Interface{m["confirmed_at"]} }
func (m RefundHistory) CreatedBy() core.Interface    { return core.Interface{m["created_by"]} }
func (m RefundHistory) UpdatedBy() core.Interface    { return core.Interface{m["updated_by"]} }
func (m RefundHistory) CancelReason() core.Interface { return core.Interface{m["cancel_reason"]} }
func (m RefundHistory) Status() core.Interface       { return core.Interface{m["status"]} }
func (m RefundHistory) CustomerID() core.Interface   { return core.Interface{m["customer_id"]} }
func (m RefundHistory) TotalAmount() core.Interface  { return core.Interface{m["total_amount"]} }
func (m RefundHistory) BasketValue() core.Interface  { return core.Interface{m["basket_value"]} }

func (m *RefundHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 19)
	args := make([]interface{}, 19)
	for i := 0; i < 19; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(RefundHistory, 19)
	res["id"] = data[0]
	res["shop_id"] = data[1]
	res["order_id"] = data[2]
	res["code"] = data[3]
	res["code_norm"] = data[4]
	res["note"] = data[5]
	res["lines"] = data[6]
	res["discount"] = data[7]
	res["created_at"] = data[8]
	res["updated_at"] = data[9]
	res["cancelled_at"] = data[10]
	res["confirmed_at"] = data[11]
	res["created_by"] = data[12]
	res["updated_by"] = data[13]
	res["cancel_reason"] = data[14]
	res["status"] = data[15]
	res["customer_id"] = data[16]
	res["total_amount"] = data[17]
	res["basket_value"] = data[18]
	*m = res
	return nil
}

func (ms *RefundHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 19)
	args := make([]interface{}, 19)
	for i := 0; i < 19; i++ {
		args[i] = &data[i]
	}
	res := make(RefundHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(RefundHistory)
		m["id"] = data[0]
		m["shop_id"] = data[1]
		m["order_id"] = data[2]
		m["code"] = data[3]
		m["code_norm"] = data[4]
		m["note"] = data[5]
		m["lines"] = data[6]
		m["discount"] = data[7]
		m["created_at"] = data[8]
		m["updated_at"] = data[9]
		m["cancelled_at"] = data[10]
		m["confirmed_at"] = data[11]
		m["created_by"] = data[12]
		m["updated_by"] = data[13]
		m["cancel_reason"] = data[14]
		m["status"] = data[15]
		m["customer_id"] = data[16]
		m["total_amount"] = data[17]
		m["basket_value"] = data[18]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
