// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	refund "etop.vn/api/main/refund"
	catalogconvert "etop.vn/backend/com/main/catalog/convert"
	identityconvert "etop.vn/backend/com/main/identity/convert"
	refundmodel "etop.vn/backend/com/main/refund/model"
	conversion "etop.vn/backend/pkg/common/conversion"
)

/*
Custom conversions:
    convertCreate    // in use

Ignored functions:
    GenerateCode    // params are not pointer to named types
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*refundmodel.Refund)(nil), (*refund.Refund)(nil), func(arg, out interface{}) error {
		Convert_refundmodel_Refund_refund_Refund(arg.(*refundmodel.Refund), out.(*refund.Refund))
		return nil
	})
	s.Register(([]*refundmodel.Refund)(nil), (*[]*refund.Refund)(nil), func(arg, out interface{}) error {
		out0 := Convert_refundmodel_Refunds_refund_Refunds(arg.([]*refundmodel.Refund))
		*out.(*[]*refund.Refund) = out0
		return nil
	})
	s.Register((*refund.Refund)(nil), (*refundmodel.Refund)(nil), func(arg, out interface{}) error {
		Convert_refund_Refund_refundmodel_Refund(arg.(*refund.Refund), out.(*refundmodel.Refund))
		return nil
	})
	s.Register(([]*refund.Refund)(nil), (*[]*refundmodel.Refund)(nil), func(arg, out interface{}) error {
		out0 := Convert_refund_Refunds_refundmodel_Refunds(arg.([]*refund.Refund))
		*out.(*[]*refundmodel.Refund) = out0
		return nil
	})
	s.Register((*refund.CreateRefundArgs)(nil), (*refund.Refund)(nil), func(arg, out interface{}) error {
		Apply_refund_CreateRefundArgs_refund_Refund(arg.(*refund.CreateRefundArgs), out.(*refund.Refund))
		return nil
	})
	s.Register((*refund.UpdateRefundArgs)(nil), (*refund.Refund)(nil), func(arg, out interface{}) error {
		Apply_refund_UpdateRefundArgs_refund_Refund(arg.(*refund.UpdateRefundArgs), out.(*refund.Refund))
		return nil
	})
	s.Register((*refundmodel.RefundLine)(nil), (*refund.RefundLine)(nil), func(arg, out interface{}) error {
		Convert_refundmodel_RefundLine_refund_RefundLine(arg.(*refundmodel.RefundLine), out.(*refund.RefundLine))
		return nil
	})
	s.Register(([]*refundmodel.RefundLine)(nil), (*[]*refund.RefundLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_refundmodel_RefundLines_refund_RefundLines(arg.([]*refundmodel.RefundLine))
		*out.(*[]*refund.RefundLine) = out0
		return nil
	})
	s.Register((*refund.RefundLine)(nil), (*refundmodel.RefundLine)(nil), func(arg, out interface{}) error {
		Convert_refund_RefundLine_refundmodel_RefundLine(arg.(*refund.RefundLine), out.(*refundmodel.RefundLine))
		return nil
	})
	s.Register(([]*refund.RefundLine)(nil), (*[]*refundmodel.RefundLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_refund_RefundLines_refundmodel_RefundLines(arg.([]*refund.RefundLine))
		*out.(*[]*refundmodel.RefundLine) = out0
		return nil
	})
}

//-- convert etop.vn/api/main/refund.Refund --//

func Convert_refundmodel_Refund_refund_Refund(arg *refundmodel.Refund, out *refund.Refund) *refund.Refund {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &refund.Refund{}
	}
	convert_refundmodel_Refund_refund_Refund(arg, out)
	return out
}

func convert_refundmodel_Refund_refund_Refund(arg *refundmodel.Refund, out *refund.Refund) {
	out.ID = arg.ID             // simple assign
	out.ShopID = arg.ShopID     // simple assign
	out.OrderID = arg.OrderID   // simple assign
	out.Note = arg.Note         // simple assign
	out.Code = arg.Code         // simple assign
	out.CodeNorm = arg.CodeNorm // simple assign
	out.Lines = Convert_refundmodel_RefundLines_refund_RefundLines(arg.Lines)
	out.CreatedAt = arg.CreatedAt       // simple assign
	out.UpdatedAt = arg.UpdatedAt       // simple assign
	out.CancelledAt = arg.CancelledAt   // simple assign
	out.ConfirmedAt = arg.ConfirmedAt   // simple assign
	out.CreatedBy = arg.CreatedBy       // simple assign
	out.UpdatedBy = arg.UpdatedBy       // simple assign
	out.CancelReason = arg.CancelReason // simple assign
	out.AdjustmentLines = identityconvert.Convert_sharemodel_AdjustmentLines_inttypes_AdjustmentLines(arg.AdjustmentLines)
	out.TotalAdjustment = arg.TotalAdjustment // simple assign
	out.Status = arg.Status                   // simple assign
	out.CustomerID = arg.CustomerID           // simple assign
	out.TotalAmount = arg.TotalAmount         // simple assign
	out.BasketValue = arg.BasketValue         // simple assign
}

func Convert_refundmodel_Refunds_refund_Refunds(args []*refundmodel.Refund) (outs []*refund.Refund) {
	tmps := make([]refund.Refund, len(args))
	outs = make([]*refund.Refund, len(args))
	for i := range tmps {
		outs[i] = Convert_refundmodel_Refund_refund_Refund(args[i], &tmps[i])
	}
	return outs
}

func Convert_refund_Refund_refundmodel_Refund(arg *refund.Refund, out *refundmodel.Refund) *refundmodel.Refund {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &refundmodel.Refund{}
	}
	convert_refund_Refund_refundmodel_Refund(arg, out)
	return out
}

func convert_refund_Refund_refundmodel_Refund(arg *refund.Refund, out *refundmodel.Refund) {
	out.ID = arg.ID             // simple assign
	out.ShopID = arg.ShopID     // simple assign
	out.OrderID = arg.OrderID   // simple assign
	out.Code = arg.Code         // simple assign
	out.CodeNorm = arg.CodeNorm // simple assign
	out.Note = arg.Note         // simple assign
	out.Lines = Convert_refund_RefundLines_refundmodel_RefundLines(arg.Lines)
	out.AdjustmentLines = identityconvert.Convert_inttypes_AdjustmentLines_sharemodel_AdjustmentLines(arg.AdjustmentLines)
	out.TotalAdjustment = arg.TotalAdjustment // simple assign
	out.CreatedAt = arg.CreatedAt             // simple assign
	out.UpdatedAt = arg.UpdatedAt             // simple assign
	out.CancelledAt = arg.CancelledAt         // simple assign
	out.ConfirmedAt = arg.ConfirmedAt         // simple assign
	out.CreatedBy = arg.CreatedBy             // simple assign
	out.UpdatedBy = arg.UpdatedBy             // simple assign
	out.CancelReason = arg.CancelReason       // simple assign
	out.Status = arg.Status                   // simple assign
	out.CustomerID = arg.CustomerID           // simple assign
	out.TotalAmount = arg.TotalAmount         // simple assign
	out.BasketValue = arg.BasketValue         // simple assign
}

func Convert_refund_Refunds_refundmodel_Refunds(args []*refund.Refund) (outs []*refundmodel.Refund) {
	tmps := make([]refundmodel.Refund, len(args))
	outs = make([]*refundmodel.Refund, len(args))
	for i := range tmps {
		outs[i] = Convert_refund_Refund_refundmodel_Refund(args[i], &tmps[i])
	}
	return outs
}

func Apply_refund_CreateRefundArgs_refund_Refund(arg *refund.CreateRefundArgs, out *refund.Refund) *refund.Refund {
	return convertCreate(arg, out)
}

func apply_refund_CreateRefundArgs_refund_Refund(arg *refund.CreateRefundArgs, out *refund.Refund) {
	out.ID = 0                                // zero value
	out.ShopID = arg.ShopID                   // simple assign
	out.OrderID = arg.OrderID                 // simple assign
	out.Note = arg.Note                       // simple assign
	out.Code = ""                             // zero value
	out.CodeNorm = 0                          // zero value
	out.Lines = arg.Lines                     // simple assign
	out.CreatedAt = time.Time{}               // zero value
	out.UpdatedAt = time.Time{}               // zero value
	out.CancelledAt = time.Time{}             // zero value
	out.ConfirmedAt = time.Time{}             // zero value
	out.CreatedBy = arg.CreatedBy             // simple assign
	out.UpdatedBy = 0                         // zero value
	out.CancelReason = ""                     // zero value
	out.AdjustmentLines = arg.AdjustmentLines // simple assign
	out.TotalAdjustment = arg.TotalAdjustment // simple assign
	out.Status = 0                            // zero value
	out.CustomerID = 0                        // zero value
	out.TotalAmount = arg.TotalAmount         // simple assign
	out.BasketValue = arg.BasketValue         // simple assign
}

func Apply_refund_UpdateRefundArgs_refund_Refund(arg *refund.UpdateRefundArgs, out *refund.Refund) *refund.Refund {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &refund.Refund{}
	}
	apply_refund_UpdateRefundArgs_refund_Refund(arg, out)
	return out
}

func apply_refund_UpdateRefundArgs_refund_Refund(arg *refund.UpdateRefundArgs, out *refund.Refund) {
	out.ID = arg.ID                                                      // simple assign
	out.ShopID = arg.ShopID                                              // simple assign
	out.OrderID = out.OrderID                                            // no change
	out.Note = arg.Note.Apply(out.Note)                                  // apply change
	out.Code = out.Code                                                  // no change
	out.CodeNorm = out.CodeNorm                                          // no change
	out.Lines = arg.Lines                                                // simple assign
	out.CreatedAt = out.CreatedAt                                        // no change
	out.UpdatedAt = out.UpdatedAt                                        // no change
	out.CancelledAt = out.CancelledAt                                    // no change
	out.ConfirmedAt = out.ConfirmedAt                                    // no change
	out.CreatedBy = out.CreatedBy                                        // no change
	out.UpdatedBy = out.UpdatedBy                                        // no change
	out.CancelReason = out.CancelReason                                  // no change
	out.AdjustmentLines = arg.AdjustmentLines                            // simple assign
	out.TotalAdjustment = arg.TotalAdjustment.Apply(out.TotalAdjustment) // apply change
	out.Status = out.Status                                              // no change
	out.CustomerID = out.CustomerID                                      // no change
	out.TotalAmount = arg.TotalAmount.Apply(out.TotalAmount)             // apply change
	out.BasketValue = arg.BasketValue.Apply(out.BasketValue)             // apply change
}

//-- convert etop.vn/api/main/refund.RefundLine --//

func Convert_refundmodel_RefundLine_refund_RefundLine(arg *refundmodel.RefundLine, out *refund.RefundLine) *refund.RefundLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &refund.RefundLine{}
	}
	convert_refundmodel_RefundLine_refund_RefundLine(arg, out)
	return out
}

func convert_refundmodel_RefundLine_refund_RefundLine(arg *refundmodel.RefundLine, out *refund.RefundLine) {
	out.VariantID = arg.VariantID     // simple assign
	out.Quantity = arg.Quantity       // simple assign
	out.Code = arg.Code               // simple assign
	out.ImageURL = arg.ImageURL       // simple assign
	out.RetailPrice = arg.RetailPrice // simple assign
	out.ProductID = arg.ProductID     // simple assign
	out.ProductName = arg.ProductName // simple assign
	out.Attributes = catalogconvert.Convert_catalogmodel_ProductAttributes_catalogtypes_Attributes(arg.Attributes)
	out.Adjustment = arg.Adjustment // simple assign
}

func Convert_refundmodel_RefundLines_refund_RefundLines(args []*refundmodel.RefundLine) (outs []*refund.RefundLine) {
	tmps := make([]refund.RefundLine, len(args))
	outs = make([]*refund.RefundLine, len(args))
	for i := range tmps {
		outs[i] = Convert_refundmodel_RefundLine_refund_RefundLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_refund_RefundLine_refundmodel_RefundLine(arg *refund.RefundLine, out *refundmodel.RefundLine) *refundmodel.RefundLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &refundmodel.RefundLine{}
	}
	convert_refund_RefundLine_refundmodel_RefundLine(arg, out)
	return out
}

func convert_refund_RefundLine_refundmodel_RefundLine(arg *refund.RefundLine, out *refundmodel.RefundLine) {
	out.VariantID = arg.VariantID     // simple assign
	out.Quantity = arg.Quantity       // simple assign
	out.Code = arg.Code               // simple assign
	out.ImageURL = arg.ImageURL       // simple assign
	out.ProductName = arg.ProductName // simple assign
	out.RetailPrice = arg.RetailPrice // simple assign
	out.ProductID = arg.ProductID     // simple assign
	out.Attributes = catalogconvert.Convert_catalogtypes_Attributes_catalogmodel_ProductAttributes(arg.Attributes)
	out.Adjustment = arg.Adjustment // simple assign
}

func Convert_refund_RefundLines_refundmodel_RefundLines(args []*refund.RefundLine) (outs []*refundmodel.RefundLine) {
	tmps := make([]refundmodel.RefundLine, len(args))
	outs = make([]*refundmodel.RefundLine, len(args))
	for i := range tmps {
		outs[i] = Convert_refund_RefundLine_refundmodel_RefundLine(args[i], &tmps[i])
	}
	return outs
}
