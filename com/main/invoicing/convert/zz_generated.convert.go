// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	invoicing "o.o/api/main/invoicing"
	invoicingmodel "o.o/backend/com/main/invoicing/model"
	subscriptionconvert "o.o/backend/com/subscripting/subscription/convert"
	conversion "o.o/backend/pkg/common/conversion"
)

/*
Custom conversions: (none)

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*invoicingmodel.Invoice)(nil), (*invoicing.Invoice)(nil), func(arg, out interface{}) error {
		Convert_invoicingmodel_Invoice_invoicing_Invoice(arg.(*invoicingmodel.Invoice), out.(*invoicing.Invoice))
		return nil
	})
	s.Register(([]*invoicingmodel.Invoice)(nil), (*[]*invoicing.Invoice)(nil), func(arg, out interface{}) error {
		out0 := Convert_invoicingmodel_Invoices_invoicing_Invoices(arg.([]*invoicingmodel.Invoice))
		*out.(*[]*invoicing.Invoice) = out0
		return nil
	})
	s.Register((*invoicing.Invoice)(nil), (*invoicingmodel.Invoice)(nil), func(arg, out interface{}) error {
		Convert_invoicing_Invoice_invoicingmodel_Invoice(arg.(*invoicing.Invoice), out.(*invoicingmodel.Invoice))
		return nil
	})
	s.Register(([]*invoicing.Invoice)(nil), (*[]*invoicingmodel.Invoice)(nil), func(arg, out interface{}) error {
		out0 := Convert_invoicing_Invoices_invoicingmodel_Invoices(arg.([]*invoicing.Invoice))
		*out.(*[]*invoicingmodel.Invoice) = out0
		return nil
	})
	s.Register((*invoicing.CreateInvoiceArgs)(nil), (*invoicing.Invoice)(nil), func(arg, out interface{}) error {
		Apply_invoicing_CreateInvoiceArgs_invoicing_Invoice(arg.(*invoicing.CreateInvoiceArgs), out.(*invoicing.Invoice))
		return nil
	})
	s.Register((*invoicingmodel.InvoiceFtLine)(nil), (*invoicing.InvoiceFtLine)(nil), func(arg, out interface{}) error {
		Convert_invoicingmodel_InvoiceFtLine_invoicing_InvoiceFtLine(arg.(*invoicingmodel.InvoiceFtLine), out.(*invoicing.InvoiceFtLine))
		return nil
	})
	s.Register(([]*invoicingmodel.InvoiceFtLine)(nil), (*[]*invoicing.InvoiceFtLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_invoicingmodel_InvoiceFtLines_invoicing_InvoiceFtLines(arg.([]*invoicingmodel.InvoiceFtLine))
		*out.(*[]*invoicing.InvoiceFtLine) = out0
		return nil
	})
	s.Register((*invoicing.InvoiceFtLine)(nil), (*invoicingmodel.InvoiceFtLine)(nil), func(arg, out interface{}) error {
		Convert_invoicing_InvoiceFtLine_invoicingmodel_InvoiceFtLine(arg.(*invoicing.InvoiceFtLine), out.(*invoicingmodel.InvoiceFtLine))
		return nil
	})
	s.Register(([]*invoicing.InvoiceFtLine)(nil), (*[]*invoicingmodel.InvoiceFtLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_invoicing_InvoiceFtLines_invoicingmodel_InvoiceFtLines(arg.([]*invoicing.InvoiceFtLine))
		*out.(*[]*invoicingmodel.InvoiceFtLine) = out0
		return nil
	})
	s.Register((*invoicingmodel.InvoiceLine)(nil), (*invoicing.InvoiceLine)(nil), func(arg, out interface{}) error {
		Convert_invoicingmodel_InvoiceLine_invoicing_InvoiceLine(arg.(*invoicingmodel.InvoiceLine), out.(*invoicing.InvoiceLine))
		return nil
	})
	s.Register(([]*invoicingmodel.InvoiceLine)(nil), (*[]*invoicing.InvoiceLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_invoicingmodel_InvoiceLines_invoicing_InvoiceLines(arg.([]*invoicingmodel.InvoiceLine))
		*out.(*[]*invoicing.InvoiceLine) = out0
		return nil
	})
	s.Register((*invoicing.InvoiceLine)(nil), (*invoicingmodel.InvoiceLine)(nil), func(arg, out interface{}) error {
		Convert_invoicing_InvoiceLine_invoicingmodel_InvoiceLine(arg.(*invoicing.InvoiceLine), out.(*invoicingmodel.InvoiceLine))
		return nil
	})
	s.Register(([]*invoicing.InvoiceLine)(nil), (*[]*invoicingmodel.InvoiceLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_invoicing_InvoiceLines_invoicingmodel_InvoiceLines(arg.([]*invoicing.InvoiceLine))
		*out.(*[]*invoicingmodel.InvoiceLine) = out0
		return nil
	})
}

//-- convert o.o/api/main/invoicing.Invoice --//

func Convert_invoicingmodel_Invoice_invoicing_Invoice(arg *invoicingmodel.Invoice, out *invoicing.Invoice) *invoicing.Invoice {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &invoicing.Invoice{}
	}
	convert_invoicingmodel_Invoice_invoicing_Invoice(arg, out)
	return out
}

func convert_invoicingmodel_Invoice_invoicing_Invoice(arg *invoicingmodel.Invoice, out *invoicing.Invoice) {
	out.ID = arg.ID                       // simple assign
	out.AccountID = arg.AccountID         // simple assign
	out.TotalAmount = arg.TotalAmount     // simple assign
	out.Description = arg.Description     // simple assign
	out.PaymentID = arg.PaymentID         // simple assign
	out.PaymentStatus = arg.PaymentStatus // simple assign
	out.Status = arg.Status               // simple assign
	out.Customer = subscriptionconvert.Convert_sharemodel_CustomerInfo_subscriptingtypes_CustomerInfo(arg.Customer, nil)
	out.CreatedAt = arg.CreatedAt       // simple assign
	out.UpdatedAt = arg.UpdatedAt       // simple assign
	out.DeletedAt = arg.DeletedAt       // simple assign
	out.WLPartnerID = arg.WLPartnerID   // simple assign
	out.ReferralType = arg.ReferralType // simple assign
	out.ReferralIDs = arg.ReferralIDs   // simple assign
	out.Classify = arg.Classify         // simple assign
	out.Type = arg.Type                 // simple assign
}

func Convert_invoicingmodel_Invoices_invoicing_Invoices(args []*invoicingmodel.Invoice) (outs []*invoicing.Invoice) {
	if args == nil {
		return nil
	}
	tmps := make([]invoicing.Invoice, len(args))
	outs = make([]*invoicing.Invoice, len(args))
	for i := range tmps {
		outs[i] = Convert_invoicingmodel_Invoice_invoicing_Invoice(args[i], &tmps[i])
	}
	return outs
}

func Convert_invoicing_Invoice_invoicingmodel_Invoice(arg *invoicing.Invoice, out *invoicingmodel.Invoice) *invoicingmodel.Invoice {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &invoicingmodel.Invoice{}
	}
	convert_invoicing_Invoice_invoicingmodel_Invoice(arg, out)
	return out
}

func convert_invoicing_Invoice_invoicingmodel_Invoice(arg *invoicing.Invoice, out *invoicingmodel.Invoice) {
	out.ID = arg.ID                       // simple assign
	out.AccountID = arg.AccountID         // simple assign
	out.TotalAmount = arg.TotalAmount     // simple assign
	out.Description = arg.Description     // simple assign
	out.PaymentID = arg.PaymentID         // simple assign
	out.PaymentStatus = arg.PaymentStatus // simple assign
	out.Status = arg.Status               // simple assign
	out.Customer = subscriptionconvert.Convert_subscriptingtypes_CustomerInfo_sharemodel_CustomerInfo(arg.Customer, nil)
	out.CreatedAt = arg.CreatedAt       // simple assign
	out.UpdatedAt = arg.UpdatedAt       // simple assign
	out.DeletedAt = arg.DeletedAt       // simple assign
	out.WLPartnerID = arg.WLPartnerID   // simple assign
	out.ReferralType = arg.ReferralType // simple assign
	out.ReferralIDs = arg.ReferralIDs   // simple assign
	out.Classify = arg.Classify         // simple assign
	out.Type = arg.Type                 // simple assign
}

func Convert_invoicing_Invoices_invoicingmodel_Invoices(args []*invoicing.Invoice) (outs []*invoicingmodel.Invoice) {
	if args == nil {
		return nil
	}
	tmps := make([]invoicingmodel.Invoice, len(args))
	outs = make([]*invoicingmodel.Invoice, len(args))
	for i := range tmps {
		outs[i] = Convert_invoicing_Invoice_invoicingmodel_Invoice(args[i], &tmps[i])
	}
	return outs
}

func Apply_invoicing_CreateInvoiceArgs_invoicing_Invoice(arg *invoicing.CreateInvoiceArgs, out *invoicing.Invoice) *invoicing.Invoice {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &invoicing.Invoice{}
	}
	apply_invoicing_CreateInvoiceArgs_invoicing_Invoice(arg, out)
	return out
}

func apply_invoicing_CreateInvoiceArgs_invoicing_Invoice(arg *invoicing.CreateInvoiceArgs, out *invoicing.Invoice) {
	out.ID = 0                          // zero value
	out.AccountID = arg.AccountID       // simple assign
	out.TotalAmount = arg.TotalAmount   // simple assign
	out.Description = arg.Description   // simple assign
	out.PaymentID = 0                   // zero value
	out.PaymentStatus = 0               // zero value
	out.Status = 0                      // zero value
	out.Customer = arg.Customer         // simple assign
	out.CreatedAt = time.Time{}         // zero value
	out.UpdatedAt = time.Time{}         // zero value
	out.DeletedAt = time.Time{}         // zero value
	out.WLPartnerID = 0                 // zero value
	out.ReferralType = arg.ReferralType // simple assign
	out.ReferralIDs = nil               // zero value
	out.Classify = arg.Classify         // simple assign
	out.Type = arg.Type                 // simple assign
}

//-- convert o.o/api/main/invoicing.InvoiceFtLine --//

func Convert_invoicingmodel_InvoiceFtLine_invoicing_InvoiceFtLine(arg *invoicingmodel.InvoiceFtLine, out *invoicing.InvoiceFtLine) *invoicing.InvoiceFtLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &invoicing.InvoiceFtLine{}
	}
	convert_invoicingmodel_InvoiceFtLine_invoicing_InvoiceFtLine(arg, out)
	return out
}

func convert_invoicingmodel_InvoiceFtLine_invoicing_InvoiceFtLine(arg *invoicingmodel.InvoiceFtLine, out *invoicing.InvoiceFtLine) {
	out.Invoice = Convert_invoicingmodel_Invoice_invoicing_Invoice(arg.Invoice, nil)
	out.Lines = Convert_invoicingmodel_InvoiceLines_invoicing_InvoiceLines(arg.Lines)
}

func Convert_invoicingmodel_InvoiceFtLines_invoicing_InvoiceFtLines(args []*invoicingmodel.InvoiceFtLine) (outs []*invoicing.InvoiceFtLine) {
	if args == nil {
		return nil
	}
	tmps := make([]invoicing.InvoiceFtLine, len(args))
	outs = make([]*invoicing.InvoiceFtLine, len(args))
	for i := range tmps {
		outs[i] = Convert_invoicingmodel_InvoiceFtLine_invoicing_InvoiceFtLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_invoicing_InvoiceFtLine_invoicingmodel_InvoiceFtLine(arg *invoicing.InvoiceFtLine, out *invoicingmodel.InvoiceFtLine) *invoicingmodel.InvoiceFtLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &invoicingmodel.InvoiceFtLine{}
	}
	convert_invoicing_InvoiceFtLine_invoicingmodel_InvoiceFtLine(arg, out)
	return out
}

func convert_invoicing_InvoiceFtLine_invoicingmodel_InvoiceFtLine(arg *invoicing.InvoiceFtLine, out *invoicingmodel.InvoiceFtLine) {
	out.Invoice = Convert_invoicing_Invoice_invoicingmodel_Invoice(arg.Invoice, nil)
	out.Lines = Convert_invoicing_InvoiceLines_invoicingmodel_InvoiceLines(arg.Lines)
}

func Convert_invoicing_InvoiceFtLines_invoicingmodel_InvoiceFtLines(args []*invoicing.InvoiceFtLine) (outs []*invoicingmodel.InvoiceFtLine) {
	if args == nil {
		return nil
	}
	tmps := make([]invoicingmodel.InvoiceFtLine, len(args))
	outs = make([]*invoicingmodel.InvoiceFtLine, len(args))
	for i := range tmps {
		outs[i] = Convert_invoicing_InvoiceFtLine_invoicingmodel_InvoiceFtLine(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/main/invoicing.InvoiceLine --//

func Convert_invoicingmodel_InvoiceLine_invoicing_InvoiceLine(arg *invoicingmodel.InvoiceLine, out *invoicing.InvoiceLine) *invoicing.InvoiceLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &invoicing.InvoiceLine{}
	}
	convert_invoicingmodel_InvoiceLine_invoicing_InvoiceLine(arg, out)
	return out
}

func convert_invoicingmodel_InvoiceLine_invoicing_InvoiceLine(arg *invoicingmodel.InvoiceLine, out *invoicing.InvoiceLine) {
	out.ID = arg.ID                     // simple assign
	out.LineAmount = arg.LineAmount     // simple assign
	out.Price = arg.Price               // simple assign
	out.Quantity = arg.Quantity         // simple assign
	out.Description = arg.Description   // simple assign
	out.InvoiceID = arg.InvoiceID       // simple assign
	out.ReferralType = arg.ReferralType // simple assign
	out.ReferralID = arg.ReferralID     // simple assign
	out.CreatedAt = arg.CreatedAt       // simple assign
	out.UpdatedAt = arg.UpdatedAt       // simple assign
}

func Convert_invoicingmodel_InvoiceLines_invoicing_InvoiceLines(args []*invoicingmodel.InvoiceLine) (outs []*invoicing.InvoiceLine) {
	if args == nil {
		return nil
	}
	tmps := make([]invoicing.InvoiceLine, len(args))
	outs = make([]*invoicing.InvoiceLine, len(args))
	for i := range tmps {
		outs[i] = Convert_invoicingmodel_InvoiceLine_invoicing_InvoiceLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_invoicing_InvoiceLine_invoicingmodel_InvoiceLine(arg *invoicing.InvoiceLine, out *invoicingmodel.InvoiceLine) *invoicingmodel.InvoiceLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &invoicingmodel.InvoiceLine{}
	}
	convert_invoicing_InvoiceLine_invoicingmodel_InvoiceLine(arg, out)
	return out
}

func convert_invoicing_InvoiceLine_invoicingmodel_InvoiceLine(arg *invoicing.InvoiceLine, out *invoicingmodel.InvoiceLine) {
	out.ID = arg.ID                     // simple assign
	out.LineAmount = arg.LineAmount     // simple assign
	out.Price = arg.Price               // simple assign
	out.Quantity = arg.Quantity         // simple assign
	out.Description = arg.Description   // simple assign
	out.InvoiceID = arg.InvoiceID       // simple assign
	out.ReferralType = arg.ReferralType // simple assign
	out.ReferralID = arg.ReferralID     // simple assign
	out.CreatedAt = arg.CreatedAt       // simple assign
	out.UpdatedAt = arg.UpdatedAt       // simple assign
}

func Convert_invoicing_InvoiceLines_invoicingmodel_InvoiceLines(args []*invoicing.InvoiceLine) (outs []*invoicingmodel.InvoiceLine) {
	if args == nil {
		return nil
	}
	tmps := make([]invoicingmodel.InvoiceLine, len(args))
	outs = make([]*invoicingmodel.InvoiceLine, len(args))
	for i := range tmps {
		outs[i] = Convert_invoicing_InvoiceLine_invoicingmodel_InvoiceLine(args[i], &tmps[i])
	}
	return outs
}
