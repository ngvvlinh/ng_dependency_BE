// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	ordering "etop.vn/api/main/ordering"
	orderingtypes "etop.vn/api/main/ordering/types"
	orderingmodel "etop.vn/backend/com/main/ordering/model"
	conversion "etop.vn/backend/pkg/common/conversion"
)

/*
Custom conversions:
    Address                // in use
    AddressDB              // in use
    Order                  // in use
    OrderLine              // in use
    OrderLineToModel       // in use
    OrderToShippingInfo    // not use, no conversions between params

Ignored functions:
    FeeLines             // params are not pointer to named types
    OrderLines           // params are not pointer to named types
    OrderLinesToModel    // params are not pointer to named types
    Orders               // params are not pointer to named types
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*orderingmodel.Order)(nil), (*ordering.Order)(nil), func(arg, out interface{}) error {
		Convert_orderingmodel_Order_ordering_Order(arg.(*orderingmodel.Order), out.(*ordering.Order))
		return nil
	})
	s.Register(([]*orderingmodel.Order)(nil), (*[]*ordering.Order)(nil), func(arg, out interface{}) error {
		out0 := Convert_orderingmodel_Orders_ordering_Orders(arg.([]*orderingmodel.Order))
		*out.(*[]*ordering.Order) = out0
		return nil
	})
	s.Register((*ordering.Order)(nil), (*orderingmodel.Order)(nil), func(arg, out interface{}) error {
		Convert_ordering_Order_orderingmodel_Order(arg.(*ordering.Order), out.(*orderingmodel.Order))
		return nil
	})
	s.Register(([]*ordering.Order)(nil), (*[]*orderingmodel.Order)(nil), func(arg, out interface{}) error {
		out0 := Convert_ordering_Orders_orderingmodel_Orders(arg.([]*ordering.Order))
		*out.(*[]*orderingmodel.Order) = out0
		return nil
	})
	s.Register((*orderingmodel.OrderCustomer)(nil), (*ordering.OrderCustomer)(nil), func(arg, out interface{}) error {
		Convert_orderingmodel_OrderCustomer_ordering_OrderCustomer(arg.(*orderingmodel.OrderCustomer), out.(*ordering.OrderCustomer))
		return nil
	})
	s.Register(([]*orderingmodel.OrderCustomer)(nil), (*[]*ordering.OrderCustomer)(nil), func(arg, out interface{}) error {
		out0 := Convert_orderingmodel_OrderCustomers_ordering_OrderCustomers(arg.([]*orderingmodel.OrderCustomer))
		*out.(*[]*ordering.OrderCustomer) = out0
		return nil
	})
	s.Register((*ordering.OrderCustomer)(nil), (*orderingmodel.OrderCustomer)(nil), func(arg, out interface{}) error {
		Convert_ordering_OrderCustomer_orderingmodel_OrderCustomer(arg.(*ordering.OrderCustomer), out.(*orderingmodel.OrderCustomer))
		return nil
	})
	s.Register(([]*ordering.OrderCustomer)(nil), (*[]*orderingmodel.OrderCustomer)(nil), func(arg, out interface{}) error {
		out0 := Convert_ordering_OrderCustomers_orderingmodel_OrderCustomers(arg.([]*ordering.OrderCustomer))
		*out.(*[]*orderingmodel.OrderCustomer) = out0
		return nil
	})
	s.Register((*orderingmodel.OrderDiscount)(nil), (*ordering.OrderDiscount)(nil), func(arg, out interface{}) error {
		Convert_orderingmodel_OrderDiscount_ordering_OrderDiscount(arg.(*orderingmodel.OrderDiscount), out.(*ordering.OrderDiscount))
		return nil
	})
	s.Register(([]*orderingmodel.OrderDiscount)(nil), (*[]*ordering.OrderDiscount)(nil), func(arg, out interface{}) error {
		out0 := Convert_orderingmodel_OrderDiscounts_ordering_OrderDiscounts(arg.([]*orderingmodel.OrderDiscount))
		*out.(*[]*ordering.OrderDiscount) = out0
		return nil
	})
	s.Register((*ordering.OrderDiscount)(nil), (*orderingmodel.OrderDiscount)(nil), func(arg, out interface{}) error {
		Convert_ordering_OrderDiscount_orderingmodel_OrderDiscount(arg.(*ordering.OrderDiscount), out.(*orderingmodel.OrderDiscount))
		return nil
	})
	s.Register(([]*ordering.OrderDiscount)(nil), (*[]*orderingmodel.OrderDiscount)(nil), func(arg, out interface{}) error {
		out0 := Convert_ordering_OrderDiscounts_orderingmodel_OrderDiscounts(arg.([]*ordering.OrderDiscount))
		*out.(*[]*orderingmodel.OrderDiscount) = out0
		return nil
	})
	s.Register((*orderingmodel.OrderFeeLine)(nil), (*ordering.OrderFeeLine)(nil), func(arg, out interface{}) error {
		Convert_orderingmodel_OrderFeeLine_ordering_OrderFeeLine(arg.(*orderingmodel.OrderFeeLine), out.(*ordering.OrderFeeLine))
		return nil
	})
	s.Register(([]*orderingmodel.OrderFeeLine)(nil), (*[]*ordering.OrderFeeLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_orderingmodel_OrderFeeLines_ordering_OrderFeeLines(arg.([]*orderingmodel.OrderFeeLine))
		*out.(*[]*ordering.OrderFeeLine) = out0
		return nil
	})
	s.Register((*ordering.OrderFeeLine)(nil), (*orderingmodel.OrderFeeLine)(nil), func(arg, out interface{}) error {
		Convert_ordering_OrderFeeLine_orderingmodel_OrderFeeLine(arg.(*ordering.OrderFeeLine), out.(*orderingmodel.OrderFeeLine))
		return nil
	})
	s.Register(([]*ordering.OrderFeeLine)(nil), (*[]*orderingmodel.OrderFeeLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_ordering_OrderFeeLines_orderingmodel_OrderFeeLines(arg.([]*ordering.OrderFeeLine))
		*out.(*[]*orderingmodel.OrderFeeLine) = out0
		return nil
	})
	s.Register((*orderingmodel.OrderAddress)(nil), (*orderingtypes.Address)(nil), func(arg, out interface{}) error {
		Convert_orderingmodel_OrderAddress_orderingtypes_Address(arg.(*orderingmodel.OrderAddress), out.(*orderingtypes.Address))
		return nil
	})
	s.Register(([]*orderingmodel.OrderAddress)(nil), (*[]*orderingtypes.Address)(nil), func(arg, out interface{}) error {
		out0 := Convert_orderingmodel_OrderAddresses_orderingtypes_Addresses(arg.([]*orderingmodel.OrderAddress))
		*out.(*[]*orderingtypes.Address) = out0
		return nil
	})
	s.Register((*orderingtypes.Address)(nil), (*orderingmodel.OrderAddress)(nil), func(arg, out interface{}) error {
		Convert_orderingtypes_Address_orderingmodel_OrderAddress(arg.(*orderingtypes.Address), out.(*orderingmodel.OrderAddress))
		return nil
	})
	s.Register(([]*orderingtypes.Address)(nil), (*[]*orderingmodel.OrderAddress)(nil), func(arg, out interface{}) error {
		out0 := Convert_orderingtypes_Addresses_orderingmodel_OrderAddresses(arg.([]*orderingtypes.Address))
		*out.(*[]*orderingmodel.OrderAddress) = out0
		return nil
	})
	s.Register((*orderingmodel.OrderLine)(nil), (*orderingtypes.ItemLine)(nil), func(arg, out interface{}) error {
		Convert_orderingmodel_OrderLine_orderingtypes_ItemLine(arg.(*orderingmodel.OrderLine), out.(*orderingtypes.ItemLine))
		return nil
	})
	s.Register(([]*orderingmodel.OrderLine)(nil), (*[]*orderingtypes.ItemLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_orderingmodel_OrderLines_orderingtypes_ItemLines(arg.([]*orderingmodel.OrderLine))
		*out.(*[]*orderingtypes.ItemLine) = out0
		return nil
	})
	s.Register((*orderingtypes.ItemLine)(nil), (*orderingmodel.OrderLine)(nil), func(arg, out interface{}) error {
		Convert_orderingtypes_ItemLine_orderingmodel_OrderLine(arg.(*orderingtypes.ItemLine), out.(*orderingmodel.OrderLine))
		return nil
	})
	s.Register(([]*orderingtypes.ItemLine)(nil), (*[]*orderingmodel.OrderLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_orderingtypes_ItemLines_orderingmodel_OrderLines(arg.([]*orderingtypes.ItemLine))
		*out.(*[]*orderingmodel.OrderLine) = out0
		return nil
	})
}

//-- convert etop.vn/api/main/ordering.Order --//

func Convert_orderingmodel_Order_ordering_Order(arg *orderingmodel.Order, out *ordering.Order) *ordering.Order {
	return Order(arg)
}

func convert_orderingmodel_Order_ordering_Order(arg *orderingmodel.Order, out *ordering.Order) {
	out.ID = arg.ID               // simple assign
	out.ShopID = arg.ShopID       // simple assign
	out.PartnerID = arg.PartnerID // simple assign
	out.Code = arg.Code           // simple assign
	out.EdCode = arg.EdCode       // simple assign
	out.Customer = Convert_orderingmodel_OrderCustomer_ordering_OrderCustomer(arg.Customer, nil)
	out.CustomerAddress = Convert_orderingmodel_OrderAddress_orderingtypes_Address(arg.CustomerAddress, nil)
	out.BillingAddress = Convert_orderingmodel_OrderAddress_orderingtypes_Address(arg.BillingAddress, nil)
	out.ShippingAddress = Convert_orderingmodel_OrderAddress_orderingtypes_Address(arg.ShippingAddress, nil)
	out.CancelReason = arg.CancelReason                           // simple assign
	out.ConfirmStatus = arg.ConfirmStatus                         // simple assign
	out.ShopConfirm = arg.ShopConfirm                             // simple assign
	out.Status = arg.Status                                       // simple assign
	out.FulfillmentShippingStatus = arg.FulfillmentShippingStatus // simple assign
	out.EtopPaymentStatus = arg.EtopPaymentStatus                 // simple assign
	out.Lines = Convert_orderingmodel_OrderLines_orderingtypes_ItemLines(arg.Lines)
	out.Discounts = Convert_orderingmodel_OrderDiscounts_ordering_OrderDiscounts(arg.Discounts)
	out.TotalItems = arg.TotalItems           // simple assign
	out.BasketValue = arg.BasketValue         // simple assign
	out.TotalWeight = arg.TotalWeight         // simple assign
	out.OrderDiscount = arg.OrderDiscount     // simple assign
	out.TotalDiscount = arg.TotalDiscount     // simple assign
	out.TotalFee = arg.TotalFee               // simple assign
	out.TotalAmount = arg.TotalAmount         // simple assign
	out.ShopCOD = arg.ShopCOD                 // simple assign
	out.ShopShippingFee = arg.ShopShippingFee // simple assign
	out.OrderNote = arg.OrderNote             // simple assign
	out.FeeLines = nil                        // types do not match
	out.Shipping = nil                        // zero value
	out.ShippingNote = arg.ShippingNote       // simple assign
	out.FulfillmentType = arg.FulfillmentType // simple assign
	out.FulfillmentIDs = arg.FulfillmentIDs   // simple assign
	out.CreatedAt = arg.CreatedAt             // simple assign
	out.UpdatedAt = arg.UpdatedAt             // simple assign
	out.ProcessedAt = arg.ProcessedAt         // simple assign
	out.ClosedAt = arg.ClosedAt               // simple assign
	out.ConfirmedAt = arg.ConfirmedAt         // simple assign
	out.CancelledAt = arg.CancelledAt         // simple assign
	out.CreatedBy = arg.CreatedBy             // simple assign
	out.PaymentStatus = arg.PaymentStatus     // simple assign
	out.PaymentID = arg.PaymentID             // simple assign
	out.ReferralMeta = nil                    // types do not match
	out.TradingShopID = arg.TradingShopID     // simple assign
	out.CustomerID = arg.CustomerID           // simple assign
	out.OrderSourceType = arg.OrderSourceType // simple assign
	out.ExternalOrderID = arg.ExternalOrderID // simple assign
	out.PaymentMethod = arg.PaymentMethod     // simple assign
	out.ReferenceURL = arg.ReferenceURL       // simple assign
	out.GhnNoteCode = arg.GhnNoteCode         // simple assign
	out.TryOn = arg.TryOn                     // simple assign
}

func Convert_orderingmodel_Orders_ordering_Orders(args []*orderingmodel.Order) (outs []*ordering.Order) {
	tmps := make([]ordering.Order, len(args))
	outs = make([]*ordering.Order, len(args))
	for i := range tmps {
		outs[i] = Convert_orderingmodel_Order_ordering_Order(args[i], &tmps[i])
	}
	return outs
}

func Convert_ordering_Order_orderingmodel_Order(arg *ordering.Order, out *orderingmodel.Order) *orderingmodel.Order {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &orderingmodel.Order{}
	}
	convert_ordering_Order_orderingmodel_Order(arg, out)
	return out
}

func convert_ordering_Order_orderingmodel_Order(arg *ordering.Order, out *orderingmodel.Order) {
	out.ID = arg.ID                       // simple assign
	out.ShopID = arg.ShopID               // simple assign
	out.Code = arg.Code                   // simple assign
	out.EdCode = arg.EdCode               // simple assign
	out.ProductIDs = nil                  // zero value
	out.VariantIDs = nil                  // zero value
	out.PartnerID = arg.PartnerID         // simple assign
	out.Currency = ""                     // zero value
	out.PaymentMethod = arg.PaymentMethod // simple assign
	out.Customer = Convert_ordering_OrderCustomer_orderingmodel_OrderCustomer(arg.Customer, nil)
	out.CustomerAddress = Convert_orderingtypes_Address_orderingmodel_OrderAddress(arg.CustomerAddress, nil)
	out.BillingAddress = Convert_orderingtypes_Address_orderingmodel_OrderAddress(arg.BillingAddress, nil)
	out.ShippingAddress = Convert_orderingtypes_Address_orderingmodel_OrderAddress(arg.ShippingAddress, nil)
	out.CustomerName = ""                                         // zero value
	out.CustomerPhone = ""                                        // zero value
	out.CustomerEmail = ""                                        // zero value
	out.CreatedAt = arg.CreatedAt                                 // simple assign
	out.ProcessedAt = arg.ProcessedAt                             // simple assign
	out.UpdatedAt = arg.UpdatedAt                                 // simple assign
	out.ClosedAt = arg.ClosedAt                                   // simple assign
	out.ConfirmedAt = arg.ConfirmedAt                             // simple assign
	out.CancelledAt = arg.CancelledAt                             // simple assign
	out.CancelReason = arg.CancelReason                           // simple assign
	out.CustomerConfirm = 0                                       // zero value
	out.ShopConfirm = arg.ShopConfirm                             // simple assign
	out.ConfirmStatus = arg.ConfirmStatus                         // simple assign
	out.FulfillmentShippingStatus = arg.FulfillmentShippingStatus // simple assign
	out.EtopPaymentStatus = arg.EtopPaymentStatus                 // simple assign
	out.Status = arg.Status                                       // simple assign
	out.FulfillmentShippingStates = nil                           // zero value
	out.FulfillmentPaymentStatuses = nil                          // zero value
	out.FulfillmentStatuses = nil                                 // zero value
	out.Lines = Convert_orderingtypes_ItemLines_orderingmodel_OrderLines(arg.Lines)
	out.Discounts = Convert_ordering_OrderDiscounts_orderingmodel_OrderDiscounts(arg.Discounts)
	out.TotalItems = arg.TotalItems           // simple assign
	out.BasketValue = arg.BasketValue         // simple assign
	out.TotalWeight = arg.TotalWeight         // simple assign
	out.TotalTax = 0                          // zero value
	out.OrderDiscount = arg.OrderDiscount     // simple assign
	out.TotalDiscount = arg.TotalDiscount     // simple assign
	out.ShopShippingFee = arg.ShopShippingFee // simple assign
	out.TotalFee = arg.TotalFee               // simple assign
	out.FeeLines = nil                        // types do not match
	out.ShopCOD = arg.ShopCOD                 // simple assign
	out.TotalAmount = arg.TotalAmount         // simple assign
	out.OrderNote = arg.OrderNote             // simple assign
	out.ShopNote = ""                         // zero value
	out.ShippingNote = arg.ShippingNote       // simple assign
	out.OrderSourceType = arg.OrderSourceType // simple assign
	out.OrderSourceID = 0                     // zero value
	out.ExternalOrderID = arg.ExternalOrderID // simple assign
	out.ReferenceURL = arg.ReferenceURL       // simple assign
	out.ExternalURL = ""                      // zero value
	out.ShopShipping = nil                    // zero value
	out.IsOutsideEtop = false                 // zero value
	out.GhnNoteCode = arg.GhnNoteCode         // simple assign
	out.TryOn = arg.TryOn                     // simple assign
	out.CustomerNameNorm = ""                 // zero value
	out.ProductNameNorm = ""                  // zero value
	out.FulfillmentType = arg.FulfillmentType // simple assign
	out.FulfillmentIDs = arg.FulfillmentIDs   // simple assign
	out.ExternalMeta = nil                    // zero value
	out.TradingShopID = arg.TradingShopID     // simple assign
	out.PaymentStatus = arg.PaymentStatus     // simple assign
	out.PaymentID = arg.PaymentID             // simple assign
	out.ReferralMeta = nil                    // types do not match
	out.CustomerID = arg.CustomerID           // simple assign
	out.CreatedBy = arg.CreatedBy             // simple assign
}

func Convert_ordering_Orders_orderingmodel_Orders(args []*ordering.Order) (outs []*orderingmodel.Order) {
	tmps := make([]orderingmodel.Order, len(args))
	outs = make([]*orderingmodel.Order, len(args))
	for i := range tmps {
		outs[i] = Convert_ordering_Order_orderingmodel_Order(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/api/main/ordering.OrderCustomer --//

func Convert_orderingmodel_OrderCustomer_ordering_OrderCustomer(arg *orderingmodel.OrderCustomer, out *ordering.OrderCustomer) *ordering.OrderCustomer {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &ordering.OrderCustomer{}
	}
	convert_orderingmodel_OrderCustomer_ordering_OrderCustomer(arg, out)
	return out
}

func convert_orderingmodel_OrderCustomer_ordering_OrderCustomer(arg *orderingmodel.OrderCustomer, out *ordering.OrderCustomer) {
	out.FirstName = arg.FirstName         // simple assign
	out.LastName = arg.LastName           // simple assign
	out.FullName = arg.FullName           // simple assign
	out.Email = arg.Email                 // simple assign
	out.Phone = arg.Phone                 // simple assign
	out.Gender = arg.Gender               // simple assign
	out.Birthday = arg.Birthday           // simple assign
	out.VerifiedEmail = arg.VerifiedEmail // simple assign
	out.ExternalID = arg.ExternalID       // simple assign
}

func Convert_orderingmodel_OrderCustomers_ordering_OrderCustomers(args []*orderingmodel.OrderCustomer) (outs []*ordering.OrderCustomer) {
	tmps := make([]ordering.OrderCustomer, len(args))
	outs = make([]*ordering.OrderCustomer, len(args))
	for i := range tmps {
		outs[i] = Convert_orderingmodel_OrderCustomer_ordering_OrderCustomer(args[i], &tmps[i])
	}
	return outs
}

func Convert_ordering_OrderCustomer_orderingmodel_OrderCustomer(arg *ordering.OrderCustomer, out *orderingmodel.OrderCustomer) *orderingmodel.OrderCustomer {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &orderingmodel.OrderCustomer{}
	}
	convert_ordering_OrderCustomer_orderingmodel_OrderCustomer(arg, out)
	return out
}

func convert_ordering_OrderCustomer_orderingmodel_OrderCustomer(arg *ordering.OrderCustomer, out *orderingmodel.OrderCustomer) {
	out.FirstName = arg.FirstName         // simple assign
	out.LastName = arg.LastName           // simple assign
	out.FullName = arg.FullName           // simple assign
	out.Email = arg.Email                 // simple assign
	out.Phone = arg.Phone                 // simple assign
	out.Gender = arg.Gender               // simple assign
	out.Birthday = arg.Birthday           // simple assign
	out.VerifiedEmail = arg.VerifiedEmail // simple assign
	out.ExternalID = arg.ExternalID       // simple assign
}

func Convert_ordering_OrderCustomers_orderingmodel_OrderCustomers(args []*ordering.OrderCustomer) (outs []*orderingmodel.OrderCustomer) {
	tmps := make([]orderingmodel.OrderCustomer, len(args))
	outs = make([]*orderingmodel.OrderCustomer, len(args))
	for i := range tmps {
		outs[i] = Convert_ordering_OrderCustomer_orderingmodel_OrderCustomer(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/api/main/ordering.OrderDiscount --//

func Convert_orderingmodel_OrderDiscount_ordering_OrderDiscount(arg *orderingmodel.OrderDiscount, out *ordering.OrderDiscount) *ordering.OrderDiscount {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &ordering.OrderDiscount{}
	}
	convert_orderingmodel_OrderDiscount_ordering_OrderDiscount(arg, out)
	return out
}

func convert_orderingmodel_OrderDiscount_ordering_OrderDiscount(arg *orderingmodel.OrderDiscount, out *ordering.OrderDiscount) {
	out.Code = arg.Code     // simple assign
	out.Type = arg.Type     // simple assign
	out.Amount = arg.Amount // simple assign
}

func Convert_orderingmodel_OrderDiscounts_ordering_OrderDiscounts(args []*orderingmodel.OrderDiscount) (outs []*ordering.OrderDiscount) {
	tmps := make([]ordering.OrderDiscount, len(args))
	outs = make([]*ordering.OrderDiscount, len(args))
	for i := range tmps {
		outs[i] = Convert_orderingmodel_OrderDiscount_ordering_OrderDiscount(args[i], &tmps[i])
	}
	return outs
}

func Convert_ordering_OrderDiscount_orderingmodel_OrderDiscount(arg *ordering.OrderDiscount, out *orderingmodel.OrderDiscount) *orderingmodel.OrderDiscount {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &orderingmodel.OrderDiscount{}
	}
	convert_ordering_OrderDiscount_orderingmodel_OrderDiscount(arg, out)
	return out
}

func convert_ordering_OrderDiscount_orderingmodel_OrderDiscount(arg *ordering.OrderDiscount, out *orderingmodel.OrderDiscount) {
	out.Code = arg.Code     // simple assign
	out.Type = arg.Type     // simple assign
	out.Amount = arg.Amount // simple assign
}

func Convert_ordering_OrderDiscounts_orderingmodel_OrderDiscounts(args []*ordering.OrderDiscount) (outs []*orderingmodel.OrderDiscount) {
	tmps := make([]orderingmodel.OrderDiscount, len(args))
	outs = make([]*orderingmodel.OrderDiscount, len(args))
	for i := range tmps {
		outs[i] = Convert_ordering_OrderDiscount_orderingmodel_OrderDiscount(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/api/main/ordering.OrderFeeLine --//

func Convert_orderingmodel_OrderFeeLine_ordering_OrderFeeLine(arg *orderingmodel.OrderFeeLine, out *ordering.OrderFeeLine) *ordering.OrderFeeLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &ordering.OrderFeeLine{}
	}
	convert_orderingmodel_OrderFeeLine_ordering_OrderFeeLine(arg, out)
	return out
}

func convert_orderingmodel_OrderFeeLine_ordering_OrderFeeLine(arg *orderingmodel.OrderFeeLine, out *ordering.OrderFeeLine) {
	out.Type = arg.Type     // simple assign
	out.Name = arg.Name     // simple assign
	out.Code = arg.Code     // simple assign
	out.Desc = arg.Desc     // simple assign
	out.Amount = arg.Amount // simple assign
}

func Convert_orderingmodel_OrderFeeLines_ordering_OrderFeeLines(args []*orderingmodel.OrderFeeLine) (outs []*ordering.OrderFeeLine) {
	tmps := make([]ordering.OrderFeeLine, len(args))
	outs = make([]*ordering.OrderFeeLine, len(args))
	for i := range tmps {
		outs[i] = Convert_orderingmodel_OrderFeeLine_ordering_OrderFeeLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_ordering_OrderFeeLine_orderingmodel_OrderFeeLine(arg *ordering.OrderFeeLine, out *orderingmodel.OrderFeeLine) *orderingmodel.OrderFeeLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &orderingmodel.OrderFeeLine{}
	}
	convert_ordering_OrderFeeLine_orderingmodel_OrderFeeLine(arg, out)
	return out
}

func convert_ordering_OrderFeeLine_orderingmodel_OrderFeeLine(arg *ordering.OrderFeeLine, out *orderingmodel.OrderFeeLine) {
	out.Amount = arg.Amount // simple assign
	out.Desc = arg.Desc     // simple assign
	out.Code = arg.Code     // simple assign
	out.Name = arg.Name     // simple assign
	out.Type = arg.Type     // simple assign
}

func Convert_ordering_OrderFeeLines_orderingmodel_OrderFeeLines(args []*ordering.OrderFeeLine) (outs []*orderingmodel.OrderFeeLine) {
	tmps := make([]orderingmodel.OrderFeeLine, len(args))
	outs = make([]*orderingmodel.OrderFeeLine, len(args))
	for i := range tmps {
		outs[i] = Convert_ordering_OrderFeeLine_orderingmodel_OrderFeeLine(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/api/main/ordering/types.Address --//

func Convert_orderingmodel_OrderAddress_orderingtypes_Address(arg *orderingmodel.OrderAddress, out *orderingtypes.Address) *orderingtypes.Address {
	return Address(arg)
}

func convert_orderingmodel_OrderAddress_orderingtypes_Address(arg *orderingmodel.OrderAddress, out *orderingtypes.Address) {
	out.FullName = arg.FullName             // simple assign
	out.Phone = arg.Phone                   // simple assign
	out.Email = arg.Email                   // simple assign
	out.Company = arg.Company               // simple assign
	out.Address1 = arg.Address1             // simple assign
	out.Address2 = arg.Address2             // simple assign
	out.Location = orderingtypes.Location{} // zero value
}

func Convert_orderingmodel_OrderAddresses_orderingtypes_Addresses(args []*orderingmodel.OrderAddress) (outs []*orderingtypes.Address) {
	tmps := make([]orderingtypes.Address, len(args))
	outs = make([]*orderingtypes.Address, len(args))
	for i := range tmps {
		outs[i] = Convert_orderingmodel_OrderAddress_orderingtypes_Address(args[i], &tmps[i])
	}
	return outs
}

func Convert_orderingtypes_Address_orderingmodel_OrderAddress(arg *orderingtypes.Address, out *orderingmodel.OrderAddress) *orderingmodel.OrderAddress {
	return AddressDB(arg)
}

func convert_orderingtypes_Address_orderingmodel_OrderAddress(arg *orderingtypes.Address, out *orderingmodel.OrderAddress) {
	out.FullName = arg.FullName // simple assign
	out.FirstName = ""          // zero value
	out.LastName = ""           // zero value
	out.Phone = arg.Phone       // simple assign
	out.Email = arg.Email       // simple assign
	out.Country = ""            // zero value
	out.City = ""               // zero value
	out.Province = ""           // zero value
	out.District = ""           // zero value
	out.Ward = ""               // zero value
	out.Zip = ""                // zero value
	out.DistrictCode = ""       // zero value
	out.ProvinceCode = ""       // zero value
	out.WardCode = ""           // zero value
	out.Company = arg.Company   // simple assign
	out.Address1 = arg.Address1 // simple assign
	out.Address2 = arg.Address2 // simple assign
	out.Coordinates = nil       // zero value
}

func Convert_orderingtypes_Addresses_orderingmodel_OrderAddresses(args []*orderingtypes.Address) (outs []*orderingmodel.OrderAddress) {
	tmps := make([]orderingmodel.OrderAddress, len(args))
	outs = make([]*orderingmodel.OrderAddress, len(args))
	for i := range tmps {
		outs[i] = Convert_orderingtypes_Address_orderingmodel_OrderAddress(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/api/main/ordering/types.ItemLine --//

func Convert_orderingmodel_OrderLine_orderingtypes_ItemLine(arg *orderingmodel.OrderLine, out *orderingtypes.ItemLine) *orderingtypes.ItemLine {
	return OrderLine(arg)
}

func convert_orderingmodel_OrderLine_orderingtypes_ItemLine(arg *orderingmodel.OrderLine, out *orderingtypes.ItemLine) {
	out.OrderID = arg.OrderID                     // simple assign
	out.Quantity = arg.Quantity                   // simple assign
	out.ProductID = arg.ProductID                 // simple assign
	out.VariantID = arg.VariantID                 // simple assign
	out.IsOutSide = false                         // zero value
	out.ProductInfo = orderingtypes.ProductInfo{} // zero value
	out.TotalPrice = 0                            // zero value
}

func Convert_orderingmodel_OrderLines_orderingtypes_ItemLines(args []*orderingmodel.OrderLine) (outs []*orderingtypes.ItemLine) {
	tmps := make([]orderingtypes.ItemLine, len(args))
	outs = make([]*orderingtypes.ItemLine, len(args))
	for i := range tmps {
		outs[i] = Convert_orderingmodel_OrderLine_orderingtypes_ItemLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_orderingtypes_ItemLine_orderingmodel_OrderLine(arg *orderingtypes.ItemLine, out *orderingmodel.OrderLine) *orderingmodel.OrderLine {
	return OrderLineToModel(arg)
}

func convert_orderingtypes_ItemLine_orderingmodel_OrderLine(arg *orderingtypes.ItemLine, out *orderingmodel.OrderLine) {
	out.OrderID = arg.OrderID     // simple assign
	out.VariantID = arg.VariantID // simple assign
	out.ProductName = ""          // zero value
	out.ProductID = arg.ProductID // simple assign
	out.ShopID = 0                // zero value
	out.Weight = 0                // zero value
	out.Quantity = arg.Quantity   // simple assign
	out.ListPrice = 0             // zero value
	out.RetailPrice = 0           // zero value
	out.PaymentPrice = 0          // zero value
	out.LineAmount = 0            // zero value
	out.TotalDiscount = 0         // zero value
	out.TotalLineAmount = 0       // zero value
	out.ImageURL = ""             // zero value
	out.Attributes = nil          // zero value
	out.IsOutsideEtop = false     // zero value
	out.Code = ""                 // zero value
	out.MetaFields = nil          // zero value
}

func Convert_orderingtypes_ItemLines_orderingmodel_OrderLines(args []*orderingtypes.ItemLine) (outs []*orderingmodel.OrderLine) {
	tmps := make([]orderingmodel.OrderLine, len(args))
	outs = make([]*orderingmodel.OrderLine, len(args))
	for i := range tmps {
		outs[i] = Convert_orderingtypes_ItemLine_orderingmodel_OrderLine(args[i], &tmps[i])
	}
	return outs
}
