// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package sqlstore

import (
	time "time"

	sq "o.o/backend/pkg/common/sql/sq"
	dot "o.o/capi/dot"
)

type BankStatementFilters struct{ prefix string }

func NewBankStatementFilters(prefix string) BankStatementFilters {
	return BankStatementFilters{prefix}
}

func (ft *BankStatementFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(&ft.prefix, pred, args...)
}

func (ft BankStatementFilters) Prefix() string {
	return ft.prefix
}

func (ft *BankStatementFilters) ByID(ID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft *BankStatementFilters) ByIDPtr(ID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft *BankStatementFilters) ByAmount(Amount int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "amount",
		Value:  Amount,
		IsNil:  Amount == 0,
	}
}

func (ft *BankStatementFilters) ByAmountPtr(Amount *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "amount",
		Value:  Amount,
		IsNil:  Amount == nil,
		IsZero: Amount != nil && (*Amount) == 0,
	}
}

func (ft *BankStatementFilters) ByDescription(Description string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == "",
	}
}

func (ft *BankStatementFilters) ByDescriptionPtr(Description *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == nil,
		IsZero: Description != nil && (*Description) == "",
	}
}

func (ft *BankStatementFilters) ByAccountID(AccountID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == 0,
	}
}

func (ft *BankStatementFilters) ByAccountIDPtr(AccountID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == nil,
		IsZero: AccountID != nil && (*AccountID) == 0,
	}
}

func (ft *BankStatementFilters) ByTransferedAt(TransferedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "transfered_at",
		Value:  TransferedAt,
		IsNil:  TransferedAt.IsZero(),
	}
}

func (ft *BankStatementFilters) ByTransferedAtPtr(TransferedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "transfered_at",
		Value:  TransferedAt,
		IsNil:  TransferedAt == nil,
		IsZero: TransferedAt != nil && (*TransferedAt).IsZero(),
	}
}

func (ft *BankStatementFilters) ByExternalTransactionID(ExternalTransactionID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "external_transaction_id",
		Value:  ExternalTransactionID,
		IsNil:  ExternalTransactionID == "",
	}
}

func (ft *BankStatementFilters) ByExternalTransactionIDPtr(ExternalTransactionID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "external_transaction_id",
		Value:  ExternalTransactionID,
		IsNil:  ExternalTransactionID == nil,
		IsZero: ExternalTransactionID != nil && (*ExternalTransactionID) == "",
	}
}

func (ft *BankStatementFilters) BySenderName(SenderName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "sender_name",
		Value:  SenderName,
		IsNil:  SenderName == "",
	}
}

func (ft *BankStatementFilters) BySenderNamePtr(SenderName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "sender_name",
		Value:  SenderName,
		IsNil:  SenderName == nil,
		IsZero: SenderName != nil && (*SenderName) == "",
	}
}

func (ft *BankStatementFilters) BySenderBankAccount(SenderBankAccount string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "sender_bank_account",
		Value:  SenderBankAccount,
		IsNil:  SenderBankAccount == "",
	}
}

func (ft *BankStatementFilters) BySenderBankAccountPtr(SenderBankAccount *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "sender_bank_account",
		Value:  SenderBankAccount,
		IsNil:  SenderBankAccount == nil,
		IsZero: SenderBankAccount != nil && (*SenderBankAccount) == "",
	}
}

func (ft *BankStatementFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft *BankStatementFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft *BankStatementFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft *BankStatementFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}
