// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type BankStatements []*BankStatement

const __sqlBankStatement_Table = "bank_statement"
const __sqlBankStatement_ListCols = "\"id\",\"amount\",\"description\",\"account_id\",\"transfered_at\",\"external_transaction_id\",\"sender_name\",\"sender_bank_account\",\"other_info\",\"created_at\",\"updated_at\""
const __sqlBankStatement_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"amount\" = EXCLUDED.\"amount\",\"description\" = EXCLUDED.\"description\",\"account_id\" = EXCLUDED.\"account_id\",\"transfered_at\" = EXCLUDED.\"transfered_at\",\"external_transaction_id\" = EXCLUDED.\"external_transaction_id\",\"sender_name\" = EXCLUDED.\"sender_name\",\"sender_bank_account\" = EXCLUDED.\"sender_bank_account\",\"other_info\" = EXCLUDED.\"other_info\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlBankStatement_Insert = "INSERT INTO \"bank_statement\" (" + __sqlBankStatement_ListCols + ") VALUES"
const __sqlBankStatement_Select = "SELECT " + __sqlBankStatement_ListCols + " FROM \"bank_statement\""
const __sqlBankStatement_Select_history = "SELECT " + __sqlBankStatement_ListCols + " FROM history.\"bank_statement\""
const __sqlBankStatement_UpdateAll = "UPDATE \"bank_statement\" SET (" + __sqlBankStatement_ListCols + ")"
const __sqlBankStatement_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT bank_statement_pkey DO UPDATE SET"

func (m *BankStatement) SQLTableName() string  { return "bank_statement" }
func (m *BankStatements) SQLTableName() string { return "bank_statement" }
func (m *BankStatement) SQLListCols() string   { return __sqlBankStatement_ListCols }

func (m *BankStatement) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlBankStatement_ListCols + " FROM \"bank_statement\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *BankStatement) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "bank_statement"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"amount": {
			ColumnName:       "amount",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"description": {
			ColumnName:       "description",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"account_id": {
			ColumnName:       "account_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"transfered_at": {
			ColumnName:       "transfered_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_transaction_id": {
			ColumnName:       "external_transaction_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"sender_name": {
			ColumnName:       "sender_name",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"sender_bank_account": {
			ColumnName:       "sender_bank_account",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"other_info": {
			ColumnName:       "other_info",
			ColumnType:       "map[string]string",
			ColumnDBType:     "map[string]string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "bank_statement", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*BankStatement)(nil))
}

func (m *BankStatement) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.Int(m.Amount),
		core.String(m.Description),
		m.AccountID,
		core.Time(m.TransferedAt),
		core.String(m.ExternalTransactionID),
		core.String(m.SenderName),
		core.String(m.SenderBankAccount),
		core.JSON{m.OtherInfo},
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *BankStatement) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.Int)(&m.Amount),
		(*core.String)(&m.Description),
		&m.AccountID,
		(*core.Time)(&m.TransferedAt),
		(*core.String)(&m.ExternalTransactionID),
		(*core.String)(&m.SenderName),
		(*core.String)(&m.SenderBankAccount),
		core.JSON{&m.OtherInfo},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *BankStatement) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *BankStatements) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(BankStatements, 0, 128)
	for rows.Next() {
		m := new(BankStatement)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *BankStatement) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlBankStatement_Select)
	return nil
}

func (_ *BankStatements) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlBankStatement_Select)
	return nil
}

func (m *BankStatement) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlBankStatement_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(11)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms BankStatements) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlBankStatement_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(11)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *BankStatement) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlBankStatement_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlBankStatement_ListColsOnConflict)
	return nil
}

func (ms BankStatements) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlBankStatement_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlBankStatement_ListColsOnConflict)
	return nil
}

func (m *BankStatement) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("bank_statement")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Amount != 0 {
		flag = true
		w.WriteName("amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Amount)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.AccountID != 0 {
		flag = true
		w.WriteName("account_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccountID)
	}
	if !m.TransferedAt.IsZero() {
		flag = true
		w.WriteName("transfered_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TransferedAt)
	}
	if m.ExternalTransactionID != "" {
		flag = true
		w.WriteName("external_transaction_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalTransactionID)
	}
	if m.SenderName != "" {
		flag = true
		w.WriteName("sender_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SenderName)
	}
	if m.SenderBankAccount != "" {
		flag = true
		w.WriteName("sender_bank_account")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SenderBankAccount)
	}
	if m.OtherInfo != nil {
		flag = true
		w.WriteName("other_info")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.OtherInfo})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if true { // always update time
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *BankStatement) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlBankStatement_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(11)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type BankStatementHistory map[string]interface{}
type BankStatementHistories []map[string]interface{}

func (m *BankStatementHistory) SQLTableName() string  { return "history.\"bank_statement\"" }
func (m BankStatementHistories) SQLTableName() string { return "history.\"bank_statement\"" }

func (m *BankStatementHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlBankStatement_Select_history)
	return nil
}

func (m BankStatementHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlBankStatement_Select_history)
	return nil
}

func (m BankStatementHistory) ID() core.Interface          { return core.Interface{m["id"]} }
func (m BankStatementHistory) Amount() core.Interface      { return core.Interface{m["amount"]} }
func (m BankStatementHistory) Description() core.Interface { return core.Interface{m["description"]} }
func (m BankStatementHistory) AccountID() core.Interface   { return core.Interface{m["account_id"]} }
func (m BankStatementHistory) TransferedAt() core.Interface {
	return core.Interface{m["transfered_at"]}
}
func (m BankStatementHistory) ExternalTransactionID() core.Interface {
	return core.Interface{m["external_transaction_id"]}
}
func (m BankStatementHistory) SenderName() core.Interface { return core.Interface{m["sender_name"]} }
func (m BankStatementHistory) SenderBankAccount() core.Interface {
	return core.Interface{m["sender_bank_account"]}
}
func (m BankStatementHistory) OtherInfo() core.Interface { return core.Interface{m["other_info"]} }
func (m BankStatementHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m BankStatementHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *BankStatementHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 11)
	args := make([]interface{}, 11)
	for i := 0; i < 11; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(BankStatementHistory, 11)
	res["id"] = data[0]
	res["amount"] = data[1]
	res["description"] = data[2]
	res["account_id"] = data[3]
	res["transfered_at"] = data[4]
	res["external_transaction_id"] = data[5]
	res["sender_name"] = data[6]
	res["sender_bank_account"] = data[7]
	res["other_info"] = data[8]
	res["created_at"] = data[9]
	res["updated_at"] = data[10]
	*m = res
	return nil
}

func (ms *BankStatementHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 11)
	args := make([]interface{}, 11)
	for i := 0; i < 11; i++ {
		args[i] = &data[i]
	}
	res := make(BankStatementHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(BankStatementHistory)
		m["id"] = data[0]
		m["amount"] = data[1]
		m["description"] = data[2]
		m["account_id"] = data[3]
		m["transfered_at"] = data[4]
		m["external_transaction_id"] = data[5]
		m["sender_name"] = data[6]
		m["sender_bank_account"] = data[7]
		m["other_info"] = data[8]
		m["created_at"] = data[9]
		m["updated_at"] = data[10]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
