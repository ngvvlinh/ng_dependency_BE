// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	contact "o.o/api/main/contact"
	contactmodel "o.o/backend/com/main/contact/model"
	conversion "o.o/backend/pkg/common/conversion"
)

/*
Custom conversions:
    createContact    // in use

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*contactmodel.Contact)(nil), (*contact.Contact)(nil), func(arg, out interface{}) error {
		Convert_contactmodel_Contact_contact_Contact(arg.(*contactmodel.Contact), out.(*contact.Contact))
		return nil
	})
	s.Register(([]*contactmodel.Contact)(nil), (*[]*contact.Contact)(nil), func(arg, out interface{}) error {
		out0 := Convert_contactmodel_Contacts_contact_Contacts(arg.([]*contactmodel.Contact))
		*out.(*[]*contact.Contact) = out0
		return nil
	})
	s.Register((*contact.Contact)(nil), (*contactmodel.Contact)(nil), func(arg, out interface{}) error {
		Convert_contact_Contact_contactmodel_Contact(arg.(*contact.Contact), out.(*contactmodel.Contact))
		return nil
	})
	s.Register(([]*contact.Contact)(nil), (*[]*contactmodel.Contact)(nil), func(arg, out interface{}) error {
		out0 := Convert_contact_Contacts_contactmodel_Contacts(arg.([]*contact.Contact))
		*out.(*[]*contactmodel.Contact) = out0
		return nil
	})
	s.Register((*contact.CreateContactArgs)(nil), (*contact.Contact)(nil), func(arg, out interface{}) error {
		Apply_contact_CreateContactArgs_contact_Contact(arg.(*contact.CreateContactArgs), out.(*contact.Contact))
		return nil
	})
	s.Register((*contact.UpdateContactArgs)(nil), (*contact.Contact)(nil), func(arg, out interface{}) error {
		Apply_contact_UpdateContactArgs_contact_Contact(arg.(*contact.UpdateContactArgs), out.(*contact.Contact))
		return nil
	})
}

//-- convert o.o/api/main/contact.Contact --//

func Convert_contactmodel_Contact_contact_Contact(arg *contactmodel.Contact, out *contact.Contact) *contact.Contact {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &contact.Contact{}
	}
	convert_contactmodel_Contact_contact_Contact(arg, out)
	return out
}

func convert_contactmodel_Contact_contact_Contact(arg *contactmodel.Contact, out *contact.Contact) {
	out.ID = arg.ID                   // simple assign
	out.ShopID = arg.ShopID           // simple assign
	out.FullName = arg.FullName       // simple assign
	out.Phone = arg.Phone             // simple assign
	out.PhoneNorm = arg.PhoneNorm     // simple assign
	out.WLPartnerID = arg.WLPartnerID // simple assign
	out.CreatedAt = arg.CreatedAt     // simple assign
	out.UpdatedAt = arg.UpdatedAt     // simple assign
}

func Convert_contactmodel_Contacts_contact_Contacts(args []*contactmodel.Contact) (outs []*contact.Contact) {
	if args == nil {
		return nil
	}
	tmps := make([]contact.Contact, len(args))
	outs = make([]*contact.Contact, len(args))
	for i := range tmps {
		outs[i] = Convert_contactmodel_Contact_contact_Contact(args[i], &tmps[i])
	}
	return outs
}

func Convert_contact_Contact_contactmodel_Contact(arg *contact.Contact, out *contactmodel.Contact) *contactmodel.Contact {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &contactmodel.Contact{}
	}
	convert_contact_Contact_contactmodel_Contact(arg, out)
	return out
}

func convert_contact_Contact_contactmodel_Contact(arg *contact.Contact, out *contactmodel.Contact) {
	out.ID = arg.ID                   // simple assign
	out.ShopID = arg.ShopID           // simple assign
	out.FullName = arg.FullName       // simple assign
	out.Phone = arg.Phone             // simple assign
	out.PhoneNorm = arg.PhoneNorm     // simple assign
	out.WLPartnerID = arg.WLPartnerID // simple assign
	out.CreatedAt = arg.CreatedAt     // simple assign
	out.UpdatedAt = arg.UpdatedAt     // simple assign
	out.DeletedAt = time.Time{}       // zero value
}

func Convert_contact_Contacts_contactmodel_Contacts(args []*contact.Contact) (outs []*contactmodel.Contact) {
	if args == nil {
		return nil
	}
	tmps := make([]contactmodel.Contact, len(args))
	outs = make([]*contactmodel.Contact, len(args))
	for i := range tmps {
		outs[i] = Convert_contact_Contact_contactmodel_Contact(args[i], &tmps[i])
	}
	return outs
}

func Apply_contact_CreateContactArgs_contact_Contact(arg *contact.CreateContactArgs, out *contact.Contact) *contact.Contact {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &contact.Contact{}
	}
	createContact(arg, out)
	return out
}

func apply_contact_CreateContactArgs_contact_Contact(arg *contact.CreateContactArgs, out *contact.Contact) {
	out.ID = 0                  // zero value
	out.ShopID = arg.ShopID     // simple assign
	out.FullName = arg.FullName // simple assign
	out.Phone = arg.Phone       // simple assign
	out.PhoneNorm = ""          // zero value
	out.WLPartnerID = 0         // zero value
	out.CreatedAt = time.Time{} // zero value
	out.UpdatedAt = time.Time{} // zero value
}

func Apply_contact_UpdateContactArgs_contact_Contact(arg *contact.UpdateContactArgs, out *contact.Contact) *contact.Contact {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &contact.Contact{}
	}
	apply_contact_UpdateContactArgs_contact_Contact(arg, out)
	return out
}

func apply_contact_UpdateContactArgs_contact_Contact(arg *contact.UpdateContactArgs, out *contact.Contact) {
	out.ID = arg.ID                                 // simple assign
	out.ShopID = arg.ShopID                         // simple assign
	out.FullName = arg.FullName.Apply(out.FullName) // apply change
	out.Phone = arg.Phone.Apply(out.Phone)          // apply change
	out.PhoneNorm = out.PhoneNorm                   // no change
	out.WLPartnerID = out.WLPartnerID               // no change
	out.CreatedAt = out.CreatedAt                   // no change
	out.UpdatedAt = out.UpdatedAt                   // no change
}
