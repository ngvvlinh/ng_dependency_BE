// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	ledgering "etop.vn/api/main/ledgering"
	identityconvert "etop.vn/backend/com/main/identity/convert"
	ledgeringmodel "etop.vn/backend/com/main/ledgering/model"
	conversion "etop.vn/backend/pkg/common/conversion"
)

/*
Custom conversions:
    createShopLedger    // in use
    updateShopLedger    // in use

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*ledgeringmodel.ShopLedger)(nil), (*ledgering.ShopLedger)(nil), func(arg, out interface{}) error {
		Convert_ledgeringmodel_ShopLedger_ledgering_ShopLedger(arg.(*ledgeringmodel.ShopLedger), out.(*ledgering.ShopLedger))
		return nil
	})
	s.Register(([]*ledgeringmodel.ShopLedger)(nil), (*[]*ledgering.ShopLedger)(nil), func(arg, out interface{}) error {
		out0 := Convert_ledgeringmodel_ShopLedgers_ledgering_ShopLedgers(arg.([]*ledgeringmodel.ShopLedger))
		*out.(*[]*ledgering.ShopLedger) = out0
		return nil
	})
	s.Register((*ledgering.ShopLedger)(nil), (*ledgeringmodel.ShopLedger)(nil), func(arg, out interface{}) error {
		Convert_ledgering_ShopLedger_ledgeringmodel_ShopLedger(arg.(*ledgering.ShopLedger), out.(*ledgeringmodel.ShopLedger))
		return nil
	})
	s.Register(([]*ledgering.ShopLedger)(nil), (*[]*ledgeringmodel.ShopLedger)(nil), func(arg, out interface{}) error {
		out0 := Convert_ledgering_ShopLedgers_ledgeringmodel_ShopLedgers(arg.([]*ledgering.ShopLedger))
		*out.(*[]*ledgeringmodel.ShopLedger) = out0
		return nil
	})
	s.Register((*ledgering.CreateLedgerArgs)(nil), (*ledgering.ShopLedger)(nil), func(arg, out interface{}) error {
		Apply_ledgering_CreateLedgerArgs_ledgering_ShopLedger(arg.(*ledgering.CreateLedgerArgs), out.(*ledgering.ShopLedger))
		return nil
	})
	s.Register((*ledgering.UpdateLedgerArgs)(nil), (*ledgering.ShopLedger)(nil), func(arg, out interface{}) error {
		Apply_ledgering_UpdateLedgerArgs_ledgering_ShopLedger(arg.(*ledgering.UpdateLedgerArgs), out.(*ledgering.ShopLedger))
		return nil
	})
}

//-- convert etop.vn/api/main/ledgering.ShopLedger --//

func Convert_ledgeringmodel_ShopLedger_ledgering_ShopLedger(arg *ledgeringmodel.ShopLedger, out *ledgering.ShopLedger) *ledgering.ShopLedger {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &ledgering.ShopLedger{}
	}
	convert_ledgeringmodel_ShopLedger_ledgering_ShopLedger(arg, out)
	return out
}

func convert_ledgeringmodel_ShopLedger_ledgering_ShopLedger(arg *ledgeringmodel.ShopLedger, out *ledgering.ShopLedger) {
	out.ID = arg.ID         // simple assign
	out.ShopID = arg.ShopID // simple assign
	out.Name = arg.Name     // simple assign
	out.BankAccount = identityconvert.Convert_sharemodel_BankAccount_identitytypes_BankAccount(arg.BankAccount, nil)
	out.Note = arg.Note           // simple assign
	out.Type = arg.Type           // simple assign
	out.Status = arg.Status       // simple assign
	out.CreatedBy = arg.CreatedBy // simple assign
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
}

func Convert_ledgeringmodel_ShopLedgers_ledgering_ShopLedgers(args []*ledgeringmodel.ShopLedger) (outs []*ledgering.ShopLedger) {
	tmps := make([]ledgering.ShopLedger, len(args))
	outs = make([]*ledgering.ShopLedger, len(args))
	for i := range tmps {
		outs[i] = Convert_ledgeringmodel_ShopLedger_ledgering_ShopLedger(args[i], &tmps[i])
	}
	return outs
}

func Convert_ledgering_ShopLedger_ledgeringmodel_ShopLedger(arg *ledgering.ShopLedger, out *ledgeringmodel.ShopLedger) *ledgeringmodel.ShopLedger {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &ledgeringmodel.ShopLedger{}
	}
	convert_ledgering_ShopLedger_ledgeringmodel_ShopLedger(arg, out)
	return out
}

func convert_ledgering_ShopLedger_ledgeringmodel_ShopLedger(arg *ledgering.ShopLedger, out *ledgeringmodel.ShopLedger) {
	out.ID = arg.ID         // simple assign
	out.ShopID = arg.ShopID // simple assign
	out.Name = arg.Name     // simple assign
	out.BankAccount = identityconvert.Convert_identitytypes_BankAccount_sharemodel_BankAccount(arg.BankAccount, nil)
	out.Note = arg.Note           // simple assign
	out.Type = arg.Type           // simple assign
	out.Status = arg.Status       // simple assign
	out.CreatedBy = arg.CreatedBy // simple assign
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
	out.DeletedAt = time.Time{}   // zero value
}

func Convert_ledgering_ShopLedgers_ledgeringmodel_ShopLedgers(args []*ledgering.ShopLedger) (outs []*ledgeringmodel.ShopLedger) {
	tmps := make([]ledgeringmodel.ShopLedger, len(args))
	outs = make([]*ledgeringmodel.ShopLedger, len(args))
	for i := range tmps {
		outs[i] = Convert_ledgering_ShopLedger_ledgeringmodel_ShopLedger(args[i], &tmps[i])
	}
	return outs
}

func Apply_ledgering_CreateLedgerArgs_ledgering_ShopLedger(arg *ledgering.CreateLedgerArgs, out *ledgering.ShopLedger) *ledgering.ShopLedger {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &ledgering.ShopLedger{}
	}
	createShopLedger(arg, out)
	return out
}

func apply_ledgering_CreateLedgerArgs_ledgering_ShopLedger(arg *ledgering.CreateLedgerArgs, out *ledgering.ShopLedger) {
	out.ID = 0                        // zero value
	out.ShopID = arg.ShopID           // simple assign
	out.Name = arg.Name               // simple assign
	out.BankAccount = arg.BankAccount // simple assign
	out.Note = arg.Note               // simple assign
	out.Type = arg.Type               // simple assign
	out.Status = 0                    // zero value
	out.CreatedBy = arg.CreatedBy     // simple assign
	out.CreatedAt = time.Time{}       // zero value
	out.UpdatedAt = time.Time{}       // zero value
}

func Apply_ledgering_UpdateLedgerArgs_ledgering_ShopLedger(arg *ledgering.UpdateLedgerArgs, out *ledgering.ShopLedger) *ledgering.ShopLedger {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &ledgering.ShopLedger{}
	}
	updateShopLedger(arg, out)
	return out
}

func apply_ledgering_UpdateLedgerArgs_ledgering_ShopLedger(arg *ledgering.UpdateLedgerArgs, out *ledgering.ShopLedger) {
	out.ID = out.ID                     // identifier
	out.ShopID = out.ShopID             // identifier
	out.Name = arg.Name.Apply(out.Name) // apply change
	out.BankAccount = arg.BankAccount   // simple assign
	out.Note = arg.Note.Apply(out.Note) // apply change
	out.Type = out.Type                 // no change
	out.Status = out.Status             // no change
	out.CreatedBy = out.CreatedBy       // no change
	out.CreatedAt = out.CreatedAt       // no change
	out.UpdatedAt = out.UpdatedAt       // no change
}
