// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	identity "o.o/api/main/identity"
	identitytypes "o.o/api/main/identity/types"
	inttypes "o.o/api/top/int/types"
	addressconvert "o.o/backend/com/main/address/convert"
	identitymodel "o.o/backend/com/main/identity/model"
	sharemodel "o.o/backend/com/main/identity/sharemodel"
	conversion "o.o/backend/pkg/common/conversion"
	dot "o.o/capi/dot"
)

/*
Custom conversions:
    Affiliate          // in use
    AffiliateDB        // in use
    BankAccount        // in use
    BankAccountDB      // in use
    Shop               // in use
    ShopDB             // in use
    User               // in use
    XAccountAhamove    // in use

Ignored functions:
    Affiliates           // params are not pointer to named types
    Permission           // params are not pointer to named types
    PermissionToModel    // params are not pointer to named types
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*identitymodel.AccountUser)(nil), (*identity.AccountUser)(nil), func(arg, out interface{}) error {
		Convert_identitymodel_AccountUser_identity_AccountUser(arg.(*identitymodel.AccountUser), out.(*identity.AccountUser))
		return nil
	})
	s.Register(([]*identitymodel.AccountUser)(nil), (*[]*identity.AccountUser)(nil), func(arg, out interface{}) error {
		out0 := Convert_identitymodel_AccountUsers_identity_AccountUsers(arg.([]*identitymodel.AccountUser))
		*out.(*[]*identity.AccountUser) = out0
		return nil
	})
	s.Register((*identity.AccountUser)(nil), (*identitymodel.AccountUser)(nil), func(arg, out interface{}) error {
		Convert_identity_AccountUser_identitymodel_AccountUser(arg.(*identity.AccountUser), out.(*identitymodel.AccountUser))
		return nil
	})
	s.Register(([]*identity.AccountUser)(nil), (*[]*identitymodel.AccountUser)(nil), func(arg, out interface{}) error {
		out0 := Convert_identity_AccountUsers_identitymodel_AccountUsers(arg.([]*identity.AccountUser))
		*out.(*[]*identitymodel.AccountUser) = out0
		return nil
	})
	s.Register((*identitymodel.Affiliate)(nil), (*identity.Affiliate)(nil), func(arg, out interface{}) error {
		Convert_identitymodel_Affiliate_identity_Affiliate(arg.(*identitymodel.Affiliate), out.(*identity.Affiliate))
		return nil
	})
	s.Register(([]*identitymodel.Affiliate)(nil), (*[]*identity.Affiliate)(nil), func(arg, out interface{}) error {
		out0 := Convert_identitymodel_Affiliates_identity_Affiliates(arg.([]*identitymodel.Affiliate))
		*out.(*[]*identity.Affiliate) = out0
		return nil
	})
	s.Register((*identity.Affiliate)(nil), (*identitymodel.Affiliate)(nil), func(arg, out interface{}) error {
		Convert_identity_Affiliate_identitymodel_Affiliate(arg.(*identity.Affiliate), out.(*identitymodel.Affiliate))
		return nil
	})
	s.Register(([]*identity.Affiliate)(nil), (*[]*identitymodel.Affiliate)(nil), func(arg, out interface{}) error {
		out0 := Convert_identity_Affiliates_identitymodel_Affiliates(arg.([]*identity.Affiliate))
		*out.(*[]*identitymodel.Affiliate) = out0
		return nil
	})
	s.Register((*identitymodel.ExternalAccountAhamove)(nil), (*identity.ExternalAccountAhamove)(nil), func(arg, out interface{}) error {
		Convert_identitymodel_ExternalAccountAhamove_identity_ExternalAccountAhamove(arg.(*identitymodel.ExternalAccountAhamove), out.(*identity.ExternalAccountAhamove))
		return nil
	})
	s.Register(([]*identitymodel.ExternalAccountAhamove)(nil), (*[]*identity.ExternalAccountAhamove)(nil), func(arg, out interface{}) error {
		out0 := Convert_identitymodel_ExternalAccountAhamoves_identity_ExternalAccountAhamoves(arg.([]*identitymodel.ExternalAccountAhamove))
		*out.(*[]*identity.ExternalAccountAhamove) = out0
		return nil
	})
	s.Register((*identity.ExternalAccountAhamove)(nil), (*identitymodel.ExternalAccountAhamove)(nil), func(arg, out interface{}) error {
		Convert_identity_ExternalAccountAhamove_identitymodel_ExternalAccountAhamove(arg.(*identity.ExternalAccountAhamove), out.(*identitymodel.ExternalAccountAhamove))
		return nil
	})
	s.Register(([]*identity.ExternalAccountAhamove)(nil), (*[]*identitymodel.ExternalAccountAhamove)(nil), func(arg, out interface{}) error {
		out0 := Convert_identity_ExternalAccountAhamoves_identitymodel_ExternalAccountAhamoves(arg.([]*identity.ExternalAccountAhamove))
		*out.(*[]*identitymodel.ExternalAccountAhamove) = out0
		return nil
	})
	s.Register((*identitymodel.Partner)(nil), (*identity.Partner)(nil), func(arg, out interface{}) error {
		Convert_identitymodel_Partner_identity_Partner(arg.(*identitymodel.Partner), out.(*identity.Partner))
		return nil
	})
	s.Register(([]*identitymodel.Partner)(nil), (*[]*identity.Partner)(nil), func(arg, out interface{}) error {
		out0 := Convert_identitymodel_Partners_identity_Partners(arg.([]*identitymodel.Partner))
		*out.(*[]*identity.Partner) = out0
		return nil
	})
	s.Register((*identity.Partner)(nil), (*identitymodel.Partner)(nil), func(arg, out interface{}) error {
		Convert_identity_Partner_identitymodel_Partner(arg.(*identity.Partner), out.(*identitymodel.Partner))
		return nil
	})
	s.Register(([]*identity.Partner)(nil), (*[]*identitymodel.Partner)(nil), func(arg, out interface{}) error {
		out0 := Convert_identity_Partners_identitymodel_Partners(arg.([]*identity.Partner))
		*out.(*[]*identitymodel.Partner) = out0
		return nil
	})
	s.Register((*identitymodel.Permission)(nil), (*identity.Permission)(nil), func(arg, out interface{}) error {
		Convert_identitymodel_Permission_identity_Permission(arg.(*identitymodel.Permission), out.(*identity.Permission))
		return nil
	})
	s.Register(([]*identitymodel.Permission)(nil), (*[]*identity.Permission)(nil), func(arg, out interface{}) error {
		out0 := Convert_identitymodel_Permissions_identity_Permissions(arg.([]*identitymodel.Permission))
		*out.(*[]*identity.Permission) = out0
		return nil
	})
	s.Register((*identity.Permission)(nil), (*identitymodel.Permission)(nil), func(arg, out interface{}) error {
		Convert_identity_Permission_identitymodel_Permission(arg.(*identity.Permission), out.(*identitymodel.Permission))
		return nil
	})
	s.Register(([]*identity.Permission)(nil), (*[]*identitymodel.Permission)(nil), func(arg, out interface{}) error {
		out0 := Convert_identity_Permissions_identitymodel_Permissions(arg.([]*identity.Permission))
		*out.(*[]*identitymodel.Permission) = out0
		return nil
	})
	s.Register((*identitymodel.ShippingServiceSelectStrategyItem)(nil), (*identity.ShippingServiceSelectStrategyItem)(nil), func(arg, out interface{}) error {
		Convert_identitymodel_ShippingServiceSelectStrategyItem_identity_ShippingServiceSelectStrategyItem(arg.(*identitymodel.ShippingServiceSelectStrategyItem), out.(*identity.ShippingServiceSelectStrategyItem))
		return nil
	})
	s.Register(([]*identitymodel.ShippingServiceSelectStrategyItem)(nil), (*[]*identity.ShippingServiceSelectStrategyItem)(nil), func(arg, out interface{}) error {
		out0 := Convert_identitymodel_ShippingServiceSelectStrategyItems_identity_ShippingServiceSelectStrategyItems(arg.([]*identitymodel.ShippingServiceSelectStrategyItem))
		*out.(*[]*identity.ShippingServiceSelectStrategyItem) = out0
		return nil
	})
	s.Register((*identity.ShippingServiceSelectStrategyItem)(nil), (*identitymodel.ShippingServiceSelectStrategyItem)(nil), func(arg, out interface{}) error {
		Convert_identity_ShippingServiceSelectStrategyItem_identitymodel_ShippingServiceSelectStrategyItem(arg.(*identity.ShippingServiceSelectStrategyItem), out.(*identitymodel.ShippingServiceSelectStrategyItem))
		return nil
	})
	s.Register(([]*identity.ShippingServiceSelectStrategyItem)(nil), (*[]*identitymodel.ShippingServiceSelectStrategyItem)(nil), func(arg, out interface{}) error {
		out0 := Convert_identity_ShippingServiceSelectStrategyItems_identitymodel_ShippingServiceSelectStrategyItems(arg.([]*identity.ShippingServiceSelectStrategyItem))
		*out.(*[]*identitymodel.ShippingServiceSelectStrategyItem) = out0
		return nil
	})
	s.Register((*identitymodel.Shop)(nil), (*identity.Shop)(nil), func(arg, out interface{}) error {
		Convert_identitymodel_Shop_identity_Shop(arg.(*identitymodel.Shop), out.(*identity.Shop))
		return nil
	})
	s.Register(([]*identitymodel.Shop)(nil), (*[]*identity.Shop)(nil), func(arg, out interface{}) error {
		out0 := Convert_identitymodel_Shops_identity_Shops(arg.([]*identitymodel.Shop))
		*out.(*[]*identity.Shop) = out0
		return nil
	})
	s.Register((*identity.Shop)(nil), (*identitymodel.Shop)(nil), func(arg, out interface{}) error {
		Convert_identity_Shop_identitymodel_Shop(arg.(*identity.Shop), out.(*identitymodel.Shop))
		return nil
	})
	s.Register(([]*identity.Shop)(nil), (*[]*identitymodel.Shop)(nil), func(arg, out interface{}) error {
		out0 := Convert_identity_Shops_identitymodel_Shops(arg.([]*identity.Shop))
		*out.(*[]*identitymodel.Shop) = out0
		return nil
	})
	s.Register((*identitymodel.ShopExtended)(nil), (*identity.ShopExtended)(nil), func(arg, out interface{}) error {
		Convert_identitymodel_ShopExtended_identity_ShopExtended(arg.(*identitymodel.ShopExtended), out.(*identity.ShopExtended))
		return nil
	})
	s.Register(([]*identitymodel.ShopExtended)(nil), (*[]*identity.ShopExtended)(nil), func(arg, out interface{}) error {
		out0 := Convert_identitymodel_ShopExtendeds_identity_ShopExtendeds(arg.([]*identitymodel.ShopExtended))
		*out.(*[]*identity.ShopExtended) = out0
		return nil
	})
	s.Register((*identity.ShopExtended)(nil), (*identitymodel.ShopExtended)(nil), func(arg, out interface{}) error {
		Convert_identity_ShopExtended_identitymodel_ShopExtended(arg.(*identity.ShopExtended), out.(*identitymodel.ShopExtended))
		return nil
	})
	s.Register(([]*identity.ShopExtended)(nil), (*[]*identitymodel.ShopExtended)(nil), func(arg, out interface{}) error {
		out0 := Convert_identity_ShopExtendeds_identitymodel_ShopExtendeds(arg.([]*identity.ShopExtended))
		*out.(*[]*identitymodel.ShopExtended) = out0
		return nil
	})
	s.Register((*identitymodel.SurveyInfo)(nil), (*identity.SurveyInfo)(nil), func(arg, out interface{}) error {
		Convert_identitymodel_SurveyInfo_identity_SurveyInfo(arg.(*identitymodel.SurveyInfo), out.(*identity.SurveyInfo))
		return nil
	})
	s.Register(([]*identitymodel.SurveyInfo)(nil), (*[]*identity.SurveyInfo)(nil), func(arg, out interface{}) error {
		out0 := Convert_identitymodel_SurveyInfoes_identity_SurveyInfoes(arg.([]*identitymodel.SurveyInfo))
		*out.(*[]*identity.SurveyInfo) = out0
		return nil
	})
	s.Register((*identity.SurveyInfo)(nil), (*identitymodel.SurveyInfo)(nil), func(arg, out interface{}) error {
		Convert_identity_SurveyInfo_identitymodel_SurveyInfo(arg.(*identity.SurveyInfo), out.(*identitymodel.SurveyInfo))
		return nil
	})
	s.Register(([]*identity.SurveyInfo)(nil), (*[]*identitymodel.SurveyInfo)(nil), func(arg, out interface{}) error {
		out0 := Convert_identity_SurveyInfoes_identitymodel_SurveyInfoes(arg.([]*identity.SurveyInfo))
		*out.(*[]*identitymodel.SurveyInfo) = out0
		return nil
	})
	s.Register((*identitymodel.User)(nil), (*identity.User)(nil), func(arg, out interface{}) error {
		Convert_identitymodel_User_identity_User(arg.(*identitymodel.User), out.(*identity.User))
		return nil
	})
	s.Register(([]*identitymodel.User)(nil), (*[]*identity.User)(nil), func(arg, out interface{}) error {
		out0 := Convert_identitymodel_Users_identity_Users(arg.([]*identitymodel.User))
		*out.(*[]*identity.User) = out0
		return nil
	})
	s.Register((*identity.User)(nil), (*identitymodel.User)(nil), func(arg, out interface{}) error {
		Convert_identity_User_identitymodel_User(arg.(*identity.User), out.(*identitymodel.User))
		return nil
	})
	s.Register(([]*identity.User)(nil), (*[]*identitymodel.User)(nil), func(arg, out interface{}) error {
		out0 := Convert_identity_Users_identitymodel_Users(arg.([]*identity.User))
		*out.(*[]*identitymodel.User) = out0
		return nil
	})
	s.Register((*identitymodel.UserRefSaff)(nil), (*identity.UserRefSaff)(nil), func(arg, out interface{}) error {
		Convert_identitymodel_UserRefSaff_identity_UserRefSaff(arg.(*identitymodel.UserRefSaff), out.(*identity.UserRefSaff))
		return nil
	})
	s.Register(([]*identitymodel.UserRefSaff)(nil), (*[]*identity.UserRefSaff)(nil), func(arg, out interface{}) error {
		out0 := Convert_identitymodel_UserRefSaffs_identity_UserRefSaffs(arg.([]*identitymodel.UserRefSaff))
		*out.(*[]*identity.UserRefSaff) = out0
		return nil
	})
	s.Register((*identity.UserRefSaff)(nil), (*identitymodel.UserRefSaff)(nil), func(arg, out interface{}) error {
		Convert_identity_UserRefSaff_identitymodel_UserRefSaff(arg.(*identity.UserRefSaff), out.(*identitymodel.UserRefSaff))
		return nil
	})
	s.Register(([]*identity.UserRefSaff)(nil), (*[]*identitymodel.UserRefSaff)(nil), func(arg, out interface{}) error {
		out0 := Convert_identity_UserRefSaffs_identitymodel_UserRefSaffs(arg.([]*identity.UserRefSaff))
		*out.(*[]*identitymodel.UserRefSaff) = out0
		return nil
	})
	s.Register((*sharemodel.BankAccount)(nil), (*identitytypes.BankAccount)(nil), func(arg, out interface{}) error {
		Convert_sharemodel_BankAccount_identitytypes_BankAccount(arg.(*sharemodel.BankAccount), out.(*identitytypes.BankAccount))
		return nil
	})
	s.Register(([]*sharemodel.BankAccount)(nil), (*[]*identitytypes.BankAccount)(nil), func(arg, out interface{}) error {
		out0 := Convert_sharemodel_BankAccounts_identitytypes_BankAccounts(arg.([]*sharemodel.BankAccount))
		*out.(*[]*identitytypes.BankAccount) = out0
		return nil
	})
	s.Register((*identitytypes.BankAccount)(nil), (*sharemodel.BankAccount)(nil), func(arg, out interface{}) error {
		Convert_identitytypes_BankAccount_sharemodel_BankAccount(arg.(*identitytypes.BankAccount), out.(*sharemodel.BankAccount))
		return nil
	})
	s.Register(([]*identitytypes.BankAccount)(nil), (*[]*sharemodel.BankAccount)(nil), func(arg, out interface{}) error {
		out0 := Convert_identitytypes_BankAccounts_sharemodel_BankAccounts(arg.([]*identitytypes.BankAccount))
		*out.(*[]*sharemodel.BankAccount) = out0
		return nil
	})
	s.Register((*sharemodel.CompanyInfo)(nil), (*identitytypes.CompanyInfo)(nil), func(arg, out interface{}) error {
		Convert_sharemodel_CompanyInfo_identitytypes_CompanyInfo(arg.(*sharemodel.CompanyInfo), out.(*identitytypes.CompanyInfo))
		return nil
	})
	s.Register(([]*sharemodel.CompanyInfo)(nil), (*[]*identitytypes.CompanyInfo)(nil), func(arg, out interface{}) error {
		out0 := Convert_sharemodel_CompanyInfoes_identitytypes_CompanyInfoes(arg.([]*sharemodel.CompanyInfo))
		*out.(*[]*identitytypes.CompanyInfo) = out0
		return nil
	})
	s.Register((*identitytypes.CompanyInfo)(nil), (*sharemodel.CompanyInfo)(nil), func(arg, out interface{}) error {
		Convert_identitytypes_CompanyInfo_sharemodel_CompanyInfo(arg.(*identitytypes.CompanyInfo), out.(*sharemodel.CompanyInfo))
		return nil
	})
	s.Register(([]*identitytypes.CompanyInfo)(nil), (*[]*sharemodel.CompanyInfo)(nil), func(arg, out interface{}) error {
		out0 := Convert_identitytypes_CompanyInfoes_sharemodel_CompanyInfoes(arg.([]*identitytypes.CompanyInfo))
		*out.(*[]*sharemodel.CompanyInfo) = out0
		return nil
	})
	s.Register((*sharemodel.ContactPerson)(nil), (*identitytypes.ContactPerson)(nil), func(arg, out interface{}) error {
		Convert_sharemodel_ContactPerson_identitytypes_ContactPerson(arg.(*sharemodel.ContactPerson), out.(*identitytypes.ContactPerson))
		return nil
	})
	s.Register(([]*sharemodel.ContactPerson)(nil), (*[]*identitytypes.ContactPerson)(nil), func(arg, out interface{}) error {
		out0 := Convert_sharemodel_ContactPersons_identitytypes_ContactPersons(arg.([]*sharemodel.ContactPerson))
		*out.(*[]*identitytypes.ContactPerson) = out0
		return nil
	})
	s.Register((*identitytypes.ContactPerson)(nil), (*sharemodel.ContactPerson)(nil), func(arg, out interface{}) error {
		Convert_identitytypes_ContactPerson_sharemodel_ContactPerson(arg.(*identitytypes.ContactPerson), out.(*sharemodel.ContactPerson))
		return nil
	})
	s.Register(([]*identitytypes.ContactPerson)(nil), (*[]*sharemodel.ContactPerson)(nil), func(arg, out interface{}) error {
		out0 := Convert_identitytypes_ContactPersons_sharemodel_ContactPersons(arg.([]*identitytypes.ContactPerson))
		*out.(*[]*sharemodel.ContactPerson) = out0
		return nil
	})
	s.Register((*sharemodel.AdjustmentLine)(nil), (*inttypes.AdjustmentLine)(nil), func(arg, out interface{}) error {
		Convert_sharemodel_AdjustmentLine_inttypes_AdjustmentLine(arg.(*sharemodel.AdjustmentLine), out.(*inttypes.AdjustmentLine))
		return nil
	})
	s.Register(([]*sharemodel.AdjustmentLine)(nil), (*[]*inttypes.AdjustmentLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_sharemodel_AdjustmentLines_inttypes_AdjustmentLines(arg.([]*sharemodel.AdjustmentLine))
		*out.(*[]*inttypes.AdjustmentLine) = out0
		return nil
	})
	s.Register((*inttypes.AdjustmentLine)(nil), (*sharemodel.AdjustmentLine)(nil), func(arg, out interface{}) error {
		Convert_inttypes_AdjustmentLine_sharemodel_AdjustmentLine(arg.(*inttypes.AdjustmentLine), out.(*sharemodel.AdjustmentLine))
		return nil
	})
	s.Register(([]*inttypes.AdjustmentLine)(nil), (*[]*sharemodel.AdjustmentLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_inttypes_AdjustmentLines_sharemodel_AdjustmentLines(arg.([]*inttypes.AdjustmentLine))
		*out.(*[]*sharemodel.AdjustmentLine) = out0
		return nil
	})
	s.Register((*sharemodel.DiscountLine)(nil), (*inttypes.DiscountLine)(nil), func(arg, out interface{}) error {
		Convert_sharemodel_DiscountLine_inttypes_DiscountLine(arg.(*sharemodel.DiscountLine), out.(*inttypes.DiscountLine))
		return nil
	})
	s.Register(([]*sharemodel.DiscountLine)(nil), (*[]*inttypes.DiscountLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_sharemodel_DiscountLines_inttypes_DiscountLines(arg.([]*sharemodel.DiscountLine))
		*out.(*[]*inttypes.DiscountLine) = out0
		return nil
	})
	s.Register((*inttypes.DiscountLine)(nil), (*sharemodel.DiscountLine)(nil), func(arg, out interface{}) error {
		Convert_inttypes_DiscountLine_sharemodel_DiscountLine(arg.(*inttypes.DiscountLine), out.(*sharemodel.DiscountLine))
		return nil
	})
	s.Register(([]*inttypes.DiscountLine)(nil), (*[]*sharemodel.DiscountLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_inttypes_DiscountLines_sharemodel_DiscountLines(arg.([]*inttypes.DiscountLine))
		*out.(*[]*sharemodel.DiscountLine) = out0
		return nil
	})
	s.Register((*sharemodel.FeeLine)(nil), (*inttypes.FeeLine)(nil), func(arg, out interface{}) error {
		Convert_sharemodel_FeeLine_inttypes_FeeLine(arg.(*sharemodel.FeeLine), out.(*inttypes.FeeLine))
		return nil
	})
	s.Register(([]*sharemodel.FeeLine)(nil), (*[]*inttypes.FeeLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_sharemodel_FeeLines_inttypes_FeeLines(arg.([]*sharemodel.FeeLine))
		*out.(*[]*inttypes.FeeLine) = out0
		return nil
	})
	s.Register((*inttypes.FeeLine)(nil), (*sharemodel.FeeLine)(nil), func(arg, out interface{}) error {
		Convert_inttypes_FeeLine_sharemodel_FeeLine(arg.(*inttypes.FeeLine), out.(*sharemodel.FeeLine))
		return nil
	})
	s.Register(([]*inttypes.FeeLine)(nil), (*[]*sharemodel.FeeLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_inttypes_FeeLines_sharemodel_FeeLines(arg.([]*inttypes.FeeLine))
		*out.(*[]*sharemodel.FeeLine) = out0
		return nil
	})
}

//-- convert o.o/api/main/identity.AccountUser --//

func Convert_identitymodel_AccountUser_identity_AccountUser(arg *identitymodel.AccountUser, out *identity.AccountUser) *identity.AccountUser {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identity.AccountUser{}
	}
	convert_identitymodel_AccountUser_identity_AccountUser(arg, out)
	return out
}

func convert_identitymodel_AccountUser_identity_AccountUser(arg *identitymodel.AccountUser, out *identity.AccountUser) {
	out.AccountID = arg.AccountID                       // simple assign
	out.UserID = arg.UserID                             // simple assign
	out.Status = arg.Status                             // simple assign
	out.ResponseStatus = arg.ResponseStatus             // simple assign
	out.CreatedAt = arg.CreatedAt                       // simple assign
	out.UpdatedAt = arg.UpdatedAt                       // simple assign
	out.DeletedAt = arg.DeletedAt                       // simple assign
	out.Permission = identity.Permission{}              // types do not match
	out.FullName = arg.FullName                         // simple assign
	out.ShortName = arg.ShortName                       // simple assign
	out.Position = arg.Position                         // simple assign
	out.InvitationSentAt = arg.InvitationSentAt         // simple assign
	out.InvitationSentBy = arg.InvitationSentBy         // simple assign
	out.InvitationAcceptedAt = arg.InvitationAcceptedAt // simple assign
	out.InvitationRejectedAt = arg.InvitationRejectedAt // simple assign
	out.DisabledAt = arg.DisabledAt                     // simple assign
	out.DisabledBy = arg.DisabledBy                     // simple assign
	out.DisableReason = arg.DisableReason               // simple assign
	out.Rid = arg.Rid                                   // simple assign
}

func Convert_identitymodel_AccountUsers_identity_AccountUsers(args []*identitymodel.AccountUser) (outs []*identity.AccountUser) {
	if args == nil {
		return nil
	}
	tmps := make([]identity.AccountUser, len(args))
	outs = make([]*identity.AccountUser, len(args))
	for i := range tmps {
		outs[i] = Convert_identitymodel_AccountUser_identity_AccountUser(args[i], &tmps[i])
	}
	return outs
}

func Convert_identity_AccountUser_identitymodel_AccountUser(arg *identity.AccountUser, out *identitymodel.AccountUser) *identitymodel.AccountUser {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identitymodel.AccountUser{}
	}
	convert_identity_AccountUser_identitymodel_AccountUser(arg, out)
	return out
}

func convert_identity_AccountUser_identitymodel_AccountUser(arg *identity.AccountUser, out *identitymodel.AccountUser) {
	out.AccountID = arg.AccountID                       // simple assign
	out.UserID = arg.UserID                             // simple assign
	out.Status = arg.Status                             // simple assign
	out.ResponseStatus = arg.ResponseStatus             // simple assign
	out.CreatedAt = arg.CreatedAt                       // simple assign
	out.UpdatedAt = arg.UpdatedAt                       // simple assign
	out.DeletedAt = arg.DeletedAt                       // simple assign
	out.Permission = identitymodel.Permission{}         // types do not match
	out.FullName = arg.FullName                         // simple assign
	out.ShortName = arg.ShortName                       // simple assign
	out.Position = arg.Position                         // simple assign
	out.InvitationSentAt = arg.InvitationSentAt         // simple assign
	out.InvitationSentBy = arg.InvitationSentBy         // simple assign
	out.InvitationAcceptedAt = arg.InvitationAcceptedAt // simple assign
	out.InvitationRejectedAt = arg.InvitationRejectedAt // simple assign
	out.DisabledAt = arg.DisabledAt                     // simple assign
	out.DisabledBy = arg.DisabledBy                     // simple assign
	out.DisableReason = arg.DisableReason               // simple assign
	out.Rid = arg.Rid                                   // simple assign
}

func Convert_identity_AccountUsers_identitymodel_AccountUsers(args []*identity.AccountUser) (outs []*identitymodel.AccountUser) {
	if args == nil {
		return nil
	}
	tmps := make([]identitymodel.AccountUser, len(args))
	outs = make([]*identitymodel.AccountUser, len(args))
	for i := range tmps {
		outs[i] = Convert_identity_AccountUser_identitymodel_AccountUser(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/main/identity.Affiliate --//

func Convert_identitymodel_Affiliate_identity_Affiliate(arg *identitymodel.Affiliate, out *identity.Affiliate) *identity.Affiliate {
	return Affiliate(arg)
}

func convert_identitymodel_Affiliate_identity_Affiliate(arg *identitymodel.Affiliate, out *identity.Affiliate) {
	out.ID = arg.ID               // simple assign
	out.OwnerID = arg.OwnerID     // simple assign
	out.Name = arg.Name           // simple assign
	out.Phone = arg.Phone         // simple assign
	out.Email = arg.Email         // simple assign
	out.IsTest = arg.IsTest       // simple assign
	out.Status = arg.Status       // simple assign
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
	out.DeletedAt = arg.DeletedAt // simple assign
	out.BankAccount = Convert_sharemodel_BankAccount_identitytypes_BankAccount(arg.BankAccount, nil)
}

func Convert_identitymodel_Affiliates_identity_Affiliates(args []*identitymodel.Affiliate) (outs []*identity.Affiliate) {
	if args == nil {
		return nil
	}
	tmps := make([]identity.Affiliate, len(args))
	outs = make([]*identity.Affiliate, len(args))
	for i := range tmps {
		outs[i] = Convert_identitymodel_Affiliate_identity_Affiliate(args[i], &tmps[i])
	}
	return outs
}

func Convert_identity_Affiliate_identitymodel_Affiliate(arg *identity.Affiliate, out *identitymodel.Affiliate) *identitymodel.Affiliate {
	return AffiliateDB(arg)
}

func convert_identity_Affiliate_identitymodel_Affiliate(arg *identity.Affiliate, out *identitymodel.Affiliate) {
	out.ID = arg.ID               // simple assign
	out.OwnerID = arg.OwnerID     // simple assign
	out.Name = arg.Name           // simple assign
	out.Phone = arg.Phone         // simple assign
	out.Email = arg.Email         // simple assign
	out.IsTest = arg.IsTest       // simple assign
	out.Status = arg.Status       // simple assign
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
	out.DeletedAt = arg.DeletedAt // simple assign
	out.BankAccount = Convert_identitytypes_BankAccount_sharemodel_BankAccount(arg.BankAccount, nil)
}

func Convert_identity_Affiliates_identitymodel_Affiliates(args []*identity.Affiliate) (outs []*identitymodel.Affiliate) {
	if args == nil {
		return nil
	}
	tmps := make([]identitymodel.Affiliate, len(args))
	outs = make([]*identitymodel.Affiliate, len(args))
	for i := range tmps {
		outs[i] = Convert_identity_Affiliate_identitymodel_Affiliate(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/main/identity.ExternalAccountAhamove --//

func Convert_identitymodel_ExternalAccountAhamove_identity_ExternalAccountAhamove(arg *identitymodel.ExternalAccountAhamove, out *identity.ExternalAccountAhamove) *identity.ExternalAccountAhamove {
	return XAccountAhamove(arg)
}

func convert_identitymodel_ExternalAccountAhamove_identity_ExternalAccountAhamove(arg *identitymodel.ExternalAccountAhamove, out *identity.ExternalAccountAhamove) {
	out.ID = arg.ID                                   // simple assign
	out.Phone = arg.Phone                             // simple assign
	out.Name = arg.Name                               // simple assign
	out.ExternalID = arg.ExternalID                   // simple assign
	out.ExternalToken = arg.ExternalToken             // simple assign
	out.ExternalVerified = arg.ExternalVerified       // simple assign
	out.CreatedAt = arg.CreatedAt                     // simple assign
	out.UpdatedAt = arg.UpdatedAt                     // simple assign
	out.ExternalCreatedAt = arg.ExternalCreatedAt     // simple assign
	out.LastSendVerifiedAt = arg.LastSendVerifiedAt   // simple assign
	out.ExternalTicketID = arg.ExternalTicketID       // simple assign
	out.IDCardFrontImg = arg.IDCardFrontImg           // simple assign
	out.IDCardBackImg = arg.IDCardBackImg             // simple assign
	out.PortraitImg = arg.PortraitImg                 // simple assign
	out.WebsiteURL = arg.WebsiteURL                   // simple assign
	out.FanpageURL = arg.FanpageURL                   // simple assign
	out.CompanyImgs = arg.CompanyImgs                 // simple assign
	out.BusinessLicenseImgs = arg.BusinessLicenseImgs // simple assign
	out.UploadedAt = arg.UploadedAt                   // simple assign
}

func Convert_identitymodel_ExternalAccountAhamoves_identity_ExternalAccountAhamoves(args []*identitymodel.ExternalAccountAhamove) (outs []*identity.ExternalAccountAhamove) {
	if args == nil {
		return nil
	}
	tmps := make([]identity.ExternalAccountAhamove, len(args))
	outs = make([]*identity.ExternalAccountAhamove, len(args))
	for i := range tmps {
		outs[i] = Convert_identitymodel_ExternalAccountAhamove_identity_ExternalAccountAhamove(args[i], &tmps[i])
	}
	return outs
}

func Convert_identity_ExternalAccountAhamove_identitymodel_ExternalAccountAhamove(arg *identity.ExternalAccountAhamove, out *identitymodel.ExternalAccountAhamove) *identitymodel.ExternalAccountAhamove {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identitymodel.ExternalAccountAhamove{}
	}
	convert_identity_ExternalAccountAhamove_identitymodel_ExternalAccountAhamove(arg, out)
	return out
}

func convert_identity_ExternalAccountAhamove_identitymodel_ExternalAccountAhamove(arg *identity.ExternalAccountAhamove, out *identitymodel.ExternalAccountAhamove) {
	out.ID = arg.ID                                   // simple assign
	out.OwnerID = 0                                   // zero value
	out.Phone = arg.Phone                             // simple assign
	out.Name = arg.Name                               // simple assign
	out.ExternalID = arg.ExternalID                   // simple assign
	out.ExternalVerified = arg.ExternalVerified       // simple assign
	out.ExternalCreatedAt = arg.ExternalCreatedAt     // simple assign
	out.ExternalToken = arg.ExternalToken             // simple assign
	out.CreatedAt = arg.CreatedAt                     // simple assign
	out.UpdatedAt = arg.UpdatedAt                     // simple assign
	out.LastSendVerifiedAt = arg.LastSendVerifiedAt   // simple assign
	out.ExternalTicketID = arg.ExternalTicketID       // simple assign
	out.IDCardFrontImg = arg.IDCardFrontImg           // simple assign
	out.IDCardBackImg = arg.IDCardBackImg             // simple assign
	out.PortraitImg = arg.PortraitImg                 // simple assign
	out.WebsiteURL = arg.WebsiteURL                   // simple assign
	out.FanpageURL = arg.FanpageURL                   // simple assign
	out.CompanyImgs = arg.CompanyImgs                 // simple assign
	out.BusinessLicenseImgs = arg.BusinessLicenseImgs // simple assign
	out.ExternalDataVerified = nil                    // zero value
	out.UploadedAt = arg.UploadedAt                   // simple assign
}

func Convert_identity_ExternalAccountAhamoves_identitymodel_ExternalAccountAhamoves(args []*identity.ExternalAccountAhamove) (outs []*identitymodel.ExternalAccountAhamove) {
	if args == nil {
		return nil
	}
	tmps := make([]identitymodel.ExternalAccountAhamove, len(args))
	outs = make([]*identitymodel.ExternalAccountAhamove, len(args))
	for i := range tmps {
		outs[i] = Convert_identity_ExternalAccountAhamove_identitymodel_ExternalAccountAhamove(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/main/identity.Partner --//

func Convert_identitymodel_Partner_identity_Partner(arg *identitymodel.Partner, out *identity.Partner) *identity.Partner {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identity.Partner{}
	}
	convert_identitymodel_Partner_identity_Partner(arg, out)
	return out
}

func convert_identitymodel_Partner_identity_Partner(arg *identitymodel.Partner, out *identity.Partner) {
	out.ID = arg.ID                       // simple assign
	out.OwnerID = arg.OwnerID             // simple assign
	out.Name = arg.Name                   // simple assign
	out.PublicName = arg.PublicName       // simple assign
	out.ImageURL = arg.ImageURL           // simple assign
	out.WebsiteURL = arg.WebsiteURL       // simple assign
	out.WhiteLabelKey = arg.WhiteLabelKey // simple assign
}

func Convert_identitymodel_Partners_identity_Partners(args []*identitymodel.Partner) (outs []*identity.Partner) {
	if args == nil {
		return nil
	}
	tmps := make([]identity.Partner, len(args))
	outs = make([]*identity.Partner, len(args))
	for i := range tmps {
		outs[i] = Convert_identitymodel_Partner_identity_Partner(args[i], &tmps[i])
	}
	return outs
}

func Convert_identity_Partner_identitymodel_Partner(arg *identity.Partner, out *identitymodel.Partner) *identitymodel.Partner {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identitymodel.Partner{}
	}
	convert_identity_Partner_identitymodel_Partner(arg, out)
	return out
}

func convert_identity_Partner_identitymodel_Partner(arg *identity.Partner, out *identitymodel.Partner) {
	out.ID = arg.ID                       // simple assign
	out.OwnerID = arg.OwnerID             // simple assign
	out.Status = 0                        // zero value
	out.IsTest = 0                        // zero value
	out.Name = arg.Name                   // simple assign
	out.PublicName = arg.PublicName       // simple assign
	out.Phone = ""                        // zero value
	out.Email = ""                        // zero value
	out.ImageURL = arg.ImageURL           // simple assign
	out.WebsiteURL = arg.WebsiteURL       // simple assign
	out.ContactPersons = nil              // zero value
	out.RecognizedHosts = nil             // zero value
	out.RedirectURLs = nil                // zero value
	out.AvailableFromEtop = false         // zero value
	out.AvailableFromEtopConfig = nil     // zero value
	out.WhiteLabelKey = arg.WhiteLabelKey // simple assign
	out.CreatedAt = time.Time{}           // zero value
	out.UpdatedAt = time.Time{}           // zero value
	out.DeletedAt = time.Time{}           // zero value
}

func Convert_identity_Partners_identitymodel_Partners(args []*identity.Partner) (outs []*identitymodel.Partner) {
	if args == nil {
		return nil
	}
	tmps := make([]identitymodel.Partner, len(args))
	outs = make([]*identitymodel.Partner, len(args))
	for i := range tmps {
		outs[i] = Convert_identity_Partner_identitymodel_Partner(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/main/identity.Permission --//

func Convert_identitymodel_Permission_identity_Permission(arg *identitymodel.Permission, out *identity.Permission) *identity.Permission {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identity.Permission{}
	}
	convert_identitymodel_Permission_identity_Permission(arg, out)
	return out
}

func convert_identitymodel_Permission_identity_Permission(arg *identitymodel.Permission, out *identity.Permission) {
	out.Roles = arg.Roles             // simple assign
	out.Permissions = arg.Permissions // simple assign
}

func Convert_identitymodel_Permissions_identity_Permissions(args []*identitymodel.Permission) (outs []*identity.Permission) {
	if args == nil {
		return nil
	}
	tmps := make([]identity.Permission, len(args))
	outs = make([]*identity.Permission, len(args))
	for i := range tmps {
		outs[i] = Convert_identitymodel_Permission_identity_Permission(args[i], &tmps[i])
	}
	return outs
}

func Convert_identity_Permission_identitymodel_Permission(arg *identity.Permission, out *identitymodel.Permission) *identitymodel.Permission {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identitymodel.Permission{}
	}
	convert_identity_Permission_identitymodel_Permission(arg, out)
	return out
}

func convert_identity_Permission_identitymodel_Permission(arg *identity.Permission, out *identitymodel.Permission) {
	out.Roles = arg.Roles             // simple assign
	out.Permissions = arg.Permissions // simple assign
}

func Convert_identity_Permissions_identitymodel_Permissions(args []*identity.Permission) (outs []*identitymodel.Permission) {
	if args == nil {
		return nil
	}
	tmps := make([]identitymodel.Permission, len(args))
	outs = make([]*identitymodel.Permission, len(args))
	for i := range tmps {
		outs[i] = Convert_identity_Permission_identitymodel_Permission(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/main/identity.ShippingServiceSelectStrategyItem --//

func Convert_identitymodel_ShippingServiceSelectStrategyItem_identity_ShippingServiceSelectStrategyItem(arg *identitymodel.ShippingServiceSelectStrategyItem, out *identity.ShippingServiceSelectStrategyItem) *identity.ShippingServiceSelectStrategyItem {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identity.ShippingServiceSelectStrategyItem{}
	}
	convert_identitymodel_ShippingServiceSelectStrategyItem_identity_ShippingServiceSelectStrategyItem(arg, out)
	return out
}

func convert_identitymodel_ShippingServiceSelectStrategyItem_identity_ShippingServiceSelectStrategyItem(arg *identitymodel.ShippingServiceSelectStrategyItem, out *identity.ShippingServiceSelectStrategyItem) {
	out.Key = arg.Key     // simple assign
	out.Value = arg.Value // simple assign
}

func Convert_identitymodel_ShippingServiceSelectStrategyItems_identity_ShippingServiceSelectStrategyItems(args []*identitymodel.ShippingServiceSelectStrategyItem) (outs []*identity.ShippingServiceSelectStrategyItem) {
	if args == nil {
		return nil
	}
	tmps := make([]identity.ShippingServiceSelectStrategyItem, len(args))
	outs = make([]*identity.ShippingServiceSelectStrategyItem, len(args))
	for i := range tmps {
		outs[i] = Convert_identitymodel_ShippingServiceSelectStrategyItem_identity_ShippingServiceSelectStrategyItem(args[i], &tmps[i])
	}
	return outs
}

func Convert_identity_ShippingServiceSelectStrategyItem_identitymodel_ShippingServiceSelectStrategyItem(arg *identity.ShippingServiceSelectStrategyItem, out *identitymodel.ShippingServiceSelectStrategyItem) *identitymodel.ShippingServiceSelectStrategyItem {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identitymodel.ShippingServiceSelectStrategyItem{}
	}
	convert_identity_ShippingServiceSelectStrategyItem_identitymodel_ShippingServiceSelectStrategyItem(arg, out)
	return out
}

func convert_identity_ShippingServiceSelectStrategyItem_identitymodel_ShippingServiceSelectStrategyItem(arg *identity.ShippingServiceSelectStrategyItem, out *identitymodel.ShippingServiceSelectStrategyItem) {
	out.Key = arg.Key     // simple assign
	out.Value = arg.Value // simple assign
}

func Convert_identity_ShippingServiceSelectStrategyItems_identitymodel_ShippingServiceSelectStrategyItems(args []*identity.ShippingServiceSelectStrategyItem) (outs []*identitymodel.ShippingServiceSelectStrategyItem) {
	if args == nil {
		return nil
	}
	tmps := make([]identitymodel.ShippingServiceSelectStrategyItem, len(args))
	outs = make([]*identitymodel.ShippingServiceSelectStrategyItem, len(args))
	for i := range tmps {
		outs[i] = Convert_identity_ShippingServiceSelectStrategyItem_identitymodel_ShippingServiceSelectStrategyItem(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/main/identity.Shop --//

func Convert_identitymodel_Shop_identity_Shop(arg *identitymodel.Shop, out *identity.Shop) *identity.Shop {
	return Shop(arg)
}

func convert_identitymodel_Shop_identity_Shop(arg *identitymodel.Shop, out *identity.Shop) {
	out.ID = arg.ID                                       // simple assign
	out.Name = arg.Name                                   // simple assign
	out.OwnerID = arg.OwnerID                             // simple assign
	out.IsTest = arg.IsTest                               // simple assign
	out.AddressID = arg.AddressID                         // simple assign
	out.ShipToAddressID = arg.ShipToAddressID             // simple assign
	out.ShipFromAddressID = arg.ShipFromAddressID         // simple assign
	out.Phone = arg.Phone                                 // simple assign
	out.WebsiteURL = ""                                   // types do not match
	out.ImageURL = arg.ImageURL                           // simple assign
	out.Email = arg.Email                                 // simple assign
	out.Code = arg.Code                                   // simple assign
	out.AutoCreateFFM = arg.AutoCreateFFM                 // simple assign
	out.InventoryOverstock = arg.InventoryOverstock       // simple assign
	out.GhnNoteCode = arg.GhnNoteCode                     // simple assign
	out.RecognizedHosts = arg.RecognizedHosts             // simple assign
	out.MoneyTransactionRRule = arg.MoneyTransactionRRule // simple assign
	out.SurveyInfo = Convert_identitymodel_SurveyInfoes_identity_SurveyInfoes(arg.SurveyInfo)
	out.ShippingServiceSelectStrategy = Convert_identitymodel_ShippingServiceSelectStrategyItems_identity_ShippingServiceSelectStrategyItems(arg.ShippingServiceSelectStrategy)
	out.Status = arg.Status       // simple assign
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
	out.DeletedAt = arg.DeletedAt // simple assign
	out.BankAccount = Convert_sharemodel_BankAccount_identitytypes_BankAccount(arg.BankAccount, nil)
	out.TryOn = arg.TryOn // simple assign
	out.CompanyInfo = Convert_sharemodel_CompanyInfo_identitytypes_CompanyInfo(arg.CompanyInfo, nil)
	out.WLPartnerID = arg.WLPartnerID // simple assign
}

func Convert_identitymodel_Shops_identity_Shops(args []*identitymodel.Shop) (outs []*identity.Shop) {
	if args == nil {
		return nil
	}
	tmps := make([]identity.Shop, len(args))
	outs = make([]*identity.Shop, len(args))
	for i := range tmps {
		outs[i] = Convert_identitymodel_Shop_identity_Shop(args[i], &tmps[i])
	}
	return outs
}

func Convert_identity_Shop_identitymodel_Shop(arg *identity.Shop, out *identitymodel.Shop) *identitymodel.Shop {
	return ShopDB(arg)
}

func convert_identity_Shop_identitymodel_Shop(arg *identity.Shop, out *identitymodel.Shop) {
	out.ID = arg.ID                               // simple assign
	out.OwnerID = arg.OwnerID                     // simple assign
	out.IsTest = arg.IsTest                       // simple assign
	out.Name = arg.Name                           // simple assign
	out.AddressID = arg.AddressID                 // simple assign
	out.ShipToAddressID = arg.ShipToAddressID     // simple assign
	out.ShipFromAddressID = arg.ShipFromAddressID // simple assign
	out.Phone = arg.Phone                         // simple assign
	out.BankAccount = Convert_identitytypes_BankAccount_sharemodel_BankAccount(arg.BankAccount, nil)
	out.WebsiteURL = dot.NullString{}         // types do not match
	out.ImageURL = arg.ImageURL               // simple assign
	out.Email = arg.Email                     // simple assign
	out.Code = arg.Code                       // simple assign
	out.AutoCreateFFM = arg.AutoCreateFFM     // simple assign
	out.OrderSourceID = 0                     // zero value
	out.Status = arg.Status                   // simple assign
	out.CreatedAt = arg.CreatedAt             // simple assign
	out.UpdatedAt = arg.UpdatedAt             // simple assign
	out.DeletedAt = arg.DeletedAt             // simple assign
	out.Address = nil                         // zero value
	out.RecognizedHosts = arg.RecognizedHosts // simple assign
	out.GhnNoteCode = arg.GhnNoteCode         // simple assign
	out.TryOn = arg.TryOn                     // simple assign
	out.CompanyInfo = Convert_identitytypes_CompanyInfo_sharemodel_CompanyInfo(arg.CompanyInfo, nil)
	out.MoneyTransactionRRule = arg.MoneyTransactionRRule // simple assign
	out.SurveyInfo = Convert_identity_SurveyInfoes_identitymodel_SurveyInfoes(arg.SurveyInfo)
	out.ShippingServiceSelectStrategy = Convert_identity_ShippingServiceSelectStrategyItems_identitymodel_ShippingServiceSelectStrategyItems(arg.ShippingServiceSelectStrategy)
	out.InventoryOverstock = arg.InventoryOverstock // simple assign
	out.WLPartnerID = arg.WLPartnerID               // simple assign
	out.Rid = 0                                     // zero value
}

func Convert_identity_Shops_identitymodel_Shops(args []*identity.Shop) (outs []*identitymodel.Shop) {
	if args == nil {
		return nil
	}
	tmps := make([]identitymodel.Shop, len(args))
	outs = make([]*identitymodel.Shop, len(args))
	for i := range tmps {
		outs[i] = Convert_identity_Shop_identitymodel_Shop(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/main/identity.ShopExtended --//

func Convert_identitymodel_ShopExtended_identity_ShopExtended(arg *identitymodel.ShopExtended, out *identity.ShopExtended) *identity.ShopExtended {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identity.ShopExtended{}
	}
	convert_identitymodel_ShopExtended_identity_ShopExtended(arg, out)
	return out
}

func convert_identitymodel_ShopExtended_identity_ShopExtended(arg *identitymodel.ShopExtended, out *identity.ShopExtended) {
	out.Shop = Convert_identitymodel_Shop_identity_Shop(arg.Shop, nil)
	out.Address = addressconvert.Convert_addressmodel_Address_address_Address(arg.Address, nil)
	out.User = Convert_identitymodel_User_identity_User(arg.User, nil)
}

func Convert_identitymodel_ShopExtendeds_identity_ShopExtendeds(args []*identitymodel.ShopExtended) (outs []*identity.ShopExtended) {
	if args == nil {
		return nil
	}
	tmps := make([]identity.ShopExtended, len(args))
	outs = make([]*identity.ShopExtended, len(args))
	for i := range tmps {
		outs[i] = Convert_identitymodel_ShopExtended_identity_ShopExtended(args[i], &tmps[i])
	}
	return outs
}

func Convert_identity_ShopExtended_identitymodel_ShopExtended(arg *identity.ShopExtended, out *identitymodel.ShopExtended) *identitymodel.ShopExtended {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identitymodel.ShopExtended{}
	}
	convert_identity_ShopExtended_identitymodel_ShopExtended(arg, out)
	return out
}

func convert_identity_ShopExtended_identitymodel_ShopExtended(arg *identity.ShopExtended, out *identitymodel.ShopExtended) {
	out.Shop = Convert_identity_Shop_identitymodel_Shop(arg.Shop, nil)
	out.ShopSearch = nil // zero value
	out.Address = addressconvert.Convert_address_Address_addressmodel_Address(arg.Address, nil)
	out.User = Convert_identity_User_identitymodel_User(arg.User, nil)
}

func Convert_identity_ShopExtendeds_identitymodel_ShopExtendeds(args []*identity.ShopExtended) (outs []*identitymodel.ShopExtended) {
	if args == nil {
		return nil
	}
	tmps := make([]identitymodel.ShopExtended, len(args))
	outs = make([]*identitymodel.ShopExtended, len(args))
	for i := range tmps {
		outs[i] = Convert_identity_ShopExtended_identitymodel_ShopExtended(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/main/identity.SurveyInfo --//

func Convert_identitymodel_SurveyInfo_identity_SurveyInfo(arg *identitymodel.SurveyInfo, out *identity.SurveyInfo) *identity.SurveyInfo {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identity.SurveyInfo{}
	}
	convert_identitymodel_SurveyInfo_identity_SurveyInfo(arg, out)
	return out
}

func convert_identitymodel_SurveyInfo_identity_SurveyInfo(arg *identitymodel.SurveyInfo, out *identity.SurveyInfo) {
	out.Key = arg.Key           // simple assign
	out.Question = arg.Question // simple assign
	out.Answer = arg.Answer     // simple assign
}

func Convert_identitymodel_SurveyInfoes_identity_SurveyInfoes(args []*identitymodel.SurveyInfo) (outs []*identity.SurveyInfo) {
	if args == nil {
		return nil
	}
	tmps := make([]identity.SurveyInfo, len(args))
	outs = make([]*identity.SurveyInfo, len(args))
	for i := range tmps {
		outs[i] = Convert_identitymodel_SurveyInfo_identity_SurveyInfo(args[i], &tmps[i])
	}
	return outs
}

func Convert_identity_SurveyInfo_identitymodel_SurveyInfo(arg *identity.SurveyInfo, out *identitymodel.SurveyInfo) *identitymodel.SurveyInfo {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identitymodel.SurveyInfo{}
	}
	convert_identity_SurveyInfo_identitymodel_SurveyInfo(arg, out)
	return out
}

func convert_identity_SurveyInfo_identitymodel_SurveyInfo(arg *identity.SurveyInfo, out *identitymodel.SurveyInfo) {
	out.Key = arg.Key           // simple assign
	out.Question = arg.Question // simple assign
	out.Answer = arg.Answer     // simple assign
}

func Convert_identity_SurveyInfoes_identitymodel_SurveyInfoes(args []*identity.SurveyInfo) (outs []*identitymodel.SurveyInfo) {
	if args == nil {
		return nil
	}
	tmps := make([]identitymodel.SurveyInfo, len(args))
	outs = make([]*identitymodel.SurveyInfo, len(args))
	for i := range tmps {
		outs[i] = Convert_identity_SurveyInfo_identitymodel_SurveyInfo(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/main/identity.User --//

func Convert_identitymodel_User_identity_User(arg *identitymodel.User, out *identity.User) *identity.User {
	return User(arg)
}

func convert_identitymodel_User_identity_User(arg *identitymodel.User, out *identity.User) {
	out.ID = arg.ID                                           // simple assign
	out.FullName = ""                                         // zero value
	out.ShortName = ""                                        // zero value
	out.Email = ""                                            // zero value
	out.Phone = ""                                            // zero value
	out.Status = arg.Status                                   // simple assign
	out.EmailVerifiedAt = arg.EmailVerifiedAt                 // simple assign
	out.PhoneVerifiedAt = arg.PhoneVerifiedAt                 // simple assign
	out.EmailVerificationSentAt = arg.EmailVerificationSentAt // simple assign
	out.PhoneVerificationSentAt = arg.PhoneVerificationSentAt // simple assign
	out.IsTest = arg.IsTest                                   // simple assign
	out.CreatedAt = arg.CreatedAt                             // simple assign
	out.UpdatedAt = arg.UpdatedAt                             // simple assign
	out.RefUserID = arg.RefUserID                             // simple assign
	out.RefSaleID = arg.RefSaleID                             // simple assign
	out.WLPartnerID = arg.WLPartnerID                         // simple assign
	out.Source = arg.Source                                   // simple assign
	out.BlockedAt = arg.BlockedAt                             // simple assign
	out.BlockedBy = arg.BlockedBy                             // simple assign
	out.BlockReason = arg.BlockReason                         // simple assign
	out.IsBlocked = false                                     // zero value
}

func Convert_identitymodel_Users_identity_Users(args []*identitymodel.User) (outs []*identity.User) {
	if args == nil {
		return nil
	}
	tmps := make([]identity.User, len(args))
	outs = make([]*identity.User, len(args))
	for i := range tmps {
		outs[i] = Convert_identitymodel_User_identity_User(args[i], &tmps[i])
	}
	return outs
}

func Convert_identity_User_identitymodel_User(arg *identity.User, out *identitymodel.User) *identitymodel.User {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identitymodel.User{}
	}
	convert_identity_User_identitymodel_User(arg, out)
	return out
}

func convert_identity_User_identitymodel_User(arg *identity.User, out *identitymodel.User) {
	out.ID = arg.ID                                           // simple assign
	out.UserInner = identitymodel.UserInner{}                 // zero value
	out.Status = arg.Status                                   // simple assign
	out.CreatedAt = arg.CreatedAt                             // simple assign
	out.UpdatedAt = arg.UpdatedAt                             // simple assign
	out.AgreedTOSAt = time.Time{}                             // zero value
	out.AgreedEmailInfoAt = time.Time{}                       // zero value
	out.EmailVerifiedAt = arg.EmailVerifiedAt                 // simple assign
	out.PhoneVerifiedAt = arg.PhoneVerifiedAt                 // simple assign
	out.EmailVerificationSentAt = arg.EmailVerificationSentAt // simple assign
	out.PhoneVerificationSentAt = arg.PhoneVerificationSentAt // simple assign
	out.FullNameNorm = ""                                     // zero value
	out.IsTest = arg.IsTest                                   // simple assign
	out.Source = arg.Source                                   // simple assign
	out.RefUserID = arg.RefUserID                             // simple assign
	out.RefSaleID = arg.RefSaleID                             // simple assign
	out.WLPartnerID = arg.WLPartnerID                         // simple assign
	out.Rid = 0                                               // zero value
	out.BlockedAt = arg.BlockedAt                             // simple assign
	out.BlockedBy = arg.BlockedBy                             // simple assign
	out.BlockReason = arg.BlockReason                         // simple assign
}

func Convert_identity_Users_identitymodel_Users(args []*identity.User) (outs []*identitymodel.User) {
	if args == nil {
		return nil
	}
	tmps := make([]identitymodel.User, len(args))
	outs = make([]*identitymodel.User, len(args))
	for i := range tmps {
		outs[i] = Convert_identity_User_identitymodel_User(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/main/identity.UserRefSaff --//

func Convert_identitymodel_UserRefSaff_identity_UserRefSaff(arg *identitymodel.UserRefSaff, out *identity.UserRefSaff) *identity.UserRefSaff {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identity.UserRefSaff{}
	}
	convert_identitymodel_UserRefSaff_identity_UserRefSaff(arg, out)
	return out
}

func convert_identitymodel_UserRefSaff_identity_UserRefSaff(arg *identitymodel.UserRefSaff, out *identity.UserRefSaff) {
	out.UserID = arg.UserID   // simple assign
	out.RefAff = arg.RefAff   // simple assign
	out.RefSale = arg.RefSale // simple assign
}

func Convert_identitymodel_UserRefSaffs_identity_UserRefSaffs(args []*identitymodel.UserRefSaff) (outs []*identity.UserRefSaff) {
	if args == nil {
		return nil
	}
	tmps := make([]identity.UserRefSaff, len(args))
	outs = make([]*identity.UserRefSaff, len(args))
	for i := range tmps {
		outs[i] = Convert_identitymodel_UserRefSaff_identity_UserRefSaff(args[i], &tmps[i])
	}
	return outs
}

func Convert_identity_UserRefSaff_identitymodel_UserRefSaff(arg *identity.UserRefSaff, out *identitymodel.UserRefSaff) *identitymodel.UserRefSaff {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identitymodel.UserRefSaff{}
	}
	convert_identity_UserRefSaff_identitymodel_UserRefSaff(arg, out)
	return out
}

func convert_identity_UserRefSaff_identitymodel_UserRefSaff(arg *identity.UserRefSaff, out *identitymodel.UserRefSaff) {
	out.UserID = arg.UserID   // simple assign
	out.RefAff = arg.RefAff   // simple assign
	out.RefSale = arg.RefSale // simple assign
}

func Convert_identity_UserRefSaffs_identitymodel_UserRefSaffs(args []*identity.UserRefSaff) (outs []*identitymodel.UserRefSaff) {
	if args == nil {
		return nil
	}
	tmps := make([]identitymodel.UserRefSaff, len(args))
	outs = make([]*identitymodel.UserRefSaff, len(args))
	for i := range tmps {
		outs[i] = Convert_identity_UserRefSaff_identitymodel_UserRefSaff(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/main/identity/types.BankAccount --//

func Convert_sharemodel_BankAccount_identitytypes_BankAccount(arg *sharemodel.BankAccount, out *identitytypes.BankAccount) *identitytypes.BankAccount {
	return BankAccount(arg)
}

func convert_sharemodel_BankAccount_identitytypes_BankAccount(arg *sharemodel.BankAccount, out *identitytypes.BankAccount) {
	out.Name = arg.Name                   // simple assign
	out.Province = arg.Province           // simple assign
	out.Branch = arg.Branch               // simple assign
	out.AccountNumber = arg.AccountNumber // simple assign
	out.AccountName = arg.AccountName     // simple assign
}

func Convert_sharemodel_BankAccounts_identitytypes_BankAccounts(args []*sharemodel.BankAccount) (outs []*identitytypes.BankAccount) {
	if args == nil {
		return nil
	}
	tmps := make([]identitytypes.BankAccount, len(args))
	outs = make([]*identitytypes.BankAccount, len(args))
	for i := range tmps {
		outs[i] = Convert_sharemodel_BankAccount_identitytypes_BankAccount(args[i], &tmps[i])
	}
	return outs
}

func Convert_identitytypes_BankAccount_sharemodel_BankAccount(arg *identitytypes.BankAccount, out *sharemodel.BankAccount) *sharemodel.BankAccount {
	return BankAccountDB(arg)
}

func convert_identitytypes_BankAccount_sharemodel_BankAccount(arg *identitytypes.BankAccount, out *sharemodel.BankAccount) {
	out.Name = arg.Name                   // simple assign
	out.Province = arg.Province           // simple assign
	out.Branch = arg.Branch               // simple assign
	out.AccountNumber = arg.AccountNumber // simple assign
	out.AccountName = arg.AccountName     // simple assign
}

func Convert_identitytypes_BankAccounts_sharemodel_BankAccounts(args []*identitytypes.BankAccount) (outs []*sharemodel.BankAccount) {
	if args == nil {
		return nil
	}
	tmps := make([]sharemodel.BankAccount, len(args))
	outs = make([]*sharemodel.BankAccount, len(args))
	for i := range tmps {
		outs[i] = Convert_identitytypes_BankAccount_sharemodel_BankAccount(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/main/identity/types.CompanyInfo --//

func Convert_sharemodel_CompanyInfo_identitytypes_CompanyInfo(arg *sharemodel.CompanyInfo, out *identitytypes.CompanyInfo) *identitytypes.CompanyInfo {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identitytypes.CompanyInfo{}
	}
	convert_sharemodel_CompanyInfo_identitytypes_CompanyInfo(arg, out)
	return out
}

func convert_sharemodel_CompanyInfo_identitytypes_CompanyInfo(arg *sharemodel.CompanyInfo, out *identitytypes.CompanyInfo) {
	out.Name = arg.Name       // simple assign
	out.TaxCode = arg.TaxCode // simple assign
	out.Address = arg.Address // simple assign
	out.Website = arg.Website // simple assign
	out.LegalRepresentative = Convert_sharemodel_ContactPerson_identitytypes_ContactPerson(arg.LegalRepresentative, nil)
}

func Convert_sharemodel_CompanyInfoes_identitytypes_CompanyInfoes(args []*sharemodel.CompanyInfo) (outs []*identitytypes.CompanyInfo) {
	if args == nil {
		return nil
	}
	tmps := make([]identitytypes.CompanyInfo, len(args))
	outs = make([]*identitytypes.CompanyInfo, len(args))
	for i := range tmps {
		outs[i] = Convert_sharemodel_CompanyInfo_identitytypes_CompanyInfo(args[i], &tmps[i])
	}
	return outs
}

func Convert_identitytypes_CompanyInfo_sharemodel_CompanyInfo(arg *identitytypes.CompanyInfo, out *sharemodel.CompanyInfo) *sharemodel.CompanyInfo {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &sharemodel.CompanyInfo{}
	}
	convert_identitytypes_CompanyInfo_sharemodel_CompanyInfo(arg, out)
	return out
}

func convert_identitytypes_CompanyInfo_sharemodel_CompanyInfo(arg *identitytypes.CompanyInfo, out *sharemodel.CompanyInfo) {
	out.Name = arg.Name       // simple assign
	out.TaxCode = arg.TaxCode // simple assign
	out.Address = arg.Address // simple assign
	out.Website = arg.Website // simple assign
	out.LegalRepresentative = Convert_identitytypes_ContactPerson_sharemodel_ContactPerson(arg.LegalRepresentative, nil)
}

func Convert_identitytypes_CompanyInfoes_sharemodel_CompanyInfoes(args []*identitytypes.CompanyInfo) (outs []*sharemodel.CompanyInfo) {
	if args == nil {
		return nil
	}
	tmps := make([]sharemodel.CompanyInfo, len(args))
	outs = make([]*sharemodel.CompanyInfo, len(args))
	for i := range tmps {
		outs[i] = Convert_identitytypes_CompanyInfo_sharemodel_CompanyInfo(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/main/identity/types.ContactPerson --//

func Convert_sharemodel_ContactPerson_identitytypes_ContactPerson(arg *sharemodel.ContactPerson, out *identitytypes.ContactPerson) *identitytypes.ContactPerson {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identitytypes.ContactPerson{}
	}
	convert_sharemodel_ContactPerson_identitytypes_ContactPerson(arg, out)
	return out
}

func convert_sharemodel_ContactPerson_identitytypes_ContactPerson(arg *sharemodel.ContactPerson, out *identitytypes.ContactPerson) {
	out.Name = arg.Name         // simple assign
	out.Position = arg.Position // simple assign
	out.Phone = arg.Phone       // simple assign
	out.Email = arg.Email       // simple assign
}

func Convert_sharemodel_ContactPersons_identitytypes_ContactPersons(args []*sharemodel.ContactPerson) (outs []*identitytypes.ContactPerson) {
	if args == nil {
		return nil
	}
	tmps := make([]identitytypes.ContactPerson, len(args))
	outs = make([]*identitytypes.ContactPerson, len(args))
	for i := range tmps {
		outs[i] = Convert_sharemodel_ContactPerson_identitytypes_ContactPerson(args[i], &tmps[i])
	}
	return outs
}

func Convert_identitytypes_ContactPerson_sharemodel_ContactPerson(arg *identitytypes.ContactPerson, out *sharemodel.ContactPerson) *sharemodel.ContactPerson {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &sharemodel.ContactPerson{}
	}
	convert_identitytypes_ContactPerson_sharemodel_ContactPerson(arg, out)
	return out
}

func convert_identitytypes_ContactPerson_sharemodel_ContactPerson(arg *identitytypes.ContactPerson, out *sharemodel.ContactPerson) {
	out.Name = arg.Name         // simple assign
	out.Position = arg.Position // simple assign
	out.Phone = arg.Phone       // simple assign
	out.Email = arg.Email       // simple assign
}

func Convert_identitytypes_ContactPersons_sharemodel_ContactPersons(args []*identitytypes.ContactPerson) (outs []*sharemodel.ContactPerson) {
	if args == nil {
		return nil
	}
	tmps := make([]sharemodel.ContactPerson, len(args))
	outs = make([]*sharemodel.ContactPerson, len(args))
	for i := range tmps {
		outs[i] = Convert_identitytypes_ContactPerson_sharemodel_ContactPerson(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/top/int/types.AdjustmentLine --//

func Convert_sharemodel_AdjustmentLine_inttypes_AdjustmentLine(arg *sharemodel.AdjustmentLine, out *inttypes.AdjustmentLine) *inttypes.AdjustmentLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &inttypes.AdjustmentLine{}
	}
	convert_sharemodel_AdjustmentLine_inttypes_AdjustmentLine(arg, out)
	return out
}

func convert_sharemodel_AdjustmentLine_inttypes_AdjustmentLine(arg *sharemodel.AdjustmentLine, out *inttypes.AdjustmentLine) {
	out.Note = arg.Note     // simple assign
	out.Amount = arg.Amount // simple assign
}

func Convert_sharemodel_AdjustmentLines_inttypes_AdjustmentLines(args []*sharemodel.AdjustmentLine) (outs []*inttypes.AdjustmentLine) {
	if args == nil {
		return nil
	}
	tmps := make([]inttypes.AdjustmentLine, len(args))
	outs = make([]*inttypes.AdjustmentLine, len(args))
	for i := range tmps {
		outs[i] = Convert_sharemodel_AdjustmentLine_inttypes_AdjustmentLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_inttypes_AdjustmentLine_sharemodel_AdjustmentLine(arg *inttypes.AdjustmentLine, out *sharemodel.AdjustmentLine) *sharemodel.AdjustmentLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &sharemodel.AdjustmentLine{}
	}
	convert_inttypes_AdjustmentLine_sharemodel_AdjustmentLine(arg, out)
	return out
}

func convert_inttypes_AdjustmentLine_sharemodel_AdjustmentLine(arg *inttypes.AdjustmentLine, out *sharemodel.AdjustmentLine) {
	out.Note = arg.Note     // simple assign
	out.Amount = arg.Amount // simple assign
}

func Convert_inttypes_AdjustmentLines_sharemodel_AdjustmentLines(args []*inttypes.AdjustmentLine) (outs []*sharemodel.AdjustmentLine) {
	if args == nil {
		return nil
	}
	tmps := make([]sharemodel.AdjustmentLine, len(args))
	outs = make([]*sharemodel.AdjustmentLine, len(args))
	for i := range tmps {
		outs[i] = Convert_inttypes_AdjustmentLine_sharemodel_AdjustmentLine(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/top/int/types.DiscountLine --//

func Convert_sharemodel_DiscountLine_inttypes_DiscountLine(arg *sharemodel.DiscountLine, out *inttypes.DiscountLine) *inttypes.DiscountLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &inttypes.DiscountLine{}
	}
	convert_sharemodel_DiscountLine_inttypes_DiscountLine(arg, out)
	return out
}

func convert_sharemodel_DiscountLine_inttypes_DiscountLine(arg *sharemodel.DiscountLine, out *inttypes.DiscountLine) {
	out.Note = arg.Note     // simple assign
	out.Amount = arg.Amount // simple assign
}

func Convert_sharemodel_DiscountLines_inttypes_DiscountLines(args []*sharemodel.DiscountLine) (outs []*inttypes.DiscountLine) {
	if args == nil {
		return nil
	}
	tmps := make([]inttypes.DiscountLine, len(args))
	outs = make([]*inttypes.DiscountLine, len(args))
	for i := range tmps {
		outs[i] = Convert_sharemodel_DiscountLine_inttypes_DiscountLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_inttypes_DiscountLine_sharemodel_DiscountLine(arg *inttypes.DiscountLine, out *sharemodel.DiscountLine) *sharemodel.DiscountLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &sharemodel.DiscountLine{}
	}
	convert_inttypes_DiscountLine_sharemodel_DiscountLine(arg, out)
	return out
}

func convert_inttypes_DiscountLine_sharemodel_DiscountLine(arg *inttypes.DiscountLine, out *sharemodel.DiscountLine) {
	out.Note = arg.Note     // simple assign
	out.Amount = arg.Amount // simple assign
}

func Convert_inttypes_DiscountLines_sharemodel_DiscountLines(args []*inttypes.DiscountLine) (outs []*sharemodel.DiscountLine) {
	if args == nil {
		return nil
	}
	tmps := make([]sharemodel.DiscountLine, len(args))
	outs = make([]*sharemodel.DiscountLine, len(args))
	for i := range tmps {
		outs[i] = Convert_inttypes_DiscountLine_sharemodel_DiscountLine(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/top/int/types.FeeLine --//

func Convert_sharemodel_FeeLine_inttypes_FeeLine(arg *sharemodel.FeeLine, out *inttypes.FeeLine) *inttypes.FeeLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &inttypes.FeeLine{}
	}
	convert_sharemodel_FeeLine_inttypes_FeeLine(arg, out)
	return out
}

func convert_sharemodel_FeeLine_inttypes_FeeLine(arg *sharemodel.FeeLine, out *inttypes.FeeLine) {
	out.Note = arg.Note     // simple assign
	out.Amount = arg.Amount // simple assign
}

func Convert_sharemodel_FeeLines_inttypes_FeeLines(args []*sharemodel.FeeLine) (outs []*inttypes.FeeLine) {
	if args == nil {
		return nil
	}
	tmps := make([]inttypes.FeeLine, len(args))
	outs = make([]*inttypes.FeeLine, len(args))
	for i := range tmps {
		outs[i] = Convert_sharemodel_FeeLine_inttypes_FeeLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_inttypes_FeeLine_sharemodel_FeeLine(arg *inttypes.FeeLine, out *sharemodel.FeeLine) *sharemodel.FeeLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &sharemodel.FeeLine{}
	}
	convert_inttypes_FeeLine_sharemodel_FeeLine(arg, out)
	return out
}

func convert_inttypes_FeeLine_sharemodel_FeeLine(arg *inttypes.FeeLine, out *sharemodel.FeeLine) {
	out.Note = arg.Note     // simple assign
	out.Amount = arg.Amount // simple assign
}

func Convert_inttypes_FeeLines_sharemodel_FeeLines(args []*inttypes.FeeLine) (outs []*sharemodel.FeeLine) {
	if args == nil {
		return nil
	}
	tmps := make([]sharemodel.FeeLine, len(args))
	outs = make([]*sharemodel.FeeLine, len(args))
	for i := range tmps {
		outs[i] = Convert_inttypes_FeeLine_sharemodel_FeeLine(args[i], &tmps[i])
	}
	return outs
}
