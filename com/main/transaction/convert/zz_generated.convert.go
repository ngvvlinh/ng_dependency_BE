// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	transaction "o.o/api/main/transaction"
	transactionmodel "o.o/backend/com/main/transaction/model"
	conversion "o.o/backend/pkg/common/conversion"
)

/*
Custom conversions: (none)

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*transactionmodel.Transaction)(nil), (*transaction.Transaction)(nil), func(arg, out interface{}) error {
		Convert_transactionmodel_Transaction_transaction_Transaction(arg.(*transactionmodel.Transaction), out.(*transaction.Transaction))
		return nil
	})
	s.Register(([]*transactionmodel.Transaction)(nil), (*[]*transaction.Transaction)(nil), func(arg, out interface{}) error {
		out0 := Convert_transactionmodel_Transactions_transaction_Transactions(arg.([]*transactionmodel.Transaction))
		*out.(*[]*transaction.Transaction) = out0
		return nil
	})
	s.Register((*transaction.Transaction)(nil), (*transactionmodel.Transaction)(nil), func(arg, out interface{}) error {
		Convert_transaction_Transaction_transactionmodel_Transaction(arg.(*transaction.Transaction), out.(*transactionmodel.Transaction))
		return nil
	})
	s.Register(([]*transaction.Transaction)(nil), (*[]*transactionmodel.Transaction)(nil), func(arg, out interface{}) error {
		out0 := Convert_transaction_Transactions_transactionmodel_Transactions(arg.([]*transaction.Transaction))
		*out.(*[]*transactionmodel.Transaction) = out0
		return nil
	})
	s.Register((*transaction.CreateTransactionArgs)(nil), (*transaction.Transaction)(nil), func(arg, out interface{}) error {
		Apply_transaction_CreateTransactionArgs_transaction_Transaction(arg.(*transaction.CreateTransactionArgs), out.(*transaction.Transaction))
		return nil
	})
}

//-- convert o.o/api/main/transaction.Transaction --//

func Convert_transactionmodel_Transaction_transaction_Transaction(arg *transactionmodel.Transaction, out *transaction.Transaction) *transaction.Transaction {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &transaction.Transaction{}
	}
	convert_transactionmodel_Transaction_transaction_Transaction(arg, out)
	return out
}

func convert_transactionmodel_Transaction_transaction_Transaction(arg *transactionmodel.Transaction, out *transaction.Transaction) {
	out.Name = arg.Name                 // simple assign
	out.ID = arg.ID                     // simple assign
	out.Amount = arg.Amount             // simple assign
	out.AccountID = arg.AccountID       // simple assign
	out.Status = arg.Status             // simple assign
	out.Type = arg.Type                 // simple assign
	out.Classify = arg.Classify         // simple assign
	out.Note = arg.Note                 // simple assign
	out.ReferralType = arg.ReferralType // simple assign
	out.ReferralIDs = arg.ReferralIDs   // simple assign
	out.CreatedAt = arg.CreatedAt       // simple assign
	out.UpdatedAt = arg.UpdatedAt       // simple assign
}

func Convert_transactionmodel_Transactions_transaction_Transactions(args []*transactionmodel.Transaction) (outs []*transaction.Transaction) {
	if args == nil {
		return nil
	}
	tmps := make([]transaction.Transaction, len(args))
	outs = make([]*transaction.Transaction, len(args))
	for i := range tmps {
		outs[i] = Convert_transactionmodel_Transaction_transaction_Transaction(args[i], &tmps[i])
	}
	return outs
}

func Convert_transaction_Transaction_transactionmodel_Transaction(arg *transaction.Transaction, out *transactionmodel.Transaction) *transactionmodel.Transaction {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &transactionmodel.Transaction{}
	}
	convert_transaction_Transaction_transactionmodel_Transaction(arg, out)
	return out
}

func convert_transaction_Transaction_transactionmodel_Transaction(arg *transaction.Transaction, out *transactionmodel.Transaction) {
	out.Name = arg.Name                 // simple assign
	out.ID = arg.ID                     // simple assign
	out.Amount = arg.Amount             // simple assign
	out.AccountID = arg.AccountID       // simple assign
	out.Status = arg.Status             // simple assign
	out.Type = arg.Type                 // simple assign
	out.Classify = arg.Classify         // simple assign
	out.Note = arg.Note                 // simple assign
	out.ReferralType = arg.ReferralType // simple assign
	out.ReferralIDs = arg.ReferralIDs   // simple assign
	out.CreatedAt = arg.CreatedAt       // simple assign
	out.UpdatedAt = arg.UpdatedAt       // simple assign
}

func Convert_transaction_Transactions_transactionmodel_Transactions(args []*transaction.Transaction) (outs []*transactionmodel.Transaction) {
	if args == nil {
		return nil
	}
	tmps := make([]transactionmodel.Transaction, len(args))
	outs = make([]*transactionmodel.Transaction, len(args))
	for i := range tmps {
		outs[i] = Convert_transaction_Transaction_transactionmodel_Transaction(args[i], &tmps[i])
	}
	return outs
}

func Apply_transaction_CreateTransactionArgs_transaction_Transaction(arg *transaction.CreateTransactionArgs, out *transaction.Transaction) *transaction.Transaction {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &transaction.Transaction{}
	}
	apply_transaction_CreateTransactionArgs_transaction_Transaction(arg, out)
	return out
}

func apply_transaction_CreateTransactionArgs_transaction_Transaction(arg *transaction.CreateTransactionArgs, out *transaction.Transaction) {
	out.Name = arg.Name                 // simple assign
	out.ID = arg.ID                     // simple assign
	out.Amount = arg.Amount             // simple assign
	out.AccountID = arg.AccountID       // simple assign
	out.Status = arg.Status             // simple assign
	out.Type = arg.Type                 // simple assign
	out.Classify = arg.Classify         // simple assign
	out.Note = arg.Note                 // simple assign
	out.ReferralType = arg.ReferralType // simple assign
	out.ReferralIDs = arg.ReferralIDs   // simple assign
	out.CreatedAt = time.Time{}         // zero value
	out.UpdatedAt = time.Time{}         // zero value
}
