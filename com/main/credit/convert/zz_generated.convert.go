// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	credit "o.o/api/main/credit"
	creditmodel "o.o/backend/com/main/credit/model"
	identityconvert "o.o/backend/com/main/identity/convert"
	conversion "o.o/backend/pkg/common/conversion"
)

/*
Custom conversions:
    createCreditVoucher    // in use

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*creditmodel.Credit)(nil), (*credit.Credit)(nil), func(arg, out interface{}) error {
		Convert_creditmodel_Credit_credit_Credit(arg.(*creditmodel.Credit), out.(*credit.Credit))
		return nil
	})
	s.Register(([]*creditmodel.Credit)(nil), (*[]*credit.Credit)(nil), func(arg, out interface{}) error {
		out0 := Convert_creditmodel_Credits_credit_Credits(arg.([]*creditmodel.Credit))
		*out.(*[]*credit.Credit) = out0
		return nil
	})
	s.Register((*credit.Credit)(nil), (*creditmodel.Credit)(nil), func(arg, out interface{}) error {
		Convert_credit_Credit_creditmodel_Credit(arg.(*credit.Credit), out.(*creditmodel.Credit))
		return nil
	})
	s.Register(([]*credit.Credit)(nil), (*[]*creditmodel.Credit)(nil), func(arg, out interface{}) error {
		out0 := Convert_credit_Credits_creditmodel_Credits(arg.([]*credit.Credit))
		*out.(*[]*creditmodel.Credit) = out0
		return nil
	})
	s.Register((*credit.CreateCreditArgs)(nil), (*credit.Credit)(nil), func(arg, out interface{}) error {
		Apply_credit_CreateCreditArgs_credit_Credit(arg.(*credit.CreateCreditArgs), out.(*credit.Credit))
		return nil
	})
	s.Register((*creditmodel.CreditExtended)(nil), (*credit.CreditExtended)(nil), func(arg, out interface{}) error {
		Convert_creditmodel_CreditExtended_credit_CreditExtended(arg.(*creditmodel.CreditExtended), out.(*credit.CreditExtended))
		return nil
	})
	s.Register(([]*creditmodel.CreditExtended)(nil), (*[]*credit.CreditExtended)(nil), func(arg, out interface{}) error {
		out0 := Convert_creditmodel_CreditExtendeds_credit_CreditExtendeds(arg.([]*creditmodel.CreditExtended))
		*out.(*[]*credit.CreditExtended) = out0
		return nil
	})
	s.Register((*credit.CreditExtended)(nil), (*creditmodel.CreditExtended)(nil), func(arg, out interface{}) error {
		Convert_credit_CreditExtended_creditmodel_CreditExtended(arg.(*credit.CreditExtended), out.(*creditmodel.CreditExtended))
		return nil
	})
	s.Register(([]*credit.CreditExtended)(nil), (*[]*creditmodel.CreditExtended)(nil), func(arg, out interface{}) error {
		out0 := Convert_credit_CreditExtendeds_creditmodel_CreditExtendeds(arg.([]*credit.CreditExtended))
		*out.(*[]*creditmodel.CreditExtended) = out0
		return nil
	})
}

//-- convert o.o/api/main/credit.Credit --//

func Convert_creditmodel_Credit_credit_Credit(arg *creditmodel.Credit, out *credit.Credit) *credit.Credit {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &credit.Credit{}
	}
	convert_creditmodel_Credit_credit_Credit(arg, out)
	return out
}

func convert_creditmodel_Credit_credit_Credit(arg *creditmodel.Credit, out *credit.Credit) {
	out.ID = arg.ID               // simple assign
	out.Amount = arg.Amount       // simple assign
	out.ShopID = arg.ShopID       // simple assign
	out.Type = arg.Type           // simple assign
	out.Status = arg.Status       // simple assign
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
	out.DeletedAt = arg.DeletedAt // simple assign
	out.PaidAt = arg.PaidAt       // simple assign
	out.Classify = arg.Classify   // simple assign
}

func Convert_creditmodel_Credits_credit_Credits(args []*creditmodel.Credit) (outs []*credit.Credit) {
	if args == nil {
		return nil
	}
	tmps := make([]credit.Credit, len(args))
	outs = make([]*credit.Credit, len(args))
	for i := range tmps {
		outs[i] = Convert_creditmodel_Credit_credit_Credit(args[i], &tmps[i])
	}
	return outs
}

func Convert_credit_Credit_creditmodel_Credit(arg *credit.Credit, out *creditmodel.Credit) *creditmodel.Credit {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &creditmodel.Credit{}
	}
	convert_credit_Credit_creditmodel_Credit(arg, out)
	return out
}

func convert_credit_Credit_creditmodel_Credit(arg *credit.Credit, out *creditmodel.Credit) {
	out.ID = arg.ID               // simple assign
	out.Amount = arg.Amount       // simple assign
	out.ShopID = arg.ShopID       // simple assign
	out.Type = arg.Type           // simple assign
	out.Status = arg.Status       // simple assign
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
	out.DeletedAt = arg.DeletedAt // simple assign
	out.PaidAt = arg.PaidAt       // simple assign
	out.Classify = arg.Classify   // simple assign
}

func Convert_credit_Credits_creditmodel_Credits(args []*credit.Credit) (outs []*creditmodel.Credit) {
	if args == nil {
		return nil
	}
	tmps := make([]creditmodel.Credit, len(args))
	outs = make([]*creditmodel.Credit, len(args))
	for i := range tmps {
		outs[i] = Convert_credit_Credit_creditmodel_Credit(args[i], &tmps[i])
	}
	return outs
}

func Apply_credit_CreateCreditArgs_credit_Credit(arg *credit.CreateCreditArgs, out *credit.Credit) *credit.Credit {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &credit.Credit{}
	}
	createCreditVoucher(arg, out)
	return out
}

func apply_credit_CreateCreditArgs_credit_Credit(arg *credit.CreateCreditArgs, out *credit.Credit) {
	out.ID = 0                  // zero value
	out.Amount = arg.Amount     // simple assign
	out.ShopID = arg.ShopID     // simple assign
	out.Type = arg.Type         // simple assign
	out.Status = 0              // zero value
	out.CreatedAt = time.Time{} // zero value
	out.UpdatedAt = time.Time{} // zero value
	out.DeletedAt = time.Time{} // zero value
	out.PaidAt = arg.PaidAt     // simple assign
	out.Classify = arg.Classify // simple assign
}

//-- convert o.o/api/main/credit.CreditExtended --//

func Convert_creditmodel_CreditExtended_credit_CreditExtended(arg *creditmodel.CreditExtended, out *credit.CreditExtended) *credit.CreditExtended {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &credit.CreditExtended{}
	}
	convert_creditmodel_CreditExtended_credit_CreditExtended(arg, out)
	return out
}

func convert_creditmodel_CreditExtended_credit_CreditExtended(arg *creditmodel.CreditExtended, out *credit.CreditExtended) {
	out.Credit = Convert_creditmodel_Credit_credit_Credit(arg.Credit, nil)
	out.Shop = identityconvert.Convert_identitymodel_Shop_identity_Shop(arg.Shop, nil)
}

func Convert_creditmodel_CreditExtendeds_credit_CreditExtendeds(args []*creditmodel.CreditExtended) (outs []*credit.CreditExtended) {
	if args == nil {
		return nil
	}
	tmps := make([]credit.CreditExtended, len(args))
	outs = make([]*credit.CreditExtended, len(args))
	for i := range tmps {
		outs[i] = Convert_creditmodel_CreditExtended_credit_CreditExtended(args[i], &tmps[i])
	}
	return outs
}

func Convert_credit_CreditExtended_creditmodel_CreditExtended(arg *credit.CreditExtended, out *creditmodel.CreditExtended) *creditmodel.CreditExtended {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &creditmodel.CreditExtended{}
	}
	convert_credit_CreditExtended_creditmodel_CreditExtended(arg, out)
	return out
}

func convert_credit_CreditExtended_creditmodel_CreditExtended(arg *credit.CreditExtended, out *creditmodel.CreditExtended) {
	out.Credit = Convert_credit_Credit_creditmodel_Credit(arg.Credit, nil)
	out.Shop = identityconvert.Convert_identity_Shop_identitymodel_Shop(arg.Shop, nil)
}

func Convert_credit_CreditExtendeds_creditmodel_CreditExtendeds(args []*credit.CreditExtended) (outs []*creditmodel.CreditExtended) {
	if args == nil {
		return nil
	}
	tmps := make([]creditmodel.CreditExtended, len(args))
	outs = make([]*creditmodel.CreditExtended, len(args))
	for i := range tmps {
		outs[i] = Convert_credit_CreditExtended_creditmodel_CreditExtended(args[i], &tmps[i])
	}
	return outs
}
