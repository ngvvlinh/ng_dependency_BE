// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	purchaserefund "etop.vn/api/main/purchaserefund"
	catalogconvert "etop.vn/backend/com/main/catalog/convert"
	identityconvert "etop.vn/backend/com/main/identity/convert"
	purchaserefundmodel "etop.vn/backend/com/main/purchaserefund/model"
	conversion "etop.vn/backend/pkg/common/conversion"
)

/*
Custom conversions:
    convertCreate    // in use
    convertUpdate    // in use

Ignored functions:
    GenerateCode    // params are not pointer to named types
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*purchaserefundmodel.PurchaseRefund)(nil), (*purchaserefund.PurchaseRefund)(nil), func(arg, out interface{}) error {
		Convert_purchaserefundmodel_PurchaseRefund_purchaserefund_PurchaseRefund(arg.(*purchaserefundmodel.PurchaseRefund), out.(*purchaserefund.PurchaseRefund))
		return nil
	})
	s.Register(([]*purchaserefundmodel.PurchaseRefund)(nil), (*[]*purchaserefund.PurchaseRefund)(nil), func(arg, out interface{}) error {
		out0 := Convert_purchaserefundmodel_PurchaseRefunds_purchaserefund_PurchaseRefunds(arg.([]*purchaserefundmodel.PurchaseRefund))
		*out.(*[]*purchaserefund.PurchaseRefund) = out0
		return nil
	})
	s.Register((*purchaserefund.PurchaseRefund)(nil), (*purchaserefundmodel.PurchaseRefund)(nil), func(arg, out interface{}) error {
		Convert_purchaserefund_PurchaseRefund_purchaserefundmodel_PurchaseRefund(arg.(*purchaserefund.PurchaseRefund), out.(*purchaserefundmodel.PurchaseRefund))
		return nil
	})
	s.Register(([]*purchaserefund.PurchaseRefund)(nil), (*[]*purchaserefundmodel.PurchaseRefund)(nil), func(arg, out interface{}) error {
		out0 := Convert_purchaserefund_PurchaseRefunds_purchaserefundmodel_PurchaseRefunds(arg.([]*purchaserefund.PurchaseRefund))
		*out.(*[]*purchaserefundmodel.PurchaseRefund) = out0
		return nil
	})
	s.Register((*purchaserefund.CreatePurchaseRefundArgs)(nil), (*purchaserefund.PurchaseRefund)(nil), func(arg, out interface{}) error {
		Apply_purchaserefund_CreatePurchaseRefundArgs_purchaserefund_PurchaseRefund(arg.(*purchaserefund.CreatePurchaseRefundArgs), out.(*purchaserefund.PurchaseRefund))
		return nil
	})
	s.Register((*purchaserefund.UpdatePurchaseRefundArgs)(nil), (*purchaserefund.PurchaseRefund)(nil), func(arg, out interface{}) error {
		Apply_purchaserefund_UpdatePurchaseRefundArgs_purchaserefund_PurchaseRefund(arg.(*purchaserefund.UpdatePurchaseRefundArgs), out.(*purchaserefund.PurchaseRefund))
		return nil
	})
	s.Register((*purchaserefundmodel.PurchaseRefundLine)(nil), (*purchaserefund.PurchaseRefundLine)(nil), func(arg, out interface{}) error {
		Convert_purchaserefundmodel_PurchaseRefundLine_purchaserefund_PurchaseRefundLine(arg.(*purchaserefundmodel.PurchaseRefundLine), out.(*purchaserefund.PurchaseRefundLine))
		return nil
	})
	s.Register(([]*purchaserefundmodel.PurchaseRefundLine)(nil), (*[]*purchaserefund.PurchaseRefundLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_purchaserefundmodel_PurchaseRefundLines_purchaserefund_PurchaseRefundLines(arg.([]*purchaserefundmodel.PurchaseRefundLine))
		*out.(*[]*purchaserefund.PurchaseRefundLine) = out0
		return nil
	})
	s.Register((*purchaserefund.PurchaseRefundLine)(nil), (*purchaserefundmodel.PurchaseRefundLine)(nil), func(arg, out interface{}) error {
		Convert_purchaserefund_PurchaseRefundLine_purchaserefundmodel_PurchaseRefundLine(arg.(*purchaserefund.PurchaseRefundLine), out.(*purchaserefundmodel.PurchaseRefundLine))
		return nil
	})
	s.Register(([]*purchaserefund.PurchaseRefundLine)(nil), (*[]*purchaserefundmodel.PurchaseRefundLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_purchaserefund_PurchaseRefundLines_purchaserefundmodel_PurchaseRefundLines(arg.([]*purchaserefund.PurchaseRefundLine))
		*out.(*[]*purchaserefundmodel.PurchaseRefundLine) = out0
		return nil
	})
}

//-- convert etop.vn/api/main/purchaserefund.PurchaseRefund --//

func Convert_purchaserefundmodel_PurchaseRefund_purchaserefund_PurchaseRefund(arg *purchaserefundmodel.PurchaseRefund, out *purchaserefund.PurchaseRefund) *purchaserefund.PurchaseRefund {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &purchaserefund.PurchaseRefund{}
	}
	convert_purchaserefundmodel_PurchaseRefund_purchaserefund_PurchaseRefund(arg, out)
	return out
}

func convert_purchaserefundmodel_PurchaseRefund_purchaserefund_PurchaseRefund(arg *purchaserefundmodel.PurchaseRefund, out *purchaserefund.PurchaseRefund) {
	out.ID = arg.ID                           // simple assign
	out.ShopID = arg.ShopID                   // simple assign
	out.PurchaseOrderID = arg.PurchaseOrderID // simple assign
	out.Note = arg.Note                       // simple assign
	out.Code = arg.Code                       // simple assign
	out.CodeNorm = arg.CodeNorm               // simple assign
	out.Lines = Convert_purchaserefundmodel_PurchaseRefundLines_purchaserefund_PurchaseRefundLines(arg.Lines)
	out.AdjustmentLines = identityconvert.Convert_sharemodel_AdjustmentLines_inttypes_AdjustmentLines(arg.AdjustmentLines)
	out.TotalAdjustment = arg.TotalAdjustment // simple assign
	out.CreatedAt = arg.CreatedAt             // simple assign
	out.UpdatedAt = arg.UpdatedAt             // simple assign
	out.CancelledAt = arg.CancelledAt         // simple assign
	out.ConfirmedAt = arg.ConfirmedAt         // simple assign
	out.CreatedBy = arg.CreatedBy             // simple assign
	out.UpdatedBy = arg.UpdatedBy             // simple assign
	out.CancelReason = arg.CancelReason       // simple assign
	out.Status = arg.Status                   // simple assign
	out.SupplierID = arg.SupplierID           // simple assign
	out.TotalAmount = arg.TotalAmount         // simple assign
	out.BasketValue = arg.BasketValue         // simple assign
}

func Convert_purchaserefundmodel_PurchaseRefunds_purchaserefund_PurchaseRefunds(args []*purchaserefundmodel.PurchaseRefund) (outs []*purchaserefund.PurchaseRefund) {
	tmps := make([]purchaserefund.PurchaseRefund, len(args))
	outs = make([]*purchaserefund.PurchaseRefund, len(args))
	for i := range tmps {
		outs[i] = Convert_purchaserefundmodel_PurchaseRefund_purchaserefund_PurchaseRefund(args[i], &tmps[i])
	}
	return outs
}

func Convert_purchaserefund_PurchaseRefund_purchaserefundmodel_PurchaseRefund(arg *purchaserefund.PurchaseRefund, out *purchaserefundmodel.PurchaseRefund) *purchaserefundmodel.PurchaseRefund {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &purchaserefundmodel.PurchaseRefund{}
	}
	convert_purchaserefund_PurchaseRefund_purchaserefundmodel_PurchaseRefund(arg, out)
	return out
}

func convert_purchaserefund_PurchaseRefund_purchaserefundmodel_PurchaseRefund(arg *purchaserefund.PurchaseRefund, out *purchaserefundmodel.PurchaseRefund) {
	out.ID = arg.ID                           // simple assign
	out.ShopID = arg.ShopID                   // simple assign
	out.PurchaseOrderID = arg.PurchaseOrderID // simple assign
	out.Code = arg.Code                       // simple assign
	out.CodeNorm = arg.CodeNorm               // simple assign
	out.Note = arg.Note                       // simple assign
	out.Lines = Convert_purchaserefund_PurchaseRefundLines_purchaserefundmodel_PurchaseRefundLines(arg.Lines)
	out.TotalAdjustment = arg.TotalAdjustment // simple assign
	out.AdjustmentLines = identityconvert.Convert_inttypes_AdjustmentLines_sharemodel_AdjustmentLines(arg.AdjustmentLines)
	out.CreatedAt = arg.CreatedAt       // simple assign
	out.UpdatedAt = arg.UpdatedAt       // simple assign
	out.CancelledAt = arg.CancelledAt   // simple assign
	out.ConfirmedAt = arg.ConfirmedAt   // simple assign
	out.CreatedBy = arg.CreatedBy       // simple assign
	out.UpdatedBy = arg.UpdatedBy       // simple assign
	out.CancelReason = arg.CancelReason // simple assign
	out.Status = arg.Status             // simple assign
	out.SupplierID = arg.SupplierID     // simple assign
	out.TotalAmount = arg.TotalAmount   // simple assign
	out.BasketValue = arg.BasketValue   // simple assign
}

func Convert_purchaserefund_PurchaseRefunds_purchaserefundmodel_PurchaseRefunds(args []*purchaserefund.PurchaseRefund) (outs []*purchaserefundmodel.PurchaseRefund) {
	tmps := make([]purchaserefundmodel.PurchaseRefund, len(args))
	outs = make([]*purchaserefundmodel.PurchaseRefund, len(args))
	for i := range tmps {
		outs[i] = Convert_purchaserefund_PurchaseRefund_purchaserefundmodel_PurchaseRefund(args[i], &tmps[i])
	}
	return outs
}

func Apply_purchaserefund_CreatePurchaseRefundArgs_purchaserefund_PurchaseRefund(arg *purchaserefund.CreatePurchaseRefundArgs, out *purchaserefund.PurchaseRefund) *purchaserefund.PurchaseRefund {
	return convertCreate(arg, out)
}

func apply_purchaserefund_CreatePurchaseRefundArgs_purchaserefund_PurchaseRefund(arg *purchaserefund.CreatePurchaseRefundArgs, out *purchaserefund.PurchaseRefund) {
	out.ID = 0                                // zero value
	out.ShopID = arg.ShopID                   // simple assign
	out.PurchaseOrderID = arg.PurchaseOrderID // simple assign
	out.Note = arg.Note                       // simple assign
	out.Code = ""                             // zero value
	out.CodeNorm = 0                          // zero value
	out.Lines = arg.Lines                     // simple assign
	out.AdjustmentLines = arg.AdjustmentLines // simple assign
	out.TotalAdjustment = arg.TotalAdjustment // simple assign
	out.CreatedAt = time.Time{}               // zero value
	out.UpdatedAt = time.Time{}               // zero value
	out.CancelledAt = time.Time{}             // zero value
	out.ConfirmedAt = time.Time{}             // zero value
	out.CreatedBy = arg.CreatedBy             // simple assign
	out.UpdatedBy = 0                         // zero value
	out.CancelReason = ""                     // zero value
	out.Status = 0                            // zero value
	out.SupplierID = 0                        // zero value
	out.TotalAmount = arg.TotalAmount         // simple assign
	out.BasketValue = arg.BasketValue         // simple assign
}

func Apply_purchaserefund_UpdatePurchaseRefundArgs_purchaserefund_PurchaseRefund(arg *purchaserefund.UpdatePurchaseRefundArgs, out *purchaserefund.PurchaseRefund) *purchaserefund.PurchaseRefund {
	return convertUpdate(arg, out)
}

func apply_purchaserefund_UpdatePurchaseRefundArgs_purchaserefund_PurchaseRefund(arg *purchaserefund.UpdatePurchaseRefundArgs, out *purchaserefund.PurchaseRefund) {
	out.ID = arg.ID                                                      // simple assign
	out.ShopID = arg.ShopID                                              // simple assign
	out.PurchaseOrderID = out.PurchaseOrderID                            // no change
	out.Note = arg.Note.Apply(out.Note)                                  // apply change
	out.Code = out.Code                                                  // no change
	out.CodeNorm = out.CodeNorm                                          // no change
	out.Lines = arg.Lines                                                // simple assign
	out.AdjustmentLines = arg.AdjustmentLines                            // simple assign
	out.TotalAdjustment = arg.TotalAdjustment.Apply(out.TotalAdjustment) // apply change
	out.CreatedAt = out.CreatedAt                                        // no change
	out.UpdatedAt = out.UpdatedAt                                        // no change
	out.CancelledAt = out.CancelledAt                                    // no change
	out.ConfirmedAt = out.ConfirmedAt                                    // no change
	out.CreatedBy = out.CreatedBy                                        // no change
	out.UpdatedBy = out.UpdatedBy                                        // no change
	out.CancelReason = out.CancelReason                                  // no change
	out.Status = out.Status                                              // no change
	out.SupplierID = out.SupplierID                                      // no change
	out.TotalAmount = arg.TotalAmount.Apply(out.TotalAmount)             // apply change
	out.BasketValue = arg.BasketValue.Apply(out.BasketValue)             // apply change
}

//-- convert etop.vn/api/main/purchaserefund.PurchaseRefundLine --//

func Convert_purchaserefundmodel_PurchaseRefundLine_purchaserefund_PurchaseRefundLine(arg *purchaserefundmodel.PurchaseRefundLine, out *purchaserefund.PurchaseRefundLine) *purchaserefund.PurchaseRefundLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &purchaserefund.PurchaseRefundLine{}
	}
	convert_purchaserefundmodel_PurchaseRefundLine_purchaserefund_PurchaseRefundLine(arg, out)
	return out
}

func convert_purchaserefundmodel_PurchaseRefundLine_purchaserefund_PurchaseRefundLine(arg *purchaserefundmodel.PurchaseRefundLine, out *purchaserefund.PurchaseRefundLine) {
	out.VariantID = arg.VariantID       // simple assign
	out.Quantity = arg.Quantity         // simple assign
	out.Code = arg.Code                 // simple assign
	out.ImageURL = arg.ImageURL         // simple assign
	out.PaymentPrice = arg.PaymentPrice // simple assign
	out.ProductID = arg.ProductID       // simple assign
	out.ProductName = arg.ProductName   // simple assign
	out.Attributes = catalogconvert.Convert_catalogmodel_ProductAttributes_catalogtypes_Attributes(arg.Attributes)
	out.Adjustment = arg.Adjustment // simple assign
}

func Convert_purchaserefundmodel_PurchaseRefundLines_purchaserefund_PurchaseRefundLines(args []*purchaserefundmodel.PurchaseRefundLine) (outs []*purchaserefund.PurchaseRefundLine) {
	tmps := make([]purchaserefund.PurchaseRefundLine, len(args))
	outs = make([]*purchaserefund.PurchaseRefundLine, len(args))
	for i := range tmps {
		outs[i] = Convert_purchaserefundmodel_PurchaseRefundLine_purchaserefund_PurchaseRefundLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_purchaserefund_PurchaseRefundLine_purchaserefundmodel_PurchaseRefundLine(arg *purchaserefund.PurchaseRefundLine, out *purchaserefundmodel.PurchaseRefundLine) *purchaserefundmodel.PurchaseRefundLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &purchaserefundmodel.PurchaseRefundLine{}
	}
	convert_purchaserefund_PurchaseRefundLine_purchaserefundmodel_PurchaseRefundLine(arg, out)
	return out
}

func convert_purchaserefund_PurchaseRefundLine_purchaserefundmodel_PurchaseRefundLine(arg *purchaserefund.PurchaseRefundLine, out *purchaserefundmodel.PurchaseRefundLine) {
	out.VariantID = arg.VariantID       // simple assign
	out.Quantity = arg.Quantity         // simple assign
	out.Code = arg.Code                 // simple assign
	out.ImageURL = arg.ImageURL         // simple assign
	out.ProductName = arg.ProductName   // simple assign
	out.PaymentPrice = arg.PaymentPrice // simple assign
	out.ProductID = arg.ProductID       // simple assign
	out.Attributes = catalogconvert.Convert_catalogtypes_Attributes_catalogmodel_ProductAttributes(arg.Attributes)
	out.Adjustment = arg.Adjustment // simple assign
}

func Convert_purchaserefund_PurchaseRefundLines_purchaserefundmodel_PurchaseRefundLines(args []*purchaserefund.PurchaseRefundLine) (outs []*purchaserefundmodel.PurchaseRefundLine) {
	tmps := make([]purchaserefundmodel.PurchaseRefundLine, len(args))
	outs = make([]*purchaserefundmodel.PurchaseRefundLine, len(args))
	for i := range tmps {
		outs[i] = Convert_purchaserefund_PurchaseRefundLine_purchaserefundmodel_PurchaseRefundLine(args[i], &tmps[i])
	}
	return outs
}
