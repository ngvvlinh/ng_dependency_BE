// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type Payments []*Payment

const __sqlPayment_Table = "payment"
const __sqlPayment_ListCols = "\"id\",\"shop_id\",\"amount\",\"status\",\"state\",\"payment_provider\",\"external_trans_id\",\"external_data\",\"created_at\",\"updated_at\""
const __sqlPayment_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"shop_id\" = EXCLUDED.\"shop_id\",\"amount\" = EXCLUDED.\"amount\",\"status\" = EXCLUDED.\"status\",\"state\" = EXCLUDED.\"state\",\"payment_provider\" = EXCLUDED.\"payment_provider\",\"external_trans_id\" = EXCLUDED.\"external_trans_id\",\"external_data\" = EXCLUDED.\"external_data\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlPayment_Insert = "INSERT INTO \"payment\" (" + __sqlPayment_ListCols + ") VALUES"
const __sqlPayment_Select = "SELECT " + __sqlPayment_ListCols + " FROM \"payment\""
const __sqlPayment_Select_history = "SELECT " + __sqlPayment_ListCols + " FROM history.\"payment\""
const __sqlPayment_UpdateAll = "UPDATE \"payment\" SET (" + __sqlPayment_ListCols + ")"
const __sqlPayment_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT payment_pkey DO UPDATE SET"

func (m *Payment) SQLTableName() string  { return "payment" }
func (m *Payments) SQLTableName() string { return "payment" }
func (m *Payment) SQLListCols() string   { return __sqlPayment_ListCols }

func (m *Payment) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlPayment_ListCols + " FROM \"payment\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *Payment) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "payment"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"shop_id": {
			ColumnName:       "shop_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"amount": {
			ColumnName:       "amount",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"status": {
			ColumnName:       "status",
			ColumnType:       "status4.Status",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"Z", "P", "S", "N"},
		},
		"state": {
			ColumnName:       "state",
			ColumnType:       "payment_state.PaymentState",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"unknown", "default", "created", "pending", "success", "failed", "cancelled", "expired", "refunded"},
		},
		"payment_provider": {
			ColumnName:       "payment_provider",
			ColumnType:       "payment_provider.PaymentProvider",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"unknown", "vtpay", "bank", "manual", "kpay"},
		},
		"external_trans_id": {
			ColumnName:       "external_trans_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_data": {
			ColumnName:       "external_data",
			ColumnType:       "json.RawMessage",
			ColumnDBType:     "[]byte",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "payment", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*Payment)(nil))
}

func (m *Payment) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.ShopID,
		core.Int(m.Amount),
		m.Status,
		m.State,
		m.PaymentProvider,
		core.String(m.ExternalTransID),
		core.JSON{m.ExternalData},
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *Payment) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.ShopID,
		(*core.Int)(&m.Amount),
		&m.Status,
		&m.State,
		&m.PaymentProvider,
		(*core.String)(&m.ExternalTransID),
		core.JSON{&m.ExternalData},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *Payment) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Payments) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Payments, 0, 128)
	for rows.Next() {
		m := new(Payment)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Payment) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPayment_Select)
	return nil
}

func (_ *Payments) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPayment_Select)
	return nil
}

func (m *Payment) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlPayment_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(10)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Payments) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlPayment_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(10)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Payment) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlPayment_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlPayment_ListColsOnConflict)
	return nil
}

func (ms Payments) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlPayment_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlPayment_ListColsOnConflict)
	return nil
}

func (m *Payment) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("payment")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.Amount != 0 {
		flag = true
		w.WriteName("amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Amount)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if m.State != 0 {
		flag = true
		w.WriteName("state")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.State)
	}
	if m.PaymentProvider != 0 {
		flag = true
		w.WriteName("payment_provider")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PaymentProvider)
	}
	if m.ExternalTransID != "" {
		flag = true
		w.WriteName("external_trans_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalTransID)
	}
	if m.ExternalData != nil {
		flag = true
		w.WriteName("external_data")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalData})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if true { // always update time
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Payment) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlPayment_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(10)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type PaymentHistory map[string]interface{}
type PaymentHistories []map[string]interface{}

func (m *PaymentHistory) SQLTableName() string  { return "history.\"payment\"" }
func (m PaymentHistories) SQLTableName() string { return "history.\"payment\"" }

func (m *PaymentHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPayment_Select_history)
	return nil
}

func (m PaymentHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPayment_Select_history)
	return nil
}

func (m PaymentHistory) ID() core.Interface     { return core.Interface{m["id"]} }
func (m PaymentHistory) ShopID() core.Interface { return core.Interface{m["shop_id"]} }
func (m PaymentHistory) Amount() core.Interface { return core.Interface{m["amount"]} }
func (m PaymentHistory) Status() core.Interface { return core.Interface{m["status"]} }
func (m PaymentHistory) State() core.Interface  { return core.Interface{m["state"]} }
func (m PaymentHistory) PaymentProvider() core.Interface {
	return core.Interface{m["payment_provider"]}
}
func (m PaymentHistory) ExternalTransID() core.Interface {
	return core.Interface{m["external_trans_id"]}
}
func (m PaymentHistory) ExternalData() core.Interface { return core.Interface{m["external_data"]} }
func (m PaymentHistory) CreatedAt() core.Interface    { return core.Interface{m["created_at"]} }
func (m PaymentHistory) UpdatedAt() core.Interface    { return core.Interface{m["updated_at"]} }

func (m *PaymentHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 10)
	args := make([]interface{}, 10)
	for i := 0; i < 10; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(PaymentHistory, 10)
	res["id"] = data[0]
	res["shop_id"] = data[1]
	res["amount"] = data[2]
	res["status"] = data[3]
	res["state"] = data[4]
	res["payment_provider"] = data[5]
	res["external_trans_id"] = data[6]
	res["external_data"] = data[7]
	res["created_at"] = data[8]
	res["updated_at"] = data[9]
	*m = res
	return nil
}

func (ms *PaymentHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 10)
	args := make([]interface{}, 10)
	for i := 0; i < 10; i++ {
		args[i] = &data[i]
	}
	res := make(PaymentHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(PaymentHistory)
		m["id"] = data[0]
		m["shop_id"] = data[1]
		m["amount"] = data[2]
		m["status"] = data[3]
		m["state"] = data[4]
		m["payment_provider"] = data[5]
		m["external_trans_id"] = data[6]
		m["external_data"] = data[7]
		m["created_at"] = data[8]
		m["updated_at"] = data[9]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
