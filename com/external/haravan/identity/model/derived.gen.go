// Code generated by goderive DO NOT EDIT.

package model

import (
	"database/sql"
	"time"

	"etop.vn/backend/pkg/common/sq/core"
)

type SQLWriter = core.SQLWriter

// Type ExternalAccountHaravan represents table external_account_haravan
func sqlgenExternalAccountHaravan(_ *ExternalAccountHaravan) bool { return true }

type ExternalAccountHaravans []*ExternalAccountHaravan

const __sqlExternalAccountHaravan_Table = "external_account_haravan"
const __sqlExternalAccountHaravan_ListCols = "\"id\",\"shop_id\",\"subdomain\",\"access_token\",\"external_shop_id\",\"external_carrier_service_id\",\"external_connected_carrier_service_at\",\"expires_at\",\"created_at\",\"updated_at\""
const __sqlExternalAccountHaravan_Insert = "INSERT INTO \"external_account_haravan\" (" + __sqlExternalAccountHaravan_ListCols + ") VALUES"
const __sqlExternalAccountHaravan_Select = "SELECT " + __sqlExternalAccountHaravan_ListCols + " FROM \"external_account_haravan\""
const __sqlExternalAccountHaravan_Select_history = "SELECT " + __sqlExternalAccountHaravan_ListCols + " FROM history.\"external_account_haravan\""
const __sqlExternalAccountHaravan_UpdateAll = "UPDATE \"external_account_haravan\" SET (" + __sqlExternalAccountHaravan_ListCols + ")"

func (m *ExternalAccountHaravan) SQLTableName() string  { return "external_account_haravan" }
func (m *ExternalAccountHaravans) SQLTableName() string { return "external_account_haravan" }
func (m *ExternalAccountHaravan) SQLListCols() string   { return __sqlExternalAccountHaravan_ListCols }

func (m *ExternalAccountHaravan) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ShopID),
		core.String(m.Subdomain),
		core.String(m.AccessToken),
		core.Int(m.ExternalShopID),
		core.Int(m.ExternalCarrierServiceID),
		core.Time(m.ExternalConnectedCarrierServiceAt),
		core.Time(m.ExpiresAt),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *ExternalAccountHaravan) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ShopID),
		(*core.String)(&m.Subdomain),
		(*core.String)(&m.AccessToken),
		(*core.Int)(&m.ExternalShopID),
		(*core.Int)(&m.ExternalCarrierServiceID),
		(*core.Time)(&m.ExternalConnectedCarrierServiceAt),
		(*core.Time)(&m.ExpiresAt),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *ExternalAccountHaravan) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ExternalAccountHaravans) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ExternalAccountHaravans, 0, 128)
	for rows.Next() {
		m := new(ExternalAccountHaravan)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ExternalAccountHaravan) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlExternalAccountHaravan_Select)
	return nil
}

func (_ *ExternalAccountHaravans) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlExternalAccountHaravan_Select)
	return nil
}

func (m *ExternalAccountHaravan) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlExternalAccountHaravan_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(10)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ExternalAccountHaravans) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlExternalAccountHaravan_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(10)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ExternalAccountHaravan) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("external_account_haravan")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.Subdomain != "" {
		flag = true
		w.WriteName("subdomain")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Subdomain)
	}
	if m.AccessToken != "" {
		flag = true
		w.WriteName("access_token")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccessToken)
	}
	if m.ExternalShopID != 0 {
		flag = true
		w.WriteName("external_shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalShopID)
	}
	if m.ExternalCarrierServiceID != 0 {
		flag = true
		w.WriteName("external_carrier_service_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCarrierServiceID)
	}
	if !m.ExternalConnectedCarrierServiceAt.IsZero() {
		flag = true
		w.WriteName("external_connected_carrier_service_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalConnectedCarrierServiceAt)
	}
	if !m.ExpiresAt.IsZero() {
		flag = true
		w.WriteName("expires_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExpiresAt)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ExternalAccountHaravan) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlExternalAccountHaravan_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(10)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ExternalAccountHaravanHistory map[string]interface{}
type ExternalAccountHaravanHistories []map[string]interface{}

func (m *ExternalAccountHaravanHistory) SQLTableName() string {
	return "history.\"external_account_haravan\""
}
func (m ExternalAccountHaravanHistories) SQLTableName() string {
	return "history.\"external_account_haravan\""
}

func (m *ExternalAccountHaravanHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlExternalAccountHaravan_Select_history)
	return nil
}

func (m ExternalAccountHaravanHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlExternalAccountHaravan_Select_history)
	return nil
}

func (m ExternalAccountHaravanHistory) ID() core.Interface     { return core.Interface{m["id"]} }
func (m ExternalAccountHaravanHistory) ShopID() core.Interface { return core.Interface{m["shop_id"]} }
func (m ExternalAccountHaravanHistory) Subdomain() core.Interface {
	return core.Interface{m["subdomain"]}
}
func (m ExternalAccountHaravanHistory) AccessToken() core.Interface {
	return core.Interface{m["access_token"]}
}
func (m ExternalAccountHaravanHistory) ExternalShopID() core.Interface {
	return core.Interface{m["external_shop_id"]}
}
func (m ExternalAccountHaravanHistory) ExternalCarrierServiceID() core.Interface {
	return core.Interface{m["external_carrier_service_id"]}
}
func (m ExternalAccountHaravanHistory) ExternalConnectedCarrierServiceAt() core.Interface {
	return core.Interface{m["external_connected_carrier_service_at"]}
}
func (m ExternalAccountHaravanHistory) ExpiresAt() core.Interface {
	return core.Interface{m["expires_at"]}
}
func (m ExternalAccountHaravanHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m ExternalAccountHaravanHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *ExternalAccountHaravanHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 10)
	args := make([]interface{}, 10)
	for i := 0; i < 10; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ExternalAccountHaravanHistory, 10)
	res["id"] = data[0]
	res["shop_id"] = data[1]
	res["subdomain"] = data[2]
	res["access_token"] = data[3]
	res["external_shop_id"] = data[4]
	res["external_carrier_service_id"] = data[5]
	res["external_connected_carrier_service_at"] = data[6]
	res["expires_at"] = data[7]
	res["created_at"] = data[8]
	res["updated_at"] = data[9]
	*m = res
	return nil
}

func (ms *ExternalAccountHaravanHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 10)
	args := make([]interface{}, 10)
	for i := 0; i < 10; i++ {
		args[i] = &data[i]
	}
	res := make(ExternalAccountHaravanHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ExternalAccountHaravanHistory)
		m["id"] = data[0]
		m["shop_id"] = data[1]
		m["subdomain"] = data[2]
		m["access_token"] = data[3]
		m["external_shop_id"] = data[4]
		m["external_carrier_service_id"] = data[5]
		m["external_connected_carrier_service_at"] = data[6]
		m["expires_at"] = data[7]
		m["created_at"] = data[8]
		m["updated_at"] = data[9]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
