// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package sqlstore

import (
	time "time"

	sq "o.o/backend/pkg/common/sql/sq"
	dot "o.o/capi/dot"
)

type TicketProviderWebhookFilters struct{ prefix string }

func NewTicketProviderWebhookFilters(prefix string) TicketProviderWebhookFilters {
	return TicketProviderWebhookFilters{prefix}
}

func (ft *TicketProviderWebhookFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(&ft.prefix, pred, args...)
}

func (ft TicketProviderWebhookFilters) Prefix() string {
	return ft.prefix
}

func (ft *TicketProviderWebhookFilters) ByID(ID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft *TicketProviderWebhookFilters) ByIDPtr(ID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft *TicketProviderWebhookFilters) ByTicketProvider(TicketProvider string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "ticket_provider",
		Value:  TicketProvider,
		IsNil:  TicketProvider == "",
	}
}

func (ft *TicketProviderWebhookFilters) ByTicketProviderPtr(TicketProvider *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "ticket_provider",
		Value:  TicketProvider,
		IsNil:  TicketProvider == nil,
		IsZero: TicketProvider != nil && (*TicketProvider) == "",
	}
}

func (ft *TicketProviderWebhookFilters) ByExternalStatus(ExternalStatus string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "external_status",
		Value:  ExternalStatus,
		IsNil:  ExternalStatus == "",
	}
}

func (ft *TicketProviderWebhookFilters) ByExternalStatusPtr(ExternalStatus *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "external_status",
		Value:  ExternalStatus,
		IsNil:  ExternalStatus == nil,
		IsZero: ExternalStatus != nil && (*ExternalStatus) == "",
	}
}

func (ft *TicketProviderWebhookFilters) ByExternalType(ExternalType string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "external_type",
		Value:  ExternalType,
		IsNil:  ExternalType == "",
	}
}

func (ft *TicketProviderWebhookFilters) ByExternalTypePtr(ExternalType *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "external_type",
		Value:  ExternalType,
		IsNil:  ExternalType == nil,
		IsZero: ExternalType != nil && (*ExternalType) == "",
	}
}

func (ft *TicketProviderWebhookFilters) ByClientID(ClientID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "client_id",
		Value:  ClientID,
		IsNil:  ClientID == "",
	}
}

func (ft *TicketProviderWebhookFilters) ByClientIDPtr(ClientID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "client_id",
		Value:  ClientID,
		IsNil:  ClientID == nil,
		IsZero: ClientID != nil && (*ClientID) == "",
	}
}

func (ft *TicketProviderWebhookFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft *TicketProviderWebhookFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft *TicketProviderWebhookFilters) ByConnectionID(ConnectionID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "connection_id",
		Value:  ConnectionID,
		IsNil:  ConnectionID == 0,
	}
}

func (ft *TicketProviderWebhookFilters) ByConnectionIDPtr(ConnectionID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "connection_id",
		Value:  ConnectionID,
		IsNil:  ConnectionID == nil,
		IsZero: ConnectionID != nil && (*ConnectionID) == 0,
	}
}
