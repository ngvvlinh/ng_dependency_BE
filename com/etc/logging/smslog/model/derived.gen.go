// Code generated by goderive DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	"time"

	"etop.vn/backend/pkg/common/sql/cmsql"
	core "etop.vn/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

// Type SmsLog represents table sms_log
func sqlgenSMS(_ *SmsLog) bool { return true }

type SmsLogs []*SmsLog

const __sqlSmsLog_Table = "sms_log"
const __sqlSmsLog_ListCols = "\"id\",\"external_id\",\"phone\",\"provider\",\"content\",\"created_at\",\"status\",\"error\""
const __sqlSmsLog_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"external_id\" = EXCLUDED.\"external_id\",\"phone\" = EXCLUDED.\"phone\",\"provider\" = EXCLUDED.\"provider\",\"content\" = EXCLUDED.\"content\",\"created_at\" = EXCLUDED.\"created_at\",\"status\" = EXCLUDED.\"status\",\"error\" = EXCLUDED.\"error\""
const __sqlSmsLog_Insert = "INSERT INTO \"sms_log\" (" + __sqlSmsLog_ListCols + ") VALUES"
const __sqlSmsLog_Select = "SELECT " + __sqlSmsLog_ListCols + " FROM \"sms_log\""
const __sqlSmsLog_Select_history = "SELECT " + __sqlSmsLog_ListCols + " FROM history.\"sms_log\""
const __sqlSmsLog_UpdateAll = "UPDATE \"sms_log\" SET (" + __sqlSmsLog_ListCols + ")"
const __sqlSmsLog_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT sms_log_pkey DO UPDATE SET"

func (m *SmsLog) SQLTableName() string  { return "sms_log" }
func (m *SmsLogs) SQLTableName() string { return "sms_log" }
func (m *SmsLog) SQLListCols() string   { return __sqlSmsLog_ListCols }

func (m *SmsLog) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlSmsLog_ListCols + " FROM \"sms_log\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*SmsLog)(nil))
}

func (m *SmsLog) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.ExternalID),
		core.String(m.Phone),
		core.String(m.Provider),
		core.String(m.Content),
		core.Now(m.CreatedAt, now, create),
		m.Status,
		core.String(m.Error),
	}
}

func (m *SmsLog) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.ExternalID),
		(*core.String)(&m.Phone),
		(*core.String)(&m.Provider),
		(*core.String)(&m.Content),
		(*core.Time)(&m.CreatedAt),
		&m.Status,
		(*core.String)(&m.Error),
	}
}

func (m *SmsLog) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *SmsLogs) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(SmsLogs, 0, 128)
	for rows.Next() {
		m := new(SmsLog)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *SmsLog) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSmsLog_Select)
	return nil
}

func (_ *SmsLogs) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSmsLog_Select)
	return nil
}

func (m *SmsLog) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSmsLog_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms SmsLogs) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSmsLog_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(8)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *SmsLog) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlSmsLog_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlSmsLog_ListColsOnConflict)
	return nil
}

func (ms SmsLogs) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlSmsLog_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlSmsLog_ListColsOnConflict)
	return nil
}

func (m *SmsLog) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("sms_log")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalID)
	}
	if m.Phone != "" {
		flag = true
		w.WriteName("phone")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Phone)
	}
	if m.Provider != "" {
		flag = true
		w.WriteName("provider")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Provider)
	}
	if m.Content != "" {
		flag = true
		w.WriteName("content")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Content)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if m.Error != "" {
		flag = true
		w.WriteName("error")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Error)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *SmsLog) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlSmsLog_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type SmsLogHistory map[string]interface{}
type SmsLogHistories []map[string]interface{}

func (m *SmsLogHistory) SQLTableName() string  { return "history.\"sms_log\"" }
func (m SmsLogHistories) SQLTableName() string { return "history.\"sms_log\"" }

func (m *SmsLogHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSmsLog_Select_history)
	return nil
}

func (m SmsLogHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSmsLog_Select_history)
	return nil
}

func (m SmsLogHistory) ID() core.Interface         { return core.Interface{m["id"]} }
func (m SmsLogHistory) ExternalID() core.Interface { return core.Interface{m["external_id"]} }
func (m SmsLogHistory) Phone() core.Interface      { return core.Interface{m["phone"]} }
func (m SmsLogHistory) Provider() core.Interface   { return core.Interface{m["provider"]} }
func (m SmsLogHistory) Content() core.Interface    { return core.Interface{m["content"]} }
func (m SmsLogHistory) CreatedAt() core.Interface  { return core.Interface{m["created_at"]} }
func (m SmsLogHistory) Status() core.Interface     { return core.Interface{m["status"]} }
func (m SmsLogHistory) Error() core.Interface      { return core.Interface{m["error"]} }

func (m *SmsLogHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(SmsLogHistory, 8)
	res["id"] = data[0]
	res["external_id"] = data[1]
	res["phone"] = data[2]
	res["provider"] = data[3]
	res["content"] = data[4]
	res["created_at"] = data[5]
	res["status"] = data[6]
	res["error"] = data[7]
	*m = res
	return nil
}

func (ms *SmsLogHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	res := make(SmsLogHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(SmsLogHistory)
		m["id"] = data[0]
		m["external_id"] = data[1]
		m["phone"] = data[2]
		m["provider"] = data[3]
		m["content"] = data[4]
		m["created_at"] = data[5]
		m["status"] = data[6]
		m["error"] = data[7]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
