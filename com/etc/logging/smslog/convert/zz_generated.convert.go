// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	smslog "etop.vn/api/etc/logging/smslog"
	smslogmodel "etop.vn/backend/com/etc/logging/smslog/model"
	conversion "etop.vn/backend/pkg/common/conversion"
)

/*
Custom conversions:
    createSmsLog    // in use

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*smslogmodel.SmsLog)(nil), (*smslog.SmsLog)(nil), func(arg, out interface{}) error {
		Convert_smslogmodel_SmsLog_smslog_SmsLog(arg.(*smslogmodel.SmsLog), out.(*smslog.SmsLog))
		return nil
	})
	s.Register(([]*smslogmodel.SmsLog)(nil), (*[]*smslog.SmsLog)(nil), func(arg, out interface{}) error {
		out0 := Convert_smslogmodel_SmsLogs_smslog_SmsLogs(arg.([]*smslogmodel.SmsLog))
		*out.(*[]*smslog.SmsLog) = out0
		return nil
	})
	s.Register((*smslog.SmsLog)(nil), (*smslogmodel.SmsLog)(nil), func(arg, out interface{}) error {
		Convert_smslog_SmsLog_smslogmodel_SmsLog(arg.(*smslog.SmsLog), out.(*smslogmodel.SmsLog))
		return nil
	})
	s.Register(([]*smslog.SmsLog)(nil), (*[]*smslogmodel.SmsLog)(nil), func(arg, out interface{}) error {
		out0 := Convert_smslog_SmsLogs_smslogmodel_SmsLogs(arg.([]*smslog.SmsLog))
		*out.(*[]*smslogmodel.SmsLog) = out0
		return nil
	})
	s.Register((*smslog.CreateSmsArgs)(nil), (*smslog.SmsLog)(nil), func(arg, out interface{}) error {
		Apply_smslog_CreateSmsArgs_smslog_SmsLog(arg.(*smslog.CreateSmsArgs), out.(*smslog.SmsLog))
		return nil
	})
}

//-- convert etop.vn/api/etc/logging/smslog.SmsLog --//

func Convert_smslogmodel_SmsLog_smslog_SmsLog(arg *smslogmodel.SmsLog, out *smslog.SmsLog) *smslog.SmsLog {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &smslog.SmsLog{}
	}
	convert_smslogmodel_SmsLog_smslog_SmsLog(arg, out)
	return out
}

func convert_smslogmodel_SmsLog_smslog_SmsLog(arg *smslogmodel.SmsLog, out *smslog.SmsLog) {
	out.ID = arg.ID                 // simple assign
	out.ExternalID = arg.ExternalID // simple assign
	out.Phone = arg.Phone           // simple assign
	out.Provider = arg.Provider     // simple assign
	out.Content = arg.Content       // simple assign
	out.CreatedAt = arg.CreatedAt   // simple assign
	out.Status = arg.Status         // simple assign
	out.Error = arg.Error           // simple assign
}

func Convert_smslogmodel_SmsLogs_smslog_SmsLogs(args []*smslogmodel.SmsLog) (outs []*smslog.SmsLog) {
	tmps := make([]smslog.SmsLog, len(args))
	outs = make([]*smslog.SmsLog, len(args))
	for i := range tmps {
		outs[i] = Convert_smslogmodel_SmsLog_smslog_SmsLog(args[i], &tmps[i])
	}
	return outs
}

func Convert_smslog_SmsLog_smslogmodel_SmsLog(arg *smslog.SmsLog, out *smslogmodel.SmsLog) *smslogmodel.SmsLog {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &smslogmodel.SmsLog{}
	}
	convert_smslog_SmsLog_smslogmodel_SmsLog(arg, out)
	return out
}

func convert_smslog_SmsLog_smslogmodel_SmsLog(arg *smslog.SmsLog, out *smslogmodel.SmsLog) {
	out.ID = arg.ID                 // simple assign
	out.ExternalID = arg.ExternalID // simple assign
	out.Phone = arg.Phone           // simple assign
	out.Provider = arg.Provider     // simple assign
	out.Content = arg.Content       // simple assign
	out.CreatedAt = arg.CreatedAt   // simple assign
	out.Status = arg.Status         // simple assign
	out.Error = arg.Error           // simple assign
}

func Convert_smslog_SmsLogs_smslogmodel_SmsLogs(args []*smslog.SmsLog) (outs []*smslogmodel.SmsLog) {
	tmps := make([]smslogmodel.SmsLog, len(args))
	outs = make([]*smslogmodel.SmsLog, len(args))
	for i := range tmps {
		outs[i] = Convert_smslog_SmsLog_smslogmodel_SmsLog(args[i], &tmps[i])
	}
	return outs
}

func Apply_smslog_CreateSmsArgs_smslog_SmsLog(arg *smslog.CreateSmsArgs, out *smslog.SmsLog) *smslog.SmsLog {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &smslog.SmsLog{}
	}
	createSmsLog(arg, out)
	return out
}

func apply_smslog_CreateSmsArgs_smslog_SmsLog(arg *smslog.CreateSmsArgs, out *smslog.SmsLog) {
	out.ID = 0                      // zero value
	out.ExternalID = arg.ExternalID // simple assign
	out.Phone = arg.Phone           // simple assign
	out.Provider = arg.Provider     // simple assign
	out.Content = arg.Content       // simple assign
	out.CreatedAt = time.Time{}     // zero value
	out.Status = arg.Status         // simple assign
	out.Error = arg.Error           // simple assign
}
