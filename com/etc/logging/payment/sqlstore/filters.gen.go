// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package sqlstore

import (
	time "time"

	payment_provider "o.o/api/top/types/etc/payment_provider"
	paymentmodel "o.o/backend/com/etc/logging/payment/model"
	sq "o.o/backend/pkg/common/sql/sq"
	dot "o.o/capi/dot"
)

type PaymentFilters struct{ prefix string }

func NewPaymentFilters(prefix string) PaymentFilters {
	return PaymentFilters{prefix}
}

func (ft *PaymentFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(&ft.prefix, pred, args...)
}

func (ft PaymentFilters) Prefix() string {
	return ft.prefix
}

func (ft *PaymentFilters) ByID(ID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft *PaymentFilters) ByIDPtr(ID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft *PaymentFilters) ByOrderID(OrderID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "order_id",
		Value:  OrderID,
		IsNil:  OrderID == "",
	}
}

func (ft *PaymentFilters) ByOrderIDPtr(OrderID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "order_id",
		Value:  OrderID,
		IsNil:  OrderID == nil,
		IsZero: OrderID != nil && (*OrderID) == "",
	}
}

func (ft *PaymentFilters) ByPaymentProvider(PaymentProvider payment_provider.PaymentProvider) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "payment_provider",
		Value:  PaymentProvider,
		IsNil:  PaymentProvider == 0,
	}
}

func (ft *PaymentFilters) ByPaymentProviderPtr(PaymentProvider *payment_provider.PaymentProvider) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "payment_provider",
		Value:  PaymentProvider,
		IsNil:  PaymentProvider == nil,
		IsZero: PaymentProvider != nil && (*PaymentProvider) == 0,
	}
}

func (ft *PaymentFilters) ByAction(Action paymentmodel.PaymentAction) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "action",
		Value:  Action,
		IsNil:  Action == "",
	}
}

func (ft *PaymentFilters) ByActionPtr(Action *paymentmodel.PaymentAction) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "action",
		Value:  Action,
		IsNil:  Action == nil,
		IsZero: Action != nil && (*Action) == "",
	}
}

func (ft *PaymentFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft *PaymentFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft *PaymentFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft *PaymentFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}
