// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type WsCategories []*WsCategory

const __sqlWsCategory_Table = "ws_category"
const __sqlWsCategory_ListCols = "\"id\",\"shop_id\",\"slug\",\"seo_config\",\"image\",\"appear\",\"created_at\",\"updated_at\""
const __sqlWsCategory_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"shop_id\" = EXCLUDED.\"shop_id\",\"slug\" = EXCLUDED.\"slug\",\"seo_config\" = EXCLUDED.\"seo_config\",\"image\" = EXCLUDED.\"image\",\"appear\" = EXCLUDED.\"appear\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlWsCategory_Insert = "INSERT INTO \"ws_category\" (" + __sqlWsCategory_ListCols + ") VALUES"
const __sqlWsCategory_Select = "SELECT " + __sqlWsCategory_ListCols + " FROM \"ws_category\""
const __sqlWsCategory_Select_history = "SELECT " + __sqlWsCategory_ListCols + " FROM history.\"ws_category\""
const __sqlWsCategory_UpdateAll = "UPDATE \"ws_category\" SET (" + __sqlWsCategory_ListCols + ")"
const __sqlWsCategory_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT ws_category_pkey DO UPDATE SET"

func (m *WsCategory) SQLTableName() string   { return "ws_category" }
func (m *WsCategories) SQLTableName() string { return "ws_category" }
func (m *WsCategory) SQLListCols() string    { return __sqlWsCategory_ListCols }

func (m *WsCategory) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlWsCategory_ListCols + " FROM \"ws_category\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *WsCategory) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "ws_category"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"shop_id": {
			ColumnName:       "shop_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"slug": {
			ColumnName:       "slug",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"seo_config": {
			ColumnName:       "seo_config",
			ColumnType:       "*WsSEOConfig",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"image": {
			ColumnName:       "image",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"appear": {
			ColumnName:       "appear",
			ColumnType:       "bool",
			ColumnDBType:     "bool",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "ws_category", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*WsCategory)(nil))
}

func (m *WsCategory) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.ShopID,
		core.String(m.Slug),
		core.JSON{m.SEOConfig},
		core.String(m.Image),
		core.Bool(m.Appear),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *WsCategory) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.ShopID,
		(*core.String)(&m.Slug),
		core.JSON{&m.SEOConfig},
		(*core.String)(&m.Image),
		(*core.Bool)(&m.Appear),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *WsCategory) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *WsCategories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(WsCategories, 0, 128)
	for rows.Next() {
		m := new(WsCategory)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *WsCategory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWsCategory_Select)
	return nil
}

func (_ *WsCategories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWsCategory_Select)
	return nil
}

func (m *WsCategory) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlWsCategory_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms WsCategories) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlWsCategory_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(8)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *WsCategory) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlWsCategory_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlWsCategory_ListColsOnConflict)
	return nil
}

func (ms WsCategories) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlWsCategory_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlWsCategory_ListColsOnConflict)
	return nil
}

func (m *WsCategory) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("ws_category")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.Slug != "" {
		flag = true
		w.WriteName("slug")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Slug)
	}
	if m.SEOConfig != nil {
		flag = true
		w.WriteName("seo_config")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.SEOConfig})
	}
	if m.Image != "" {
		flag = true
		w.WriteName("image")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Image)
	}
	if m.Appear {
		flag = true
		w.WriteName("appear")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Appear)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *WsCategory) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlWsCategory_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type WsCategoryHistory map[string]interface{}
type WsCategoryHistories []map[string]interface{}

func (m *WsCategoryHistory) SQLTableName() string  { return "history.\"ws_category\"" }
func (m WsCategoryHistories) SQLTableName() string { return "history.\"ws_category\"" }

func (m *WsCategoryHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWsCategory_Select_history)
	return nil
}

func (m WsCategoryHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWsCategory_Select_history)
	return nil
}

func (m WsCategoryHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m WsCategoryHistory) ShopID() core.Interface    { return core.Interface{m["shop_id"]} }
func (m WsCategoryHistory) Slug() core.Interface      { return core.Interface{m["slug"]} }
func (m WsCategoryHistory) SEOConfig() core.Interface { return core.Interface{m["seo_config"]} }
func (m WsCategoryHistory) Image() core.Interface     { return core.Interface{m["image"]} }
func (m WsCategoryHistory) Appear() core.Interface    { return core.Interface{m["appear"]} }
func (m WsCategoryHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m WsCategoryHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *WsCategoryHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(WsCategoryHistory, 8)
	res["id"] = data[0]
	res["shop_id"] = data[1]
	res["slug"] = data[2]
	res["seo_config"] = data[3]
	res["image"] = data[4]
	res["appear"] = data[5]
	res["created_at"] = data[6]
	res["updated_at"] = data[7]
	*m = res
	return nil
}

func (ms *WsCategoryHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	res := make(WsCategoryHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(WsCategoryHistory)
		m["id"] = data[0]
		m["shop_id"] = data[1]
		m["slug"] = data[2]
		m["seo_config"] = data[3]
		m["image"] = data[4]
		m["appear"] = data[5]
		m["created_at"] = data[6]
		m["updated_at"] = data[7]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type WsPages []*WsPage

const __sqlWsPage_Table = "ws_page"
const __sqlWsPage_ListCols = "\"shop_id\",\"id\",\"seo_config\",\"name\",\"slug\",\"desc_html\",\"image\",\"appear\",\"created_at\",\"updated_at\",\"deleted_at\""
const __sqlWsPage_ListColsOnConflict = "\"shop_id\" = EXCLUDED.\"shop_id\",\"id\" = EXCLUDED.\"id\",\"seo_config\" = EXCLUDED.\"seo_config\",\"name\" = EXCLUDED.\"name\",\"slug\" = EXCLUDED.\"slug\",\"desc_html\" = EXCLUDED.\"desc_html\",\"image\" = EXCLUDED.\"image\",\"appear\" = EXCLUDED.\"appear\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\""
const __sqlWsPage_Insert = "INSERT INTO \"ws_page\" (" + __sqlWsPage_ListCols + ") VALUES"
const __sqlWsPage_Select = "SELECT " + __sqlWsPage_ListCols + " FROM \"ws_page\""
const __sqlWsPage_Select_history = "SELECT " + __sqlWsPage_ListCols + " FROM history.\"ws_page\""
const __sqlWsPage_UpdateAll = "UPDATE \"ws_page\" SET (" + __sqlWsPage_ListCols + ")"
const __sqlWsPage_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT ws_page_pkey DO UPDATE SET"

func (m *WsPage) SQLTableName() string  { return "ws_page" }
func (m *WsPages) SQLTableName() string { return "ws_page" }
func (m *WsPage) SQLListCols() string   { return __sqlWsPage_ListCols }

func (m *WsPage) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlWsPage_ListCols + " FROM \"ws_page\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *WsPage) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "ws_page"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"shop_id": {
			ColumnName:       "shop_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"seo_config": {
			ColumnName:       "seo_config",
			ColumnType:       "*WsSEOConfig",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"name": {
			ColumnName:       "name",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"slug": {
			ColumnName:       "slug",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"desc_html": {
			ColumnName:       "desc_html",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"image": {
			ColumnName:       "image",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"appear": {
			ColumnName:       "appear",
			ColumnType:       "bool",
			ColumnDBType:     "bool",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_at": {
			ColumnName:       "deleted_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "ws_page", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*WsPage)(nil))
}

func (m *WsPage) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ShopID,
		m.ID,
		core.JSON{m.SEOConfig},
		core.String(m.Name),
		core.String(m.Slug),
		core.String(m.DescHTML),
		core.String(m.Image),
		core.Bool(m.Appear),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
	}
}

func (m *WsPage) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ShopID,
		&m.ID,
		core.JSON{&m.SEOConfig},
		(*core.String)(&m.Name),
		(*core.String)(&m.Slug),
		(*core.String)(&m.DescHTML),
		(*core.String)(&m.Image),
		(*core.Bool)(&m.Appear),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *WsPage) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *WsPages) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(WsPages, 0, 128)
	for rows.Next() {
		m := new(WsPage)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *WsPage) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWsPage_Select)
	return nil
}

func (_ *WsPages) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWsPage_Select)
	return nil
}

func (m *WsPage) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlWsPage_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(11)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms WsPages) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlWsPage_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(11)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *WsPage) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlWsPage_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlWsPage_ListColsOnConflict)
	return nil
}

func (ms WsPages) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlWsPage_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlWsPage_ListColsOnConflict)
	return nil
}

func (m *WsPage) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("ws_page")
	w.WriteRawString(" SET ")
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.SEOConfig != nil {
		flag = true
		w.WriteName("seo_config")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.SEOConfig})
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Slug != "" {
		flag = true
		w.WriteName("slug")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Slug)
	}
	if m.DescHTML != "" {
		flag = true
		w.WriteName("desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DescHTML)
	}
	if m.Image != "" {
		flag = true
		w.WriteName("image")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Image)
	}
	if m.Appear {
		flag = true
		w.WriteName("appear")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Appear)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *WsPage) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlWsPage_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(11)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type WsPageHistory map[string]interface{}
type WsPageHistories []map[string]interface{}

func (m *WsPageHistory) SQLTableName() string  { return "history.\"ws_page\"" }
func (m WsPageHistories) SQLTableName() string { return "history.\"ws_page\"" }

func (m *WsPageHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWsPage_Select_history)
	return nil
}

func (m WsPageHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWsPage_Select_history)
	return nil
}

func (m WsPageHistory) ShopID() core.Interface    { return core.Interface{m["shop_id"]} }
func (m WsPageHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m WsPageHistory) SEOConfig() core.Interface { return core.Interface{m["seo_config"]} }
func (m WsPageHistory) Name() core.Interface      { return core.Interface{m["name"]} }
func (m WsPageHistory) Slug() core.Interface      { return core.Interface{m["slug"]} }
func (m WsPageHistory) DescHTML() core.Interface  { return core.Interface{m["desc_html"]} }
func (m WsPageHistory) Image() core.Interface     { return core.Interface{m["image"]} }
func (m WsPageHistory) Appear() core.Interface    { return core.Interface{m["appear"]} }
func (m WsPageHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m WsPageHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }
func (m WsPageHistory) DeletedAt() core.Interface { return core.Interface{m["deleted_at"]} }

func (m *WsPageHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 11)
	args := make([]interface{}, 11)
	for i := 0; i < 11; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(WsPageHistory, 11)
	res["shop_id"] = data[0]
	res["id"] = data[1]
	res["seo_config"] = data[2]
	res["name"] = data[3]
	res["slug"] = data[4]
	res["desc_html"] = data[5]
	res["image"] = data[6]
	res["appear"] = data[7]
	res["created_at"] = data[8]
	res["updated_at"] = data[9]
	res["deleted_at"] = data[10]
	*m = res
	return nil
}

func (ms *WsPageHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 11)
	args := make([]interface{}, 11)
	for i := 0; i < 11; i++ {
		args[i] = &data[i]
	}
	res := make(WsPageHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(WsPageHistory)
		m["shop_id"] = data[0]
		m["id"] = data[1]
		m["seo_config"] = data[2]
		m["name"] = data[3]
		m["slug"] = data[4]
		m["desc_html"] = data[5]
		m["image"] = data[6]
		m["appear"] = data[7]
		m["created_at"] = data[8]
		m["updated_at"] = data[9]
		m["deleted_at"] = data[10]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type WsProducts []*WsProduct

const __sqlWsProduct_Table = "ws_product"
const __sqlWsProduct_ListCols = "\"id\",\"shop_id\",\"seo_config\",\"slug\",\"appear\",\"compare_price\",\"desc_html\",\"created_at\",\"updated_at\""
const __sqlWsProduct_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"shop_id\" = EXCLUDED.\"shop_id\",\"seo_config\" = EXCLUDED.\"seo_config\",\"slug\" = EXCLUDED.\"slug\",\"appear\" = EXCLUDED.\"appear\",\"compare_price\" = EXCLUDED.\"compare_price\",\"desc_html\" = EXCLUDED.\"desc_html\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlWsProduct_Insert = "INSERT INTO \"ws_product\" (" + __sqlWsProduct_ListCols + ") VALUES"
const __sqlWsProduct_Select = "SELECT " + __sqlWsProduct_ListCols + " FROM \"ws_product\""
const __sqlWsProduct_Select_history = "SELECT " + __sqlWsProduct_ListCols + " FROM history.\"ws_product\""
const __sqlWsProduct_UpdateAll = "UPDATE \"ws_product\" SET (" + __sqlWsProduct_ListCols + ")"
const __sqlWsProduct_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT ws_product_pkey DO UPDATE SET"

func (m *WsProduct) SQLTableName() string  { return "ws_product" }
func (m *WsProducts) SQLTableName() string { return "ws_product" }
func (m *WsProduct) SQLListCols() string   { return __sqlWsProduct_ListCols }

func (m *WsProduct) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlWsProduct_ListCols + " FROM \"ws_product\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *WsProduct) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "ws_product"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"shop_id": {
			ColumnName:       "shop_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"seo_config": {
			ColumnName:       "seo_config",
			ColumnType:       "*WsSEOConfig",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"slug": {
			ColumnName:       "slug",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"appear": {
			ColumnName:       "appear",
			ColumnType:       "bool",
			ColumnDBType:     "bool",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"compare_price": {
			ColumnName:       "compare_price",
			ColumnType:       "[]*ComparePrice",
			ColumnDBType:     "[]*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"desc_html": {
			ColumnName:       "desc_html",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "ws_product", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*WsProduct)(nil))
}

func (m *WsProduct) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.ShopID,
		core.JSON{m.SEOConfig},
		core.String(m.Slug),
		core.Bool(m.Appear),
		core.JSON{m.ComparePrice},
		core.String(m.DescHTML),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *WsProduct) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.ShopID,
		core.JSON{&m.SEOConfig},
		(*core.String)(&m.Slug),
		(*core.Bool)(&m.Appear),
		core.JSON{&m.ComparePrice},
		(*core.String)(&m.DescHTML),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *WsProduct) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *WsProducts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(WsProducts, 0, 128)
	for rows.Next() {
		m := new(WsProduct)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *WsProduct) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWsProduct_Select)
	return nil
}

func (_ *WsProducts) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWsProduct_Select)
	return nil
}

func (m *WsProduct) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlWsProduct_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms WsProducts) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlWsProduct_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(9)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *WsProduct) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlWsProduct_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlWsProduct_ListColsOnConflict)
	return nil
}

func (ms WsProducts) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlWsProduct_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlWsProduct_ListColsOnConflict)
	return nil
}

func (m *WsProduct) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("ws_product")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.SEOConfig != nil {
		flag = true
		w.WriteName("seo_config")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.SEOConfig})
	}
	if m.Slug != "" {
		flag = true
		w.WriteName("slug")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Slug)
	}
	if m.Appear {
		flag = true
		w.WriteName("appear")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Appear)
	}
	if m.ComparePrice != nil {
		flag = true
		w.WriteName("compare_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ComparePrice})
	}
	if m.DescHTML != "" {
		flag = true
		w.WriteName("desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DescHTML)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *WsProduct) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlWsProduct_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type WsProductHistory map[string]interface{}
type WsProductHistories []map[string]interface{}

func (m *WsProductHistory) SQLTableName() string  { return "history.\"ws_product\"" }
func (m WsProductHistories) SQLTableName() string { return "history.\"ws_product\"" }

func (m *WsProductHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWsProduct_Select_history)
	return nil
}

func (m WsProductHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWsProduct_Select_history)
	return nil
}

func (m WsProductHistory) ID() core.Interface           { return core.Interface{m["id"]} }
func (m WsProductHistory) ShopID() core.Interface       { return core.Interface{m["shop_id"]} }
func (m WsProductHistory) SEOConfig() core.Interface    { return core.Interface{m["seo_config"]} }
func (m WsProductHistory) Slug() core.Interface         { return core.Interface{m["slug"]} }
func (m WsProductHistory) Appear() core.Interface       { return core.Interface{m["appear"]} }
func (m WsProductHistory) ComparePrice() core.Interface { return core.Interface{m["compare_price"]} }
func (m WsProductHistory) DescHTML() core.Interface     { return core.Interface{m["desc_html"]} }
func (m WsProductHistory) CreatedAt() core.Interface    { return core.Interface{m["created_at"]} }
func (m WsProductHistory) UpdatedAt() core.Interface    { return core.Interface{m["updated_at"]} }

func (m *WsProductHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(WsProductHistory, 9)
	res["id"] = data[0]
	res["shop_id"] = data[1]
	res["seo_config"] = data[2]
	res["slug"] = data[3]
	res["appear"] = data[4]
	res["compare_price"] = data[5]
	res["desc_html"] = data[6]
	res["created_at"] = data[7]
	res["updated_at"] = data[8]
	*m = res
	return nil
}

func (ms *WsProductHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	res := make(WsProductHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(WsProductHistory)
		m["id"] = data[0]
		m["shop_id"] = data[1]
		m["seo_config"] = data[2]
		m["slug"] = data[3]
		m["appear"] = data[4]
		m["compare_price"] = data[5]
		m["desc_html"] = data[6]
		m["created_at"] = data[7]
		m["updated_at"] = data[8]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type WsWebsites []*WsWebsite

const __sqlWsWebsite_Table = "ws_website"
const __sqlWsWebsite_ListCols = "\"shop_id\",\"id\",\"main_color\",\"banner\",\"outstanding_product\",\"new_product\",\"seo_config\",\"facebook\",\"google_analytics_id\",\"domain_name\",\"over_stock\",\"shop_info\",\"description\",\"logo_image\",\"favicon_image\",\"created_at\",\"updated_at\""
const __sqlWsWebsite_ListColsOnConflict = "\"shop_id\" = EXCLUDED.\"shop_id\",\"id\" = EXCLUDED.\"id\",\"main_color\" = EXCLUDED.\"main_color\",\"banner\" = EXCLUDED.\"banner\",\"outstanding_product\" = EXCLUDED.\"outstanding_product\",\"new_product\" = EXCLUDED.\"new_product\",\"seo_config\" = EXCLUDED.\"seo_config\",\"facebook\" = EXCLUDED.\"facebook\",\"google_analytics_id\" = EXCLUDED.\"google_analytics_id\",\"domain_name\" = EXCLUDED.\"domain_name\",\"over_stock\" = EXCLUDED.\"over_stock\",\"shop_info\" = EXCLUDED.\"shop_info\",\"description\" = EXCLUDED.\"description\",\"logo_image\" = EXCLUDED.\"logo_image\",\"favicon_image\" = EXCLUDED.\"favicon_image\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlWsWebsite_Insert = "INSERT INTO \"ws_website\" (" + __sqlWsWebsite_ListCols + ") VALUES"
const __sqlWsWebsite_Select = "SELECT " + __sqlWsWebsite_ListCols + " FROM \"ws_website\""
const __sqlWsWebsite_Select_history = "SELECT " + __sqlWsWebsite_ListCols + " FROM history.\"ws_website\""
const __sqlWsWebsite_UpdateAll = "UPDATE \"ws_website\" SET (" + __sqlWsWebsite_ListCols + ")"
const __sqlWsWebsite_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT ws_website_pkey DO UPDATE SET"

func (m *WsWebsite) SQLTableName() string  { return "ws_website" }
func (m *WsWebsites) SQLTableName() string { return "ws_website" }
func (m *WsWebsite) SQLListCols() string   { return __sqlWsWebsite_ListCols }

func (m *WsWebsite) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlWsWebsite_ListCols + " FROM \"ws_website\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *WsWebsite) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "ws_website"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"shop_id": {
			ColumnName:       "shop_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"main_color": {
			ColumnName:       "main_color",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"banner": {
			ColumnName:       "banner",
			ColumnType:       "[]*Banner",
			ColumnDBType:     "[]*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"outstanding_product": {
			ColumnName:       "outstanding_product",
			ColumnType:       "*SpecialProduct",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"new_product": {
			ColumnName:       "new_product",
			ColumnType:       "*SpecialProduct",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"seo_config": {
			ColumnName:       "seo_config",
			ColumnType:       "*WsGeneralSEO",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"facebook": {
			ColumnName:       "facebook",
			ColumnType:       "*Facebook",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"google_analytics_id": {
			ColumnName:       "google_analytics_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"domain_name": {
			ColumnName:       "domain_name",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"over_stock": {
			ColumnName:       "over_stock",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"shop_info": {
			ColumnName:       "shop_info",
			ColumnType:       "*ShopInfo",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"description": {
			ColumnName:       "description",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"logo_image": {
			ColumnName:       "logo_image",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"favicon_image": {
			ColumnName:       "favicon_image",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "ws_website", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*WsWebsite)(nil))
}

func (m *WsWebsite) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ShopID,
		m.ID,
		core.String(m.MainColor),
		core.JSON{m.Banner},
		core.JSON{m.OutstandingProduct},
		core.JSON{m.NewProduct},
		core.JSON{m.SEOConfig},
		core.JSON{m.Facebook},
		core.String(m.GoogleAnalyticsID),
		core.String(m.DomainName),
		core.Int(m.OverStock),
		core.JSON{m.ShopInfo},
		core.String(m.Description),
		core.String(m.LogoImage),
		core.String(m.FaviconImage),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *WsWebsite) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ShopID,
		&m.ID,
		(*core.String)(&m.MainColor),
		core.JSON{&m.Banner},
		core.JSON{&m.OutstandingProduct},
		core.JSON{&m.NewProduct},
		core.JSON{&m.SEOConfig},
		core.JSON{&m.Facebook},
		(*core.String)(&m.GoogleAnalyticsID),
		(*core.String)(&m.DomainName),
		(*core.Int)(&m.OverStock),
		core.JSON{&m.ShopInfo},
		(*core.String)(&m.Description),
		(*core.String)(&m.LogoImage),
		(*core.String)(&m.FaviconImage),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *WsWebsite) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *WsWebsites) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(WsWebsites, 0, 128)
	for rows.Next() {
		m := new(WsWebsite)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *WsWebsite) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWsWebsite_Select)
	return nil
}

func (_ *WsWebsites) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWsWebsite_Select)
	return nil
}

func (m *WsWebsite) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlWsWebsite_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(17)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms WsWebsites) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlWsWebsite_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(17)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *WsWebsite) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlWsWebsite_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlWsWebsite_ListColsOnConflict)
	return nil
}

func (ms WsWebsites) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlWsWebsite_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlWsWebsite_ListColsOnConflict)
	return nil
}

func (m *WsWebsite) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("ws_website")
	w.WriteRawString(" SET ")
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.MainColor != "" {
		flag = true
		w.WriteName("main_color")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.MainColor)
	}
	if m.Banner != nil {
		flag = true
		w.WriteName("banner")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Banner})
	}
	if m.OutstandingProduct != nil {
		flag = true
		w.WriteName("outstanding_product")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.OutstandingProduct})
	}
	if m.NewProduct != nil {
		flag = true
		w.WriteName("new_product")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.NewProduct})
	}
	if m.SEOConfig != nil {
		flag = true
		w.WriteName("seo_config")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.SEOConfig})
	}
	if m.Facebook != nil {
		flag = true
		w.WriteName("facebook")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Facebook})
	}
	if m.GoogleAnalyticsID != "" {
		flag = true
		w.WriteName("google_analytics_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.GoogleAnalyticsID)
	}
	if m.DomainName != "" {
		flag = true
		w.WriteName("domain_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DomainName)
	}
	if m.OverStock != 0 {
		flag = true
		w.WriteName("over_stock")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OverStock)
	}
	if m.ShopInfo != nil {
		flag = true
		w.WriteName("shop_info")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ShopInfo})
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.LogoImage != "" {
		flag = true
		w.WriteName("logo_image")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.LogoImage)
	}
	if m.FaviconImage != "" {
		flag = true
		w.WriteName("favicon_image")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FaviconImage)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *WsWebsite) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlWsWebsite_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(17)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type WsWebsiteHistory map[string]interface{}
type WsWebsiteHistories []map[string]interface{}

func (m *WsWebsiteHistory) SQLTableName() string  { return "history.\"ws_website\"" }
func (m WsWebsiteHistories) SQLTableName() string { return "history.\"ws_website\"" }

func (m *WsWebsiteHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWsWebsite_Select_history)
	return nil
}

func (m WsWebsiteHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWsWebsite_Select_history)
	return nil
}

func (m WsWebsiteHistory) ShopID() core.Interface    { return core.Interface{m["shop_id"]} }
func (m WsWebsiteHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m WsWebsiteHistory) MainColor() core.Interface { return core.Interface{m["main_color"]} }
func (m WsWebsiteHistory) Banner() core.Interface    { return core.Interface{m["banner"]} }
func (m WsWebsiteHistory) OutstandingProduct() core.Interface {
	return core.Interface{m["outstanding_product"]}
}
func (m WsWebsiteHistory) NewProduct() core.Interface { return core.Interface{m["new_product"]} }
func (m WsWebsiteHistory) SEOConfig() core.Interface  { return core.Interface{m["seo_config"]} }
func (m WsWebsiteHistory) Facebook() core.Interface   { return core.Interface{m["facebook"]} }
func (m WsWebsiteHistory) GoogleAnalyticsID() core.Interface {
	return core.Interface{m["google_analytics_id"]}
}
func (m WsWebsiteHistory) DomainName() core.Interface   { return core.Interface{m["domain_name"]} }
func (m WsWebsiteHistory) OverStock() core.Interface    { return core.Interface{m["over_stock"]} }
func (m WsWebsiteHistory) ShopInfo() core.Interface     { return core.Interface{m["shop_info"]} }
func (m WsWebsiteHistory) Description() core.Interface  { return core.Interface{m["description"]} }
func (m WsWebsiteHistory) LogoImage() core.Interface    { return core.Interface{m["logo_image"]} }
func (m WsWebsiteHistory) FaviconImage() core.Interface { return core.Interface{m["favicon_image"]} }
func (m WsWebsiteHistory) CreatedAt() core.Interface    { return core.Interface{m["created_at"]} }
func (m WsWebsiteHistory) UpdatedAt() core.Interface    { return core.Interface{m["updated_at"]} }

func (m *WsWebsiteHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 17)
	args := make([]interface{}, 17)
	for i := 0; i < 17; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(WsWebsiteHistory, 17)
	res["shop_id"] = data[0]
	res["id"] = data[1]
	res["main_color"] = data[2]
	res["banner"] = data[3]
	res["outstanding_product"] = data[4]
	res["new_product"] = data[5]
	res["seo_config"] = data[6]
	res["facebook"] = data[7]
	res["google_analytics_id"] = data[8]
	res["domain_name"] = data[9]
	res["over_stock"] = data[10]
	res["shop_info"] = data[11]
	res["description"] = data[12]
	res["logo_image"] = data[13]
	res["favicon_image"] = data[14]
	res["created_at"] = data[15]
	res["updated_at"] = data[16]
	*m = res
	return nil
}

func (ms *WsWebsiteHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 17)
	args := make([]interface{}, 17)
	for i := 0; i < 17; i++ {
		args[i] = &data[i]
	}
	res := make(WsWebsiteHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(WsWebsiteHistory)
		m["shop_id"] = data[0]
		m["id"] = data[1]
		m["main_color"] = data[2]
		m["banner"] = data[3]
		m["outstanding_product"] = data[4]
		m["new_product"] = data[5]
		m["seo_config"] = data[6]
		m["facebook"] = data[7]
		m["google_analytics_id"] = data[8]
		m["domain_name"] = data[9]
		m["over_stock"] = data[10]
		m["shop_info"] = data[11]
		m["description"] = data[12]
		m["logo_image"] = data[13]
		m["favicon_image"] = data[14]
		m["created_at"] = data[15]
		m["updated_at"] = data[16]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
