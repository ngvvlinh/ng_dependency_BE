// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	webserver "etop.vn/api/webserver"
	addressconvert "etop.vn/backend/com/main/address/convert"
	webservermodel "etop.vn/backend/com/web/webserver/model"
	conversion "etop.vn/backend/pkg/common/conversion"
)

/*
Custom conversions:
    createOrUpdateWsCategory    // in use
    createOrUpdateWsProduct     // in use
    createWsPage                // in use
    createWsWebsite             // in use
    updateWsPage                // in use
    updateWsWebsite             // in use

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*webservermodel.Banner)(nil), (*webserver.Banner)(nil), func(arg, out interface{}) error {
		Convert_webservermodel_Banner_webserver_Banner(arg.(*webservermodel.Banner), out.(*webserver.Banner))
		return nil
	})
	s.Register(([]*webservermodel.Banner)(nil), (*[]*webserver.Banner)(nil), func(arg, out interface{}) error {
		out0 := Convert_webservermodel_Banners_webserver_Banners(arg.([]*webservermodel.Banner))
		*out.(*[]*webserver.Banner) = out0
		return nil
	})
	s.Register((*webserver.Banner)(nil), (*webservermodel.Banner)(nil), func(arg, out interface{}) error {
		Convert_webserver_Banner_webservermodel_Banner(arg.(*webserver.Banner), out.(*webservermodel.Banner))
		return nil
	})
	s.Register(([]*webserver.Banner)(nil), (*[]*webservermodel.Banner)(nil), func(arg, out interface{}) error {
		out0 := Convert_webserver_Banners_webservermodel_Banners(arg.([]*webserver.Banner))
		*out.(*[]*webservermodel.Banner) = out0
		return nil
	})
	s.Register((*webservermodel.BannerItem)(nil), (*webserver.BannerItem)(nil), func(arg, out interface{}) error {
		Convert_webservermodel_BannerItem_webserver_BannerItem(arg.(*webservermodel.BannerItem), out.(*webserver.BannerItem))
		return nil
	})
	s.Register(([]*webservermodel.BannerItem)(nil), (*[]*webserver.BannerItem)(nil), func(arg, out interface{}) error {
		out0 := Convert_webservermodel_BannerItems_webserver_BannerItems(arg.([]*webservermodel.BannerItem))
		*out.(*[]*webserver.BannerItem) = out0
		return nil
	})
	s.Register((*webserver.BannerItem)(nil), (*webservermodel.BannerItem)(nil), func(arg, out interface{}) error {
		Convert_webserver_BannerItem_webservermodel_BannerItem(arg.(*webserver.BannerItem), out.(*webservermodel.BannerItem))
		return nil
	})
	s.Register(([]*webserver.BannerItem)(nil), (*[]*webservermodel.BannerItem)(nil), func(arg, out interface{}) error {
		out0 := Convert_webserver_BannerItems_webservermodel_BannerItems(arg.([]*webserver.BannerItem))
		*out.(*[]*webservermodel.BannerItem) = out0
		return nil
	})
	s.Register((*webservermodel.ComparePrice)(nil), (*webserver.ComparePrice)(nil), func(arg, out interface{}) error {
		Convert_webservermodel_ComparePrice_webserver_ComparePrice(arg.(*webservermodel.ComparePrice), out.(*webserver.ComparePrice))
		return nil
	})
	s.Register(([]*webservermodel.ComparePrice)(nil), (*[]*webserver.ComparePrice)(nil), func(arg, out interface{}) error {
		out0 := Convert_webservermodel_ComparePrices_webserver_ComparePrices(arg.([]*webservermodel.ComparePrice))
		*out.(*[]*webserver.ComparePrice) = out0
		return nil
	})
	s.Register((*webserver.ComparePrice)(nil), (*webservermodel.ComparePrice)(nil), func(arg, out interface{}) error {
		Convert_webserver_ComparePrice_webservermodel_ComparePrice(arg.(*webserver.ComparePrice), out.(*webservermodel.ComparePrice))
		return nil
	})
	s.Register(([]*webserver.ComparePrice)(nil), (*[]*webservermodel.ComparePrice)(nil), func(arg, out interface{}) error {
		out0 := Convert_webserver_ComparePrices_webservermodel_ComparePrices(arg.([]*webserver.ComparePrice))
		*out.(*[]*webservermodel.ComparePrice) = out0
		return nil
	})
	s.Register((*webservermodel.Facebook)(nil), (*webserver.Facebook)(nil), func(arg, out interface{}) error {
		Convert_webservermodel_Facebook_webserver_Facebook(arg.(*webservermodel.Facebook), out.(*webserver.Facebook))
		return nil
	})
	s.Register(([]*webservermodel.Facebook)(nil), (*[]*webserver.Facebook)(nil), func(arg, out interface{}) error {
		out0 := Convert_webservermodel_Facebooks_webserver_Facebooks(arg.([]*webservermodel.Facebook))
		*out.(*[]*webserver.Facebook) = out0
		return nil
	})
	s.Register((*webserver.Facebook)(nil), (*webservermodel.Facebook)(nil), func(arg, out interface{}) error {
		Convert_webserver_Facebook_webservermodel_Facebook(arg.(*webserver.Facebook), out.(*webservermodel.Facebook))
		return nil
	})
	s.Register(([]*webserver.Facebook)(nil), (*[]*webservermodel.Facebook)(nil), func(arg, out interface{}) error {
		out0 := Convert_webserver_Facebooks_webservermodel_Facebooks(arg.([]*webserver.Facebook))
		*out.(*[]*webservermodel.Facebook) = out0
		return nil
	})
	s.Register((*webservermodel.ShopInfo)(nil), (*webserver.ShopInfo)(nil), func(arg, out interface{}) error {
		Convert_webservermodel_ShopInfo_webserver_ShopInfo(arg.(*webservermodel.ShopInfo), out.(*webserver.ShopInfo))
		return nil
	})
	s.Register(([]*webservermodel.ShopInfo)(nil), (*[]*webserver.ShopInfo)(nil), func(arg, out interface{}) error {
		out0 := Convert_webservermodel_ShopInfoes_webserver_ShopInfoes(arg.([]*webservermodel.ShopInfo))
		*out.(*[]*webserver.ShopInfo) = out0
		return nil
	})
	s.Register((*webserver.ShopInfo)(nil), (*webservermodel.ShopInfo)(nil), func(arg, out interface{}) error {
		Convert_webserver_ShopInfo_webservermodel_ShopInfo(arg.(*webserver.ShopInfo), out.(*webservermodel.ShopInfo))
		return nil
	})
	s.Register(([]*webserver.ShopInfo)(nil), (*[]*webservermodel.ShopInfo)(nil), func(arg, out interface{}) error {
		out0 := Convert_webserver_ShopInfoes_webservermodel_ShopInfoes(arg.([]*webserver.ShopInfo))
		*out.(*[]*webservermodel.ShopInfo) = out0
		return nil
	})
	s.Register((*webservermodel.SpecialProduct)(nil), (*webserver.SpecialProduct)(nil), func(arg, out interface{}) error {
		Convert_webservermodel_SpecialProduct_webserver_SpecialProduct(arg.(*webservermodel.SpecialProduct), out.(*webserver.SpecialProduct))
		return nil
	})
	s.Register(([]*webservermodel.SpecialProduct)(nil), (*[]*webserver.SpecialProduct)(nil), func(arg, out interface{}) error {
		out0 := Convert_webservermodel_SpecialProducts_webserver_SpecialProducts(arg.([]*webservermodel.SpecialProduct))
		*out.(*[]*webserver.SpecialProduct) = out0
		return nil
	})
	s.Register((*webserver.SpecialProduct)(nil), (*webservermodel.SpecialProduct)(nil), func(arg, out interface{}) error {
		Convert_webserver_SpecialProduct_webservermodel_SpecialProduct(arg.(*webserver.SpecialProduct), out.(*webservermodel.SpecialProduct))
		return nil
	})
	s.Register(([]*webserver.SpecialProduct)(nil), (*[]*webservermodel.SpecialProduct)(nil), func(arg, out interface{}) error {
		out0 := Convert_webserver_SpecialProducts_webservermodel_SpecialProducts(arg.([]*webserver.SpecialProduct))
		*out.(*[]*webservermodel.SpecialProduct) = out0
		return nil
	})
	s.Register((*webservermodel.WsCategory)(nil), (*webserver.WsCategory)(nil), func(arg, out interface{}) error {
		Convert_webservermodel_WsCategory_webserver_WsCategory(arg.(*webservermodel.WsCategory), out.(*webserver.WsCategory))
		return nil
	})
	s.Register(([]*webservermodel.WsCategory)(nil), (*[]*webserver.WsCategory)(nil), func(arg, out interface{}) error {
		out0 := Convert_webservermodel_WsCategories_webserver_WsCategories(arg.([]*webservermodel.WsCategory))
		*out.(*[]*webserver.WsCategory) = out0
		return nil
	})
	s.Register((*webserver.WsCategory)(nil), (*webservermodel.WsCategory)(nil), func(arg, out interface{}) error {
		Convert_webserver_WsCategory_webservermodel_WsCategory(arg.(*webserver.WsCategory), out.(*webservermodel.WsCategory))
		return nil
	})
	s.Register(([]*webserver.WsCategory)(nil), (*[]*webservermodel.WsCategory)(nil), func(arg, out interface{}) error {
		out0 := Convert_webserver_WsCategories_webservermodel_WsCategories(arg.([]*webserver.WsCategory))
		*out.(*[]*webservermodel.WsCategory) = out0
		return nil
	})
	s.Register((*webserver.CreateOrUpdateWsCategoryArgs)(nil), (*webserver.WsCategory)(nil), func(arg, out interface{}) error {
		Apply_webserver_CreateOrUpdateWsCategoryArgs_webserver_WsCategory(arg.(*webserver.CreateOrUpdateWsCategoryArgs), out.(*webserver.WsCategory))
		return nil
	})
	s.Register((*webservermodel.WsGeneralSEO)(nil), (*webserver.WsGeneralSEO)(nil), func(arg, out interface{}) error {
		Convert_webservermodel_WsGeneralSEO_webserver_WsGeneralSEO(arg.(*webservermodel.WsGeneralSEO), out.(*webserver.WsGeneralSEO))
		return nil
	})
	s.Register(([]*webservermodel.WsGeneralSEO)(nil), (*[]*webserver.WsGeneralSEO)(nil), func(arg, out interface{}) error {
		out0 := Convert_webservermodel_WsGeneralSEOs_webserver_WsGeneralSEOs(arg.([]*webservermodel.WsGeneralSEO))
		*out.(*[]*webserver.WsGeneralSEO) = out0
		return nil
	})
	s.Register((*webserver.WsGeneralSEO)(nil), (*webservermodel.WsGeneralSEO)(nil), func(arg, out interface{}) error {
		Convert_webserver_WsGeneralSEO_webservermodel_WsGeneralSEO(arg.(*webserver.WsGeneralSEO), out.(*webservermodel.WsGeneralSEO))
		return nil
	})
	s.Register(([]*webserver.WsGeneralSEO)(nil), (*[]*webservermodel.WsGeneralSEO)(nil), func(arg, out interface{}) error {
		out0 := Convert_webserver_WsGeneralSEOs_webservermodel_WsGeneralSEOs(arg.([]*webserver.WsGeneralSEO))
		*out.(*[]*webservermodel.WsGeneralSEO) = out0
		return nil
	})
	s.Register((*webservermodel.WsPage)(nil), (*webserver.WsPage)(nil), func(arg, out interface{}) error {
		Convert_webservermodel_WsPage_webserver_WsPage(arg.(*webservermodel.WsPage), out.(*webserver.WsPage))
		return nil
	})
	s.Register(([]*webservermodel.WsPage)(nil), (*[]*webserver.WsPage)(nil), func(arg, out interface{}) error {
		out0 := Convert_webservermodel_WsPages_webserver_WsPages(arg.([]*webservermodel.WsPage))
		*out.(*[]*webserver.WsPage) = out0
		return nil
	})
	s.Register((*webserver.WsPage)(nil), (*webservermodel.WsPage)(nil), func(arg, out interface{}) error {
		Convert_webserver_WsPage_webservermodel_WsPage(arg.(*webserver.WsPage), out.(*webservermodel.WsPage))
		return nil
	})
	s.Register(([]*webserver.WsPage)(nil), (*[]*webservermodel.WsPage)(nil), func(arg, out interface{}) error {
		out0 := Convert_webserver_WsPages_webservermodel_WsPages(arg.([]*webserver.WsPage))
		*out.(*[]*webservermodel.WsPage) = out0
		return nil
	})
	s.Register((*webserver.CreateWsPageArgs)(nil), (*webserver.WsPage)(nil), func(arg, out interface{}) error {
		Apply_webserver_CreateWsPageArgs_webserver_WsPage(arg.(*webserver.CreateWsPageArgs), out.(*webserver.WsPage))
		return nil
	})
	s.Register((*webserver.UpdateWsPageArgs)(nil), (*webserver.WsPage)(nil), func(arg, out interface{}) error {
		Apply_webserver_UpdateWsPageArgs_webserver_WsPage(arg.(*webserver.UpdateWsPageArgs), out.(*webserver.WsPage))
		return nil
	})
	s.Register((*webservermodel.WsProduct)(nil), (*webserver.WsProduct)(nil), func(arg, out interface{}) error {
		Convert_webservermodel_WsProduct_webserver_WsProduct(arg.(*webservermodel.WsProduct), out.(*webserver.WsProduct))
		return nil
	})
	s.Register(([]*webservermodel.WsProduct)(nil), (*[]*webserver.WsProduct)(nil), func(arg, out interface{}) error {
		out0 := Convert_webservermodel_WsProducts_webserver_WsProducts(arg.([]*webservermodel.WsProduct))
		*out.(*[]*webserver.WsProduct) = out0
		return nil
	})
	s.Register((*webserver.WsProduct)(nil), (*webservermodel.WsProduct)(nil), func(arg, out interface{}) error {
		Convert_webserver_WsProduct_webservermodel_WsProduct(arg.(*webserver.WsProduct), out.(*webservermodel.WsProduct))
		return nil
	})
	s.Register(([]*webserver.WsProduct)(nil), (*[]*webservermodel.WsProduct)(nil), func(arg, out interface{}) error {
		out0 := Convert_webserver_WsProducts_webservermodel_WsProducts(arg.([]*webserver.WsProduct))
		*out.(*[]*webservermodel.WsProduct) = out0
		return nil
	})
	s.Register((*webserver.CreateOrUpdateWsProductArgs)(nil), (*webserver.WsProduct)(nil), func(arg, out interface{}) error {
		Apply_webserver_CreateOrUpdateWsProductArgs_webserver_WsProduct(arg.(*webserver.CreateOrUpdateWsProductArgs), out.(*webserver.WsProduct))
		return nil
	})
	s.Register((*webservermodel.WsSEOConfig)(nil), (*webserver.WsSEOConfig)(nil), func(arg, out interface{}) error {
		Convert_webservermodel_WsSEOConfig_webserver_WsSEOConfig(arg.(*webservermodel.WsSEOConfig), out.(*webserver.WsSEOConfig))
		return nil
	})
	s.Register(([]*webservermodel.WsSEOConfig)(nil), (*[]*webserver.WsSEOConfig)(nil), func(arg, out interface{}) error {
		out0 := Convert_webservermodel_WsSEOConfigs_webserver_WsSEOConfigs(arg.([]*webservermodel.WsSEOConfig))
		*out.(*[]*webserver.WsSEOConfig) = out0
		return nil
	})
	s.Register((*webserver.WsSEOConfig)(nil), (*webservermodel.WsSEOConfig)(nil), func(arg, out interface{}) error {
		Convert_webserver_WsSEOConfig_webservermodel_WsSEOConfig(arg.(*webserver.WsSEOConfig), out.(*webservermodel.WsSEOConfig))
		return nil
	})
	s.Register(([]*webserver.WsSEOConfig)(nil), (*[]*webservermodel.WsSEOConfig)(nil), func(arg, out interface{}) error {
		out0 := Convert_webserver_WsSEOConfigs_webservermodel_WsSEOConfigs(arg.([]*webserver.WsSEOConfig))
		*out.(*[]*webservermodel.WsSEOConfig) = out0
		return nil
	})
	s.Register((*webservermodel.WsWebsite)(nil), (*webserver.WsWebsite)(nil), func(arg, out interface{}) error {
		Convert_webservermodel_WsWebsite_webserver_WsWebsite(arg.(*webservermodel.WsWebsite), out.(*webserver.WsWebsite))
		return nil
	})
	s.Register(([]*webservermodel.WsWebsite)(nil), (*[]*webserver.WsWebsite)(nil), func(arg, out interface{}) error {
		out0 := Convert_webservermodel_WsWebsites_webserver_WsWebsites(arg.([]*webservermodel.WsWebsite))
		*out.(*[]*webserver.WsWebsite) = out0
		return nil
	})
	s.Register((*webserver.WsWebsite)(nil), (*webservermodel.WsWebsite)(nil), func(arg, out interface{}) error {
		Convert_webserver_WsWebsite_webservermodel_WsWebsite(arg.(*webserver.WsWebsite), out.(*webservermodel.WsWebsite))
		return nil
	})
	s.Register(([]*webserver.WsWebsite)(nil), (*[]*webservermodel.WsWebsite)(nil), func(arg, out interface{}) error {
		out0 := Convert_webserver_WsWebsites_webservermodel_WsWebsites(arg.([]*webserver.WsWebsite))
		*out.(*[]*webservermodel.WsWebsite) = out0
		return nil
	})
	s.Register((*webserver.CreateWsWebsiteArgs)(nil), (*webserver.WsWebsite)(nil), func(arg, out interface{}) error {
		Apply_webserver_CreateWsWebsiteArgs_webserver_WsWebsite(arg.(*webserver.CreateWsWebsiteArgs), out.(*webserver.WsWebsite))
		return nil
	})
	s.Register((*webserver.UpdateWsWebsiteArgs)(nil), (*webserver.WsWebsite)(nil), func(arg, out interface{}) error {
		Apply_webserver_UpdateWsWebsiteArgs_webserver_WsWebsite(arg.(*webserver.UpdateWsWebsiteArgs), out.(*webserver.WsWebsite))
		return nil
	})
}

//-- convert etop.vn/api/webserver.Banner --//

func Convert_webservermodel_Banner_webserver_Banner(arg *webservermodel.Banner, out *webserver.Banner) *webserver.Banner {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webserver.Banner{}
	}
	convert_webservermodel_Banner_webserver_Banner(arg, out)
	return out
}

func convert_webservermodel_Banner_webserver_Banner(arg *webservermodel.Banner, out *webserver.Banner) {
	out.BannerItems = Convert_webservermodel_BannerItems_webserver_BannerItems(arg.BannerItems)
	out.Style = arg.Style // simple assign
}

func Convert_webservermodel_Banners_webserver_Banners(args []*webservermodel.Banner) (outs []*webserver.Banner) {
	if args == nil {
		return nil
	}
	tmps := make([]webserver.Banner, len(args))
	outs = make([]*webserver.Banner, len(args))
	for i := range tmps {
		outs[i] = Convert_webservermodel_Banner_webserver_Banner(args[i], &tmps[i])
	}
	return outs
}

func Convert_webserver_Banner_webservermodel_Banner(arg *webserver.Banner, out *webservermodel.Banner) *webservermodel.Banner {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webservermodel.Banner{}
	}
	convert_webserver_Banner_webservermodel_Banner(arg, out)
	return out
}

func convert_webserver_Banner_webservermodel_Banner(arg *webserver.Banner, out *webservermodel.Banner) {
	out.BannerItems = Convert_webserver_BannerItems_webservermodel_BannerItems(arg.BannerItems)
	out.Style = arg.Style // simple assign
}

func Convert_webserver_Banners_webservermodel_Banners(args []*webserver.Banner) (outs []*webservermodel.Banner) {
	if args == nil {
		return nil
	}
	tmps := make([]webservermodel.Banner, len(args))
	outs = make([]*webservermodel.Banner, len(args))
	for i := range tmps {
		outs[i] = Convert_webserver_Banner_webservermodel_Banner(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/api/webserver.BannerItem --//

func Convert_webservermodel_BannerItem_webserver_BannerItem(arg *webservermodel.BannerItem, out *webserver.BannerItem) *webserver.BannerItem {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webserver.BannerItem{}
	}
	convert_webservermodel_BannerItem_webserver_BannerItem(arg, out)
	return out
}

func convert_webservermodel_BannerItem_webserver_BannerItem(arg *webservermodel.BannerItem, out *webserver.BannerItem) {
	out.Alt = arg.Alt     // simple assign
	out.Url = arg.Url     // simple assign
	out.Image = arg.Image // simple assign
}

func Convert_webservermodel_BannerItems_webserver_BannerItems(args []*webservermodel.BannerItem) (outs []*webserver.BannerItem) {
	if args == nil {
		return nil
	}
	tmps := make([]webserver.BannerItem, len(args))
	outs = make([]*webserver.BannerItem, len(args))
	for i := range tmps {
		outs[i] = Convert_webservermodel_BannerItem_webserver_BannerItem(args[i], &tmps[i])
	}
	return outs
}

func Convert_webserver_BannerItem_webservermodel_BannerItem(arg *webserver.BannerItem, out *webservermodel.BannerItem) *webservermodel.BannerItem {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webservermodel.BannerItem{}
	}
	convert_webserver_BannerItem_webservermodel_BannerItem(arg, out)
	return out
}

func convert_webserver_BannerItem_webservermodel_BannerItem(arg *webserver.BannerItem, out *webservermodel.BannerItem) {
	out.Alt = arg.Alt     // simple assign
	out.Url = arg.Url     // simple assign
	out.Image = arg.Image // simple assign
}

func Convert_webserver_BannerItems_webservermodel_BannerItems(args []*webserver.BannerItem) (outs []*webservermodel.BannerItem) {
	if args == nil {
		return nil
	}
	tmps := make([]webservermodel.BannerItem, len(args))
	outs = make([]*webservermodel.BannerItem, len(args))
	for i := range tmps {
		outs[i] = Convert_webserver_BannerItem_webservermodel_BannerItem(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/api/webserver.ComparePrice --//

func Convert_webservermodel_ComparePrice_webserver_ComparePrice(arg *webservermodel.ComparePrice, out *webserver.ComparePrice) *webserver.ComparePrice {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webserver.ComparePrice{}
	}
	convert_webservermodel_ComparePrice_webserver_ComparePrice(arg, out)
	return out
}

func convert_webservermodel_ComparePrice_webserver_ComparePrice(arg *webservermodel.ComparePrice, out *webserver.ComparePrice) {
	out.VariantID = arg.VariantID       // simple assign
	out.ComparePrice = arg.ComparePrice // simple assign
}

func Convert_webservermodel_ComparePrices_webserver_ComparePrices(args []*webservermodel.ComparePrice) (outs []*webserver.ComparePrice) {
	if args == nil {
		return nil
	}
	tmps := make([]webserver.ComparePrice, len(args))
	outs = make([]*webserver.ComparePrice, len(args))
	for i := range tmps {
		outs[i] = Convert_webservermodel_ComparePrice_webserver_ComparePrice(args[i], &tmps[i])
	}
	return outs
}

func Convert_webserver_ComparePrice_webservermodel_ComparePrice(arg *webserver.ComparePrice, out *webservermodel.ComparePrice) *webservermodel.ComparePrice {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webservermodel.ComparePrice{}
	}
	convert_webserver_ComparePrice_webservermodel_ComparePrice(arg, out)
	return out
}

func convert_webserver_ComparePrice_webservermodel_ComparePrice(arg *webserver.ComparePrice, out *webservermodel.ComparePrice) {
	out.VariantID = arg.VariantID       // simple assign
	out.ComparePrice = arg.ComparePrice // simple assign
}

func Convert_webserver_ComparePrices_webservermodel_ComparePrices(args []*webserver.ComparePrice) (outs []*webservermodel.ComparePrice) {
	if args == nil {
		return nil
	}
	tmps := make([]webservermodel.ComparePrice, len(args))
	outs = make([]*webservermodel.ComparePrice, len(args))
	for i := range tmps {
		outs[i] = Convert_webserver_ComparePrice_webservermodel_ComparePrice(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/api/webserver.Facebook --//

func Convert_webservermodel_Facebook_webserver_Facebook(arg *webservermodel.Facebook, out *webserver.Facebook) *webserver.Facebook {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webserver.Facebook{}
	}
	convert_webservermodel_Facebook_webserver_Facebook(arg, out)
	return out
}

func convert_webservermodel_Facebook_webserver_Facebook(arg *webservermodel.Facebook, out *webserver.Facebook) {
	out.FacebookID = arg.FacebookID         // simple assign
	out.WelcomeMessage = arg.WelcomeMessage // simple assign
}

func Convert_webservermodel_Facebooks_webserver_Facebooks(args []*webservermodel.Facebook) (outs []*webserver.Facebook) {
	if args == nil {
		return nil
	}
	tmps := make([]webserver.Facebook, len(args))
	outs = make([]*webserver.Facebook, len(args))
	for i := range tmps {
		outs[i] = Convert_webservermodel_Facebook_webserver_Facebook(args[i], &tmps[i])
	}
	return outs
}

func Convert_webserver_Facebook_webservermodel_Facebook(arg *webserver.Facebook, out *webservermodel.Facebook) *webservermodel.Facebook {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webservermodel.Facebook{}
	}
	convert_webserver_Facebook_webservermodel_Facebook(arg, out)
	return out
}

func convert_webserver_Facebook_webservermodel_Facebook(arg *webserver.Facebook, out *webservermodel.Facebook) {
	out.FacebookID = arg.FacebookID         // simple assign
	out.WelcomeMessage = arg.WelcomeMessage // simple assign
}

func Convert_webserver_Facebooks_webservermodel_Facebooks(args []*webserver.Facebook) (outs []*webservermodel.Facebook) {
	if args == nil {
		return nil
	}
	tmps := make([]webservermodel.Facebook, len(args))
	outs = make([]*webservermodel.Facebook, len(args))
	for i := range tmps {
		outs[i] = Convert_webserver_Facebook_webservermodel_Facebook(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/api/webserver.ShopInfo --//

func Convert_webservermodel_ShopInfo_webserver_ShopInfo(arg *webservermodel.ShopInfo, out *webserver.ShopInfo) *webserver.ShopInfo {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webserver.ShopInfo{}
	}
	convert_webservermodel_ShopInfo_webserver_ShopInfo(arg, out)
	return out
}

func convert_webservermodel_ShopInfo_webserver_ShopInfo(arg *webservermodel.ShopInfo, out *webserver.ShopInfo) {
	out.Name = arg.Name   // simple assign
	out.Phone = arg.Phone // simple assign
	out.Address = addressconvert.Convert_addressmodel_Address_address_Address(arg.Address, nil)
	out.FacebookFanpage = arg.FacebookFanpage // simple assign
}

func Convert_webservermodel_ShopInfoes_webserver_ShopInfoes(args []*webservermodel.ShopInfo) (outs []*webserver.ShopInfo) {
	if args == nil {
		return nil
	}
	tmps := make([]webserver.ShopInfo, len(args))
	outs = make([]*webserver.ShopInfo, len(args))
	for i := range tmps {
		outs[i] = Convert_webservermodel_ShopInfo_webserver_ShopInfo(args[i], &tmps[i])
	}
	return outs
}

func Convert_webserver_ShopInfo_webservermodel_ShopInfo(arg *webserver.ShopInfo, out *webservermodel.ShopInfo) *webservermodel.ShopInfo {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webservermodel.ShopInfo{}
	}
	convert_webserver_ShopInfo_webservermodel_ShopInfo(arg, out)
	return out
}

func convert_webserver_ShopInfo_webservermodel_ShopInfo(arg *webserver.ShopInfo, out *webservermodel.ShopInfo) {
	out.Name = arg.Name   // simple assign
	out.Phone = arg.Phone // simple assign
	out.Address = addressconvert.Convert_address_Address_addressmodel_Address(arg.Address, nil)
	out.FacebookFanpage = arg.FacebookFanpage // simple assign
}

func Convert_webserver_ShopInfoes_webservermodel_ShopInfoes(args []*webserver.ShopInfo) (outs []*webservermodel.ShopInfo) {
	if args == nil {
		return nil
	}
	tmps := make([]webservermodel.ShopInfo, len(args))
	outs = make([]*webservermodel.ShopInfo, len(args))
	for i := range tmps {
		outs[i] = Convert_webserver_ShopInfo_webservermodel_ShopInfo(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/api/webserver.SpecialProduct --//

func Convert_webservermodel_SpecialProduct_webserver_SpecialProduct(arg *webservermodel.SpecialProduct, out *webserver.SpecialProduct) *webserver.SpecialProduct {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webserver.SpecialProduct{}
	}
	convert_webservermodel_SpecialProduct_webserver_SpecialProduct(arg, out)
	return out
}

func convert_webservermodel_SpecialProduct_webserver_SpecialProduct(arg *webservermodel.SpecialProduct, out *webserver.SpecialProduct) {
	out.ProductIDs = arg.ProductIDs // simple assign
	out.Style = arg.Style           // simple assign
}

func Convert_webservermodel_SpecialProducts_webserver_SpecialProducts(args []*webservermodel.SpecialProduct) (outs []*webserver.SpecialProduct) {
	if args == nil {
		return nil
	}
	tmps := make([]webserver.SpecialProduct, len(args))
	outs = make([]*webserver.SpecialProduct, len(args))
	for i := range tmps {
		outs[i] = Convert_webservermodel_SpecialProduct_webserver_SpecialProduct(args[i], &tmps[i])
	}
	return outs
}

func Convert_webserver_SpecialProduct_webservermodel_SpecialProduct(arg *webserver.SpecialProduct, out *webservermodel.SpecialProduct) *webservermodel.SpecialProduct {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webservermodel.SpecialProduct{}
	}
	convert_webserver_SpecialProduct_webservermodel_SpecialProduct(arg, out)
	return out
}

func convert_webserver_SpecialProduct_webservermodel_SpecialProduct(arg *webserver.SpecialProduct, out *webservermodel.SpecialProduct) {
	out.ProductIDs = arg.ProductIDs // simple assign
	out.Style = arg.Style           // simple assign
}

func Convert_webserver_SpecialProducts_webservermodel_SpecialProducts(args []*webserver.SpecialProduct) (outs []*webservermodel.SpecialProduct) {
	if args == nil {
		return nil
	}
	tmps := make([]webservermodel.SpecialProduct, len(args))
	outs = make([]*webservermodel.SpecialProduct, len(args))
	for i := range tmps {
		outs[i] = Convert_webserver_SpecialProduct_webservermodel_SpecialProduct(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/api/webserver.WsCategory --//

func Convert_webservermodel_WsCategory_webserver_WsCategory(arg *webservermodel.WsCategory, out *webserver.WsCategory) *webserver.WsCategory {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webserver.WsCategory{}
	}
	convert_webservermodel_WsCategory_webserver_WsCategory(arg, out)
	return out
}

func convert_webservermodel_WsCategory_webserver_WsCategory(arg *webservermodel.WsCategory, out *webserver.WsCategory) {
	out.ID = arg.ID         // simple assign
	out.ShopID = arg.ShopID // simple assign
	out.Slug = arg.Slug     // simple assign
	out.SEOConfig = Convert_webservermodel_WsSEOConfig_webserver_WsSEOConfig(arg.SEOConfig, nil)
	out.Image = arg.Image         // simple assign
	out.Appear = arg.Appear       // simple assign
	out.Category = nil            // zero value
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
}

func Convert_webservermodel_WsCategories_webserver_WsCategories(args []*webservermodel.WsCategory) (outs []*webserver.WsCategory) {
	if args == nil {
		return nil
	}
	tmps := make([]webserver.WsCategory, len(args))
	outs = make([]*webserver.WsCategory, len(args))
	for i := range tmps {
		outs[i] = Convert_webservermodel_WsCategory_webserver_WsCategory(args[i], &tmps[i])
	}
	return outs
}

func Convert_webserver_WsCategory_webservermodel_WsCategory(arg *webserver.WsCategory, out *webservermodel.WsCategory) *webservermodel.WsCategory {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webservermodel.WsCategory{}
	}
	convert_webserver_WsCategory_webservermodel_WsCategory(arg, out)
	return out
}

func convert_webserver_WsCategory_webservermodel_WsCategory(arg *webserver.WsCategory, out *webservermodel.WsCategory) {
	out.ID = arg.ID         // simple assign
	out.ShopID = arg.ShopID // simple assign
	out.Slug = arg.Slug     // simple assign
	out.SEOConfig = Convert_webserver_WsSEOConfig_webservermodel_WsSEOConfig(arg.SEOConfig, nil)
	out.Image = arg.Image         // simple assign
	out.Appear = arg.Appear       // simple assign
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
}

func Convert_webserver_WsCategories_webservermodel_WsCategories(args []*webserver.WsCategory) (outs []*webservermodel.WsCategory) {
	if args == nil {
		return nil
	}
	tmps := make([]webservermodel.WsCategory, len(args))
	outs = make([]*webservermodel.WsCategory, len(args))
	for i := range tmps {
		outs[i] = Convert_webserver_WsCategory_webservermodel_WsCategory(args[i], &tmps[i])
	}
	return outs
}

func Apply_webserver_CreateOrUpdateWsCategoryArgs_webserver_WsCategory(arg *webserver.CreateOrUpdateWsCategoryArgs, out *webserver.WsCategory) *webserver.WsCategory {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webserver.WsCategory{}
	}
	createOrUpdateWsCategory(arg, out)
	return out
}

func apply_webserver_CreateOrUpdateWsCategoryArgs_webserver_WsCategory(arg *webserver.CreateOrUpdateWsCategoryArgs, out *webserver.WsCategory) {
	out.ID = arg.ID                           // simple assign
	out.ShopID = arg.ShopID                   // simple assign
	out.Slug = arg.Slug.Apply(out.Slug)       // apply change
	out.SEOConfig = arg.SEOConfig             // simple assign
	out.Image = arg.Image.Apply(out.Image)    // apply change
	out.Appear = arg.Appear.Apply(out.Appear) // apply change
	out.Category = out.Category               // no change
	out.CreatedAt = out.CreatedAt             // no change
	out.UpdatedAt = out.UpdatedAt             // no change
}

//-- convert etop.vn/api/webserver.WsGeneralSEO --//

func Convert_webservermodel_WsGeneralSEO_webserver_WsGeneralSEO(arg *webservermodel.WsGeneralSEO, out *webserver.WsGeneralSEO) *webserver.WsGeneralSEO {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webserver.WsGeneralSEO{}
	}
	convert_webservermodel_WsGeneralSEO_webserver_WsGeneralSEO(arg, out)
	return out
}

func convert_webservermodel_WsGeneralSEO_webserver_WsGeneralSEO(arg *webservermodel.WsGeneralSEO, out *webserver.WsGeneralSEO) {
	out.Title = arg.Title                             // simple assign
	out.SiteContent = arg.SiteContent                 // simple assign
	out.SiteMetaKeyword = arg.SiteMetaKeyword         // simple assign
	out.SiteMetaDescription = arg.SiteMetaDescription // simple assign
}

func Convert_webservermodel_WsGeneralSEOs_webserver_WsGeneralSEOs(args []*webservermodel.WsGeneralSEO) (outs []*webserver.WsGeneralSEO) {
	if args == nil {
		return nil
	}
	tmps := make([]webserver.WsGeneralSEO, len(args))
	outs = make([]*webserver.WsGeneralSEO, len(args))
	for i := range tmps {
		outs[i] = Convert_webservermodel_WsGeneralSEO_webserver_WsGeneralSEO(args[i], &tmps[i])
	}
	return outs
}

func Convert_webserver_WsGeneralSEO_webservermodel_WsGeneralSEO(arg *webserver.WsGeneralSEO, out *webservermodel.WsGeneralSEO) *webservermodel.WsGeneralSEO {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webservermodel.WsGeneralSEO{}
	}
	convert_webserver_WsGeneralSEO_webservermodel_WsGeneralSEO(arg, out)
	return out
}

func convert_webserver_WsGeneralSEO_webservermodel_WsGeneralSEO(arg *webserver.WsGeneralSEO, out *webservermodel.WsGeneralSEO) {
	out.Title = arg.Title                             // simple assign
	out.SiteContent = arg.SiteContent                 // simple assign
	out.SiteMetaKeyword = arg.SiteMetaKeyword         // simple assign
	out.SiteMetaDescription = arg.SiteMetaDescription // simple assign
}

func Convert_webserver_WsGeneralSEOs_webservermodel_WsGeneralSEOs(args []*webserver.WsGeneralSEO) (outs []*webservermodel.WsGeneralSEO) {
	if args == nil {
		return nil
	}
	tmps := make([]webservermodel.WsGeneralSEO, len(args))
	outs = make([]*webservermodel.WsGeneralSEO, len(args))
	for i := range tmps {
		outs[i] = Convert_webserver_WsGeneralSEO_webservermodel_WsGeneralSEO(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/api/webserver.WsPage --//

func Convert_webservermodel_WsPage_webserver_WsPage(arg *webservermodel.WsPage, out *webserver.WsPage) *webserver.WsPage {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webserver.WsPage{}
	}
	convert_webservermodel_WsPage_webserver_WsPage(arg, out)
	return out
}

func convert_webservermodel_WsPage_webserver_WsPage(arg *webservermodel.WsPage, out *webserver.WsPage) {
	out.ShopID = arg.ShopID // simple assign
	out.ID = arg.ID         // simple assign
	out.SEOConfig = Convert_webservermodel_WsSEOConfig_webserver_WsSEOConfig(arg.SEOConfig, nil)
	out.Name = arg.Name           // simple assign
	out.Slug = arg.Slug           // simple assign
	out.DescHTML = arg.DescHTML   // simple assign
	out.Image = arg.Image         // simple assign
	out.Appear = arg.Appear       // simple assign
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
	out.DeletedAt = arg.DeletedAt // simple assign
}

func Convert_webservermodel_WsPages_webserver_WsPages(args []*webservermodel.WsPage) (outs []*webserver.WsPage) {
	if args == nil {
		return nil
	}
	tmps := make([]webserver.WsPage, len(args))
	outs = make([]*webserver.WsPage, len(args))
	for i := range tmps {
		outs[i] = Convert_webservermodel_WsPage_webserver_WsPage(args[i], &tmps[i])
	}
	return outs
}

func Convert_webserver_WsPage_webservermodel_WsPage(arg *webserver.WsPage, out *webservermodel.WsPage) *webservermodel.WsPage {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webservermodel.WsPage{}
	}
	convert_webserver_WsPage_webservermodel_WsPage(arg, out)
	return out
}

func convert_webserver_WsPage_webservermodel_WsPage(arg *webserver.WsPage, out *webservermodel.WsPage) {
	out.ShopID = arg.ShopID // simple assign
	out.ID = arg.ID         // simple assign
	out.SEOConfig = Convert_webserver_WsSEOConfig_webservermodel_WsSEOConfig(arg.SEOConfig, nil)
	out.Name = arg.Name           // simple assign
	out.Slug = arg.Slug           // simple assign
	out.DescHTML = arg.DescHTML   // simple assign
	out.Image = arg.Image         // simple assign
	out.Appear = arg.Appear       // simple assign
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
	out.DeletedAt = arg.DeletedAt // simple assign
}

func Convert_webserver_WsPages_webservermodel_WsPages(args []*webserver.WsPage) (outs []*webservermodel.WsPage) {
	if args == nil {
		return nil
	}
	tmps := make([]webservermodel.WsPage, len(args))
	outs = make([]*webservermodel.WsPage, len(args))
	for i := range tmps {
		outs[i] = Convert_webserver_WsPage_webservermodel_WsPage(args[i], &tmps[i])
	}
	return outs
}

func Apply_webserver_CreateWsPageArgs_webserver_WsPage(arg *webserver.CreateWsPageArgs, out *webserver.WsPage) *webserver.WsPage {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webserver.WsPage{}
	}
	createWsPage(arg, out)
	return out
}

func apply_webserver_CreateWsPageArgs_webserver_WsPage(arg *webserver.CreateWsPageArgs, out *webserver.WsPage) {
	out.ShopID = arg.ShopID       // simple assign
	out.ID = 0                    // zero value
	out.SEOConfig = arg.SEOConfig // simple assign
	out.Name = arg.Name           // simple assign
	out.Slug = arg.Slug           // simple assign
	out.DescHTML = arg.DescHTML   // simple assign
	out.Image = arg.Image         // simple assign
	out.Appear = arg.Appear       // simple assign
	out.CreatedAt = time.Time{}   // zero value
	out.UpdatedAt = time.Time{}   // zero value
	out.DeletedAt = time.Time{}   // zero value
}

func Apply_webserver_UpdateWsPageArgs_webserver_WsPage(arg *webserver.UpdateWsPageArgs, out *webserver.WsPage) *webserver.WsPage {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webserver.WsPage{}
	}
	updateWsPage(arg, out)
	return out
}

func apply_webserver_UpdateWsPageArgs_webserver_WsPage(arg *webserver.UpdateWsPageArgs, out *webserver.WsPage) {
	out.ShopID = arg.ShopID                         // simple assign
	out.ID = arg.ID                                 // simple assign
	out.SEOConfig = arg.SEOConfig                   // simple assign
	out.Name = arg.Name.Apply(out.Name)             // apply change
	out.Slug = arg.Slug.Apply(out.Slug)             // apply change
	out.DescHTML = arg.DescHTML.Apply(out.DescHTML) // apply change
	out.Image = arg.Image.Apply(out.Image)          // apply change
	out.Appear = arg.Appear.Apply(out.Appear)       // apply change
	out.CreatedAt = out.CreatedAt                   // no change
	out.UpdatedAt = out.UpdatedAt                   // no change
	out.DeletedAt = out.DeletedAt                   // no change
}

//-- convert etop.vn/api/webserver.WsProduct --//

func Convert_webservermodel_WsProduct_webserver_WsProduct(arg *webservermodel.WsProduct, out *webserver.WsProduct) *webserver.WsProduct {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webserver.WsProduct{}
	}
	convert_webservermodel_WsProduct_webserver_WsProduct(arg, out)
	return out
}

func convert_webservermodel_WsProduct_webserver_WsProduct(arg *webservermodel.WsProduct, out *webserver.WsProduct) {
	out.ID = arg.ID         // simple assign
	out.ShopID = arg.ShopID // simple assign
	out.SEOConfig = Convert_webservermodel_WsSEOConfig_webserver_WsSEOConfig(arg.SEOConfig, nil)
	out.Slug = arg.Slug     // simple assign
	out.Appear = arg.Appear // simple assign
	out.ComparePrice = Convert_webservermodel_ComparePrices_webserver_ComparePrices(arg.ComparePrice)
	out.DescHTML = arg.DescHTML   // simple assign
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
	out.Product = nil             // zero value
}

func Convert_webservermodel_WsProducts_webserver_WsProducts(args []*webservermodel.WsProduct) (outs []*webserver.WsProduct) {
	if args == nil {
		return nil
	}
	tmps := make([]webserver.WsProduct, len(args))
	outs = make([]*webserver.WsProduct, len(args))
	for i := range tmps {
		outs[i] = Convert_webservermodel_WsProduct_webserver_WsProduct(args[i], &tmps[i])
	}
	return outs
}

func Convert_webserver_WsProduct_webservermodel_WsProduct(arg *webserver.WsProduct, out *webservermodel.WsProduct) *webservermodel.WsProduct {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webservermodel.WsProduct{}
	}
	convert_webserver_WsProduct_webservermodel_WsProduct(arg, out)
	return out
}

func convert_webserver_WsProduct_webservermodel_WsProduct(arg *webserver.WsProduct, out *webservermodel.WsProduct) {
	out.ID = arg.ID         // simple assign
	out.ShopID = arg.ShopID // simple assign
	out.SEOConfig = Convert_webserver_WsSEOConfig_webservermodel_WsSEOConfig(arg.SEOConfig, nil)
	out.Slug = arg.Slug     // simple assign
	out.Appear = arg.Appear // simple assign
	out.ComparePrice = Convert_webserver_ComparePrices_webservermodel_ComparePrices(arg.ComparePrice)
	out.DescHTML = arg.DescHTML   // simple assign
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
}

func Convert_webserver_WsProducts_webservermodel_WsProducts(args []*webserver.WsProduct) (outs []*webservermodel.WsProduct) {
	if args == nil {
		return nil
	}
	tmps := make([]webservermodel.WsProduct, len(args))
	outs = make([]*webservermodel.WsProduct, len(args))
	for i := range tmps {
		outs[i] = Convert_webserver_WsProduct_webservermodel_WsProduct(args[i], &tmps[i])
	}
	return outs
}

func Apply_webserver_CreateOrUpdateWsProductArgs_webserver_WsProduct(arg *webserver.CreateOrUpdateWsProductArgs, out *webserver.WsProduct) *webserver.WsProduct {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webserver.WsProduct{}
	}
	createOrUpdateWsProduct(arg, out)
	return out
}

func apply_webserver_CreateOrUpdateWsProductArgs_webserver_WsProduct(arg *webserver.CreateOrUpdateWsProductArgs, out *webserver.WsProduct) {
	out.ID = arg.ID                                 // simple assign
	out.ShopID = arg.ShopID                         // simple assign
	out.SEOConfig = arg.SEOConfig                   // simple assign
	out.Slug = arg.Slug.Apply(out.Slug)             // apply change
	out.Appear = arg.Appear.Apply(out.Appear)       // apply change
	out.ComparePrice = arg.ComparePrice             // simple assign
	out.DescHTML = arg.DescHTML.Apply(out.DescHTML) // apply change
	out.CreatedAt = out.CreatedAt                   // no change
	out.UpdatedAt = out.UpdatedAt                   // no change
	out.Product = out.Product                       // no change
}

//-- convert etop.vn/api/webserver.WsSEOConfig --//

func Convert_webservermodel_WsSEOConfig_webserver_WsSEOConfig(arg *webservermodel.WsSEOConfig, out *webserver.WsSEOConfig) *webserver.WsSEOConfig {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webserver.WsSEOConfig{}
	}
	convert_webservermodel_WsSEOConfig_webserver_WsSEOConfig(arg, out)
	return out
}

func convert_webservermodel_WsSEOConfig_webserver_WsSEOConfig(arg *webservermodel.WsSEOConfig, out *webserver.WsSEOConfig) {
	out.Content = arg.Content         // simple assign
	out.Keyword = arg.Keyword         // simple assign
	out.Description = arg.Description // simple assign
}

func Convert_webservermodel_WsSEOConfigs_webserver_WsSEOConfigs(args []*webservermodel.WsSEOConfig) (outs []*webserver.WsSEOConfig) {
	if args == nil {
		return nil
	}
	tmps := make([]webserver.WsSEOConfig, len(args))
	outs = make([]*webserver.WsSEOConfig, len(args))
	for i := range tmps {
		outs[i] = Convert_webservermodel_WsSEOConfig_webserver_WsSEOConfig(args[i], &tmps[i])
	}
	return outs
}

func Convert_webserver_WsSEOConfig_webservermodel_WsSEOConfig(arg *webserver.WsSEOConfig, out *webservermodel.WsSEOConfig) *webservermodel.WsSEOConfig {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webservermodel.WsSEOConfig{}
	}
	convert_webserver_WsSEOConfig_webservermodel_WsSEOConfig(arg, out)
	return out
}

func convert_webserver_WsSEOConfig_webservermodel_WsSEOConfig(arg *webserver.WsSEOConfig, out *webservermodel.WsSEOConfig) {
	out.Content = arg.Content         // simple assign
	out.Keyword = arg.Keyword         // simple assign
	out.Description = arg.Description // simple assign
}

func Convert_webserver_WsSEOConfigs_webservermodel_WsSEOConfigs(args []*webserver.WsSEOConfig) (outs []*webservermodel.WsSEOConfig) {
	if args == nil {
		return nil
	}
	tmps := make([]webservermodel.WsSEOConfig, len(args))
	outs = make([]*webservermodel.WsSEOConfig, len(args))
	for i := range tmps {
		outs[i] = Convert_webserver_WsSEOConfig_webservermodel_WsSEOConfig(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/api/webserver.WsWebsite --//

func Convert_webservermodel_WsWebsite_webserver_WsWebsite(arg *webservermodel.WsWebsite, out *webserver.WsWebsite) *webserver.WsWebsite {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webserver.WsWebsite{}
	}
	convert_webservermodel_WsWebsite_webserver_WsWebsite(arg, out)
	return out
}

func convert_webservermodel_WsWebsite_webserver_WsWebsite(arg *webservermodel.WsWebsite, out *webserver.WsWebsite) {
	out.ShopID = arg.ShopID       // simple assign
	out.ID = arg.ID               // simple assign
	out.MainColor = arg.MainColor // simple assign
	out.Banner = nil              // types do not match
	out.OutstandingProduct = Convert_webservermodel_SpecialProduct_webserver_SpecialProduct(arg.OutstandingProduct, nil)
	out.NewProduct = Convert_webservermodel_SpecialProduct_webserver_SpecialProduct(arg.NewProduct, nil)
	out.SEOConfig = Convert_webservermodel_WsGeneralSEO_webserver_WsGeneralSEO(arg.SEOConfig, nil)
	out.Facebook = Convert_webservermodel_Facebook_webserver_Facebook(arg.Facebook, nil)
	out.GoogleAnalyticsID = arg.GoogleAnalyticsID // simple assign
	out.DomainName = arg.DomainName               // simple assign
	out.OverStock = false                         // types do not match
	out.ShopInfo = Convert_webservermodel_ShopInfo_webserver_ShopInfo(arg.ShopInfo, nil)
	out.Description = arg.Description   // simple assign
	out.LogoImage = arg.LogoImage       // simple assign
	out.FaviconImage = arg.FaviconImage // simple assign
	out.CreatedAt = arg.CreatedAt       // simple assign
	out.UpdatedAt = arg.UpdatedAt       // simple assign
}

func Convert_webservermodel_WsWebsites_webserver_WsWebsites(args []*webservermodel.WsWebsite) (outs []*webserver.WsWebsite) {
	if args == nil {
		return nil
	}
	tmps := make([]webserver.WsWebsite, len(args))
	outs = make([]*webserver.WsWebsite, len(args))
	for i := range tmps {
		outs[i] = Convert_webservermodel_WsWebsite_webserver_WsWebsite(args[i], &tmps[i])
	}
	return outs
}

func Convert_webserver_WsWebsite_webservermodel_WsWebsite(arg *webserver.WsWebsite, out *webservermodel.WsWebsite) *webservermodel.WsWebsite {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webservermodel.WsWebsite{}
	}
	convert_webserver_WsWebsite_webservermodel_WsWebsite(arg, out)
	return out
}

func convert_webserver_WsWebsite_webservermodel_WsWebsite(arg *webserver.WsWebsite, out *webservermodel.WsWebsite) {
	out.ShopID = arg.ShopID       // simple assign
	out.ID = arg.ID               // simple assign
	out.MainColor = arg.MainColor // simple assign
	out.Banner = nil              // types do not match
	out.OutstandingProduct = Convert_webserver_SpecialProduct_webservermodel_SpecialProduct(arg.OutstandingProduct, nil)
	out.NewProduct = Convert_webserver_SpecialProduct_webservermodel_SpecialProduct(arg.NewProduct, nil)
	out.SEOConfig = Convert_webserver_WsGeneralSEO_webservermodel_WsGeneralSEO(arg.SEOConfig, nil)
	out.Facebook = Convert_webserver_Facebook_webservermodel_Facebook(arg.Facebook, nil)
	out.GoogleAnalyticsID = arg.GoogleAnalyticsID // simple assign
	out.DomainName = arg.DomainName               // simple assign
	out.OverStock = 0                             // types do not match
	out.ShopInfo = Convert_webserver_ShopInfo_webservermodel_ShopInfo(arg.ShopInfo, nil)
	out.Description = arg.Description   // simple assign
	out.LogoImage = arg.LogoImage       // simple assign
	out.FaviconImage = arg.FaviconImage // simple assign
	out.CreatedAt = arg.CreatedAt       // simple assign
	out.UpdatedAt = arg.UpdatedAt       // simple assign
}

func Convert_webserver_WsWebsites_webservermodel_WsWebsites(args []*webserver.WsWebsite) (outs []*webservermodel.WsWebsite) {
	if args == nil {
		return nil
	}
	tmps := make([]webservermodel.WsWebsite, len(args))
	outs = make([]*webservermodel.WsWebsite, len(args))
	for i := range tmps {
		outs[i] = Convert_webserver_WsWebsite_webservermodel_WsWebsite(args[i], &tmps[i])
	}
	return outs
}

func Apply_webserver_CreateWsWebsiteArgs_webserver_WsWebsite(arg *webserver.CreateWsWebsiteArgs, out *webserver.WsWebsite) *webserver.WsWebsite {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webserver.WsWebsite{}
	}
	createWsWebsite(arg, out)
	return out
}

func apply_webserver_CreateWsWebsiteArgs_webserver_WsWebsite(arg *webserver.CreateWsWebsiteArgs, out *webserver.WsWebsite) {
	out.ShopID = arg.ShopID                         // simple assign
	out.ID = 0                                      // zero value
	out.MainColor = arg.MainColor                   // simple assign
	out.Banner = arg.Banner                         // simple assign
	out.OutstandingProduct = arg.OutstandingProduct // simple assign
	out.NewProduct = arg.NewProduct                 // simple assign
	out.SEOConfig = arg.SEOConfig                   // simple assign
	out.Facebook = arg.Facebook                     // simple assign
	out.GoogleAnalyticsID = arg.GoogleAnalyticsID   // simple assign
	out.DomainName = arg.DomainName                 // simple assign
	out.OverStock = arg.OverStock                   // simple assign
	out.ShopInfo = arg.ShopInfo                     // simple assign
	out.Description = arg.Description               // simple assign
	out.LogoImage = arg.LogoImage                   // simple assign
	out.FaviconImage = arg.FaviconImage             // simple assign
	out.CreatedAt = time.Time{}                     // zero value
	out.UpdatedAt = time.Time{}                     // zero value
}

func Apply_webserver_UpdateWsWebsiteArgs_webserver_WsWebsite(arg *webserver.UpdateWsWebsiteArgs, out *webserver.WsWebsite) *webserver.WsWebsite {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &webserver.WsWebsite{}
	}
	updateWsWebsite(arg, out)
	return out
}

func apply_webserver_UpdateWsWebsiteArgs_webserver_WsWebsite(arg *webserver.UpdateWsWebsiteArgs, out *webserver.WsWebsite) {
	out.ShopID = arg.ShopID                                                    // simple assign
	out.ID = arg.ID                                                            // simple assign
	out.MainColor = arg.MainColor.Apply(out.MainColor)                         // apply change
	out.Banner = arg.Banner                                                    // simple assign
	out.OutstandingProduct = arg.OutstandingProduct                            // simple assign
	out.NewProduct = arg.NewProduct                                            // simple assign
	out.SEOConfig = arg.SEOConfig                                              // simple assign
	out.Facebook = arg.Facebook                                                // simple assign
	out.GoogleAnalyticsID = arg.GoogleAnalyticsID.Apply(out.GoogleAnalyticsID) // apply change
	out.DomainName = arg.DomainName.Apply(out.DomainName)                      // apply change
	out.OverStock = arg.OverStock.Apply(out.OverStock)                         // apply change
	out.ShopInfo = arg.ShopInfo                                                // simple assign
	out.Description = arg.Description.Apply(out.Description)                   // apply change
	out.LogoImage = arg.LogoImage.Apply(out.LogoImage)                         // apply change
	out.FaviconImage = arg.FaviconImage.Apply(out.FaviconImage)                // apply change
	out.CreatedAt = out.CreatedAt                                              // no change
	out.UpdatedAt = out.UpdatedAt                                              // no change
}
