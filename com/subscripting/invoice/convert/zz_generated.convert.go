// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	invoice "o.o/api/subscripting/invoice"
	invoicemodel "o.o/backend/com/subscripting/invoice/model"
	subscriptionconvert "o.o/backend/com/subscripting/subscription/convert"
	conversion "o.o/backend/pkg/common/conversion"
)

/*
Custom conversions: (none)

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*invoicemodel.Invoice)(nil), (*invoice.Invoice)(nil), func(arg, out interface{}) error {
		Convert_invoicemodel_Invoice_invoice_Invoice(arg.(*invoicemodel.Invoice), out.(*invoice.Invoice))
		return nil
	})
	s.Register(([]*invoicemodel.Invoice)(nil), (*[]*invoice.Invoice)(nil), func(arg, out interface{}) error {
		out0 := Convert_invoicemodel_Invoices_invoice_Invoices(arg.([]*invoicemodel.Invoice))
		*out.(*[]*invoice.Invoice) = out0
		return nil
	})
	s.Register((*invoice.Invoice)(nil), (*invoicemodel.Invoice)(nil), func(arg, out interface{}) error {
		Convert_invoice_Invoice_invoicemodel_Invoice(arg.(*invoice.Invoice), out.(*invoicemodel.Invoice))
		return nil
	})
	s.Register(([]*invoice.Invoice)(nil), (*[]*invoicemodel.Invoice)(nil), func(arg, out interface{}) error {
		out0 := Convert_invoice_Invoices_invoicemodel_Invoices(arg.([]*invoice.Invoice))
		*out.(*[]*invoicemodel.Invoice) = out0
		return nil
	})
	s.Register((*invoice.CreateInvoiceArgs)(nil), (*invoice.Invoice)(nil), func(arg, out interface{}) error {
		Apply_invoice_CreateInvoiceArgs_invoice_Invoice(arg.(*invoice.CreateInvoiceArgs), out.(*invoice.Invoice))
		return nil
	})
	s.Register((*invoicemodel.InvoiceFtLine)(nil), (*invoice.InvoiceFtLine)(nil), func(arg, out interface{}) error {
		Convert_invoicemodel_InvoiceFtLine_invoice_InvoiceFtLine(arg.(*invoicemodel.InvoiceFtLine), out.(*invoice.InvoiceFtLine))
		return nil
	})
	s.Register(([]*invoicemodel.InvoiceFtLine)(nil), (*[]*invoice.InvoiceFtLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_invoicemodel_InvoiceFtLines_invoice_InvoiceFtLines(arg.([]*invoicemodel.InvoiceFtLine))
		*out.(*[]*invoice.InvoiceFtLine) = out0
		return nil
	})
	s.Register((*invoice.InvoiceFtLine)(nil), (*invoicemodel.InvoiceFtLine)(nil), func(arg, out interface{}) error {
		Convert_invoice_InvoiceFtLine_invoicemodel_InvoiceFtLine(arg.(*invoice.InvoiceFtLine), out.(*invoicemodel.InvoiceFtLine))
		return nil
	})
	s.Register(([]*invoice.InvoiceFtLine)(nil), (*[]*invoicemodel.InvoiceFtLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_invoice_InvoiceFtLines_invoicemodel_InvoiceFtLines(arg.([]*invoice.InvoiceFtLine))
		*out.(*[]*invoicemodel.InvoiceFtLine) = out0
		return nil
	})
	s.Register((*invoicemodel.InvoiceLine)(nil), (*invoice.InvoiceLine)(nil), func(arg, out interface{}) error {
		Convert_invoicemodel_InvoiceLine_invoice_InvoiceLine(arg.(*invoicemodel.InvoiceLine), out.(*invoice.InvoiceLine))
		return nil
	})
	s.Register(([]*invoicemodel.InvoiceLine)(nil), (*[]*invoice.InvoiceLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_invoicemodel_InvoiceLines_invoice_InvoiceLines(arg.([]*invoicemodel.InvoiceLine))
		*out.(*[]*invoice.InvoiceLine) = out0
		return nil
	})
	s.Register((*invoice.InvoiceLine)(nil), (*invoicemodel.InvoiceLine)(nil), func(arg, out interface{}) error {
		Convert_invoice_InvoiceLine_invoicemodel_InvoiceLine(arg.(*invoice.InvoiceLine), out.(*invoicemodel.InvoiceLine))
		return nil
	})
	s.Register(([]*invoice.InvoiceLine)(nil), (*[]*invoicemodel.InvoiceLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_invoice_InvoiceLines_invoicemodel_InvoiceLines(arg.([]*invoice.InvoiceLine))
		*out.(*[]*invoicemodel.InvoiceLine) = out0
		return nil
	})
}

//-- convert o.o/api/subscripting/invoice.Invoice --//

func Convert_invoicemodel_Invoice_invoice_Invoice(arg *invoicemodel.Invoice, out *invoice.Invoice) *invoice.Invoice {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &invoice.Invoice{}
	}
	convert_invoicemodel_Invoice_invoice_Invoice(arg, out)
	return out
}

func convert_invoicemodel_Invoice_invoice_Invoice(arg *invoicemodel.Invoice, out *invoice.Invoice) {
	out.ID = arg.ID                       // simple assign
	out.AccountID = arg.AccountID         // simple assign
	out.TotalAmount = arg.TotalAmount     // simple assign
	out.Description = arg.Description     // simple assign
	out.PaymentID = arg.PaymentID         // simple assign
	out.PaymentStatus = arg.PaymentStatus // simple assign
	out.Status = arg.Status               // simple assign
	out.Customer = subscriptionconvert.Convert_sharemodel_CustomerInfo_subscriptingtypes_CustomerInfo(arg.Customer, nil)
	out.CreatedAt = arg.CreatedAt       // simple assign
	out.UpdatedAt = arg.UpdatedAt       // simple assign
	out.DeletedAt = arg.DeletedAt       // simple assign
	out.WLPartnerID = arg.WLPartnerID   // simple assign
	out.ReferralType = arg.ReferralType // simple assign
	out.ReferralIDs = arg.ReferralIDs   // simple assign
}

func Convert_invoicemodel_Invoices_invoice_Invoices(args []*invoicemodel.Invoice) (outs []*invoice.Invoice) {
	if args == nil {
		return nil
	}
	tmps := make([]invoice.Invoice, len(args))
	outs = make([]*invoice.Invoice, len(args))
	for i := range tmps {
		outs[i] = Convert_invoicemodel_Invoice_invoice_Invoice(args[i], &tmps[i])
	}
	return outs
}

func Convert_invoice_Invoice_invoicemodel_Invoice(arg *invoice.Invoice, out *invoicemodel.Invoice) *invoicemodel.Invoice {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &invoicemodel.Invoice{}
	}
	convert_invoice_Invoice_invoicemodel_Invoice(arg, out)
	return out
}

func convert_invoice_Invoice_invoicemodel_Invoice(arg *invoice.Invoice, out *invoicemodel.Invoice) {
	out.ID = arg.ID                       // simple assign
	out.AccountID = arg.AccountID         // simple assign
	out.TotalAmount = arg.TotalAmount     // simple assign
	out.Description = arg.Description     // simple assign
	out.PaymentID = arg.PaymentID         // simple assign
	out.PaymentStatus = arg.PaymentStatus // simple assign
	out.Status = arg.Status               // simple assign
	out.Customer = subscriptionconvert.Convert_subscriptingtypes_CustomerInfo_sharemodel_CustomerInfo(arg.Customer, nil)
	out.CreatedAt = arg.CreatedAt       // simple assign
	out.UpdatedAt = arg.UpdatedAt       // simple assign
	out.DeletedAt = arg.DeletedAt       // simple assign
	out.WLPartnerID = arg.WLPartnerID   // simple assign
	out.ReferralType = arg.ReferralType // simple assign
	out.ReferralIDs = arg.ReferralIDs   // simple assign
}

func Convert_invoice_Invoices_invoicemodel_Invoices(args []*invoice.Invoice) (outs []*invoicemodel.Invoice) {
	if args == nil {
		return nil
	}
	tmps := make([]invoicemodel.Invoice, len(args))
	outs = make([]*invoicemodel.Invoice, len(args))
	for i := range tmps {
		outs[i] = Convert_invoice_Invoice_invoicemodel_Invoice(args[i], &tmps[i])
	}
	return outs
}

func Apply_invoice_CreateInvoiceArgs_invoice_Invoice(arg *invoice.CreateInvoiceArgs, out *invoice.Invoice) *invoice.Invoice {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &invoice.Invoice{}
	}
	apply_invoice_CreateInvoiceArgs_invoice_Invoice(arg, out)
	return out
}

func apply_invoice_CreateInvoiceArgs_invoice_Invoice(arg *invoice.CreateInvoiceArgs, out *invoice.Invoice) {
	out.ID = 0                          // zero value
	out.AccountID = arg.AccountID       // simple assign
	out.TotalAmount = arg.TotalAmount   // simple assign
	out.Description = arg.Description   // simple assign
	out.PaymentID = 0                   // zero value
	out.PaymentStatus = 0               // zero value
	out.Status = 0                      // zero value
	out.Customer = arg.Customer         // simple assign
	out.CreatedAt = time.Time{}         // zero value
	out.UpdatedAt = time.Time{}         // zero value
	out.DeletedAt = time.Time{}         // zero value
	out.WLPartnerID = 0                 // zero value
	out.ReferralType = arg.ReferralType // simple assign
	out.ReferralIDs = nil               // zero value
}

//-- convert o.o/api/subscripting/invoice.InvoiceFtLine --//

func Convert_invoicemodel_InvoiceFtLine_invoice_InvoiceFtLine(arg *invoicemodel.InvoiceFtLine, out *invoice.InvoiceFtLine) *invoice.InvoiceFtLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &invoice.InvoiceFtLine{}
	}
	convert_invoicemodel_InvoiceFtLine_invoice_InvoiceFtLine(arg, out)
	return out
}

func convert_invoicemodel_InvoiceFtLine_invoice_InvoiceFtLine(arg *invoicemodel.InvoiceFtLine, out *invoice.InvoiceFtLine) {
	out.Invoice = Convert_invoicemodel_Invoice_invoice_Invoice(arg.Invoice, nil)
	out.Lines = Convert_invoicemodel_InvoiceLines_invoice_InvoiceLines(arg.Lines)
}

func Convert_invoicemodel_InvoiceFtLines_invoice_InvoiceFtLines(args []*invoicemodel.InvoiceFtLine) (outs []*invoice.InvoiceFtLine) {
	if args == nil {
		return nil
	}
	tmps := make([]invoice.InvoiceFtLine, len(args))
	outs = make([]*invoice.InvoiceFtLine, len(args))
	for i := range tmps {
		outs[i] = Convert_invoicemodel_InvoiceFtLine_invoice_InvoiceFtLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_invoice_InvoiceFtLine_invoicemodel_InvoiceFtLine(arg *invoice.InvoiceFtLine, out *invoicemodel.InvoiceFtLine) *invoicemodel.InvoiceFtLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &invoicemodel.InvoiceFtLine{}
	}
	convert_invoice_InvoiceFtLine_invoicemodel_InvoiceFtLine(arg, out)
	return out
}

func convert_invoice_InvoiceFtLine_invoicemodel_InvoiceFtLine(arg *invoice.InvoiceFtLine, out *invoicemodel.InvoiceFtLine) {
	out.Invoice = Convert_invoice_Invoice_invoicemodel_Invoice(arg.Invoice, nil)
	out.Lines = Convert_invoice_InvoiceLines_invoicemodel_InvoiceLines(arg.Lines)
}

func Convert_invoice_InvoiceFtLines_invoicemodel_InvoiceFtLines(args []*invoice.InvoiceFtLine) (outs []*invoicemodel.InvoiceFtLine) {
	if args == nil {
		return nil
	}
	tmps := make([]invoicemodel.InvoiceFtLine, len(args))
	outs = make([]*invoicemodel.InvoiceFtLine, len(args))
	for i := range tmps {
		outs[i] = Convert_invoice_InvoiceFtLine_invoicemodel_InvoiceFtLine(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/subscripting/invoice.InvoiceLine --//

func Convert_invoicemodel_InvoiceLine_invoice_InvoiceLine(arg *invoicemodel.InvoiceLine, out *invoice.InvoiceLine) *invoice.InvoiceLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &invoice.InvoiceLine{}
	}
	convert_invoicemodel_InvoiceLine_invoice_InvoiceLine(arg, out)
	return out
}

func convert_invoicemodel_InvoiceLine_invoice_InvoiceLine(arg *invoicemodel.InvoiceLine, out *invoice.InvoiceLine) {
	out.ID = arg.ID                     // simple assign
	out.LineAmount = arg.LineAmount     // simple assign
	out.Price = arg.Price               // simple assign
	out.Quantity = arg.Quantity         // simple assign
	out.Description = arg.Description   // simple assign
	out.InvoiceID = arg.InvoiceID       // simple assign
	out.ReferralType = arg.ReferralType // simple assign
	out.ReferralID = arg.ReferralID     // simple assign
	out.CreatedAt = arg.CreatedAt       // simple assign
	out.UpdatedAt = arg.UpdatedAt       // simple assign
}

func Convert_invoicemodel_InvoiceLines_invoice_InvoiceLines(args []*invoicemodel.InvoiceLine) (outs []*invoice.InvoiceLine) {
	if args == nil {
		return nil
	}
	tmps := make([]invoice.InvoiceLine, len(args))
	outs = make([]*invoice.InvoiceLine, len(args))
	for i := range tmps {
		outs[i] = Convert_invoicemodel_InvoiceLine_invoice_InvoiceLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_invoice_InvoiceLine_invoicemodel_InvoiceLine(arg *invoice.InvoiceLine, out *invoicemodel.InvoiceLine) *invoicemodel.InvoiceLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &invoicemodel.InvoiceLine{}
	}
	convert_invoice_InvoiceLine_invoicemodel_InvoiceLine(arg, out)
	return out
}

func convert_invoice_InvoiceLine_invoicemodel_InvoiceLine(arg *invoice.InvoiceLine, out *invoicemodel.InvoiceLine) {
	out.ID = arg.ID                     // simple assign
	out.LineAmount = arg.LineAmount     // simple assign
	out.Price = arg.Price               // simple assign
	out.Quantity = arg.Quantity         // simple assign
	out.Description = arg.Description   // simple assign
	out.InvoiceID = arg.InvoiceID       // simple assign
	out.ReferralType = arg.ReferralType // simple assign
	out.ReferralID = arg.ReferralID     // simple assign
	out.CreatedAt = arg.CreatedAt       // simple assign
	out.UpdatedAt = arg.UpdatedAt       // simple assign
}

func Convert_invoice_InvoiceLines_invoicemodel_InvoiceLines(args []*invoice.InvoiceLine) (outs []*invoicemodel.InvoiceLine) {
	if args == nil {
		return nil
	}
	tmps := make([]invoicemodel.InvoiceLine, len(args))
	outs = make([]*invoicemodel.InvoiceLine, len(args))
	for i := range tmps {
		outs[i] = Convert_invoice_InvoiceLine_invoicemodel_InvoiceLine(args[i], &tmps[i])
	}
	return outs
}
