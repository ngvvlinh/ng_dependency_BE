// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	subscriptionproduct "o.o/api/subscripting/subscriptionproduct"
	subscriptionproductmodel "o.o/backend/com/subscripting/subscriptionproduct/model"
	conversion "o.o/backend/pkg/common/conversion"
)

/*
Custom conversions: (none)

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*subscriptionproductmodel.SubscriptionProduct)(nil), (*subscriptionproduct.SubscriptionProduct)(nil), func(arg, out interface{}) error {
		Convert_subscriptionproductmodel_SubscriptionProduct_subscriptionproduct_SubscriptionProduct(arg.(*subscriptionproductmodel.SubscriptionProduct), out.(*subscriptionproduct.SubscriptionProduct))
		return nil
	})
	s.Register(([]*subscriptionproductmodel.SubscriptionProduct)(nil), (*[]*subscriptionproduct.SubscriptionProduct)(nil), func(arg, out interface{}) error {
		out0 := Convert_subscriptionproductmodel_SubscriptionProducts_subscriptionproduct_SubscriptionProducts(arg.([]*subscriptionproductmodel.SubscriptionProduct))
		*out.(*[]*subscriptionproduct.SubscriptionProduct) = out0
		return nil
	})
	s.Register((*subscriptionproduct.SubscriptionProduct)(nil), (*subscriptionproductmodel.SubscriptionProduct)(nil), func(arg, out interface{}) error {
		Convert_subscriptionproduct_SubscriptionProduct_subscriptionproductmodel_SubscriptionProduct(arg.(*subscriptionproduct.SubscriptionProduct), out.(*subscriptionproductmodel.SubscriptionProduct))
		return nil
	})
	s.Register(([]*subscriptionproduct.SubscriptionProduct)(nil), (*[]*subscriptionproductmodel.SubscriptionProduct)(nil), func(arg, out interface{}) error {
		out0 := Convert_subscriptionproduct_SubscriptionProducts_subscriptionproductmodel_SubscriptionProducts(arg.([]*subscriptionproduct.SubscriptionProduct))
		*out.(*[]*subscriptionproductmodel.SubscriptionProduct) = out0
		return nil
	})
	s.Register((*subscriptionproduct.CreateSubrProductArgs)(nil), (*subscriptionproduct.SubscriptionProduct)(nil), func(arg, out interface{}) error {
		Apply_subscriptionproduct_CreateSubrProductArgs_subscriptionproduct_SubscriptionProduct(arg.(*subscriptionproduct.CreateSubrProductArgs), out.(*subscriptionproduct.SubscriptionProduct))
		return nil
	})
	s.Register((*subscriptionproduct.UpdateSubrProductArgs)(nil), (*subscriptionproduct.SubscriptionProduct)(nil), func(arg, out interface{}) error {
		Apply_subscriptionproduct_UpdateSubrProductArgs_subscriptionproduct_SubscriptionProduct(arg.(*subscriptionproduct.UpdateSubrProductArgs), out.(*subscriptionproduct.SubscriptionProduct))
		return nil
	})
}

//-- convert o.o/api/subscripting/subscriptionproduct.SubscriptionProduct --//

func Convert_subscriptionproductmodel_SubscriptionProduct_subscriptionproduct_SubscriptionProduct(arg *subscriptionproductmodel.SubscriptionProduct, out *subscriptionproduct.SubscriptionProduct) *subscriptionproduct.SubscriptionProduct {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscriptionproduct.SubscriptionProduct{}
	}
	convert_subscriptionproductmodel_SubscriptionProduct_subscriptionproduct_SubscriptionProduct(arg, out)
	return out
}

func convert_subscriptionproductmodel_SubscriptionProduct_subscriptionproduct_SubscriptionProduct(arg *subscriptionproductmodel.SubscriptionProduct, out *subscriptionproduct.SubscriptionProduct) {
	out.ID = arg.ID                   // simple assign
	out.Name = arg.Name               // simple assign
	out.Type = arg.Type               // simple assign
	out.Description = arg.Description // simple assign
	out.ImageURL = arg.ImageURL       // simple assign
	out.Status = arg.Status           // simple assign
	out.CreatedAt = arg.CreatedAt     // simple assign
	out.UpdatedAt = arg.UpdatedAt     // simple assign
	out.DeletedAt = arg.DeletedAt     // simple assign
	out.WLPartnerID = arg.WLPartnerID // simple assign
}

func Convert_subscriptionproductmodel_SubscriptionProducts_subscriptionproduct_SubscriptionProducts(args []*subscriptionproductmodel.SubscriptionProduct) (outs []*subscriptionproduct.SubscriptionProduct) {
	if args == nil {
		return nil
	}
	tmps := make([]subscriptionproduct.SubscriptionProduct, len(args))
	outs = make([]*subscriptionproduct.SubscriptionProduct, len(args))
	for i := range tmps {
		outs[i] = Convert_subscriptionproductmodel_SubscriptionProduct_subscriptionproduct_SubscriptionProduct(args[i], &tmps[i])
	}
	return outs
}

func Convert_subscriptionproduct_SubscriptionProduct_subscriptionproductmodel_SubscriptionProduct(arg *subscriptionproduct.SubscriptionProduct, out *subscriptionproductmodel.SubscriptionProduct) *subscriptionproductmodel.SubscriptionProduct {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscriptionproductmodel.SubscriptionProduct{}
	}
	convert_subscriptionproduct_SubscriptionProduct_subscriptionproductmodel_SubscriptionProduct(arg, out)
	return out
}

func convert_subscriptionproduct_SubscriptionProduct_subscriptionproductmodel_SubscriptionProduct(arg *subscriptionproduct.SubscriptionProduct, out *subscriptionproductmodel.SubscriptionProduct) {
	out.ID = arg.ID                   // simple assign
	out.Name = arg.Name               // simple assign
	out.Type = arg.Type               // simple assign
	out.Description = arg.Description // simple assign
	out.ImageURL = arg.ImageURL       // simple assign
	out.Status = arg.Status           // simple assign
	out.CreatedAt = arg.CreatedAt     // simple assign
	out.UpdatedAt = arg.UpdatedAt     // simple assign
	out.DeletedAt = arg.DeletedAt     // simple assign
	out.WLPartnerID = arg.WLPartnerID // simple assign
}

func Convert_subscriptionproduct_SubscriptionProducts_subscriptionproductmodel_SubscriptionProducts(args []*subscriptionproduct.SubscriptionProduct) (outs []*subscriptionproductmodel.SubscriptionProduct) {
	if args == nil {
		return nil
	}
	tmps := make([]subscriptionproductmodel.SubscriptionProduct, len(args))
	outs = make([]*subscriptionproductmodel.SubscriptionProduct, len(args))
	for i := range tmps {
		outs[i] = Convert_subscriptionproduct_SubscriptionProduct_subscriptionproductmodel_SubscriptionProduct(args[i], &tmps[i])
	}
	return outs
}

func Apply_subscriptionproduct_CreateSubrProductArgs_subscriptionproduct_SubscriptionProduct(arg *subscriptionproduct.CreateSubrProductArgs, out *subscriptionproduct.SubscriptionProduct) *subscriptionproduct.SubscriptionProduct {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscriptionproduct.SubscriptionProduct{}
	}
	apply_subscriptionproduct_CreateSubrProductArgs_subscriptionproduct_SubscriptionProduct(arg, out)
	return out
}

func apply_subscriptionproduct_CreateSubrProductArgs_subscriptionproduct_SubscriptionProduct(arg *subscriptionproduct.CreateSubrProductArgs, out *subscriptionproduct.SubscriptionProduct) {
	out.ID = 0                        // zero value
	out.Name = arg.Name               // simple assign
	out.Type = arg.Type               // simple assign
	out.Description = arg.Description // simple assign
	out.ImageURL = arg.ImageURL       // simple assign
	out.Status = 0                    // zero value
	out.CreatedAt = time.Time{}       // zero value
	out.UpdatedAt = time.Time{}       // zero value
	out.DeletedAt = time.Time{}       // zero value
	out.WLPartnerID = 0               // zero value
}

func Apply_subscriptionproduct_UpdateSubrProductArgs_subscriptionproduct_SubscriptionProduct(arg *subscriptionproduct.UpdateSubrProductArgs, out *subscriptionproduct.SubscriptionProduct) *subscriptionproduct.SubscriptionProduct {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscriptionproduct.SubscriptionProduct{}
	}
	apply_subscriptionproduct_UpdateSubrProductArgs_subscriptionproduct_SubscriptionProduct(arg, out)
	return out
}

func apply_subscriptionproduct_UpdateSubrProductArgs_subscriptionproduct_SubscriptionProduct(arg *subscriptionproduct.UpdateSubrProductArgs, out *subscriptionproduct.SubscriptionProduct) {
	out.ID = out.ID                   // identifier
	out.Name = arg.Name               // simple assign
	out.Type = out.Type               // no change
	out.Description = arg.Description // simple assign
	out.ImageURL = arg.ImageURL       // simple assign
	out.Status = out.Status           // no change
	out.CreatedAt = out.CreatedAt     // no change
	out.UpdatedAt = out.UpdatedAt     // no change
	out.DeletedAt = out.DeletedAt     // no change
	out.WLPartnerID = out.WLPartnerID // no change
}
