// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type SubscriptionProducts []*SubscriptionProduct

const __sqlSubscriptionProduct_Table = "subscription_product"
const __sqlSubscriptionProduct_ListCols = "\"id\",\"name\",\"type\",\"description\",\"image_url\",\"status\",\"created_at\",\"updated_at\",\"deleted_at\",\"wl_partner_id\""
const __sqlSubscriptionProduct_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"name\" = EXCLUDED.\"name\",\"type\" = EXCLUDED.\"type\",\"description\" = EXCLUDED.\"description\",\"image_url\" = EXCLUDED.\"image_url\",\"status\" = EXCLUDED.\"status\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\",\"wl_partner_id\" = EXCLUDED.\"wl_partner_id\""
const __sqlSubscriptionProduct_Insert = "INSERT INTO \"subscription_product\" (" + __sqlSubscriptionProduct_ListCols + ") VALUES"
const __sqlSubscriptionProduct_Select = "SELECT " + __sqlSubscriptionProduct_ListCols + " FROM \"subscription_product\""
const __sqlSubscriptionProduct_Select_history = "SELECT " + __sqlSubscriptionProduct_ListCols + " FROM history.\"subscription_product\""
const __sqlSubscriptionProduct_UpdateAll = "UPDATE \"subscription_product\" SET (" + __sqlSubscriptionProduct_ListCols + ")"
const __sqlSubscriptionProduct_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT subscription_product_pkey DO UPDATE SET"

func (m *SubscriptionProduct) SQLTableName() string  { return "subscription_product" }
func (m *SubscriptionProducts) SQLTableName() string { return "subscription_product" }
func (m *SubscriptionProduct) SQLListCols() string   { return __sqlSubscriptionProduct_ListCols }

func (m *SubscriptionProduct) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlSubscriptionProduct_ListCols + " FROM \"subscription_product\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *SubscriptionProduct) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "subscription_product"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"name": {
			ColumnName:       "name",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"type": {
			ColumnName:       "type",
			ColumnType:       "subscription_product_type.ProductSubscriptionType",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"unknown", "ecomify", "telecom-extension"},
		},
		"description": {
			ColumnName:       "description",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"image_url": {
			ColumnName:       "image_url",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"status": {
			ColumnName:       "status",
			ColumnType:       "status3.Status",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"Z", "P", "N"},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_at": {
			ColumnName:       "deleted_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"wl_partner_id": {
			ColumnName:       "wl_partner_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "subscription_product", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*SubscriptionProduct)(nil))
}

func (m *SubscriptionProduct) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.Name),
		m.Type,
		core.String(m.Description),
		core.String(m.ImageURL),
		m.Status,
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
		m.WLPartnerID,
	}
}

func (m *SubscriptionProduct) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.Name),
		&m.Type,
		(*core.String)(&m.Description),
		(*core.String)(&m.ImageURL),
		&m.Status,
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
		&m.WLPartnerID,
	}
}

func (m *SubscriptionProduct) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *SubscriptionProducts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(SubscriptionProducts, 0, 128)
	for rows.Next() {
		m := new(SubscriptionProduct)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *SubscriptionProduct) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionProduct_Select)
	return nil
}

func (_ *SubscriptionProducts) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionProduct_Select)
	return nil
}

func (m *SubscriptionProduct) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionProduct_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(10)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms SubscriptionProducts) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionProduct_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(10)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *SubscriptionProduct) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlSubscriptionProduct_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlSubscriptionProduct_ListColsOnConflict)
	return nil
}

func (ms SubscriptionProducts) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlSubscriptionProduct_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlSubscriptionProduct_ListColsOnConflict)
	return nil
}

func (m *SubscriptionProduct) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("subscription_product")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Type != 0 {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.ImageURL != "" {
		flag = true
		w.WriteName("image_url")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ImageURL)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if true { // always update time
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if m.WLPartnerID != 0 {
		flag = true
		w.WriteName("wl_partner_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WLPartnerID)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *SubscriptionProduct) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionProduct_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(10)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type SubscriptionProductHistory map[string]interface{}
type SubscriptionProductHistories []map[string]interface{}

func (m *SubscriptionProductHistory) SQLTableName() string { return "history.\"subscription_product\"" }
func (m SubscriptionProductHistories) SQLTableName() string {
	return "history.\"subscription_product\""
}

func (m *SubscriptionProductHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionProduct_Select_history)
	return nil
}

func (m SubscriptionProductHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionProduct_Select_history)
	return nil
}

func (m SubscriptionProductHistory) ID() core.Interface   { return core.Interface{m["id"]} }
func (m SubscriptionProductHistory) Name() core.Interface { return core.Interface{m["name"]} }
func (m SubscriptionProductHistory) Type() core.Interface { return core.Interface{m["type"]} }
func (m SubscriptionProductHistory) Description() core.Interface {
	return core.Interface{m["description"]}
}
func (m SubscriptionProductHistory) ImageURL() core.Interface { return core.Interface{m["image_url"]} }
func (m SubscriptionProductHistory) Status() core.Interface   { return core.Interface{m["status"]} }
func (m SubscriptionProductHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m SubscriptionProductHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}
func (m SubscriptionProductHistory) DeletedAt() core.Interface {
	return core.Interface{m["deleted_at"]}
}
func (m SubscriptionProductHistory) WLPartnerID() core.Interface {
	return core.Interface{m["wl_partner_id"]}
}

func (m *SubscriptionProductHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 10)
	args := make([]interface{}, 10)
	for i := 0; i < 10; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(SubscriptionProductHistory, 10)
	res["id"] = data[0]
	res["name"] = data[1]
	res["type"] = data[2]
	res["description"] = data[3]
	res["image_url"] = data[4]
	res["status"] = data[5]
	res["created_at"] = data[6]
	res["updated_at"] = data[7]
	res["deleted_at"] = data[8]
	res["wl_partner_id"] = data[9]
	*m = res
	return nil
}

func (ms *SubscriptionProductHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 10)
	args := make([]interface{}, 10)
	for i := 0; i < 10; i++ {
		args[i] = &data[i]
	}
	res := make(SubscriptionProductHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(SubscriptionProductHistory)
		m["id"] = data[0]
		m["name"] = data[1]
		m["type"] = data[2]
		m["description"] = data[3]
		m["image_url"] = data[4]
		m["status"] = data[5]
		m["created_at"] = data[6]
		m["updated_at"] = data[7]
		m["deleted_at"] = data[8]
		m["wl_partner_id"] = data[9]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
