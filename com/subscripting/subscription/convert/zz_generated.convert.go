// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	subscription "o.o/api/subscripting/subscription"
	subscriptingtypes "o.o/api/subscripting/types"
	sharemodel "o.o/backend/com/subscripting/sharemodel"
	subscriptionmodel "o.o/backend/com/subscripting/subscription/model"
	conversion "o.o/backend/pkg/common/conversion"
	dot "o.o/capi/dot"
)

/*
Custom conversions: (none)

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*subscriptionmodel.Subscription)(nil), (*subscription.Subscription)(nil), func(arg, out interface{}) error {
		Convert_subscriptionmodel_Subscription_subscription_Subscription(arg.(*subscriptionmodel.Subscription), out.(*subscription.Subscription))
		return nil
	})
	s.Register(([]*subscriptionmodel.Subscription)(nil), (*[]*subscription.Subscription)(nil), func(arg, out interface{}) error {
		out0 := Convert_subscriptionmodel_Subscriptions_subscription_Subscriptions(arg.([]*subscriptionmodel.Subscription))
		*out.(*[]*subscription.Subscription) = out0
		return nil
	})
	s.Register((*subscription.Subscription)(nil), (*subscriptionmodel.Subscription)(nil), func(arg, out interface{}) error {
		Convert_subscription_Subscription_subscriptionmodel_Subscription(arg.(*subscription.Subscription), out.(*subscriptionmodel.Subscription))
		return nil
	})
	s.Register(([]*subscription.Subscription)(nil), (*[]*subscriptionmodel.Subscription)(nil), func(arg, out interface{}) error {
		out0 := Convert_subscription_Subscriptions_subscriptionmodel_Subscriptions(arg.([]*subscription.Subscription))
		*out.(*[]*subscriptionmodel.Subscription) = out0
		return nil
	})
	s.Register((*subscription.CreateSubscriptionArgs)(nil), (*subscription.Subscription)(nil), func(arg, out interface{}) error {
		Apply_subscription_CreateSubscriptionArgs_subscription_Subscription(arg.(*subscription.CreateSubscriptionArgs), out.(*subscription.Subscription))
		return nil
	})
	s.Register((*subscription.UpdateSubscriptionPeriodArgs)(nil), (*subscription.Subscription)(nil), func(arg, out interface{}) error {
		Apply_subscription_UpdateSubscriptionPeriodArgs_subscription_Subscription(arg.(*subscription.UpdateSubscriptionPeriodArgs), out.(*subscription.Subscription))
		return nil
	})
	s.Register((*subscriptionmodel.SubscriptionFtLine)(nil), (*subscription.SubscriptionFtLine)(nil), func(arg, out interface{}) error {
		Convert_subscriptionmodel_SubscriptionFtLine_subscription_SubscriptionFtLine(arg.(*subscriptionmodel.SubscriptionFtLine), out.(*subscription.SubscriptionFtLine))
		return nil
	})
	s.Register(([]*subscriptionmodel.SubscriptionFtLine)(nil), (*[]*subscription.SubscriptionFtLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_subscriptionmodel_SubscriptionFtLines_subscription_SubscriptionFtLines(arg.([]*subscriptionmodel.SubscriptionFtLine))
		*out.(*[]*subscription.SubscriptionFtLine) = out0
		return nil
	})
	s.Register((*subscription.SubscriptionFtLine)(nil), (*subscriptionmodel.SubscriptionFtLine)(nil), func(arg, out interface{}) error {
		Convert_subscription_SubscriptionFtLine_subscriptionmodel_SubscriptionFtLine(arg.(*subscription.SubscriptionFtLine), out.(*subscriptionmodel.SubscriptionFtLine))
		return nil
	})
	s.Register(([]*subscription.SubscriptionFtLine)(nil), (*[]*subscriptionmodel.SubscriptionFtLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_subscription_SubscriptionFtLines_subscriptionmodel_SubscriptionFtLines(arg.([]*subscription.SubscriptionFtLine))
		*out.(*[]*subscriptionmodel.SubscriptionFtLine) = out0
		return nil
	})
	s.Register((*subscriptionmodel.SubscriptionLine)(nil), (*subscription.SubscriptionLine)(nil), func(arg, out interface{}) error {
		Convert_subscriptionmodel_SubscriptionLine_subscription_SubscriptionLine(arg.(*subscriptionmodel.SubscriptionLine), out.(*subscription.SubscriptionLine))
		return nil
	})
	s.Register(([]*subscriptionmodel.SubscriptionLine)(nil), (*[]*subscription.SubscriptionLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_subscriptionmodel_SubscriptionLines_subscription_SubscriptionLines(arg.([]*subscriptionmodel.SubscriptionLine))
		*out.(*[]*subscription.SubscriptionLine) = out0
		return nil
	})
	s.Register((*subscription.SubscriptionLine)(nil), (*subscriptionmodel.SubscriptionLine)(nil), func(arg, out interface{}) error {
		Convert_subscription_SubscriptionLine_subscriptionmodel_SubscriptionLine(arg.(*subscription.SubscriptionLine), out.(*subscriptionmodel.SubscriptionLine))
		return nil
	})
	s.Register(([]*subscription.SubscriptionLine)(nil), (*[]*subscriptionmodel.SubscriptionLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_subscription_SubscriptionLines_subscriptionmodel_SubscriptionLines(arg.([]*subscription.SubscriptionLine))
		*out.(*[]*subscriptionmodel.SubscriptionLine) = out0
		return nil
	})
	s.Register((*sharemodel.CustomerInfo)(nil), (*subscriptingtypes.CustomerInfo)(nil), func(arg, out interface{}) error {
		Convert_sharemodel_CustomerInfo_subscriptingtypes_CustomerInfo(arg.(*sharemodel.CustomerInfo), out.(*subscriptingtypes.CustomerInfo))
		return nil
	})
	s.Register(([]*sharemodel.CustomerInfo)(nil), (*[]*subscriptingtypes.CustomerInfo)(nil), func(arg, out interface{}) error {
		out0 := Convert_sharemodel_CustomerInfoes_subscriptingtypes_CustomerInfoes(arg.([]*sharemodel.CustomerInfo))
		*out.(*[]*subscriptingtypes.CustomerInfo) = out0
		return nil
	})
	s.Register((*subscriptingtypes.CustomerInfo)(nil), (*sharemodel.CustomerInfo)(nil), func(arg, out interface{}) error {
		Convert_subscriptingtypes_CustomerInfo_sharemodel_CustomerInfo(arg.(*subscriptingtypes.CustomerInfo), out.(*sharemodel.CustomerInfo))
		return nil
	})
	s.Register(([]*subscriptingtypes.CustomerInfo)(nil), (*[]*sharemodel.CustomerInfo)(nil), func(arg, out interface{}) error {
		out0 := Convert_subscriptingtypes_CustomerInfoes_sharemodel_CustomerInfoes(arg.([]*subscriptingtypes.CustomerInfo))
		*out.(*[]*sharemodel.CustomerInfo) = out0
		return nil
	})
}

//-- convert o.o/api/subscripting/subscription.Subscription --//

func Convert_subscriptionmodel_Subscription_subscription_Subscription(arg *subscriptionmodel.Subscription, out *subscription.Subscription) *subscription.Subscription {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscription.Subscription{}
	}
	convert_subscriptionmodel_Subscription_subscription_Subscription(arg, out)
	return out
}

func convert_subscriptionmodel_Subscription_subscription_Subscription(arg *subscriptionmodel.Subscription, out *subscription.Subscription) {
	out.ID = arg.ID                                     // simple assign
	out.AccountID = arg.AccountID                       // simple assign
	out.CancelAtPeriodEnd = arg.CancelAtPeriodEnd       // simple assign
	out.CurrentPeriodEndAt = arg.CurrentPeriodEndAt     // simple assign
	out.CurrentPeriodStartAt = arg.CurrentPeriodStartAt // simple assign
	out.Status = arg.Status                             // simple assign
	out.BillingCycleAnchorAt = arg.BillingCycleAnchorAt // simple assign
	out.StartedAt = arg.StartedAt                       // simple assign
	out.Customer = Convert_sharemodel_CustomerInfo_subscriptingtypes_CustomerInfo(arg.Customer, nil)
	out.CreatedAt = arg.CreatedAt     // simple assign
	out.UpdatedAt = arg.UpdatedAt     // simple assign
	out.DeletedAt = arg.DeletedAt     // simple assign
	out.WLPartnerID = arg.WLPartnerID // simple assign
	out.PlanIDs = arg.PlanIDs         // simple assign
}

func Convert_subscriptionmodel_Subscriptions_subscription_Subscriptions(args []*subscriptionmodel.Subscription) (outs []*subscription.Subscription) {
	if args == nil {
		return nil
	}
	tmps := make([]subscription.Subscription, len(args))
	outs = make([]*subscription.Subscription, len(args))
	for i := range tmps {
		outs[i] = Convert_subscriptionmodel_Subscription_subscription_Subscription(args[i], &tmps[i])
	}
	return outs
}

func Convert_subscription_Subscription_subscriptionmodel_Subscription(arg *subscription.Subscription, out *subscriptionmodel.Subscription) *subscriptionmodel.Subscription {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscriptionmodel.Subscription{}
	}
	convert_subscription_Subscription_subscriptionmodel_Subscription(arg, out)
	return out
}

func convert_subscription_Subscription_subscriptionmodel_Subscription(arg *subscription.Subscription, out *subscriptionmodel.Subscription) {
	out.ID = arg.ID                                     // simple assign
	out.AccountID = arg.AccountID                       // simple assign
	out.CancelAtPeriodEnd = arg.CancelAtPeriodEnd       // simple assign
	out.CurrentPeriodEndAt = arg.CurrentPeriodEndAt     // simple assign
	out.CurrentPeriodStartAt = arg.CurrentPeriodStartAt // simple assign
	out.Status = arg.Status                             // simple assign
	out.BillingCycleAnchorAt = arg.BillingCycleAnchorAt // simple assign
	out.StartedAt = arg.StartedAt                       // simple assign
	out.Customer = Convert_subscriptingtypes_CustomerInfo_sharemodel_CustomerInfo(arg.Customer, nil)
	out.CreatedAt = arg.CreatedAt     // simple assign
	out.UpdatedAt = arg.UpdatedAt     // simple assign
	out.DeletedAt = arg.DeletedAt     // simple assign
	out.WLPartnerID = arg.WLPartnerID // simple assign
	out.PlanIDs = arg.PlanIDs         // simple assign
}

func Convert_subscription_Subscriptions_subscriptionmodel_Subscriptions(args []*subscription.Subscription) (outs []*subscriptionmodel.Subscription) {
	if args == nil {
		return nil
	}
	tmps := make([]subscriptionmodel.Subscription, len(args))
	outs = make([]*subscriptionmodel.Subscription, len(args))
	for i := range tmps {
		outs[i] = Convert_subscription_Subscription_subscriptionmodel_Subscription(args[i], &tmps[i])
	}
	return outs
}

func Apply_subscription_CreateSubscriptionArgs_subscription_Subscription(arg *subscription.CreateSubscriptionArgs, out *subscription.Subscription) *subscription.Subscription {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscription.Subscription{}
	}
	apply_subscription_CreateSubscriptionArgs_subscription_Subscription(arg, out)
	return out
}

func apply_subscription_CreateSubscriptionArgs_subscription_Subscription(arg *subscription.CreateSubscriptionArgs, out *subscription.Subscription) {
	out.ID = 0                                          // zero value
	out.AccountID = arg.AccountID                       // simple assign
	out.CancelAtPeriodEnd = dot.NullBool{}              // types do not match
	out.CurrentPeriodEndAt = arg.CurrentPeriodEndAt     // simple assign
	out.CurrentPeriodStartAt = arg.CurrentPeriodStartAt // simple assign
	out.Status = 0                                      // zero value
	out.BillingCycleAnchorAt = arg.BillingCycleAnchorAt // simple assign
	out.StartedAt = time.Time{}                         // zero value
	out.Customer = arg.Customer                         // simple assign
	out.CreatedAt = time.Time{}                         // zero value
	out.UpdatedAt = time.Time{}                         // zero value
	out.DeletedAt = time.Time{}                         // zero value
	out.WLPartnerID = 0                                 // zero value
	out.PlanIDs = nil                                   // zero value
}

func Apply_subscription_UpdateSubscriptionPeriodArgs_subscription_Subscription(arg *subscription.UpdateSubscriptionPeriodArgs, out *subscription.Subscription) *subscription.Subscription {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscription.Subscription{}
	}
	apply_subscription_UpdateSubscriptionPeriodArgs_subscription_Subscription(arg, out)
	return out
}

func apply_subscription_UpdateSubscriptionPeriodArgs_subscription_Subscription(arg *subscription.UpdateSubscriptionPeriodArgs, out *subscription.Subscription) {
	out.ID = out.ID                                     // identifier
	out.AccountID = out.AccountID                       // identifier
	out.CancelAtPeriodEnd = out.CancelAtPeriodEnd       // types do not match
	out.CurrentPeriodEndAt = arg.CurrentPeriodEndAt     // simple assign
	out.CurrentPeriodStartAt = arg.CurrentPeriodStartAt // simple assign
	out.Status = out.Status                             // no change
	out.BillingCycleAnchorAt = arg.BillingCycleAnchorAt // simple assign
	out.StartedAt = arg.StartedAt                       // simple assign
	out.Customer = out.Customer                         // no change
	out.CreatedAt = out.CreatedAt                       // no change
	out.UpdatedAt = out.UpdatedAt                       // no change
	out.DeletedAt = out.DeletedAt                       // no change
	out.WLPartnerID = out.WLPartnerID                   // no change
	out.PlanIDs = out.PlanIDs                           // no change
}

//-- convert o.o/api/subscripting/subscription.SubscriptionFtLine --//

func Convert_subscriptionmodel_SubscriptionFtLine_subscription_SubscriptionFtLine(arg *subscriptionmodel.SubscriptionFtLine, out *subscription.SubscriptionFtLine) *subscription.SubscriptionFtLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscription.SubscriptionFtLine{}
	}
	convert_subscriptionmodel_SubscriptionFtLine_subscription_SubscriptionFtLine(arg, out)
	return out
}

func convert_subscriptionmodel_SubscriptionFtLine_subscription_SubscriptionFtLine(arg *subscriptionmodel.SubscriptionFtLine, out *subscription.SubscriptionFtLine) {
	out.Subscription = Convert_subscriptionmodel_Subscription_subscription_Subscription(arg.Subscription, nil)
	out.Lines = Convert_subscriptionmodel_SubscriptionLines_subscription_SubscriptionLines(arg.Lines)
}

func Convert_subscriptionmodel_SubscriptionFtLines_subscription_SubscriptionFtLines(args []*subscriptionmodel.SubscriptionFtLine) (outs []*subscription.SubscriptionFtLine) {
	if args == nil {
		return nil
	}
	tmps := make([]subscription.SubscriptionFtLine, len(args))
	outs = make([]*subscription.SubscriptionFtLine, len(args))
	for i := range tmps {
		outs[i] = Convert_subscriptionmodel_SubscriptionFtLine_subscription_SubscriptionFtLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_subscription_SubscriptionFtLine_subscriptionmodel_SubscriptionFtLine(arg *subscription.SubscriptionFtLine, out *subscriptionmodel.SubscriptionFtLine) *subscriptionmodel.SubscriptionFtLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscriptionmodel.SubscriptionFtLine{}
	}
	convert_subscription_SubscriptionFtLine_subscriptionmodel_SubscriptionFtLine(arg, out)
	return out
}

func convert_subscription_SubscriptionFtLine_subscriptionmodel_SubscriptionFtLine(arg *subscription.SubscriptionFtLine, out *subscriptionmodel.SubscriptionFtLine) {
	out.Subscription = Convert_subscription_Subscription_subscriptionmodel_Subscription(arg.Subscription, nil)
	out.Lines = Convert_subscription_SubscriptionLines_subscriptionmodel_SubscriptionLines(arg.Lines)
}

func Convert_subscription_SubscriptionFtLines_subscriptionmodel_SubscriptionFtLines(args []*subscription.SubscriptionFtLine) (outs []*subscriptionmodel.SubscriptionFtLine) {
	if args == nil {
		return nil
	}
	tmps := make([]subscriptionmodel.SubscriptionFtLine, len(args))
	outs = make([]*subscriptionmodel.SubscriptionFtLine, len(args))
	for i := range tmps {
		outs[i] = Convert_subscription_SubscriptionFtLine_subscriptionmodel_SubscriptionFtLine(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/subscripting/subscription.SubscriptionLine --//

func Convert_subscriptionmodel_SubscriptionLine_subscription_SubscriptionLine(arg *subscriptionmodel.SubscriptionLine, out *subscription.SubscriptionLine) *subscription.SubscriptionLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscription.SubscriptionLine{}
	}
	convert_subscriptionmodel_SubscriptionLine_subscription_SubscriptionLine(arg, out)
	return out
}

func convert_subscriptionmodel_SubscriptionLine_subscription_SubscriptionLine(arg *subscriptionmodel.SubscriptionLine, out *subscription.SubscriptionLine) {
	out.ID = arg.ID                         // simple assign
	out.PlanID = arg.PlanID                 // simple assign
	out.SubscriptionID = arg.SubscriptionID // simple assign
	out.Quantity = arg.Quantity             // simple assign
	out.CreatedAt = arg.CreatedAt           // simple assign
	out.UpdatedAt = arg.UpdatedAt           // simple assign
}

func Convert_subscriptionmodel_SubscriptionLines_subscription_SubscriptionLines(args []*subscriptionmodel.SubscriptionLine) (outs []*subscription.SubscriptionLine) {
	if args == nil {
		return nil
	}
	tmps := make([]subscription.SubscriptionLine, len(args))
	outs = make([]*subscription.SubscriptionLine, len(args))
	for i := range tmps {
		outs[i] = Convert_subscriptionmodel_SubscriptionLine_subscription_SubscriptionLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_subscription_SubscriptionLine_subscriptionmodel_SubscriptionLine(arg *subscription.SubscriptionLine, out *subscriptionmodel.SubscriptionLine) *subscriptionmodel.SubscriptionLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscriptionmodel.SubscriptionLine{}
	}
	convert_subscription_SubscriptionLine_subscriptionmodel_SubscriptionLine(arg, out)
	return out
}

func convert_subscription_SubscriptionLine_subscriptionmodel_SubscriptionLine(arg *subscription.SubscriptionLine, out *subscriptionmodel.SubscriptionLine) {
	out.ID = arg.ID                         // simple assign
	out.PlanID = arg.PlanID                 // simple assign
	out.SubscriptionID = arg.SubscriptionID // simple assign
	out.Quantity = arg.Quantity             // simple assign
	out.CreatedAt = arg.CreatedAt           // simple assign
	out.UpdatedAt = arg.UpdatedAt           // simple assign
}

func Convert_subscription_SubscriptionLines_subscriptionmodel_SubscriptionLines(args []*subscription.SubscriptionLine) (outs []*subscriptionmodel.SubscriptionLine) {
	if args == nil {
		return nil
	}
	tmps := make([]subscriptionmodel.SubscriptionLine, len(args))
	outs = make([]*subscriptionmodel.SubscriptionLine, len(args))
	for i := range tmps {
		outs[i] = Convert_subscription_SubscriptionLine_subscriptionmodel_SubscriptionLine(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/subscripting/types.CustomerInfo --//

func Convert_sharemodel_CustomerInfo_subscriptingtypes_CustomerInfo(arg *sharemodel.CustomerInfo, out *subscriptingtypes.CustomerInfo) *subscriptingtypes.CustomerInfo {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscriptingtypes.CustomerInfo{}
	}
	convert_sharemodel_CustomerInfo_subscriptingtypes_CustomerInfo(arg, out)
	return out
}

func convert_sharemodel_CustomerInfo_subscriptingtypes_CustomerInfo(arg *sharemodel.CustomerInfo, out *subscriptingtypes.CustomerInfo) {
	out.FullName = arg.FullName // simple assign
	out.Email = arg.Email       // simple assign
	out.Phone = arg.Phone       // simple assign
}

func Convert_sharemodel_CustomerInfoes_subscriptingtypes_CustomerInfoes(args []*sharemodel.CustomerInfo) (outs []*subscriptingtypes.CustomerInfo) {
	if args == nil {
		return nil
	}
	tmps := make([]subscriptingtypes.CustomerInfo, len(args))
	outs = make([]*subscriptingtypes.CustomerInfo, len(args))
	for i := range tmps {
		outs[i] = Convert_sharemodel_CustomerInfo_subscriptingtypes_CustomerInfo(args[i], &tmps[i])
	}
	return outs
}

func Convert_subscriptingtypes_CustomerInfo_sharemodel_CustomerInfo(arg *subscriptingtypes.CustomerInfo, out *sharemodel.CustomerInfo) *sharemodel.CustomerInfo {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &sharemodel.CustomerInfo{}
	}
	convert_subscriptingtypes_CustomerInfo_sharemodel_CustomerInfo(arg, out)
	return out
}

func convert_subscriptingtypes_CustomerInfo_sharemodel_CustomerInfo(arg *subscriptingtypes.CustomerInfo, out *sharemodel.CustomerInfo) {
	out.FullName = arg.FullName // simple assign
	out.Email = arg.Email       // simple assign
	out.Phone = arg.Phone       // simple assign
}

func Convert_subscriptingtypes_CustomerInfoes_sharemodel_CustomerInfoes(args []*subscriptingtypes.CustomerInfo) (outs []*sharemodel.CustomerInfo) {
	if args == nil {
		return nil
	}
	tmps := make([]sharemodel.CustomerInfo, len(args))
	outs = make([]*sharemodel.CustomerInfo, len(args))
	for i := range tmps {
		outs[i] = Convert_subscriptingtypes_CustomerInfo_sharemodel_CustomerInfo(args[i], &tmps[i])
	}
	return outs
}
