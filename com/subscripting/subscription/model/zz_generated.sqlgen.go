// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type Subscriptions []*Subscription

const __sqlSubscription_Table = "subscription"
const __sqlSubscription_ListCols = "\"id\",\"account_id\",\"cancel_at_period_end\",\"current_period_end_at\",\"current_period_start_at\",\"status\",\"billing_cycle_anchor_at\",\"started_at\",\"customer\",\"created_at\",\"updated_at\",\"deleted_at\",\"wl_partner_id\",\"plan_ids\""
const __sqlSubscription_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"account_id\" = EXCLUDED.\"account_id\",\"cancel_at_period_end\" = EXCLUDED.\"cancel_at_period_end\",\"current_period_end_at\" = EXCLUDED.\"current_period_end_at\",\"current_period_start_at\" = EXCLUDED.\"current_period_start_at\",\"status\" = EXCLUDED.\"status\",\"billing_cycle_anchor_at\" = EXCLUDED.\"billing_cycle_anchor_at\",\"started_at\" = EXCLUDED.\"started_at\",\"customer\" = EXCLUDED.\"customer\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\",\"wl_partner_id\" = EXCLUDED.\"wl_partner_id\",\"plan_ids\" = EXCLUDED.\"plan_ids\""
const __sqlSubscription_Insert = "INSERT INTO \"subscription\" (" + __sqlSubscription_ListCols + ") VALUES"
const __sqlSubscription_Select = "SELECT " + __sqlSubscription_ListCols + " FROM \"subscription\""
const __sqlSubscription_Select_history = "SELECT " + __sqlSubscription_ListCols + " FROM history.\"subscription\""
const __sqlSubscription_UpdateAll = "UPDATE \"subscription\" SET (" + __sqlSubscription_ListCols + ")"
const __sqlSubscription_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT subscription_pkey DO UPDATE SET"

func (m *Subscription) SQLTableName() string  { return "subscription" }
func (m *Subscriptions) SQLTableName() string { return "subscription" }
func (m *Subscription) SQLListCols() string   { return __sqlSubscription_ListCols }

func (m *Subscription) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlSubscription_ListCols + " FROM \"subscription\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *Subscription) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "subscription"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"account_id": {
			ColumnName:       "account_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"cancel_at_period_end": {
			ColumnName:       "cancel_at_period_end",
			ColumnType:       "bool",
			ColumnDBType:     "bool",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"current_period_end_at": {
			ColumnName:       "current_period_end_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"current_period_start_at": {
			ColumnName:       "current_period_start_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"status": {
			ColumnName:       "status",
			ColumnType:       "status3.Status",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"Z", "P", "N"},
		},
		"billing_cycle_anchor_at": {
			ColumnName:       "billing_cycle_anchor_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"started_at": {
			ColumnName:       "started_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"customer": {
			ColumnName:       "customer",
			ColumnType:       "*sharemodel.CustomerInfo",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_at": {
			ColumnName:       "deleted_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"wl_partner_id": {
			ColumnName:       "wl_partner_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"plan_ids": {
			ColumnName:       "plan_ids",
			ColumnType:       "[]dot.ID",
			ColumnDBType:     "[]int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "subscription", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*Subscription)(nil))
}

func (m *Subscription) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.AccountID,
		core.Bool(m.CancelAtPeriodEnd),
		core.Time(m.CurrentPeriodEndAt),
		core.Time(m.CurrentPeriodStartAt),
		m.Status,
		core.Time(m.BillingCycleAnchorAt),
		core.Time(m.StartedAt),
		core.JSON{m.Customer},
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
		m.WLPartnerID,
		core.Array{m.PlanIDs, opts},
	}
}

func (m *Subscription) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.AccountID,
		(*core.Bool)(&m.CancelAtPeriodEnd),
		(*core.Time)(&m.CurrentPeriodEndAt),
		(*core.Time)(&m.CurrentPeriodStartAt),
		&m.Status,
		(*core.Time)(&m.BillingCycleAnchorAt),
		(*core.Time)(&m.StartedAt),
		core.JSON{&m.Customer},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
		&m.WLPartnerID,
		core.Array{&m.PlanIDs, opts},
	}
}

func (m *Subscription) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Subscriptions) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Subscriptions, 0, 128)
	for rows.Next() {
		m := new(Subscription)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Subscription) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscription_Select)
	return nil
}

func (_ *Subscriptions) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscription_Select)
	return nil
}

func (m *Subscription) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscription_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Subscriptions) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscription_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(14)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Subscription) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlSubscription_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlSubscription_ListColsOnConflict)
	return nil
}

func (ms Subscriptions) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlSubscription_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlSubscription_ListColsOnConflict)
	return nil
}

func (m *Subscription) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("subscription")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.AccountID != 0 {
		flag = true
		w.WriteName("account_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccountID)
	}
	if m.CancelAtPeriodEnd {
		flag = true
		w.WriteName("cancel_at_period_end")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CancelAtPeriodEnd)
	}
	if !m.CurrentPeriodEndAt.IsZero() {
		flag = true
		w.WriteName("current_period_end_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CurrentPeriodEndAt)
	}
	if !m.CurrentPeriodStartAt.IsZero() {
		flag = true
		w.WriteName("current_period_start_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CurrentPeriodStartAt)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !m.BillingCycleAnchorAt.IsZero() {
		flag = true
		w.WriteName("billing_cycle_anchor_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.BillingCycleAnchorAt)
	}
	if !m.StartedAt.IsZero() {
		flag = true
		w.WriteName("started_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.StartedAt)
	}
	if m.Customer != nil {
		flag = true
		w.WriteName("customer")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Customer})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if m.WLPartnerID != 0 {
		flag = true
		w.WriteName("wl_partner_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WLPartnerID)
	}
	if m.PlanIDs != nil {
		flag = true
		w.WriteName("plan_ids")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.PlanIDs, opts})
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Subscription) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscription_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type SubscriptionHistory map[string]interface{}
type SubscriptionHistories []map[string]interface{}

func (m *SubscriptionHistory) SQLTableName() string  { return "history.\"subscription\"" }
func (m SubscriptionHistories) SQLTableName() string { return "history.\"subscription\"" }

func (m *SubscriptionHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscription_Select_history)
	return nil
}

func (m SubscriptionHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscription_Select_history)
	return nil
}

func (m SubscriptionHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m SubscriptionHistory) AccountID() core.Interface { return core.Interface{m["account_id"]} }
func (m SubscriptionHistory) CancelAtPeriodEnd() core.Interface {
	return core.Interface{m["cancel_at_period_end"]}
}
func (m SubscriptionHistory) CurrentPeriodEndAt() core.Interface {
	return core.Interface{m["current_period_end_at"]}
}
func (m SubscriptionHistory) CurrentPeriodStartAt() core.Interface {
	return core.Interface{m["current_period_start_at"]}
}
func (m SubscriptionHistory) Status() core.Interface { return core.Interface{m["status"]} }
func (m SubscriptionHistory) BillingCycleAnchorAt() core.Interface {
	return core.Interface{m["billing_cycle_anchor_at"]}
}
func (m SubscriptionHistory) StartedAt() core.Interface   { return core.Interface{m["started_at"]} }
func (m SubscriptionHistory) Customer() core.Interface    { return core.Interface{m["customer"]} }
func (m SubscriptionHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m SubscriptionHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }
func (m SubscriptionHistory) DeletedAt() core.Interface   { return core.Interface{m["deleted_at"]} }
func (m SubscriptionHistory) WLPartnerID() core.Interface { return core.Interface{m["wl_partner_id"]} }
func (m SubscriptionHistory) PlanIDs() core.Interface     { return core.Interface{m["plan_ids"]} }

func (m *SubscriptionHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(SubscriptionHistory, 14)
	res["id"] = data[0]
	res["account_id"] = data[1]
	res["cancel_at_period_end"] = data[2]
	res["current_period_end_at"] = data[3]
	res["current_period_start_at"] = data[4]
	res["status"] = data[5]
	res["billing_cycle_anchor_at"] = data[6]
	res["started_at"] = data[7]
	res["customer"] = data[8]
	res["created_at"] = data[9]
	res["updated_at"] = data[10]
	res["deleted_at"] = data[11]
	res["wl_partner_id"] = data[12]
	res["plan_ids"] = data[13]
	*m = res
	return nil
}

func (ms *SubscriptionHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	res := make(SubscriptionHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(SubscriptionHistory)
		m["id"] = data[0]
		m["account_id"] = data[1]
		m["cancel_at_period_end"] = data[2]
		m["current_period_end_at"] = data[3]
		m["current_period_start_at"] = data[4]
		m["status"] = data[5]
		m["billing_cycle_anchor_at"] = data[6]
		m["started_at"] = data[7]
		m["customer"] = data[8]
		m["created_at"] = data[9]
		m["updated_at"] = data[10]
		m["deleted_at"] = data[11]
		m["wl_partner_id"] = data[12]
		m["plan_ids"] = data[13]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type SubscriptionLines []*SubscriptionLine

const __sqlSubscriptionLine_Table = "subscription_line"
const __sqlSubscriptionLine_ListCols = "\"id\",\"plan_id\",\"subscription_id\",\"quantity\",\"created_at\",\"updated_at\""
const __sqlSubscriptionLine_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"plan_id\" = EXCLUDED.\"plan_id\",\"subscription_id\" = EXCLUDED.\"subscription_id\",\"quantity\" = EXCLUDED.\"quantity\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlSubscriptionLine_Insert = "INSERT INTO \"subscription_line\" (" + __sqlSubscriptionLine_ListCols + ") VALUES"
const __sqlSubscriptionLine_Select = "SELECT " + __sqlSubscriptionLine_ListCols + " FROM \"subscription_line\""
const __sqlSubscriptionLine_Select_history = "SELECT " + __sqlSubscriptionLine_ListCols + " FROM history.\"subscription_line\""
const __sqlSubscriptionLine_UpdateAll = "UPDATE \"subscription_line\" SET (" + __sqlSubscriptionLine_ListCols + ")"
const __sqlSubscriptionLine_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT subscription_line_pkey DO UPDATE SET"

func (m *SubscriptionLine) SQLTableName() string  { return "subscription_line" }
func (m *SubscriptionLines) SQLTableName() string { return "subscription_line" }
func (m *SubscriptionLine) SQLListCols() string   { return __sqlSubscriptionLine_ListCols }

func (m *SubscriptionLine) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlSubscriptionLine_ListCols + " FROM \"subscription_line\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *SubscriptionLine) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "subscription_line"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"plan_id": {
			ColumnName:       "plan_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"subscription_id": {
			ColumnName:       "subscription_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"quantity": {
			ColumnName:       "quantity",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "subscription_line", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*SubscriptionLine)(nil))
}

func (m *SubscriptionLine) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.PlanID,
		m.SubscriptionID,
		core.Int(m.Quantity),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *SubscriptionLine) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.PlanID,
		&m.SubscriptionID,
		(*core.Int)(&m.Quantity),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *SubscriptionLine) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *SubscriptionLines) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(SubscriptionLines, 0, 128)
	for rows.Next() {
		m := new(SubscriptionLine)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *SubscriptionLine) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionLine_Select)
	return nil
}

func (_ *SubscriptionLines) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionLine_Select)
	return nil
}

func (m *SubscriptionLine) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionLine_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms SubscriptionLines) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionLine_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(6)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *SubscriptionLine) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlSubscriptionLine_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlSubscriptionLine_ListColsOnConflict)
	return nil
}

func (ms SubscriptionLines) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlSubscriptionLine_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlSubscriptionLine_ListColsOnConflict)
	return nil
}

func (m *SubscriptionLine) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("subscription_line")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.PlanID != 0 {
		flag = true
		w.WriteName("plan_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PlanID)
	}
	if m.SubscriptionID != 0 {
		flag = true
		w.WriteName("subscription_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SubscriptionID)
	}
	if m.Quantity != 0 {
		flag = true
		w.WriteName("quantity")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Quantity)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *SubscriptionLine) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionLine_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type SubscriptionLineHistory map[string]interface{}
type SubscriptionLineHistories []map[string]interface{}

func (m *SubscriptionLineHistory) SQLTableName() string  { return "history.\"subscription_line\"" }
func (m SubscriptionLineHistories) SQLTableName() string { return "history.\"subscription_line\"" }

func (m *SubscriptionLineHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionLine_Select_history)
	return nil
}

func (m SubscriptionLineHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionLine_Select_history)
	return nil
}

func (m SubscriptionLineHistory) ID() core.Interface     { return core.Interface{m["id"]} }
func (m SubscriptionLineHistory) PlanID() core.Interface { return core.Interface{m["plan_id"]} }
func (m SubscriptionLineHistory) SubscriptionID() core.Interface {
	return core.Interface{m["subscription_id"]}
}
func (m SubscriptionLineHistory) Quantity() core.Interface  { return core.Interface{m["quantity"]} }
func (m SubscriptionLineHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m SubscriptionLineHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *SubscriptionLineHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(SubscriptionLineHistory, 6)
	res["id"] = data[0]
	res["plan_id"] = data[1]
	res["subscription_id"] = data[2]
	res["quantity"] = data[3]
	res["created_at"] = data[4]
	res["updated_at"] = data[5]
	*m = res
	return nil
}

func (ms *SubscriptionLineHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	res := make(SubscriptionLineHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(SubscriptionLineHistory)
		m["id"] = data[0]
		m["plan_id"] = data[1]
		m["subscription_id"] = data[2]
		m["quantity"] = data[3]
		m["created_at"] = data[4]
		m["updated_at"] = data[5]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
