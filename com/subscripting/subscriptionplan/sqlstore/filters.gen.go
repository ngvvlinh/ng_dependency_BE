// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package sqlstore

import (
	time "time"

	status3 "o.o/api/top/types/etc/status3"
	subscription_plan_interval "o.o/api/top/types/etc/subscription_plan_interval"
	sq "o.o/backend/pkg/common/sql/sq"
	dot "o.o/capi/dot"
)

type SubscriptionPlanFilters struct{ prefix string }

func NewSubscriptionPlanFilters(prefix string) SubscriptionPlanFilters {
	return SubscriptionPlanFilters{prefix}
}

func (ft *SubscriptionPlanFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(&ft.prefix, pred, args...)
}

func (ft SubscriptionPlanFilters) Prefix() string {
	return ft.prefix
}

func (ft *SubscriptionPlanFilters) ByID(ID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft *SubscriptionPlanFilters) ByIDPtr(ID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft *SubscriptionPlanFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft *SubscriptionPlanFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft *SubscriptionPlanFilters) ByPrice(Price int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "price",
		Value:  Price,
		IsNil:  Price == 0,
	}
}

func (ft *SubscriptionPlanFilters) ByPricePtr(Price *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "price",
		Value:  Price,
		IsNil:  Price == nil,
		IsZero: Price != nil && (*Price) == 0,
	}
}

func (ft *SubscriptionPlanFilters) ByStatus(Status status3.Status) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft *SubscriptionPlanFilters) ByStatusPtr(Status *status3.Status) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft *SubscriptionPlanFilters) ByDescription(Description string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == "",
	}
}

func (ft *SubscriptionPlanFilters) ByDescriptionPtr(Description *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == nil,
		IsZero: Description != nil && (*Description) == "",
	}
}

func (ft *SubscriptionPlanFilters) ByProductID(ProductID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == 0,
	}
}

func (ft *SubscriptionPlanFilters) ByProductIDPtr(ProductID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == nil,
		IsZero: ProductID != nil && (*ProductID) == 0,
	}
}

func (ft *SubscriptionPlanFilters) ByInterval(Interval subscription_plan_interval.SubscriptionPlanInterval) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "interval",
		Value:  Interval,
		IsNil:  Interval == 0,
	}
}

func (ft *SubscriptionPlanFilters) ByIntervalPtr(Interval *subscription_plan_interval.SubscriptionPlanInterval) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "interval",
		Value:  Interval,
		IsNil:  Interval == nil,
		IsZero: Interval != nil && (*Interval) == 0,
	}
}

func (ft *SubscriptionPlanFilters) ByIntervalCount(IntervalCount int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "interval_count",
		Value:  IntervalCount,
		IsNil:  IntervalCount == 0,
	}
}

func (ft *SubscriptionPlanFilters) ByIntervalCountPtr(IntervalCount *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "interval_count",
		Value:  IntervalCount,
		IsNil:  IntervalCount == nil,
		IsZero: IntervalCount != nil && (*IntervalCount) == 0,
	}
}

func (ft *SubscriptionPlanFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft *SubscriptionPlanFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft *SubscriptionPlanFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft *SubscriptionPlanFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft *SubscriptionPlanFilters) ByDeletedAt(DeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt.IsZero(),
	}
}

func (ft *SubscriptionPlanFilters) ByDeletedAtPtr(DeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt == nil,
		IsZero: DeletedAt != nil && (*DeletedAt).IsZero(),
	}
}

func (ft *SubscriptionPlanFilters) ByWLPartnerID(WLPartnerID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "wl_partner_id",
		Value:  WLPartnerID,
		IsNil:  WLPartnerID == 0,
	}
}

func (ft *SubscriptionPlanFilters) ByWLPartnerIDPtr(WLPartnerID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "wl_partner_id",
		Value:  WLPartnerID,
		IsNil:  WLPartnerID == nil,
		IsZero: WLPartnerID != nil && (*WLPartnerID) == 0,
	}
}
