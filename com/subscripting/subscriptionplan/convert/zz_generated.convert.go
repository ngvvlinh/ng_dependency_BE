// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	subscriptionplan "o.o/api/subscripting/subscriptionplan"
	subscriptionplanmodel "o.o/backend/com/subscripting/subscriptionplan/model"
	conversion "o.o/backend/pkg/common/conversion"
)

/*
Custom conversions: (none)

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*subscriptionplanmodel.SubscriptionPlan)(nil), (*subscriptionplan.SubscriptionPlan)(nil), func(arg, out interface{}) error {
		Convert_subscriptionplanmodel_SubscriptionPlan_subscriptionplan_SubscriptionPlan(arg.(*subscriptionplanmodel.SubscriptionPlan), out.(*subscriptionplan.SubscriptionPlan))
		return nil
	})
	s.Register(([]*subscriptionplanmodel.SubscriptionPlan)(nil), (*[]*subscriptionplan.SubscriptionPlan)(nil), func(arg, out interface{}) error {
		out0 := Convert_subscriptionplanmodel_SubscriptionPlans_subscriptionplan_SubscriptionPlans(arg.([]*subscriptionplanmodel.SubscriptionPlan))
		*out.(*[]*subscriptionplan.SubscriptionPlan) = out0
		return nil
	})
	s.Register((*subscriptionplan.SubscriptionPlan)(nil), (*subscriptionplanmodel.SubscriptionPlan)(nil), func(arg, out interface{}) error {
		Convert_subscriptionplan_SubscriptionPlan_subscriptionplanmodel_SubscriptionPlan(arg.(*subscriptionplan.SubscriptionPlan), out.(*subscriptionplanmodel.SubscriptionPlan))
		return nil
	})
	s.Register(([]*subscriptionplan.SubscriptionPlan)(nil), (*[]*subscriptionplanmodel.SubscriptionPlan)(nil), func(arg, out interface{}) error {
		out0 := Convert_subscriptionplan_SubscriptionPlans_subscriptionplanmodel_SubscriptionPlans(arg.([]*subscriptionplan.SubscriptionPlan))
		*out.(*[]*subscriptionplanmodel.SubscriptionPlan) = out0
		return nil
	})
	s.Register((*subscriptionplan.CreateSubrPlanArgs)(nil), (*subscriptionplan.SubscriptionPlan)(nil), func(arg, out interface{}) error {
		Apply_subscriptionplan_CreateSubrPlanArgs_subscriptionplan_SubscriptionPlan(arg.(*subscriptionplan.CreateSubrPlanArgs), out.(*subscriptionplan.SubscriptionPlan))
		return nil
	})
	s.Register((*subscriptionplan.UpdateSubrPlanArgs)(nil), (*subscriptionplan.SubscriptionPlan)(nil), func(arg, out interface{}) error {
		Apply_subscriptionplan_UpdateSubrPlanArgs_subscriptionplan_SubscriptionPlan(arg.(*subscriptionplan.UpdateSubrPlanArgs), out.(*subscriptionplan.SubscriptionPlan))
		return nil
	})
}

//-- convert o.o/api/subscripting/subscriptionplan.SubscriptionPlan --//

func Convert_subscriptionplanmodel_SubscriptionPlan_subscriptionplan_SubscriptionPlan(arg *subscriptionplanmodel.SubscriptionPlan, out *subscriptionplan.SubscriptionPlan) *subscriptionplan.SubscriptionPlan {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscriptionplan.SubscriptionPlan{}
	}
	convert_subscriptionplanmodel_SubscriptionPlan_subscriptionplan_SubscriptionPlan(arg, out)
	return out
}

func convert_subscriptionplanmodel_SubscriptionPlan_subscriptionplan_SubscriptionPlan(arg *subscriptionplanmodel.SubscriptionPlan, out *subscriptionplan.SubscriptionPlan) {
	out.ID = arg.ID                       // simple assign
	out.Name = arg.Name                   // simple assign
	out.Price = arg.Price                 // simple assign
	out.Status = arg.Status               // simple assign
	out.Description = arg.Description     // simple assign
	out.ProductID = arg.ProductID         // simple assign
	out.Interval = arg.Interval           // simple assign
	out.IntervalCount = arg.IntervalCount // simple assign
	out.CreatedAt = arg.CreatedAt         // simple assign
	out.UpdatedAt = arg.UpdatedAt         // simple assign
	out.DeletedAt = arg.DeletedAt         // simple assign
	out.WLPartnerID = arg.WLPartnerID     // simple assign
}

func Convert_subscriptionplanmodel_SubscriptionPlans_subscriptionplan_SubscriptionPlans(args []*subscriptionplanmodel.SubscriptionPlan) (outs []*subscriptionplan.SubscriptionPlan) {
	if args == nil {
		return nil
	}
	tmps := make([]subscriptionplan.SubscriptionPlan, len(args))
	outs = make([]*subscriptionplan.SubscriptionPlan, len(args))
	for i := range tmps {
		outs[i] = Convert_subscriptionplanmodel_SubscriptionPlan_subscriptionplan_SubscriptionPlan(args[i], &tmps[i])
	}
	return outs
}

func Convert_subscriptionplan_SubscriptionPlan_subscriptionplanmodel_SubscriptionPlan(arg *subscriptionplan.SubscriptionPlan, out *subscriptionplanmodel.SubscriptionPlan) *subscriptionplanmodel.SubscriptionPlan {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscriptionplanmodel.SubscriptionPlan{}
	}
	convert_subscriptionplan_SubscriptionPlan_subscriptionplanmodel_SubscriptionPlan(arg, out)
	return out
}

func convert_subscriptionplan_SubscriptionPlan_subscriptionplanmodel_SubscriptionPlan(arg *subscriptionplan.SubscriptionPlan, out *subscriptionplanmodel.SubscriptionPlan) {
	out.ID = arg.ID                       // simple assign
	out.Name = arg.Name                   // simple assign
	out.Price = arg.Price                 // simple assign
	out.Status = arg.Status               // simple assign
	out.Description = arg.Description     // simple assign
	out.ProductID = arg.ProductID         // simple assign
	out.Interval = arg.Interval           // simple assign
	out.IntervalCount = arg.IntervalCount // simple assign
	out.CreatedAt = arg.CreatedAt         // simple assign
	out.UpdatedAt = arg.UpdatedAt         // simple assign
	out.DeletedAt = arg.DeletedAt         // simple assign
	out.WLPartnerID = arg.WLPartnerID     // simple assign
}

func Convert_subscriptionplan_SubscriptionPlans_subscriptionplanmodel_SubscriptionPlans(args []*subscriptionplan.SubscriptionPlan) (outs []*subscriptionplanmodel.SubscriptionPlan) {
	if args == nil {
		return nil
	}
	tmps := make([]subscriptionplanmodel.SubscriptionPlan, len(args))
	outs = make([]*subscriptionplanmodel.SubscriptionPlan, len(args))
	for i := range tmps {
		outs[i] = Convert_subscriptionplan_SubscriptionPlan_subscriptionplanmodel_SubscriptionPlan(args[i], &tmps[i])
	}
	return outs
}

func Apply_subscriptionplan_CreateSubrPlanArgs_subscriptionplan_SubscriptionPlan(arg *subscriptionplan.CreateSubrPlanArgs, out *subscriptionplan.SubscriptionPlan) *subscriptionplan.SubscriptionPlan {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscriptionplan.SubscriptionPlan{}
	}
	apply_subscriptionplan_CreateSubrPlanArgs_subscriptionplan_SubscriptionPlan(arg, out)
	return out
}

func apply_subscriptionplan_CreateSubrPlanArgs_subscriptionplan_SubscriptionPlan(arg *subscriptionplan.CreateSubrPlanArgs, out *subscriptionplan.SubscriptionPlan) {
	out.ID = 0                            // zero value
	out.Name = arg.Name                   // simple assign
	out.Price = arg.Price                 // simple assign
	out.Status = 0                        // zero value
	out.Description = arg.Description     // simple assign
	out.ProductID = arg.ProductID         // simple assign
	out.Interval = arg.Interval           // simple assign
	out.IntervalCount = arg.IntervalCount // simple assign
	out.CreatedAt = time.Time{}           // zero value
	out.UpdatedAt = time.Time{}           // zero value
	out.DeletedAt = time.Time{}           // zero value
	out.WLPartnerID = 0                   // zero value
}

func Apply_subscriptionplan_UpdateSubrPlanArgs_subscriptionplan_SubscriptionPlan(arg *subscriptionplan.UpdateSubrPlanArgs, out *subscriptionplan.SubscriptionPlan) *subscriptionplan.SubscriptionPlan {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscriptionplan.SubscriptionPlan{}
	}
	apply_subscriptionplan_UpdateSubrPlanArgs_subscriptionplan_SubscriptionPlan(arg, out)
	return out
}

func apply_subscriptionplan_UpdateSubrPlanArgs_subscriptionplan_SubscriptionPlan(arg *subscriptionplan.UpdateSubrPlanArgs, out *subscriptionplan.SubscriptionPlan) {
	out.ID = out.ID                       // identifier
	out.Name = arg.Name                   // simple assign
	out.Price = arg.Price                 // simple assign
	out.Status = out.Status               // no change
	out.Description = arg.Description     // simple assign
	out.ProductID = arg.ProductID         // simple assign
	out.Interval = arg.Interval           // simple assign
	out.IntervalCount = arg.IntervalCount // simple assign
	out.CreatedAt = out.CreatedAt         // no change
	out.UpdatedAt = out.UpdatedAt         // no change
	out.DeletedAt = out.DeletedAt         // no change
	out.WLPartnerID = out.WLPartnerID     // no change
}
