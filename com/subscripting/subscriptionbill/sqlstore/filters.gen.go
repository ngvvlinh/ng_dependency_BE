// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package sqlstore

import (
	time "time"

	status4 "o.o/api/top/types/etc/status4"
	sq "o.o/backend/pkg/common/sql/sq"
	dot "o.o/capi/dot"
)

type SubscriptionBillFilters struct{ prefix string }

func NewSubscriptionBillFilters(prefix string) SubscriptionBillFilters {
	return SubscriptionBillFilters{prefix}
}

func (ft *SubscriptionBillFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(&ft.prefix, pred, args...)
}

func (ft SubscriptionBillFilters) Prefix() string {
	return ft.prefix
}

func (ft *SubscriptionBillFilters) ByID(ID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft *SubscriptionBillFilters) ByIDPtr(ID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft *SubscriptionBillFilters) ByAccountID(AccountID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == 0,
	}
}

func (ft *SubscriptionBillFilters) ByAccountIDPtr(AccountID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == nil,
		IsZero: AccountID != nil && (*AccountID) == 0,
	}
}

func (ft *SubscriptionBillFilters) BySubscriptionID(SubscriptionID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "subscription_id",
		Value:  SubscriptionID,
		IsNil:  SubscriptionID == 0,
	}
}

func (ft *SubscriptionBillFilters) BySubscriptionIDPtr(SubscriptionID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "subscription_id",
		Value:  SubscriptionID,
		IsNil:  SubscriptionID == nil,
		IsZero: SubscriptionID != nil && (*SubscriptionID) == 0,
	}
}

func (ft *SubscriptionBillFilters) ByTotalAmount(TotalAmount int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "total_amount",
		Value:  TotalAmount,
		IsNil:  TotalAmount == 0,
	}
}

func (ft *SubscriptionBillFilters) ByTotalAmountPtr(TotalAmount *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "total_amount",
		Value:  TotalAmount,
		IsNil:  TotalAmount == nil,
		IsZero: TotalAmount != nil && (*TotalAmount) == 0,
	}
}

func (ft *SubscriptionBillFilters) ByDescription(Description string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == "",
	}
}

func (ft *SubscriptionBillFilters) ByDescriptionPtr(Description *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == nil,
		IsZero: Description != nil && (*Description) == "",
	}
}

func (ft *SubscriptionBillFilters) ByPaymentID(PaymentID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "payment_id",
		Value:  PaymentID,
		IsNil:  PaymentID == 0,
	}
}

func (ft *SubscriptionBillFilters) ByPaymentIDPtr(PaymentID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "payment_id",
		Value:  PaymentID,
		IsNil:  PaymentID == nil,
		IsZero: PaymentID != nil && (*PaymentID) == 0,
	}
}

func (ft *SubscriptionBillFilters) ByPaymentStatus(PaymentStatus status4.Status) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "payment_status",
		Value:  PaymentStatus,
		IsNil:  PaymentStatus == 0,
	}
}

func (ft *SubscriptionBillFilters) ByPaymentStatusPtr(PaymentStatus *status4.Status) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "payment_status",
		Value:  PaymentStatus,
		IsNil:  PaymentStatus == nil,
		IsZero: PaymentStatus != nil && (*PaymentStatus) == 0,
	}
}

func (ft *SubscriptionBillFilters) ByStatus(Status status4.Status) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft *SubscriptionBillFilters) ByStatusPtr(Status *status4.Status) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft *SubscriptionBillFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft *SubscriptionBillFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft *SubscriptionBillFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft *SubscriptionBillFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft *SubscriptionBillFilters) ByDeletedAt(DeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt.IsZero(),
	}
}

func (ft *SubscriptionBillFilters) ByDeletedAtPtr(DeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt == nil,
		IsZero: DeletedAt != nil && (*DeletedAt).IsZero(),
	}
}

func (ft *SubscriptionBillFilters) ByWLPartnerID(WLPartnerID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "wl_partner_id",
		Value:  WLPartnerID,
		IsNil:  WLPartnerID == 0,
	}
}

func (ft *SubscriptionBillFilters) ByWLPartnerIDPtr(WLPartnerID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "wl_partner_id",
		Value:  WLPartnerID,
		IsNil:  WLPartnerID == nil,
		IsZero: WLPartnerID != nil && (*WLPartnerID) == 0,
	}
}

type SubscriptionBillLineFilters struct{ prefix string }

func NewSubscriptionBillLineFilters(prefix string) SubscriptionBillLineFilters {
	return SubscriptionBillLineFilters{prefix}
}

func (ft *SubscriptionBillLineFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(&ft.prefix, pred, args...)
}

func (ft SubscriptionBillLineFilters) Prefix() string {
	return ft.prefix
}

func (ft *SubscriptionBillLineFilters) ByID(ID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft *SubscriptionBillLineFilters) ByIDPtr(ID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft *SubscriptionBillLineFilters) ByLineAmount(LineAmount int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "line_amount",
		Value:  LineAmount,
		IsNil:  LineAmount == 0,
	}
}

func (ft *SubscriptionBillLineFilters) ByLineAmountPtr(LineAmount *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "line_amount",
		Value:  LineAmount,
		IsNil:  LineAmount == nil,
		IsZero: LineAmount != nil && (*LineAmount) == 0,
	}
}

func (ft *SubscriptionBillLineFilters) ByPrice(Price int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "price",
		Value:  Price,
		IsNil:  Price == 0,
	}
}

func (ft *SubscriptionBillLineFilters) ByPricePtr(Price *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "price",
		Value:  Price,
		IsNil:  Price == nil,
		IsZero: Price != nil && (*Price) == 0,
	}
}

func (ft *SubscriptionBillLineFilters) ByQuantity(Quantity int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "quantity",
		Value:  Quantity,
		IsNil:  Quantity == 0,
	}
}

func (ft *SubscriptionBillLineFilters) ByQuantityPtr(Quantity *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "quantity",
		Value:  Quantity,
		IsNil:  Quantity == nil,
		IsZero: Quantity != nil && (*Quantity) == 0,
	}
}

func (ft *SubscriptionBillLineFilters) ByDescription(Description string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == "",
	}
}

func (ft *SubscriptionBillLineFilters) ByDescriptionPtr(Description *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == nil,
		IsZero: Description != nil && (*Description) == "",
	}
}

func (ft *SubscriptionBillLineFilters) ByPeriodStartAt(PeriodStartAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "period_start_at",
		Value:  PeriodStartAt,
		IsNil:  PeriodStartAt.IsZero(),
	}
}

func (ft *SubscriptionBillLineFilters) ByPeriodStartAtPtr(PeriodStartAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "period_start_at",
		Value:  PeriodStartAt,
		IsNil:  PeriodStartAt == nil,
		IsZero: PeriodStartAt != nil && (*PeriodStartAt).IsZero(),
	}
}

func (ft *SubscriptionBillLineFilters) ByPeriodEndAt(PeriodEndAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "period_end_at",
		Value:  PeriodEndAt,
		IsNil:  PeriodEndAt.IsZero(),
	}
}

func (ft *SubscriptionBillLineFilters) ByPeriodEndAtPtr(PeriodEndAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "period_end_at",
		Value:  PeriodEndAt,
		IsNil:  PeriodEndAt == nil,
		IsZero: PeriodEndAt != nil && (*PeriodEndAt).IsZero(),
	}
}

func (ft *SubscriptionBillLineFilters) BySubscriptionBillID(SubscriptionBillID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "subscription_bill_id",
		Value:  SubscriptionBillID,
		IsNil:  SubscriptionBillID == 0,
	}
}

func (ft *SubscriptionBillLineFilters) BySubscriptionBillIDPtr(SubscriptionBillID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "subscription_bill_id",
		Value:  SubscriptionBillID,
		IsNil:  SubscriptionBillID == nil,
		IsZero: SubscriptionBillID != nil && (*SubscriptionBillID) == 0,
	}
}

func (ft *SubscriptionBillLineFilters) BySubscriptionID(SubscriptionID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "subscription_id",
		Value:  SubscriptionID,
		IsNil:  SubscriptionID == 0,
	}
}

func (ft *SubscriptionBillLineFilters) BySubscriptionIDPtr(SubscriptionID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "subscription_id",
		Value:  SubscriptionID,
		IsNil:  SubscriptionID == nil,
		IsZero: SubscriptionID != nil && (*SubscriptionID) == 0,
	}
}

func (ft *SubscriptionBillLineFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft *SubscriptionBillLineFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft *SubscriptionBillLineFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft *SubscriptionBillLineFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}
