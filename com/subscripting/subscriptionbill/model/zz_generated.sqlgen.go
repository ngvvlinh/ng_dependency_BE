// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type SubscriptionBills []*SubscriptionBill

const __sqlSubscriptionBill_Table = "subscription_bill"
const __sqlSubscriptionBill_ListCols = "\"id\",\"account_id\",\"subscription_id\",\"total_amount\",\"description\",\"payment_id\",\"payment_status\",\"status\",\"customer\",\"created_at\",\"updated_at\",\"deleted_at\",\"wl_partner_id\""
const __sqlSubscriptionBill_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"account_id\" = EXCLUDED.\"account_id\",\"subscription_id\" = EXCLUDED.\"subscription_id\",\"total_amount\" = EXCLUDED.\"total_amount\",\"description\" = EXCLUDED.\"description\",\"payment_id\" = EXCLUDED.\"payment_id\",\"payment_status\" = EXCLUDED.\"payment_status\",\"status\" = EXCLUDED.\"status\",\"customer\" = EXCLUDED.\"customer\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\",\"wl_partner_id\" = EXCLUDED.\"wl_partner_id\""
const __sqlSubscriptionBill_Insert = "INSERT INTO \"subscription_bill\" (" + __sqlSubscriptionBill_ListCols + ") VALUES"
const __sqlSubscriptionBill_Select = "SELECT " + __sqlSubscriptionBill_ListCols + " FROM \"subscription_bill\""
const __sqlSubscriptionBill_Select_history = "SELECT " + __sqlSubscriptionBill_ListCols + " FROM history.\"subscription_bill\""
const __sqlSubscriptionBill_UpdateAll = "UPDATE \"subscription_bill\" SET (" + __sqlSubscriptionBill_ListCols + ")"
const __sqlSubscriptionBill_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT subscription_bill_pkey DO UPDATE SET"

func (m *SubscriptionBill) SQLTableName() string  { return "subscription_bill" }
func (m *SubscriptionBills) SQLTableName() string { return "subscription_bill" }
func (m *SubscriptionBill) SQLListCols() string   { return __sqlSubscriptionBill_ListCols }

func (m *SubscriptionBill) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlSubscriptionBill_ListCols + " FROM \"subscription_bill\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *SubscriptionBill) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "subscription_bill"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"account_id": {
			ColumnName:       "account_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"subscription_id": {
			ColumnName:       "subscription_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"total_amount": {
			ColumnName:       "total_amount",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"description": {
			ColumnName:       "description",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"payment_id": {
			ColumnName:       "payment_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"payment_status": {
			ColumnName:       "payment_status",
			ColumnType:       "status4.Status",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"Z", "P", "S", "N"},
		},
		"status": {
			ColumnName:       "status",
			ColumnType:       "status4.Status",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"Z", "P", "S", "N"},
		},
		"customer": {
			ColumnName:       "customer",
			ColumnType:       "*sharemodel.CustomerInfo",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_at": {
			ColumnName:       "deleted_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"wl_partner_id": {
			ColumnName:       "wl_partner_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "subscription_bill", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*SubscriptionBill)(nil))
}

func (m *SubscriptionBill) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.AccountID,
		m.SubscriptionID,
		core.Int(m.TotalAmount),
		core.String(m.Description),
		m.PaymentID,
		m.PaymentStatus,
		m.Status,
		core.JSON{m.Customer},
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, create),
		core.Time(m.DeletedAt),
		m.WLPartnerID,
	}
}

func (m *SubscriptionBill) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.AccountID,
		&m.SubscriptionID,
		(*core.Int)(&m.TotalAmount),
		(*core.String)(&m.Description),
		&m.PaymentID,
		&m.PaymentStatus,
		&m.Status,
		core.JSON{&m.Customer},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
		&m.WLPartnerID,
	}
}

func (m *SubscriptionBill) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *SubscriptionBills) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(SubscriptionBills, 0, 128)
	for rows.Next() {
		m := new(SubscriptionBill)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *SubscriptionBill) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionBill_Select)
	return nil
}

func (_ *SubscriptionBills) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionBill_Select)
	return nil
}

func (m *SubscriptionBill) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionBill_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(13)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms SubscriptionBills) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionBill_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(13)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *SubscriptionBill) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlSubscriptionBill_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlSubscriptionBill_ListColsOnConflict)
	return nil
}

func (ms SubscriptionBills) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlSubscriptionBill_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlSubscriptionBill_ListColsOnConflict)
	return nil
}

func (m *SubscriptionBill) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("subscription_bill")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.AccountID != 0 {
		flag = true
		w.WriteName("account_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccountID)
	}
	if m.SubscriptionID != 0 {
		flag = true
		w.WriteName("subscription_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SubscriptionID)
	}
	if m.TotalAmount != 0 {
		flag = true
		w.WriteName("total_amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalAmount)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.PaymentID != 0 {
		flag = true
		w.WriteName("payment_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PaymentID)
	}
	if m.PaymentStatus != 0 {
		flag = true
		w.WriteName("payment_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PaymentStatus)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if m.Customer != nil {
		flag = true
		w.WriteName("customer")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Customer})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UpdatedAt)
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if m.WLPartnerID != 0 {
		flag = true
		w.WriteName("wl_partner_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WLPartnerID)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *SubscriptionBill) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionBill_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(13)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type SubscriptionBillHistory map[string]interface{}
type SubscriptionBillHistories []map[string]interface{}

func (m *SubscriptionBillHistory) SQLTableName() string  { return "history.\"subscription_bill\"" }
func (m SubscriptionBillHistories) SQLTableName() string { return "history.\"subscription_bill\"" }

func (m *SubscriptionBillHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionBill_Select_history)
	return nil
}

func (m SubscriptionBillHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionBill_Select_history)
	return nil
}

func (m SubscriptionBillHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m SubscriptionBillHistory) AccountID() core.Interface { return core.Interface{m["account_id"]} }
func (m SubscriptionBillHistory) SubscriptionID() core.Interface {
	return core.Interface{m["subscription_id"]}
}
func (m SubscriptionBillHistory) TotalAmount() core.Interface {
	return core.Interface{m["total_amount"]}
}
func (m SubscriptionBillHistory) Description() core.Interface {
	return core.Interface{m["description"]}
}
func (m SubscriptionBillHistory) PaymentID() core.Interface { return core.Interface{m["payment_id"]} }
func (m SubscriptionBillHistory) PaymentStatus() core.Interface {
	return core.Interface{m["payment_status"]}
}
func (m SubscriptionBillHistory) Status() core.Interface    { return core.Interface{m["status"]} }
func (m SubscriptionBillHistory) Customer() core.Interface  { return core.Interface{m["customer"]} }
func (m SubscriptionBillHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m SubscriptionBillHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }
func (m SubscriptionBillHistory) DeletedAt() core.Interface { return core.Interface{m["deleted_at"]} }
func (m SubscriptionBillHistory) WLPartnerID() core.Interface {
	return core.Interface{m["wl_partner_id"]}
}

func (m *SubscriptionBillHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 13)
	args := make([]interface{}, 13)
	for i := 0; i < 13; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(SubscriptionBillHistory, 13)
	res["id"] = data[0]
	res["account_id"] = data[1]
	res["subscription_id"] = data[2]
	res["total_amount"] = data[3]
	res["description"] = data[4]
	res["payment_id"] = data[5]
	res["payment_status"] = data[6]
	res["status"] = data[7]
	res["customer"] = data[8]
	res["created_at"] = data[9]
	res["updated_at"] = data[10]
	res["deleted_at"] = data[11]
	res["wl_partner_id"] = data[12]
	*m = res
	return nil
}

func (ms *SubscriptionBillHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 13)
	args := make([]interface{}, 13)
	for i := 0; i < 13; i++ {
		args[i] = &data[i]
	}
	res := make(SubscriptionBillHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(SubscriptionBillHistory)
		m["id"] = data[0]
		m["account_id"] = data[1]
		m["subscription_id"] = data[2]
		m["total_amount"] = data[3]
		m["description"] = data[4]
		m["payment_id"] = data[5]
		m["payment_status"] = data[6]
		m["status"] = data[7]
		m["customer"] = data[8]
		m["created_at"] = data[9]
		m["updated_at"] = data[10]
		m["deleted_at"] = data[11]
		m["wl_partner_id"] = data[12]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type SubscriptionBillLines []*SubscriptionBillLine

const __sqlSubscriptionBillLine_Table = "subscription_bill_line"
const __sqlSubscriptionBillLine_ListCols = "\"id\",\"line_amount\",\"price\",\"quantity\",\"description\",\"period_start_at\",\"period_end_at\",\"subscription_bill_id\",\"subscription_id\",\"created_at\",\"updated_at\""
const __sqlSubscriptionBillLine_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"line_amount\" = EXCLUDED.\"line_amount\",\"price\" = EXCLUDED.\"price\",\"quantity\" = EXCLUDED.\"quantity\",\"description\" = EXCLUDED.\"description\",\"period_start_at\" = EXCLUDED.\"period_start_at\",\"period_end_at\" = EXCLUDED.\"period_end_at\",\"subscription_bill_id\" = EXCLUDED.\"subscription_bill_id\",\"subscription_id\" = EXCLUDED.\"subscription_id\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlSubscriptionBillLine_Insert = "INSERT INTO \"subscription_bill_line\" (" + __sqlSubscriptionBillLine_ListCols + ") VALUES"
const __sqlSubscriptionBillLine_Select = "SELECT " + __sqlSubscriptionBillLine_ListCols + " FROM \"subscription_bill_line\""
const __sqlSubscriptionBillLine_Select_history = "SELECT " + __sqlSubscriptionBillLine_ListCols + " FROM history.\"subscription_bill_line\""
const __sqlSubscriptionBillLine_UpdateAll = "UPDATE \"subscription_bill_line\" SET (" + __sqlSubscriptionBillLine_ListCols + ")"
const __sqlSubscriptionBillLine_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT subscription_bill_line_pkey DO UPDATE SET"

func (m *SubscriptionBillLine) SQLTableName() string  { return "subscription_bill_line" }
func (m *SubscriptionBillLines) SQLTableName() string { return "subscription_bill_line" }
func (m *SubscriptionBillLine) SQLListCols() string   { return __sqlSubscriptionBillLine_ListCols }

func (m *SubscriptionBillLine) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlSubscriptionBillLine_ListCols + " FROM \"subscription_bill_line\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *SubscriptionBillLine) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "subscription_bill_line"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"line_amount": {
			ColumnName:       "line_amount",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"price": {
			ColumnName:       "price",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"quantity": {
			ColumnName:       "quantity",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"description": {
			ColumnName:       "description",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"period_start_at": {
			ColumnName:       "period_start_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"period_end_at": {
			ColumnName:       "period_end_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"subscription_bill_id": {
			ColumnName:       "subscription_bill_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"subscription_id": {
			ColumnName:       "subscription_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "subscription_bill_line", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*SubscriptionBillLine)(nil))
}

func (m *SubscriptionBillLine) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.Int(m.LineAmount),
		core.Int(m.Price),
		core.Int(m.Quantity),
		core.String(m.Description),
		core.Time(m.PeriodStartAt),
		core.Time(m.PeriodEndAt),
		m.SubscriptionBillID,
		m.SubscriptionID,
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *SubscriptionBillLine) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.Int)(&m.LineAmount),
		(*core.Int)(&m.Price),
		(*core.Int)(&m.Quantity),
		(*core.String)(&m.Description),
		(*core.Time)(&m.PeriodStartAt),
		(*core.Time)(&m.PeriodEndAt),
		&m.SubscriptionBillID,
		&m.SubscriptionID,
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *SubscriptionBillLine) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *SubscriptionBillLines) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(SubscriptionBillLines, 0, 128)
	for rows.Next() {
		m := new(SubscriptionBillLine)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *SubscriptionBillLine) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionBillLine_Select)
	return nil
}

func (_ *SubscriptionBillLines) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionBillLine_Select)
	return nil
}

func (m *SubscriptionBillLine) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionBillLine_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(11)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms SubscriptionBillLines) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionBillLine_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(11)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *SubscriptionBillLine) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlSubscriptionBillLine_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlSubscriptionBillLine_ListColsOnConflict)
	return nil
}

func (ms SubscriptionBillLines) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlSubscriptionBillLine_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlSubscriptionBillLine_ListColsOnConflict)
	return nil
}

func (m *SubscriptionBillLine) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("subscription_bill_line")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.LineAmount != 0 {
		flag = true
		w.WriteName("line_amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.LineAmount)
	}
	if m.Price != 0 {
		flag = true
		w.WriteName("price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Price)
	}
	if m.Quantity != 0 {
		flag = true
		w.WriteName("quantity")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Quantity)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if !m.PeriodStartAt.IsZero() {
		flag = true
		w.WriteName("period_start_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PeriodStartAt)
	}
	if !m.PeriodEndAt.IsZero() {
		flag = true
		w.WriteName("period_end_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PeriodEndAt)
	}
	if m.SubscriptionBillID != 0 {
		flag = true
		w.WriteName("subscription_bill_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SubscriptionBillID)
	}
	if m.SubscriptionID != 0 {
		flag = true
		w.WriteName("subscription_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SubscriptionID)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if true { // always update time
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *SubscriptionBillLine) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionBillLine_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(11)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type SubscriptionBillLineHistory map[string]interface{}
type SubscriptionBillLineHistories []map[string]interface{}

func (m *SubscriptionBillLineHistory) SQLTableName() string {
	return "history.\"subscription_bill_line\""
}
func (m SubscriptionBillLineHistories) SQLTableName() string {
	return "history.\"subscription_bill_line\""
}

func (m *SubscriptionBillLineHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionBillLine_Select_history)
	return nil
}

func (m SubscriptionBillLineHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSubscriptionBillLine_Select_history)
	return nil
}

func (m SubscriptionBillLineHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m SubscriptionBillLineHistory) LineAmount() core.Interface {
	return core.Interface{m["line_amount"]}
}
func (m SubscriptionBillLineHistory) Price() core.Interface    { return core.Interface{m["price"]} }
func (m SubscriptionBillLineHistory) Quantity() core.Interface { return core.Interface{m["quantity"]} }
func (m SubscriptionBillLineHistory) Description() core.Interface {
	return core.Interface{m["description"]}
}
func (m SubscriptionBillLineHistory) PeriodStartAt() core.Interface {
	return core.Interface{m["period_start_at"]}
}
func (m SubscriptionBillLineHistory) PeriodEndAt() core.Interface {
	return core.Interface{m["period_end_at"]}
}
func (m SubscriptionBillLineHistory) SubscriptionBillID() core.Interface {
	return core.Interface{m["subscription_bill_id"]}
}
func (m SubscriptionBillLineHistory) SubscriptionID() core.Interface {
	return core.Interface{m["subscription_id"]}
}
func (m SubscriptionBillLineHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m SubscriptionBillLineHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *SubscriptionBillLineHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 11)
	args := make([]interface{}, 11)
	for i := 0; i < 11; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(SubscriptionBillLineHistory, 11)
	res["id"] = data[0]
	res["line_amount"] = data[1]
	res["price"] = data[2]
	res["quantity"] = data[3]
	res["description"] = data[4]
	res["period_start_at"] = data[5]
	res["period_end_at"] = data[6]
	res["subscription_bill_id"] = data[7]
	res["subscription_id"] = data[8]
	res["created_at"] = data[9]
	res["updated_at"] = data[10]
	*m = res
	return nil
}

func (ms *SubscriptionBillLineHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 11)
	args := make([]interface{}, 11)
	for i := 0; i < 11; i++ {
		args[i] = &data[i]
	}
	res := make(SubscriptionBillLineHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(SubscriptionBillLineHistory)
		m["id"] = data[0]
		m["line_amount"] = data[1]
		m["price"] = data[2]
		m["quantity"] = data[3]
		m["description"] = data[4]
		m["period_start_at"] = data[5]
		m["period_end_at"] = data[6]
		m["subscription_bill_id"] = data[7]
		m["subscription_id"] = data[8]
		m["created_at"] = data[9]
		m["updated_at"] = data[10]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
