// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	subscriptionbill "o.o/api/subscripting/subscriptionbill"
	subscriptionconvert "o.o/backend/com/subscripting/subscription/convert"
	subscriptionbillmodel "o.o/backend/com/subscripting/subscriptionbill/model"
	conversion "o.o/backend/pkg/common/conversion"
)

/*
Custom conversions: (none)

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*subscriptionbillmodel.SubscriptionBill)(nil), (*subscriptionbill.SubscriptionBill)(nil), func(arg, out interface{}) error {
		Convert_subscriptionbillmodel_SubscriptionBill_subscriptionbill_SubscriptionBill(arg.(*subscriptionbillmodel.SubscriptionBill), out.(*subscriptionbill.SubscriptionBill))
		return nil
	})
	s.Register(([]*subscriptionbillmodel.SubscriptionBill)(nil), (*[]*subscriptionbill.SubscriptionBill)(nil), func(arg, out interface{}) error {
		out0 := Convert_subscriptionbillmodel_SubscriptionBills_subscriptionbill_SubscriptionBills(arg.([]*subscriptionbillmodel.SubscriptionBill))
		*out.(*[]*subscriptionbill.SubscriptionBill) = out0
		return nil
	})
	s.Register((*subscriptionbill.SubscriptionBill)(nil), (*subscriptionbillmodel.SubscriptionBill)(nil), func(arg, out interface{}) error {
		Convert_subscriptionbill_SubscriptionBill_subscriptionbillmodel_SubscriptionBill(arg.(*subscriptionbill.SubscriptionBill), out.(*subscriptionbillmodel.SubscriptionBill))
		return nil
	})
	s.Register(([]*subscriptionbill.SubscriptionBill)(nil), (*[]*subscriptionbillmodel.SubscriptionBill)(nil), func(arg, out interface{}) error {
		out0 := Convert_subscriptionbill_SubscriptionBills_subscriptionbillmodel_SubscriptionBills(arg.([]*subscriptionbill.SubscriptionBill))
		*out.(*[]*subscriptionbillmodel.SubscriptionBill) = out0
		return nil
	})
	s.Register((*subscriptionbill.CreateSubscriptionBillArgs)(nil), (*subscriptionbill.SubscriptionBill)(nil), func(arg, out interface{}) error {
		Apply_subscriptionbill_CreateSubscriptionBillArgs_subscriptionbill_SubscriptionBill(arg.(*subscriptionbill.CreateSubscriptionBillArgs), out.(*subscriptionbill.SubscriptionBill))
		return nil
	})
	s.Register((*subscriptionbillmodel.SubscriptionBillFtLine)(nil), (*subscriptionbill.SubscriptionBillFtLine)(nil), func(arg, out interface{}) error {
		Convert_subscriptionbillmodel_SubscriptionBillFtLine_subscriptionbill_SubscriptionBillFtLine(arg.(*subscriptionbillmodel.SubscriptionBillFtLine), out.(*subscriptionbill.SubscriptionBillFtLine))
		return nil
	})
	s.Register(([]*subscriptionbillmodel.SubscriptionBillFtLine)(nil), (*[]*subscriptionbill.SubscriptionBillFtLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_subscriptionbillmodel_SubscriptionBillFtLines_subscriptionbill_SubscriptionBillFtLines(arg.([]*subscriptionbillmodel.SubscriptionBillFtLine))
		*out.(*[]*subscriptionbill.SubscriptionBillFtLine) = out0
		return nil
	})
	s.Register((*subscriptionbill.SubscriptionBillFtLine)(nil), (*subscriptionbillmodel.SubscriptionBillFtLine)(nil), func(arg, out interface{}) error {
		Convert_subscriptionbill_SubscriptionBillFtLine_subscriptionbillmodel_SubscriptionBillFtLine(arg.(*subscriptionbill.SubscriptionBillFtLine), out.(*subscriptionbillmodel.SubscriptionBillFtLine))
		return nil
	})
	s.Register(([]*subscriptionbill.SubscriptionBillFtLine)(nil), (*[]*subscriptionbillmodel.SubscriptionBillFtLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_subscriptionbill_SubscriptionBillFtLines_subscriptionbillmodel_SubscriptionBillFtLines(arg.([]*subscriptionbill.SubscriptionBillFtLine))
		*out.(*[]*subscriptionbillmodel.SubscriptionBillFtLine) = out0
		return nil
	})
	s.Register((*subscriptionbillmodel.SubscriptionBillLine)(nil), (*subscriptionbill.SubscriptionBillLine)(nil), func(arg, out interface{}) error {
		Convert_subscriptionbillmodel_SubscriptionBillLine_subscriptionbill_SubscriptionBillLine(arg.(*subscriptionbillmodel.SubscriptionBillLine), out.(*subscriptionbill.SubscriptionBillLine))
		return nil
	})
	s.Register(([]*subscriptionbillmodel.SubscriptionBillLine)(nil), (*[]*subscriptionbill.SubscriptionBillLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_subscriptionbillmodel_SubscriptionBillLines_subscriptionbill_SubscriptionBillLines(arg.([]*subscriptionbillmodel.SubscriptionBillLine))
		*out.(*[]*subscriptionbill.SubscriptionBillLine) = out0
		return nil
	})
	s.Register((*subscriptionbill.SubscriptionBillLine)(nil), (*subscriptionbillmodel.SubscriptionBillLine)(nil), func(arg, out interface{}) error {
		Convert_subscriptionbill_SubscriptionBillLine_subscriptionbillmodel_SubscriptionBillLine(arg.(*subscriptionbill.SubscriptionBillLine), out.(*subscriptionbillmodel.SubscriptionBillLine))
		return nil
	})
	s.Register(([]*subscriptionbill.SubscriptionBillLine)(nil), (*[]*subscriptionbillmodel.SubscriptionBillLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_subscriptionbill_SubscriptionBillLines_subscriptionbillmodel_SubscriptionBillLines(arg.([]*subscriptionbill.SubscriptionBillLine))
		*out.(*[]*subscriptionbillmodel.SubscriptionBillLine) = out0
		return nil
	})
}

//-- convert o.o/api/subscripting/subscriptionbill.SubscriptionBill --//

func Convert_subscriptionbillmodel_SubscriptionBill_subscriptionbill_SubscriptionBill(arg *subscriptionbillmodel.SubscriptionBill, out *subscriptionbill.SubscriptionBill) *subscriptionbill.SubscriptionBill {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscriptionbill.SubscriptionBill{}
	}
	convert_subscriptionbillmodel_SubscriptionBill_subscriptionbill_SubscriptionBill(arg, out)
	return out
}

func convert_subscriptionbillmodel_SubscriptionBill_subscriptionbill_SubscriptionBill(arg *subscriptionbillmodel.SubscriptionBill, out *subscriptionbill.SubscriptionBill) {
	out.ID = arg.ID                         // simple assign
	out.AccountID = arg.AccountID           // simple assign
	out.SubscriptionID = arg.SubscriptionID // simple assign
	out.TotalAmount = arg.TotalAmount       // simple assign
	out.Description = arg.Description       // simple assign
	out.PaymentID = arg.PaymentID           // simple assign
	out.PaymentStatus = arg.PaymentStatus   // simple assign
	out.Status = arg.Status                 // simple assign
	out.Customer = subscriptionconvert.Convert_sharemodel_CustomerInfo_subscriptingtypes_CustomerInfo(arg.Customer, nil)
	out.CreatedAt = arg.CreatedAt     // simple assign
	out.UpdatedAt = arg.UpdatedAt     // simple assign
	out.DeletedAt = arg.DeletedAt     // simple assign
	out.WLPartnerID = arg.WLPartnerID // simple assign
}

func Convert_subscriptionbillmodel_SubscriptionBills_subscriptionbill_SubscriptionBills(args []*subscriptionbillmodel.SubscriptionBill) (outs []*subscriptionbill.SubscriptionBill) {
	if args == nil {
		return nil
	}
	tmps := make([]subscriptionbill.SubscriptionBill, len(args))
	outs = make([]*subscriptionbill.SubscriptionBill, len(args))
	for i := range tmps {
		outs[i] = Convert_subscriptionbillmodel_SubscriptionBill_subscriptionbill_SubscriptionBill(args[i], &tmps[i])
	}
	return outs
}

func Convert_subscriptionbill_SubscriptionBill_subscriptionbillmodel_SubscriptionBill(arg *subscriptionbill.SubscriptionBill, out *subscriptionbillmodel.SubscriptionBill) *subscriptionbillmodel.SubscriptionBill {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscriptionbillmodel.SubscriptionBill{}
	}
	convert_subscriptionbill_SubscriptionBill_subscriptionbillmodel_SubscriptionBill(arg, out)
	return out
}

func convert_subscriptionbill_SubscriptionBill_subscriptionbillmodel_SubscriptionBill(arg *subscriptionbill.SubscriptionBill, out *subscriptionbillmodel.SubscriptionBill) {
	out.ID = arg.ID                         // simple assign
	out.AccountID = arg.AccountID           // simple assign
	out.SubscriptionID = arg.SubscriptionID // simple assign
	out.TotalAmount = arg.TotalAmount       // simple assign
	out.Description = arg.Description       // simple assign
	out.PaymentID = arg.PaymentID           // simple assign
	out.PaymentStatus = arg.PaymentStatus   // simple assign
	out.Status = arg.Status                 // simple assign
	out.Customer = subscriptionconvert.Convert_subscriptingtypes_CustomerInfo_sharemodel_CustomerInfo(arg.Customer, nil)
	out.CreatedAt = arg.CreatedAt     // simple assign
	out.UpdatedAt = arg.UpdatedAt     // simple assign
	out.DeletedAt = arg.DeletedAt     // simple assign
	out.WLPartnerID = arg.WLPartnerID // simple assign
}

func Convert_subscriptionbill_SubscriptionBills_subscriptionbillmodel_SubscriptionBills(args []*subscriptionbill.SubscriptionBill) (outs []*subscriptionbillmodel.SubscriptionBill) {
	if args == nil {
		return nil
	}
	tmps := make([]subscriptionbillmodel.SubscriptionBill, len(args))
	outs = make([]*subscriptionbillmodel.SubscriptionBill, len(args))
	for i := range tmps {
		outs[i] = Convert_subscriptionbill_SubscriptionBill_subscriptionbillmodel_SubscriptionBill(args[i], &tmps[i])
	}
	return outs
}

func Apply_subscriptionbill_CreateSubscriptionBillArgs_subscriptionbill_SubscriptionBill(arg *subscriptionbill.CreateSubscriptionBillArgs, out *subscriptionbill.SubscriptionBill) *subscriptionbill.SubscriptionBill {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscriptionbill.SubscriptionBill{}
	}
	apply_subscriptionbill_CreateSubscriptionBillArgs_subscriptionbill_SubscriptionBill(arg, out)
	return out
}

func apply_subscriptionbill_CreateSubscriptionBillArgs_subscriptionbill_SubscriptionBill(arg *subscriptionbill.CreateSubscriptionBillArgs, out *subscriptionbill.SubscriptionBill) {
	out.ID = 0                              // zero value
	out.AccountID = arg.AccountID           // simple assign
	out.SubscriptionID = arg.SubscriptionID // simple assign
	out.TotalAmount = arg.TotalAmount       // simple assign
	out.Description = arg.Description       // simple assign
	out.PaymentID = 0                       // zero value
	out.PaymentStatus = 0                   // zero value
	out.Status = 0                          // zero value
	out.Customer = arg.Customer             // simple assign
	out.CreatedAt = time.Time{}             // zero value
	out.UpdatedAt = time.Time{}             // zero value
	out.DeletedAt = time.Time{}             // zero value
	out.WLPartnerID = 0                     // zero value
}

//-- convert o.o/api/subscripting/subscriptionbill.SubscriptionBillFtLine --//

func Convert_subscriptionbillmodel_SubscriptionBillFtLine_subscriptionbill_SubscriptionBillFtLine(arg *subscriptionbillmodel.SubscriptionBillFtLine, out *subscriptionbill.SubscriptionBillFtLine) *subscriptionbill.SubscriptionBillFtLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscriptionbill.SubscriptionBillFtLine{}
	}
	convert_subscriptionbillmodel_SubscriptionBillFtLine_subscriptionbill_SubscriptionBillFtLine(arg, out)
	return out
}

func convert_subscriptionbillmodel_SubscriptionBillFtLine_subscriptionbill_SubscriptionBillFtLine(arg *subscriptionbillmodel.SubscriptionBillFtLine, out *subscriptionbill.SubscriptionBillFtLine) {
	out.SubscriptionBill = Convert_subscriptionbillmodel_SubscriptionBill_subscriptionbill_SubscriptionBill(arg.SubscriptionBill, nil)
	out.Lines = Convert_subscriptionbillmodel_SubscriptionBillLines_subscriptionbill_SubscriptionBillLines(arg.Lines)
}

func Convert_subscriptionbillmodel_SubscriptionBillFtLines_subscriptionbill_SubscriptionBillFtLines(args []*subscriptionbillmodel.SubscriptionBillFtLine) (outs []*subscriptionbill.SubscriptionBillFtLine) {
	if args == nil {
		return nil
	}
	tmps := make([]subscriptionbill.SubscriptionBillFtLine, len(args))
	outs = make([]*subscriptionbill.SubscriptionBillFtLine, len(args))
	for i := range tmps {
		outs[i] = Convert_subscriptionbillmodel_SubscriptionBillFtLine_subscriptionbill_SubscriptionBillFtLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_subscriptionbill_SubscriptionBillFtLine_subscriptionbillmodel_SubscriptionBillFtLine(arg *subscriptionbill.SubscriptionBillFtLine, out *subscriptionbillmodel.SubscriptionBillFtLine) *subscriptionbillmodel.SubscriptionBillFtLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscriptionbillmodel.SubscriptionBillFtLine{}
	}
	convert_subscriptionbill_SubscriptionBillFtLine_subscriptionbillmodel_SubscriptionBillFtLine(arg, out)
	return out
}

func convert_subscriptionbill_SubscriptionBillFtLine_subscriptionbillmodel_SubscriptionBillFtLine(arg *subscriptionbill.SubscriptionBillFtLine, out *subscriptionbillmodel.SubscriptionBillFtLine) {
	out.SubscriptionBill = Convert_subscriptionbill_SubscriptionBill_subscriptionbillmodel_SubscriptionBill(arg.SubscriptionBill, nil)
	out.Lines = Convert_subscriptionbill_SubscriptionBillLines_subscriptionbillmodel_SubscriptionBillLines(arg.Lines)
}

func Convert_subscriptionbill_SubscriptionBillFtLines_subscriptionbillmodel_SubscriptionBillFtLines(args []*subscriptionbill.SubscriptionBillFtLine) (outs []*subscriptionbillmodel.SubscriptionBillFtLine) {
	if args == nil {
		return nil
	}
	tmps := make([]subscriptionbillmodel.SubscriptionBillFtLine, len(args))
	outs = make([]*subscriptionbillmodel.SubscriptionBillFtLine, len(args))
	for i := range tmps {
		outs[i] = Convert_subscriptionbill_SubscriptionBillFtLine_subscriptionbillmodel_SubscriptionBillFtLine(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/api/subscripting/subscriptionbill.SubscriptionBillLine --//

func Convert_subscriptionbillmodel_SubscriptionBillLine_subscriptionbill_SubscriptionBillLine(arg *subscriptionbillmodel.SubscriptionBillLine, out *subscriptionbill.SubscriptionBillLine) *subscriptionbill.SubscriptionBillLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscriptionbill.SubscriptionBillLine{}
	}
	convert_subscriptionbillmodel_SubscriptionBillLine_subscriptionbill_SubscriptionBillLine(arg, out)
	return out
}

func convert_subscriptionbillmodel_SubscriptionBillLine_subscriptionbill_SubscriptionBillLine(arg *subscriptionbillmodel.SubscriptionBillLine, out *subscriptionbill.SubscriptionBillLine) {
	out.ID = arg.ID                                 // simple assign
	out.LineAmount = arg.LineAmount                 // simple assign
	out.Price = arg.Price                           // simple assign
	out.Quantity = arg.Quantity                     // simple assign
	out.Description = arg.Description               // simple assign
	out.PeriodStartAt = arg.PeriodStartAt           // simple assign
	out.PeriodEndAt = arg.PeriodEndAt               // simple assign
	out.SubscriptionBillID = arg.SubscriptionBillID // simple assign
	out.SubscriptionID = arg.SubscriptionID         // simple assign
	out.CreatedAt = arg.CreatedAt                   // simple assign
	out.UpdatedAt = arg.UpdatedAt                   // simple assign
}

func Convert_subscriptionbillmodel_SubscriptionBillLines_subscriptionbill_SubscriptionBillLines(args []*subscriptionbillmodel.SubscriptionBillLine) (outs []*subscriptionbill.SubscriptionBillLine) {
	if args == nil {
		return nil
	}
	tmps := make([]subscriptionbill.SubscriptionBillLine, len(args))
	outs = make([]*subscriptionbill.SubscriptionBillLine, len(args))
	for i := range tmps {
		outs[i] = Convert_subscriptionbillmodel_SubscriptionBillLine_subscriptionbill_SubscriptionBillLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_subscriptionbill_SubscriptionBillLine_subscriptionbillmodel_SubscriptionBillLine(arg *subscriptionbill.SubscriptionBillLine, out *subscriptionbillmodel.SubscriptionBillLine) *subscriptionbillmodel.SubscriptionBillLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &subscriptionbillmodel.SubscriptionBillLine{}
	}
	convert_subscriptionbill_SubscriptionBillLine_subscriptionbillmodel_SubscriptionBillLine(arg, out)
	return out
}

func convert_subscriptionbill_SubscriptionBillLine_subscriptionbillmodel_SubscriptionBillLine(arg *subscriptionbill.SubscriptionBillLine, out *subscriptionbillmodel.SubscriptionBillLine) {
	out.ID = arg.ID                                 // simple assign
	out.LineAmount = arg.LineAmount                 // simple assign
	out.Price = arg.Price                           // simple assign
	out.Quantity = arg.Quantity                     // simple assign
	out.Description = arg.Description               // simple assign
	out.PeriodStartAt = arg.PeriodStartAt           // simple assign
	out.PeriodEndAt = arg.PeriodEndAt               // simple assign
	out.SubscriptionBillID = arg.SubscriptionBillID // simple assign
	out.SubscriptionID = arg.SubscriptionID         // simple assign
	out.CreatedAt = arg.CreatedAt                   // simple assign
	out.UpdatedAt = arg.UpdatedAt                   // simple assign
}

func Convert_subscriptionbill_SubscriptionBillLines_subscriptionbillmodel_SubscriptionBillLines(args []*subscriptionbill.SubscriptionBillLine) (outs []*subscriptionbillmodel.SubscriptionBillLine) {
	if args == nil {
		return nil
	}
	tmps := make([]subscriptionbillmodel.SubscriptionBillLine, len(args))
	outs = make([]*subscriptionbillmodel.SubscriptionBillLine, len(args))
	for i := range tmps {
		outs[i] = Convert_subscriptionbill_SubscriptionBillLine_subscriptionbillmodel_SubscriptionBillLine(args[i], &tmps[i])
	}
	return outs
}
