// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type FbWebhookLogs []*FbWebhookLog

const __sqlFbWebhookLog_Table = "fb_webhook_log"
const __sqlFbWebhookLog_ListCols = "\"id\",\"page_id\",\"type\",\"external_id\",\"data\",\"error\",\"created_at\",\"updated_at\""
const __sqlFbWebhookLog_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"page_id\" = EXCLUDED.\"page_id\",\"type\" = EXCLUDED.\"type\",\"external_id\" = EXCLUDED.\"external_id\",\"data\" = EXCLUDED.\"data\",\"error\" = EXCLUDED.\"error\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlFbWebhookLog_Insert = "INSERT INTO \"fb_webhook_log\" (" + __sqlFbWebhookLog_ListCols + ") VALUES"
const __sqlFbWebhookLog_Select = "SELECT " + __sqlFbWebhookLog_ListCols + " FROM \"fb_webhook_log\""
const __sqlFbWebhookLog_Select_history = "SELECT " + __sqlFbWebhookLog_ListCols + " FROM history.\"fb_webhook_log\""
const __sqlFbWebhookLog_UpdateAll = "UPDATE \"fb_webhook_log\" SET (" + __sqlFbWebhookLog_ListCols + ")"
const __sqlFbWebhookLog_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_webhook_log_pkey DO UPDATE SET"

func (m *FbWebhookLog) SQLTableName() string  { return "fb_webhook_log" }
func (m *FbWebhookLogs) SQLTableName() string { return "fb_webhook_log" }
func (m *FbWebhookLog) SQLListCols() string   { return __sqlFbWebhookLog_ListCols }

func (m *FbWebhookLog) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbWebhookLog_ListCols + " FROM \"fb_webhook_log\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbWebhookLog) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_webhook_log"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"page_id": {
			ColumnName:       "page_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"type": {
			ColumnName:       "type",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_id": {
			ColumnName:       "external_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"data": {
			ColumnName:       "data",
			ColumnType:       "json.RawMessage",
			ColumnDBType:     "[]byte",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"error": {
			ColumnName:       "error",
			ColumnType:       "*etopmodel.Error",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "fb_webhook_log", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbWebhookLog)(nil))
}

func (m *FbWebhookLog) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.PageID),
		core.String(m.Type),
		core.String(m.ExternalID),
		core.JSON{m.Data},
		core.JSON{m.Error},
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *FbWebhookLog) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.PageID),
		(*core.String)(&m.Type),
		(*core.String)(&m.ExternalID),
		core.JSON{&m.Data},
		core.JSON{&m.Error},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *FbWebhookLog) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbWebhookLogs) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbWebhookLogs, 0, 128)
	for rows.Next() {
		m := new(FbWebhookLog)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbWebhookLog) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbWebhookLog_Select)
	return nil
}

func (_ *FbWebhookLogs) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbWebhookLog_Select)
	return nil
}

func (m *FbWebhookLog) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbWebhookLog_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbWebhookLogs) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbWebhookLog_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(8)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbWebhookLog) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbWebhookLog_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbWebhookLog_ListColsOnConflict)
	return nil
}

func (ms FbWebhookLogs) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbWebhookLog_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbWebhookLog_ListColsOnConflict)
	return nil
}

func (m *FbWebhookLog) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_webhook_log")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.PageID != "" {
		flag = true
		w.WriteName("page_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PageID)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if m.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalID)
	}
	if m.Data != nil {
		flag = true
		w.WriteName("data")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Data})
	}
	if m.Error != nil {
		flag = true
		w.WriteName("error")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Error})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbWebhookLog) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbWebhookLog_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbWebhookLogHistory map[string]interface{}
type FbWebhookLogHistories []map[string]interface{}

func (m *FbWebhookLogHistory) SQLTableName() string  { return "history.\"fb_webhook_log\"" }
func (m FbWebhookLogHistories) SQLTableName() string { return "history.\"fb_webhook_log\"" }

func (m *FbWebhookLogHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbWebhookLog_Select_history)
	return nil
}

func (m FbWebhookLogHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbWebhookLog_Select_history)
	return nil
}

func (m FbWebhookLogHistory) ID() core.Interface         { return core.Interface{m["id"]} }
func (m FbWebhookLogHistory) PageID() core.Interface     { return core.Interface{m["page_id"]} }
func (m FbWebhookLogHistory) Type() core.Interface       { return core.Interface{m["type"]} }
func (m FbWebhookLogHistory) ExternalID() core.Interface { return core.Interface{m["external_id"]} }
func (m FbWebhookLogHistory) Data() core.Interface       { return core.Interface{m["data"]} }
func (m FbWebhookLogHistory) Error() core.Interface      { return core.Interface{m["error"]} }
func (m FbWebhookLogHistory) CreatedAt() core.Interface  { return core.Interface{m["created_at"]} }
func (m FbWebhookLogHistory) UpdatedAt() core.Interface  { return core.Interface{m["updated_at"]} }

func (m *FbWebhookLogHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbWebhookLogHistory, 8)
	res["id"] = data[0]
	res["page_id"] = data[1]
	res["type"] = data[2]
	res["external_id"] = data[3]
	res["data"] = data[4]
	res["error"] = data[5]
	res["created_at"] = data[6]
	res["updated_at"] = data[7]
	*m = res
	return nil
}

func (ms *FbWebhookLogHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	res := make(FbWebhookLogHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbWebhookLogHistory)
		m["id"] = data[0]
		m["page_id"] = data[1]
		m["type"] = data[2]
		m["external_id"] = data[3]
		m["data"] = data[4]
		m["error"] = data[5]
		m["created_at"] = data[6]
		m["updated_at"] = data[7]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
