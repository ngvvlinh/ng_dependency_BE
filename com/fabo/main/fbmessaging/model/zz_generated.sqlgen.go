// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type FbCustomerConversations []*FbCustomerConversation

const __sqlFbCustomerConversation_Table = "fb_customer_conversation"
const __sqlFbCustomerConversation_ListCols = "\"id\",\"external_page_id\",\"external_id\",\"external_user_id\",\"external_user_name\",\"external_from\",\"external_post_attachments\",\"external_comment_attachment\",\"external_message_attachments\",\"type\",\"last_message\",\"last_message_at\",\"last_customer_message_at\",\"last_message_external_id\",\"created_at\",\"updated_at\",\"deleted_at\""
const __sqlFbCustomerConversation_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"external_page_id\" = EXCLUDED.\"external_page_id\",\"external_id\" = EXCLUDED.\"external_id\",\"external_user_id\" = EXCLUDED.\"external_user_id\",\"external_user_name\" = EXCLUDED.\"external_user_name\",\"external_from\" = EXCLUDED.\"external_from\",\"external_post_attachments\" = EXCLUDED.\"external_post_attachments\",\"external_comment_attachment\" = EXCLUDED.\"external_comment_attachment\",\"external_message_attachments\" = EXCLUDED.\"external_message_attachments\",\"type\" = EXCLUDED.\"type\",\"last_message\" = EXCLUDED.\"last_message\",\"last_message_at\" = EXCLUDED.\"last_message_at\",\"last_customer_message_at\" = EXCLUDED.\"last_customer_message_at\",\"last_message_external_id\" = EXCLUDED.\"last_message_external_id\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\""
const __sqlFbCustomerConversation_Insert = "INSERT INTO \"fb_customer_conversation\" (" + __sqlFbCustomerConversation_ListCols + ") VALUES"
const __sqlFbCustomerConversation_Select = "SELECT " + __sqlFbCustomerConversation_ListCols + " FROM \"fb_customer_conversation\""
const __sqlFbCustomerConversation_Select_history = "SELECT " + __sqlFbCustomerConversation_ListCols + " FROM history.\"fb_customer_conversation\""
const __sqlFbCustomerConversation_UpdateAll = "UPDATE \"fb_customer_conversation\" SET (" + __sqlFbCustomerConversation_ListCols + ")"
const __sqlFbCustomerConversation_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_customer_conversation_pkey DO UPDATE SET"

func (m *FbCustomerConversation) SQLTableName() string  { return "fb_customer_conversation" }
func (m *FbCustomerConversations) SQLTableName() string { return "fb_customer_conversation" }
func (m *FbCustomerConversation) SQLListCols() string   { return __sqlFbCustomerConversation_ListCols }

func (m *FbCustomerConversation) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbCustomerConversation_ListCols + " FROM \"fb_customer_conversation\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbCustomerConversation) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_customer_conversation"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_page_id": {
			ColumnName:       "external_page_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_id": {
			ColumnName:       "external_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_user_id": {
			ColumnName:       "external_user_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_user_name": {
			ColumnName:       "external_user_name",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_from": {
			ColumnName:       "external_from",
			ColumnType:       "*FbObjectFrom",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_post_attachments": {
			ColumnName:       "external_post_attachments",
			ColumnType:       "[]*PostAttachment",
			ColumnDBType:     "[]*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_comment_attachment": {
			ColumnName:       "external_comment_attachment",
			ColumnType:       "*CommentAttachment",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_message_attachments": {
			ColumnName:       "external_message_attachments",
			ColumnType:       "[]*FbMessageAttachment",
			ColumnDBType:     "[]*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"type": {
			ColumnName:       "type",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"last_message": {
			ColumnName:       "last_message",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"last_message_at": {
			ColumnName:       "last_message_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"last_customer_message_at": {
			ColumnName:       "last_customer_message_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"last_message_external_id": {
			ColumnName:       "last_message_external_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_at": {
			ColumnName:       "deleted_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "fb_customer_conversation", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbCustomerConversation)(nil))
}

func (m *FbCustomerConversation) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.ExternalPageID),
		core.String(m.ExternalID),
		core.String(m.ExternalUserID),
		core.String(m.ExternalUserName),
		core.JSON{m.ExternalFrom},
		core.JSON{m.ExternalPostAttachments},
		core.JSON{m.ExternalCommentAttachment},
		core.JSON{m.ExternalMessageAttachments},
		core.Int(m.Type),
		core.String(m.LastMessage),
		core.Time(m.LastMessageAt),
		core.Time(m.LastCustomerMessageAt),
		core.String(m.LastMessageExternalID),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
	}
}

func (m *FbCustomerConversation) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.ExternalPageID),
		(*core.String)(&m.ExternalID),
		(*core.String)(&m.ExternalUserID),
		(*core.String)(&m.ExternalUserName),
		core.JSON{&m.ExternalFrom},
		core.JSON{&m.ExternalPostAttachments},
		core.JSON{&m.ExternalCommentAttachment},
		core.JSON{&m.ExternalMessageAttachments},
		(*core.Int)(&m.Type),
		(*core.String)(&m.LastMessage),
		(*core.Time)(&m.LastMessageAt),
		(*core.Time)(&m.LastCustomerMessageAt),
		(*core.String)(&m.LastMessageExternalID),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *FbCustomerConversation) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbCustomerConversations) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbCustomerConversations, 0, 128)
	for rows.Next() {
		m := new(FbCustomerConversation)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbCustomerConversation) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversation_Select)
	return nil
}

func (_ *FbCustomerConversations) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversation_Select)
	return nil
}

func (m *FbCustomerConversation) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversation_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(17)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbCustomerConversations) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversation_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(17)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbCustomerConversation) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbCustomerConversation_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbCustomerConversation_ListColsOnConflict)
	return nil
}

func (ms FbCustomerConversations) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbCustomerConversation_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbCustomerConversation_ListColsOnConflict)
	return nil
}

func (m *FbCustomerConversation) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_customer_conversation")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ExternalPageID != "" {
		flag = true
		w.WriteName("external_page_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalPageID)
	}
	if m.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalID)
	}
	if m.ExternalUserID != "" {
		flag = true
		w.WriteName("external_user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalUserID)
	}
	if m.ExternalUserName != "" {
		flag = true
		w.WriteName("external_user_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalUserName)
	}
	if m.ExternalFrom != nil {
		flag = true
		w.WriteName("external_from")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalFrom})
	}
	if m.ExternalPostAttachments != nil {
		flag = true
		w.WriteName("external_post_attachments")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalPostAttachments})
	}
	if m.ExternalCommentAttachment != nil {
		flag = true
		w.WriteName("external_comment_attachment")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalCommentAttachment})
	}
	if m.ExternalMessageAttachments != nil {
		flag = true
		w.WriteName("external_message_attachments")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalMessageAttachments})
	}
	if m.Type != 0 {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if m.LastMessage != "" {
		flag = true
		w.WriteName("last_message")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.LastMessage)
	}
	if !m.LastMessageAt.IsZero() {
		flag = true
		w.WriteName("last_message_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.LastMessageAt)
	}
	if !m.LastCustomerMessageAt.IsZero() {
		flag = true
		w.WriteName("last_customer_message_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.LastCustomerMessageAt)
	}
	if m.LastMessageExternalID != "" {
		flag = true
		w.WriteName("last_message_external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.LastMessageExternalID)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if true { // always update time
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbCustomerConversation) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversation_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(17)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbCustomerConversationHistory map[string]interface{}
type FbCustomerConversationHistories []map[string]interface{}

func (m *FbCustomerConversationHistory) SQLTableName() string {
	return "history.\"fb_customer_conversation\""
}
func (m FbCustomerConversationHistories) SQLTableName() string {
	return "history.\"fb_customer_conversation\""
}

func (m *FbCustomerConversationHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversation_Select_history)
	return nil
}

func (m FbCustomerConversationHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversation_Select_history)
	return nil
}

func (m FbCustomerConversationHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m FbCustomerConversationHistory) ExternalPageID() core.Interface {
	return core.Interface{m["external_page_id"]}
}
func (m FbCustomerConversationHistory) ExternalID() core.Interface {
	return core.Interface{m["external_id"]}
}
func (m FbCustomerConversationHistory) ExternalUserID() core.Interface {
	return core.Interface{m["external_user_id"]}
}
func (m FbCustomerConversationHistory) ExternalUserName() core.Interface {
	return core.Interface{m["external_user_name"]}
}
func (m FbCustomerConversationHistory) ExternalFrom() core.Interface {
	return core.Interface{m["external_from"]}
}
func (m FbCustomerConversationHistory) ExternalPostAttachments() core.Interface {
	return core.Interface{m["external_post_attachments"]}
}
func (m FbCustomerConversationHistory) ExternalCommentAttachment() core.Interface {
	return core.Interface{m["external_comment_attachment"]}
}
func (m FbCustomerConversationHistory) ExternalMessageAttachments() core.Interface {
	return core.Interface{m["external_message_attachments"]}
}
func (m FbCustomerConversationHistory) Type() core.Interface { return core.Interface{m["type"]} }
func (m FbCustomerConversationHistory) LastMessage() core.Interface {
	return core.Interface{m["last_message"]}
}
func (m FbCustomerConversationHistory) LastMessageAt() core.Interface {
	return core.Interface{m["last_message_at"]}
}
func (m FbCustomerConversationHistory) LastCustomerMessageAt() core.Interface {
	return core.Interface{m["last_customer_message_at"]}
}
func (m FbCustomerConversationHistory) LastMessageExternalID() core.Interface {
	return core.Interface{m["last_message_external_id"]}
}
func (m FbCustomerConversationHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m FbCustomerConversationHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}
func (m FbCustomerConversationHistory) DeletedAt() core.Interface {
	return core.Interface{m["deleted_at"]}
}

func (m *FbCustomerConversationHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 17)
	args := make([]interface{}, 17)
	for i := 0; i < 17; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbCustomerConversationHistory, 17)
	res["id"] = data[0]
	res["external_page_id"] = data[1]
	res["external_id"] = data[2]
	res["external_user_id"] = data[3]
	res["external_user_name"] = data[4]
	res["external_from"] = data[5]
	res["external_post_attachments"] = data[6]
	res["external_comment_attachment"] = data[7]
	res["external_message_attachments"] = data[8]
	res["type"] = data[9]
	res["last_message"] = data[10]
	res["last_message_at"] = data[11]
	res["last_customer_message_at"] = data[12]
	res["last_message_external_id"] = data[13]
	res["created_at"] = data[14]
	res["updated_at"] = data[15]
	res["deleted_at"] = data[16]
	*m = res
	return nil
}

func (ms *FbCustomerConversationHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 17)
	args := make([]interface{}, 17)
	for i := 0; i < 17; i++ {
		args[i] = &data[i]
	}
	res := make(FbCustomerConversationHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbCustomerConversationHistory)
		m["id"] = data[0]
		m["external_page_id"] = data[1]
		m["external_id"] = data[2]
		m["external_user_id"] = data[3]
		m["external_user_name"] = data[4]
		m["external_from"] = data[5]
		m["external_post_attachments"] = data[6]
		m["external_comment_attachment"] = data[7]
		m["external_message_attachments"] = data[8]
		m["type"] = data[9]
		m["last_message"] = data[10]
		m["last_message_at"] = data[11]
		m["last_customer_message_at"] = data[12]
		m["last_message_external_id"] = data[13]
		m["created_at"] = data[14]
		m["updated_at"] = data[15]
		m["deleted_at"] = data[16]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type FbCustomerConversationStates []*FbCustomerConversationState

const __sqlFbCustomerConversationState_Table = "fb_customer_conversation_state"
const __sqlFbCustomerConversationState_ListCols = "\"id\",\"is_read\",\"external_page_id\",\"updated_at\""
const __sqlFbCustomerConversationState_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"is_read\" = EXCLUDED.\"is_read\",\"external_page_id\" = EXCLUDED.\"external_page_id\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlFbCustomerConversationState_Insert = "INSERT INTO \"fb_customer_conversation_state\" (" + __sqlFbCustomerConversationState_ListCols + ") VALUES"
const __sqlFbCustomerConversationState_Select = "SELECT " + __sqlFbCustomerConversationState_ListCols + " FROM \"fb_customer_conversation_state\""
const __sqlFbCustomerConversationState_Select_history = "SELECT " + __sqlFbCustomerConversationState_ListCols + " FROM history.\"fb_customer_conversation_state\""
const __sqlFbCustomerConversationState_UpdateAll = "UPDATE \"fb_customer_conversation_state\" SET (" + __sqlFbCustomerConversationState_ListCols + ")"
const __sqlFbCustomerConversationState_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_customer_conversation_state_pkey DO UPDATE SET"

func (m *FbCustomerConversationState) SQLTableName() string  { return "fb_customer_conversation_state" }
func (m *FbCustomerConversationStates) SQLTableName() string { return "fb_customer_conversation_state" }
func (m *FbCustomerConversationState) SQLListCols() string {
	return __sqlFbCustomerConversationState_ListCols
}

func (m *FbCustomerConversationState) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbCustomerConversationState_ListCols + " FROM \"fb_customer_conversation_state\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbCustomerConversationState) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_customer_conversation_state"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"is_read": {
			ColumnName:       "is_read",
			ColumnType:       "bool",
			ColumnDBType:     "bool",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_page_id": {
			ColumnName:       "external_page_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "fb_customer_conversation_state", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbCustomerConversationState)(nil))
}

func (m *FbCustomerConversationState) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.Bool(m.IsRead),
		core.String(m.ExternalPageID),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *FbCustomerConversationState) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.Bool)(&m.IsRead),
		(*core.String)(&m.ExternalPageID),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *FbCustomerConversationState) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbCustomerConversationStates) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbCustomerConversationStates, 0, 128)
	for rows.Next() {
		m := new(FbCustomerConversationState)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbCustomerConversationState) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversationState_Select)
	return nil
}

func (_ *FbCustomerConversationStates) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversationState_Select)
	return nil
}

func (m *FbCustomerConversationState) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversationState_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(4)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbCustomerConversationStates) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversationState_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(4)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbCustomerConversationState) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbCustomerConversationState_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbCustomerConversationState_ListColsOnConflict)
	return nil
}

func (ms FbCustomerConversationStates) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbCustomerConversationState_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbCustomerConversationState_ListColsOnConflict)
	return nil
}

func (m *FbCustomerConversationState) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_customer_conversation_state")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.IsRead {
		flag = true
		w.WriteName("is_read")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.IsRead)
	}
	if m.ExternalPageID != "" {
		flag = true
		w.WriteName("external_page_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalPageID)
	}
	if true { // always update time
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbCustomerConversationState) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversationState_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(4)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbCustomerConversationStateHistory map[string]interface{}
type FbCustomerConversationStateHistories []map[string]interface{}

func (m *FbCustomerConversationStateHistory) SQLTableName() string {
	return "history.\"fb_customer_conversation_state\""
}
func (m FbCustomerConversationStateHistories) SQLTableName() string {
	return "history.\"fb_customer_conversation_state\""
}

func (m *FbCustomerConversationStateHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversationState_Select_history)
	return nil
}

func (m FbCustomerConversationStateHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversationState_Select_history)
	return nil
}

func (m FbCustomerConversationStateHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m FbCustomerConversationStateHistory) IsRead() core.Interface {
	return core.Interface{m["is_read"]}
}
func (m FbCustomerConversationStateHistory) ExternalPageID() core.Interface {
	return core.Interface{m["external_page_id"]}
}
func (m FbCustomerConversationStateHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *FbCustomerConversationStateHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 4)
	args := make([]interface{}, 4)
	for i := 0; i < 4; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbCustomerConversationStateHistory, 4)
	res["id"] = data[0]
	res["is_read"] = data[1]
	res["external_page_id"] = data[2]
	res["updated_at"] = data[3]
	*m = res
	return nil
}

func (ms *FbCustomerConversationStateHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 4)
	args := make([]interface{}, 4)
	for i := 0; i < 4; i++ {
		args[i] = &data[i]
	}
	res := make(FbCustomerConversationStateHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbCustomerConversationStateHistory)
		m["id"] = data[0]
		m["is_read"] = data[1]
		m["external_page_id"] = data[2]
		m["updated_at"] = data[3]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type FbExternalComments []*FbExternalComment

const __sqlFbExternalComment_Table = "fb_external_comment"
const __sqlFbExternalComment_ListCols = "\"id\",\"external_post_id\",\"external_page_id\",\"external_id\",\"external_user_id\",\"external_parent_id\",\"external_parent_user_id\",\"external_message\",\"external_comment_count\",\"external_parent\",\"external_from\",\"external_attachment\",\"external_created_time\",\"source\",\"internal_source\",\"created_at\",\"updated_at\",\"deleted_at\",\"created_by\""
const __sqlFbExternalComment_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"external_post_id\" = EXCLUDED.\"external_post_id\",\"external_page_id\" = EXCLUDED.\"external_page_id\",\"external_id\" = EXCLUDED.\"external_id\",\"external_user_id\" = EXCLUDED.\"external_user_id\",\"external_parent_id\" = EXCLUDED.\"external_parent_id\",\"external_parent_user_id\" = EXCLUDED.\"external_parent_user_id\",\"external_message\" = EXCLUDED.\"external_message\",\"external_comment_count\" = EXCLUDED.\"external_comment_count\",\"external_parent\" = EXCLUDED.\"external_parent\",\"external_from\" = EXCLUDED.\"external_from\",\"external_attachment\" = EXCLUDED.\"external_attachment\",\"external_created_time\" = EXCLUDED.\"external_created_time\",\"source\" = EXCLUDED.\"source\",\"internal_source\" = EXCLUDED.\"internal_source\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\",\"created_by\" = EXCLUDED.\"created_by\""
const __sqlFbExternalComment_Insert = "INSERT INTO \"fb_external_comment\" (" + __sqlFbExternalComment_ListCols + ") VALUES"
const __sqlFbExternalComment_Select = "SELECT " + __sqlFbExternalComment_ListCols + " FROM \"fb_external_comment\""
const __sqlFbExternalComment_Select_history = "SELECT " + __sqlFbExternalComment_ListCols + " FROM history.\"fb_external_comment\""
const __sqlFbExternalComment_UpdateAll = "UPDATE \"fb_external_comment\" SET (" + __sqlFbExternalComment_ListCols + ")"
const __sqlFbExternalComment_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_external_comment_pkey DO UPDATE SET"

func (m *FbExternalComment) SQLTableName() string  { return "fb_external_comment" }
func (m *FbExternalComments) SQLTableName() string { return "fb_external_comment" }
func (m *FbExternalComment) SQLListCols() string   { return __sqlFbExternalComment_ListCols }

func (m *FbExternalComment) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbExternalComment_ListCols + " FROM \"fb_external_comment\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbExternalComment) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_external_comment"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_post_id": {
			ColumnName:       "external_post_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_page_id": {
			ColumnName:       "external_page_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_id": {
			ColumnName:       "external_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_user_id": {
			ColumnName:       "external_user_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_parent_id": {
			ColumnName:       "external_parent_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_parent_user_id": {
			ColumnName:       "external_parent_user_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_message": {
			ColumnName:       "external_message",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_comment_count": {
			ColumnName:       "external_comment_count",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_parent": {
			ColumnName:       "external_parent",
			ColumnType:       "*FbObjectParent",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_from": {
			ColumnName:       "external_from",
			ColumnType:       "*FbObjectFrom",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_attachment": {
			ColumnName:       "external_attachment",
			ColumnType:       "*CommentAttachment",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_created_time": {
			ColumnName:       "external_created_time",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"source": {
			ColumnName:       "source",
			ColumnType:       "fb_comment_source.FbCommentSource",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"unknown", "web", "app"},
		},
		"internal_source": {
			ColumnName:       "internal_source",
			ColumnType:       "fb_internal_source.FbInternalSource",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"unknown", "fabo", "facebook"},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_at": {
			ColumnName:       "deleted_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_by": {
			ColumnName:       "created_by",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "fb_external_comment", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbExternalComment)(nil))
}

func (m *FbExternalComment) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.ExternalPostID),
		core.String(m.ExternalPageID),
		core.String(m.ExternalID),
		core.String(m.ExternalUserID),
		core.String(m.ExternalParentID),
		core.String(m.ExternalParentUserID),
		core.String(m.ExternalMessage),
		core.Int(m.ExternalCommentCount),
		core.JSON{m.ExternalParent},
		core.JSON{m.ExternalFrom},
		core.JSON{m.ExternalAttachment},
		core.Time(m.ExternalCreatedTime),
		m.Source,
		m.InternalSource,
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
		m.CreatedBy,
	}
}

func (m *FbExternalComment) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.ExternalPostID),
		(*core.String)(&m.ExternalPageID),
		(*core.String)(&m.ExternalID),
		(*core.String)(&m.ExternalUserID),
		(*core.String)(&m.ExternalParentID),
		(*core.String)(&m.ExternalParentUserID),
		(*core.String)(&m.ExternalMessage),
		(*core.Int)(&m.ExternalCommentCount),
		core.JSON{&m.ExternalParent},
		core.JSON{&m.ExternalFrom},
		core.JSON{&m.ExternalAttachment},
		(*core.Time)(&m.ExternalCreatedTime),
		&m.Source,
		&m.InternalSource,
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
		&m.CreatedBy,
	}
}

func (m *FbExternalComment) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbExternalComments) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbExternalComments, 0, 128)
	for rows.Next() {
		m := new(FbExternalComment)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbExternalComment) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalComment_Select)
	return nil
}

func (_ *FbExternalComments) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalComment_Select)
	return nil
}

func (m *FbExternalComment) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalComment_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(19)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbExternalComments) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalComment_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(19)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbExternalComment) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalComment_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalComment_ListColsOnConflict)
	return nil
}

func (ms FbExternalComments) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalComment_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalComment_ListColsOnConflict)
	return nil
}

func (m *FbExternalComment) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_external_comment")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ExternalPostID != "" {
		flag = true
		w.WriteName("external_post_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalPostID)
	}
	if m.ExternalPageID != "" {
		flag = true
		w.WriteName("external_page_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalPageID)
	}
	if m.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalID)
	}
	if m.ExternalUserID != "" {
		flag = true
		w.WriteName("external_user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalUserID)
	}
	if m.ExternalParentID != "" {
		flag = true
		w.WriteName("external_parent_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalParentID)
	}
	if m.ExternalParentUserID != "" {
		flag = true
		w.WriteName("external_parent_user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalParentUserID)
	}
	if m.ExternalMessage != "" {
		flag = true
		w.WriteName("external_message")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalMessage)
	}
	if m.ExternalCommentCount != 0 {
		flag = true
		w.WriteName("external_comment_count")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCommentCount)
	}
	if m.ExternalParent != nil {
		flag = true
		w.WriteName("external_parent")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalParent})
	}
	if m.ExternalFrom != nil {
		flag = true
		w.WriteName("external_from")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalFrom})
	}
	if m.ExternalAttachment != nil {
		flag = true
		w.WriteName("external_attachment")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalAttachment})
	}
	if !m.ExternalCreatedTime.IsZero() {
		flag = true
		w.WriteName("external_created_time")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCreatedTime)
	}
	if m.Source != 0 {
		flag = true
		w.WriteName("source")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Source)
	}
	if m.InternalSource != 0 {
		flag = true
		w.WriteName("internal_source")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.InternalSource)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if true { // always update time
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if m.CreatedBy != 0 {
		flag = true
		w.WriteName("created_by")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedBy)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbExternalComment) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalComment_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(19)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbExternalCommentHistory map[string]interface{}
type FbExternalCommentHistories []map[string]interface{}

func (m *FbExternalCommentHistory) SQLTableName() string  { return "history.\"fb_external_comment\"" }
func (m FbExternalCommentHistories) SQLTableName() string { return "history.\"fb_external_comment\"" }

func (m *FbExternalCommentHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalComment_Select_history)
	return nil
}

func (m FbExternalCommentHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalComment_Select_history)
	return nil
}

func (m FbExternalCommentHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m FbExternalCommentHistory) ExternalPostID() core.Interface {
	return core.Interface{m["external_post_id"]}
}
func (m FbExternalCommentHistory) ExternalPageID() core.Interface {
	return core.Interface{m["external_page_id"]}
}
func (m FbExternalCommentHistory) ExternalID() core.Interface {
	return core.Interface{m["external_id"]}
}
func (m FbExternalCommentHistory) ExternalUserID() core.Interface {
	return core.Interface{m["external_user_id"]}
}
func (m FbExternalCommentHistory) ExternalParentID() core.Interface {
	return core.Interface{m["external_parent_id"]}
}
func (m FbExternalCommentHistory) ExternalParentUserID() core.Interface {
	return core.Interface{m["external_parent_user_id"]}
}
func (m FbExternalCommentHistory) ExternalMessage() core.Interface {
	return core.Interface{m["external_message"]}
}
func (m FbExternalCommentHistory) ExternalCommentCount() core.Interface {
	return core.Interface{m["external_comment_count"]}
}
func (m FbExternalCommentHistory) ExternalParent() core.Interface {
	return core.Interface{m["external_parent"]}
}
func (m FbExternalCommentHistory) ExternalFrom() core.Interface {
	return core.Interface{m["external_from"]}
}
func (m FbExternalCommentHistory) ExternalAttachment() core.Interface {
	return core.Interface{m["external_attachment"]}
}
func (m FbExternalCommentHistory) ExternalCreatedTime() core.Interface {
	return core.Interface{m["external_created_time"]}
}
func (m FbExternalCommentHistory) Source() core.Interface { return core.Interface{m["source"]} }
func (m FbExternalCommentHistory) InternalSource() core.Interface {
	return core.Interface{m["internal_source"]}
}
func (m FbExternalCommentHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m FbExternalCommentHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }
func (m FbExternalCommentHistory) DeletedAt() core.Interface { return core.Interface{m["deleted_at"]} }
func (m FbExternalCommentHistory) CreatedBy() core.Interface { return core.Interface{m["created_by"]} }

func (m *FbExternalCommentHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 19)
	args := make([]interface{}, 19)
	for i := 0; i < 19; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbExternalCommentHistory, 19)
	res["id"] = data[0]
	res["external_post_id"] = data[1]
	res["external_page_id"] = data[2]
	res["external_id"] = data[3]
	res["external_user_id"] = data[4]
	res["external_parent_id"] = data[5]
	res["external_parent_user_id"] = data[6]
	res["external_message"] = data[7]
	res["external_comment_count"] = data[8]
	res["external_parent"] = data[9]
	res["external_from"] = data[10]
	res["external_attachment"] = data[11]
	res["external_created_time"] = data[12]
	res["source"] = data[13]
	res["internal_source"] = data[14]
	res["created_at"] = data[15]
	res["updated_at"] = data[16]
	res["deleted_at"] = data[17]
	res["created_by"] = data[18]
	*m = res
	return nil
}

func (ms *FbExternalCommentHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 19)
	args := make([]interface{}, 19)
	for i := 0; i < 19; i++ {
		args[i] = &data[i]
	}
	res := make(FbExternalCommentHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbExternalCommentHistory)
		m["id"] = data[0]
		m["external_post_id"] = data[1]
		m["external_page_id"] = data[2]
		m["external_id"] = data[3]
		m["external_user_id"] = data[4]
		m["external_parent_id"] = data[5]
		m["external_parent_user_id"] = data[6]
		m["external_message"] = data[7]
		m["external_comment_count"] = data[8]
		m["external_parent"] = data[9]
		m["external_from"] = data[10]
		m["external_attachment"] = data[11]
		m["external_created_time"] = data[12]
		m["source"] = data[13]
		m["internal_source"] = data[14]
		m["created_at"] = data[15]
		m["updated_at"] = data[16]
		m["deleted_at"] = data[17]
		m["created_by"] = data[18]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type FbExternalConversations []*FbExternalConversation

const __sqlFbExternalConversation_Table = "fb_external_conversation"
const __sqlFbExternalConversation_ListCols = "\"id\",\"external_page_id\",\"external_id\",\"psid\",\"external_user_id\",\"external_user_name\",\"external_link\",\"external_updated_time\",\"external_message_count\",\"created_at\",\"updated_at\",\"deleted_at\""
const __sqlFbExternalConversation_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"external_page_id\" = EXCLUDED.\"external_page_id\",\"external_id\" = EXCLUDED.\"external_id\",\"psid\" = EXCLUDED.\"psid\",\"external_user_id\" = EXCLUDED.\"external_user_id\",\"external_user_name\" = EXCLUDED.\"external_user_name\",\"external_link\" = EXCLUDED.\"external_link\",\"external_updated_time\" = EXCLUDED.\"external_updated_time\",\"external_message_count\" = EXCLUDED.\"external_message_count\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\""
const __sqlFbExternalConversation_Insert = "INSERT INTO \"fb_external_conversation\" (" + __sqlFbExternalConversation_ListCols + ") VALUES"
const __sqlFbExternalConversation_Select = "SELECT " + __sqlFbExternalConversation_ListCols + " FROM \"fb_external_conversation\""
const __sqlFbExternalConversation_Select_history = "SELECT " + __sqlFbExternalConversation_ListCols + " FROM history.\"fb_external_conversation\""
const __sqlFbExternalConversation_UpdateAll = "UPDATE \"fb_external_conversation\" SET (" + __sqlFbExternalConversation_ListCols + ")"
const __sqlFbExternalConversation_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_external_conversation_pkey DO UPDATE SET"

func (m *FbExternalConversation) SQLTableName() string  { return "fb_external_conversation" }
func (m *FbExternalConversations) SQLTableName() string { return "fb_external_conversation" }
func (m *FbExternalConversation) SQLListCols() string   { return __sqlFbExternalConversation_ListCols }

func (m *FbExternalConversation) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbExternalConversation_ListCols + " FROM \"fb_external_conversation\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbExternalConversation) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_external_conversation"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_page_id": {
			ColumnName:       "external_page_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_id": {
			ColumnName:       "external_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"psid": {
			ColumnName:       "psid",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_user_id": {
			ColumnName:       "external_user_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_user_name": {
			ColumnName:       "external_user_name",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_link": {
			ColumnName:       "external_link",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_updated_time": {
			ColumnName:       "external_updated_time",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_message_count": {
			ColumnName:       "external_message_count",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_at": {
			ColumnName:       "deleted_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "fb_external_conversation", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbExternalConversation)(nil))
}

func (m *FbExternalConversation) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.ExternalPageID),
		core.String(m.ExternalID),
		core.String(m.PSID),
		core.String(m.ExternalUserID),
		core.String(m.ExternalUserName),
		core.String(m.ExternalLink),
		core.Time(m.ExternalUpdatedTime),
		core.Int(m.ExternalMessageCount),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
	}
}

func (m *FbExternalConversation) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.ExternalPageID),
		(*core.String)(&m.ExternalID),
		(*core.String)(&m.PSID),
		(*core.String)(&m.ExternalUserID),
		(*core.String)(&m.ExternalUserName),
		(*core.String)(&m.ExternalLink),
		(*core.Time)(&m.ExternalUpdatedTime),
		(*core.Int)(&m.ExternalMessageCount),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *FbExternalConversation) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbExternalConversations) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbExternalConversations, 0, 128)
	for rows.Next() {
		m := new(FbExternalConversation)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbExternalConversation) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalConversation_Select)
	return nil
}

func (_ *FbExternalConversations) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalConversation_Select)
	return nil
}

func (m *FbExternalConversation) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalConversation_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(12)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbExternalConversations) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalConversation_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(12)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbExternalConversation) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalConversation_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalConversation_ListColsOnConflict)
	return nil
}

func (ms FbExternalConversations) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalConversation_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalConversation_ListColsOnConflict)
	return nil
}

func (m *FbExternalConversation) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_external_conversation")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ExternalPageID != "" {
		flag = true
		w.WriteName("external_page_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalPageID)
	}
	if m.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalID)
	}
	if m.PSID != "" {
		flag = true
		w.WriteName("psid")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PSID)
	}
	if m.ExternalUserID != "" {
		flag = true
		w.WriteName("external_user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalUserID)
	}
	if m.ExternalUserName != "" {
		flag = true
		w.WriteName("external_user_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalUserName)
	}
	if m.ExternalLink != "" {
		flag = true
		w.WriteName("external_link")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalLink)
	}
	if !m.ExternalUpdatedTime.IsZero() {
		flag = true
		w.WriteName("external_updated_time")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalUpdatedTime)
	}
	if m.ExternalMessageCount != 0 {
		flag = true
		w.WriteName("external_message_count")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalMessageCount)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if true { // always update time
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbExternalConversation) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalConversation_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(12)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbExternalConversationHistory map[string]interface{}
type FbExternalConversationHistories []map[string]interface{}

func (m *FbExternalConversationHistory) SQLTableName() string {
	return "history.\"fb_external_conversation\""
}
func (m FbExternalConversationHistories) SQLTableName() string {
	return "history.\"fb_external_conversation\""
}

func (m *FbExternalConversationHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalConversation_Select_history)
	return nil
}

func (m FbExternalConversationHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalConversation_Select_history)
	return nil
}

func (m FbExternalConversationHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m FbExternalConversationHistory) ExternalPageID() core.Interface {
	return core.Interface{m["external_page_id"]}
}
func (m FbExternalConversationHistory) ExternalID() core.Interface {
	return core.Interface{m["external_id"]}
}
func (m FbExternalConversationHistory) PSID() core.Interface { return core.Interface{m["psid"]} }
func (m FbExternalConversationHistory) ExternalUserID() core.Interface {
	return core.Interface{m["external_user_id"]}
}
func (m FbExternalConversationHistory) ExternalUserName() core.Interface {
	return core.Interface{m["external_user_name"]}
}
func (m FbExternalConversationHistory) ExternalLink() core.Interface {
	return core.Interface{m["external_link"]}
}
func (m FbExternalConversationHistory) ExternalUpdatedTime() core.Interface {
	return core.Interface{m["external_updated_time"]}
}
func (m FbExternalConversationHistory) ExternalMessageCount() core.Interface {
	return core.Interface{m["external_message_count"]}
}
func (m FbExternalConversationHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m FbExternalConversationHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}
func (m FbExternalConversationHistory) DeletedAt() core.Interface {
	return core.Interface{m["deleted_at"]}
}

func (m *FbExternalConversationHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 12)
	args := make([]interface{}, 12)
	for i := 0; i < 12; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbExternalConversationHistory, 12)
	res["id"] = data[0]
	res["external_page_id"] = data[1]
	res["external_id"] = data[2]
	res["psid"] = data[3]
	res["external_user_id"] = data[4]
	res["external_user_name"] = data[5]
	res["external_link"] = data[6]
	res["external_updated_time"] = data[7]
	res["external_message_count"] = data[8]
	res["created_at"] = data[9]
	res["updated_at"] = data[10]
	res["deleted_at"] = data[11]
	*m = res
	return nil
}

func (ms *FbExternalConversationHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 12)
	args := make([]interface{}, 12)
	for i := 0; i < 12; i++ {
		args[i] = &data[i]
	}
	res := make(FbExternalConversationHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbExternalConversationHistory)
		m["id"] = data[0]
		m["external_page_id"] = data[1]
		m["external_id"] = data[2]
		m["psid"] = data[3]
		m["external_user_id"] = data[4]
		m["external_user_name"] = data[5]
		m["external_link"] = data[6]
		m["external_updated_time"] = data[7]
		m["external_message_count"] = data[8]
		m["created_at"] = data[9]
		m["updated_at"] = data[10]
		m["deleted_at"] = data[11]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type FbExternalMessages []*FbExternalMessage

const __sqlFbExternalMessage_Table = "fb_external_message"
const __sqlFbExternalMessage_ListCols = "\"id\",\"external_conversation_id\",\"external_page_id\",\"external_id\",\"external_message\",\"external_sticker\",\"external_to\",\"external_from\",\"external_from_id\",\"external_attachments\",\"external_message_shares\",\"external_created_time\",\"internal_source\",\"created_at\",\"updated_at\",\"deleted_at\",\"created_by\""
const __sqlFbExternalMessage_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"external_conversation_id\" = EXCLUDED.\"external_conversation_id\",\"external_page_id\" = EXCLUDED.\"external_page_id\",\"external_id\" = EXCLUDED.\"external_id\",\"external_message\" = EXCLUDED.\"external_message\",\"external_sticker\" = EXCLUDED.\"external_sticker\",\"external_to\" = EXCLUDED.\"external_to\",\"external_from\" = EXCLUDED.\"external_from\",\"external_from_id\" = EXCLUDED.\"external_from_id\",\"external_attachments\" = EXCLUDED.\"external_attachments\",\"external_message_shares\" = EXCLUDED.\"external_message_shares\",\"external_created_time\" = EXCLUDED.\"external_created_time\",\"internal_source\" = EXCLUDED.\"internal_source\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\",\"created_by\" = EXCLUDED.\"created_by\""
const __sqlFbExternalMessage_Insert = "INSERT INTO \"fb_external_message\" (" + __sqlFbExternalMessage_ListCols + ") VALUES"
const __sqlFbExternalMessage_Select = "SELECT " + __sqlFbExternalMessage_ListCols + " FROM \"fb_external_message\""
const __sqlFbExternalMessage_Select_history = "SELECT " + __sqlFbExternalMessage_ListCols + " FROM history.\"fb_external_message\""
const __sqlFbExternalMessage_UpdateAll = "UPDATE \"fb_external_message\" SET (" + __sqlFbExternalMessage_ListCols + ")"
const __sqlFbExternalMessage_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_external_message_pkey DO UPDATE SET"

func (m *FbExternalMessage) SQLTableName() string  { return "fb_external_message" }
func (m *FbExternalMessages) SQLTableName() string { return "fb_external_message" }
func (m *FbExternalMessage) SQLListCols() string   { return __sqlFbExternalMessage_ListCols }

func (m *FbExternalMessage) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbExternalMessage_ListCols + " FROM \"fb_external_message\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbExternalMessage) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_external_message"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_conversation_id": {
			ColumnName:       "external_conversation_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_page_id": {
			ColumnName:       "external_page_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_id": {
			ColumnName:       "external_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_message": {
			ColumnName:       "external_message",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_sticker": {
			ColumnName:       "external_sticker",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_to": {
			ColumnName:       "external_to",
			ColumnType:       "[]*FbObjectTo",
			ColumnDBType:     "[]*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_from": {
			ColumnName:       "external_from",
			ColumnType:       "*FbObjectFrom",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_from_id": {
			ColumnName:       "external_from_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_attachments": {
			ColumnName:       "external_attachments",
			ColumnType:       "[]*FbMessageAttachment",
			ColumnDBType:     "[]*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_message_shares": {
			ColumnName:       "external_message_shares",
			ColumnType:       "[]*FbMessageShare",
			ColumnDBType:     "[]*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_created_time": {
			ColumnName:       "external_created_time",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"internal_source": {
			ColumnName:       "internal_source",
			ColumnType:       "fb_internal_source.FbInternalSource",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"unknown", "fabo", "facebook"},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_at": {
			ColumnName:       "deleted_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_by": {
			ColumnName:       "created_by",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "fb_external_message", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbExternalMessage)(nil))
}

func (m *FbExternalMessage) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.ExternalConversationID),
		core.String(m.ExternalPageID),
		core.String(m.ExternalID),
		core.String(m.ExternalMessage),
		core.String(m.ExternalSticker),
		core.JSON{m.ExternalTo},
		core.JSON{m.ExternalFrom},
		core.String(m.ExternalFromID),
		core.JSON{m.ExternalAttachments},
		core.JSON{m.ExternalMessageShares},
		core.Time(m.ExternalCreatedTime),
		m.InternalSource,
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
		m.CreatedBy,
	}
}

func (m *FbExternalMessage) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.ExternalConversationID),
		(*core.String)(&m.ExternalPageID),
		(*core.String)(&m.ExternalID),
		(*core.String)(&m.ExternalMessage),
		(*core.String)(&m.ExternalSticker),
		core.JSON{&m.ExternalTo},
		core.JSON{&m.ExternalFrom},
		(*core.String)(&m.ExternalFromID),
		core.JSON{&m.ExternalAttachments},
		core.JSON{&m.ExternalMessageShares},
		(*core.Time)(&m.ExternalCreatedTime),
		&m.InternalSource,
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
		&m.CreatedBy,
	}
}

func (m *FbExternalMessage) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbExternalMessages) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbExternalMessages, 0, 128)
	for rows.Next() {
		m := new(FbExternalMessage)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbExternalMessage) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalMessage_Select)
	return nil
}

func (_ *FbExternalMessages) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalMessage_Select)
	return nil
}

func (m *FbExternalMessage) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalMessage_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(17)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbExternalMessages) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalMessage_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(17)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbExternalMessage) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalMessage_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalMessage_ListColsOnConflict)
	return nil
}

func (ms FbExternalMessages) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalMessage_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalMessage_ListColsOnConflict)
	return nil
}

func (m *FbExternalMessage) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_external_message")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ExternalConversationID != "" {
		flag = true
		w.WriteName("external_conversation_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalConversationID)
	}
	if m.ExternalPageID != "" {
		flag = true
		w.WriteName("external_page_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalPageID)
	}
	if m.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalID)
	}
	if m.ExternalMessage != "" {
		flag = true
		w.WriteName("external_message")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalMessage)
	}
	if m.ExternalSticker != "" {
		flag = true
		w.WriteName("external_sticker")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalSticker)
	}
	if m.ExternalTo != nil {
		flag = true
		w.WriteName("external_to")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalTo})
	}
	if m.ExternalFrom != nil {
		flag = true
		w.WriteName("external_from")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalFrom})
	}
	if m.ExternalFromID != "" {
		flag = true
		w.WriteName("external_from_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalFromID)
	}
	if m.ExternalAttachments != nil {
		flag = true
		w.WriteName("external_attachments")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalAttachments})
	}
	if m.ExternalMessageShares != nil {
		flag = true
		w.WriteName("external_message_shares")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalMessageShares})
	}
	if !m.ExternalCreatedTime.IsZero() {
		flag = true
		w.WriteName("external_created_time")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCreatedTime)
	}
	if m.InternalSource != 0 {
		flag = true
		w.WriteName("internal_source")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.InternalSource)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if true { // always update time
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if m.CreatedBy != 0 {
		flag = true
		w.WriteName("created_by")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedBy)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbExternalMessage) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalMessage_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(17)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbExternalMessageHistory map[string]interface{}
type FbExternalMessageHistories []map[string]interface{}

func (m *FbExternalMessageHistory) SQLTableName() string  { return "history.\"fb_external_message\"" }
func (m FbExternalMessageHistories) SQLTableName() string { return "history.\"fb_external_message\"" }

func (m *FbExternalMessageHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalMessage_Select_history)
	return nil
}

func (m FbExternalMessageHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalMessage_Select_history)
	return nil
}

func (m FbExternalMessageHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m FbExternalMessageHistory) ExternalConversationID() core.Interface {
	return core.Interface{m["external_conversation_id"]}
}
func (m FbExternalMessageHistory) ExternalPageID() core.Interface {
	return core.Interface{m["external_page_id"]}
}
func (m FbExternalMessageHistory) ExternalID() core.Interface {
	return core.Interface{m["external_id"]}
}
func (m FbExternalMessageHistory) ExternalMessage() core.Interface {
	return core.Interface{m["external_message"]}
}
func (m FbExternalMessageHistory) ExternalSticker() core.Interface {
	return core.Interface{m["external_sticker"]}
}
func (m FbExternalMessageHistory) ExternalTo() core.Interface {
	return core.Interface{m["external_to"]}
}
func (m FbExternalMessageHistory) ExternalFrom() core.Interface {
	return core.Interface{m["external_from"]}
}
func (m FbExternalMessageHistory) ExternalFromID() core.Interface {
	return core.Interface{m["external_from_id"]}
}
func (m FbExternalMessageHistory) ExternalAttachments() core.Interface {
	return core.Interface{m["external_attachments"]}
}
func (m FbExternalMessageHistory) ExternalMessageShares() core.Interface {
	return core.Interface{m["external_message_shares"]}
}
func (m FbExternalMessageHistory) ExternalCreatedTime() core.Interface {
	return core.Interface{m["external_created_time"]}
}
func (m FbExternalMessageHistory) InternalSource() core.Interface {
	return core.Interface{m["internal_source"]}
}
func (m FbExternalMessageHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m FbExternalMessageHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }
func (m FbExternalMessageHistory) DeletedAt() core.Interface { return core.Interface{m["deleted_at"]} }
func (m FbExternalMessageHistory) CreatedBy() core.Interface { return core.Interface{m["created_by"]} }

func (m *FbExternalMessageHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 17)
	args := make([]interface{}, 17)
	for i := 0; i < 17; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbExternalMessageHistory, 17)
	res["id"] = data[0]
	res["external_conversation_id"] = data[1]
	res["external_page_id"] = data[2]
	res["external_id"] = data[3]
	res["external_message"] = data[4]
	res["external_sticker"] = data[5]
	res["external_to"] = data[6]
	res["external_from"] = data[7]
	res["external_from_id"] = data[8]
	res["external_attachments"] = data[9]
	res["external_message_shares"] = data[10]
	res["external_created_time"] = data[11]
	res["internal_source"] = data[12]
	res["created_at"] = data[13]
	res["updated_at"] = data[14]
	res["deleted_at"] = data[15]
	res["created_by"] = data[16]
	*m = res
	return nil
}

func (ms *FbExternalMessageHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 17)
	args := make([]interface{}, 17)
	for i := 0; i < 17; i++ {
		args[i] = &data[i]
	}
	res := make(FbExternalMessageHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbExternalMessageHistory)
		m["id"] = data[0]
		m["external_conversation_id"] = data[1]
		m["external_page_id"] = data[2]
		m["external_id"] = data[3]
		m["external_message"] = data[4]
		m["external_sticker"] = data[5]
		m["external_to"] = data[6]
		m["external_from"] = data[7]
		m["external_from_id"] = data[8]
		m["external_attachments"] = data[9]
		m["external_message_shares"] = data[10]
		m["external_created_time"] = data[11]
		m["internal_source"] = data[12]
		m["created_at"] = data[13]
		m["updated_at"] = data[14]
		m["deleted_at"] = data[15]
		m["created_by"] = data[16]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type FbExternalPosts []*FbExternalPost

const __sqlFbExternalPost_Table = "fb_external_post"
const __sqlFbExternalPost_ListCols = "\"id\",\"external_page_id\",\"external_id\",\"external_parent_id\",\"external_from\",\"external_picture\",\"external_icon\",\"external_message\",\"external_attachments\",\"external_created_time\",\"external_updated_time\",\"created_at\",\"updated_at\",\"deleted_at\",\"feed_type\""
const __sqlFbExternalPost_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"external_page_id\" = EXCLUDED.\"external_page_id\",\"external_id\" = EXCLUDED.\"external_id\",\"external_parent_id\" = EXCLUDED.\"external_parent_id\",\"external_from\" = EXCLUDED.\"external_from\",\"external_picture\" = EXCLUDED.\"external_picture\",\"external_icon\" = EXCLUDED.\"external_icon\",\"external_message\" = EXCLUDED.\"external_message\",\"external_attachments\" = EXCLUDED.\"external_attachments\",\"external_created_time\" = EXCLUDED.\"external_created_time\",\"external_updated_time\" = EXCLUDED.\"external_updated_time\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\",\"feed_type\" = EXCLUDED.\"feed_type\""
const __sqlFbExternalPost_Insert = "INSERT INTO \"fb_external_post\" (" + __sqlFbExternalPost_ListCols + ") VALUES"
const __sqlFbExternalPost_Select = "SELECT " + __sqlFbExternalPost_ListCols + " FROM \"fb_external_post\""
const __sqlFbExternalPost_Select_history = "SELECT " + __sqlFbExternalPost_ListCols + " FROM history.\"fb_external_post\""
const __sqlFbExternalPost_UpdateAll = "UPDATE \"fb_external_post\" SET (" + __sqlFbExternalPost_ListCols + ")"
const __sqlFbExternalPost_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_external_post_pkey DO UPDATE SET"

func (m *FbExternalPost) SQLTableName() string  { return "fb_external_post" }
func (m *FbExternalPosts) SQLTableName() string { return "fb_external_post" }
func (m *FbExternalPost) SQLListCols() string   { return __sqlFbExternalPost_ListCols }

func (m *FbExternalPost) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbExternalPost_ListCols + " FROM \"fb_external_post\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbExternalPost) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_external_post"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_page_id": {
			ColumnName:       "external_page_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_id": {
			ColumnName:       "external_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_parent_id": {
			ColumnName:       "external_parent_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_from": {
			ColumnName:       "external_from",
			ColumnType:       "*FbObjectFrom",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_picture": {
			ColumnName:       "external_picture",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_icon": {
			ColumnName:       "external_icon",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_message": {
			ColumnName:       "external_message",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_attachments": {
			ColumnName:       "external_attachments",
			ColumnType:       "[]*PostAttachment",
			ColumnDBType:     "[]*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_created_time": {
			ColumnName:       "external_created_time",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_updated_time": {
			ColumnName:       "external_updated_time",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_at": {
			ColumnName:       "deleted_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"feed_type": {
			ColumnName:       "feed_type",
			ColumnType:       "fb_feed_type.FbFeedType",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"unknown", "web", "app"},
		},
	}
	if err := migration.Compare(db, "fb_external_post", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbExternalPost)(nil))
}

func (m *FbExternalPost) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.ExternalPageID),
		core.String(m.ExternalID),
		core.String(m.ExternalParentID),
		core.JSON{m.ExternalFrom},
		core.String(m.ExternalPicture),
		core.String(m.ExternalIcon),
		core.String(m.ExternalMessage),
		core.JSON{m.ExternalAttachments},
		core.Time(m.ExternalCreatedTime),
		core.Time(m.ExternalUpdatedTime),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
		m.FeedType,
	}
}

func (m *FbExternalPost) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.ExternalPageID),
		(*core.String)(&m.ExternalID),
		(*core.String)(&m.ExternalParentID),
		core.JSON{&m.ExternalFrom},
		(*core.String)(&m.ExternalPicture),
		(*core.String)(&m.ExternalIcon),
		(*core.String)(&m.ExternalMessage),
		core.JSON{&m.ExternalAttachments},
		(*core.Time)(&m.ExternalCreatedTime),
		(*core.Time)(&m.ExternalUpdatedTime),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
		&m.FeedType,
	}
}

func (m *FbExternalPost) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbExternalPosts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbExternalPosts, 0, 128)
	for rows.Next() {
		m := new(FbExternalPost)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbExternalPost) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPost_Select)
	return nil
}

func (_ *FbExternalPosts) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPost_Select)
	return nil
}

func (m *FbExternalPost) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPost_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(15)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbExternalPosts) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPost_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(15)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbExternalPost) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalPost_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalPost_ListColsOnConflict)
	return nil
}

func (ms FbExternalPosts) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalPost_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalPost_ListColsOnConflict)
	return nil
}

func (m *FbExternalPost) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_external_post")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ExternalPageID != "" {
		flag = true
		w.WriteName("external_page_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalPageID)
	}
	if m.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalID)
	}
	if m.ExternalParentID != "" {
		flag = true
		w.WriteName("external_parent_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalParentID)
	}
	if m.ExternalFrom != nil {
		flag = true
		w.WriteName("external_from")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalFrom})
	}
	if m.ExternalPicture != "" {
		flag = true
		w.WriteName("external_picture")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalPicture)
	}
	if m.ExternalIcon != "" {
		flag = true
		w.WriteName("external_icon")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalIcon)
	}
	if m.ExternalMessage != "" {
		flag = true
		w.WriteName("external_message")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalMessage)
	}
	if m.ExternalAttachments != nil {
		flag = true
		w.WriteName("external_attachments")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalAttachments})
	}
	if !m.ExternalCreatedTime.IsZero() {
		flag = true
		w.WriteName("external_created_time")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCreatedTime)
	}
	if !m.ExternalUpdatedTime.IsZero() {
		flag = true
		w.WriteName("external_updated_time")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalUpdatedTime)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if true { // always update time
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if m.FeedType != 0 {
		flag = true
		w.WriteName("feed_type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FeedType)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbExternalPost) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPost_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(15)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbExternalPostHistory map[string]interface{}
type FbExternalPostHistories []map[string]interface{}

func (m *FbExternalPostHistory) SQLTableName() string  { return "history.\"fb_external_post\"" }
func (m FbExternalPostHistories) SQLTableName() string { return "history.\"fb_external_post\"" }

func (m *FbExternalPostHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPost_Select_history)
	return nil
}

func (m FbExternalPostHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPost_Select_history)
	return nil
}

func (m FbExternalPostHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m FbExternalPostHistory) ExternalPageID() core.Interface {
	return core.Interface{m["external_page_id"]}
}
func (m FbExternalPostHistory) ExternalID() core.Interface { return core.Interface{m["external_id"]} }
func (m FbExternalPostHistory) ExternalParentID() core.Interface {
	return core.Interface{m["external_parent_id"]}
}
func (m FbExternalPostHistory) ExternalFrom() core.Interface {
	return core.Interface{m["external_from"]}
}
func (m FbExternalPostHistory) ExternalPicture() core.Interface {
	return core.Interface{m["external_picture"]}
}
func (m FbExternalPostHistory) ExternalIcon() core.Interface {
	return core.Interface{m["external_icon"]}
}
func (m FbExternalPostHistory) ExternalMessage() core.Interface {
	return core.Interface{m["external_message"]}
}
func (m FbExternalPostHistory) ExternalAttachments() core.Interface {
	return core.Interface{m["external_attachments"]}
}
func (m FbExternalPostHistory) ExternalCreatedTime() core.Interface {
	return core.Interface{m["external_created_time"]}
}
func (m FbExternalPostHistory) ExternalUpdatedTime() core.Interface {
	return core.Interface{m["external_updated_time"]}
}
func (m FbExternalPostHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m FbExternalPostHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }
func (m FbExternalPostHistory) DeletedAt() core.Interface { return core.Interface{m["deleted_at"]} }
func (m FbExternalPostHistory) FeedType() core.Interface  { return core.Interface{m["feed_type"]} }

func (m *FbExternalPostHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 15)
	args := make([]interface{}, 15)
	for i := 0; i < 15; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbExternalPostHistory, 15)
	res["id"] = data[0]
	res["external_page_id"] = data[1]
	res["external_id"] = data[2]
	res["external_parent_id"] = data[3]
	res["external_from"] = data[4]
	res["external_picture"] = data[5]
	res["external_icon"] = data[6]
	res["external_message"] = data[7]
	res["external_attachments"] = data[8]
	res["external_created_time"] = data[9]
	res["external_updated_time"] = data[10]
	res["created_at"] = data[11]
	res["updated_at"] = data[12]
	res["deleted_at"] = data[13]
	res["feed_type"] = data[14]
	*m = res
	return nil
}

func (ms *FbExternalPostHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 15)
	args := make([]interface{}, 15)
	for i := 0; i < 15; i++ {
		args[i] = &data[i]
	}
	res := make(FbExternalPostHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbExternalPostHistory)
		m["id"] = data[0]
		m["external_page_id"] = data[1]
		m["external_id"] = data[2]
		m["external_parent_id"] = data[3]
		m["external_from"] = data[4]
		m["external_picture"] = data[5]
		m["external_icon"] = data[6]
		m["external_message"] = data[7]
		m["external_attachments"] = data[8]
		m["external_created_time"] = data[9]
		m["external_updated_time"] = data[10]
		m["created_at"] = data[11]
		m["updated_at"] = data[12]
		m["deleted_at"] = data[13]
		m["feed_type"] = data[14]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
