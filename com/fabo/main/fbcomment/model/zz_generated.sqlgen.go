// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type FbComments []*FbComment

const __sqlFbComment_Table = "fb_comment"
const __sqlFbComment_ListCols = "\"id\",\"external_id\",\"parent_id\",\"external_parent_id\",\"fb_post_id\",\"external_message\",\"external_comment_count\",\"external_from\",\"external_attachment\",\"created_at\",\"updated_at\",\"deleted_at\""
const __sqlFbComment_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"external_id\" = EXCLUDED.\"external_id\",\"parent_id\" = EXCLUDED.\"parent_id\",\"external_parent_id\" = EXCLUDED.\"external_parent_id\",\"fb_post_id\" = EXCLUDED.\"fb_post_id\",\"external_message\" = EXCLUDED.\"external_message\",\"external_comment_count\" = EXCLUDED.\"external_comment_count\",\"external_from\" = EXCLUDED.\"external_from\",\"external_attachment\" = EXCLUDED.\"external_attachment\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\""
const __sqlFbComment_Insert = "INSERT INTO \"fb_comment\" (" + __sqlFbComment_ListCols + ") VALUES"
const __sqlFbComment_Select = "SELECT " + __sqlFbComment_ListCols + " FROM \"fb_comment\""
const __sqlFbComment_Select_history = "SELECT " + __sqlFbComment_ListCols + " FROM history.\"fb_comment\""
const __sqlFbComment_UpdateAll = "UPDATE \"fb_comment\" SET (" + __sqlFbComment_ListCols + ")"
const __sqlFbComment_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_comment_pkey DO UPDATE SET"

func (m *FbComment) SQLTableName() string  { return "fb_comment" }
func (m *FbComments) SQLTableName() string { return "fb_comment" }
func (m *FbComment) SQLListCols() string   { return __sqlFbComment_ListCols }

func (m *FbComment) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbComment_ListCols + " FROM \"fb_comment\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbComment) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_comment"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_id": {
			ColumnName:       "external_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"parent_id": {
			ColumnName:       "parent_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_parent_id": {
			ColumnName:       "external_parent_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"fb_post_id": {
			ColumnName:       "fb_post_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_message": {
			ColumnName:       "external_message",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_comment_count": {
			ColumnName:       "external_comment_count",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_from": {
			ColumnName:       "external_from",
			ColumnType:       "*FbCommentFrom",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_attachment": {
			ColumnName:       "external_attachment",
			ColumnType:       "*fbpostmodel.Attachment",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_at": {
			ColumnName:       "deleted_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "fb_comment", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbComment)(nil))
}

func (m *FbComment) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.ExternalID),
		m.ParentID,
		core.String(m.ExternalParentID),
		m.FbPostID,
		core.String(m.ExternalMessage),
		core.Int(m.ExternalCommentCount),
		core.JSON{m.ExternalFrom},
		core.JSON{m.ExternalAttachment},
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
	}
}

func (m *FbComment) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.ExternalID),
		&m.ParentID,
		(*core.String)(&m.ExternalParentID),
		&m.FbPostID,
		(*core.String)(&m.ExternalMessage),
		(*core.Int)(&m.ExternalCommentCount),
		core.JSON{&m.ExternalFrom},
		core.JSON{&m.ExternalAttachment},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *FbComment) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbComments) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbComments, 0, 128)
	for rows.Next() {
		m := new(FbComment)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbComment) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbComment_Select)
	return nil
}

func (_ *FbComments) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbComment_Select)
	return nil
}

func (m *FbComment) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbComment_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(12)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbComments) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbComment_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(12)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbComment) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbComment_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbComment_ListColsOnConflict)
	return nil
}

func (ms FbComments) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbComment_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbComment_ListColsOnConflict)
	return nil
}

func (m *FbComment) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_comment")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalID)
	}
	if m.ParentID != 0 {
		flag = true
		w.WriteName("parent_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ParentID)
	}
	if m.ExternalParentID != "" {
		flag = true
		w.WriteName("external_parent_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalParentID)
	}
	if m.FbPostID != 0 {
		flag = true
		w.WriteName("fb_post_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FbPostID)
	}
	if m.ExternalMessage != "" {
		flag = true
		w.WriteName("external_message")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalMessage)
	}
	if m.ExternalCommentCount != 0 {
		flag = true
		w.WriteName("external_comment_count")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCommentCount)
	}
	if m.ExternalFrom != nil {
		flag = true
		w.WriteName("external_from")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalFrom})
	}
	if m.ExternalAttachment != nil {
		flag = true
		w.WriteName("external_attachment")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalAttachment})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbComment) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbComment_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(12)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbCommentHistory map[string]interface{}
type FbCommentHistories []map[string]interface{}

func (m *FbCommentHistory) SQLTableName() string  { return "history.\"fb_comment\"" }
func (m FbCommentHistories) SQLTableName() string { return "history.\"fb_comment\"" }

func (m *FbCommentHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbComment_Select_history)
	return nil
}

func (m FbCommentHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbComment_Select_history)
	return nil
}

func (m FbCommentHistory) ID() core.Interface         { return core.Interface{m["id"]} }
func (m FbCommentHistory) ExternalID() core.Interface { return core.Interface{m["external_id"]} }
func (m FbCommentHistory) ParentID() core.Interface   { return core.Interface{m["parent_id"]} }
func (m FbCommentHistory) ExternalParentID() core.Interface {
	return core.Interface{m["external_parent_id"]}
}
func (m FbCommentHistory) FbPostID() core.Interface { return core.Interface{m["fb_post_id"]} }
func (m FbCommentHistory) ExternalMessage() core.Interface {
	return core.Interface{m["external_message"]}
}
func (m FbCommentHistory) ExternalCommentCount() core.Interface {
	return core.Interface{m["external_comment_count"]}
}
func (m FbCommentHistory) ExternalFrom() core.Interface { return core.Interface{m["external_from"]} }
func (m FbCommentHistory) ExternalAttachment() core.Interface {
	return core.Interface{m["external_attachment"]}
}
func (m FbCommentHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m FbCommentHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }
func (m FbCommentHistory) DeletedAt() core.Interface { return core.Interface{m["deleted_at"]} }

func (m *FbCommentHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 12)
	args := make([]interface{}, 12)
	for i := 0; i < 12; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbCommentHistory, 12)
	res["id"] = data[0]
	res["external_id"] = data[1]
	res["parent_id"] = data[2]
	res["external_parent_id"] = data[3]
	res["fb_post_id"] = data[4]
	res["external_message"] = data[5]
	res["external_comment_count"] = data[6]
	res["external_from"] = data[7]
	res["external_attachment"] = data[8]
	res["created_at"] = data[9]
	res["updated_at"] = data[10]
	res["deleted_at"] = data[11]
	*m = res
	return nil
}

func (ms *FbCommentHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 12)
	args := make([]interface{}, 12)
	for i := 0; i < 12; i++ {
		args[i] = &data[i]
	}
	res := make(FbCommentHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbCommentHistory)
		m["id"] = data[0]
		m["external_id"] = data[1]
		m["parent_id"] = data[2]
		m["external_parent_id"] = data[3]
		m["fb_post_id"] = data[4]
		m["external_message"] = data[5]
		m["external_comment_count"] = data[6]
		m["external_from"] = data[7]
		m["external_attachment"] = data[8]
		m["created_at"] = data[9]
		m["updated_at"] = data[10]
		m["deleted_at"] = data[11]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
