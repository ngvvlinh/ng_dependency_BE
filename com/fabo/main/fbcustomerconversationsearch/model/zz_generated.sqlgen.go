// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type FbCustomerConversationSearchs []*FbCustomerConversationSearch

const __sqlFbCustomerConversationSearch_Table = "fb_customer_conversation_search"
const __sqlFbCustomerConversationSearch_ListCols = "\"id\",\"external_user_name_norm\",\"external_page_id\",\"created_at\""
const __sqlFbCustomerConversationSearch_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"external_user_name_norm\" = EXCLUDED.\"external_user_name_norm\",\"external_page_id\" = EXCLUDED.\"external_page_id\",\"created_at\" = EXCLUDED.\"created_at\""
const __sqlFbCustomerConversationSearch_Insert = "INSERT INTO \"fb_customer_conversation_search\" (" + __sqlFbCustomerConversationSearch_ListCols + ") VALUES"
const __sqlFbCustomerConversationSearch_Select = "SELECT " + __sqlFbCustomerConversationSearch_ListCols + " FROM \"fb_customer_conversation_search\""
const __sqlFbCustomerConversationSearch_Select_history = "SELECT " + __sqlFbCustomerConversationSearch_ListCols + " FROM history.\"fb_customer_conversation_search\""
const __sqlFbCustomerConversationSearch_UpdateAll = "UPDATE \"fb_customer_conversation_search\" SET (" + __sqlFbCustomerConversationSearch_ListCols + ")"
const __sqlFbCustomerConversationSearch_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_customer_conversation_search_pkey DO UPDATE SET"

func (m *FbCustomerConversationSearch) SQLTableName() string {
	return "fb_customer_conversation_search"
}
func (m *FbCustomerConversationSearchs) SQLTableName() string {
	return "fb_customer_conversation_search"
}
func (m *FbCustomerConversationSearch) SQLListCols() string {
	return __sqlFbCustomerConversationSearch_ListCols
}

func (m *FbCustomerConversationSearch) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbCustomerConversationSearch_ListCols + " FROM \"fb_customer_conversation_search\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbCustomerConversationSearch) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_customer_conversation_search"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_user_name_norm": {
			ColumnName:       "external_user_name_norm",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_page_id": {
			ColumnName:       "external_page_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "fb_customer_conversation_search", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbCustomerConversationSearch)(nil))
}

func (m *FbCustomerConversationSearch) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.ExternalUserNameNorm),
		core.String(m.ExternalPageID),
		core.Now(m.CreatedAt, now, create),
	}
}

func (m *FbCustomerConversationSearch) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.ExternalUserNameNorm),
		(*core.String)(&m.ExternalPageID),
		(*core.Time)(&m.CreatedAt),
	}
}

func (m *FbCustomerConversationSearch) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbCustomerConversationSearchs) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbCustomerConversationSearchs, 0, 128)
	for rows.Next() {
		m := new(FbCustomerConversationSearch)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbCustomerConversationSearch) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversationSearch_Select)
	return nil
}

func (_ *FbCustomerConversationSearchs) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversationSearch_Select)
	return nil
}

func (m *FbCustomerConversationSearch) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversationSearch_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(4)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbCustomerConversationSearchs) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversationSearch_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(4)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbCustomerConversationSearch) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbCustomerConversationSearch_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbCustomerConversationSearch_ListColsOnConflict)
	return nil
}

func (ms FbCustomerConversationSearchs) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbCustomerConversationSearch_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbCustomerConversationSearch_ListColsOnConflict)
	return nil
}

func (m *FbCustomerConversationSearch) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_customer_conversation_search")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ExternalUserNameNorm != "" {
		flag = true
		w.WriteName("external_user_name_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalUserNameNorm)
	}
	if m.ExternalPageID != "" {
		flag = true
		w.WriteName("external_page_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalPageID)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbCustomerConversationSearch) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversationSearch_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(4)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbCustomerConversationSearchHistory map[string]interface{}
type FbCustomerConversationSearchHistories []map[string]interface{}

func (m *FbCustomerConversationSearchHistory) SQLTableName() string {
	return "history.\"fb_customer_conversation_search\""
}
func (m FbCustomerConversationSearchHistories) SQLTableName() string {
	return "history.\"fb_customer_conversation_search\""
}

func (m *FbCustomerConversationSearchHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversationSearch_Select_history)
	return nil
}

func (m FbCustomerConversationSearchHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbCustomerConversationSearch_Select_history)
	return nil
}

func (m FbCustomerConversationSearchHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m FbCustomerConversationSearchHistory) ExternalUserNameNorm() core.Interface {
	return core.Interface{m["external_user_name_norm"]}
}
func (m FbCustomerConversationSearchHistory) ExternalPageID() core.Interface {
	return core.Interface{m["external_page_id"]}
}
func (m FbCustomerConversationSearchHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}

func (m *FbCustomerConversationSearchHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 4)
	args := make([]interface{}, 4)
	for i := 0; i < 4; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbCustomerConversationSearchHistory, 4)
	res["id"] = data[0]
	res["external_user_name_norm"] = data[1]
	res["external_page_id"] = data[2]
	res["created_at"] = data[3]
	*m = res
	return nil
}

func (ms *FbCustomerConversationSearchHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 4)
	args := make([]interface{}, 4)
	for i := 0; i < 4; i++ {
		args[i] = &data[i]
	}
	res := make(FbCustomerConversationSearchHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbCustomerConversationSearchHistory)
		m["id"] = data[0]
		m["external_user_name_norm"] = data[1]
		m["external_page_id"] = data[2]
		m["created_at"] = data[3]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type FbExternalCommentSearchs []*FbExternalCommentSearch

const __sqlFbExternalCommentSearch_Table = "fb_external_comment_search"
const __sqlFbExternalCommentSearch_ListCols = "\"id\",\"external_message_norm\",\"external_page_id\",\"external_post_id\",\"external_user_id\",\"created_at\""
const __sqlFbExternalCommentSearch_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"external_message_norm\" = EXCLUDED.\"external_message_norm\",\"external_page_id\" = EXCLUDED.\"external_page_id\",\"external_post_id\" = EXCLUDED.\"external_post_id\",\"external_user_id\" = EXCLUDED.\"external_user_id\",\"created_at\" = EXCLUDED.\"created_at\""
const __sqlFbExternalCommentSearch_Insert = "INSERT INTO \"fb_external_comment_search\" (" + __sqlFbExternalCommentSearch_ListCols + ") VALUES"
const __sqlFbExternalCommentSearch_Select = "SELECT " + __sqlFbExternalCommentSearch_ListCols + " FROM \"fb_external_comment_search\""
const __sqlFbExternalCommentSearch_Select_history = "SELECT " + __sqlFbExternalCommentSearch_ListCols + " FROM history.\"fb_external_comment_search\""
const __sqlFbExternalCommentSearch_UpdateAll = "UPDATE \"fb_external_comment_search\" SET (" + __sqlFbExternalCommentSearch_ListCols + ")"
const __sqlFbExternalCommentSearch_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_external_comment_search_pkey DO UPDATE SET"

func (m *FbExternalCommentSearch) SQLTableName() string  { return "fb_external_comment_search" }
func (m *FbExternalCommentSearchs) SQLTableName() string { return "fb_external_comment_search" }
func (m *FbExternalCommentSearch) SQLListCols() string   { return __sqlFbExternalCommentSearch_ListCols }

func (m *FbExternalCommentSearch) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbExternalCommentSearch_ListCols + " FROM \"fb_external_comment_search\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbExternalCommentSearch) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_external_comment_search"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_message_norm": {
			ColumnName:       "external_message_norm",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_page_id": {
			ColumnName:       "external_page_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_post_id": {
			ColumnName:       "external_post_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_user_id": {
			ColumnName:       "external_user_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "fb_external_comment_search", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbExternalCommentSearch)(nil))
}

func (m *FbExternalCommentSearch) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.ExternalMessageNorm),
		core.String(m.ExternalPageID),
		core.String(m.ExternalPostID),
		core.String(m.ExternalUserID),
		core.Now(m.CreatedAt, now, create),
	}
}

func (m *FbExternalCommentSearch) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.ExternalMessageNorm),
		(*core.String)(&m.ExternalPageID),
		(*core.String)(&m.ExternalPostID),
		(*core.String)(&m.ExternalUserID),
		(*core.Time)(&m.CreatedAt),
	}
}

func (m *FbExternalCommentSearch) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbExternalCommentSearchs) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbExternalCommentSearchs, 0, 128)
	for rows.Next() {
		m := new(FbExternalCommentSearch)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbExternalCommentSearch) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalCommentSearch_Select)
	return nil
}

func (_ *FbExternalCommentSearchs) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalCommentSearch_Select)
	return nil
}

func (m *FbExternalCommentSearch) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalCommentSearch_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbExternalCommentSearchs) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalCommentSearch_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(6)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbExternalCommentSearch) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalCommentSearch_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalCommentSearch_ListColsOnConflict)
	return nil
}

func (ms FbExternalCommentSearchs) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalCommentSearch_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalCommentSearch_ListColsOnConflict)
	return nil
}

func (m *FbExternalCommentSearch) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_external_comment_search")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ExternalMessageNorm != "" {
		flag = true
		w.WriteName("external_message_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalMessageNorm)
	}
	if m.ExternalPageID != "" {
		flag = true
		w.WriteName("external_page_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalPageID)
	}
	if m.ExternalPostID != "" {
		flag = true
		w.WriteName("external_post_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalPostID)
	}
	if m.ExternalUserID != "" {
		flag = true
		w.WriteName("external_user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalUserID)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbExternalCommentSearch) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalCommentSearch_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbExternalCommentSearchHistory map[string]interface{}
type FbExternalCommentSearchHistories []map[string]interface{}

func (m *FbExternalCommentSearchHistory) SQLTableName() string {
	return "history.\"fb_external_comment_search\""
}
func (m FbExternalCommentSearchHistories) SQLTableName() string {
	return "history.\"fb_external_comment_search\""
}

func (m *FbExternalCommentSearchHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalCommentSearch_Select_history)
	return nil
}

func (m FbExternalCommentSearchHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalCommentSearch_Select_history)
	return nil
}

func (m FbExternalCommentSearchHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m FbExternalCommentSearchHistory) ExternalMessageNorm() core.Interface {
	return core.Interface{m["external_message_norm"]}
}
func (m FbExternalCommentSearchHistory) ExternalPageID() core.Interface {
	return core.Interface{m["external_page_id"]}
}
func (m FbExternalCommentSearchHistory) ExternalPostID() core.Interface {
	return core.Interface{m["external_post_id"]}
}
func (m FbExternalCommentSearchHistory) ExternalUserID() core.Interface {
	return core.Interface{m["external_user_id"]}
}
func (m FbExternalCommentSearchHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}

func (m *FbExternalCommentSearchHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbExternalCommentSearchHistory, 6)
	res["id"] = data[0]
	res["external_message_norm"] = data[1]
	res["external_page_id"] = data[2]
	res["external_post_id"] = data[3]
	res["external_user_id"] = data[4]
	res["created_at"] = data[5]
	*m = res
	return nil
}

func (ms *FbExternalCommentSearchHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	res := make(FbExternalCommentSearchHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbExternalCommentSearchHistory)
		m["id"] = data[0]
		m["external_message_norm"] = data[1]
		m["external_page_id"] = data[2]
		m["external_post_id"] = data[3]
		m["external_user_id"] = data[4]
		m["created_at"] = data[5]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type FbExternalMessageSearchs []*FbExternalMessageSearch

const __sqlFbExternalMessageSearch_Table = "fb_external_message_search"
const __sqlFbExternalMessageSearch_ListCols = "\"id\",\"external_message_norm\",\"external_page_id\",\"external_conversation_id\",\"created_at\""
const __sqlFbExternalMessageSearch_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"external_message_norm\" = EXCLUDED.\"external_message_norm\",\"external_page_id\" = EXCLUDED.\"external_page_id\",\"external_conversation_id\" = EXCLUDED.\"external_conversation_id\",\"created_at\" = EXCLUDED.\"created_at\""
const __sqlFbExternalMessageSearch_Insert = "INSERT INTO \"fb_external_message_search\" (" + __sqlFbExternalMessageSearch_ListCols + ") VALUES"
const __sqlFbExternalMessageSearch_Select = "SELECT " + __sqlFbExternalMessageSearch_ListCols + " FROM \"fb_external_message_search\""
const __sqlFbExternalMessageSearch_Select_history = "SELECT " + __sqlFbExternalMessageSearch_ListCols + " FROM history.\"fb_external_message_search\""
const __sqlFbExternalMessageSearch_UpdateAll = "UPDATE \"fb_external_message_search\" SET (" + __sqlFbExternalMessageSearch_ListCols + ")"
const __sqlFbExternalMessageSearch_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_external_message_search_pkey DO UPDATE SET"

func (m *FbExternalMessageSearch) SQLTableName() string  { return "fb_external_message_search" }
func (m *FbExternalMessageSearchs) SQLTableName() string { return "fb_external_message_search" }
func (m *FbExternalMessageSearch) SQLListCols() string   { return __sqlFbExternalMessageSearch_ListCols }

func (m *FbExternalMessageSearch) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbExternalMessageSearch_ListCols + " FROM \"fb_external_message_search\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbExternalMessageSearch) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_external_message_search"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_message_norm": {
			ColumnName:       "external_message_norm",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_page_id": {
			ColumnName:       "external_page_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_conversation_id": {
			ColumnName:       "external_conversation_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "fb_external_message_search", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbExternalMessageSearch)(nil))
}

func (m *FbExternalMessageSearch) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.ExternalMessageNorm),
		core.String(m.ExternalPageID),
		core.String(m.ExternalConversationID),
		core.Now(m.CreatedAt, now, create),
	}
}

func (m *FbExternalMessageSearch) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.ExternalMessageNorm),
		(*core.String)(&m.ExternalPageID),
		(*core.String)(&m.ExternalConversationID),
		(*core.Time)(&m.CreatedAt),
	}
}

func (m *FbExternalMessageSearch) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbExternalMessageSearchs) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbExternalMessageSearchs, 0, 128)
	for rows.Next() {
		m := new(FbExternalMessageSearch)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbExternalMessageSearch) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalMessageSearch_Select)
	return nil
}

func (_ *FbExternalMessageSearchs) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalMessageSearch_Select)
	return nil
}

func (m *FbExternalMessageSearch) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalMessageSearch_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(5)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbExternalMessageSearchs) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalMessageSearch_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(5)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbExternalMessageSearch) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalMessageSearch_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalMessageSearch_ListColsOnConflict)
	return nil
}

func (ms FbExternalMessageSearchs) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalMessageSearch_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalMessageSearch_ListColsOnConflict)
	return nil
}

func (m *FbExternalMessageSearch) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_external_message_search")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ExternalMessageNorm != "" {
		flag = true
		w.WriteName("external_message_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalMessageNorm)
	}
	if m.ExternalPageID != "" {
		flag = true
		w.WriteName("external_page_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalPageID)
	}
	if m.ExternalConversationID != "" {
		flag = true
		w.WriteName("external_conversation_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalConversationID)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbExternalMessageSearch) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalMessageSearch_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(5)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbExternalMessageSearchHistory map[string]interface{}
type FbExternalMessageSearchHistories []map[string]interface{}

func (m *FbExternalMessageSearchHistory) SQLTableName() string {
	return "history.\"fb_external_message_search\""
}
func (m FbExternalMessageSearchHistories) SQLTableName() string {
	return "history.\"fb_external_message_search\""
}

func (m *FbExternalMessageSearchHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalMessageSearch_Select_history)
	return nil
}

func (m FbExternalMessageSearchHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalMessageSearch_Select_history)
	return nil
}

func (m FbExternalMessageSearchHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m FbExternalMessageSearchHistory) ExternalMessageNorm() core.Interface {
	return core.Interface{m["external_message_norm"]}
}
func (m FbExternalMessageSearchHistory) ExternalPageID() core.Interface {
	return core.Interface{m["external_page_id"]}
}
func (m FbExternalMessageSearchHistory) ExternalConversationID() core.Interface {
	return core.Interface{m["external_conversation_id"]}
}
func (m FbExternalMessageSearchHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}

func (m *FbExternalMessageSearchHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 5)
	args := make([]interface{}, 5)
	for i := 0; i < 5; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbExternalMessageSearchHistory, 5)
	res["id"] = data[0]
	res["external_message_norm"] = data[1]
	res["external_page_id"] = data[2]
	res["external_conversation_id"] = data[3]
	res["created_at"] = data[4]
	*m = res
	return nil
}

func (ms *FbExternalMessageSearchHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 5)
	args := make([]interface{}, 5)
	for i := 0; i < 5; i++ {
		args[i] = &data[i]
	}
	res := make(FbExternalMessageSearchHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbExternalMessageSearchHistory)
		m["id"] = data[0]
		m["external_message_norm"] = data[1]
		m["external_page_id"] = data[2]
		m["external_conversation_id"] = data[3]
		m["created_at"] = data[4]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
