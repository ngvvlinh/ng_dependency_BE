// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "etop.vn/backend/pkg/common/sql/cmsql"
	migration "etop.vn/backend/pkg/common/sql/migration"
	core "etop.vn/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type FbPages []*FbPage

const __sqlFbPage_Table = "fb_page"
const __sqlFbPage_ListCols = "\"id\",\"external_id\",\"fb_user_id\",\"shop_id\",\"user_id\",\"external_name\",\"external_category\",\"external_category_list\",\"external_tasks\",\"status\",\"connection_status\",\"created_at\",\"updated_at\",\"deleted_at\""
const __sqlFbPage_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"external_id\" = EXCLUDED.\"external_id\",\"fb_user_id\" = EXCLUDED.\"fb_user_id\",\"shop_id\" = EXCLUDED.\"shop_id\",\"user_id\" = EXCLUDED.\"user_id\",\"external_name\" = EXCLUDED.\"external_name\",\"external_category\" = EXCLUDED.\"external_category\",\"external_category_list\" = EXCLUDED.\"external_category_list\",\"external_tasks\" = EXCLUDED.\"external_tasks\",\"status\" = EXCLUDED.\"status\",\"connection_status\" = EXCLUDED.\"connection_status\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\""
const __sqlFbPage_Insert = "INSERT INTO \"fb_page\" (" + __sqlFbPage_ListCols + ") VALUES"
const __sqlFbPage_Select = "SELECT " + __sqlFbPage_ListCols + " FROM \"fb_page\""
const __sqlFbPage_Select_history = "SELECT " + __sqlFbPage_ListCols + " FROM history.\"fb_page\""
const __sqlFbPage_UpdateAll = "UPDATE \"fb_page\" SET (" + __sqlFbPage_ListCols + ")"
const __sqlFbPage_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_page_pkey DO UPDATE SET"

func (m *FbPage) SQLTableName() string  { return "fb_page" }
func (m *FbPages) SQLTableName() string { return "fb_page" }
func (m *FbPage) SQLListCols() string   { return __sqlFbPage_ListCols }

func (m *FbPage) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbPage_ListCols + " FROM \"fb_page\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbPage) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_page"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_id": {
			ColumnName:       "external_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"fb_user_id": {
			ColumnName:       "fb_user_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"shop_id": {
			ColumnName:       "shop_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"user_id": {
			ColumnName:       "user_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_name": {
			ColumnName:       "external_name",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_category": {
			ColumnName:       "external_category",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_category_list": {
			ColumnName:       "external_category_list",
			ColumnType:       "[]*ExternalCategory",
			ColumnDBType:     "[]*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_tasks": {
			ColumnName:       "external_tasks",
			ColumnType:       "[]string",
			ColumnDBType:     "[]string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"status": {
			ColumnName:       "status",
			ColumnType:       "status3.Status",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"Z", "P", "N"},
		},
		"connection_status": {
			ColumnName:       "connection_status",
			ColumnType:       "status3.Status",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"Z", "P", "N"},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_at": {
			ColumnName:       "deleted_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "fb_page", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbPage)(nil))
}

func (m *FbPage) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.ExternalID),
		m.FbUserID,
		m.ShopID,
		m.UserID,
		core.String(m.ExternalName),
		core.String(m.ExternalCategory),
		core.JSON{m.ExternalCategoryList},
		core.Array{m.ExternalTasks, opts},
		m.Status,
		m.ConnectionStatus,
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
	}
}

func (m *FbPage) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.ExternalID),
		&m.FbUserID,
		&m.ShopID,
		&m.UserID,
		(*core.String)(&m.ExternalName),
		(*core.String)(&m.ExternalCategory),
		core.JSON{&m.ExternalCategoryList},
		core.Array{&m.ExternalTasks, opts},
		&m.Status,
		&m.ConnectionStatus,
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *FbPage) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbPages) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbPages, 0, 128)
	for rows.Next() {
		m := new(FbPage)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbPage) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPage_Select)
	return nil
}

func (_ *FbPages) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPage_Select)
	return nil
}

func (m *FbPage) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPage_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbPages) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPage_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(14)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbPage) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbPage_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbPage_ListColsOnConflict)
	return nil
}

func (ms FbPages) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbPage_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbPage_ListColsOnConflict)
	return nil
}

func (m *FbPage) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_page")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalID)
	}
	if m.FbUserID != 0 {
		flag = true
		w.WriteName("fb_user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FbUserID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.UserID != 0 {
		flag = true
		w.WriteName("user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UserID)
	}
	if m.ExternalName != "" {
		flag = true
		w.WriteName("external_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalName)
	}
	if m.ExternalCategory != "" {
		flag = true
		w.WriteName("external_category")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCategory)
	}
	if m.ExternalCategoryList != nil {
		flag = true
		w.WriteName("external_category_list")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalCategoryList})
	}
	if m.ExternalTasks != nil {
		flag = true
		w.WriteName("external_tasks")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ExternalTasks, opts})
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if m.ConnectionStatus != 0 {
		flag = true
		w.WriteName("connection_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ConnectionStatus)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbPage) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPage_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbPageHistory map[string]interface{}
type FbPageHistories []map[string]interface{}

func (m *FbPageHistory) SQLTableName() string  { return "history.\"fb_page\"" }
func (m FbPageHistories) SQLTableName() string { return "history.\"fb_page\"" }

func (m *FbPageHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPage_Select_history)
	return nil
}

func (m FbPageHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPage_Select_history)
	return nil
}

func (m FbPageHistory) ID() core.Interface           { return core.Interface{m["id"]} }
func (m FbPageHistory) ExternalID() core.Interface   { return core.Interface{m["external_id"]} }
func (m FbPageHistory) FbUserID() core.Interface     { return core.Interface{m["fb_user_id"]} }
func (m FbPageHistory) ShopID() core.Interface       { return core.Interface{m["shop_id"]} }
func (m FbPageHistory) UserID() core.Interface       { return core.Interface{m["user_id"]} }
func (m FbPageHistory) ExternalName() core.Interface { return core.Interface{m["external_name"]} }
func (m FbPageHistory) ExternalCategory() core.Interface {
	return core.Interface{m["external_category"]}
}
func (m FbPageHistory) ExternalCategoryList() core.Interface {
	return core.Interface{m["external_category_list"]}
}
func (m FbPageHistory) ExternalTasks() core.Interface { return core.Interface{m["external_tasks"]} }
func (m FbPageHistory) Status() core.Interface        { return core.Interface{m["status"]} }
func (m FbPageHistory) ConnectionStatus() core.Interface {
	return core.Interface{m["connection_status"]}
}
func (m FbPageHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m FbPageHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }
func (m FbPageHistory) DeletedAt() core.Interface { return core.Interface{m["deleted_at"]} }

func (m *FbPageHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbPageHistory, 14)
	res["id"] = data[0]
	res["external_id"] = data[1]
	res["fb_user_id"] = data[2]
	res["shop_id"] = data[3]
	res["user_id"] = data[4]
	res["external_name"] = data[5]
	res["external_category"] = data[6]
	res["external_category_list"] = data[7]
	res["external_tasks"] = data[8]
	res["status"] = data[9]
	res["connection_status"] = data[10]
	res["created_at"] = data[11]
	res["updated_at"] = data[12]
	res["deleted_at"] = data[13]
	*m = res
	return nil
}

func (ms *FbPageHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	res := make(FbPageHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbPageHistory)
		m["id"] = data[0]
		m["external_id"] = data[1]
		m["fb_user_id"] = data[2]
		m["shop_id"] = data[3]
		m["user_id"] = data[4]
		m["external_name"] = data[5]
		m["external_category"] = data[6]
		m["external_category_list"] = data[7]
		m["external_tasks"] = data[8]
		m["status"] = data[9]
		m["connection_status"] = data[10]
		m["created_at"] = data[11]
		m["updated_at"] = data[12]
		m["deleted_at"] = data[13]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type FbPageInternals []*FbPageInternal

const __sqlFbPageInternal_Table = "fb_page_internal"
const __sqlFbPageInternal_ListCols = "\"id\",\"token\",\"updated_at\""
const __sqlFbPageInternal_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"token\" = EXCLUDED.\"token\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlFbPageInternal_Insert = "INSERT INTO \"fb_page_internal\" (" + __sqlFbPageInternal_ListCols + ") VALUES"
const __sqlFbPageInternal_Select = "SELECT " + __sqlFbPageInternal_ListCols + " FROM \"fb_page_internal\""
const __sqlFbPageInternal_Select_history = "SELECT " + __sqlFbPageInternal_ListCols + " FROM history.\"fb_page_internal\""
const __sqlFbPageInternal_UpdateAll = "UPDATE \"fb_page_internal\" SET (" + __sqlFbPageInternal_ListCols + ")"
const __sqlFbPageInternal_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_page_internal_pkey DO UPDATE SET"

func (m *FbPageInternal) SQLTableName() string  { return "fb_page_internal" }
func (m *FbPageInternals) SQLTableName() string { return "fb_page_internal" }
func (m *FbPageInternal) SQLListCols() string   { return __sqlFbPageInternal_ListCols }

func (m *FbPageInternal) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbPageInternal_ListCols + " FROM \"fb_page_internal\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbPageInternal) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_page_internal"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"token": {
			ColumnName:       "token",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "fb_page_internal", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbPageInternal)(nil))
}

func (m *FbPageInternal) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.Token),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *FbPageInternal) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.Token),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *FbPageInternal) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbPageInternals) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbPageInternals, 0, 128)
	for rows.Next() {
		m := new(FbPageInternal)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbPageInternal) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPageInternal_Select)
	return nil
}

func (_ *FbPageInternals) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPageInternal_Select)
	return nil
}

func (m *FbPageInternal) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPageInternal_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(3)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbPageInternals) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPageInternal_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(3)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbPageInternal) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbPageInternal_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbPageInternal_ListColsOnConflict)
	return nil
}

func (ms FbPageInternals) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbPageInternal_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbPageInternal_ListColsOnConflict)
	return nil
}

func (m *FbPageInternal) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_page_internal")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Token != "" {
		flag = true
		w.WriteName("token")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Token)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbPageInternal) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPageInternal_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(3)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbPageInternalHistory map[string]interface{}
type FbPageInternalHistories []map[string]interface{}

func (m *FbPageInternalHistory) SQLTableName() string  { return "history.\"fb_page_internal\"" }
func (m FbPageInternalHistories) SQLTableName() string { return "history.\"fb_page_internal\"" }

func (m *FbPageInternalHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPageInternal_Select_history)
	return nil
}

func (m FbPageInternalHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPageInternal_Select_history)
	return nil
}

func (m FbPageInternalHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m FbPageInternalHistory) Token() core.Interface     { return core.Interface{m["token"]} }
func (m FbPageInternalHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *FbPageInternalHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 3)
	args := make([]interface{}, 3)
	for i := 0; i < 3; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbPageInternalHistory, 3)
	res["id"] = data[0]
	res["token"] = data[1]
	res["updated_at"] = data[2]
	*m = res
	return nil
}

func (ms *FbPageInternalHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 3)
	args := make([]interface{}, 3)
	for i := 0; i < 3; i++ {
		args[i] = &data[i]
	}
	res := make(FbPageInternalHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbPageInternalHistory)
		m["id"] = data[0]
		m["token"] = data[1]
		m["updated_at"] = data[2]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
