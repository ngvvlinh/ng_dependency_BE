// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type FbExternalPages []*FbExternalPage

const __sqlFbExternalPage_Table = "fb_external_page"
const __sqlFbExternalPage_ListCols = "\"id\",\"shop_id\",\"external_id\",\"external_name\",\"external_tasks\",\"external_category\",\"external_category_list\",\"external_permissions\",\"external_image_url\",\"connection_status\",\"status\",\"created_at\",\"updated_at\",\"deleted_at\""
const __sqlFbExternalPage_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"shop_id\" = EXCLUDED.\"shop_id\",\"external_id\" = EXCLUDED.\"external_id\",\"external_name\" = EXCLUDED.\"external_name\",\"external_tasks\" = EXCLUDED.\"external_tasks\",\"external_category\" = EXCLUDED.\"external_category\",\"external_category_list\" = EXCLUDED.\"external_category_list\",\"external_permissions\" = EXCLUDED.\"external_permissions\",\"external_image_url\" = EXCLUDED.\"external_image_url\",\"connection_status\" = EXCLUDED.\"connection_status\",\"status\" = EXCLUDED.\"status\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\""
const __sqlFbExternalPage_Insert = "INSERT INTO \"fb_external_page\" (" + __sqlFbExternalPage_ListCols + ") VALUES"
const __sqlFbExternalPage_Select = "SELECT " + __sqlFbExternalPage_ListCols + " FROM \"fb_external_page\""
const __sqlFbExternalPage_Select_history = "SELECT " + __sqlFbExternalPage_ListCols + " FROM history.\"fb_external_page\""
const __sqlFbExternalPage_UpdateAll = "UPDATE \"fb_external_page\" SET (" + __sqlFbExternalPage_ListCols + ")"
const __sqlFbExternalPage_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_external_page_pkey DO UPDATE SET"

func (m *FbExternalPage) SQLTableName() string  { return "fb_external_page" }
func (m *FbExternalPages) SQLTableName() string { return "fb_external_page" }
func (m *FbExternalPage) SQLListCols() string   { return __sqlFbExternalPage_ListCols }

func (m *FbExternalPage) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbExternalPage_ListCols + " FROM \"fb_external_page\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbExternalPage) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_external_page"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"shop_id": {
			ColumnName:       "shop_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_id": {
			ColumnName:       "external_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_name": {
			ColumnName:       "external_name",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_tasks": {
			ColumnName:       "external_tasks",
			ColumnType:       "[]string",
			ColumnDBType:     "[]string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_category": {
			ColumnName:       "external_category",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_category_list": {
			ColumnName:       "external_category_list",
			ColumnType:       "[]*ExternalCategory",
			ColumnDBType:     "[]*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_permissions": {
			ColumnName:       "external_permissions",
			ColumnType:       "[]string",
			ColumnDBType:     "[]string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_image_url": {
			ColumnName:       "external_image_url",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"connection_status": {
			ColumnName:       "connection_status",
			ColumnType:       "status3.Status",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"Z", "P", "N"},
		},
		"status": {
			ColumnName:       "status",
			ColumnType:       "status3.Status",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"Z", "P", "N"},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_at": {
			ColumnName:       "deleted_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "fb_external_page", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbExternalPage)(nil))
}

func (m *FbExternalPage) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.ShopID,
		core.String(m.ExternalID),
		core.String(m.ExternalName),
		core.Array{m.ExternalTasks, opts},
		core.String(m.ExternalCategory),
		core.JSON{m.ExternalCategoryList},
		core.Array{m.ExternalPermissions, opts},
		core.String(m.ExternalImageURL),
		m.ConnectionStatus,
		m.Status,
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
	}
}

func (m *FbExternalPage) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.ShopID,
		(*core.String)(&m.ExternalID),
		(*core.String)(&m.ExternalName),
		core.Array{&m.ExternalTasks, opts},
		(*core.String)(&m.ExternalCategory),
		core.JSON{&m.ExternalCategoryList},
		core.Array{&m.ExternalPermissions, opts},
		(*core.String)(&m.ExternalImageURL),
		&m.ConnectionStatus,
		&m.Status,
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *FbExternalPage) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbExternalPages) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbExternalPages, 0, 128)
	for rows.Next() {
		m := new(FbExternalPage)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbExternalPage) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPage_Select)
	return nil
}

func (_ *FbExternalPages) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPage_Select)
	return nil
}

func (m *FbExternalPage) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPage_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbExternalPages) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPage_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(14)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbExternalPage) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalPage_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalPage_ListColsOnConflict)
	return nil
}

func (ms FbExternalPages) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalPage_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalPage_ListColsOnConflict)
	return nil
}

func (m *FbExternalPage) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_external_page")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalID)
	}
	if m.ExternalName != "" {
		flag = true
		w.WriteName("external_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalName)
	}
	if m.ExternalTasks != nil {
		flag = true
		w.WriteName("external_tasks")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ExternalTasks, opts})
	}
	if m.ExternalCategory != "" {
		flag = true
		w.WriteName("external_category")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCategory)
	}
	if m.ExternalCategoryList != nil {
		flag = true
		w.WriteName("external_category_list")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalCategoryList})
	}
	if m.ExternalPermissions != nil {
		flag = true
		w.WriteName("external_permissions")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ExternalPermissions, opts})
	}
	if m.ExternalImageURL != "" {
		flag = true
		w.WriteName("external_image_url")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalImageURL)
	}
	if m.ConnectionStatus != 0 {
		flag = true
		w.WriteName("connection_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ConnectionStatus)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if true { // always update time
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbExternalPage) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPage_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbExternalPageHistory map[string]interface{}
type FbExternalPageHistories []map[string]interface{}

func (m *FbExternalPageHistory) SQLTableName() string  { return "history.\"fb_external_page\"" }
func (m FbExternalPageHistories) SQLTableName() string { return "history.\"fb_external_page\"" }

func (m *FbExternalPageHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPage_Select_history)
	return nil
}

func (m FbExternalPageHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPage_Select_history)
	return nil
}

func (m FbExternalPageHistory) ID() core.Interface         { return core.Interface{m["id"]} }
func (m FbExternalPageHistory) ShopID() core.Interface     { return core.Interface{m["shop_id"]} }
func (m FbExternalPageHistory) ExternalID() core.Interface { return core.Interface{m["external_id"]} }
func (m FbExternalPageHistory) ExternalName() core.Interface {
	return core.Interface{m["external_name"]}
}
func (m FbExternalPageHistory) ExternalTasks() core.Interface {
	return core.Interface{m["external_tasks"]}
}
func (m FbExternalPageHistory) ExternalCategory() core.Interface {
	return core.Interface{m["external_category"]}
}
func (m FbExternalPageHistory) ExternalCategoryList() core.Interface {
	return core.Interface{m["external_category_list"]}
}
func (m FbExternalPageHistory) ExternalPermissions() core.Interface {
	return core.Interface{m["external_permissions"]}
}
func (m FbExternalPageHistory) ExternalImageURL() core.Interface {
	return core.Interface{m["external_image_url"]}
}
func (m FbExternalPageHistory) ConnectionStatus() core.Interface {
	return core.Interface{m["connection_status"]}
}
func (m FbExternalPageHistory) Status() core.Interface    { return core.Interface{m["status"]} }
func (m FbExternalPageHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m FbExternalPageHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }
func (m FbExternalPageHistory) DeletedAt() core.Interface { return core.Interface{m["deleted_at"]} }

func (m *FbExternalPageHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbExternalPageHistory, 14)
	res["id"] = data[0]
	res["shop_id"] = data[1]
	res["external_id"] = data[2]
	res["external_name"] = data[3]
	res["external_tasks"] = data[4]
	res["external_category"] = data[5]
	res["external_category_list"] = data[6]
	res["external_permissions"] = data[7]
	res["external_image_url"] = data[8]
	res["connection_status"] = data[9]
	res["status"] = data[10]
	res["created_at"] = data[11]
	res["updated_at"] = data[12]
	res["deleted_at"] = data[13]
	*m = res
	return nil
}

func (ms *FbExternalPageHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	res := make(FbExternalPageHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbExternalPageHistory)
		m["id"] = data[0]
		m["shop_id"] = data[1]
		m["external_id"] = data[2]
		m["external_name"] = data[3]
		m["external_tasks"] = data[4]
		m["external_category"] = data[5]
		m["external_category_list"] = data[6]
		m["external_permissions"] = data[7]
		m["external_image_url"] = data[8]
		m["connection_status"] = data[9]
		m["status"] = data[10]
		m["created_at"] = data[11]
		m["updated_at"] = data[12]
		m["deleted_at"] = data[13]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type FbExternalPageInternals []*FbExternalPageInternal

const __sqlFbExternalPageInternal_Table = "fb_external_page_internal"
const __sqlFbExternalPageInternal_ListCols = "\"id\",\"external_id\",\"token\",\"updated_at\""
const __sqlFbExternalPageInternal_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"external_id\" = EXCLUDED.\"external_id\",\"token\" = EXCLUDED.\"token\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlFbExternalPageInternal_Insert = "INSERT INTO \"fb_external_page_internal\" (" + __sqlFbExternalPageInternal_ListCols + ") VALUES"
const __sqlFbExternalPageInternal_Select = "SELECT " + __sqlFbExternalPageInternal_ListCols + " FROM \"fb_external_page_internal\""
const __sqlFbExternalPageInternal_Select_history = "SELECT " + __sqlFbExternalPageInternal_ListCols + " FROM history.\"fb_external_page_internal\""
const __sqlFbExternalPageInternal_UpdateAll = "UPDATE \"fb_external_page_internal\" SET (" + __sqlFbExternalPageInternal_ListCols + ")"
const __sqlFbExternalPageInternal_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_external_page_internal_pkey DO UPDATE SET"

func (m *FbExternalPageInternal) SQLTableName() string  { return "fb_external_page_internal" }
func (m *FbExternalPageInternals) SQLTableName() string { return "fb_external_page_internal" }
func (m *FbExternalPageInternal) SQLListCols() string   { return __sqlFbExternalPageInternal_ListCols }

func (m *FbExternalPageInternal) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbExternalPageInternal_ListCols + " FROM \"fb_external_page_internal\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbExternalPageInternal) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_external_page_internal"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_id": {
			ColumnName:       "external_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"token": {
			ColumnName:       "token",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "fb_external_page_internal", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbExternalPageInternal)(nil))
}

func (m *FbExternalPageInternal) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.ExternalID),
		core.String(m.Token),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *FbExternalPageInternal) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.ExternalID),
		(*core.String)(&m.Token),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *FbExternalPageInternal) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbExternalPageInternals) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbExternalPageInternals, 0, 128)
	for rows.Next() {
		m := new(FbExternalPageInternal)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbExternalPageInternal) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPageInternal_Select)
	return nil
}

func (_ *FbExternalPageInternals) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPageInternal_Select)
	return nil
}

func (m *FbExternalPageInternal) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPageInternal_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(4)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbExternalPageInternals) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPageInternal_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(4)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbExternalPageInternal) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalPageInternal_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalPageInternal_ListColsOnConflict)
	return nil
}

func (ms FbExternalPageInternals) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalPageInternal_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalPageInternal_ListColsOnConflict)
	return nil
}

func (m *FbExternalPageInternal) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_external_page_internal")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalID)
	}
	if m.Token != "" {
		flag = true
		w.WriteName("token")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Token)
	}
	if true { // always update time
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbExternalPageInternal) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPageInternal_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(4)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbExternalPageInternalHistory map[string]interface{}
type FbExternalPageInternalHistories []map[string]interface{}

func (m *FbExternalPageInternalHistory) SQLTableName() string {
	return "history.\"fb_external_page_internal\""
}
func (m FbExternalPageInternalHistories) SQLTableName() string {
	return "history.\"fb_external_page_internal\""
}

func (m *FbExternalPageInternalHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPageInternal_Select_history)
	return nil
}

func (m FbExternalPageInternalHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalPageInternal_Select_history)
	return nil
}

func (m FbExternalPageInternalHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m FbExternalPageInternalHistory) ExternalID() core.Interface {
	return core.Interface{m["external_id"]}
}
func (m FbExternalPageInternalHistory) Token() core.Interface { return core.Interface{m["token"]} }
func (m FbExternalPageInternalHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *FbExternalPageInternalHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 4)
	args := make([]interface{}, 4)
	for i := 0; i < 4; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbExternalPageInternalHistory, 4)
	res["id"] = data[0]
	res["external_id"] = data[1]
	res["token"] = data[2]
	res["updated_at"] = data[3]
	*m = res
	return nil
}

func (ms *FbExternalPageInternalHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 4)
	args := make([]interface{}, 4)
	for i := 0; i < 4; i++ {
		args[i] = &data[i]
	}
	res := make(FbExternalPageInternalHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbExternalPageInternalHistory)
		m["id"] = data[0]
		m["external_id"] = data[1]
		m["token"] = data[2]
		m["updated_at"] = data[3]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
