// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type FbMessages []*FbMessage

const __sqlFbMessage_Table = "fb_message"
const __sqlFbMessage_ListCols = "\"id\",\"external_id\",\"fb_conversation_id\",\"external_message\",\"external_to\",\"external_from\",\"external_attachments\",\"external_created_time\",\"created_at\",\"updated_at\",\"deleted_at\""
const __sqlFbMessage_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"external_id\" = EXCLUDED.\"external_id\",\"fb_conversation_id\" = EXCLUDED.\"fb_conversation_id\",\"external_message\" = EXCLUDED.\"external_message\",\"external_to\" = EXCLUDED.\"external_to\",\"external_from\" = EXCLUDED.\"external_from\",\"external_attachments\" = EXCLUDED.\"external_attachments\",\"external_created_time\" = EXCLUDED.\"external_created_time\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\""
const __sqlFbMessage_Insert = "INSERT INTO \"fb_message\" (" + __sqlFbMessage_ListCols + ") VALUES"
const __sqlFbMessage_Select = "SELECT " + __sqlFbMessage_ListCols + " FROM \"fb_message\""
const __sqlFbMessage_Select_history = "SELECT " + __sqlFbMessage_ListCols + " FROM history.\"fb_message\""
const __sqlFbMessage_UpdateAll = "UPDATE \"fb_message\" SET (" + __sqlFbMessage_ListCols + ")"
const __sqlFbMessage_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_message_pkey DO UPDATE SET"

func (m *FbMessage) SQLTableName() string  { return "fb_message" }
func (m *FbMessages) SQLTableName() string { return "fb_message" }
func (m *FbMessage) SQLListCols() string   { return __sqlFbMessage_ListCols }

func (m *FbMessage) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbMessage_ListCols + " FROM \"fb_message\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbMessage) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_message"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_id": {
			ColumnName:       "external_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"fb_conversation_id": {
			ColumnName:       "fb_conversation_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_message": {
			ColumnName:       "external_message",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_to": {
			ColumnName:       "external_to",
			ColumnType:       "*FbMessageTo",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_from": {
			ColumnName:       "external_from",
			ColumnType:       "*FbMessageFrom",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_attachments": {
			ColumnName:       "external_attachments",
			ColumnType:       "[]*FbMessageAttachment",
			ColumnDBType:     "[]*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_created_time": {
			ColumnName:       "external_created_time",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_at": {
			ColumnName:       "deleted_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "fb_message", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbMessage)(nil))
}

func (m *FbMessage) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.ExternalID),
		m.FbConversationID,
		core.String(m.ExternalMessage),
		core.JSON{m.ExternalTo},
		core.JSON{m.ExternalFrom},
		core.JSON{m.ExternalAttachments},
		core.Time(m.ExternalCreatedTime),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
	}
}

func (m *FbMessage) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.ExternalID),
		&m.FbConversationID,
		(*core.String)(&m.ExternalMessage),
		core.JSON{&m.ExternalTo},
		core.JSON{&m.ExternalFrom},
		core.JSON{&m.ExternalAttachments},
		(*core.Time)(&m.ExternalCreatedTime),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *FbMessage) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbMessages) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbMessages, 0, 128)
	for rows.Next() {
		m := new(FbMessage)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbMessage) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbMessage_Select)
	return nil
}

func (_ *FbMessages) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbMessage_Select)
	return nil
}

func (m *FbMessage) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbMessage_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(11)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbMessages) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbMessage_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(11)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbMessage) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbMessage_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbMessage_ListColsOnConflict)
	return nil
}

func (ms FbMessages) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbMessage_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbMessage_ListColsOnConflict)
	return nil
}

func (m *FbMessage) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_message")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalID)
	}
	if m.FbConversationID != 0 {
		flag = true
		w.WriteName("fb_conversation_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FbConversationID)
	}
	if m.ExternalMessage != "" {
		flag = true
		w.WriteName("external_message")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalMessage)
	}
	if m.ExternalTo != nil {
		flag = true
		w.WriteName("external_to")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalTo})
	}
	if m.ExternalFrom != nil {
		flag = true
		w.WriteName("external_from")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalFrom})
	}
	if m.ExternalAttachments != nil {
		flag = true
		w.WriteName("external_attachments")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalAttachments})
	}
	if !m.ExternalCreatedTime.IsZero() {
		flag = true
		w.WriteName("external_created_time")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCreatedTime)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbMessage) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbMessage_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(11)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbMessageHistory map[string]interface{}
type FbMessageHistories []map[string]interface{}

func (m *FbMessageHistory) SQLTableName() string  { return "history.\"fb_message\"" }
func (m FbMessageHistories) SQLTableName() string { return "history.\"fb_message\"" }

func (m *FbMessageHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbMessage_Select_history)
	return nil
}

func (m FbMessageHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbMessage_Select_history)
	return nil
}

func (m FbMessageHistory) ID() core.Interface         { return core.Interface{m["id"]} }
func (m FbMessageHistory) ExternalID() core.Interface { return core.Interface{m["external_id"]} }
func (m FbMessageHistory) FbConversationID() core.Interface {
	return core.Interface{m["fb_conversation_id"]}
}
func (m FbMessageHistory) ExternalMessage() core.Interface {
	return core.Interface{m["external_message"]}
}
func (m FbMessageHistory) ExternalTo() core.Interface   { return core.Interface{m["external_to"]} }
func (m FbMessageHistory) ExternalFrom() core.Interface { return core.Interface{m["external_from"]} }
func (m FbMessageHistory) ExternalAttachments() core.Interface {
	return core.Interface{m["external_attachments"]}
}
func (m FbMessageHistory) ExternalCreatedTime() core.Interface {
	return core.Interface{m["external_created_time"]}
}
func (m FbMessageHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m FbMessageHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }
func (m FbMessageHistory) DeletedAt() core.Interface { return core.Interface{m["deleted_at"]} }

func (m *FbMessageHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 11)
	args := make([]interface{}, 11)
	for i := 0; i < 11; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbMessageHistory, 11)
	res["id"] = data[0]
	res["external_id"] = data[1]
	res["fb_conversation_id"] = data[2]
	res["external_message"] = data[3]
	res["external_to"] = data[4]
	res["external_from"] = data[5]
	res["external_attachments"] = data[6]
	res["external_created_time"] = data[7]
	res["created_at"] = data[8]
	res["updated_at"] = data[9]
	res["deleted_at"] = data[10]
	*m = res
	return nil
}

func (ms *FbMessageHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 11)
	args := make([]interface{}, 11)
	for i := 0; i < 11; i++ {
		args[i] = &data[i]
	}
	res := make(FbMessageHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbMessageHistory)
		m["id"] = data[0]
		m["external_id"] = data[1]
		m["fb_conversation_id"] = data[2]
		m["external_message"] = data[3]
		m["external_to"] = data[4]
		m["external_from"] = data[5]
		m["external_attachments"] = data[6]
		m["external_created_time"] = data[7]
		m["created_at"] = data[8]
		m["updated_at"] = data[9]
		m["deleted_at"] = data[10]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
