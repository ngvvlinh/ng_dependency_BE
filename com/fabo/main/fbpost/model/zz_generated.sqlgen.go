// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type FbPosts []*FbPost

const __sqlFbPost_Table = "fb_post"
const __sqlFbPost_ListCols = "\"id\",\"external_id\",\"fb_page_id\",\"parent_id\",\"external_parent_id\",\"external_from\",\"external_picture\",\"external_icon\",\"external_message\",\"external_attachments\",\"external_created_time\",\"external_updated_time\",\"created_at\",\"updated_at\",\"deleted_at\""
const __sqlFbPost_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"external_id\" = EXCLUDED.\"external_id\",\"fb_page_id\" = EXCLUDED.\"fb_page_id\",\"parent_id\" = EXCLUDED.\"parent_id\",\"external_parent_id\" = EXCLUDED.\"external_parent_id\",\"external_from\" = EXCLUDED.\"external_from\",\"external_picture\" = EXCLUDED.\"external_picture\",\"external_icon\" = EXCLUDED.\"external_icon\",\"external_message\" = EXCLUDED.\"external_message\",\"external_attachments\" = EXCLUDED.\"external_attachments\",\"external_created_time\" = EXCLUDED.\"external_created_time\",\"external_updated_time\" = EXCLUDED.\"external_updated_time\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\""
const __sqlFbPost_Insert = "INSERT INTO \"fb_post\" (" + __sqlFbPost_ListCols + ") VALUES"
const __sqlFbPost_Select = "SELECT " + __sqlFbPost_ListCols + " FROM \"fb_post\""
const __sqlFbPost_Select_history = "SELECT " + __sqlFbPost_ListCols + " FROM history.\"fb_post\""
const __sqlFbPost_UpdateAll = "UPDATE \"fb_post\" SET (" + __sqlFbPost_ListCols + ")"
const __sqlFbPost_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_post_pkey DO UPDATE SET"

func (m *FbPost) SQLTableName() string  { return "fb_post" }
func (m *FbPosts) SQLTableName() string { return "fb_post" }
func (m *FbPost) SQLListCols() string   { return __sqlFbPost_ListCols }

func (m *FbPost) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbPost_ListCols + " FROM \"fb_post\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbPost) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_post"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_id": {
			ColumnName:       "external_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"fb_page_id": {
			ColumnName:       "fb_page_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"parent_id": {
			ColumnName:       "parent_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_parent_id": {
			ColumnName:       "external_parent_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_from": {
			ColumnName:       "external_from",
			ColumnType:       "*FbPostFrom",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_picture": {
			ColumnName:       "external_picture",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_icon": {
			ColumnName:       "external_icon",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_message": {
			ColumnName:       "external_message",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_attachments": {
			ColumnName:       "external_attachments",
			ColumnType:       "[]*Attachment",
			ColumnDBType:     "[]*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_created_time": {
			ColumnName:       "external_created_time",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_updated_time": {
			ColumnName:       "external_updated_time",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_at": {
			ColumnName:       "deleted_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "fb_post", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbPost)(nil))
}

func (m *FbPost) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.ExternalID),
		m.FbPageID,
		m.ParentID,
		core.String(m.ExternalParentID),
		core.JSON{m.ExternalFrom},
		core.String(m.ExternalPicture),
		core.String(m.ExternalIcon),
		core.String(m.ExternalMessage),
		core.JSON{m.ExternalAttachments},
		core.Time(m.ExternalCreatedTime),
		core.Time(m.ExternalUpdatedTime),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
	}
}

func (m *FbPost) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.ExternalID),
		&m.FbPageID,
		&m.ParentID,
		(*core.String)(&m.ExternalParentID),
		core.JSON{&m.ExternalFrom},
		(*core.String)(&m.ExternalPicture),
		(*core.String)(&m.ExternalIcon),
		(*core.String)(&m.ExternalMessage),
		core.JSON{&m.ExternalAttachments},
		(*core.Time)(&m.ExternalCreatedTime),
		(*core.Time)(&m.ExternalUpdatedTime),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *FbPost) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbPosts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbPosts, 0, 128)
	for rows.Next() {
		m := new(FbPost)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbPost) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPost_Select)
	return nil
}

func (_ *FbPosts) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPost_Select)
	return nil
}

func (m *FbPost) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPost_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(15)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbPosts) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPost_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(15)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbPost) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbPost_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbPost_ListColsOnConflict)
	return nil
}

func (ms FbPosts) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbPost_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbPost_ListColsOnConflict)
	return nil
}

func (m *FbPost) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_post")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalID)
	}
	if m.FbPageID != 0 {
		flag = true
		w.WriteName("fb_page_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FbPageID)
	}
	if m.ParentID != 0 {
		flag = true
		w.WriteName("parent_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ParentID)
	}
	if m.ExternalParentID != "" {
		flag = true
		w.WriteName("external_parent_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalParentID)
	}
	if m.ExternalFrom != nil {
		flag = true
		w.WriteName("external_from")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalFrom})
	}
	if m.ExternalPicture != "" {
		flag = true
		w.WriteName("external_picture")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalPicture)
	}
	if m.ExternalIcon != "" {
		flag = true
		w.WriteName("external_icon")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalIcon)
	}
	if m.ExternalMessage != "" {
		flag = true
		w.WriteName("external_message")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalMessage)
	}
	if m.ExternalAttachments != nil {
		flag = true
		w.WriteName("external_attachments")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalAttachments})
	}
	if !m.ExternalCreatedTime.IsZero() {
		flag = true
		w.WriteName("external_created_time")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCreatedTime)
	}
	if !m.ExternalUpdatedTime.IsZero() {
		flag = true
		w.WriteName("external_updated_time")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalUpdatedTime)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbPost) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPost_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(15)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbPostHistory map[string]interface{}
type FbPostHistories []map[string]interface{}

func (m *FbPostHistory) SQLTableName() string  { return "history.\"fb_post\"" }
func (m FbPostHistories) SQLTableName() string { return "history.\"fb_post\"" }

func (m *FbPostHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPost_Select_history)
	return nil
}

func (m FbPostHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbPost_Select_history)
	return nil
}

func (m FbPostHistory) ID() core.Interface         { return core.Interface{m["id"]} }
func (m FbPostHistory) ExternalID() core.Interface { return core.Interface{m["external_id"]} }
func (m FbPostHistory) FbPageID() core.Interface   { return core.Interface{m["fb_page_id"]} }
func (m FbPostHistory) ParentID() core.Interface   { return core.Interface{m["parent_id"]} }
func (m FbPostHistory) ExternalParentID() core.Interface {
	return core.Interface{m["external_parent_id"]}
}
func (m FbPostHistory) ExternalFrom() core.Interface    { return core.Interface{m["external_from"]} }
func (m FbPostHistory) ExternalPicture() core.Interface { return core.Interface{m["external_picture"]} }
func (m FbPostHistory) ExternalIcon() core.Interface    { return core.Interface{m["external_icon"]} }
func (m FbPostHistory) ExternalMessage() core.Interface { return core.Interface{m["external_message"]} }
func (m FbPostHistory) ExternalAttachments() core.Interface {
	return core.Interface{m["external_attachments"]}
}
func (m FbPostHistory) ExternalCreatedTime() core.Interface {
	return core.Interface{m["external_created_time"]}
}
func (m FbPostHistory) ExternalUpdatedTime() core.Interface {
	return core.Interface{m["external_updated_time"]}
}
func (m FbPostHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m FbPostHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }
func (m FbPostHistory) DeletedAt() core.Interface { return core.Interface{m["deleted_at"]} }

func (m *FbPostHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 15)
	args := make([]interface{}, 15)
	for i := 0; i < 15; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbPostHistory, 15)
	res["id"] = data[0]
	res["external_id"] = data[1]
	res["fb_page_id"] = data[2]
	res["parent_id"] = data[3]
	res["external_parent_id"] = data[4]
	res["external_from"] = data[5]
	res["external_picture"] = data[6]
	res["external_icon"] = data[7]
	res["external_message"] = data[8]
	res["external_attachments"] = data[9]
	res["external_created_time"] = data[10]
	res["external_updated_time"] = data[11]
	res["created_at"] = data[12]
	res["updated_at"] = data[13]
	res["deleted_at"] = data[14]
	*m = res
	return nil
}

func (ms *FbPostHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 15)
	args := make([]interface{}, 15)
	for i := 0; i < 15; i++ {
		args[i] = &data[i]
	}
	res := make(FbPostHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbPostHistory)
		m["id"] = data[0]
		m["external_id"] = data[1]
		m["fb_page_id"] = data[2]
		m["parent_id"] = data[3]
		m["external_parent_id"] = data[4]
		m["external_from"] = data[5]
		m["external_picture"] = data[6]
		m["external_icon"] = data[7]
		m["external_message"] = data[8]
		m["external_attachments"] = data[9]
		m["external_created_time"] = data[10]
		m["external_updated_time"] = data[11]
		m["created_at"] = data[12]
		m["updated_at"] = data[13]
		m["deleted_at"] = data[14]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
