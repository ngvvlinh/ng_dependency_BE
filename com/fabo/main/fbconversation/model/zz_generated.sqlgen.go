// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type FbConversations []*FbConversation

const __sqlFbConversation_Table = "fb_conversation"
const __sqlFbConversation_ListCols = "\"id\",\"external_id\",\"fb_page_id\",\"external_link\",\"external_message_count\",\"external_updated_time\",\"created_time\",\"updated_time\",\"deleted_time\""
const __sqlFbConversation_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"external_id\" = EXCLUDED.\"external_id\",\"fb_page_id\" = EXCLUDED.\"fb_page_id\",\"external_link\" = EXCLUDED.\"external_link\",\"external_message_count\" = EXCLUDED.\"external_message_count\",\"external_updated_time\" = EXCLUDED.\"external_updated_time\",\"created_time\" = EXCLUDED.\"created_time\",\"updated_time\" = EXCLUDED.\"updated_time\",\"deleted_time\" = EXCLUDED.\"deleted_time\""
const __sqlFbConversation_Insert = "INSERT INTO \"fb_conversation\" (" + __sqlFbConversation_ListCols + ") VALUES"
const __sqlFbConversation_Select = "SELECT " + __sqlFbConversation_ListCols + " FROM \"fb_conversation\""
const __sqlFbConversation_Select_history = "SELECT " + __sqlFbConversation_ListCols + " FROM history.\"fb_conversation\""
const __sqlFbConversation_UpdateAll = "UPDATE \"fb_conversation\" SET (" + __sqlFbConversation_ListCols + ")"
const __sqlFbConversation_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_conversation_pkey DO UPDATE SET"

func (m *FbConversation) SQLTableName() string  { return "fb_conversation" }
func (m *FbConversations) SQLTableName() string { return "fb_conversation" }
func (m *FbConversation) SQLListCols() string   { return __sqlFbConversation_ListCols }

func (m *FbConversation) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbConversation_ListCols + " FROM \"fb_conversation\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbConversation) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_conversation"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_id": {
			ColumnName:       "external_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"fb_page_id": {
			ColumnName:       "fb_page_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_link": {
			ColumnName:       "external_link",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_message_count": {
			ColumnName:       "external_message_count",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_updated_time": {
			ColumnName:       "external_updated_time",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_time": {
			ColumnName:       "created_time",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_time": {
			ColumnName:       "updated_time",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_time": {
			ColumnName:       "deleted_time",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "fb_conversation", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbConversation)(nil))
}

func (m *FbConversation) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.ExternalID),
		m.FbPageID,
		core.String(m.ExternalLink),
		core.Int(m.ExternalMessageCount),
		core.Time(m.ExternalUpdatedTime),
		core.Now(m.CreatedTime, now, create),
		core.Now(m.UpdatedTime, now, true),
		core.Time(m.DeletedTime),
	}
}

func (m *FbConversation) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.ExternalID),
		&m.FbPageID,
		(*core.String)(&m.ExternalLink),
		(*core.Int)(&m.ExternalMessageCount),
		(*core.Time)(&m.ExternalUpdatedTime),
		(*core.Time)(&m.CreatedTime),
		(*core.Time)(&m.UpdatedTime),
		(*core.Time)(&m.DeletedTime),
	}
}

func (m *FbConversation) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbConversations) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbConversations, 0, 128)
	for rows.Next() {
		m := new(FbConversation)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbConversation) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbConversation_Select)
	return nil
}

func (_ *FbConversations) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbConversation_Select)
	return nil
}

func (m *FbConversation) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbConversation_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbConversations) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbConversation_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(9)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbConversation) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbConversation_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbConversation_ListColsOnConflict)
	return nil
}

func (ms FbConversations) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbConversation_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbConversation_ListColsOnConflict)
	return nil
}

func (m *FbConversation) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_conversation")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalID)
	}
	if m.FbPageID != 0 {
		flag = true
		w.WriteName("fb_page_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FbPageID)
	}
	if m.ExternalLink != "" {
		flag = true
		w.WriteName("external_link")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalLink)
	}
	if m.ExternalMessageCount != 0 {
		flag = true
		w.WriteName("external_message_count")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalMessageCount)
	}
	if !m.ExternalUpdatedTime.IsZero() {
		flag = true
		w.WriteName("external_updated_time")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalUpdatedTime)
	}
	if !m.CreatedTime.IsZero() {
		flag = true
		w.WriteName("created_time")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedTime)
	}
	if !m.UpdatedTime.IsZero() {
		flag = true
		w.WriteName("updated_time")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedTime, time.Now(), true))
	}
	if !m.DeletedTime.IsZero() {
		flag = true
		w.WriteName("deleted_time")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedTime)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbConversation) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbConversation_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbConversationHistory map[string]interface{}
type FbConversationHistories []map[string]interface{}

func (m *FbConversationHistory) SQLTableName() string  { return "history.\"fb_conversation\"" }
func (m FbConversationHistories) SQLTableName() string { return "history.\"fb_conversation\"" }

func (m *FbConversationHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbConversation_Select_history)
	return nil
}

func (m FbConversationHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbConversation_Select_history)
	return nil
}

func (m FbConversationHistory) ID() core.Interface         { return core.Interface{m["id"]} }
func (m FbConversationHistory) ExternalID() core.Interface { return core.Interface{m["external_id"]} }
func (m FbConversationHistory) FbPageID() core.Interface   { return core.Interface{m["fb_page_id"]} }
func (m FbConversationHistory) ExternalLink() core.Interface {
	return core.Interface{m["external_link"]}
}
func (m FbConversationHistory) ExternalMessageCount() core.Interface {
	return core.Interface{m["external_message_count"]}
}
func (m FbConversationHistory) ExternalUpdatedTime() core.Interface {
	return core.Interface{m["external_updated_time"]}
}
func (m FbConversationHistory) CreatedTime() core.Interface { return core.Interface{m["created_time"]} }
func (m FbConversationHistory) UpdatedTime() core.Interface { return core.Interface{m["updated_time"]} }
func (m FbConversationHistory) DeletedTime() core.Interface { return core.Interface{m["deleted_time"]} }

func (m *FbConversationHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbConversationHistory, 9)
	res["id"] = data[0]
	res["external_id"] = data[1]
	res["fb_page_id"] = data[2]
	res["external_link"] = data[3]
	res["external_message_count"] = data[4]
	res["external_updated_time"] = data[5]
	res["created_time"] = data[6]
	res["updated_time"] = data[7]
	res["deleted_time"] = data[8]
	*m = res
	return nil
}

func (ms *FbConversationHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	res := make(FbConversationHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbConversationHistory)
		m["id"] = data[0]
		m["external_id"] = data[1]
		m["fb_page_id"] = data[2]
		m["external_link"] = data[3]
		m["external_message_count"] = data[4]
		m["external_updated_time"] = data[5]
		m["created_time"] = data[6]
		m["updated_time"] = data[7]
		m["deleted_time"] = data[8]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
