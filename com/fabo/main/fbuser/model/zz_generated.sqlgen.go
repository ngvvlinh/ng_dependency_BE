// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type FbExternalUsers []*FbExternalUser

const __sqlFbExternalUser_Table = "fb_external_user"
const __sqlFbExternalUser_ListCols = "\"id\",\"user_id\",\"external_id\",\"external_info\",\"status\",\"created_at\",\"updated_at\""
const __sqlFbExternalUser_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"user_id\" = EXCLUDED.\"user_id\",\"external_id\" = EXCLUDED.\"external_id\",\"external_info\" = EXCLUDED.\"external_info\",\"status\" = EXCLUDED.\"status\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlFbExternalUser_Insert = "INSERT INTO \"fb_external_user\" (" + __sqlFbExternalUser_ListCols + ") VALUES"
const __sqlFbExternalUser_Select = "SELECT " + __sqlFbExternalUser_ListCols + " FROM \"fb_external_user\""
const __sqlFbExternalUser_Select_history = "SELECT " + __sqlFbExternalUser_ListCols + " FROM history.\"fb_external_user\""
const __sqlFbExternalUser_UpdateAll = "UPDATE \"fb_external_user\" SET (" + __sqlFbExternalUser_ListCols + ")"
const __sqlFbExternalUser_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_external_user_pkey DO UPDATE SET"

func (m *FbExternalUser) SQLTableName() string  { return "fb_external_user" }
func (m *FbExternalUsers) SQLTableName() string { return "fb_external_user" }
func (m *FbExternalUser) SQLListCols() string   { return __sqlFbExternalUser_ListCols }

func (m *FbExternalUser) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbExternalUser_ListCols + " FROM \"fb_external_user\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbExternalUser) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_external_user"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"user_id": {
			ColumnName:       "user_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_id": {
			ColumnName:       "external_id",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_info": {
			ColumnName:       "external_info",
			ColumnType:       "*FbExternalUserInfo",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"status": {
			ColumnName:       "status",
			ColumnType:       "status3.Status",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"Z", "P", "N"},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "fb_external_user", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbExternalUser)(nil))
}

func (m *FbExternalUser) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.UserID,
		core.String(m.ExternalID),
		core.JSON{m.ExternalInfo},
		m.Status,
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *FbExternalUser) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.UserID,
		(*core.String)(&m.ExternalID),
		core.JSON{&m.ExternalInfo},
		&m.Status,
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *FbExternalUser) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbExternalUsers) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbExternalUsers, 0, 128)
	for rows.Next() {
		m := new(FbExternalUser)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbExternalUser) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalUser_Select)
	return nil
}

func (_ *FbExternalUsers) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalUser_Select)
	return nil
}

func (m *FbExternalUser) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalUser_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbExternalUsers) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalUser_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(7)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbExternalUser) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalUser_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalUser_ListColsOnConflict)
	return nil
}

func (ms FbExternalUsers) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalUser_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalUser_ListColsOnConflict)
	return nil
}

func (m *FbExternalUser) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_external_user")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.UserID != 0 {
		flag = true
		w.WriteName("user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UserID)
	}
	if m.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalID)
	}
	if m.ExternalInfo != nil {
		flag = true
		w.WriteName("external_info")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalInfo})
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbExternalUser) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalUser_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbExternalUserHistory map[string]interface{}
type FbExternalUserHistories []map[string]interface{}

func (m *FbExternalUserHistory) SQLTableName() string  { return "history.\"fb_external_user\"" }
func (m FbExternalUserHistories) SQLTableName() string { return "history.\"fb_external_user\"" }

func (m *FbExternalUserHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalUser_Select_history)
	return nil
}

func (m FbExternalUserHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalUser_Select_history)
	return nil
}

func (m FbExternalUserHistory) ID() core.Interface         { return core.Interface{m["id"]} }
func (m FbExternalUserHistory) UserID() core.Interface     { return core.Interface{m["user_id"]} }
func (m FbExternalUserHistory) ExternalID() core.Interface { return core.Interface{m["external_id"]} }
func (m FbExternalUserHistory) ExternalInfo() core.Interface {
	return core.Interface{m["external_info"]}
}
func (m FbExternalUserHistory) Status() core.Interface    { return core.Interface{m["status"]} }
func (m FbExternalUserHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m FbExternalUserHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *FbExternalUserHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbExternalUserHistory, 7)
	res["id"] = data[0]
	res["user_id"] = data[1]
	res["external_id"] = data[2]
	res["external_info"] = data[3]
	res["status"] = data[4]
	res["created_at"] = data[5]
	res["updated_at"] = data[6]
	*m = res
	return nil
}

func (ms *FbExternalUserHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	res := make(FbExternalUserHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbExternalUserHistory)
		m["id"] = data[0]
		m["user_id"] = data[1]
		m["external_id"] = data[2]
		m["external_info"] = data[3]
		m["status"] = data[4]
		m["created_at"] = data[5]
		m["updated_at"] = data[6]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type FbExternalUserInternals []*FbExternalUserInternal

const __sqlFbExternalUserInternal_Table = "fb_external_user_internal"
const __sqlFbExternalUserInternal_ListCols = "\"id\",\"token\",\"expires_in\",\"updated_at\""
const __sqlFbExternalUserInternal_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"token\" = EXCLUDED.\"token\",\"expires_in\" = EXCLUDED.\"expires_in\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlFbExternalUserInternal_Insert = "INSERT INTO \"fb_external_user_internal\" (" + __sqlFbExternalUserInternal_ListCols + ") VALUES"
const __sqlFbExternalUserInternal_Select = "SELECT " + __sqlFbExternalUserInternal_ListCols + " FROM \"fb_external_user_internal\""
const __sqlFbExternalUserInternal_Select_history = "SELECT " + __sqlFbExternalUserInternal_ListCols + " FROM history.\"fb_external_user_internal\""
const __sqlFbExternalUserInternal_UpdateAll = "UPDATE \"fb_external_user_internal\" SET (" + __sqlFbExternalUserInternal_ListCols + ")"
const __sqlFbExternalUserInternal_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_external_user_internal_pkey DO UPDATE SET"

func (m *FbExternalUserInternal) SQLTableName() string  { return "fb_external_user_internal" }
func (m *FbExternalUserInternals) SQLTableName() string { return "fb_external_user_internal" }
func (m *FbExternalUserInternal) SQLListCols() string   { return __sqlFbExternalUserInternal_ListCols }

func (m *FbExternalUserInternal) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbExternalUserInternal_ListCols + " FROM \"fb_external_user_internal\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *FbExternalUserInternal) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "fb_external_user_internal"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"token": {
			ColumnName:       "token",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"expires_in": {
			ColumnName:       "expires_in",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "fb_external_user_internal", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbExternalUserInternal)(nil))
}

func (m *FbExternalUserInternal) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.Token),
		core.Int(m.ExpiresIn),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *FbExternalUserInternal) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.Token),
		(*core.Int)(&m.ExpiresIn),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *FbExternalUserInternal) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbExternalUserInternals) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbExternalUserInternals, 0, 128)
	for rows.Next() {
		m := new(FbExternalUserInternal)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbExternalUserInternal) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalUserInternal_Select)
	return nil
}

func (_ *FbExternalUserInternals) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalUserInternal_Select)
	return nil
}

func (m *FbExternalUserInternal) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalUserInternal_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(4)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbExternalUserInternals) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalUserInternal_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(4)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbExternalUserInternal) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalUserInternal_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalUserInternal_ListColsOnConflict)
	return nil
}

func (ms FbExternalUserInternals) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbExternalUserInternal_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbExternalUserInternal_ListColsOnConflict)
	return nil
}

func (m *FbExternalUserInternal) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_external_user_internal")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Token != "" {
		flag = true
		w.WriteName("token")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Token)
	}
	if m.ExpiresIn != 0 {
		flag = true
		w.WriteName("expires_in")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExpiresIn)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbExternalUserInternal) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalUserInternal_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(4)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbExternalUserInternalHistory map[string]interface{}
type FbExternalUserInternalHistories []map[string]interface{}

func (m *FbExternalUserInternalHistory) SQLTableName() string {
	return "history.\"fb_external_user_internal\""
}
func (m FbExternalUserInternalHistories) SQLTableName() string {
	return "history.\"fb_external_user_internal\""
}

func (m *FbExternalUserInternalHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalUserInternal_Select_history)
	return nil
}

func (m FbExternalUserInternalHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbExternalUserInternal_Select_history)
	return nil
}

func (m FbExternalUserInternalHistory) ID() core.Interface    { return core.Interface{m["id"]} }
func (m FbExternalUserInternalHistory) Token() core.Interface { return core.Interface{m["token"]} }
func (m FbExternalUserInternalHistory) ExpiresIn() core.Interface {
	return core.Interface{m["expires_in"]}
}
func (m FbExternalUserInternalHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *FbExternalUserInternalHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 4)
	args := make([]interface{}, 4)
	for i := 0; i < 4; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbExternalUserInternalHistory, 4)
	res["id"] = data[0]
	res["token"] = data[1]
	res["expires_in"] = data[2]
	res["updated_at"] = data[3]
	*m = res
	return nil
}

func (ms *FbExternalUserInternalHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 4)
	args := make([]interface{}, 4)
	for i := 0; i < 4; i++ {
		args[i] = &data[i]
	}
	res := make(FbExternalUserInternalHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbExternalUserInternalHistory)
		m["id"] = data[0]
		m["token"] = data[1]
		m["expires_in"] = data[2]
		m["updated_at"] = data[3]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
