// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "etop.vn/backend/pkg/common/sql/cmsql"
	core "etop.vn/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type FbUsers []*FbUser

const __sqlFbUser_Table = "fb_user"
const __sqlFbUser_ListCols = "\"id\",\"external_id\",\"user_id\",\"info\",\"status\",\"created_at\",\"updated_at\""
const __sqlFbUser_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"external_id\" = EXCLUDED.\"external_id\",\"user_id\" = EXCLUDED.\"user_id\",\"info\" = EXCLUDED.\"info\",\"status\" = EXCLUDED.\"status\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlFbUser_Insert = "INSERT INTO \"fb_user\" (" + __sqlFbUser_ListCols + ") VALUES"
const __sqlFbUser_Select = "SELECT " + __sqlFbUser_ListCols + " FROM \"fb_user\""
const __sqlFbUser_Select_history = "SELECT " + __sqlFbUser_ListCols + " FROM history.\"fb_user\""
const __sqlFbUser_UpdateAll = "UPDATE \"fb_user\" SET (" + __sqlFbUser_ListCols + ")"
const __sqlFbUser_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_user_pkey DO UPDATE SET"

func (m *FbUser) SQLTableName() string  { return "fb_user" }
func (m *FbUsers) SQLTableName() string { return "fb_user" }
func (m *FbUser) SQLListCols() string   { return __sqlFbUser_ListCols }

func (m *FbUser) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbUser_ListCols + " FROM \"fb_user\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbUser)(nil))
}

func (m *FbUser) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.ExternalID),
		m.UserID,
		core.JSON{&m.Info},
		m.Status,
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *FbUser) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.ExternalID),
		&m.UserID,
		core.JSON{&m.Info},
		&m.Status,
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *FbUser) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbUsers) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbUsers, 0, 128)
	for rows.Next() {
		m := new(FbUser)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbUser) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbUser_Select)
	return nil
}

func (_ *FbUsers) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbUser_Select)
	return nil
}

func (m *FbUser) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbUser_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbUsers) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbUser_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(7)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbUser) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbUser_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbUser_ListColsOnConflict)
	return nil
}

func (ms FbUsers) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbUser_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbUser_ListColsOnConflict)
	return nil
}

func (m *FbUser) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_user")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalID)
	}
	if m.UserID != 0 {
		flag = true
		w.WriteName("user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UserID)
	}
	if true {
		flag = true
		w.WriteName("info")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{&m.Info})
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbUser) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbUser_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbUserHistory map[string]interface{}
type FbUserHistories []map[string]interface{}

func (m *FbUserHistory) SQLTableName() string  { return "history.\"fb_user\"" }
func (m FbUserHistories) SQLTableName() string { return "history.\"fb_user\"" }

func (m *FbUserHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbUser_Select_history)
	return nil
}

func (m FbUserHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbUser_Select_history)
	return nil
}

func (m FbUserHistory) ID() core.Interface         { return core.Interface{m["id"]} }
func (m FbUserHistory) ExternalID() core.Interface { return core.Interface{m["external_id"]} }
func (m FbUserHistory) UserID() core.Interface     { return core.Interface{m["user_id"]} }
func (m FbUserHistory) Info() core.Interface       { return core.Interface{m["info"]} }
func (m FbUserHistory) Status() core.Interface     { return core.Interface{m["status"]} }
func (m FbUserHistory) CreatedAt() core.Interface  { return core.Interface{m["created_at"]} }
func (m FbUserHistory) UpdatedAt() core.Interface  { return core.Interface{m["updated_at"]} }

func (m *FbUserHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbUserHistory, 7)
	res["id"] = data[0]
	res["external_id"] = data[1]
	res["user_id"] = data[2]
	res["info"] = data[3]
	res["status"] = data[4]
	res["created_at"] = data[5]
	res["updated_at"] = data[6]
	*m = res
	return nil
}

func (ms *FbUserHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	res := make(FbUserHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbUserHistory)
		m["id"] = data[0]
		m["external_id"] = data[1]
		m["user_id"] = data[2]
		m["info"] = data[3]
		m["status"] = data[4]
		m["created_at"] = data[5]
		m["updated_at"] = data[6]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type FbUserInternals []*FbUserInternal

const __sqlFbUserInternal_Table = "fb_user_internal"
const __sqlFbUserInternal_ListCols = "\"id\",\"token\",\"expires_in\",\"updated_at\""
const __sqlFbUserInternal_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"token\" = EXCLUDED.\"token\",\"expires_in\" = EXCLUDED.\"expires_in\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlFbUserInternal_Insert = "INSERT INTO \"fb_user_internal\" (" + __sqlFbUserInternal_ListCols + ") VALUES"
const __sqlFbUserInternal_Select = "SELECT " + __sqlFbUserInternal_ListCols + " FROM \"fb_user_internal\""
const __sqlFbUserInternal_Select_history = "SELECT " + __sqlFbUserInternal_ListCols + " FROM history.\"fb_user_internal\""
const __sqlFbUserInternal_UpdateAll = "UPDATE \"fb_user_internal\" SET (" + __sqlFbUserInternal_ListCols + ")"
const __sqlFbUserInternal_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT fb_user_internal_pkey DO UPDATE SET"

func (m *FbUserInternal) SQLTableName() string  { return "fb_user_internal" }
func (m *FbUserInternals) SQLTableName() string { return "fb_user_internal" }
func (m *FbUserInternal) SQLListCols() string   { return __sqlFbUserInternal_ListCols }

func (m *FbUserInternal) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlFbUserInternal_ListCols + " FROM \"fb_user_internal\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*FbUserInternal)(nil))
}

func (m *FbUserInternal) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.Token),
		core.Int(m.ExpiresIn),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *FbUserInternal) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.Token),
		(*core.Int)(&m.ExpiresIn),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *FbUserInternal) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *FbUserInternals) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(FbUserInternals, 0, 128)
	for rows.Next() {
		m := new(FbUserInternal)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *FbUserInternal) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbUserInternal_Select)
	return nil
}

func (_ *FbUserInternals) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbUserInternal_Select)
	return nil
}

func (m *FbUserInternal) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbUserInternal_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(4)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms FbUserInternals) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlFbUserInternal_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(4)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *FbUserInternal) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlFbUserInternal_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbUserInternal_ListColsOnConflict)
	return nil
}

func (ms FbUserInternals) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlFbUserInternal_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlFbUserInternal_ListColsOnConflict)
	return nil
}

func (m *FbUserInternal) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("fb_user_internal")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Token != "" {
		flag = true
		w.WriteName("token")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Token)
	}
	if m.ExpiresIn != 0 {
		flag = true
		w.WriteName("expires_in")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExpiresIn)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *FbUserInternal) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlFbUserInternal_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(4)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type FbUserInternalHistory map[string]interface{}
type FbUserInternalHistories []map[string]interface{}

func (m *FbUserInternalHistory) SQLTableName() string  { return "history.\"fb_user_internal\"" }
func (m FbUserInternalHistories) SQLTableName() string { return "history.\"fb_user_internal\"" }

func (m *FbUserInternalHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbUserInternal_Select_history)
	return nil
}

func (m FbUserInternalHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlFbUserInternal_Select_history)
	return nil
}

func (m FbUserInternalHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m FbUserInternalHistory) Token() core.Interface     { return core.Interface{m["token"]} }
func (m FbUserInternalHistory) ExpiresIn() core.Interface { return core.Interface{m["expires_in"]} }
func (m FbUserInternalHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *FbUserInternalHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 4)
	args := make([]interface{}, 4)
	for i := 0; i < 4; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(FbUserInternalHistory, 4)
	res["id"] = data[0]
	res["token"] = data[1]
	res["expires_in"] = data[2]
	res["updated_at"] = data[3]
	*m = res
	return nil
}

func (ms *FbUserInternalHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 4)
	args := make([]interface{}, 4)
	for i := 0; i < 4; i++ {
		args[i] = &data[i]
	}
	res := make(FbUserInternalHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(FbUserInternalHistory)
		m["id"] = data[0]
		m["token"] = data[1]
		m["expires_in"] = data[2]
		m["updated_at"] = data[3]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
