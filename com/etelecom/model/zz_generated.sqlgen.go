// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type Extensions []*Extension

const __sqlExtension_Table = "extension"
const __sqlExtension_ListCols = "\"id\",\"user_id\",\"account_id\",\"hotline_id\",\"extension_number\",\"extension_password\",\"external_data\",\"connection_id\",\"connection_method\",\"created_at\",\"updated_at\",\"deleted_at\""
const __sqlExtension_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"user_id\" = EXCLUDED.\"user_id\",\"account_id\" = EXCLUDED.\"account_id\",\"hotline_id\" = EXCLUDED.\"hotline_id\",\"extension_number\" = EXCLUDED.\"extension_number\",\"extension_password\" = EXCLUDED.\"extension_password\",\"external_data\" = EXCLUDED.\"external_data\",\"connection_id\" = EXCLUDED.\"connection_id\",\"connection_method\" = EXCLUDED.\"connection_method\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\""
const __sqlExtension_Insert = "INSERT INTO \"extension\" (" + __sqlExtension_ListCols + ") VALUES"
const __sqlExtension_Select = "SELECT " + __sqlExtension_ListCols + " FROM \"extension\""
const __sqlExtension_Select_history = "SELECT " + __sqlExtension_ListCols + " FROM history.\"extension\""
const __sqlExtension_UpdateAll = "UPDATE \"extension\" SET (" + __sqlExtension_ListCols + ")"
const __sqlExtension_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT extension_pkey DO UPDATE SET"

func (m *Extension) SQLTableName() string  { return "extension" }
func (m *Extensions) SQLTableName() string { return "extension" }
func (m *Extension) SQLListCols() string   { return __sqlExtension_ListCols }

func (m *Extension) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlExtension_ListCols + " FROM \"extension\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *Extension) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "extension"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"user_id": {
			ColumnName:       "user_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"account_id": {
			ColumnName:       "account_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"hotline_id": {
			ColumnName:       "hotline_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"extension_number": {
			ColumnName:       "extension_number",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"extension_password": {
			ColumnName:       "extension_password",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"external_data": {
			ColumnName:       "external_data",
			ColumnType:       "*ExtensionExternalData",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"connection_id": {
			ColumnName:       "connection_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"connection_method": {
			ColumnName:       "connection_method",
			ColumnType:       "connection_type.ConnectionMethod",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"unknown", "builtin", "topship", "direct"},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_at": {
			ColumnName:       "deleted_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "extension", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*Extension)(nil))
}

func (m *Extension) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.UserID,
		m.AccountID,
		m.HotlineID,
		core.String(m.ExtensionNumber),
		core.String(m.ExtensionPassword),
		core.JSON{m.ExternalData},
		m.ConnectionID,
		m.ConnectionMethod,
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
	}
}

func (m *Extension) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.UserID,
		&m.AccountID,
		&m.HotlineID,
		(*core.String)(&m.ExtensionNumber),
		(*core.String)(&m.ExtensionPassword),
		core.JSON{&m.ExternalData},
		&m.ConnectionID,
		&m.ConnectionMethod,
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *Extension) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Extensions) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Extensions, 0, 128)
	for rows.Next() {
		m := new(Extension)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Extension) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlExtension_Select)
	return nil
}

func (_ *Extensions) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlExtension_Select)
	return nil
}

func (m *Extension) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlExtension_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(12)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Extensions) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlExtension_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(12)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Extension) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlExtension_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlExtension_ListColsOnConflict)
	return nil
}

func (ms Extensions) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlExtension_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlExtension_ListColsOnConflict)
	return nil
}

func (m *Extension) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("extension")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.UserID != 0 {
		flag = true
		w.WriteName("user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UserID)
	}
	if m.AccountID != 0 {
		flag = true
		w.WriteName("account_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccountID)
	}
	if m.HotlineID != 0 {
		flag = true
		w.WriteName("hotline_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.HotlineID)
	}
	if m.ExtensionNumber != "" {
		flag = true
		w.WriteName("extension_number")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExtensionNumber)
	}
	if m.ExtensionPassword != "" {
		flag = true
		w.WriteName("extension_password")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExtensionPassword)
	}
	if m.ExternalData != nil {
		flag = true
		w.WriteName("external_data")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalData})
	}
	if m.ConnectionID != 0 {
		flag = true
		w.WriteName("connection_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ConnectionID)
	}
	if m.ConnectionMethod != 0 {
		flag = true
		w.WriteName("connection_method")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ConnectionMethod)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if true { // always update time
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Extension) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlExtension_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(12)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ExtensionHistory map[string]interface{}
type ExtensionHistories []map[string]interface{}

func (m *ExtensionHistory) SQLTableName() string  { return "history.\"extension\"" }
func (m ExtensionHistories) SQLTableName() string { return "history.\"extension\"" }

func (m *ExtensionHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlExtension_Select_history)
	return nil
}

func (m ExtensionHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlExtension_Select_history)
	return nil
}

func (m ExtensionHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m ExtensionHistory) UserID() core.Interface    { return core.Interface{m["user_id"]} }
func (m ExtensionHistory) AccountID() core.Interface { return core.Interface{m["account_id"]} }
func (m ExtensionHistory) HotlineID() core.Interface { return core.Interface{m["hotline_id"]} }
func (m ExtensionHistory) ExtensionNumber() core.Interface {
	return core.Interface{m["extension_number"]}
}
func (m ExtensionHistory) ExtensionPassword() core.Interface {
	return core.Interface{m["extension_password"]}
}
func (m ExtensionHistory) ExternalData() core.Interface { return core.Interface{m["external_data"]} }
func (m ExtensionHistory) ConnectionID() core.Interface { return core.Interface{m["connection_id"]} }
func (m ExtensionHistory) ConnectionMethod() core.Interface {
	return core.Interface{m["connection_method"]}
}
func (m ExtensionHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m ExtensionHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }
func (m ExtensionHistory) DeletedAt() core.Interface { return core.Interface{m["deleted_at"]} }

func (m *ExtensionHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 12)
	args := make([]interface{}, 12)
	for i := 0; i < 12; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ExtensionHistory, 12)
	res["id"] = data[0]
	res["user_id"] = data[1]
	res["account_id"] = data[2]
	res["hotline_id"] = data[3]
	res["extension_number"] = data[4]
	res["extension_password"] = data[5]
	res["external_data"] = data[6]
	res["connection_id"] = data[7]
	res["connection_method"] = data[8]
	res["created_at"] = data[9]
	res["updated_at"] = data[10]
	res["deleted_at"] = data[11]
	*m = res
	return nil
}

func (ms *ExtensionHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 12)
	args := make([]interface{}, 12)
	for i := 0; i < 12; i++ {
		args[i] = &data[i]
	}
	res := make(ExtensionHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ExtensionHistory)
		m["id"] = data[0]
		m["user_id"] = data[1]
		m["account_id"] = data[2]
		m["hotline_id"] = data[3]
		m["extension_number"] = data[4]
		m["extension_password"] = data[5]
		m["external_data"] = data[6]
		m["connection_id"] = data[7]
		m["connection_method"] = data[8]
		m["created_at"] = data[9]
		m["updated_at"] = data[10]
		m["deleted_at"] = data[11]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type Hotlines []*Hotline

const __sqlHotline_Table = "hotline"
const __sqlHotline_ListCols = "\"id\",\"owner_id\",\"hotline\",\"network\",\"connection_id\",\"connection_method\",\"created_at\",\"updated_at\",\"deleted_at\""
const __sqlHotline_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"owner_id\" = EXCLUDED.\"owner_id\",\"hotline\" = EXCLUDED.\"hotline\",\"network\" = EXCLUDED.\"network\",\"connection_id\" = EXCLUDED.\"connection_id\",\"connection_method\" = EXCLUDED.\"connection_method\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\""
const __sqlHotline_Insert = "INSERT INTO \"hotline\" (" + __sqlHotline_ListCols + ") VALUES"
const __sqlHotline_Select = "SELECT " + __sqlHotline_ListCols + " FROM \"hotline\""
const __sqlHotline_Select_history = "SELECT " + __sqlHotline_ListCols + " FROM history.\"hotline\""
const __sqlHotline_UpdateAll = "UPDATE \"hotline\" SET (" + __sqlHotline_ListCols + ")"
const __sqlHotline_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT hotline_pkey DO UPDATE SET"

func (m *Hotline) SQLTableName() string  { return "hotline" }
func (m *Hotlines) SQLTableName() string { return "hotline" }
func (m *Hotline) SQLListCols() string   { return __sqlHotline_ListCols }

func (m *Hotline) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlHotline_ListCols + " FROM \"hotline\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *Hotline) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "hotline"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"owner_id": {
			ColumnName:       "owner_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"hotline": {
			ColumnName:       "hotline",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"network": {
			ColumnName:       "network",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"connection_id": {
			ColumnName:       "connection_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"connection_method": {
			ColumnName:       "connection_method",
			ColumnType:       "connection_type.ConnectionMethod",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"unknown", "builtin", "topship", "direct"},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_at": {
			ColumnName:       "deleted_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "hotline", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*Hotline)(nil))
}

func (m *Hotline) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.OwnerID,
		core.String(m.Hotline),
		core.String(m.Network),
		m.ConnectionID,
		m.ConnectionMethod,
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
	}
}

func (m *Hotline) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.OwnerID,
		(*core.String)(&m.Hotline),
		(*core.String)(&m.Network),
		&m.ConnectionID,
		&m.ConnectionMethod,
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *Hotline) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Hotlines) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Hotlines, 0, 128)
	for rows.Next() {
		m := new(Hotline)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Hotline) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlHotline_Select)
	return nil
}

func (_ *Hotlines) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlHotline_Select)
	return nil
}

func (m *Hotline) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlHotline_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Hotlines) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlHotline_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(9)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Hotline) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlHotline_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlHotline_ListColsOnConflict)
	return nil
}

func (ms Hotlines) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlHotline_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlHotline_ListColsOnConflict)
	return nil
}

func (m *Hotline) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("hotline")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.OwnerID != 0 {
		flag = true
		w.WriteName("owner_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OwnerID)
	}
	if m.Hotline != "" {
		flag = true
		w.WriteName("hotline")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Hotline)
	}
	if m.Network != "" {
		flag = true
		w.WriteName("network")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Network)
	}
	if m.ConnectionID != 0 {
		flag = true
		w.WriteName("connection_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ConnectionID)
	}
	if m.ConnectionMethod != 0 {
		flag = true
		w.WriteName("connection_method")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ConnectionMethod)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if true { // always update time
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Hotline) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlHotline_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type HotlineHistory map[string]interface{}
type HotlineHistories []map[string]interface{}

func (m *HotlineHistory) SQLTableName() string  { return "history.\"hotline\"" }
func (m HotlineHistories) SQLTableName() string { return "history.\"hotline\"" }

func (m *HotlineHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlHotline_Select_history)
	return nil
}

func (m HotlineHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlHotline_Select_history)
	return nil
}

func (m HotlineHistory) ID() core.Interface           { return core.Interface{m["id"]} }
func (m HotlineHistory) OwnerID() core.Interface      { return core.Interface{m["owner_id"]} }
func (m HotlineHistory) Hotline() core.Interface      { return core.Interface{m["hotline"]} }
func (m HotlineHistory) Network() core.Interface      { return core.Interface{m["network"]} }
func (m HotlineHistory) ConnectionID() core.Interface { return core.Interface{m["connection_id"]} }
func (m HotlineHistory) ConnectionMethod() core.Interface {
	return core.Interface{m["connection_method"]}
}
func (m HotlineHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m HotlineHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }
func (m HotlineHistory) DeletedAt() core.Interface { return core.Interface{m["deleted_at"]} }

func (m *HotlineHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(HotlineHistory, 9)
	res["id"] = data[0]
	res["owner_id"] = data[1]
	res["hotline"] = data[2]
	res["network"] = data[3]
	res["connection_id"] = data[4]
	res["connection_method"] = data[5]
	res["created_at"] = data[6]
	res["updated_at"] = data[7]
	res["deleted_at"] = data[8]
	*m = res
	return nil
}

func (ms *HotlineHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	res := make(HotlineHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(HotlineHistory)
		m["id"] = data[0]
		m["owner_id"] = data[1]
		m["hotline"] = data[2]
		m["network"] = data[3]
		m["connection_id"] = data[4]
		m["connection_method"] = data[5]
		m["created_at"] = data[6]
		m["updated_at"] = data[7]
		m["deleted_at"] = data[8]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type Summaries []*Summary

const __sqlSummary_Table = "summary"
const __sqlSummary_ListCols = "\"id\",\"extension_id\",\"date\",\"total_phone_call\",\"total_call_time\",\"created_at\",\"updated_at\",\"deleted_at\""
const __sqlSummary_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"extension_id\" = EXCLUDED.\"extension_id\",\"date\" = EXCLUDED.\"date\",\"total_phone_call\" = EXCLUDED.\"total_phone_call\",\"total_call_time\" = EXCLUDED.\"total_call_time\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\""
const __sqlSummary_Insert = "INSERT INTO \"summary\" (" + __sqlSummary_ListCols + ") VALUES"
const __sqlSummary_Select = "SELECT " + __sqlSummary_ListCols + " FROM \"summary\""
const __sqlSummary_Select_history = "SELECT " + __sqlSummary_ListCols + " FROM history.\"summary\""
const __sqlSummary_UpdateAll = "UPDATE \"summary\" SET (" + __sqlSummary_ListCols + ")"
const __sqlSummary_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT summary_pkey DO UPDATE SET"

func (m *Summary) SQLTableName() string   { return "summary" }
func (m *Summaries) SQLTableName() string { return "summary" }
func (m *Summary) SQLListCols() string    { return __sqlSummary_ListCols }

func (m *Summary) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlSummary_ListCols + " FROM \"summary\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *Summary) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "summary"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"extension_id": {
			ColumnName:       "extension_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"date": {
			ColumnName:       "date",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"total_phone_call": {
			ColumnName:       "total_phone_call",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"total_call_time": {
			ColumnName:       "total_call_time",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"deleted_at": {
			ColumnName:       "deleted_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "summary", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*Summary)(nil))
}

func (m *Summary) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.ExtensionID,
		core.String(m.Date),
		core.Int(m.TotalPhoneCall),
		core.Int(m.TotalCallTime),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
	}
}

func (m *Summary) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.ExtensionID,
		(*core.String)(&m.Date),
		(*core.Int)(&m.TotalPhoneCall),
		(*core.Int)(&m.TotalCallTime),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *Summary) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Summaries) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Summaries, 0, 128)
	for rows.Next() {
		m := new(Summary)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Summary) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSummary_Select)
	return nil
}

func (_ *Summaries) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSummary_Select)
	return nil
}

func (m *Summary) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSummary_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Summaries) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSummary_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(8)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Summary) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlSummary_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlSummary_ListColsOnConflict)
	return nil
}

func (ms Summaries) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlSummary_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlSummary_ListColsOnConflict)
	return nil
}

func (m *Summary) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("summary")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ExtensionID != 0 {
		flag = true
		w.WriteName("extension_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExtensionID)
	}
	if m.Date != "" {
		flag = true
		w.WriteName("date")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Date)
	}
	if m.TotalPhoneCall != 0 {
		flag = true
		w.WriteName("total_phone_call")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalPhoneCall)
	}
	if m.TotalCallTime != 0 {
		flag = true
		w.WriteName("total_call_time")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalCallTime)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if true { // always update time
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Summary) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlSummary_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type SummaryHistory map[string]interface{}
type SummaryHistories []map[string]interface{}

func (m *SummaryHistory) SQLTableName() string  { return "history.\"summary\"" }
func (m SummaryHistories) SQLTableName() string { return "history.\"summary\"" }

func (m *SummaryHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSummary_Select_history)
	return nil
}

func (m SummaryHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSummary_Select_history)
	return nil
}

func (m SummaryHistory) ID() core.Interface             { return core.Interface{m["id"]} }
func (m SummaryHistory) ExtensionID() core.Interface    { return core.Interface{m["extension_id"]} }
func (m SummaryHistory) Date() core.Interface           { return core.Interface{m["date"]} }
func (m SummaryHistory) TotalPhoneCall() core.Interface { return core.Interface{m["total_phone_call"]} }
func (m SummaryHistory) TotalCallTime() core.Interface  { return core.Interface{m["total_call_time"]} }
func (m SummaryHistory) CreatedAt() core.Interface      { return core.Interface{m["created_at"]} }
func (m SummaryHistory) UpdatedAt() core.Interface      { return core.Interface{m["updated_at"]} }
func (m SummaryHistory) DeletedAt() core.Interface      { return core.Interface{m["deleted_at"]} }

func (m *SummaryHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(SummaryHistory, 8)
	res["id"] = data[0]
	res["extension_id"] = data[1]
	res["date"] = data[2]
	res["total_phone_call"] = data[3]
	res["total_call_time"] = data[4]
	res["created_at"] = data[5]
	res["updated_at"] = data[6]
	res["deleted_at"] = data[7]
	*m = res
	return nil
}

func (ms *SummaryHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	res := make(SummaryHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(SummaryHistory)
		m["id"] = data[0]
		m["extension_id"] = data[1]
		m["date"] = data[2]
		m["total_phone_call"] = data[3]
		m["total_call_time"] = data[4]
		m["created_at"] = data[5]
		m["updated_at"] = data[6]
		m["deleted_at"] = data[7]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
