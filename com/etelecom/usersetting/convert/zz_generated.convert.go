// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	usersetting "o.o/api/etelecom/usersetting"
	usersettingmodel "o.o/backend/com/etelecom/usersetting/model"
	conversion "o.o/backend/pkg/common/conversion"
)

/*
Custom conversions: (none)

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*usersettingmodel.UserSetting)(nil), (*usersetting.UserSetting)(nil), func(arg, out interface{}) error {
		Convert_usersettingmodel_UserSetting_usersetting_UserSetting(arg.(*usersettingmodel.UserSetting), out.(*usersetting.UserSetting))
		return nil
	})
	s.Register(([]*usersettingmodel.UserSetting)(nil), (*[]*usersetting.UserSetting)(nil), func(arg, out interface{}) error {
		out0 := Convert_usersettingmodel_UserSettings_usersetting_UserSettings(arg.([]*usersettingmodel.UserSetting))
		*out.(*[]*usersetting.UserSetting) = out0
		return nil
	})
	s.Register((*usersetting.UserSetting)(nil), (*usersettingmodel.UserSetting)(nil), func(arg, out interface{}) error {
		Convert_usersetting_UserSetting_usersettingmodel_UserSetting(arg.(*usersetting.UserSetting), out.(*usersettingmodel.UserSetting))
		return nil
	})
	s.Register(([]*usersetting.UserSetting)(nil), (*[]*usersettingmodel.UserSetting)(nil), func(arg, out interface{}) error {
		out0 := Convert_usersetting_UserSettings_usersettingmodel_UserSettings(arg.([]*usersetting.UserSetting))
		*out.(*[]*usersettingmodel.UserSetting) = out0
		return nil
	})
}

//-- convert o.o/api/etelecom/usersetting.UserSetting --//

func Convert_usersettingmodel_UserSetting_usersetting_UserSetting(arg *usersettingmodel.UserSetting, out *usersetting.UserSetting) *usersetting.UserSetting {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &usersetting.UserSetting{}
	}
	convert_usersettingmodel_UserSetting_usersetting_UserSetting(arg, out)
	return out
}

func convert_usersettingmodel_UserSetting_usersetting_UserSetting(arg *usersettingmodel.UserSetting, out *usersetting.UserSetting) {
	out.ID = arg.ID                                   // simple assign
	out.ExtensionChargeType = arg.ExtensionChargeType // simple assign
	out.CreatedAt = arg.CreatedAt                     // simple assign
	out.UpdatedAt = arg.UpdatedAt                     // simple assign
}

func Convert_usersettingmodel_UserSettings_usersetting_UserSettings(args []*usersettingmodel.UserSetting) (outs []*usersetting.UserSetting) {
	if args == nil {
		return nil
	}
	tmps := make([]usersetting.UserSetting, len(args))
	outs = make([]*usersetting.UserSetting, len(args))
	for i := range tmps {
		outs[i] = Convert_usersettingmodel_UserSetting_usersetting_UserSetting(args[i], &tmps[i])
	}
	return outs
}

func Convert_usersetting_UserSetting_usersettingmodel_UserSetting(arg *usersetting.UserSetting, out *usersettingmodel.UserSetting) *usersettingmodel.UserSetting {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &usersettingmodel.UserSetting{}
	}
	convert_usersetting_UserSetting_usersettingmodel_UserSetting(arg, out)
	return out
}

func convert_usersetting_UserSetting_usersettingmodel_UserSetting(arg *usersetting.UserSetting, out *usersettingmodel.UserSetting) {
	out.ID = arg.ID                                   // simple assign
	out.ExtensionChargeType = arg.ExtensionChargeType // simple assign
	out.CreatedAt = arg.CreatedAt                     // simple assign
	out.UpdatedAt = arg.UpdatedAt                     // simple assign
}

func Convert_usersetting_UserSettings_usersettingmodel_UserSettings(args []*usersetting.UserSetting) (outs []*usersettingmodel.UserSetting) {
	if args == nil {
		return nil
	}
	tmps := make([]usersettingmodel.UserSetting, len(args))
	outs = make([]*usersettingmodel.UserSetting, len(args))
	for i := range tmps {
		outs[i] = Convert_usersetting_UserSetting_usersettingmodel_UserSetting(args[i], &tmps[i])
	}
	return outs
}
