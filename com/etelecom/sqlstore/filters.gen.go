// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package sqlstore

import (
	time "time"

	connection_type "o.o/api/top/types/etc/connection_type"
	sq "o.o/backend/pkg/common/sql/sq"
	dot "o.o/capi/dot"
)

type ExtensionFilters struct{ prefix string }

func NewExtensionFilters(prefix string) ExtensionFilters {
	return ExtensionFilters{prefix}
}

func (ft *ExtensionFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(&ft.prefix, pred, args...)
}

func (ft ExtensionFilters) Prefix() string {
	return ft.prefix
}

func (ft *ExtensionFilters) ByID(ID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft *ExtensionFilters) ByIDPtr(ID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft *ExtensionFilters) ByUserID(UserID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "user_id",
		Value:  UserID,
		IsNil:  UserID == 0,
	}
}

func (ft *ExtensionFilters) ByUserIDPtr(UserID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "user_id",
		Value:  UserID,
		IsNil:  UserID == nil,
		IsZero: UserID != nil && (*UserID) == 0,
	}
}

func (ft *ExtensionFilters) ByAccountID(AccountID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == 0,
	}
}

func (ft *ExtensionFilters) ByAccountIDPtr(AccountID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == nil,
		IsZero: AccountID != nil && (*AccountID) == 0,
	}
}

func (ft *ExtensionFilters) ByExtensionNumber(ExtensionNumber string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "extension_number",
		Value:  ExtensionNumber,
		IsNil:  ExtensionNumber == "",
	}
}

func (ft *ExtensionFilters) ByExtensionNumberPtr(ExtensionNumber *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "extension_number",
		Value:  ExtensionNumber,
		IsNil:  ExtensionNumber == nil,
		IsZero: ExtensionNumber != nil && (*ExtensionNumber) == "",
	}
}

func (ft *ExtensionFilters) ByExtensionPassword(ExtensionPassword string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "extension_password",
		Value:  ExtensionPassword,
		IsNil:  ExtensionPassword == "",
	}
}

func (ft *ExtensionFilters) ByExtensionPasswordPtr(ExtensionPassword *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "extension_password",
		Value:  ExtensionPassword,
		IsNil:  ExtensionPassword == nil,
		IsZero: ExtensionPassword != nil && (*ExtensionPassword) == "",
	}
}

func (ft *ExtensionFilters) ByConnectionID(ConnectionID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "connection_id",
		Value:  ConnectionID,
		IsNil:  ConnectionID == 0,
	}
}

func (ft *ExtensionFilters) ByConnectionIDPtr(ConnectionID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "connection_id",
		Value:  ConnectionID,
		IsNil:  ConnectionID == nil,
		IsZero: ConnectionID != nil && (*ConnectionID) == 0,
	}
}

func (ft *ExtensionFilters) ByConnectionMethod(ConnectionMethod connection_type.ConnectionMethod) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "connection_method",
		Value:  ConnectionMethod,
		IsNil:  ConnectionMethod == 0,
	}
}

func (ft *ExtensionFilters) ByConnectionMethodPtr(ConnectionMethod *connection_type.ConnectionMethod) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "connection_method",
		Value:  ConnectionMethod,
		IsNil:  ConnectionMethod == nil,
		IsZero: ConnectionMethod != nil && (*ConnectionMethod) == 0,
	}
}

func (ft *ExtensionFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft *ExtensionFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft *ExtensionFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft *ExtensionFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft *ExtensionFilters) ByDeletedAt(DeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt.IsZero(),
	}
}

func (ft *ExtensionFilters) ByDeletedAtPtr(DeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt == nil,
		IsZero: DeletedAt != nil && (*DeletedAt).IsZero(),
	}
}

type HotlineFilters struct{ prefix string }

func NewHotlineFilters(prefix string) HotlineFilters {
	return HotlineFilters{prefix}
}

func (ft *HotlineFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(&ft.prefix, pred, args...)
}

func (ft HotlineFilters) Prefix() string {
	return ft.prefix
}

func (ft *HotlineFilters) ByID(ID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft *HotlineFilters) ByIDPtr(ID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft *HotlineFilters) ByUserID(UserID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "user_id",
		Value:  UserID,
		IsNil:  UserID == 0,
	}
}

func (ft *HotlineFilters) ByUserIDPtr(UserID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "user_id",
		Value:  UserID,
		IsNil:  UserID == nil,
		IsZero: UserID != nil && (*UserID) == 0,
	}
}

func (ft *HotlineFilters) ByHotline(Hotline string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "hotline",
		Value:  Hotline,
		IsNil:  Hotline == "",
	}
}

func (ft *HotlineFilters) ByHotlinePtr(Hotline *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "hotline",
		Value:  Hotline,
		IsNil:  Hotline == nil,
		IsZero: Hotline != nil && (*Hotline) == "",
	}
}

func (ft *HotlineFilters) ByNetwork(Network string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "network",
		Value:  Network,
		IsNil:  Network == "",
	}
}

func (ft *HotlineFilters) ByNetworkPtr(Network *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "network",
		Value:  Network,
		IsNil:  Network == nil,
		IsZero: Network != nil && (*Network) == "",
	}
}

func (ft *HotlineFilters) ByProvider(Provider string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "provider",
		Value:  Provider,
		IsNil:  Provider == "",
	}
}

func (ft *HotlineFilters) ByProviderPtr(Provider *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "provider",
		Value:  Provider,
		IsNil:  Provider == nil,
		IsZero: Provider != nil && (*Provider) == "",
	}
}

func (ft *HotlineFilters) ByConnectionID(ConnectionID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "connection_id",
		Value:  ConnectionID,
		IsNil:  ConnectionID == 0,
	}
}

func (ft *HotlineFilters) ByConnectionIDPtr(ConnectionID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "connection_id",
		Value:  ConnectionID,
		IsNil:  ConnectionID == nil,
		IsZero: ConnectionID != nil && (*ConnectionID) == 0,
	}
}

func (ft *HotlineFilters) ByConnectionMethod(ConnectionMethod connection_type.ConnectionMethod) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "connection_method",
		Value:  ConnectionMethod,
		IsNil:  ConnectionMethod == 0,
	}
}

func (ft *HotlineFilters) ByConnectionMethodPtr(ConnectionMethod *connection_type.ConnectionMethod) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "connection_method",
		Value:  ConnectionMethod,
		IsNil:  ConnectionMethod == nil,
		IsZero: ConnectionMethod != nil && (*ConnectionMethod) == 0,
	}
}

func (ft *HotlineFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft *HotlineFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft *HotlineFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft *HotlineFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft *HotlineFilters) ByDeletedAt(DeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt.IsZero(),
	}
}

func (ft *HotlineFilters) ByDeletedAtPtr(DeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt == nil,
		IsZero: DeletedAt != nil && (*DeletedAt).IsZero(),
	}
}

type SummaryFilters struct{ prefix string }

func NewSummaryFilters(prefix string) SummaryFilters {
	return SummaryFilters{prefix}
}

func (ft *SummaryFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(&ft.prefix, pred, args...)
}

func (ft SummaryFilters) Prefix() string {
	return ft.prefix
}

func (ft *SummaryFilters) ByID(ID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft *SummaryFilters) ByIDPtr(ID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft *SummaryFilters) ByExtensionID(ExtensionID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "extension_id",
		Value:  ExtensionID,
		IsNil:  ExtensionID == 0,
	}
}

func (ft *SummaryFilters) ByExtensionIDPtr(ExtensionID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "extension_id",
		Value:  ExtensionID,
		IsNil:  ExtensionID == nil,
		IsZero: ExtensionID != nil && (*ExtensionID) == 0,
	}
}

func (ft *SummaryFilters) ByDate(Date string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "date",
		Value:  Date,
		IsNil:  Date == "",
	}
}

func (ft *SummaryFilters) ByDatePtr(Date *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "date",
		Value:  Date,
		IsNil:  Date == nil,
		IsZero: Date != nil && (*Date) == "",
	}
}

func (ft *SummaryFilters) ByTotalPhoneCall(TotalPhoneCall int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "total_phone_call",
		Value:  TotalPhoneCall,
		IsNil:  TotalPhoneCall == 0,
	}
}

func (ft *SummaryFilters) ByTotalPhoneCallPtr(TotalPhoneCall *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "total_phone_call",
		Value:  TotalPhoneCall,
		IsNil:  TotalPhoneCall == nil,
		IsZero: TotalPhoneCall != nil && (*TotalPhoneCall) == 0,
	}
}

func (ft *SummaryFilters) ByTotalCallTime(TotalCallTime int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "total_call_time",
		Value:  TotalCallTime,
		IsNil:  TotalCallTime == 0,
	}
}

func (ft *SummaryFilters) ByTotalCallTimePtr(TotalCallTime *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "total_call_time",
		Value:  TotalCallTime,
		IsNil:  TotalCallTime == nil,
		IsZero: TotalCallTime != nil && (*TotalCallTime) == 0,
	}
}

func (ft *SummaryFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft *SummaryFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft *SummaryFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft *SummaryFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft *SummaryFilters) ByDeletedAt(DeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt.IsZero(),
	}
}

func (ft *SummaryFilters) ByDeletedAtPtr(DeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt == nil,
		IsZero: DeletedAt != nil && (*DeletedAt).IsZero(),
	}
}
