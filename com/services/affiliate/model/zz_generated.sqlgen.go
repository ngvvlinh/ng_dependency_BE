// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "etop.vn/backend/pkg/common/sql/cmsql"
	migration "etop.vn/backend/pkg/common/sql/migration"
	core "etop.vn/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type AffiliateReferralCodes []*AffiliateReferralCode

const __sqlAffiliateReferralCode_Table = "affiliate_referral_code"
const __sqlAffiliateReferralCode_ListCols = "\"id\",\"code\",\"affiliate_id\",\"user_id\",\"created_at\",\"updated_at\""
const __sqlAffiliateReferralCode_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"code\" = EXCLUDED.\"code\",\"affiliate_id\" = EXCLUDED.\"affiliate_id\",\"user_id\" = EXCLUDED.\"user_id\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlAffiliateReferralCode_Insert = "INSERT INTO \"affiliate_referral_code\" (" + __sqlAffiliateReferralCode_ListCols + ") VALUES"
const __sqlAffiliateReferralCode_Select = "SELECT " + __sqlAffiliateReferralCode_ListCols + " FROM \"affiliate_referral_code\""
const __sqlAffiliateReferralCode_Select_history = "SELECT " + __sqlAffiliateReferralCode_ListCols + " FROM history.\"affiliate_referral_code\""
const __sqlAffiliateReferralCode_UpdateAll = "UPDATE \"affiliate_referral_code\" SET (" + __sqlAffiliateReferralCode_ListCols + ")"
const __sqlAffiliateReferralCode_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT affiliate_referral_code_pkey DO UPDATE SET"

func (m *AffiliateReferralCode) SQLTableName() string  { return "affiliate_referral_code" }
func (m *AffiliateReferralCodes) SQLTableName() string { return "affiliate_referral_code" }
func (m *AffiliateReferralCode) SQLListCols() string   { return __sqlAffiliateReferralCode_ListCols }

func (m *AffiliateReferralCode) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlAffiliateReferralCode_ListCols + " FROM \"affiliate_referral_code\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *AffiliateReferralCode) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "affiliate_referral_code"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"code": {
			ColumnName:       "code",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"affiliate_id": {
			ColumnName:       "affiliate_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"user_id": {
			ColumnName:       "user_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "affiliate_referral_code", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*AffiliateReferralCode)(nil))
}

func (m *AffiliateReferralCode) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.Code),
		m.AffiliateID,
		m.UserID,
		core.Now(m.CreatedAt, now, create),
		core.Time(m.UpdatedAt),
	}
}

func (m *AffiliateReferralCode) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.Code),
		&m.AffiliateID,
		&m.UserID,
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *AffiliateReferralCode) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *AffiliateReferralCodes) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(AffiliateReferralCodes, 0, 128)
	for rows.Next() {
		m := new(AffiliateReferralCode)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *AffiliateReferralCode) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateReferralCode_Select)
	return nil
}

func (_ *AffiliateReferralCodes) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateReferralCode_Select)
	return nil
}

func (m *AffiliateReferralCode) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateReferralCode_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms AffiliateReferralCodes) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateReferralCode_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(6)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *AffiliateReferralCode) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlAffiliateReferralCode_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlAffiliateReferralCode_ListColsOnConflict)
	return nil
}

func (ms AffiliateReferralCodes) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlAffiliateReferralCode_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlAffiliateReferralCode_ListColsOnConflict)
	return nil
}

func (m *AffiliateReferralCode) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("affiliate_referral_code")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.AffiliateID != 0 {
		flag = true
		w.WriteName("affiliate_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AffiliateID)
	}
	if m.UserID != 0 {
		flag = true
		w.WriteName("user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UserID)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UpdatedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *AffiliateReferralCode) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateReferralCode_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type AffiliateReferralCodeHistory map[string]interface{}
type AffiliateReferralCodeHistories []map[string]interface{}

func (m *AffiliateReferralCodeHistory) SQLTableName() string {
	return "history.\"affiliate_referral_code\""
}
func (m AffiliateReferralCodeHistories) SQLTableName() string {
	return "history.\"affiliate_referral_code\""
}

func (m *AffiliateReferralCodeHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateReferralCode_Select_history)
	return nil
}

func (m AffiliateReferralCodeHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateReferralCode_Select_history)
	return nil
}

func (m AffiliateReferralCodeHistory) ID() core.Interface   { return core.Interface{m["id"]} }
func (m AffiliateReferralCodeHistory) Code() core.Interface { return core.Interface{m["code"]} }
func (m AffiliateReferralCodeHistory) AffiliateID() core.Interface {
	return core.Interface{m["affiliate_id"]}
}
func (m AffiliateReferralCodeHistory) UserID() core.Interface { return core.Interface{m["user_id"]} }
func (m AffiliateReferralCodeHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m AffiliateReferralCodeHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *AffiliateReferralCodeHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(AffiliateReferralCodeHistory, 6)
	res["id"] = data[0]
	res["code"] = data[1]
	res["affiliate_id"] = data[2]
	res["user_id"] = data[3]
	res["created_at"] = data[4]
	res["updated_at"] = data[5]
	*m = res
	return nil
}

func (ms *AffiliateReferralCodeHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	res := make(AffiliateReferralCodeHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(AffiliateReferralCodeHistory)
		m["id"] = data[0]
		m["code"] = data[1]
		m["affiliate_id"] = data[2]
		m["user_id"] = data[3]
		m["created_at"] = data[4]
		m["updated_at"] = data[5]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type CommissionSettings []*CommissionSetting

const __sqlCommissionSetting_Table = "commission_setting"
const __sqlCommissionSetting_ListCols = "\"product_id\",\"account_id\",\"amount\",\"unit\",\"type\",\"created_at\",\"updated_at\""
const __sqlCommissionSetting_ListColsOnConflict = "\"product_id\" = EXCLUDED.\"product_id\",\"account_id\" = EXCLUDED.\"account_id\",\"amount\" = EXCLUDED.\"amount\",\"unit\" = EXCLUDED.\"unit\",\"type\" = EXCLUDED.\"type\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlCommissionSetting_Insert = "INSERT INTO \"commission_setting\" (" + __sqlCommissionSetting_ListCols + ") VALUES"
const __sqlCommissionSetting_Select = "SELECT " + __sqlCommissionSetting_ListCols + " FROM \"commission_setting\""
const __sqlCommissionSetting_Select_history = "SELECT " + __sqlCommissionSetting_ListCols + " FROM history.\"commission_setting\""
const __sqlCommissionSetting_UpdateAll = "UPDATE \"commission_setting\" SET (" + __sqlCommissionSetting_ListCols + ")"
const __sqlCommissionSetting_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT commission_setting_pkey DO UPDATE SET"

func (m *CommissionSetting) SQLTableName() string  { return "commission_setting" }
func (m *CommissionSettings) SQLTableName() string { return "commission_setting" }
func (m *CommissionSetting) SQLListCols() string   { return __sqlCommissionSetting_ListCols }

func (m *CommissionSetting) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlCommissionSetting_ListCols + " FROM \"commission_setting\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *CommissionSetting) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "commission_setting"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"product_id": {
			ColumnName:       "product_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"account_id": {
			ColumnName:       "account_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"amount": {
			ColumnName:       "amount",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"unit": {
			ColumnName:       "unit",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"type": {
			ColumnName:       "type",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "commission_setting", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*CommissionSetting)(nil))
}

func (m *CommissionSetting) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ProductID,
		m.AccountID,
		core.Int(m.Amount),
		core.String(m.Unit),
		core.String(m.Type),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *CommissionSetting) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ProductID,
		&m.AccountID,
		(*core.Int)(&m.Amount),
		(*core.String)(&m.Unit),
		(*core.String)(&m.Type),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *CommissionSetting) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *CommissionSettings) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(CommissionSettings, 0, 128)
	for rows.Next() {
		m := new(CommissionSetting)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *CommissionSetting) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_Select)
	return nil
}

func (_ *CommissionSettings) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_Select)
	return nil
}

func (m *CommissionSetting) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms CommissionSettings) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(7)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *CommissionSetting) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlCommissionSetting_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlCommissionSetting_ListColsOnConflict)
	return nil
}

func (ms CommissionSettings) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlCommissionSetting_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlCommissionSetting_ListColsOnConflict)
	return nil
}

func (m *CommissionSetting) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("commission_setting")
	w.WriteRawString(" SET ")
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.AccountID != 0 {
		flag = true
		w.WriteName("account_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccountID)
	}
	if m.Amount != 0 {
		flag = true
		w.WriteName("amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Amount)
	}
	if m.Unit != "" {
		flag = true
		w.WriteName("unit")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Unit)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *CommissionSetting) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type CommissionSettingHistory map[string]interface{}
type CommissionSettingHistories []map[string]interface{}

func (m *CommissionSettingHistory) SQLTableName() string  { return "history.\"commission_setting\"" }
func (m CommissionSettingHistories) SQLTableName() string { return "history.\"commission_setting\"" }

func (m *CommissionSettingHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_Select_history)
	return nil
}

func (m CommissionSettingHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_Select_history)
	return nil
}

func (m CommissionSettingHistory) ProductID() core.Interface { return core.Interface{m["product_id"]} }
func (m CommissionSettingHistory) AccountID() core.Interface { return core.Interface{m["account_id"]} }
func (m CommissionSettingHistory) Amount() core.Interface    { return core.Interface{m["amount"]} }
func (m CommissionSettingHistory) Unit() core.Interface      { return core.Interface{m["unit"]} }
func (m CommissionSettingHistory) Type() core.Interface      { return core.Interface{m["type"]} }
func (m CommissionSettingHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m CommissionSettingHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *CommissionSettingHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(CommissionSettingHistory, 7)
	res["product_id"] = data[0]
	res["account_id"] = data[1]
	res["amount"] = data[2]
	res["unit"] = data[3]
	res["type"] = data[4]
	res["created_at"] = data[5]
	res["updated_at"] = data[6]
	*m = res
	return nil
}

func (ms *CommissionSettingHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	res := make(CommissionSettingHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(CommissionSettingHistory)
		m["product_id"] = data[0]
		m["account_id"] = data[1]
		m["amount"] = data[2]
		m["unit"] = data[3]
		m["type"] = data[4]
		m["created_at"] = data[5]
		m["updated_at"] = data[6]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type CustomerPolicyGroups []*CustomerPolicyGroup

const __sqlCustomerPolicyGroup_Table = "customer_policy_group"
const __sqlCustomerPolicyGroup_ListCols = "\"id\",\"supply_id\",\"name\",\"created_at\",\"updated_at\""
const __sqlCustomerPolicyGroup_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"supply_id\" = EXCLUDED.\"supply_id\",\"name\" = EXCLUDED.\"name\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlCustomerPolicyGroup_Insert = "INSERT INTO \"customer_policy_group\" (" + __sqlCustomerPolicyGroup_ListCols + ") VALUES"
const __sqlCustomerPolicyGroup_Select = "SELECT " + __sqlCustomerPolicyGroup_ListCols + " FROM \"customer_policy_group\""
const __sqlCustomerPolicyGroup_Select_history = "SELECT " + __sqlCustomerPolicyGroup_ListCols + " FROM history.\"customer_policy_group\""
const __sqlCustomerPolicyGroup_UpdateAll = "UPDATE \"customer_policy_group\" SET (" + __sqlCustomerPolicyGroup_ListCols + ")"
const __sqlCustomerPolicyGroup_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT customer_policy_group_pkey DO UPDATE SET"

func (m *CustomerPolicyGroup) SQLTableName() string  { return "customer_policy_group" }
func (m *CustomerPolicyGroups) SQLTableName() string { return "customer_policy_group" }
func (m *CustomerPolicyGroup) SQLListCols() string   { return __sqlCustomerPolicyGroup_ListCols }

func (m *CustomerPolicyGroup) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlCustomerPolicyGroup_ListCols + " FROM \"customer_policy_group\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *CustomerPolicyGroup) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "customer_policy_group"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"supply_id": {
			ColumnName:       "supply_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"name": {
			ColumnName:       "name",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "customer_policy_group", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*CustomerPolicyGroup)(nil))
}

func (m *CustomerPolicyGroup) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.SupplyID,
		core.String(m.Name),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *CustomerPolicyGroup) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.SupplyID,
		(*core.String)(&m.Name),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *CustomerPolicyGroup) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *CustomerPolicyGroups) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(CustomerPolicyGroups, 0, 128)
	for rows.Next() {
		m := new(CustomerPolicyGroup)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *CustomerPolicyGroup) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCustomerPolicyGroup_Select)
	return nil
}

func (_ *CustomerPolicyGroups) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCustomerPolicyGroup_Select)
	return nil
}

func (m *CustomerPolicyGroup) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlCustomerPolicyGroup_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(5)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms CustomerPolicyGroups) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlCustomerPolicyGroup_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(5)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *CustomerPolicyGroup) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlCustomerPolicyGroup_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlCustomerPolicyGroup_ListColsOnConflict)
	return nil
}

func (ms CustomerPolicyGroups) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlCustomerPolicyGroup_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlCustomerPolicyGroup_ListColsOnConflict)
	return nil
}

func (m *CustomerPolicyGroup) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("customer_policy_group")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.SupplyID != 0 {
		flag = true
		w.WriteName("supply_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SupplyID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *CustomerPolicyGroup) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlCustomerPolicyGroup_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(5)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type CustomerPolicyGroupHistory map[string]interface{}
type CustomerPolicyGroupHistories []map[string]interface{}

func (m *CustomerPolicyGroupHistory) SQLTableName() string {
	return "history.\"customer_policy_group\""
}
func (m CustomerPolicyGroupHistories) SQLTableName() string {
	return "history.\"customer_policy_group\""
}

func (m *CustomerPolicyGroupHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCustomerPolicyGroup_Select_history)
	return nil
}

func (m CustomerPolicyGroupHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCustomerPolicyGroup_Select_history)
	return nil
}

func (m CustomerPolicyGroupHistory) ID() core.Interface       { return core.Interface{m["id"]} }
func (m CustomerPolicyGroupHistory) SupplyID() core.Interface { return core.Interface{m["supply_id"]} }
func (m CustomerPolicyGroupHistory) Name() core.Interface     { return core.Interface{m["name"]} }
func (m CustomerPolicyGroupHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m CustomerPolicyGroupHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *CustomerPolicyGroupHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 5)
	args := make([]interface{}, 5)
	for i := 0; i < 5; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(CustomerPolicyGroupHistory, 5)
	res["id"] = data[0]
	res["supply_id"] = data[1]
	res["name"] = data[2]
	res["created_at"] = data[3]
	res["updated_at"] = data[4]
	*m = res
	return nil
}

func (ms *CustomerPolicyGroupHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 5)
	args := make([]interface{}, 5)
	for i := 0; i < 5; i++ {
		args[i] = &data[i]
	}
	res := make(CustomerPolicyGroupHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(CustomerPolicyGroupHistory)
		m["id"] = data[0]
		m["supply_id"] = data[1]
		m["name"] = data[2]
		m["created_at"] = data[3]
		m["updated_at"] = data[4]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type OrderCommissionSettings []*OrderCommissionSetting

const __sqlOrderCommissionSetting_Table = "order_commission_setting"
const __sqlOrderCommissionSetting_ListCols = "\"order_id\",\"supply_id\",\"product_id\",\"product_quantity\",\"level1_direct_commission\",\"level1_indirect_commission\",\"level2_direct_commission\",\"level2_indirect_commission\",\"depend_on\",\"level1_limit_count\",\"level1_limit_duration\",\"lifetime_duration\",\"group\",\"customer_policy_group_id\",\"created_at\",\"updated_at\""
const __sqlOrderCommissionSetting_ListColsOnConflict = "\"order_id\" = EXCLUDED.\"order_id\",\"supply_id\" = EXCLUDED.\"supply_id\",\"product_id\" = EXCLUDED.\"product_id\",\"product_quantity\" = EXCLUDED.\"product_quantity\",\"level1_direct_commission\" = EXCLUDED.\"level1_direct_commission\",\"level1_indirect_commission\" = EXCLUDED.\"level1_indirect_commission\",\"level2_direct_commission\" = EXCLUDED.\"level2_direct_commission\",\"level2_indirect_commission\" = EXCLUDED.\"level2_indirect_commission\",\"depend_on\" = EXCLUDED.\"depend_on\",\"level1_limit_count\" = EXCLUDED.\"level1_limit_count\",\"level1_limit_duration\" = EXCLUDED.\"level1_limit_duration\",\"lifetime_duration\" = EXCLUDED.\"lifetime_duration\",\"group\" = EXCLUDED.\"group\",\"customer_policy_group_id\" = EXCLUDED.\"customer_policy_group_id\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlOrderCommissionSetting_Insert = "INSERT INTO \"order_commission_setting\" (" + __sqlOrderCommissionSetting_ListCols + ") VALUES"
const __sqlOrderCommissionSetting_Select = "SELECT " + __sqlOrderCommissionSetting_ListCols + " FROM \"order_commission_setting\""
const __sqlOrderCommissionSetting_Select_history = "SELECT " + __sqlOrderCommissionSetting_ListCols + " FROM history.\"order_commission_setting\""
const __sqlOrderCommissionSetting_UpdateAll = "UPDATE \"order_commission_setting\" SET (" + __sqlOrderCommissionSetting_ListCols + ")"
const __sqlOrderCommissionSetting_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT order_commission_setting_pkey DO UPDATE SET"

func (m *OrderCommissionSetting) SQLTableName() string  { return "order_commission_setting" }
func (m *OrderCommissionSettings) SQLTableName() string { return "order_commission_setting" }
func (m *OrderCommissionSetting) SQLListCols() string   { return __sqlOrderCommissionSetting_ListCols }

func (m *OrderCommissionSetting) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlOrderCommissionSetting_ListCols + " FROM \"order_commission_setting\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *OrderCommissionSetting) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "order_commission_setting"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"order_id": {
			ColumnName:       "order_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"supply_id": {
			ColumnName:       "supply_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"product_id": {
			ColumnName:       "product_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"product_quantity": {
			ColumnName:       "product_quantity",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"level1_direct_commission": {
			ColumnName:       "level1_direct_commission",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"level1_indirect_commission": {
			ColumnName:       "level1_indirect_commission",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"level2_direct_commission": {
			ColumnName:       "level2_direct_commission",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"level2_indirect_commission": {
			ColumnName:       "level2_indirect_commission",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"depend_on": {
			ColumnName:       "depend_on",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"level1_limit_count": {
			ColumnName:       "level1_limit_count",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"level1_limit_duration": {
			ColumnName:       "level1_limit_duration",
			ColumnType:       "int64",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"lifetime_duration": {
			ColumnName:       "lifetime_duration",
			ColumnType:       "int64",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"group": {
			ColumnName:       "group",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"customer_policy_group_id": {
			ColumnName:       "customer_policy_group_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "order_commission_setting", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*OrderCommissionSetting)(nil))
}

func (m *OrderCommissionSetting) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.OrderID,
		m.SupplyID,
		m.ProductID,
		core.Int(m.ProductQuantity),
		core.Int(m.Level1DirectCommission),
		core.Int(m.Level1IndirectCommission),
		core.Int(m.Level2DirectCommission),
		core.Int(m.Level2IndirectCommission),
		core.String(m.DependOn),
		core.Int(m.Level1LimitCount),
		core.Int64(m.Level1LimitDuration),
		core.Int64(m.LifetimeDuration),
		core.String(m.Group),
		m.CustomerPolicyGroupID,
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *OrderCommissionSetting) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.OrderID,
		&m.SupplyID,
		&m.ProductID,
		(*core.Int)(&m.ProductQuantity),
		(*core.Int)(&m.Level1DirectCommission),
		(*core.Int)(&m.Level1IndirectCommission),
		(*core.Int)(&m.Level2DirectCommission),
		(*core.Int)(&m.Level2IndirectCommission),
		(*core.String)(&m.DependOn),
		(*core.Int)(&m.Level1LimitCount),
		(*core.Int64)(&m.Level1LimitDuration),
		(*core.Int64)(&m.LifetimeDuration),
		(*core.String)(&m.Group),
		&m.CustomerPolicyGroupID,
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *OrderCommissionSetting) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *OrderCommissionSettings) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(OrderCommissionSettings, 0, 128)
	for rows.Next() {
		m := new(OrderCommissionSetting)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *OrderCommissionSetting) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCommissionSetting_Select)
	return nil
}

func (_ *OrderCommissionSettings) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCommissionSetting_Select)
	return nil
}

func (m *OrderCommissionSetting) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCommissionSetting_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(16)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms OrderCommissionSettings) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCommissionSetting_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(16)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *OrderCommissionSetting) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlOrderCommissionSetting_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlOrderCommissionSetting_ListColsOnConflict)
	return nil
}

func (ms OrderCommissionSettings) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlOrderCommissionSetting_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlOrderCommissionSetting_ListColsOnConflict)
	return nil
}

func (m *OrderCommissionSetting) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("order_commission_setting")
	w.WriteRawString(" SET ")
	if m.OrderID != 0 {
		flag = true
		w.WriteName("order_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderID)
	}
	if m.SupplyID != 0 {
		flag = true
		w.WriteName("supply_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SupplyID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.ProductQuantity != 0 {
		flag = true
		w.WriteName("product_quantity")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductQuantity)
	}
	if m.Level1DirectCommission != 0 {
		flag = true
		w.WriteName("level1_direct_commission")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Level1DirectCommission)
	}
	if m.Level1IndirectCommission != 0 {
		flag = true
		w.WriteName("level1_indirect_commission")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Level1IndirectCommission)
	}
	if m.Level2DirectCommission != 0 {
		flag = true
		w.WriteName("level2_direct_commission")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Level2DirectCommission)
	}
	if m.Level2IndirectCommission != 0 {
		flag = true
		w.WriteName("level2_indirect_commission")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Level2IndirectCommission)
	}
	if m.DependOn != "" {
		flag = true
		w.WriteName("depend_on")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DependOn)
	}
	if m.Level1LimitCount != 0 {
		flag = true
		w.WriteName("level1_limit_count")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Level1LimitCount)
	}
	if m.Level1LimitDuration != 0 {
		flag = true
		w.WriteName("level1_limit_duration")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Level1LimitDuration)
	}
	if m.LifetimeDuration != 0 {
		flag = true
		w.WriteName("lifetime_duration")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.LifetimeDuration)
	}
	if m.Group != "" {
		flag = true
		w.WriteName("group")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Group)
	}
	if m.CustomerPolicyGroupID != 0 {
		flag = true
		w.WriteName("customer_policy_group_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CustomerPolicyGroupID)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *OrderCommissionSetting) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCommissionSetting_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(16)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type OrderCommissionSettingHistory map[string]interface{}
type OrderCommissionSettingHistories []map[string]interface{}

func (m *OrderCommissionSettingHistory) SQLTableName() string {
	return "history.\"order_commission_setting\""
}
func (m OrderCommissionSettingHistories) SQLTableName() string {
	return "history.\"order_commission_setting\""
}

func (m *OrderCommissionSettingHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCommissionSetting_Select_history)
	return nil
}

func (m OrderCommissionSettingHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCommissionSetting_Select_history)
	return nil
}

func (m OrderCommissionSettingHistory) OrderID() core.Interface { return core.Interface{m["order_id"]} }
func (m OrderCommissionSettingHistory) SupplyID() core.Interface {
	return core.Interface{m["supply_id"]}
}
func (m OrderCommissionSettingHistory) ProductID() core.Interface {
	return core.Interface{m["product_id"]}
}
func (m OrderCommissionSettingHistory) ProductQuantity() core.Interface {
	return core.Interface{m["product_quantity"]}
}
func (m OrderCommissionSettingHistory) Level1DirectCommission() core.Interface {
	return core.Interface{m["level1_direct_commission"]}
}
func (m OrderCommissionSettingHistory) Level1IndirectCommission() core.Interface {
	return core.Interface{m["level1_indirect_commission"]}
}
func (m OrderCommissionSettingHistory) Level2DirectCommission() core.Interface {
	return core.Interface{m["level2_direct_commission"]}
}
func (m OrderCommissionSettingHistory) Level2IndirectCommission() core.Interface {
	return core.Interface{m["level2_indirect_commission"]}
}
func (m OrderCommissionSettingHistory) DependOn() core.Interface {
	return core.Interface{m["depend_on"]}
}
func (m OrderCommissionSettingHistory) Level1LimitCount() core.Interface {
	return core.Interface{m["level1_limit_count"]}
}
func (m OrderCommissionSettingHistory) Level1LimitDuration() core.Interface {
	return core.Interface{m["level1_limit_duration"]}
}
func (m OrderCommissionSettingHistory) LifetimeDuration() core.Interface {
	return core.Interface{m["lifetime_duration"]}
}
func (m OrderCommissionSettingHistory) Group() core.Interface { return core.Interface{m["group"]} }
func (m OrderCommissionSettingHistory) CustomerPolicyGroupID() core.Interface {
	return core.Interface{m["customer_policy_group_id"]}
}
func (m OrderCommissionSettingHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m OrderCommissionSettingHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *OrderCommissionSettingHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 16)
	args := make([]interface{}, 16)
	for i := 0; i < 16; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(OrderCommissionSettingHistory, 16)
	res["order_id"] = data[0]
	res["supply_id"] = data[1]
	res["product_id"] = data[2]
	res["product_quantity"] = data[3]
	res["level1_direct_commission"] = data[4]
	res["level1_indirect_commission"] = data[5]
	res["level2_direct_commission"] = data[6]
	res["level2_indirect_commission"] = data[7]
	res["depend_on"] = data[8]
	res["level1_limit_count"] = data[9]
	res["level1_limit_duration"] = data[10]
	res["lifetime_duration"] = data[11]
	res["group"] = data[12]
	res["customer_policy_group_id"] = data[13]
	res["created_at"] = data[14]
	res["updated_at"] = data[15]
	*m = res
	return nil
}

func (ms *OrderCommissionSettingHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 16)
	args := make([]interface{}, 16)
	for i := 0; i < 16; i++ {
		args[i] = &data[i]
	}
	res := make(OrderCommissionSettingHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(OrderCommissionSettingHistory)
		m["order_id"] = data[0]
		m["supply_id"] = data[1]
		m["product_id"] = data[2]
		m["product_quantity"] = data[3]
		m["level1_direct_commission"] = data[4]
		m["level1_indirect_commission"] = data[5]
		m["level2_direct_commission"] = data[6]
		m["level2_indirect_commission"] = data[7]
		m["depend_on"] = data[8]
		m["level1_limit_count"] = data[9]
		m["level1_limit_duration"] = data[10]
		m["lifetime_duration"] = data[11]
		m["group"] = data[12]
		m["customer_policy_group_id"] = data[13]
		m["created_at"] = data[14]
		m["updated_at"] = data[15]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type OrderCreatedNotifies []*OrderCreatedNotify

const __sqlOrderCreatedNotify_Table = "order_created_notify"
const __sqlOrderCreatedNotify_ListCols = "\"id\",\"order_id\",\"shop_user_id\",\"seller_id\",\"shop_id\",\"supply_id\",\"referral_code\",\"promotion_snapshot_status\",\"promotion_snapshot_err\",\"commission_snapshot_status\",\"commission_snapshot_err\",\"cashback_process_status\",\"cashback_process_err\",\"commission_process_status\",\"commission_process_err\",\"payment_status\",\"status\",\"completed_at\",\"created_at\",\"updated_at\""
const __sqlOrderCreatedNotify_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"order_id\" = EXCLUDED.\"order_id\",\"shop_user_id\" = EXCLUDED.\"shop_user_id\",\"seller_id\" = EXCLUDED.\"seller_id\",\"shop_id\" = EXCLUDED.\"shop_id\",\"supply_id\" = EXCLUDED.\"supply_id\",\"referral_code\" = EXCLUDED.\"referral_code\",\"promotion_snapshot_status\" = EXCLUDED.\"promotion_snapshot_status\",\"promotion_snapshot_err\" = EXCLUDED.\"promotion_snapshot_err\",\"commission_snapshot_status\" = EXCLUDED.\"commission_snapshot_status\",\"commission_snapshot_err\" = EXCLUDED.\"commission_snapshot_err\",\"cashback_process_status\" = EXCLUDED.\"cashback_process_status\",\"cashback_process_err\" = EXCLUDED.\"cashback_process_err\",\"commission_process_status\" = EXCLUDED.\"commission_process_status\",\"commission_process_err\" = EXCLUDED.\"commission_process_err\",\"payment_status\" = EXCLUDED.\"payment_status\",\"status\" = EXCLUDED.\"status\",\"completed_at\" = EXCLUDED.\"completed_at\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlOrderCreatedNotify_Insert = "INSERT INTO \"order_created_notify\" (" + __sqlOrderCreatedNotify_ListCols + ") VALUES"
const __sqlOrderCreatedNotify_Select = "SELECT " + __sqlOrderCreatedNotify_ListCols + " FROM \"order_created_notify\""
const __sqlOrderCreatedNotify_Select_history = "SELECT " + __sqlOrderCreatedNotify_ListCols + " FROM history.\"order_created_notify\""
const __sqlOrderCreatedNotify_UpdateAll = "UPDATE \"order_created_notify\" SET (" + __sqlOrderCreatedNotify_ListCols + ")"
const __sqlOrderCreatedNotify_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT order_created_notify_pkey DO UPDATE SET"

func (m *OrderCreatedNotify) SQLTableName() string   { return "order_created_notify" }
func (m *OrderCreatedNotifies) SQLTableName() string { return "order_created_notify" }
func (m *OrderCreatedNotify) SQLListCols() string    { return __sqlOrderCreatedNotify_ListCols }

func (m *OrderCreatedNotify) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlOrderCreatedNotify_ListCols + " FROM \"order_created_notify\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *OrderCreatedNotify) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "order_created_notify"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"order_id": {
			ColumnName:       "order_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"shop_user_id": {
			ColumnName:       "shop_user_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"seller_id": {
			ColumnName:       "seller_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"shop_id": {
			ColumnName:       "shop_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"supply_id": {
			ColumnName:       "supply_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"referral_code": {
			ColumnName:       "referral_code",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"promotion_snapshot_status": {
			ColumnName:       "promotion_snapshot_status",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"promotion_snapshot_err": {
			ColumnName:       "promotion_snapshot_err",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"commission_snapshot_status": {
			ColumnName:       "commission_snapshot_status",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"commission_snapshot_err": {
			ColumnName:       "commission_snapshot_err",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"cashback_process_status": {
			ColumnName:       "cashback_process_status",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"cashback_process_err": {
			ColumnName:       "cashback_process_err",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"commission_process_status": {
			ColumnName:       "commission_process_status",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"commission_process_err": {
			ColumnName:       "commission_process_err",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"payment_status": {
			ColumnName:       "payment_status",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"status": {
			ColumnName:       "status",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"completed_at": {
			ColumnName:       "completed_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "order_created_notify", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*OrderCreatedNotify)(nil))
}

func (m *OrderCreatedNotify) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.OrderID,
		m.ShopUserID,
		m.SellerID,
		m.ShopID,
		m.SupplyID,
		core.String(m.ReferralCode),
		core.Int(m.PromotionSnapshotStatus),
		core.String(m.PromotionSnapshotErr),
		core.Int(m.CommissionSnapshotStatus),
		core.String(m.CommissionSnapshotErr),
		core.Int(m.CashbackProcessStatus),
		core.String(m.CashbackProcessErr),
		core.Int(m.CommissionProcessStatus),
		core.String(m.CommissionProcessErr),
		core.Int(m.PaymentStatus),
		core.Int(m.Status),
		core.Time(m.CompletedAt),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *OrderCreatedNotify) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.OrderID,
		&m.ShopUserID,
		&m.SellerID,
		&m.ShopID,
		&m.SupplyID,
		(*core.String)(&m.ReferralCode),
		(*core.Int)(&m.PromotionSnapshotStatus),
		(*core.String)(&m.PromotionSnapshotErr),
		(*core.Int)(&m.CommissionSnapshotStatus),
		(*core.String)(&m.CommissionSnapshotErr),
		(*core.Int)(&m.CashbackProcessStatus),
		(*core.String)(&m.CashbackProcessErr),
		(*core.Int)(&m.CommissionProcessStatus),
		(*core.String)(&m.CommissionProcessErr),
		(*core.Int)(&m.PaymentStatus),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CompletedAt),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *OrderCreatedNotify) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *OrderCreatedNotifies) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(OrderCreatedNotifies, 0, 128)
	for rows.Next() {
		m := new(OrderCreatedNotify)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *OrderCreatedNotify) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCreatedNotify_Select)
	return nil
}

func (_ *OrderCreatedNotifies) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCreatedNotify_Select)
	return nil
}

func (m *OrderCreatedNotify) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCreatedNotify_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(20)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms OrderCreatedNotifies) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCreatedNotify_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(20)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *OrderCreatedNotify) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlOrderCreatedNotify_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlOrderCreatedNotify_ListColsOnConflict)
	return nil
}

func (ms OrderCreatedNotifies) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlOrderCreatedNotify_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlOrderCreatedNotify_ListColsOnConflict)
	return nil
}

func (m *OrderCreatedNotify) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("order_created_notify")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.OrderID != 0 {
		flag = true
		w.WriteName("order_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderID)
	}
	if m.ShopUserID != 0 {
		flag = true
		w.WriteName("shop_user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopUserID)
	}
	if m.SellerID != 0 {
		flag = true
		w.WriteName("seller_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SellerID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.SupplyID != 0 {
		flag = true
		w.WriteName("supply_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SupplyID)
	}
	if m.ReferralCode != "" {
		flag = true
		w.WriteName("referral_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ReferralCode)
	}
	if m.PromotionSnapshotStatus != 0 {
		flag = true
		w.WriteName("promotion_snapshot_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PromotionSnapshotStatus)
	}
	if m.PromotionSnapshotErr != "" {
		flag = true
		w.WriteName("promotion_snapshot_err")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PromotionSnapshotErr)
	}
	if m.CommissionSnapshotStatus != 0 {
		flag = true
		w.WriteName("commission_snapshot_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CommissionSnapshotStatus)
	}
	if m.CommissionSnapshotErr != "" {
		flag = true
		w.WriteName("commission_snapshot_err")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CommissionSnapshotErr)
	}
	if m.CashbackProcessStatus != 0 {
		flag = true
		w.WriteName("cashback_process_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CashbackProcessStatus)
	}
	if m.CashbackProcessErr != "" {
		flag = true
		w.WriteName("cashback_process_err")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CashbackProcessErr)
	}
	if m.CommissionProcessStatus != 0 {
		flag = true
		w.WriteName("commission_process_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CommissionProcessStatus)
	}
	if m.CommissionProcessErr != "" {
		flag = true
		w.WriteName("commission_process_err")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CommissionProcessErr)
	}
	if m.PaymentStatus != 0 {
		flag = true
		w.WriteName("payment_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PaymentStatus)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !m.CompletedAt.IsZero() {
		flag = true
		w.WriteName("completed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CompletedAt)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *OrderCreatedNotify) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCreatedNotify_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(20)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type OrderCreatedNotifyHistory map[string]interface{}
type OrderCreatedNotifyHistories []map[string]interface{}

func (m *OrderCreatedNotifyHistory) SQLTableName() string  { return "history.\"order_created_notify\"" }
func (m OrderCreatedNotifyHistories) SQLTableName() string { return "history.\"order_created_notify\"" }

func (m *OrderCreatedNotifyHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCreatedNotify_Select_history)
	return nil
}

func (m OrderCreatedNotifyHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCreatedNotify_Select_history)
	return nil
}

func (m OrderCreatedNotifyHistory) ID() core.Interface      { return core.Interface{m["id"]} }
func (m OrderCreatedNotifyHistory) OrderID() core.Interface { return core.Interface{m["order_id"]} }
func (m OrderCreatedNotifyHistory) ShopUserID() core.Interface {
	return core.Interface{m["shop_user_id"]}
}
func (m OrderCreatedNotifyHistory) SellerID() core.Interface { return core.Interface{m["seller_id"]} }
func (m OrderCreatedNotifyHistory) ShopID() core.Interface   { return core.Interface{m["shop_id"]} }
func (m OrderCreatedNotifyHistory) SupplyID() core.Interface { return core.Interface{m["supply_id"]} }
func (m OrderCreatedNotifyHistory) ReferralCode() core.Interface {
	return core.Interface{m["referral_code"]}
}
func (m OrderCreatedNotifyHistory) PromotionSnapshotStatus() core.Interface {
	return core.Interface{m["promotion_snapshot_status"]}
}
func (m OrderCreatedNotifyHistory) PromotionSnapshotErr() core.Interface {
	return core.Interface{m["promotion_snapshot_err"]}
}
func (m OrderCreatedNotifyHistory) CommissionSnapshotStatus() core.Interface {
	return core.Interface{m["commission_snapshot_status"]}
}
func (m OrderCreatedNotifyHistory) CommissionSnapshotErr() core.Interface {
	return core.Interface{m["commission_snapshot_err"]}
}
func (m OrderCreatedNotifyHistory) CashbackProcessStatus() core.Interface {
	return core.Interface{m["cashback_process_status"]}
}
func (m OrderCreatedNotifyHistory) CashbackProcessErr() core.Interface {
	return core.Interface{m["cashback_process_err"]}
}
func (m OrderCreatedNotifyHistory) CommissionProcessStatus() core.Interface {
	return core.Interface{m["commission_process_status"]}
}
func (m OrderCreatedNotifyHistory) CommissionProcessErr() core.Interface {
	return core.Interface{m["commission_process_err"]}
}
func (m OrderCreatedNotifyHistory) PaymentStatus() core.Interface {
	return core.Interface{m["payment_status"]}
}
func (m OrderCreatedNotifyHistory) Status() core.Interface { return core.Interface{m["status"]} }
func (m OrderCreatedNotifyHistory) CompletedAt() core.Interface {
	return core.Interface{m["completed_at"]}
}
func (m OrderCreatedNotifyHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m OrderCreatedNotifyHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *OrderCreatedNotifyHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 20)
	args := make([]interface{}, 20)
	for i := 0; i < 20; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(OrderCreatedNotifyHistory, 20)
	res["id"] = data[0]
	res["order_id"] = data[1]
	res["shop_user_id"] = data[2]
	res["seller_id"] = data[3]
	res["shop_id"] = data[4]
	res["supply_id"] = data[5]
	res["referral_code"] = data[6]
	res["promotion_snapshot_status"] = data[7]
	res["promotion_snapshot_err"] = data[8]
	res["commission_snapshot_status"] = data[9]
	res["commission_snapshot_err"] = data[10]
	res["cashback_process_status"] = data[11]
	res["cashback_process_err"] = data[12]
	res["commission_process_status"] = data[13]
	res["commission_process_err"] = data[14]
	res["payment_status"] = data[15]
	res["status"] = data[16]
	res["completed_at"] = data[17]
	res["created_at"] = data[18]
	res["updated_at"] = data[19]
	*m = res
	return nil
}

func (ms *OrderCreatedNotifyHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 20)
	args := make([]interface{}, 20)
	for i := 0; i < 20; i++ {
		args[i] = &data[i]
	}
	res := make(OrderCreatedNotifyHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(OrderCreatedNotifyHistory)
		m["id"] = data[0]
		m["order_id"] = data[1]
		m["shop_user_id"] = data[2]
		m["seller_id"] = data[3]
		m["shop_id"] = data[4]
		m["supply_id"] = data[5]
		m["referral_code"] = data[6]
		m["promotion_snapshot_status"] = data[7]
		m["promotion_snapshot_err"] = data[8]
		m["commission_snapshot_status"] = data[9]
		m["commission_snapshot_err"] = data[10]
		m["cashback_process_status"] = data[11]
		m["cashback_process_err"] = data[12]
		m["commission_process_status"] = data[13]
		m["commission_process_err"] = data[14]
		m["payment_status"] = data[15]
		m["status"] = data[16]
		m["completed_at"] = data[17]
		m["created_at"] = data[18]
		m["updated_at"] = data[19]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type OrderPromotions []*OrderPromotion

const __sqlOrderPromotion_Table = "order_promotion"
const __sqlOrderPromotion_ListCols = "\"id\",\"product_id\",\"order_id\",\"product_quantity\",\"base_value\",\"amount\",\"unit\",\"type\",\"order_created_notify_id\",\"description\",\"src\",\"created_at\",\"updated_at\""
const __sqlOrderPromotion_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"product_id\" = EXCLUDED.\"product_id\",\"order_id\" = EXCLUDED.\"order_id\",\"product_quantity\" = EXCLUDED.\"product_quantity\",\"base_value\" = EXCLUDED.\"base_value\",\"amount\" = EXCLUDED.\"amount\",\"unit\" = EXCLUDED.\"unit\",\"type\" = EXCLUDED.\"type\",\"order_created_notify_id\" = EXCLUDED.\"order_created_notify_id\",\"description\" = EXCLUDED.\"description\",\"src\" = EXCLUDED.\"src\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlOrderPromotion_Insert = "INSERT INTO \"order_promotion\" (" + __sqlOrderPromotion_ListCols + ") VALUES"
const __sqlOrderPromotion_Select = "SELECT " + __sqlOrderPromotion_ListCols + " FROM \"order_promotion\""
const __sqlOrderPromotion_Select_history = "SELECT " + __sqlOrderPromotion_ListCols + " FROM history.\"order_promotion\""
const __sqlOrderPromotion_UpdateAll = "UPDATE \"order_promotion\" SET (" + __sqlOrderPromotion_ListCols + ")"
const __sqlOrderPromotion_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT order_promotion_pkey DO UPDATE SET"

func (m *OrderPromotion) SQLTableName() string  { return "order_promotion" }
func (m *OrderPromotions) SQLTableName() string { return "order_promotion" }
func (m *OrderPromotion) SQLListCols() string   { return __sqlOrderPromotion_ListCols }

func (m *OrderPromotion) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlOrderPromotion_ListCols + " FROM \"order_promotion\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *OrderPromotion) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "order_promotion"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"product_id": {
			ColumnName:       "product_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"order_id": {
			ColumnName:       "order_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"product_quantity": {
			ColumnName:       "product_quantity",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"base_value": {
			ColumnName:       "base_value",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"amount": {
			ColumnName:       "amount",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"unit": {
			ColumnName:       "unit",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"type": {
			ColumnName:       "type",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"order_created_notify_id": {
			ColumnName:       "order_created_notify_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"description": {
			ColumnName:       "description",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"src": {
			ColumnName:       "src",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "order_promotion", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*OrderPromotion)(nil))
}

func (m *OrderPromotion) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.ProductID,
		m.OrderID,
		core.Int(m.ProductQuantity),
		core.Int(m.BaseValue),
		core.Int(m.Amount),
		core.String(m.Unit),
		core.String(m.Type),
		m.OrderCreatedNotifyID,
		core.String(m.Description),
		core.String(m.Src),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *OrderPromotion) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.ProductID,
		&m.OrderID,
		(*core.Int)(&m.ProductQuantity),
		(*core.Int)(&m.BaseValue),
		(*core.Int)(&m.Amount),
		(*core.String)(&m.Unit),
		(*core.String)(&m.Type),
		&m.OrderCreatedNotifyID,
		(*core.String)(&m.Description),
		(*core.String)(&m.Src),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *OrderPromotion) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *OrderPromotions) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(OrderPromotions, 0, 128)
	for rows.Next() {
		m := new(OrderPromotion)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *OrderPromotion) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderPromotion_Select)
	return nil
}

func (_ *OrderPromotions) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderPromotion_Select)
	return nil
}

func (m *OrderPromotion) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderPromotion_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(13)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms OrderPromotions) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderPromotion_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(13)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *OrderPromotion) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlOrderPromotion_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlOrderPromotion_ListColsOnConflict)
	return nil
}

func (ms OrderPromotions) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlOrderPromotion_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlOrderPromotion_ListColsOnConflict)
	return nil
}

func (m *OrderPromotion) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("order_promotion")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.OrderID != 0 {
		flag = true
		w.WriteName("order_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderID)
	}
	if m.ProductQuantity != 0 {
		flag = true
		w.WriteName("product_quantity")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductQuantity)
	}
	if m.BaseValue != 0 {
		flag = true
		w.WriteName("base_value")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.BaseValue)
	}
	if m.Amount != 0 {
		flag = true
		w.WriteName("amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Amount)
	}
	if m.Unit != "" {
		flag = true
		w.WriteName("unit")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Unit)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if m.OrderCreatedNotifyID != 0 {
		flag = true
		w.WriteName("order_created_notify_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderCreatedNotifyID)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.Src != "" {
		flag = true
		w.WriteName("src")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Src)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *OrderPromotion) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderPromotion_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(13)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type OrderPromotionHistory map[string]interface{}
type OrderPromotionHistories []map[string]interface{}

func (m *OrderPromotionHistory) SQLTableName() string  { return "history.\"order_promotion\"" }
func (m OrderPromotionHistories) SQLTableName() string { return "history.\"order_promotion\"" }

func (m *OrderPromotionHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderPromotion_Select_history)
	return nil
}

func (m OrderPromotionHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderPromotion_Select_history)
	return nil
}

func (m OrderPromotionHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m OrderPromotionHistory) ProductID() core.Interface { return core.Interface{m["product_id"]} }
func (m OrderPromotionHistory) OrderID() core.Interface   { return core.Interface{m["order_id"]} }
func (m OrderPromotionHistory) ProductQuantity() core.Interface {
	return core.Interface{m["product_quantity"]}
}
func (m OrderPromotionHistory) BaseValue() core.Interface { return core.Interface{m["base_value"]} }
func (m OrderPromotionHistory) Amount() core.Interface    { return core.Interface{m["amount"]} }
func (m OrderPromotionHistory) Unit() core.Interface      { return core.Interface{m["unit"]} }
func (m OrderPromotionHistory) Type() core.Interface      { return core.Interface{m["type"]} }
func (m OrderPromotionHistory) OrderCreatedNotifyID() core.Interface {
	return core.Interface{m["order_created_notify_id"]}
}
func (m OrderPromotionHistory) Description() core.Interface { return core.Interface{m["description"]} }
func (m OrderPromotionHistory) Src() core.Interface         { return core.Interface{m["src"]} }
func (m OrderPromotionHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m OrderPromotionHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }

func (m *OrderPromotionHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 13)
	args := make([]interface{}, 13)
	for i := 0; i < 13; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(OrderPromotionHistory, 13)
	res["id"] = data[0]
	res["product_id"] = data[1]
	res["order_id"] = data[2]
	res["product_quantity"] = data[3]
	res["base_value"] = data[4]
	res["amount"] = data[5]
	res["unit"] = data[6]
	res["type"] = data[7]
	res["order_created_notify_id"] = data[8]
	res["description"] = data[9]
	res["src"] = data[10]
	res["created_at"] = data[11]
	res["updated_at"] = data[12]
	*m = res
	return nil
}

func (ms *OrderPromotionHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 13)
	args := make([]interface{}, 13)
	for i := 0; i < 13; i++ {
		args[i] = &data[i]
	}
	res := make(OrderPromotionHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(OrderPromotionHistory)
		m["id"] = data[0]
		m["product_id"] = data[1]
		m["order_id"] = data[2]
		m["product_quantity"] = data[3]
		m["base_value"] = data[4]
		m["amount"] = data[5]
		m["unit"] = data[6]
		m["type"] = data[7]
		m["order_created_notify_id"] = data[8]
		m["description"] = data[9]
		m["src"] = data[10]
		m["created_at"] = data[11]
		m["updated_at"] = data[12]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type ProductPromotions []*ProductPromotion

const __sqlProductPromotion_Table = "product_promotion"
const __sqlProductPromotion_ListCols = "\"id\",\"product_id\",\"shop_id\",\"amount\",\"unit\",\"code\",\"description\",\"note\",\"type\",\"status\",\"created_at\",\"updated_at\""
const __sqlProductPromotion_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"product_id\" = EXCLUDED.\"product_id\",\"shop_id\" = EXCLUDED.\"shop_id\",\"amount\" = EXCLUDED.\"amount\",\"unit\" = EXCLUDED.\"unit\",\"code\" = EXCLUDED.\"code\",\"description\" = EXCLUDED.\"description\",\"note\" = EXCLUDED.\"note\",\"type\" = EXCLUDED.\"type\",\"status\" = EXCLUDED.\"status\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlProductPromotion_Insert = "INSERT INTO \"product_promotion\" (" + __sqlProductPromotion_ListCols + ") VALUES"
const __sqlProductPromotion_Select = "SELECT " + __sqlProductPromotion_ListCols + " FROM \"product_promotion\""
const __sqlProductPromotion_Select_history = "SELECT " + __sqlProductPromotion_ListCols + " FROM history.\"product_promotion\""
const __sqlProductPromotion_UpdateAll = "UPDATE \"product_promotion\" SET (" + __sqlProductPromotion_ListCols + ")"
const __sqlProductPromotion_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT product_promotion_pkey DO UPDATE SET"

func (m *ProductPromotion) SQLTableName() string  { return "product_promotion" }
func (m *ProductPromotions) SQLTableName() string { return "product_promotion" }
func (m *ProductPromotion) SQLListCols() string   { return __sqlProductPromotion_ListCols }

func (m *ProductPromotion) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlProductPromotion_ListCols + " FROM \"product_promotion\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *ProductPromotion) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "product_promotion"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"product_id": {
			ColumnName:       "product_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"shop_id": {
			ColumnName:       "shop_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"amount": {
			ColumnName:       "amount",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"unit": {
			ColumnName:       "unit",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"code": {
			ColumnName:       "code",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"description": {
			ColumnName:       "description",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"note": {
			ColumnName:       "note",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"type": {
			ColumnName:       "type",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"status": {
			ColumnName:       "status",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "product_promotion", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*ProductPromotion)(nil))
}

func (m *ProductPromotion) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.ProductID,
		m.ShopID,
		core.Int(m.Amount),
		core.String(m.Unit),
		core.String(m.Code),
		core.String(m.Description),
		core.String(m.Note),
		core.String(m.Type),
		core.Int(m.Status),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *ProductPromotion) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.ProductID,
		&m.ShopID,
		(*core.Int)(&m.Amount),
		(*core.String)(&m.Unit),
		(*core.String)(&m.Code),
		(*core.String)(&m.Description),
		(*core.String)(&m.Note),
		(*core.String)(&m.Type),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *ProductPromotion) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductPromotions) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductPromotions, 0, 128)
	for rows.Next() {
		m := new(ProductPromotion)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ProductPromotion) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductPromotion_Select)
	return nil
}

func (_ *ProductPromotions) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductPromotion_Select)
	return nil
}

func (m *ProductPromotion) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductPromotion_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(12)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ProductPromotions) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductPromotion_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(12)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ProductPromotion) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlProductPromotion_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlProductPromotion_ListColsOnConflict)
	return nil
}

func (ms ProductPromotions) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlProductPromotion_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlProductPromotion_ListColsOnConflict)
	return nil
}

func (m *ProductPromotion) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("product_promotion")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.Amount != 0 {
		flag = true
		w.WriteName("amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Amount)
	}
	if m.Unit != "" {
		flag = true
		w.WriteName("unit")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Unit)
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ProductPromotion) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlProductPromotion_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(12)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ProductPromotionHistory map[string]interface{}
type ProductPromotionHistories []map[string]interface{}

func (m *ProductPromotionHistory) SQLTableName() string  { return "history.\"product_promotion\"" }
func (m ProductPromotionHistories) SQLTableName() string { return "history.\"product_promotion\"" }

func (m *ProductPromotionHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductPromotion_Select_history)
	return nil
}

func (m ProductPromotionHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductPromotion_Select_history)
	return nil
}

func (m ProductPromotionHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m ProductPromotionHistory) ProductID() core.Interface { return core.Interface{m["product_id"]} }
func (m ProductPromotionHistory) ShopID() core.Interface    { return core.Interface{m["shop_id"]} }
func (m ProductPromotionHistory) Amount() core.Interface    { return core.Interface{m["amount"]} }
func (m ProductPromotionHistory) Unit() core.Interface      { return core.Interface{m["unit"]} }
func (m ProductPromotionHistory) Code() core.Interface      { return core.Interface{m["code"]} }
func (m ProductPromotionHistory) Description() core.Interface {
	return core.Interface{m["description"]}
}
func (m ProductPromotionHistory) Note() core.Interface      { return core.Interface{m["note"]} }
func (m ProductPromotionHistory) Type() core.Interface      { return core.Interface{m["type"]} }
func (m ProductPromotionHistory) Status() core.Interface    { return core.Interface{m["status"]} }
func (m ProductPromotionHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m ProductPromotionHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *ProductPromotionHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 12)
	args := make([]interface{}, 12)
	for i := 0; i < 12; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ProductPromotionHistory, 12)
	res["id"] = data[0]
	res["product_id"] = data[1]
	res["shop_id"] = data[2]
	res["amount"] = data[3]
	res["unit"] = data[4]
	res["code"] = data[5]
	res["description"] = data[6]
	res["note"] = data[7]
	res["type"] = data[8]
	res["status"] = data[9]
	res["created_at"] = data[10]
	res["updated_at"] = data[11]
	*m = res
	return nil
}

func (ms *ProductPromotionHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 12)
	args := make([]interface{}, 12)
	for i := 0; i < 12; i++ {
		args[i] = &data[i]
	}
	res := make(ProductPromotionHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ProductPromotionHistory)
		m["id"] = data[0]
		m["product_id"] = data[1]
		m["shop_id"] = data[2]
		m["amount"] = data[3]
		m["unit"] = data[4]
		m["code"] = data[5]
		m["description"] = data[6]
		m["note"] = data[7]
		m["type"] = data[8]
		m["status"] = data[9]
		m["created_at"] = data[10]
		m["updated_at"] = data[11]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type SellerCommissions []*SellerCommission

const __sqlSellerCommission_Table = "seller_commission"
const __sqlSellerCommission_ListCols = "\"id\",\"seller_id\",\"from_seller_id\",\"product_id\",\"shop_id\",\"supply_id\",\"order_id\",\"amount\",\"description\",\"note\",\"type\",\"status\",\"o_value\",\"o_base_value\",\"valid_at\",\"created_at\",\"updated_at\""
const __sqlSellerCommission_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"seller_id\" = EXCLUDED.\"seller_id\",\"from_seller_id\" = EXCLUDED.\"from_seller_id\",\"product_id\" = EXCLUDED.\"product_id\",\"shop_id\" = EXCLUDED.\"shop_id\",\"supply_id\" = EXCLUDED.\"supply_id\",\"order_id\" = EXCLUDED.\"order_id\",\"amount\" = EXCLUDED.\"amount\",\"description\" = EXCLUDED.\"description\",\"note\" = EXCLUDED.\"note\",\"type\" = EXCLUDED.\"type\",\"status\" = EXCLUDED.\"status\",\"o_value\" = EXCLUDED.\"o_value\",\"o_base_value\" = EXCLUDED.\"o_base_value\",\"valid_at\" = EXCLUDED.\"valid_at\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlSellerCommission_Insert = "INSERT INTO \"seller_commission\" (" + __sqlSellerCommission_ListCols + ") VALUES"
const __sqlSellerCommission_Select = "SELECT " + __sqlSellerCommission_ListCols + " FROM \"seller_commission\""
const __sqlSellerCommission_Select_history = "SELECT " + __sqlSellerCommission_ListCols + " FROM history.\"seller_commission\""
const __sqlSellerCommission_UpdateAll = "UPDATE \"seller_commission\" SET (" + __sqlSellerCommission_ListCols + ")"
const __sqlSellerCommission_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT seller_commission_pkey DO UPDATE SET"

func (m *SellerCommission) SQLTableName() string  { return "seller_commission" }
func (m *SellerCommissions) SQLTableName() string { return "seller_commission" }
func (m *SellerCommission) SQLListCols() string   { return __sqlSellerCommission_ListCols }

func (m *SellerCommission) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlSellerCommission_ListCols + " FROM \"seller_commission\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *SellerCommission) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "seller_commission"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"seller_id": {
			ColumnName:       "seller_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"from_seller_id": {
			ColumnName:       "from_seller_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"product_id": {
			ColumnName:       "product_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"shop_id": {
			ColumnName:       "shop_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"supply_id": {
			ColumnName:       "supply_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"order_id": {
			ColumnName:       "order_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"amount": {
			ColumnName:       "amount",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"description": {
			ColumnName:       "description",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"note": {
			ColumnName:       "note",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"type": {
			ColumnName:       "type",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"status": {
			ColumnName:       "status",
			ColumnType:       "status4.Status",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"Z", "P", "S", "N"},
		},
		"o_value": {
			ColumnName:       "o_value",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"o_base_value": {
			ColumnName:       "o_base_value",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"valid_at": {
			ColumnName:       "valid_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "seller_commission", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*SellerCommission)(nil))
}

func (m *SellerCommission) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.SellerID,
		m.FromSellerID,
		m.ProductID,
		m.ShopID,
		m.SupplyID,
		m.OrderId,
		core.Int(m.Amount),
		core.String(m.Description),
		core.String(m.Note),
		core.String(m.Type),
		m.Status,
		core.Int(m.OValue),
		core.Int(m.OBaseValue),
		core.Time(m.ValidAt),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *SellerCommission) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.SellerID,
		&m.FromSellerID,
		&m.ProductID,
		&m.ShopID,
		&m.SupplyID,
		&m.OrderId,
		(*core.Int)(&m.Amount),
		(*core.String)(&m.Description),
		(*core.String)(&m.Note),
		(*core.String)(&m.Type),
		&m.Status,
		(*core.Int)(&m.OValue),
		(*core.Int)(&m.OBaseValue),
		(*core.Time)(&m.ValidAt),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *SellerCommission) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *SellerCommissions) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(SellerCommissions, 0, 128)
	for rows.Next() {
		m := new(SellerCommission)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *SellerCommission) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSellerCommission_Select)
	return nil
}

func (_ *SellerCommissions) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSellerCommission_Select)
	return nil
}

func (m *SellerCommission) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSellerCommission_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(17)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms SellerCommissions) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSellerCommission_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(17)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *SellerCommission) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlSellerCommission_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlSellerCommission_ListColsOnConflict)
	return nil
}

func (ms SellerCommissions) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlSellerCommission_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlSellerCommission_ListColsOnConflict)
	return nil
}

func (m *SellerCommission) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("seller_commission")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.SellerID != 0 {
		flag = true
		w.WriteName("seller_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SellerID)
	}
	if m.FromSellerID != 0 {
		flag = true
		w.WriteName("from_seller_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FromSellerID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.SupplyID != 0 {
		flag = true
		w.WriteName("supply_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SupplyID)
	}
	if m.OrderId != 0 {
		flag = true
		w.WriteName("order_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderId)
	}
	if m.Amount != 0 {
		flag = true
		w.WriteName("amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Amount)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if m.OValue != 0 {
		flag = true
		w.WriteName("o_value")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OValue)
	}
	if m.OBaseValue != 0 {
		flag = true
		w.WriteName("o_base_value")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OBaseValue)
	}
	if !m.ValidAt.IsZero() {
		flag = true
		w.WriteName("valid_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ValidAt)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *SellerCommission) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlSellerCommission_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(17)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type SellerCommissionHistory map[string]interface{}
type SellerCommissionHistories []map[string]interface{}

func (m *SellerCommissionHistory) SQLTableName() string  { return "history.\"seller_commission\"" }
func (m SellerCommissionHistories) SQLTableName() string { return "history.\"seller_commission\"" }

func (m *SellerCommissionHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSellerCommission_Select_history)
	return nil
}

func (m SellerCommissionHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSellerCommission_Select_history)
	return nil
}

func (m SellerCommissionHistory) ID() core.Interface       { return core.Interface{m["id"]} }
func (m SellerCommissionHistory) SellerID() core.Interface { return core.Interface{m["seller_id"]} }
func (m SellerCommissionHistory) FromSellerID() core.Interface {
	return core.Interface{m["from_seller_id"]}
}
func (m SellerCommissionHistory) ProductID() core.Interface { return core.Interface{m["product_id"]} }
func (m SellerCommissionHistory) ShopID() core.Interface    { return core.Interface{m["shop_id"]} }
func (m SellerCommissionHistory) SupplyID() core.Interface  { return core.Interface{m["supply_id"]} }
func (m SellerCommissionHistory) OrderId() core.Interface   { return core.Interface{m["order_id"]} }
func (m SellerCommissionHistory) Amount() core.Interface    { return core.Interface{m["amount"]} }
func (m SellerCommissionHistory) Description() core.Interface {
	return core.Interface{m["description"]}
}
func (m SellerCommissionHistory) Note() core.Interface   { return core.Interface{m["note"]} }
func (m SellerCommissionHistory) Type() core.Interface   { return core.Interface{m["type"]} }
func (m SellerCommissionHistory) Status() core.Interface { return core.Interface{m["status"]} }
func (m SellerCommissionHistory) OValue() core.Interface { return core.Interface{m["o_value"]} }
func (m SellerCommissionHistory) OBaseValue() core.Interface {
	return core.Interface{m["o_base_value"]}
}
func (m SellerCommissionHistory) ValidAt() core.Interface   { return core.Interface{m["valid_at"]} }
func (m SellerCommissionHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m SellerCommissionHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *SellerCommissionHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 17)
	args := make([]interface{}, 17)
	for i := 0; i < 17; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(SellerCommissionHistory, 17)
	res["id"] = data[0]
	res["seller_id"] = data[1]
	res["from_seller_id"] = data[2]
	res["product_id"] = data[3]
	res["shop_id"] = data[4]
	res["supply_id"] = data[5]
	res["order_id"] = data[6]
	res["amount"] = data[7]
	res["description"] = data[8]
	res["note"] = data[9]
	res["type"] = data[10]
	res["status"] = data[11]
	res["o_value"] = data[12]
	res["o_base_value"] = data[13]
	res["valid_at"] = data[14]
	res["created_at"] = data[15]
	res["updated_at"] = data[16]
	*m = res
	return nil
}

func (ms *SellerCommissionHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 17)
	args := make([]interface{}, 17)
	for i := 0; i < 17; i++ {
		args[i] = &data[i]
	}
	res := make(SellerCommissionHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(SellerCommissionHistory)
		m["id"] = data[0]
		m["seller_id"] = data[1]
		m["from_seller_id"] = data[2]
		m["product_id"] = data[3]
		m["shop_id"] = data[4]
		m["supply_id"] = data[5]
		m["order_id"] = data[6]
		m["amount"] = data[7]
		m["description"] = data[8]
		m["note"] = data[9]
		m["type"] = data[10]
		m["status"] = data[11]
		m["o_value"] = data[12]
		m["o_base_value"] = data[13]
		m["valid_at"] = data[14]
		m["created_at"] = data[15]
		m["updated_at"] = data[16]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type ShopCashbacks []*ShopCashback

const __sqlShopCashback_Table = "shop_cashback"
const __sqlShopCashback_ListCols = "\"id\",\"shop_id\",\"order_id\",\"amount\",\"order_created_notify_id\",\"description\",\"status\",\"valid_at\",\"created_at\",\"updated_at\""
const __sqlShopCashback_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"shop_id\" = EXCLUDED.\"shop_id\",\"order_id\" = EXCLUDED.\"order_id\",\"amount\" = EXCLUDED.\"amount\",\"order_created_notify_id\" = EXCLUDED.\"order_created_notify_id\",\"description\" = EXCLUDED.\"description\",\"status\" = EXCLUDED.\"status\",\"valid_at\" = EXCLUDED.\"valid_at\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlShopCashback_Insert = "INSERT INTO \"shop_cashback\" (" + __sqlShopCashback_ListCols + ") VALUES"
const __sqlShopCashback_Select = "SELECT " + __sqlShopCashback_ListCols + " FROM \"shop_cashback\""
const __sqlShopCashback_Select_history = "SELECT " + __sqlShopCashback_ListCols + " FROM history.\"shop_cashback\""
const __sqlShopCashback_UpdateAll = "UPDATE \"shop_cashback\" SET (" + __sqlShopCashback_ListCols + ")"
const __sqlShopCashback_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT shop_cashback_pkey DO UPDATE SET"

func (m *ShopCashback) SQLTableName() string  { return "shop_cashback" }
func (m *ShopCashbacks) SQLTableName() string { return "shop_cashback" }
func (m *ShopCashback) SQLListCols() string   { return __sqlShopCashback_ListCols }

func (m *ShopCashback) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlShopCashback_ListCols + " FROM \"shop_cashback\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *ShopCashback) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "shop_cashback"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"shop_id": {
			ColumnName:       "shop_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"order_id": {
			ColumnName:       "order_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"amount": {
			ColumnName:       "amount",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"order_created_notify_id": {
			ColumnName:       "order_created_notify_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"description": {
			ColumnName:       "description",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"status": {
			ColumnName:       "status",
			ColumnType:       "int8",
			ColumnDBType:     "int8",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"valid_at": {
			ColumnName:       "valid_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "shop_cashback", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*ShopCashback)(nil))
}

func (m *ShopCashback) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.ShopID,
		m.OrderID,
		core.Int(m.Amount),
		m.OrderCreatedNotifyID,
		core.String(m.Description),
		core.Int8(m.Status),
		core.Time(m.ValidAt),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *ShopCashback) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.ShopID,
		&m.OrderID,
		(*core.Int)(&m.Amount),
		&m.OrderCreatedNotifyID,
		(*core.String)(&m.Description),
		(*core.Int8)(&m.Status),
		(*core.Time)(&m.ValidAt),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *ShopCashback) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopCashbacks) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopCashbacks, 0, 128)
	for rows.Next() {
		m := new(ShopCashback)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopCashback) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCashback_Select)
	return nil
}

func (_ *ShopCashbacks) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCashback_Select)
	return nil
}

func (m *ShopCashback) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCashback_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(10)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopCashbacks) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCashback_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(10)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopCashback) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlShopCashback_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopCashback_ListColsOnConflict)
	return nil
}

func (ms ShopCashbacks) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlShopCashback_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopCashback_ListColsOnConflict)
	return nil
}

func (m *ShopCashback) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_cashback")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.OrderID != 0 {
		flag = true
		w.WriteName("order_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderID)
	}
	if m.Amount != 0 {
		flag = true
		w.WriteName("amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Amount)
	}
	if m.OrderCreatedNotifyID != 0 {
		flag = true
		w.WriteName("order_created_notify_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderCreatedNotifyID)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !m.ValidAt.IsZero() {
		flag = true
		w.WriteName("valid_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ValidAt)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopCashback) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCashback_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(10)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopCashbackHistory map[string]interface{}
type ShopCashbackHistories []map[string]interface{}

func (m *ShopCashbackHistory) SQLTableName() string  { return "history.\"shop_cashback\"" }
func (m ShopCashbackHistories) SQLTableName() string { return "history.\"shop_cashback\"" }

func (m *ShopCashbackHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCashback_Select_history)
	return nil
}

func (m ShopCashbackHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCashback_Select_history)
	return nil
}

func (m ShopCashbackHistory) ID() core.Interface      { return core.Interface{m["id"]} }
func (m ShopCashbackHistory) ShopID() core.Interface  { return core.Interface{m["shop_id"]} }
func (m ShopCashbackHistory) OrderID() core.Interface { return core.Interface{m["order_id"]} }
func (m ShopCashbackHistory) Amount() core.Interface  { return core.Interface{m["amount"]} }
func (m ShopCashbackHistory) OrderCreatedNotifyID() core.Interface {
	return core.Interface{m["order_created_notify_id"]}
}
func (m ShopCashbackHistory) Description() core.Interface { return core.Interface{m["description"]} }
func (m ShopCashbackHistory) Status() core.Interface      { return core.Interface{m["status"]} }
func (m ShopCashbackHistory) ValidAt() core.Interface     { return core.Interface{m["valid_at"]} }
func (m ShopCashbackHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m ShopCashbackHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }

func (m *ShopCashbackHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 10)
	args := make([]interface{}, 10)
	for i := 0; i < 10; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopCashbackHistory, 10)
	res["id"] = data[0]
	res["shop_id"] = data[1]
	res["order_id"] = data[2]
	res["amount"] = data[3]
	res["order_created_notify_id"] = data[4]
	res["description"] = data[5]
	res["status"] = data[6]
	res["valid_at"] = data[7]
	res["created_at"] = data[8]
	res["updated_at"] = data[9]
	*m = res
	return nil
}

func (ms *ShopCashbackHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 10)
	args := make([]interface{}, 10)
	for i := 0; i < 10; i++ {
		args[i] = &data[i]
	}
	res := make(ShopCashbackHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopCashbackHistory)
		m["id"] = data[0]
		m["shop_id"] = data[1]
		m["order_id"] = data[2]
		m["amount"] = data[3]
		m["order_created_notify_id"] = data[4]
		m["description"] = data[5]
		m["status"] = data[6]
		m["valid_at"] = data[7]
		m["created_at"] = data[8]
		m["updated_at"] = data[9]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type ShopOrderProductHistories []*ShopOrderProductHistory

const __sqlShopOrderProductHistory_Table = "shop_order_product_history"
const __sqlShopOrderProductHistory_ListCols = "\"user_id\",\"shop_id\",\"order_id\",\"supply_id\",\"product_id\",\"customer_policy_group_id\",\"product_quantity\",\"created_at\",\"updated_at\""
const __sqlShopOrderProductHistory_ListColsOnConflict = "\"user_id\" = EXCLUDED.\"user_id\",\"shop_id\" = EXCLUDED.\"shop_id\",\"order_id\" = EXCLUDED.\"order_id\",\"supply_id\" = EXCLUDED.\"supply_id\",\"product_id\" = EXCLUDED.\"product_id\",\"customer_policy_group_id\" = EXCLUDED.\"customer_policy_group_id\",\"product_quantity\" = EXCLUDED.\"product_quantity\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlShopOrderProductHistory_Insert = "INSERT INTO \"shop_order_product_history\" (" + __sqlShopOrderProductHistory_ListCols + ") VALUES"
const __sqlShopOrderProductHistory_Select = "SELECT " + __sqlShopOrderProductHistory_ListCols + " FROM \"shop_order_product_history\""
const __sqlShopOrderProductHistory_Select_history = "SELECT " + __sqlShopOrderProductHistory_ListCols + " FROM history.\"shop_order_product_history\""
const __sqlShopOrderProductHistory_UpdateAll = "UPDATE \"shop_order_product_history\" SET (" + __sqlShopOrderProductHistory_ListCols + ")"
const __sqlShopOrderProductHistory_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT shop_order_product_history_pkey DO UPDATE SET"

func (m *ShopOrderProductHistory) SQLTableName() string   { return "shop_order_product_history" }
func (m *ShopOrderProductHistories) SQLTableName() string { return "shop_order_product_history" }
func (m *ShopOrderProductHistory) SQLListCols() string    { return __sqlShopOrderProductHistory_ListCols }

func (m *ShopOrderProductHistory) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlShopOrderProductHistory_ListCols + " FROM \"shop_order_product_history\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *ShopOrderProductHistory) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "shop_order_product_history"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"user_id": {
			ColumnName:       "user_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"shop_id": {
			ColumnName:       "shop_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"order_id": {
			ColumnName:       "order_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"supply_id": {
			ColumnName:       "supply_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"product_id": {
			ColumnName:       "product_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"customer_policy_group_id": {
			ColumnName:       "customer_policy_group_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"product_quantity": {
			ColumnName:       "product_quantity",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "shop_order_product_history", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*ShopOrderProductHistory)(nil))
}

func (m *ShopOrderProductHistory) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.UserID,
		m.ShopID,
		m.OrderID,
		m.SupplyID,
		m.ProductID,
		m.CustomerPolicyGroupID,
		core.Int(m.ProductQuantity),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *ShopOrderProductHistory) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.UserID,
		&m.ShopID,
		&m.OrderID,
		&m.SupplyID,
		&m.ProductID,
		&m.CustomerPolicyGroupID,
		(*core.Int)(&m.ProductQuantity),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *ShopOrderProductHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopOrderProductHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopOrderProductHistories, 0, 128)
	for rows.Next() {
		m := new(ShopOrderProductHistory)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopOrderProductHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopOrderProductHistory_Select)
	return nil
}

func (_ *ShopOrderProductHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopOrderProductHistory_Select)
	return nil
}

func (m *ShopOrderProductHistory) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopOrderProductHistory_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopOrderProductHistories) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopOrderProductHistory_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(9)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopOrderProductHistory) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlShopOrderProductHistory_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopOrderProductHistory_ListColsOnConflict)
	return nil
}

func (ms ShopOrderProductHistories) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlShopOrderProductHistory_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopOrderProductHistory_ListColsOnConflict)
	return nil
}

func (m *ShopOrderProductHistory) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_order_product_history")
	w.WriteRawString(" SET ")
	if m.UserID != 0 {
		flag = true
		w.WriteName("user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UserID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.OrderID != 0 {
		flag = true
		w.WriteName("order_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderID)
	}
	if m.SupplyID != 0 {
		flag = true
		w.WriteName("supply_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SupplyID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.CustomerPolicyGroupID != 0 {
		flag = true
		w.WriteName("customer_policy_group_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CustomerPolicyGroupID)
	}
	if m.ProductQuantity != 0 {
		flag = true
		w.WriteName("product_quantity")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductQuantity)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopOrderProductHistory) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopOrderProductHistory_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopOrderProductHistoryHistory map[string]interface{}
type ShopOrderProductHistoryHistories []map[string]interface{}

func (m *ShopOrderProductHistoryHistory) SQLTableName() string {
	return "history.\"shop_order_product_history\""
}
func (m ShopOrderProductHistoryHistories) SQLTableName() string {
	return "history.\"shop_order_product_history\""
}

func (m *ShopOrderProductHistoryHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopOrderProductHistory_Select_history)
	return nil
}

func (m ShopOrderProductHistoryHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopOrderProductHistory_Select_history)
	return nil
}

func (m ShopOrderProductHistoryHistory) UserID() core.Interface { return core.Interface{m["user_id"]} }
func (m ShopOrderProductHistoryHistory) ShopID() core.Interface { return core.Interface{m["shop_id"]} }
func (m ShopOrderProductHistoryHistory) OrderID() core.Interface {
	return core.Interface{m["order_id"]}
}
func (m ShopOrderProductHistoryHistory) SupplyID() core.Interface {
	return core.Interface{m["supply_id"]}
}
func (m ShopOrderProductHistoryHistory) ProductID() core.Interface {
	return core.Interface{m["product_id"]}
}
func (m ShopOrderProductHistoryHistory) CustomerPolicyGroupID() core.Interface {
	return core.Interface{m["customer_policy_group_id"]}
}
func (m ShopOrderProductHistoryHistory) ProductQuantity() core.Interface {
	return core.Interface{m["product_quantity"]}
}
func (m ShopOrderProductHistoryHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m ShopOrderProductHistoryHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *ShopOrderProductHistoryHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopOrderProductHistoryHistory, 9)
	res["user_id"] = data[0]
	res["shop_id"] = data[1]
	res["order_id"] = data[2]
	res["supply_id"] = data[3]
	res["product_id"] = data[4]
	res["customer_policy_group_id"] = data[5]
	res["product_quantity"] = data[6]
	res["created_at"] = data[7]
	res["updated_at"] = data[8]
	*m = res
	return nil
}

func (ms *ShopOrderProductHistoryHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	res := make(ShopOrderProductHistoryHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopOrderProductHistoryHistory)
		m["user_id"] = data[0]
		m["shop_id"] = data[1]
		m["order_id"] = data[2]
		m["supply_id"] = data[3]
		m["product_id"] = data[4]
		m["customer_policy_group_id"] = data[5]
		m["product_quantity"] = data[6]
		m["created_at"] = data[7]
		m["updated_at"] = data[8]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type SupplyCommissionSettings []*SupplyCommissionSetting

const __sqlSupplyCommissionSetting_Table = "supply_commission_setting"
const __sqlSupplyCommissionSetting_ListCols = "\"shop_id\",\"product_id\",\"level1_direct_commission\",\"level1_indirect_commission\",\"level2_direct_commission\",\"level2_indirect_commission\",\"depend_on\",\"level1_limit_count\",\"level1_limit_duration\",\"m_level1_limit_duration\",\"lifetime_duration\",\"m_lifetime_duration\",\"customer_policy_group_id\",\"group\",\"created_at\",\"updated_at\""
const __sqlSupplyCommissionSetting_ListColsOnConflict = "\"shop_id\" = EXCLUDED.\"shop_id\",\"product_id\" = EXCLUDED.\"product_id\",\"level1_direct_commission\" = EXCLUDED.\"level1_direct_commission\",\"level1_indirect_commission\" = EXCLUDED.\"level1_indirect_commission\",\"level2_direct_commission\" = EXCLUDED.\"level2_direct_commission\",\"level2_indirect_commission\" = EXCLUDED.\"level2_indirect_commission\",\"depend_on\" = EXCLUDED.\"depend_on\",\"level1_limit_count\" = EXCLUDED.\"level1_limit_count\",\"level1_limit_duration\" = EXCLUDED.\"level1_limit_duration\",\"m_level1_limit_duration\" = EXCLUDED.\"m_level1_limit_duration\",\"lifetime_duration\" = EXCLUDED.\"lifetime_duration\",\"m_lifetime_duration\" = EXCLUDED.\"m_lifetime_duration\",\"customer_policy_group_id\" = EXCLUDED.\"customer_policy_group_id\",\"group\" = EXCLUDED.\"group\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlSupplyCommissionSetting_Insert = "INSERT INTO \"supply_commission_setting\" (" + __sqlSupplyCommissionSetting_ListCols + ") VALUES"
const __sqlSupplyCommissionSetting_Select = "SELECT " + __sqlSupplyCommissionSetting_ListCols + " FROM \"supply_commission_setting\""
const __sqlSupplyCommissionSetting_Select_history = "SELECT " + __sqlSupplyCommissionSetting_ListCols + " FROM history.\"supply_commission_setting\""
const __sqlSupplyCommissionSetting_UpdateAll = "UPDATE \"supply_commission_setting\" SET (" + __sqlSupplyCommissionSetting_ListCols + ")"
const __sqlSupplyCommissionSetting_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT supply_commission_setting_pkey DO UPDATE SET"

func (m *SupplyCommissionSetting) SQLTableName() string  { return "supply_commission_setting" }
func (m *SupplyCommissionSettings) SQLTableName() string { return "supply_commission_setting" }
func (m *SupplyCommissionSetting) SQLListCols() string   { return __sqlSupplyCommissionSetting_ListCols }

func (m *SupplyCommissionSetting) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlSupplyCommissionSetting_ListCols + " FROM \"supply_commission_setting\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *SupplyCommissionSetting) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "supply_commission_setting"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"shop_id": {
			ColumnName:       "shop_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"product_id": {
			ColumnName:       "product_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"level1_direct_commission": {
			ColumnName:       "level1_direct_commission",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"level1_indirect_commission": {
			ColumnName:       "level1_indirect_commission",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"level2_direct_commission": {
			ColumnName:       "level2_direct_commission",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"level2_indirect_commission": {
			ColumnName:       "level2_indirect_commission",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"depend_on": {
			ColumnName:       "depend_on",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"level1_limit_count": {
			ColumnName:       "level1_limit_count",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"level1_limit_duration": {
			ColumnName:       "level1_limit_duration",
			ColumnType:       "int64",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"m_level1_limit_duration": {
			ColumnName:       "m_level1_limit_duration",
			ColumnType:       "*DurationJSON",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"lifetime_duration": {
			ColumnName:       "lifetime_duration",
			ColumnType:       "int64",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"m_lifetime_duration": {
			ColumnName:       "m_lifetime_duration",
			ColumnType:       "*DurationJSON",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"customer_policy_group_id": {
			ColumnName:       "customer_policy_group_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"group": {
			ColumnName:       "group",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "supply_commission_setting", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*SupplyCommissionSetting)(nil))
}

func (m *SupplyCommissionSetting) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ShopID,
		m.ProductID,
		core.Int(m.Level1DirectCommission),
		core.Int(m.Level1IndirectCommission),
		core.Int(m.Level2DirectCommission),
		core.Int(m.Level2IndirectCommission),
		core.String(m.DependOn),
		core.Int(m.Level1LimitCount),
		core.Int64(m.Level1LimitDuration),
		core.JSON{m.MLevel1LimitDuration},
		core.Int64(m.LifetimeDuration),
		core.JSON{m.MLifetimeDuration},
		m.CustomerPolicyGroupID,
		core.String(m.Group),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *SupplyCommissionSetting) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ShopID,
		&m.ProductID,
		(*core.Int)(&m.Level1DirectCommission),
		(*core.Int)(&m.Level1IndirectCommission),
		(*core.Int)(&m.Level2DirectCommission),
		(*core.Int)(&m.Level2IndirectCommission),
		(*core.String)(&m.DependOn),
		(*core.Int)(&m.Level1LimitCount),
		(*core.Int64)(&m.Level1LimitDuration),
		core.JSON{&m.MLevel1LimitDuration},
		(*core.Int64)(&m.LifetimeDuration),
		core.JSON{&m.MLifetimeDuration},
		&m.CustomerPolicyGroupID,
		(*core.String)(&m.Group),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *SupplyCommissionSetting) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *SupplyCommissionSettings) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(SupplyCommissionSettings, 0, 128)
	for rows.Next() {
		m := new(SupplyCommissionSetting)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *SupplyCommissionSetting) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplyCommissionSetting_Select)
	return nil
}

func (_ *SupplyCommissionSettings) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplyCommissionSetting_Select)
	return nil
}

func (m *SupplyCommissionSetting) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplyCommissionSetting_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(16)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms SupplyCommissionSettings) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplyCommissionSetting_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(16)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *SupplyCommissionSetting) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlSupplyCommissionSetting_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlSupplyCommissionSetting_ListColsOnConflict)
	return nil
}

func (ms SupplyCommissionSettings) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlSupplyCommissionSetting_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlSupplyCommissionSetting_ListColsOnConflict)
	return nil
}

func (m *SupplyCommissionSetting) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("supply_commission_setting")
	w.WriteRawString(" SET ")
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.Level1DirectCommission != 0 {
		flag = true
		w.WriteName("level1_direct_commission")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Level1DirectCommission)
	}
	if m.Level1IndirectCommission != 0 {
		flag = true
		w.WriteName("level1_indirect_commission")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Level1IndirectCommission)
	}
	if m.Level2DirectCommission != 0 {
		flag = true
		w.WriteName("level2_direct_commission")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Level2DirectCommission)
	}
	if m.Level2IndirectCommission != 0 {
		flag = true
		w.WriteName("level2_indirect_commission")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Level2IndirectCommission)
	}
	if m.DependOn != "" {
		flag = true
		w.WriteName("depend_on")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DependOn)
	}
	if m.Level1LimitCount != 0 {
		flag = true
		w.WriteName("level1_limit_count")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Level1LimitCount)
	}
	if m.Level1LimitDuration != 0 {
		flag = true
		w.WriteName("level1_limit_duration")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Level1LimitDuration)
	}
	if m.MLevel1LimitDuration != nil {
		flag = true
		w.WriteName("m_level1_limit_duration")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.MLevel1LimitDuration})
	}
	if m.LifetimeDuration != 0 {
		flag = true
		w.WriteName("lifetime_duration")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.LifetimeDuration)
	}
	if m.MLifetimeDuration != nil {
		flag = true
		w.WriteName("m_lifetime_duration")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.MLifetimeDuration})
	}
	if m.CustomerPolicyGroupID != 0 {
		flag = true
		w.WriteName("customer_policy_group_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CustomerPolicyGroupID)
	}
	if m.Group != "" {
		flag = true
		w.WriteName("group")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Group)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *SupplyCommissionSetting) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplyCommissionSetting_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(16)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type SupplyCommissionSettingHistory map[string]interface{}
type SupplyCommissionSettingHistories []map[string]interface{}

func (m *SupplyCommissionSettingHistory) SQLTableName() string {
	return "history.\"supply_commission_setting\""
}
func (m SupplyCommissionSettingHistories) SQLTableName() string {
	return "history.\"supply_commission_setting\""
}

func (m *SupplyCommissionSettingHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplyCommissionSetting_Select_history)
	return nil
}

func (m SupplyCommissionSettingHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplyCommissionSetting_Select_history)
	return nil
}

func (m SupplyCommissionSettingHistory) ShopID() core.Interface { return core.Interface{m["shop_id"]} }
func (m SupplyCommissionSettingHistory) ProductID() core.Interface {
	return core.Interface{m["product_id"]}
}
func (m SupplyCommissionSettingHistory) Level1DirectCommission() core.Interface {
	return core.Interface{m["level1_direct_commission"]}
}
func (m SupplyCommissionSettingHistory) Level1IndirectCommission() core.Interface {
	return core.Interface{m["level1_indirect_commission"]}
}
func (m SupplyCommissionSettingHistory) Level2DirectCommission() core.Interface {
	return core.Interface{m["level2_direct_commission"]}
}
func (m SupplyCommissionSettingHistory) Level2IndirectCommission() core.Interface {
	return core.Interface{m["level2_indirect_commission"]}
}
func (m SupplyCommissionSettingHistory) DependOn() core.Interface {
	return core.Interface{m["depend_on"]}
}
func (m SupplyCommissionSettingHistory) Level1LimitCount() core.Interface {
	return core.Interface{m["level1_limit_count"]}
}
func (m SupplyCommissionSettingHistory) Level1LimitDuration() core.Interface {
	return core.Interface{m["level1_limit_duration"]}
}
func (m SupplyCommissionSettingHistory) MLevel1LimitDuration() core.Interface {
	return core.Interface{m["m_level1_limit_duration"]}
}
func (m SupplyCommissionSettingHistory) LifetimeDuration() core.Interface {
	return core.Interface{m["lifetime_duration"]}
}
func (m SupplyCommissionSettingHistory) MLifetimeDuration() core.Interface {
	return core.Interface{m["m_lifetime_duration"]}
}
func (m SupplyCommissionSettingHistory) CustomerPolicyGroupID() core.Interface {
	return core.Interface{m["customer_policy_group_id"]}
}
func (m SupplyCommissionSettingHistory) Group() core.Interface { return core.Interface{m["group"]} }
func (m SupplyCommissionSettingHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m SupplyCommissionSettingHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *SupplyCommissionSettingHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 16)
	args := make([]interface{}, 16)
	for i := 0; i < 16; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(SupplyCommissionSettingHistory, 16)
	res["shop_id"] = data[0]
	res["product_id"] = data[1]
	res["level1_direct_commission"] = data[2]
	res["level1_indirect_commission"] = data[3]
	res["level2_direct_commission"] = data[4]
	res["level2_indirect_commission"] = data[5]
	res["depend_on"] = data[6]
	res["level1_limit_count"] = data[7]
	res["level1_limit_duration"] = data[8]
	res["m_level1_limit_duration"] = data[9]
	res["lifetime_duration"] = data[10]
	res["m_lifetime_duration"] = data[11]
	res["customer_policy_group_id"] = data[12]
	res["group"] = data[13]
	res["created_at"] = data[14]
	res["updated_at"] = data[15]
	*m = res
	return nil
}

func (ms *SupplyCommissionSettingHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 16)
	args := make([]interface{}, 16)
	for i := 0; i < 16; i++ {
		args[i] = &data[i]
	}
	res := make(SupplyCommissionSettingHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(SupplyCommissionSettingHistory)
		m["shop_id"] = data[0]
		m["product_id"] = data[1]
		m["level1_direct_commission"] = data[2]
		m["level1_indirect_commission"] = data[3]
		m["level2_direct_commission"] = data[4]
		m["level2_indirect_commission"] = data[5]
		m["depend_on"] = data[6]
		m["level1_limit_count"] = data[7]
		m["level1_limit_duration"] = data[8]
		m["m_level1_limit_duration"] = data[9]
		m["lifetime_duration"] = data[10]
		m["m_lifetime_duration"] = data[11]
		m["customer_policy_group_id"] = data[12]
		m["group"] = data[13]
		m["created_at"] = data[14]
		m["updated_at"] = data[15]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type UserReferrals []*UserReferral

const __sqlUserReferral_Table = "user_referral"
const __sqlUserReferral_ListCols = "\"user_id\",\"referral_id\",\"referral_code\",\"sale_referral_id\",\"sale_referral_code\",\"referral_at\",\"sale_referral_at\",\"created_at\",\"updated_at\""
const __sqlUserReferral_ListColsOnConflict = "\"user_id\" = EXCLUDED.\"user_id\",\"referral_id\" = EXCLUDED.\"referral_id\",\"referral_code\" = EXCLUDED.\"referral_code\",\"sale_referral_id\" = EXCLUDED.\"sale_referral_id\",\"sale_referral_code\" = EXCLUDED.\"sale_referral_code\",\"referral_at\" = EXCLUDED.\"referral_at\",\"sale_referral_at\" = EXCLUDED.\"sale_referral_at\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlUserReferral_Insert = "INSERT INTO \"user_referral\" (" + __sqlUserReferral_ListCols + ") VALUES"
const __sqlUserReferral_Select = "SELECT " + __sqlUserReferral_ListCols + " FROM \"user_referral\""
const __sqlUserReferral_Select_history = "SELECT " + __sqlUserReferral_ListCols + " FROM history.\"user_referral\""
const __sqlUserReferral_UpdateAll = "UPDATE \"user_referral\" SET (" + __sqlUserReferral_ListCols + ")"
const __sqlUserReferral_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT user_referral_pkey DO UPDATE SET"

func (m *UserReferral) SQLTableName() string  { return "user_referral" }
func (m *UserReferrals) SQLTableName() string { return "user_referral" }
func (m *UserReferral) SQLListCols() string   { return __sqlUserReferral_ListCols }

func (m *UserReferral) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlUserReferral_ListCols + " FROM \"user_referral\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *UserReferral) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "user_referral"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"user_id": {
			ColumnName:       "user_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"referral_id": {
			ColumnName:       "referral_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"referral_code": {
			ColumnName:       "referral_code",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"sale_referral_id": {
			ColumnName:       "sale_referral_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"sale_referral_code": {
			ColumnName:       "sale_referral_code",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"referral_at": {
			ColumnName:       "referral_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"sale_referral_at": {
			ColumnName:       "sale_referral_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "user_referral", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*UserReferral)(nil))
}

func (m *UserReferral) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.UserID,
		m.ReferralID,
		core.String(m.ReferralCode),
		m.SaleReferralID,
		core.String(m.SaleReferralCode),
		core.Time(m.ReferralAt),
		core.Time(m.SaleReferralAt),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *UserReferral) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.UserID,
		&m.ReferralID,
		(*core.String)(&m.ReferralCode),
		&m.SaleReferralID,
		(*core.String)(&m.SaleReferralCode),
		(*core.Time)(&m.ReferralAt),
		(*core.Time)(&m.SaleReferralAt),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *UserReferral) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *UserReferrals) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(UserReferrals, 0, 128)
	for rows.Next() {
		m := new(UserReferral)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *UserReferral) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserReferral_Select)
	return nil
}

func (_ *UserReferrals) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserReferral_Select)
	return nil
}

func (m *UserReferral) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUserReferral_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms UserReferrals) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUserReferral_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(9)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *UserReferral) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlUserReferral_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlUserReferral_ListColsOnConflict)
	return nil
}

func (ms UserReferrals) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlUserReferral_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlUserReferral_ListColsOnConflict)
	return nil
}

func (m *UserReferral) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("user_referral")
	w.WriteRawString(" SET ")
	if m.UserID != 0 {
		flag = true
		w.WriteName("user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UserID)
	}
	if m.ReferralID != 0 {
		flag = true
		w.WriteName("referral_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ReferralID)
	}
	if m.ReferralCode != "" {
		flag = true
		w.WriteName("referral_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ReferralCode)
	}
	if m.SaleReferralID != 0 {
		flag = true
		w.WriteName("sale_referral_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SaleReferralID)
	}
	if m.SaleReferralCode != "" {
		flag = true
		w.WriteName("sale_referral_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SaleReferralCode)
	}
	if !m.ReferralAt.IsZero() {
		flag = true
		w.WriteName("referral_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ReferralAt)
	}
	if !m.SaleReferralAt.IsZero() {
		flag = true
		w.WriteName("sale_referral_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SaleReferralAt)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *UserReferral) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlUserReferral_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type UserReferralHistory map[string]interface{}
type UserReferralHistories []map[string]interface{}

func (m *UserReferralHistory) SQLTableName() string  { return "history.\"user_referral\"" }
func (m UserReferralHistories) SQLTableName() string { return "history.\"user_referral\"" }

func (m *UserReferralHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserReferral_Select_history)
	return nil
}

func (m UserReferralHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserReferral_Select_history)
	return nil
}

func (m UserReferralHistory) UserID() core.Interface       { return core.Interface{m["user_id"]} }
func (m UserReferralHistory) ReferralID() core.Interface   { return core.Interface{m["referral_id"]} }
func (m UserReferralHistory) ReferralCode() core.Interface { return core.Interface{m["referral_code"]} }
func (m UserReferralHistory) SaleReferralID() core.Interface {
	return core.Interface{m["sale_referral_id"]}
}
func (m UserReferralHistory) SaleReferralCode() core.Interface {
	return core.Interface{m["sale_referral_code"]}
}
func (m UserReferralHistory) ReferralAt() core.Interface { return core.Interface{m["referral_at"]} }
func (m UserReferralHistory) SaleReferralAt() core.Interface {
	return core.Interface{m["sale_referral_at"]}
}
func (m UserReferralHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m UserReferralHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *UserReferralHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(UserReferralHistory, 9)
	res["user_id"] = data[0]
	res["referral_id"] = data[1]
	res["referral_code"] = data[2]
	res["sale_referral_id"] = data[3]
	res["sale_referral_code"] = data[4]
	res["referral_at"] = data[5]
	res["sale_referral_at"] = data[6]
	res["created_at"] = data[7]
	res["updated_at"] = data[8]
	*m = res
	return nil
}

func (ms *UserReferralHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	res := make(UserReferralHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(UserReferralHistory)
		m["user_id"] = data[0]
		m["referral_id"] = data[1]
		m["referral_code"] = data[2]
		m["sale_referral_id"] = data[3]
		m["sale_referral_code"] = data[4]
		m["referral_at"] = data[5]
		m["sale_referral_at"] = data[6]
		m["created_at"] = data[7]
		m["updated_at"] = data[8]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
