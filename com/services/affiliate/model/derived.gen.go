// Code generated by goderive DO NOT EDIT.

package model

import (
	"database/sql"
	"time"

	core "etop.vn/backend/pkg/common/sq/core"
)

type SQLWriter = core.SQLWriter

// Type CommissionSetting represents table commission_setting
func sqlgenCommissionSetting(_ *CommissionSetting) bool { return true }

type CommissionSettings []*CommissionSetting

const __sqlCommissionSetting_Table = "commission_setting"
const __sqlCommissionSetting_ListCols = "\"product_id\",\"account_id\",\"amount\",\"unit\",\"created_at\",\"updated_at\""
const __sqlCommissionSetting_Insert = "INSERT INTO \"commission_setting\" (" + __sqlCommissionSetting_ListCols + ") VALUES"
const __sqlCommissionSetting_Select = "SELECT " + __sqlCommissionSetting_ListCols + " FROM \"commission_setting\""
const __sqlCommissionSetting_Select_history = "SELECT " + __sqlCommissionSetting_ListCols + " FROM history.\"commission_setting\""
const __sqlCommissionSetting_UpdateAll = "UPDATE \"commission_setting\" SET (" + __sqlCommissionSetting_ListCols + ")"

func (m *CommissionSetting) SQLTableName() string  { return "commission_setting" }
func (m *CommissionSettings) SQLTableName() string { return "commission_setting" }
func (m *CommissionSetting) SQLListCols() string   { return __sqlCommissionSetting_ListCols }

func (m *CommissionSetting) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ProductID),
		core.Int64(m.AccountID),
		core.Int32(m.Amount),
		core.String(m.Unit),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *CommissionSetting) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ProductID),
		(*core.Int64)(&m.AccountID),
		(*core.Int32)(&m.Amount),
		(*core.String)(&m.Unit),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *CommissionSetting) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *CommissionSettings) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(CommissionSettings, 0, 128)
	for rows.Next() {
		m := new(CommissionSetting)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *CommissionSetting) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_Select)
	return nil
}

func (_ *CommissionSettings) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_Select)
	return nil
}

func (m *CommissionSetting) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms CommissionSettings) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(6)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *CommissionSetting) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("commission_setting")
	w.WriteRawString(" SET ")
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.AccountID != 0 {
		flag = true
		w.WriteName("account_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccountID)
	}
	if m.Amount != 0 {
		flag = true
		w.WriteName("amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Amount)
	}
	if m.Unit != "" {
		flag = true
		w.WriteName("unit")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Unit)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *CommissionSetting) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type CommissionSettingHistory map[string]interface{}
type CommissionSettingHistories []map[string]interface{}

func (m *CommissionSettingHistory) SQLTableName() string  { return "history.\"commission_setting\"" }
func (m CommissionSettingHistories) SQLTableName() string { return "history.\"commission_setting\"" }

func (m *CommissionSettingHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_Select_history)
	return nil
}

func (m CommissionSettingHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_Select_history)
	return nil
}

func (m CommissionSettingHistory) ProductID() core.Interface { return core.Interface{m["product_id"]} }
func (m CommissionSettingHistory) AccountID() core.Interface { return core.Interface{m["account_id"]} }
func (m CommissionSettingHistory) Amount() core.Interface    { return core.Interface{m["amount"]} }
func (m CommissionSettingHistory) Unit() core.Interface      { return core.Interface{m["unit"]} }
func (m CommissionSettingHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m CommissionSettingHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *CommissionSettingHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(CommissionSettingHistory, 6)
	res["product_id"] = data[0]
	res["account_id"] = data[1]
	res["amount"] = data[2]
	res["unit"] = data[3]
	res["created_at"] = data[4]
	res["updated_at"] = data[5]
	*m = res
	return nil
}

func (ms *CommissionSettingHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	res := make(CommissionSettingHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(CommissionSettingHistory)
		m["product_id"] = data[0]
		m["account_id"] = data[1]
		m["amount"] = data[2]
		m["unit"] = data[3]
		m["created_at"] = data[4]
		m["updated_at"] = data[5]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type Commission represents table commission
func sqlgenCommission(_ *Commission) bool { return true }

type Commissions []*Commission

const __sqlCommission_Table = "commission"
const __sqlCommission_ListCols = "\"id\",\"aff_id\",\"value\",\"unit\",\"order_id\",\"status\",\"type\",\"created_at\",\"updated_at\""
const __sqlCommission_Insert = "INSERT INTO \"commission\" (" + __sqlCommission_ListCols + ") VALUES"
const __sqlCommission_Select = "SELECT " + __sqlCommission_ListCols + " FROM \"commission\""
const __sqlCommission_Select_history = "SELECT " + __sqlCommission_ListCols + " FROM history.\"commission\""
const __sqlCommission_UpdateAll = "UPDATE \"commission\" SET (" + __sqlCommission_ListCols + ")"

func (m *Commission) SQLTableName() string  { return "commission" }
func (m *Commissions) SQLTableName() string { return "commission" }
func (m *Commission) SQLListCols() string   { return __sqlCommission_ListCols }

func (m *Commission) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.AffID),
		core.Int32(m.Value),
		core.String(m.Unit),
		core.Int64(m.OrderID),
		core.Int(m.Status),
		core.String(m.Type),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *Commission) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.AffID),
		(*core.Int32)(&m.Value),
		(*core.String)(&m.Unit),
		(*core.Int64)(&m.OrderID),
		(*core.Int)(&m.Status),
		(*core.String)(&m.Type),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *Commission) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Commissions) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Commissions, 0, 128)
	for rows.Next() {
		m := new(Commission)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Commission) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCommission_Select)
	return nil
}

func (_ *Commissions) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCommission_Select)
	return nil
}

func (m *Commission) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlCommission_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Commissions) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlCommission_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(9)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Commission) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("commission")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.AffID != 0 {
		flag = true
		w.WriteName("aff_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AffID)
	}
	if m.Value != 0 {
		flag = true
		w.WriteName("value")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Value)
	}
	if m.Unit != "" {
		flag = true
		w.WriteName("unit")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Unit)
	}
	if m.OrderID != 0 {
		flag = true
		w.WriteName("order_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderID)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Commission) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlCommission_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type CommissionHistory map[string]interface{}
type CommissionHistories []map[string]interface{}

func (m *CommissionHistory) SQLTableName() string  { return "history.\"commission\"" }
func (m CommissionHistories) SQLTableName() string { return "history.\"commission\"" }

func (m *CommissionHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCommission_Select_history)
	return nil
}

func (m CommissionHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCommission_Select_history)
	return nil
}

func (m CommissionHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m CommissionHistory) AffID() core.Interface     { return core.Interface{m["aff_id"]} }
func (m CommissionHistory) Value() core.Interface     { return core.Interface{m["value"]} }
func (m CommissionHistory) Unit() core.Interface      { return core.Interface{m["unit"]} }
func (m CommissionHistory) OrderID() core.Interface   { return core.Interface{m["order_id"]} }
func (m CommissionHistory) Status() core.Interface    { return core.Interface{m["status"]} }
func (m CommissionHistory) Type() core.Interface      { return core.Interface{m["type"]} }
func (m CommissionHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m CommissionHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *CommissionHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(CommissionHistory, 9)
	res["id"] = data[0]
	res["aff_id"] = data[1]
	res["value"] = data[2]
	res["unit"] = data[3]
	res["order_id"] = data[4]
	res["status"] = data[5]
	res["type"] = data[6]
	res["created_at"] = data[7]
	res["updated_at"] = data[8]
	*m = res
	return nil
}

func (ms *CommissionHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	res := make(CommissionHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(CommissionHistory)
		m["id"] = data[0]
		m["aff_id"] = data[1]
		m["value"] = data[2]
		m["unit"] = data[3]
		m["order_id"] = data[4]
		m["status"] = data[5]
		m["type"] = data[6]
		m["created_at"] = data[7]
		m["updated_at"] = data[8]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
