// Code generated by goderive DO NOT EDIT.

package model

import (
	"database/sql"
	"time"

	core "etop.vn/backend/pkg/common/sq/core"
)

type SQLWriter = core.SQLWriter

// Type CommissionSetting represents table commission_setting
func sqlgenCommissionSetting(_ *CommissionSetting) bool { return true }

type CommissionSettings []*CommissionSetting

const __sqlCommissionSetting_Table = "commission_setting"
const __sqlCommissionSetting_ListCols = "\"product_id\",\"account_id\",\"amount\",\"unit\",\"type\",\"created_at\",\"updated_at\""
const __sqlCommissionSetting_Insert = "INSERT INTO \"commission_setting\" (" + __sqlCommissionSetting_ListCols + ") VALUES"
const __sqlCommissionSetting_Select = "SELECT " + __sqlCommissionSetting_ListCols + " FROM \"commission_setting\""
const __sqlCommissionSetting_Select_history = "SELECT " + __sqlCommissionSetting_ListCols + " FROM history.\"commission_setting\""
const __sqlCommissionSetting_UpdateAll = "UPDATE \"commission_setting\" SET (" + __sqlCommissionSetting_ListCols + ")"

func (m *CommissionSetting) SQLTableName() string  { return "commission_setting" }
func (m *CommissionSettings) SQLTableName() string { return "commission_setting" }
func (m *CommissionSetting) SQLListCols() string   { return __sqlCommissionSetting_ListCols }

func (m *CommissionSetting) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ProductID),
		core.Int64(m.AccountID),
		core.Int32(m.Amount),
		core.String(m.Unit),
		core.String(m.Type),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *CommissionSetting) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ProductID),
		(*core.Int64)(&m.AccountID),
		(*core.Int32)(&m.Amount),
		(*core.String)(&m.Unit),
		(*core.String)(&m.Type),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *CommissionSetting) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *CommissionSettings) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(CommissionSettings, 0, 128)
	for rows.Next() {
		m := new(CommissionSetting)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *CommissionSetting) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_Select)
	return nil
}

func (_ *CommissionSettings) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_Select)
	return nil
}

func (m *CommissionSetting) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms CommissionSettings) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(7)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *CommissionSetting) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("commission_setting")
	w.WriteRawString(" SET ")
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.AccountID != 0 {
		flag = true
		w.WriteName("account_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccountID)
	}
	if m.Amount != 0 {
		flag = true
		w.WriteName("amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Amount)
	}
	if m.Unit != "" {
		flag = true
		w.WriteName("unit")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Unit)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *CommissionSetting) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type CommissionSettingHistory map[string]interface{}
type CommissionSettingHistories []map[string]interface{}

func (m *CommissionSettingHistory) SQLTableName() string  { return "history.\"commission_setting\"" }
func (m CommissionSettingHistories) SQLTableName() string { return "history.\"commission_setting\"" }

func (m *CommissionSettingHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_Select_history)
	return nil
}

func (m CommissionSettingHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCommissionSetting_Select_history)
	return nil
}

func (m CommissionSettingHistory) ProductID() core.Interface { return core.Interface{m["product_id"]} }
func (m CommissionSettingHistory) AccountID() core.Interface { return core.Interface{m["account_id"]} }
func (m CommissionSettingHistory) Amount() core.Interface    { return core.Interface{m["amount"]} }
func (m CommissionSettingHistory) Unit() core.Interface      { return core.Interface{m["unit"]} }
func (m CommissionSettingHistory) Type() core.Interface      { return core.Interface{m["type"]} }
func (m CommissionSettingHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m CommissionSettingHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *CommissionSettingHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(CommissionSettingHistory, 7)
	res["product_id"] = data[0]
	res["account_id"] = data[1]
	res["amount"] = data[2]
	res["unit"] = data[3]
	res["type"] = data[4]
	res["created_at"] = data[5]
	res["updated_at"] = data[6]
	*m = res
	return nil
}

func (ms *CommissionSettingHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	res := make(CommissionSettingHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(CommissionSettingHistory)
		m["product_id"] = data[0]
		m["account_id"] = data[1]
		m["amount"] = data[2]
		m["unit"] = data[3]
		m["type"] = data[4]
		m["created_at"] = data[5]
		m["updated_at"] = data[6]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ProductPromotion represents table product_promotion
func sqlgenProductPromotion(_ *ProductPromotion) bool { return true }

type ProductPromotions []*ProductPromotion

const __sqlProductPromotion_Table = "product_promotion"
const __sqlProductPromotion_ListCols = "\"id\",\"product_id\",\"shop_id\",\"amount\",\"unit\",\"code\",\"description\",\"note\",\"type\",\"status\",\"created_at\",\"updated_at\""
const __sqlProductPromotion_Insert = "INSERT INTO \"product_promotion\" (" + __sqlProductPromotion_ListCols + ") VALUES"
const __sqlProductPromotion_Select = "SELECT " + __sqlProductPromotion_ListCols + " FROM \"product_promotion\""
const __sqlProductPromotion_Select_history = "SELECT " + __sqlProductPromotion_ListCols + " FROM history.\"product_promotion\""
const __sqlProductPromotion_UpdateAll = "UPDATE \"product_promotion\" SET (" + __sqlProductPromotion_ListCols + ")"

func (m *ProductPromotion) SQLTableName() string  { return "product_promotion" }
func (m *ProductPromotions) SQLTableName() string { return "product_promotion" }
func (m *ProductPromotion) SQLListCols() string   { return __sqlProductPromotion_ListCols }

func (m *ProductPromotion) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ProductID),
		core.Int64(m.ShopID),
		core.Int32(m.Amount),
		core.String(m.Unit),
		core.String(m.Code),
		core.String(m.Description),
		core.String(m.Note),
		core.String(m.Type),
		core.Int(m.Status),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *ProductPromotion) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ProductID),
		(*core.Int64)(&m.ShopID),
		(*core.Int32)(&m.Amount),
		(*core.String)(&m.Unit),
		(*core.String)(&m.Code),
		(*core.String)(&m.Description),
		(*core.String)(&m.Note),
		(*core.String)(&m.Type),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *ProductPromotion) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductPromotions) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductPromotions, 0, 128)
	for rows.Next() {
		m := new(ProductPromotion)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ProductPromotion) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductPromotion_Select)
	return nil
}

func (_ *ProductPromotions) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductPromotion_Select)
	return nil
}

func (m *ProductPromotion) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductPromotion_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(12)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ProductPromotions) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductPromotion_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(12)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ProductPromotion) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("product_promotion")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.Amount != 0 {
		flag = true
		w.WriteName("amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Amount)
	}
	if m.Unit != "" {
		flag = true
		w.WriteName("unit")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Unit)
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ProductPromotion) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlProductPromotion_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(12)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ProductPromotionHistory map[string]interface{}
type ProductPromotionHistories []map[string]interface{}

func (m *ProductPromotionHistory) SQLTableName() string  { return "history.\"product_promotion\"" }
func (m ProductPromotionHistories) SQLTableName() string { return "history.\"product_promotion\"" }

func (m *ProductPromotionHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductPromotion_Select_history)
	return nil
}

func (m ProductPromotionHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductPromotion_Select_history)
	return nil
}

func (m ProductPromotionHistory) ID() core.Interface          { return core.Interface{m["id"]} }
func (m ProductPromotionHistory) ProductID() core.Interface   { return core.Interface{m["product_id"]} }
func (m ProductPromotionHistory) ShopID() core.Interface      { return core.Interface{m["shop_id"]} }
func (m ProductPromotionHistory) Amount() core.Interface      { return core.Interface{m["amount"]} }
func (m ProductPromotionHistory) Unit() core.Interface        { return core.Interface{m["unit"]} }
func (m ProductPromotionHistory) Code() core.Interface        { return core.Interface{m["code"]} }
func (m ProductPromotionHistory) Description() core.Interface { return core.Interface{m["description"]} }
func (m ProductPromotionHistory) Note() core.Interface        { return core.Interface{m["note"]} }
func (m ProductPromotionHistory) Type() core.Interface        { return core.Interface{m["type"]} }
func (m ProductPromotionHistory) Status() core.Interface      { return core.Interface{m["status"]} }
func (m ProductPromotionHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m ProductPromotionHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }

func (m *ProductPromotionHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 12)
	args := make([]interface{}, 12)
	for i := 0; i < 12; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ProductPromotionHistory, 12)
	res["id"] = data[0]
	res["product_id"] = data[1]
	res["shop_id"] = data[2]
	res["amount"] = data[3]
	res["unit"] = data[4]
	res["code"] = data[5]
	res["description"] = data[6]
	res["note"] = data[7]
	res["type"] = data[8]
	res["status"] = data[9]
	res["created_at"] = data[10]
	res["updated_at"] = data[11]
	*m = res
	return nil
}

func (ms *ProductPromotionHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 12)
	args := make([]interface{}, 12)
	for i := 0; i < 12; i++ {
		args[i] = &data[i]
	}
	res := make(ProductPromotionHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ProductPromotionHistory)
		m["id"] = data[0]
		m["product_id"] = data[1]
		m["shop_id"] = data[2]
		m["amount"] = data[3]
		m["unit"] = data[4]
		m["code"] = data[5]
		m["description"] = data[6]
		m["note"] = data[7]
		m["type"] = data[8]
		m["status"] = data[9]
		m["created_at"] = data[10]
		m["updated_at"] = data[11]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type AffiliateCommission represents table affiliate_commission
func sqlgenAffiliateCommission(_ *AffiliateCommission) bool { return true }

type AffiliateCommissions []*AffiliateCommission

const __sqlAffiliateCommission_Table = "affiliate_commission"
const __sqlAffiliateCommission_ListCols = "\"id\",\"affiliate_id\",\"from_affiliate_id\",\"product_id\",\"order_id\",\"value\",\"description\",\"note\",\"type\",\"status\",\"valid_at\",\"created_at\",\"updated_at\""
const __sqlAffiliateCommission_Insert = "INSERT INTO \"affiliate_commission\" (" + __sqlAffiliateCommission_ListCols + ") VALUES"
const __sqlAffiliateCommission_Select = "SELECT " + __sqlAffiliateCommission_ListCols + " FROM \"affiliate_commission\""
const __sqlAffiliateCommission_Select_history = "SELECT " + __sqlAffiliateCommission_ListCols + " FROM history.\"affiliate_commission\""
const __sqlAffiliateCommission_UpdateAll = "UPDATE \"affiliate_commission\" SET (" + __sqlAffiliateCommission_ListCols + ")"

func (m *AffiliateCommission) SQLTableName() string  { return "affiliate_commission" }
func (m *AffiliateCommissions) SQLTableName() string { return "affiliate_commission" }
func (m *AffiliateCommission) SQLListCols() string   { return __sqlAffiliateCommission_ListCols }

func (m *AffiliateCommission) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.AffiliateID),
		core.Int64(m.FromAffiliateID),
		core.Int64(m.ProductID),
		core.Int64(m.OrderId),
		core.Int32(m.Value),
		core.String(m.Description),
		core.String(m.Note),
		core.String(m.Type),
		core.Int(m.Status),
		core.Time(m.ValidAt),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *AffiliateCommission) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.AffiliateID),
		(*core.Int64)(&m.FromAffiliateID),
		(*core.Int64)(&m.ProductID),
		(*core.Int64)(&m.OrderId),
		(*core.Int32)(&m.Value),
		(*core.String)(&m.Description),
		(*core.String)(&m.Note),
		(*core.String)(&m.Type),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.ValidAt),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *AffiliateCommission) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *AffiliateCommissions) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(AffiliateCommissions, 0, 128)
	for rows.Next() {
		m := new(AffiliateCommission)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *AffiliateCommission) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateCommission_Select)
	return nil
}

func (_ *AffiliateCommissions) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateCommission_Select)
	return nil
}

func (m *AffiliateCommission) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateCommission_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(13)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms AffiliateCommissions) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateCommission_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(13)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *AffiliateCommission) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("affiliate_commission")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.AffiliateID != 0 {
		flag = true
		w.WriteName("affiliate_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AffiliateID)
	}
	if m.FromAffiliateID != 0 {
		flag = true
		w.WriteName("from_affiliate_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FromAffiliateID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.OrderId != 0 {
		flag = true
		w.WriteName("order_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderId)
	}
	if m.Value != 0 {
		flag = true
		w.WriteName("value")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Value)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !m.ValidAt.IsZero() {
		flag = true
		w.WriteName("valid_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ValidAt)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *AffiliateCommission) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateCommission_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(13)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type AffiliateCommissionHistory map[string]interface{}
type AffiliateCommissionHistories []map[string]interface{}

func (m *AffiliateCommissionHistory) SQLTableName() string  { return "history.\"affiliate_commission\"" }
func (m AffiliateCommissionHistories) SQLTableName() string { return "history.\"affiliate_commission\"" }

func (m *AffiliateCommissionHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateCommission_Select_history)
	return nil
}

func (m AffiliateCommissionHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateCommission_Select_history)
	return nil
}

func (m AffiliateCommissionHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m AffiliateCommissionHistory) AffiliateID() core.Interface {
	return core.Interface{m["affiliate_id"]}
}
func (m AffiliateCommissionHistory) FromAffiliateID() core.Interface {
	return core.Interface{m["from_affiliate_id"]}
}
func (m AffiliateCommissionHistory) ProductID() core.Interface { return core.Interface{m["product_id"]} }
func (m AffiliateCommissionHistory) OrderId() core.Interface   { return core.Interface{m["order_id"]} }
func (m AffiliateCommissionHistory) Value() core.Interface     { return core.Interface{m["value"]} }
func (m AffiliateCommissionHistory) Description() core.Interface {
	return core.Interface{m["description"]}
}
func (m AffiliateCommissionHistory) Note() core.Interface      { return core.Interface{m["note"]} }
func (m AffiliateCommissionHistory) Type() core.Interface      { return core.Interface{m["type"]} }
func (m AffiliateCommissionHistory) Status() core.Interface    { return core.Interface{m["status"]} }
func (m AffiliateCommissionHistory) ValidAt() core.Interface   { return core.Interface{m["valid_at"]} }
func (m AffiliateCommissionHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m AffiliateCommissionHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *AffiliateCommissionHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 13)
	args := make([]interface{}, 13)
	for i := 0; i < 13; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(AffiliateCommissionHistory, 13)
	res["id"] = data[0]
	res["affiliate_id"] = data[1]
	res["from_affiliate_id"] = data[2]
	res["product_id"] = data[3]
	res["order_id"] = data[4]
	res["value"] = data[5]
	res["description"] = data[6]
	res["note"] = data[7]
	res["type"] = data[8]
	res["status"] = data[9]
	res["valid_at"] = data[10]
	res["created_at"] = data[11]
	res["updated_at"] = data[12]
	*m = res
	return nil
}

func (ms *AffiliateCommissionHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 13)
	args := make([]interface{}, 13)
	for i := 0; i < 13; i++ {
		args[i] = &data[i]
	}
	res := make(AffiliateCommissionHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(AffiliateCommissionHistory)
		m["id"] = data[0]
		m["affiliate_id"] = data[1]
		m["from_affiliate_id"] = data[2]
		m["product_id"] = data[3]
		m["order_id"] = data[4]
		m["value"] = data[5]
		m["description"] = data[6]
		m["note"] = data[7]
		m["type"] = data[8]
		m["status"] = data[9]
		m["valid_at"] = data[10]
		m["created_at"] = data[11]
		m["updated_at"] = data[12]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type OrderCreatedNotify represents table order_created_notify
func sqlgenOrderCreatedNotify(_ *OrderCreatedNotify) bool { return true }

type OrderCreatedNotifies []*OrderCreatedNotify

const __sqlOrderCreatedNotify_Table = "order_created_notify"
const __sqlOrderCreatedNotify_ListCols = "\"id\",\"order_id\",\"referral_code\",\"status\",\"completed_at\",\"created_at\",\"updated_at\""
const __sqlOrderCreatedNotify_Insert = "INSERT INTO \"order_created_notify\" (" + __sqlOrderCreatedNotify_ListCols + ") VALUES"
const __sqlOrderCreatedNotify_Select = "SELECT " + __sqlOrderCreatedNotify_ListCols + " FROM \"order_created_notify\""
const __sqlOrderCreatedNotify_Select_history = "SELECT " + __sqlOrderCreatedNotify_ListCols + " FROM history.\"order_created_notify\""
const __sqlOrderCreatedNotify_UpdateAll = "UPDATE \"order_created_notify\" SET (" + __sqlOrderCreatedNotify_ListCols + ")"

func (m *OrderCreatedNotify) SQLTableName() string   { return "order_created_notify" }
func (m *OrderCreatedNotifies) SQLTableName() string { return "order_created_notify" }
func (m *OrderCreatedNotify) SQLListCols() string    { return __sqlOrderCreatedNotify_ListCols }

func (m *OrderCreatedNotify) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.OrderID),
		core.String(m.ReferralCode),
		core.Int(m.Status),
		core.Time(m.CompletedAt),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *OrderCreatedNotify) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.OrderID),
		(*core.String)(&m.ReferralCode),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CompletedAt),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *OrderCreatedNotify) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *OrderCreatedNotifies) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(OrderCreatedNotifies, 0, 128)
	for rows.Next() {
		m := new(OrderCreatedNotify)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *OrderCreatedNotify) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCreatedNotify_Select)
	return nil
}

func (_ *OrderCreatedNotifies) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCreatedNotify_Select)
	return nil
}

func (m *OrderCreatedNotify) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCreatedNotify_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms OrderCreatedNotifies) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCreatedNotify_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(7)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *OrderCreatedNotify) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("order_created_notify")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.OrderID != 0 {
		flag = true
		w.WriteName("order_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderID)
	}
	if m.ReferralCode != "" {
		flag = true
		w.WriteName("referral_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ReferralCode)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !m.CompletedAt.IsZero() {
		flag = true
		w.WriteName("completed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CompletedAt)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *OrderCreatedNotify) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCreatedNotify_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type OrderCreatedNotifyHistory map[string]interface{}
type OrderCreatedNotifyHistories []map[string]interface{}

func (m *OrderCreatedNotifyHistory) SQLTableName() string  { return "history.\"order_created_notify\"" }
func (m OrderCreatedNotifyHistories) SQLTableName() string { return "history.\"order_created_notify\"" }

func (m *OrderCreatedNotifyHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCreatedNotify_Select_history)
	return nil
}

func (m OrderCreatedNotifyHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderCreatedNotify_Select_history)
	return nil
}

func (m OrderCreatedNotifyHistory) ID() core.Interface      { return core.Interface{m["id"]} }
func (m OrderCreatedNotifyHistory) OrderID() core.Interface { return core.Interface{m["order_id"]} }
func (m OrderCreatedNotifyHistory) ReferralCode() core.Interface {
	return core.Interface{m["referral_code"]}
}
func (m OrderCreatedNotifyHistory) Status() core.Interface { return core.Interface{m["status"]} }
func (m OrderCreatedNotifyHistory) CompletedAt() core.Interface {
	return core.Interface{m["completed_at"]}
}
func (m OrderCreatedNotifyHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m OrderCreatedNotifyHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *OrderCreatedNotifyHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(OrderCreatedNotifyHistory, 7)
	res["id"] = data[0]
	res["order_id"] = data[1]
	res["referral_code"] = data[2]
	res["status"] = data[3]
	res["completed_at"] = data[4]
	res["created_at"] = data[5]
	res["updated_at"] = data[6]
	*m = res
	return nil
}

func (ms *OrderCreatedNotifyHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	res := make(OrderCreatedNotifyHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(OrderCreatedNotifyHistory)
		m["id"] = data[0]
		m["order_id"] = data[1]
		m["referral_code"] = data[2]
		m["status"] = data[3]
		m["completed_at"] = data[4]
		m["created_at"] = data[5]
		m["updated_at"] = data[6]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type AffiliateReferralCode represents table affiliate_referral_code
func sqlgenAffiliateReferralCode(_ *AffiliateReferralCode) bool { return true }

type AffiliateReferralCodes []*AffiliateReferralCode

const __sqlAffiliateReferralCode_Table = "affiliate_referral_code"
const __sqlAffiliateReferralCode_ListCols = "\"id\",\"code\",\"affiliate_id\",\"user_id\",\"created_at\",\"updated_at\""
const __sqlAffiliateReferralCode_Insert = "INSERT INTO \"affiliate_referral_code\" (" + __sqlAffiliateReferralCode_ListCols + ") VALUES"
const __sqlAffiliateReferralCode_Select = "SELECT " + __sqlAffiliateReferralCode_ListCols + " FROM \"affiliate_referral_code\""
const __sqlAffiliateReferralCode_Select_history = "SELECT " + __sqlAffiliateReferralCode_ListCols + " FROM history.\"affiliate_referral_code\""
const __sqlAffiliateReferralCode_UpdateAll = "UPDATE \"affiliate_referral_code\" SET (" + __sqlAffiliateReferralCode_ListCols + ")"

func (m *AffiliateReferralCode) SQLTableName() string  { return "affiliate_referral_code" }
func (m *AffiliateReferralCodes) SQLTableName() string { return "affiliate_referral_code" }
func (m *AffiliateReferralCode) SQLListCols() string   { return __sqlAffiliateReferralCode_ListCols }

func (m *AffiliateReferralCode) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.String(m.Code),
		core.Int64(m.AffiliateID),
		core.Int64(m.UserID),
		core.Now(m.CreatedAt, now, create),
		core.Time(m.UpdatedAt),
	}
}

func (m *AffiliateReferralCode) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.String)(&m.Code),
		(*core.Int64)(&m.AffiliateID),
		(*core.Int64)(&m.UserID),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *AffiliateReferralCode) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *AffiliateReferralCodes) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(AffiliateReferralCodes, 0, 128)
	for rows.Next() {
		m := new(AffiliateReferralCode)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *AffiliateReferralCode) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateReferralCode_Select)
	return nil
}

func (_ *AffiliateReferralCodes) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateReferralCode_Select)
	return nil
}

func (m *AffiliateReferralCode) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateReferralCode_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms AffiliateReferralCodes) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateReferralCode_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(6)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *AffiliateReferralCode) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("affiliate_referral_code")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.AffiliateID != 0 {
		flag = true
		w.WriteName("affiliate_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AffiliateID)
	}
	if m.UserID != 0 {
		flag = true
		w.WriteName("user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UserID)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UpdatedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *AffiliateReferralCode) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateReferralCode_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type AffiliateReferralCodeHistory map[string]interface{}
type AffiliateReferralCodeHistories []map[string]interface{}

func (m *AffiliateReferralCodeHistory) SQLTableName() string {
	return "history.\"affiliate_referral_code\""
}
func (m AffiliateReferralCodeHistories) SQLTableName() string {
	return "history.\"affiliate_referral_code\""
}

func (m *AffiliateReferralCodeHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateReferralCode_Select_history)
	return nil
}

func (m AffiliateReferralCodeHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAffiliateReferralCode_Select_history)
	return nil
}

func (m AffiliateReferralCodeHistory) ID() core.Interface   { return core.Interface{m["id"]} }
func (m AffiliateReferralCodeHistory) Code() core.Interface { return core.Interface{m["code"]} }
func (m AffiliateReferralCodeHistory) AffiliateID() core.Interface {
	return core.Interface{m["affiliate_id"]}
}
func (m AffiliateReferralCodeHistory) UserID() core.Interface { return core.Interface{m["user_id"]} }
func (m AffiliateReferralCodeHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m AffiliateReferralCodeHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *AffiliateReferralCodeHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(AffiliateReferralCodeHistory, 6)
	res["id"] = data[0]
	res["code"] = data[1]
	res["affiliate_id"] = data[2]
	res["user_id"] = data[3]
	res["created_at"] = data[4]
	res["updated_at"] = data[5]
	*m = res
	return nil
}

func (ms *AffiliateReferralCodeHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	res := make(AffiliateReferralCodeHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(AffiliateReferralCodeHistory)
		m["id"] = data[0]
		m["code"] = data[1]
		m["affiliate_id"] = data[2]
		m["user_id"] = data[3]
		m["created_at"] = data[4]
		m["updated_at"] = data[5]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type UserReferral represents table user_referral
func sqlgenUserReferral(_ *UserReferral) bool { return true }

type UserReferrals []*UserReferral

const __sqlUserReferral_Table = "user_referral"
const __sqlUserReferral_ListCols = "\"user_id\",\"referral_id\",\"referral_code\",\"sale_referral_id\",\"sale_referral_code\",\"referral_at\",\"sale_referral_at\",\"created_at\",\"updated_at\""
const __sqlUserReferral_Insert = "INSERT INTO \"user_referral\" (" + __sqlUserReferral_ListCols + ") VALUES"
const __sqlUserReferral_Select = "SELECT " + __sqlUserReferral_ListCols + " FROM \"user_referral\""
const __sqlUserReferral_Select_history = "SELECT " + __sqlUserReferral_ListCols + " FROM history.\"user_referral\""
const __sqlUserReferral_UpdateAll = "UPDATE \"user_referral\" SET (" + __sqlUserReferral_ListCols + ")"

func (m *UserReferral) SQLTableName() string  { return "user_referral" }
func (m *UserReferrals) SQLTableName() string { return "user_referral" }
func (m *UserReferral) SQLListCols() string   { return __sqlUserReferral_ListCols }

func (m *UserReferral) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.UserID),
		core.Int64(m.ReferralID),
		core.String(m.ReferralCode),
		core.Int64(m.SaleReferralID),
		core.String(m.SaleReferralCode),
		core.Time(m.ReferralAt),
		core.Time(m.SaleReferralAt),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *UserReferral) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.UserID),
		(*core.Int64)(&m.ReferralID),
		(*core.String)(&m.ReferralCode),
		(*core.Int64)(&m.SaleReferralID),
		(*core.String)(&m.SaleReferralCode),
		(*core.Time)(&m.ReferralAt),
		(*core.Time)(&m.SaleReferralAt),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *UserReferral) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *UserReferrals) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(UserReferrals, 0, 128)
	for rows.Next() {
		m := new(UserReferral)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *UserReferral) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserReferral_Select)
	return nil
}

func (_ *UserReferrals) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserReferral_Select)
	return nil
}

func (m *UserReferral) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUserReferral_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms UserReferrals) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUserReferral_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(9)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *UserReferral) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("user_referral")
	w.WriteRawString(" SET ")
	if m.UserID != 0 {
		flag = true
		w.WriteName("user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UserID)
	}
	if m.ReferralID != 0 {
		flag = true
		w.WriteName("referral_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ReferralID)
	}
	if m.ReferralCode != "" {
		flag = true
		w.WriteName("referral_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ReferralCode)
	}
	if m.SaleReferralID != 0 {
		flag = true
		w.WriteName("sale_referral_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SaleReferralID)
	}
	if m.SaleReferralCode != "" {
		flag = true
		w.WriteName("sale_referral_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SaleReferralCode)
	}
	if !m.ReferralAt.IsZero() {
		flag = true
		w.WriteName("referral_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ReferralAt)
	}
	if !m.SaleReferralAt.IsZero() {
		flag = true
		w.WriteName("sale_referral_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SaleReferralAt)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *UserReferral) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlUserReferral_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type UserReferralHistory map[string]interface{}
type UserReferralHistories []map[string]interface{}

func (m *UserReferralHistory) SQLTableName() string  { return "history.\"user_referral\"" }
func (m UserReferralHistories) SQLTableName() string { return "history.\"user_referral\"" }

func (m *UserReferralHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserReferral_Select_history)
	return nil
}

func (m UserReferralHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserReferral_Select_history)
	return nil
}

func (m UserReferralHistory) UserID() core.Interface       { return core.Interface{m["user_id"]} }
func (m UserReferralHistory) ReferralID() core.Interface   { return core.Interface{m["referral_id"]} }
func (m UserReferralHistory) ReferralCode() core.Interface { return core.Interface{m["referral_code"]} }
func (m UserReferralHistory) SaleReferralID() core.Interface {
	return core.Interface{m["sale_referral_id"]}
}
func (m UserReferralHistory) SaleReferralCode() core.Interface {
	return core.Interface{m["sale_referral_code"]}
}
func (m UserReferralHistory) ReferralAt() core.Interface { return core.Interface{m["referral_at"]} }
func (m UserReferralHistory) SaleReferralAt() core.Interface {
	return core.Interface{m["sale_referral_at"]}
}
func (m UserReferralHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m UserReferralHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *UserReferralHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(UserReferralHistory, 9)
	res["user_id"] = data[0]
	res["referral_id"] = data[1]
	res["referral_code"] = data[2]
	res["sale_referral_id"] = data[3]
	res["sale_referral_code"] = data[4]
	res["referral_at"] = data[5]
	res["sale_referral_at"] = data[6]
	res["created_at"] = data[7]
	res["updated_at"] = data[8]
	*m = res
	return nil
}

func (ms *UserReferralHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	res := make(UserReferralHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(UserReferralHistory)
		m["user_id"] = data[0]
		m["referral_id"] = data[1]
		m["referral_code"] = data[2]
		m["sale_referral_id"] = data[3]
		m["sale_referral_code"] = data[4]
		m["referral_at"] = data[5]
		m["sale_referral_at"] = data[6]
		m["created_at"] = data[7]
		m["updated_at"] = data[8]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type SupplyCommissionSetting represents table supply_commission_setting
func sqlgenSupplyCommissionSetting(_ *SupplyCommissionSetting) bool { return true }

type SupplyCommissionSettings []*SupplyCommissionSetting

const __sqlSupplyCommissionSetting_Table = "supply_commission_setting"
const __sqlSupplyCommissionSetting_ListCols = "\"shop_id\",\"product_id\",\"level1_direct_commission\",\"level1_indirect_commission\",\"level2_direct_commission\",\"level2_indirect_commission\",\"depend_on\",\"level1_limit_count\",\"level1_limit_duration\",\"m_level1_limit_duration\",\"lifetime_duration\",\"m_lifetime_duration\",\"created_at\",\"updated_at\""
const __sqlSupplyCommissionSetting_Insert = "INSERT INTO \"supply_commission_setting\" (" + __sqlSupplyCommissionSetting_ListCols + ") VALUES"
const __sqlSupplyCommissionSetting_Select = "SELECT " + __sqlSupplyCommissionSetting_ListCols + " FROM \"supply_commission_setting\""
const __sqlSupplyCommissionSetting_Select_history = "SELECT " + __sqlSupplyCommissionSetting_ListCols + " FROM history.\"supply_commission_setting\""
const __sqlSupplyCommissionSetting_UpdateAll = "UPDATE \"supply_commission_setting\" SET (" + __sqlSupplyCommissionSetting_ListCols + ")"

func (m *SupplyCommissionSetting) SQLTableName() string  { return "supply_commission_setting" }
func (m *SupplyCommissionSettings) SQLTableName() string { return "supply_commission_setting" }
func (m *SupplyCommissionSetting) SQLListCols() string   { return __sqlSupplyCommissionSetting_ListCols }

func (m *SupplyCommissionSetting) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ShopID),
		core.Int64(m.ProductID),
		core.Int32(m.Level1DirectCommission),
		core.Int32(m.Level1IndirectCommission),
		core.Int32(m.Level2DirectCommission),
		core.Int32(m.Level2IndirectCommission),
		core.String(m.DependOn),
		core.Int32(m.Level1LimitCount),
		core.Int64(m.Level1LimitDuration),
		core.JSON{m.MLevel1LimitDuration},
		core.Int64(m.LifetimeDuration),
		core.JSON{m.MLifetimeDuration},
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *SupplyCommissionSetting) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ShopID),
		(*core.Int64)(&m.ProductID),
		(*core.Int32)(&m.Level1DirectCommission),
		(*core.Int32)(&m.Level1IndirectCommission),
		(*core.Int32)(&m.Level2DirectCommission),
		(*core.Int32)(&m.Level2IndirectCommission),
		(*core.String)(&m.DependOn),
		(*core.Int32)(&m.Level1LimitCount),
		(*core.Int64)(&m.Level1LimitDuration),
		core.JSON{&m.MLevel1LimitDuration},
		(*core.Int64)(&m.LifetimeDuration),
		core.JSON{&m.MLifetimeDuration},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *SupplyCommissionSetting) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *SupplyCommissionSettings) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(SupplyCommissionSettings, 0, 128)
	for rows.Next() {
		m := new(SupplyCommissionSetting)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *SupplyCommissionSetting) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplyCommissionSetting_Select)
	return nil
}

func (_ *SupplyCommissionSettings) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplyCommissionSetting_Select)
	return nil
}

func (m *SupplyCommissionSetting) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplyCommissionSetting_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms SupplyCommissionSettings) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplyCommissionSetting_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(14)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *SupplyCommissionSetting) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("supply_commission_setting")
	w.WriteRawString(" SET ")
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.Level1DirectCommission != 0 {
		flag = true
		w.WriteName("level1_direct_commission")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Level1DirectCommission)
	}
	if m.Level1IndirectCommission != 0 {
		flag = true
		w.WriteName("level1_indirect_commission")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Level1IndirectCommission)
	}
	if m.Level2DirectCommission != 0 {
		flag = true
		w.WriteName("level2_direct_commission")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Level2DirectCommission)
	}
	if m.Level2IndirectCommission != 0 {
		flag = true
		w.WriteName("level2_indirect_commission")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Level2IndirectCommission)
	}
	if m.DependOn != "" {
		flag = true
		w.WriteName("depend_on")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DependOn)
	}
	if m.Level1LimitCount != 0 {
		flag = true
		w.WriteName("level1_limit_count")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Level1LimitCount)
	}
	if m.Level1LimitDuration != 0 {
		flag = true
		w.WriteName("level1_limit_duration")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Level1LimitDuration)
	}
	if m.MLevel1LimitDuration != nil {
		flag = true
		w.WriteName("m_level1_limit_duration")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.MLevel1LimitDuration})
	}
	if m.LifetimeDuration != 0 {
		flag = true
		w.WriteName("lifetime_duration")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.LifetimeDuration)
	}
	if m.MLifetimeDuration != nil {
		flag = true
		w.WriteName("m_lifetime_duration")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.MLifetimeDuration})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *SupplyCommissionSetting) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplyCommissionSetting_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type SupplyCommissionSettingHistory map[string]interface{}
type SupplyCommissionSettingHistories []map[string]interface{}

func (m *SupplyCommissionSettingHistory) SQLTableName() string {
	return "history.\"supply_commission_setting\""
}
func (m SupplyCommissionSettingHistories) SQLTableName() string {
	return "history.\"supply_commission_setting\""
}

func (m *SupplyCommissionSettingHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplyCommissionSetting_Select_history)
	return nil
}

func (m SupplyCommissionSettingHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplyCommissionSetting_Select_history)
	return nil
}

func (m SupplyCommissionSettingHistory) ShopID() core.Interface { return core.Interface{m["shop_id"]} }
func (m SupplyCommissionSettingHistory) ProductID() core.Interface {
	return core.Interface{m["product_id"]}
}
func (m SupplyCommissionSettingHistory) Level1DirectCommission() core.Interface {
	return core.Interface{m["level1_direct_commission"]}
}
func (m SupplyCommissionSettingHistory) Level1IndirectCommission() core.Interface {
	return core.Interface{m["level1_indirect_commission"]}
}
func (m SupplyCommissionSettingHistory) Level2DirectCommission() core.Interface {
	return core.Interface{m["level2_direct_commission"]}
}
func (m SupplyCommissionSettingHistory) Level2IndirectCommission() core.Interface {
	return core.Interface{m["level2_indirect_commission"]}
}
func (m SupplyCommissionSettingHistory) DependOn() core.Interface {
	return core.Interface{m["depend_on"]}
}
func (m SupplyCommissionSettingHistory) Level1LimitCount() core.Interface {
	return core.Interface{m["level1_limit_count"]}
}
func (m SupplyCommissionSettingHistory) Level1LimitDuration() core.Interface {
	return core.Interface{m["level1_limit_duration"]}
}
func (m SupplyCommissionSettingHistory) MLevel1LimitDuration() core.Interface {
	return core.Interface{m["m_level1_limit_duration"]}
}
func (m SupplyCommissionSettingHistory) LifetimeDuration() core.Interface {
	return core.Interface{m["lifetime_duration"]}
}
func (m SupplyCommissionSettingHistory) MLifetimeDuration() core.Interface {
	return core.Interface{m["m_lifetime_duration"]}
}
func (m SupplyCommissionSettingHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m SupplyCommissionSettingHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *SupplyCommissionSettingHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(SupplyCommissionSettingHistory, 14)
	res["shop_id"] = data[0]
	res["product_id"] = data[1]
	res["level1_direct_commission"] = data[2]
	res["level1_indirect_commission"] = data[3]
	res["level2_direct_commission"] = data[4]
	res["level2_indirect_commission"] = data[5]
	res["depend_on"] = data[6]
	res["level1_limit_count"] = data[7]
	res["level1_limit_duration"] = data[8]
	res["m_level1_limit_duration"] = data[9]
	res["lifetime_duration"] = data[10]
	res["m_lifetime_duration"] = data[11]
	res["created_at"] = data[12]
	res["updated_at"] = data[13]
	*m = res
	return nil
}

func (ms *SupplyCommissionSettingHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	res := make(SupplyCommissionSettingHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(SupplyCommissionSettingHistory)
		m["shop_id"] = data[0]
		m["product_id"] = data[1]
		m["level1_direct_commission"] = data[2]
		m["level1_indirect_commission"] = data[3]
		m["level2_direct_commission"] = data[4]
		m["level2_indirect_commission"] = data[5]
		m["depend_on"] = data[6]
		m["level1_limit_count"] = data[7]
		m["level1_limit_duration"] = data[8]
		m["m_level1_limit_duration"] = data[9]
		m["lifetime_duration"] = data[10]
		m["m_lifetime_duration"] = data[11]
		m["created_at"] = data[12]
		m["updated_at"] = data[13]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
