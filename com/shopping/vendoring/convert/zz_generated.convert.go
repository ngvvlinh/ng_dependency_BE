// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	vendoring "etop.vn/api/shopping/vendoring"
	vendoringmodel "etop.vn/backend/com/shopping/vendoring/model"
	conversion "etop.vn/backend/pkg/common/conversion"
)

/*
Custom conversions:
    createShopVendor    // in use
    updateShopVendor    // in use

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*vendoringmodel.ShopSupplier)(nil), (*vendoring.ShopVendor)(nil), func(arg, out interface{}) error {
		Convert_vendoringmodel_ShopSupplier_vendoring_ShopVendor(arg.(*vendoringmodel.ShopSupplier), out.(*vendoring.ShopVendor))
		return nil
	})
	s.Register(([]*vendoringmodel.ShopSupplier)(nil), (*[]*vendoring.ShopVendor)(nil), func(arg, out interface{}) error {
		out0 := Convert_vendoringmodel_ShopSuppliers_vendoring_ShopVendors(arg.([]*vendoringmodel.ShopSupplier))
		*out.(*[]*vendoring.ShopVendor) = out0
		return nil
	})
	s.Register((*vendoring.ShopVendor)(nil), (*vendoringmodel.ShopSupplier)(nil), func(arg, out interface{}) error {
		Convert_vendoring_ShopVendor_vendoringmodel_ShopSupplier(arg.(*vendoring.ShopVendor), out.(*vendoringmodel.ShopSupplier))
		return nil
	})
	s.Register(([]*vendoring.ShopVendor)(nil), (*[]*vendoringmodel.ShopSupplier)(nil), func(arg, out interface{}) error {
		out0 := Convert_vendoring_ShopVendors_vendoringmodel_ShopSuppliers(arg.([]*vendoring.ShopVendor))
		*out.(*[]*vendoringmodel.ShopSupplier) = out0
		return nil
	})
	s.Register((*vendoring.CreateVendorArgs)(nil), (*vendoring.ShopVendor)(nil), func(arg, out interface{}) error {
		Apply_vendoring_CreateVendorArgs_vendoring_ShopVendor(arg.(*vendoring.CreateVendorArgs), out.(*vendoring.ShopVendor))
		return nil
	})
	s.Register((*vendoring.UpdateVendorArgs)(nil), (*vendoring.ShopVendor)(nil), func(arg, out interface{}) error {
		Apply_vendoring_UpdateVendorArgs_vendoring_ShopVendor(arg.(*vendoring.UpdateVendorArgs), out.(*vendoring.ShopVendor))
		return nil
	})
}

//-- convert etop.vn/api/shopping/vendoring.ShopVendor --//

func Convert_vendoringmodel_ShopSupplier_vendoring_ShopVendor(arg *vendoringmodel.ShopSupplier, out *vendoring.ShopVendor) *vendoring.ShopVendor {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &vendoring.ShopVendor{}
	}
	convert_vendoringmodel_ShopSupplier_vendoring_ShopVendor(arg, out)
	return out
}

func convert_vendoringmodel_ShopSupplier_vendoring_ShopVendor(arg *vendoringmodel.ShopSupplier, out *vendoring.ShopVendor) {
	out.ID = arg.ID               // simple assign
	out.ShopID = arg.ShopID       // simple assign
	out.FullName = arg.FullName   // simple assign
	out.Note = arg.Note           // simple assign
	out.Status = arg.Status       // simple assign
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
}

func Convert_vendoringmodel_ShopSuppliers_vendoring_ShopVendors(args []*vendoringmodel.ShopSupplier) (outs []*vendoring.ShopVendor) {
	tmps := make([]vendoring.ShopVendor, len(args))
	outs = make([]*vendoring.ShopVendor, len(args))
	for i := range tmps {
		outs[i] = Convert_vendoringmodel_ShopSupplier_vendoring_ShopVendor(args[i], &tmps[i])
	}
	return outs
}

func Convert_vendoring_ShopVendor_vendoringmodel_ShopSupplier(arg *vendoring.ShopVendor, out *vendoringmodel.ShopSupplier) *vendoringmodel.ShopSupplier {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &vendoringmodel.ShopSupplier{}
	}
	convert_vendoring_ShopVendor_vendoringmodel_ShopSupplier(arg, out)
	return out
}

func convert_vendoring_ShopVendor_vendoringmodel_ShopSupplier(arg *vendoring.ShopVendor, out *vendoringmodel.ShopSupplier) {
	out.ID = arg.ID               // simple assign
	out.ShopID = arg.ShopID       // simple assign
	out.FullName = arg.FullName   // simple assign
	out.Note = arg.Note           // simple assign
	out.Status = arg.Status       // simple assign
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
	out.DeletedAt = time.Time{}   // zero value
}

func Convert_vendoring_ShopVendors_vendoringmodel_ShopSuppliers(args []*vendoring.ShopVendor) (outs []*vendoringmodel.ShopSupplier) {
	tmps := make([]vendoringmodel.ShopSupplier, len(args))
	outs = make([]*vendoringmodel.ShopSupplier, len(args))
	for i := range tmps {
		outs[i] = Convert_vendoring_ShopVendor_vendoringmodel_ShopSupplier(args[i], &tmps[i])
	}
	return outs
}

func Apply_vendoring_CreateVendorArgs_vendoring_ShopVendor(arg *vendoring.CreateVendorArgs, out *vendoring.ShopVendor) *vendoring.ShopVendor {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &vendoring.ShopVendor{}
	}
	createShopVendor(arg, out)
	return out
}

func apply_vendoring_CreateVendorArgs_vendoring_ShopVendor(arg *vendoring.CreateVendorArgs, out *vendoring.ShopVendor) {
	out.ID = 0                  // zero value
	out.ShopID = arg.ShopID     // simple assign
	out.FullName = arg.FullName // simple assign
	out.Note = arg.Note         // simple assign
	out.Status = 0              // zero value
	out.CreatedAt = time.Time{} // zero value
	out.UpdatedAt = time.Time{} // zero value
}

func Apply_vendoring_UpdateVendorArgs_vendoring_ShopVendor(arg *vendoring.UpdateVendorArgs, out *vendoring.ShopVendor) *vendoring.ShopVendor {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &vendoring.ShopVendor{}
	}
	updateShopVendor(arg, out)
	return out
}

func apply_vendoring_UpdateVendorArgs_vendoring_ShopVendor(arg *vendoring.UpdateVendorArgs, out *vendoring.ShopVendor) {
	out.ID = out.ID                                 // identifier
	out.ShopID = out.ShopID                         // identifier
	out.FullName = arg.FullName.Apply(out.FullName) // apply change
	out.Note = arg.Note.Apply(out.Note)             // apply change
	out.Status = out.Status                         // no change
	out.CreatedAt = out.CreatedAt                   // no change
	out.UpdatedAt = out.UpdatedAt                   // no change
}
