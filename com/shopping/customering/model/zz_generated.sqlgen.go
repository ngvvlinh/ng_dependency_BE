// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "etop.vn/backend/pkg/common/sql/cmsql"
	core "etop.vn/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type ShopCustomers []*ShopCustomer

const __sqlShopCustomer_Table = "shop_customer"
const __sqlShopCustomer_ListCols = "\"external_id\",\"external_code\",\"partner_id\",\"id\",\"shop_id\",\"code\",\"code_norm\",\"full_name\",\"gender\",\"type\",\"birthday\",\"note\",\"phone\",\"email\",\"status\",\"full_name_norm\",\"phone_norm\",\"created_at\",\"updated_at\",\"deleted_at\",\"rid\""
const __sqlShopCustomer_ListColsOnConflict = "\"external_id\" = EXCLUDED.\"external_id\",\"external_code\" = EXCLUDED.\"external_code\",\"partner_id\" = EXCLUDED.\"partner_id\",\"id\" = EXCLUDED.\"id\",\"shop_id\" = EXCLUDED.\"shop_id\",\"code\" = EXCLUDED.\"code\",\"code_norm\" = EXCLUDED.\"code_norm\",\"full_name\" = EXCLUDED.\"full_name\",\"gender\" = EXCLUDED.\"gender\",\"type\" = EXCLUDED.\"type\",\"birthday\" = EXCLUDED.\"birthday\",\"note\" = EXCLUDED.\"note\",\"phone\" = EXCLUDED.\"phone\",\"email\" = EXCLUDED.\"email\",\"status\" = EXCLUDED.\"status\",\"full_name_norm\" = EXCLUDED.\"full_name_norm\",\"phone_norm\" = EXCLUDED.\"phone_norm\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\",\"rid\" = EXCLUDED.\"rid\""
const __sqlShopCustomer_Insert = "INSERT INTO \"shop_customer\" (" + __sqlShopCustomer_ListCols + ") VALUES"
const __sqlShopCustomer_Select = "SELECT " + __sqlShopCustomer_ListCols + " FROM \"shop_customer\""
const __sqlShopCustomer_Select_history = "SELECT " + __sqlShopCustomer_ListCols + " FROM history.\"shop_customer\""
const __sqlShopCustomer_UpdateAll = "UPDATE \"shop_customer\" SET (" + __sqlShopCustomer_ListCols + ")"
const __sqlShopCustomer_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT shop_customer_pkey DO UPDATE SET"

func (m *ShopCustomer) SQLTableName() string  { return "shop_customer" }
func (m *ShopCustomers) SQLTableName() string { return "shop_customer" }
func (m *ShopCustomer) SQLListCols() string   { return __sqlShopCustomer_ListCols }

func (m *ShopCustomer) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlShopCustomer_ListCols + " FROM \"shop_customer\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*ShopCustomer)(nil))
}

func (m *ShopCustomer) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.String(m.ExternalID),
		core.String(m.ExternalCode),
		m.PartnerID,
		m.ID,
		m.ShopID,
		core.String(m.Code),
		core.Int(m.CodeNorm),
		core.String(m.FullName),
		m.Gender,
		m.Type,
		core.String(m.Birthday),
		core.String(m.Note),
		core.String(m.Phone),
		core.String(m.Email),
		core.Int(m.Status),
		core.String(m.FullNameNorm),
		core.String(m.PhoneNorm),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
		m.Rid,
	}
}

func (m *ShopCustomer) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.String)(&m.ExternalID),
		(*core.String)(&m.ExternalCode),
		&m.PartnerID,
		&m.ID,
		&m.ShopID,
		(*core.String)(&m.Code),
		(*core.Int)(&m.CodeNorm),
		(*core.String)(&m.FullName),
		&m.Gender,
		&m.Type,
		(*core.String)(&m.Birthday),
		(*core.String)(&m.Note),
		(*core.String)(&m.Phone),
		(*core.String)(&m.Email),
		(*core.Int)(&m.Status),
		(*core.String)(&m.FullNameNorm),
		(*core.String)(&m.PhoneNorm),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
		&m.Rid,
	}
}

func (m *ShopCustomer) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopCustomers) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopCustomers, 0, 128)
	for rows.Next() {
		m := new(ShopCustomer)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopCustomer) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomer_Select)
	return nil
}

func (_ *ShopCustomers) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomer_Select)
	return nil
}

func (m *ShopCustomer) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomer_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(21)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopCustomers) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomer_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(21)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopCustomer) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlShopCustomer_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopCustomer_ListColsOnConflict)
	return nil
}

func (ms ShopCustomers) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlShopCustomer_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopCustomer_ListColsOnConflict)
	return nil
}

func (m *ShopCustomer) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_customer")
	w.WriteRawString(" SET ")
	if m.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalID)
	}
	if m.ExternalCode != "" {
		flag = true
		w.WriteName("external_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCode)
	}
	if m.PartnerID != 0 {
		flag = true
		w.WriteName("partner_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PartnerID)
	}
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.CodeNorm != 0 {
		flag = true
		w.WriteName("code_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CodeNorm)
	}
	if m.FullName != "" {
		flag = true
		w.WriteName("full_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FullName)
	}
	if m.Gender != 0 {
		flag = true
		w.WriteName("gender")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Gender)
	}
	if m.Type != 0 {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if m.Birthday != "" {
		flag = true
		w.WriteName("birthday")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Birthday)
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if m.Phone != "" {
		flag = true
		w.WriteName("phone")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Phone)
	}
	if m.Email != "" {
		flag = true
		w.WriteName("email")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Email)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if m.FullNameNorm != "" {
		flag = true
		w.WriteName("full_name_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FullNameNorm)
	}
	if m.PhoneNorm != "" {
		flag = true
		w.WriteName("phone_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PhoneNorm)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if m.Rid != 0 {
		flag = true
		w.WriteName("rid")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Rid)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopCustomer) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomer_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(21)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopCustomerHistory map[string]interface{}
type ShopCustomerHistories []map[string]interface{}

func (m *ShopCustomerHistory) SQLTableName() string  { return "history.\"shop_customer\"" }
func (m ShopCustomerHistories) SQLTableName() string { return "history.\"shop_customer\"" }

func (m *ShopCustomerHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomer_Select_history)
	return nil
}

func (m ShopCustomerHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomer_Select_history)
	return nil
}

func (m ShopCustomerHistory) ExternalID() core.Interface   { return core.Interface{m["external_id"]} }
func (m ShopCustomerHistory) ExternalCode() core.Interface { return core.Interface{m["external_code"]} }
func (m ShopCustomerHistory) PartnerID() core.Interface    { return core.Interface{m["partner_id"]} }
func (m ShopCustomerHistory) ID() core.Interface           { return core.Interface{m["id"]} }
func (m ShopCustomerHistory) ShopID() core.Interface       { return core.Interface{m["shop_id"]} }
func (m ShopCustomerHistory) Code() core.Interface         { return core.Interface{m["code"]} }
func (m ShopCustomerHistory) CodeNorm() core.Interface     { return core.Interface{m["code_norm"]} }
func (m ShopCustomerHistory) FullName() core.Interface     { return core.Interface{m["full_name"]} }
func (m ShopCustomerHistory) Gender() core.Interface       { return core.Interface{m["gender"]} }
func (m ShopCustomerHistory) Type() core.Interface         { return core.Interface{m["type"]} }
func (m ShopCustomerHistory) Birthday() core.Interface     { return core.Interface{m["birthday"]} }
func (m ShopCustomerHistory) Note() core.Interface         { return core.Interface{m["note"]} }
func (m ShopCustomerHistory) Phone() core.Interface        { return core.Interface{m["phone"]} }
func (m ShopCustomerHistory) Email() core.Interface        { return core.Interface{m["email"]} }
func (m ShopCustomerHistory) Status() core.Interface       { return core.Interface{m["status"]} }
func (m ShopCustomerHistory) FullNameNorm() core.Interface { return core.Interface{m["full_name_norm"]} }
func (m ShopCustomerHistory) PhoneNorm() core.Interface    { return core.Interface{m["phone_norm"]} }
func (m ShopCustomerHistory) CreatedAt() core.Interface    { return core.Interface{m["created_at"]} }
func (m ShopCustomerHistory) UpdatedAt() core.Interface    { return core.Interface{m["updated_at"]} }
func (m ShopCustomerHistory) DeletedAt() core.Interface    { return core.Interface{m["deleted_at"]} }
func (m ShopCustomerHistory) Rid() core.Interface          { return core.Interface{m["rid"]} }

func (m *ShopCustomerHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 21)
	args := make([]interface{}, 21)
	for i := 0; i < 21; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopCustomerHistory, 21)
	res["external_id"] = data[0]
	res["external_code"] = data[1]
	res["partner_id"] = data[2]
	res["id"] = data[3]
	res["shop_id"] = data[4]
	res["code"] = data[5]
	res["code_norm"] = data[6]
	res["full_name"] = data[7]
	res["gender"] = data[8]
	res["type"] = data[9]
	res["birthday"] = data[10]
	res["note"] = data[11]
	res["phone"] = data[12]
	res["email"] = data[13]
	res["status"] = data[14]
	res["full_name_norm"] = data[15]
	res["phone_norm"] = data[16]
	res["created_at"] = data[17]
	res["updated_at"] = data[18]
	res["deleted_at"] = data[19]
	res["rid"] = data[20]
	*m = res
	return nil
}

func (ms *ShopCustomerHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 21)
	args := make([]interface{}, 21)
	for i := 0; i < 21; i++ {
		args[i] = &data[i]
	}
	res := make(ShopCustomerHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopCustomerHistory)
		m["external_id"] = data[0]
		m["external_code"] = data[1]
		m["partner_id"] = data[2]
		m["id"] = data[3]
		m["shop_id"] = data[4]
		m["code"] = data[5]
		m["code_norm"] = data[6]
		m["full_name"] = data[7]
		m["gender"] = data[8]
		m["type"] = data[9]
		m["birthday"] = data[10]
		m["note"] = data[11]
		m["phone"] = data[12]
		m["email"] = data[13]
		m["status"] = data[14]
		m["full_name_norm"] = data[15]
		m["phone_norm"] = data[16]
		m["created_at"] = data[17]
		m["updated_at"] = data[18]
		m["deleted_at"] = data[19]
		m["rid"] = data[20]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type ShopCustomerGroups []*ShopCustomerGroup

const __sqlShopCustomerGroup_Table = "shop_customer_group"
const __sqlShopCustomerGroup_ListCols = "\"id\",\"partner_id\",\"name\",\"shop_id\",\"created_at\",\"updated_at\",\"deleted_at\""
const __sqlShopCustomerGroup_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"partner_id\" = EXCLUDED.\"partner_id\",\"name\" = EXCLUDED.\"name\",\"shop_id\" = EXCLUDED.\"shop_id\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\""
const __sqlShopCustomerGroup_Insert = "INSERT INTO \"shop_customer_group\" (" + __sqlShopCustomerGroup_ListCols + ") VALUES"
const __sqlShopCustomerGroup_Select = "SELECT " + __sqlShopCustomerGroup_ListCols + " FROM \"shop_customer_group\""
const __sqlShopCustomerGroup_Select_history = "SELECT " + __sqlShopCustomerGroup_ListCols + " FROM history.\"shop_customer_group\""
const __sqlShopCustomerGroup_UpdateAll = "UPDATE \"shop_customer_group\" SET (" + __sqlShopCustomerGroup_ListCols + ")"
const __sqlShopCustomerGroup_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT shop_customer_group_pkey DO UPDATE SET"

func (m *ShopCustomerGroup) SQLTableName() string  { return "shop_customer_group" }
func (m *ShopCustomerGroups) SQLTableName() string { return "shop_customer_group" }
func (m *ShopCustomerGroup) SQLListCols() string   { return __sqlShopCustomerGroup_ListCols }

func (m *ShopCustomerGroup) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlShopCustomerGroup_ListCols + " FROM \"shop_customer_group\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*ShopCustomerGroup)(nil))
}

func (m *ShopCustomerGroup) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.PartnerID,
		core.String(m.Name),
		m.ShopID,
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
	}
}

func (m *ShopCustomerGroup) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.PartnerID,
		(*core.String)(&m.Name),
		&m.ShopID,
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *ShopCustomerGroup) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopCustomerGroups) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopCustomerGroups, 0, 128)
	for rows.Next() {
		m := new(ShopCustomerGroup)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopCustomerGroup) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroup_Select)
	return nil
}

func (_ *ShopCustomerGroups) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroup_Select)
	return nil
}

func (m *ShopCustomerGroup) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroup_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopCustomerGroups) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroup_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(7)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopCustomerGroup) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlShopCustomerGroup_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopCustomerGroup_ListColsOnConflict)
	return nil
}

func (ms ShopCustomerGroups) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlShopCustomerGroup_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopCustomerGroup_ListColsOnConflict)
	return nil
}

func (m *ShopCustomerGroup) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_customer_group")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.PartnerID != 0 {
		flag = true
		w.WriteName("partner_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PartnerID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopCustomerGroup) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroup_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopCustomerGroupHistory map[string]interface{}
type ShopCustomerGroupHistories []map[string]interface{}

func (m *ShopCustomerGroupHistory) SQLTableName() string  { return "history.\"shop_customer_group\"" }
func (m ShopCustomerGroupHistories) SQLTableName() string { return "history.\"shop_customer_group\"" }

func (m *ShopCustomerGroupHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroup_Select_history)
	return nil
}

func (m ShopCustomerGroupHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroup_Select_history)
	return nil
}

func (m ShopCustomerGroupHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m ShopCustomerGroupHistory) PartnerID() core.Interface { return core.Interface{m["partner_id"]} }
func (m ShopCustomerGroupHistory) Name() core.Interface      { return core.Interface{m["name"]} }
func (m ShopCustomerGroupHistory) ShopID() core.Interface    { return core.Interface{m["shop_id"]} }
func (m ShopCustomerGroupHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m ShopCustomerGroupHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }
func (m ShopCustomerGroupHistory) DeletedAt() core.Interface { return core.Interface{m["deleted_at"]} }

func (m *ShopCustomerGroupHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopCustomerGroupHistory, 7)
	res["id"] = data[0]
	res["partner_id"] = data[1]
	res["name"] = data[2]
	res["shop_id"] = data[3]
	res["created_at"] = data[4]
	res["updated_at"] = data[5]
	res["deleted_at"] = data[6]
	*m = res
	return nil
}

func (ms *ShopCustomerGroupHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	res := make(ShopCustomerGroupHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopCustomerGroupHistory)
		m["id"] = data[0]
		m["partner_id"] = data[1]
		m["name"] = data[2]
		m["shop_id"] = data[3]
		m["created_at"] = data[4]
		m["updated_at"] = data[5]
		m["deleted_at"] = data[6]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type ShopCustomerGroupCustomers []*ShopCustomerGroupCustomer

const __sqlShopCustomerGroupCustomer_Table = "shop_customer_group_customer"
const __sqlShopCustomerGroupCustomer_ListCols = "\"group_id\",\"customer_id\",\"created_at\",\"updated_at\""
const __sqlShopCustomerGroupCustomer_ListColsOnConflict = "\"group_id\" = EXCLUDED.\"group_id\",\"customer_id\" = EXCLUDED.\"customer_id\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlShopCustomerGroupCustomer_Insert = "INSERT INTO \"shop_customer_group_customer\" (" + __sqlShopCustomerGroupCustomer_ListCols + ") VALUES"
const __sqlShopCustomerGroupCustomer_Select = "SELECT " + __sqlShopCustomerGroupCustomer_ListCols + " FROM \"shop_customer_group_customer\""
const __sqlShopCustomerGroupCustomer_Select_history = "SELECT " + __sqlShopCustomerGroupCustomer_ListCols + " FROM history.\"shop_customer_group_customer\""
const __sqlShopCustomerGroupCustomer_UpdateAll = "UPDATE \"shop_customer_group_customer\" SET (" + __sqlShopCustomerGroupCustomer_ListCols + ")"
const __sqlShopCustomerGroupCustomer_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT shop_customer_group_customer_pkey DO UPDATE SET"

func (m *ShopCustomerGroupCustomer) SQLTableName() string  { return "shop_customer_group_customer" }
func (m *ShopCustomerGroupCustomers) SQLTableName() string { return "shop_customer_group_customer" }
func (m *ShopCustomerGroupCustomer) SQLListCols() string {
	return __sqlShopCustomerGroupCustomer_ListCols
}

func (m *ShopCustomerGroupCustomer) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlShopCustomerGroupCustomer_ListCols + " FROM \"shop_customer_group_customer\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*ShopCustomerGroupCustomer)(nil))
}

func (m *ShopCustomerGroupCustomer) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.GroupID,
		m.CustomerID,
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *ShopCustomerGroupCustomer) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.GroupID,
		&m.CustomerID,
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *ShopCustomerGroupCustomer) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopCustomerGroupCustomers) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopCustomerGroupCustomers, 0, 128)
	for rows.Next() {
		m := new(ShopCustomerGroupCustomer)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopCustomerGroupCustomer) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_Select)
	return nil
}

func (_ *ShopCustomerGroupCustomers) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_Select)
	return nil
}

func (m *ShopCustomerGroupCustomer) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(4)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopCustomerGroupCustomers) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(4)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopCustomerGroupCustomer) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_ListColsOnConflict)
	return nil
}

func (ms ShopCustomerGroupCustomers) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_ListColsOnConflict)
	return nil
}

func (m *ShopCustomerGroupCustomer) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_customer_group_customer")
	w.WriteRawString(" SET ")
	if m.GroupID != 0 {
		flag = true
		w.WriteName("group_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.GroupID)
	}
	if m.CustomerID != 0 {
		flag = true
		w.WriteName("customer_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CustomerID)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopCustomerGroupCustomer) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(4)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopCustomerGroupCustomerHistory map[string]interface{}
type ShopCustomerGroupCustomerHistories []map[string]interface{}

func (m *ShopCustomerGroupCustomerHistory) SQLTableName() string {
	return "history.\"shop_customer_group_customer\""
}
func (m ShopCustomerGroupCustomerHistories) SQLTableName() string {
	return "history.\"shop_customer_group_customer\""
}

func (m *ShopCustomerGroupCustomerHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_Select_history)
	return nil
}

func (m ShopCustomerGroupCustomerHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_Select_history)
	return nil
}

func (m ShopCustomerGroupCustomerHistory) GroupID() core.Interface {
	return core.Interface{m["group_id"]}
}
func (m ShopCustomerGroupCustomerHistory) CustomerID() core.Interface {
	return core.Interface{m["customer_id"]}
}
func (m ShopCustomerGroupCustomerHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m ShopCustomerGroupCustomerHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *ShopCustomerGroupCustomerHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 4)
	args := make([]interface{}, 4)
	for i := 0; i < 4; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopCustomerGroupCustomerHistory, 4)
	res["group_id"] = data[0]
	res["customer_id"] = data[1]
	res["created_at"] = data[2]
	res["updated_at"] = data[3]
	*m = res
	return nil
}

func (ms *ShopCustomerGroupCustomerHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 4)
	args := make([]interface{}, 4)
	for i := 0; i < 4; i++ {
		args[i] = &data[i]
	}
	res := make(ShopCustomerGroupCustomerHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopCustomerGroupCustomerHistory)
		m["group_id"] = data[0]
		m["customer_id"] = data[1]
		m["created_at"] = data[2]
		m["updated_at"] = data[3]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type ShopTraders []*ShopTrader

const __sqlShopTrader_Table = "shop_trader"
const __sqlShopTrader_ListCols = "\"id\",\"shop_id\",\"type\""
const __sqlShopTrader_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"shop_id\" = EXCLUDED.\"shop_id\",\"type\" = EXCLUDED.\"type\""
const __sqlShopTrader_Insert = "INSERT INTO \"shop_trader\" (" + __sqlShopTrader_ListCols + ") VALUES"
const __sqlShopTrader_Select = "SELECT " + __sqlShopTrader_ListCols + " FROM \"shop_trader\""
const __sqlShopTrader_Select_history = "SELECT " + __sqlShopTrader_ListCols + " FROM history.\"shop_trader\""
const __sqlShopTrader_UpdateAll = "UPDATE \"shop_trader\" SET (" + __sqlShopTrader_ListCols + ")"
const __sqlShopTrader_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT shop_trader_pkey DO UPDATE SET"

func (m *ShopTrader) SQLTableName() string  { return "shop_trader" }
func (m *ShopTraders) SQLTableName() string { return "shop_trader" }
func (m *ShopTrader) SQLListCols() string   { return __sqlShopTrader_ListCols }

func (m *ShopTrader) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlShopTrader_ListCols + " FROM \"shop_trader\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*ShopTrader)(nil))
}

func (m *ShopTrader) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		m.ID,
		m.ShopID,
		core.String(m.Type),
	}
}

func (m *ShopTrader) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.ShopID,
		(*core.String)(&m.Type),
	}
}

func (m *ShopTrader) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopTraders) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopTraders, 0, 128)
	for rows.Next() {
		m := new(ShopTrader)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopTrader) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopTrader_Select)
	return nil
}

func (_ *ShopTraders) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopTrader_Select)
	return nil
}

func (m *ShopTrader) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopTrader_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(3)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopTraders) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopTrader_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(3)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopTrader) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlShopTrader_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopTrader_ListColsOnConflict)
	return nil
}

func (ms ShopTraders) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlShopTrader_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopTrader_ListColsOnConflict)
	return nil
}

func (m *ShopTrader) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_trader")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopTrader) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopTrader_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(3)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopTraderHistory map[string]interface{}
type ShopTraderHistories []map[string]interface{}

func (m *ShopTraderHistory) SQLTableName() string  { return "history.\"shop_trader\"" }
func (m ShopTraderHistories) SQLTableName() string { return "history.\"shop_trader\"" }

func (m *ShopTraderHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopTrader_Select_history)
	return nil
}

func (m ShopTraderHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopTrader_Select_history)
	return nil
}

func (m ShopTraderHistory) ID() core.Interface     { return core.Interface{m["id"]} }
func (m ShopTraderHistory) ShopID() core.Interface { return core.Interface{m["shop_id"]} }
func (m ShopTraderHistory) Type() core.Interface   { return core.Interface{m["type"]} }

func (m *ShopTraderHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 3)
	args := make([]interface{}, 3)
	for i := 0; i < 3; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopTraderHistory, 3)
	res["id"] = data[0]
	res["shop_id"] = data[1]
	res["type"] = data[2]
	*m = res
	return nil
}

func (ms *ShopTraderHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 3)
	args := make([]interface{}, 3)
	for i := 0; i < 3; i++ {
		args[i] = &data[i]
	}
	res := make(ShopTraderHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopTraderHistory)
		m["id"] = data[0]
		m["shop_id"] = data[1]
		m["type"] = data[2]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

type ShopTraderAddresses []*ShopTraderAddress

const __sqlShopTraderAddress_Table = "shop_trader_address"
const __sqlShopTraderAddress_ListCols = "\"id\",\"partner_id\",\"shop_id\",\"trader_id\",\"full_name\",\"phone\",\"email\",\"company\",\"address1\",\"address2\",\"district_code\",\"ward_code\",\"position\",\"is_default\",\"coordinates\",\"created_at\",\"updated_at\",\"deleted_at\",\"status\""
const __sqlShopTraderAddress_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"partner_id\" = EXCLUDED.\"partner_id\",\"shop_id\" = EXCLUDED.\"shop_id\",\"trader_id\" = EXCLUDED.\"trader_id\",\"full_name\" = EXCLUDED.\"full_name\",\"phone\" = EXCLUDED.\"phone\",\"email\" = EXCLUDED.\"email\",\"company\" = EXCLUDED.\"company\",\"address1\" = EXCLUDED.\"address1\",\"address2\" = EXCLUDED.\"address2\",\"district_code\" = EXCLUDED.\"district_code\",\"ward_code\" = EXCLUDED.\"ward_code\",\"position\" = EXCLUDED.\"position\",\"is_default\" = EXCLUDED.\"is_default\",\"coordinates\" = EXCLUDED.\"coordinates\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"deleted_at\" = EXCLUDED.\"deleted_at\",\"status\" = EXCLUDED.\"status\""
const __sqlShopTraderAddress_Insert = "INSERT INTO \"shop_trader_address\" (" + __sqlShopTraderAddress_ListCols + ") VALUES"
const __sqlShopTraderAddress_Select = "SELECT " + __sqlShopTraderAddress_ListCols + " FROM \"shop_trader_address\""
const __sqlShopTraderAddress_Select_history = "SELECT " + __sqlShopTraderAddress_ListCols + " FROM history.\"shop_trader_address\""
const __sqlShopTraderAddress_UpdateAll = "UPDATE \"shop_trader_address\" SET (" + __sqlShopTraderAddress_ListCols + ")"
const __sqlShopTraderAddress_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT shop_trader_address_pkey DO UPDATE SET"

func (m *ShopTraderAddress) SQLTableName() string   { return "shop_trader_address" }
func (m *ShopTraderAddresses) SQLTableName() string { return "shop_trader_address" }
func (m *ShopTraderAddress) SQLListCols() string    { return __sqlShopTraderAddress_ListCols }

func (m *ShopTraderAddress) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlShopTraderAddress_ListCols + " FROM \"shop_trader_address\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*ShopTraderAddress)(nil))
}

func (m *ShopTraderAddress) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		m.PartnerID,
		m.ShopID,
		m.TraderID,
		core.String(m.FullName),
		core.String(m.Phone),
		core.String(m.Email),
		core.String(m.Company),
		core.String(m.Address1),
		core.String(m.Address2),
		core.String(m.DistrictCode),
		core.String(m.WardCode),
		core.String(m.Position),
		core.Bool(m.IsDefault),
		core.JSON{m.Coordinates},
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
		m.Status,
	}
}

func (m *ShopTraderAddress) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.PartnerID,
		&m.ShopID,
		&m.TraderID,
		(*core.String)(&m.FullName),
		(*core.String)(&m.Phone),
		(*core.String)(&m.Email),
		(*core.String)(&m.Company),
		(*core.String)(&m.Address1),
		(*core.String)(&m.Address2),
		(*core.String)(&m.DistrictCode),
		(*core.String)(&m.WardCode),
		(*core.String)(&m.Position),
		(*core.Bool)(&m.IsDefault),
		core.JSON{&m.Coordinates},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
		&m.Status,
	}
}

func (m *ShopTraderAddress) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopTraderAddresses) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopTraderAddresses, 0, 128)
	for rows.Next() {
		m := new(ShopTraderAddress)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopTraderAddress) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopTraderAddress_Select)
	return nil
}

func (_ *ShopTraderAddresses) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopTraderAddress_Select)
	return nil
}

func (m *ShopTraderAddress) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopTraderAddress_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(19)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopTraderAddresses) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopTraderAddress_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(19)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopTraderAddress) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlShopTraderAddress_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopTraderAddress_ListColsOnConflict)
	return nil
}

func (ms ShopTraderAddresses) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlShopTraderAddress_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopTraderAddress_ListColsOnConflict)
	return nil
}

func (m *ShopTraderAddress) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_trader_address")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.PartnerID != 0 {
		flag = true
		w.WriteName("partner_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PartnerID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.TraderID != 0 {
		flag = true
		w.WriteName("trader_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TraderID)
	}
	if m.FullName != "" {
		flag = true
		w.WriteName("full_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FullName)
	}
	if m.Phone != "" {
		flag = true
		w.WriteName("phone")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Phone)
	}
	if m.Email != "" {
		flag = true
		w.WriteName("email")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Email)
	}
	if m.Company != "" {
		flag = true
		w.WriteName("company")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Company)
	}
	if m.Address1 != "" {
		flag = true
		w.WriteName("address1")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Address1)
	}
	if m.Address2 != "" {
		flag = true
		w.WriteName("address2")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Address2)
	}
	if m.DistrictCode != "" {
		flag = true
		w.WriteName("district_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DistrictCode)
	}
	if m.WardCode != "" {
		flag = true
		w.WriteName("ward_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WardCode)
	}
	if m.Position != "" {
		flag = true
		w.WriteName("position")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Position)
	}
	if m.IsDefault {
		flag = true
		w.WriteName("is_default")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.IsDefault)
	}
	if m.Coordinates != nil {
		flag = true
		w.WriteName("coordinates")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Coordinates})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopTraderAddress) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopTraderAddress_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(19)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopTraderAddressHistory map[string]interface{}
type ShopTraderAddressHistories []map[string]interface{}

func (m *ShopTraderAddressHistory) SQLTableName() string  { return "history.\"shop_trader_address\"" }
func (m ShopTraderAddressHistories) SQLTableName() string { return "history.\"shop_trader_address\"" }

func (m *ShopTraderAddressHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopTraderAddress_Select_history)
	return nil
}

func (m ShopTraderAddressHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopTraderAddress_Select_history)
	return nil
}

func (m ShopTraderAddressHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m ShopTraderAddressHistory) PartnerID() core.Interface { return core.Interface{m["partner_id"]} }
func (m ShopTraderAddressHistory) ShopID() core.Interface    { return core.Interface{m["shop_id"]} }
func (m ShopTraderAddressHistory) TraderID() core.Interface  { return core.Interface{m["trader_id"]} }
func (m ShopTraderAddressHistory) FullName() core.Interface  { return core.Interface{m["full_name"]} }
func (m ShopTraderAddressHistory) Phone() core.Interface     { return core.Interface{m["phone"]} }
func (m ShopTraderAddressHistory) Email() core.Interface     { return core.Interface{m["email"]} }
func (m ShopTraderAddressHistory) Company() core.Interface   { return core.Interface{m["company"]} }
func (m ShopTraderAddressHistory) Address1() core.Interface  { return core.Interface{m["address1"]} }
func (m ShopTraderAddressHistory) Address2() core.Interface  { return core.Interface{m["address2"]} }
func (m ShopTraderAddressHistory) DistrictCode() core.Interface {
	return core.Interface{m["district_code"]}
}
func (m ShopTraderAddressHistory) WardCode() core.Interface  { return core.Interface{m["ward_code"]} }
func (m ShopTraderAddressHistory) Position() core.Interface  { return core.Interface{m["position"]} }
func (m ShopTraderAddressHistory) IsDefault() core.Interface { return core.Interface{m["is_default"]} }
func (m ShopTraderAddressHistory) Coordinates() core.Interface {
	return core.Interface{m["coordinates"]}
}
func (m ShopTraderAddressHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m ShopTraderAddressHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }
func (m ShopTraderAddressHistory) DeletedAt() core.Interface { return core.Interface{m["deleted_at"]} }
func (m ShopTraderAddressHistory) Status() core.Interface    { return core.Interface{m["status"]} }

func (m *ShopTraderAddressHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 19)
	args := make([]interface{}, 19)
	for i := 0; i < 19; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopTraderAddressHistory, 19)
	res["id"] = data[0]
	res["partner_id"] = data[1]
	res["shop_id"] = data[2]
	res["trader_id"] = data[3]
	res["full_name"] = data[4]
	res["phone"] = data[5]
	res["email"] = data[6]
	res["company"] = data[7]
	res["address1"] = data[8]
	res["address2"] = data[9]
	res["district_code"] = data[10]
	res["ward_code"] = data[11]
	res["position"] = data[12]
	res["is_default"] = data[13]
	res["coordinates"] = data[14]
	res["created_at"] = data[15]
	res["updated_at"] = data[16]
	res["deleted_at"] = data[17]
	res["status"] = data[18]
	*m = res
	return nil
}

func (ms *ShopTraderAddressHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 19)
	args := make([]interface{}, 19)
	for i := 0; i < 19; i++ {
		args[i] = &data[i]
	}
	res := make(ShopTraderAddressHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopTraderAddressHistory)
		m["id"] = data[0]
		m["partner_id"] = data[1]
		m["shop_id"] = data[2]
		m["trader_id"] = data[3]
		m["full_name"] = data[4]
		m["phone"] = data[5]
		m["email"] = data[6]
		m["company"] = data[7]
		m["address1"] = data[8]
		m["address2"] = data[9]
		m["district_code"] = data[10]
		m["ward_code"] = data[11]
		m["position"] = data[12]
		m["is_default"] = data[13]
		m["coordinates"] = data[14]
		m["created_at"] = data[15]
		m["updated_at"] = data[16]
		m["deleted_at"] = data[17]
		m["status"] = data[18]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
