// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	customering "etop.vn/api/shopping/customering"
	customeringmodel "etop.vn/backend/com/shopping/customering/model"
	scheme "etop.vn/backend/pkg/common/scheme"
)

/*
Custom conversions:
    CreateShopCustomer             // in use
    CreateShopTraderAddress        // not use, no conversions between params
    ShopCustomer                   // in use
    ShopCustomerDB                 // in use
    ShopCustomerGroup              // in use
    ShopCustomerGroupCustomer      // in use
    ShopCustomerGroupCustomerDB    // in use
    ShopCustomerGroupDB            // in use
    ShopTraderAddress              // not use, no conversions between params
    ShopTraderAddressDB            // not use, no conversions between params

Ignored functions:
    Addresses                  // params are not pointer to named types
    ShopCustomerGroups         // params are not pointer to named types
    ShopCustomers              // params are not pointer to named types
    UpdateCustomerGroup        // not recognized
    UpdateShopCustomer         // not recognized
    UpdateShopTraderAddress    // not recognized
*/

func init() {
	registerConversionFunctions(scheme.Global)
}

func registerConversionFunctions(s *scheme.Scheme) {
	s.Register((*customeringmodel.ShopCustomer)(nil), (*customering.ShopCustomer)(nil), func(arg, out interface{}) error {
		Convert_customeringmodel_ShopCustomer_customering_ShopCustomer(arg.(*customeringmodel.ShopCustomer), out.(*customering.ShopCustomer))
		return nil
	})
	s.Register(([]*customeringmodel.ShopCustomer)(nil), (*[]*customering.ShopCustomer)(nil), func(arg, out interface{}) error {
		out0 := Convert_customeringmodel_ShopCustomers_customering_ShopCustomers(arg.([]*customeringmodel.ShopCustomer))
		*out.(*[]*customering.ShopCustomer) = out0
		return nil
	})
	s.Register((*customering.ShopCustomer)(nil), (*customeringmodel.ShopCustomer)(nil), func(arg, out interface{}) error {
		Convert_customering_ShopCustomer_customeringmodel_ShopCustomer(arg.(*customering.ShopCustomer), out.(*customeringmodel.ShopCustomer))
		return nil
	})
	s.Register(([]*customering.ShopCustomer)(nil), (*[]*customeringmodel.ShopCustomer)(nil), func(arg, out interface{}) error {
		out0 := Convert_customering_ShopCustomers_customeringmodel_ShopCustomers(arg.([]*customering.ShopCustomer))
		*out.(*[]*customeringmodel.ShopCustomer) = out0
		return nil
	})
	s.Register((*customering.CreateCustomerArgs)(nil), (*customering.ShopCustomer)(nil), func(arg, out interface{}) error {
		Apply_customering_CreateCustomerArgs_customering_ShopCustomer(arg.(*customering.CreateCustomerArgs), out.(*customering.ShopCustomer))
		return nil
	})
	s.Register((*customering.UpdateCustomerArgs)(nil), (*customering.ShopCustomer)(nil), func(arg, out interface{}) error {
		Apply_customering_UpdateCustomerArgs_customering_ShopCustomer(arg.(*customering.UpdateCustomerArgs), out.(*customering.ShopCustomer))
		return nil
	})
	s.Register((*customeringmodel.ShopCustomerGroup)(nil), (*customering.ShopCustomerGroup)(nil), func(arg, out interface{}) error {
		Convert_customeringmodel_ShopCustomerGroup_customering_ShopCustomerGroup(arg.(*customeringmodel.ShopCustomerGroup), out.(*customering.ShopCustomerGroup))
		return nil
	})
	s.Register(([]*customeringmodel.ShopCustomerGroup)(nil), (*[]*customering.ShopCustomerGroup)(nil), func(arg, out interface{}) error {
		out0 := Convert_customeringmodel_ShopCustomerGroups_customering_ShopCustomerGroups(arg.([]*customeringmodel.ShopCustomerGroup))
		*out.(*[]*customering.ShopCustomerGroup) = out0
		return nil
	})
	s.Register((*customering.ShopCustomerGroup)(nil), (*customeringmodel.ShopCustomerGroup)(nil), func(arg, out interface{}) error {
		Convert_customering_ShopCustomerGroup_customeringmodel_ShopCustomerGroup(arg.(*customering.ShopCustomerGroup), out.(*customeringmodel.ShopCustomerGroup))
		return nil
	})
	s.Register(([]*customering.ShopCustomerGroup)(nil), (*[]*customeringmodel.ShopCustomerGroup)(nil), func(arg, out interface{}) error {
		out0 := Convert_customering_ShopCustomerGroups_customeringmodel_ShopCustomerGroups(arg.([]*customering.ShopCustomerGroup))
		*out.(*[]*customeringmodel.ShopCustomerGroup) = out0
		return nil
	})
	s.Register((*customeringmodel.ShopCustomerGroupCustomer)(nil), (*customering.ShopCustomerGroupCustomer)(nil), func(arg, out interface{}) error {
		Convert_customeringmodel_ShopCustomerGroupCustomer_customering_ShopCustomerGroupCustomer(arg.(*customeringmodel.ShopCustomerGroupCustomer), out.(*customering.ShopCustomerGroupCustomer))
		return nil
	})
	s.Register(([]*customeringmodel.ShopCustomerGroupCustomer)(nil), (*[]*customering.ShopCustomerGroupCustomer)(nil), func(arg, out interface{}) error {
		out0 := Convert_customeringmodel_ShopCustomerGroupCustomers_customering_ShopCustomerGroupCustomers(arg.([]*customeringmodel.ShopCustomerGroupCustomer))
		*out.(*[]*customering.ShopCustomerGroupCustomer) = out0
		return nil
	})
	s.Register((*customering.ShopCustomerGroupCustomer)(nil), (*customeringmodel.ShopCustomerGroupCustomer)(nil), func(arg, out interface{}) error {
		Convert_customering_ShopCustomerGroupCustomer_customeringmodel_ShopCustomerGroupCustomer(arg.(*customering.ShopCustomerGroupCustomer), out.(*customeringmodel.ShopCustomerGroupCustomer))
		return nil
	})
	s.Register(([]*customering.ShopCustomerGroupCustomer)(nil), (*[]*customeringmodel.ShopCustomerGroupCustomer)(nil), func(arg, out interface{}) error {
		out0 := Convert_customering_ShopCustomerGroupCustomers_customeringmodel_ShopCustomerGroupCustomers(arg.([]*customering.ShopCustomerGroupCustomer))
		*out.(*[]*customeringmodel.ShopCustomerGroupCustomer) = out0
		return nil
	})
}

//-- convert etop.vn/api/shopping/customering.ShopCustomer --//

func Convert_customeringmodel_ShopCustomer_customering_ShopCustomer(arg *customeringmodel.ShopCustomer, out *customering.ShopCustomer) *customering.ShopCustomer {
	return ShopCustomer(arg)
}

func convert_customeringmodel_ShopCustomer_customering_ShopCustomer(arg *customeringmodel.ShopCustomer, out *customering.ShopCustomer) {
	out.ID = arg.ID               // simple assign
	out.ShopID = arg.ShopID       // simple assign
	out.GroupIDs = arg.GroupIDs   // simple assign
	out.Code = arg.Code           // simple assign
	out.FullName = arg.FullName   // simple assign
	out.Gender = arg.Gender       // simple assign
	out.Type = arg.Type           // simple assign
	out.Birthday = arg.Birthday   // simple assign
	out.Note = arg.Note           // simple assign
	out.Phone = arg.Phone         // simple assign
	out.Email = arg.Email         // simple assign
	out.Status = arg.Status       // simple assign
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
}

func Convert_customeringmodel_ShopCustomers_customering_ShopCustomers(args []*customeringmodel.ShopCustomer) (outs []*customering.ShopCustomer) {
	tmps := make([]customering.ShopCustomer, len(args))
	outs = make([]*customering.ShopCustomer, len(args))
	for i := range tmps {
		outs[i] = Convert_customeringmodel_ShopCustomer_customering_ShopCustomer(args[i], &tmps[i])
	}
	return outs
}

func Convert_customering_ShopCustomer_customeringmodel_ShopCustomer(arg *customering.ShopCustomer, out *customeringmodel.ShopCustomer) *customeringmodel.ShopCustomer {
	return ShopCustomerDB(arg)
}

func convert_customering_ShopCustomer_customeringmodel_ShopCustomer(arg *customering.ShopCustomer, out *customeringmodel.ShopCustomer) {
	out.ID = arg.ID               // simple assign
	out.ShopID = arg.ShopID       // simple assign
	out.GroupIDs = arg.GroupIDs   // simple assign
	out.Code = arg.Code           // simple assign
	out.FullName = arg.FullName   // simple assign
	out.Gender = arg.Gender       // simple assign
	out.Type = arg.Type           // simple assign
	out.Birthday = arg.Birthday   // simple assign
	out.Note = arg.Note           // simple assign
	out.Phone = arg.Phone         // simple assign
	out.Email = arg.Email         // simple assign
	out.Status = arg.Status       // simple assign
	out.FullNameNorm = ""         // zero value
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
	out.DeletedAt = time.Time{}   // zero value
}

func Convert_customering_ShopCustomers_customeringmodel_ShopCustomers(args []*customering.ShopCustomer) (outs []*customeringmodel.ShopCustomer) {
	tmps := make([]customeringmodel.ShopCustomer, len(args))
	outs = make([]*customeringmodel.ShopCustomer, len(args))
	for i := range tmps {
		outs[i] = Convert_customering_ShopCustomer_customeringmodel_ShopCustomer(args[i], &tmps[i])
	}
	return outs
}

func Apply_customering_CreateCustomerArgs_customering_ShopCustomer(arg *customering.CreateCustomerArgs, out *customering.ShopCustomer) *customering.ShopCustomer {
	return CreateShopCustomer(arg)
}

func apply_customering_CreateCustomerArgs_customering_ShopCustomer(arg *customering.CreateCustomerArgs, out *customering.ShopCustomer) {
	out.ID = 0                  // zero value
	out.ShopID = arg.ShopID     // simple assign
	out.GroupIDs = nil          // zero value
	out.Code = arg.Code         // simple assign
	out.FullName = arg.FullName // simple assign
	out.Gender = arg.Gender     // simple assign
	out.Type = arg.Type         // simple assign
	out.Birthday = arg.Birthday // simple assign
	out.Note = arg.Note         // simple assign
	out.Phone = arg.Phone       // simple assign
	out.Email = arg.Email       // simple assign
	out.Status = 0              // zero value
	out.CreatedAt = time.Time{} // zero value
	out.UpdatedAt = time.Time{} // zero value
}

func Apply_customering_UpdateCustomerArgs_customering_ShopCustomer(arg *customering.UpdateCustomerArgs, out *customering.ShopCustomer) *customering.ShopCustomer {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &customering.ShopCustomer{}
	}
	apply_customering_UpdateCustomerArgs_customering_ShopCustomer(arg, out)
	return out
}

func apply_customering_UpdateCustomerArgs_customering_ShopCustomer(arg *customering.UpdateCustomerArgs, out *customering.ShopCustomer) {
	out.ID = out.ID                                 // identifier
	out.ShopID = out.ShopID                         // identifier
	out.GroupIDs = out.GroupIDs                     // no change
	out.Code = arg.Code.Apply(out.Code)             // apply change
	out.FullName = arg.FullName.Apply(out.FullName) // apply change
	out.Gender = arg.Gender.Apply(out.Gender)       // apply change
	out.Type = arg.Type.Apply(out.Type)             // apply change
	out.Birthday = arg.Birthday.Apply(out.Birthday) // apply change
	out.Note = arg.Note.Apply(out.Note)             // apply change
	out.Phone = arg.Phone.Apply(out.Phone)          // apply change
	out.Email = arg.Email.Apply(out.Email)          // apply change
	out.Status = out.Status                         // no change
	out.CreatedAt = out.CreatedAt                   // no change
	out.UpdatedAt = out.UpdatedAt                   // no change
}

//-- convert etop.vn/api/shopping/customering.ShopCustomerGroup --//

func Convert_customeringmodel_ShopCustomerGroup_customering_ShopCustomerGroup(arg *customeringmodel.ShopCustomerGroup, out *customering.ShopCustomerGroup) *customering.ShopCustomerGroup {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &customering.ShopCustomerGroup{}
	}
	ShopCustomerGroup(arg, out)
	return out
}

func convert_customeringmodel_ShopCustomerGroup_customering_ShopCustomerGroup(arg *customeringmodel.ShopCustomerGroup, out *customering.ShopCustomerGroup) {
	out.ID = arg.ID     // simple assign
	out.Name = arg.Name // simple assign
}

func Convert_customeringmodel_ShopCustomerGroups_customering_ShopCustomerGroups(args []*customeringmodel.ShopCustomerGroup) (outs []*customering.ShopCustomerGroup) {
	tmps := make([]customering.ShopCustomerGroup, len(args))
	outs = make([]*customering.ShopCustomerGroup, len(args))
	for i := range tmps {
		outs[i] = Convert_customeringmodel_ShopCustomerGroup_customering_ShopCustomerGroup(args[i], &tmps[i])
	}
	return outs
}

func Convert_customering_ShopCustomerGroup_customeringmodel_ShopCustomerGroup(arg *customering.ShopCustomerGroup, out *customeringmodel.ShopCustomerGroup) *customeringmodel.ShopCustomerGroup {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &customeringmodel.ShopCustomerGroup{}
	}
	ShopCustomerGroupDB(arg, out)
	return out
}

func convert_customering_ShopCustomerGroup_customeringmodel_ShopCustomerGroup(arg *customering.ShopCustomerGroup, out *customeringmodel.ShopCustomerGroup) {
	out.ID = arg.ID             // simple assign
	out.Name = arg.Name         // simple assign
	out.CreatedAt = time.Time{} // zero value
	out.UpdatedAt = time.Time{} // zero value
}

func Convert_customering_ShopCustomerGroups_customeringmodel_ShopCustomerGroups(args []*customering.ShopCustomerGroup) (outs []*customeringmodel.ShopCustomerGroup) {
	tmps := make([]customeringmodel.ShopCustomerGroup, len(args))
	outs = make([]*customeringmodel.ShopCustomerGroup, len(args))
	for i := range tmps {
		outs[i] = Convert_customering_ShopCustomerGroup_customeringmodel_ShopCustomerGroup(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/api/shopping/customering.ShopCustomerGroupCustomer --//

func Convert_customeringmodel_ShopCustomerGroupCustomer_customering_ShopCustomerGroupCustomer(arg *customeringmodel.ShopCustomerGroupCustomer, out *customering.ShopCustomerGroupCustomer) *customering.ShopCustomerGroupCustomer {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &customering.ShopCustomerGroupCustomer{}
	}
	ShopCustomerGroupCustomer(arg, out)
	return out
}

func convert_customeringmodel_ShopCustomerGroupCustomer_customering_ShopCustomerGroupCustomer(arg *customeringmodel.ShopCustomerGroupCustomer, out *customering.ShopCustomerGroupCustomer) {
	out.GroupID = arg.GroupID       // simple assign
	out.CustomerID = arg.CustomerID // simple assign
	out.CreatedAt = arg.CreatedAt   // simple assign
	out.UpdatedAt = arg.UpdatedAt   // simple assign
}

func Convert_customeringmodel_ShopCustomerGroupCustomers_customering_ShopCustomerGroupCustomers(args []*customeringmodel.ShopCustomerGroupCustomer) (outs []*customering.ShopCustomerGroupCustomer) {
	tmps := make([]customering.ShopCustomerGroupCustomer, len(args))
	outs = make([]*customering.ShopCustomerGroupCustomer, len(args))
	for i := range tmps {
		outs[i] = Convert_customeringmodel_ShopCustomerGroupCustomer_customering_ShopCustomerGroupCustomer(args[i], &tmps[i])
	}
	return outs
}

func Convert_customering_ShopCustomerGroupCustomer_customeringmodel_ShopCustomerGroupCustomer(arg *customering.ShopCustomerGroupCustomer, out *customeringmodel.ShopCustomerGroupCustomer) *customeringmodel.ShopCustomerGroupCustomer {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &customeringmodel.ShopCustomerGroupCustomer{}
	}
	ShopCustomerGroupCustomerDB(arg, out)
	return out
}

func convert_customering_ShopCustomerGroupCustomer_customeringmodel_ShopCustomerGroupCustomer(arg *customering.ShopCustomerGroupCustomer, out *customeringmodel.ShopCustomerGroupCustomer) {
	out.GroupID = arg.GroupID       // simple assign
	out.CustomerID = arg.CustomerID // simple assign
	out.CreatedAt = arg.CreatedAt   // simple assign
	out.UpdatedAt = arg.UpdatedAt   // simple assign
}

func Convert_customering_ShopCustomerGroupCustomers_customeringmodel_ShopCustomerGroupCustomers(args []*customering.ShopCustomerGroupCustomer) (outs []*customeringmodel.ShopCustomerGroupCustomer) {
	tmps := make([]customeringmodel.ShopCustomerGroupCustomer, len(args))
	outs = make([]*customeringmodel.ShopCustomerGroupCustomer, len(args))
	for i := range tmps {
		outs[i] = Convert_customering_ShopCustomerGroupCustomer_customeringmodel_ShopCustomerGroupCustomer(args[i], &tmps[i])
	}
	return outs
}
