// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type ShopSettings []*ShopSetting

const __sqlShopSetting_Table = "shop_setting"
const __sqlShopSetting_ListCols = "\"shop_id\",\"payment_type_id\",\"return_address_id\",\"try_on\",\"shipping_note\",\"weight\",\"created_at\",\"updated_at\""
const __sqlShopSetting_ListColsOnConflict = "\"shop_id\" = EXCLUDED.\"shop_id\",\"payment_type_id\" = EXCLUDED.\"payment_type_id\",\"return_address_id\" = EXCLUDED.\"return_address_id\",\"try_on\" = EXCLUDED.\"try_on\",\"shipping_note\" = EXCLUDED.\"shipping_note\",\"weight\" = EXCLUDED.\"weight\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlShopSetting_Insert = "INSERT INTO \"shop_setting\" (" + __sqlShopSetting_ListCols + ") VALUES"
const __sqlShopSetting_Select = "SELECT " + __sqlShopSetting_ListCols + " FROM \"shop_setting\""
const __sqlShopSetting_Select_history = "SELECT " + __sqlShopSetting_ListCols + " FROM history.\"shop_setting\""
const __sqlShopSetting_UpdateAll = "UPDATE \"shop_setting\" SET (" + __sqlShopSetting_ListCols + ")"
const __sqlShopSetting_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT shop_setting_pkey DO UPDATE SET"

func (m *ShopSetting) SQLTableName() string  { return "shop_setting" }
func (m *ShopSettings) SQLTableName() string { return "shop_setting" }
func (m *ShopSetting) SQLListCols() string   { return __sqlShopSetting_ListCols }

func (m *ShopSetting) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlShopSetting_ListCols + " FROM \"shop_setting\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *ShopSetting) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "shop_setting"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"shop_id": {
			ColumnName:       "shop_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"payment_type_id": {
			ColumnName:       "payment_type_id",
			ColumnType:       "shipping_payment_type.ShippingPaymentType",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"none", "seller", "buyer"},
		},
		"return_address_id": {
			ColumnName:       "return_address_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"try_on": {
			ColumnName:       "try_on",
			ColumnType:       "try_on.TryOnCode",
			ColumnDBType:     "enum",
			ColumnTag:        "",
			ColumnEnumValues: []string{"unknown", "none", "open", "try"},
		},
		"shipping_note": {
			ColumnName:       "shipping_note",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"weight": {
			ColumnName:       "weight",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "shop_setting", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*ShopSetting)(nil))
}

func (m *ShopSetting) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ShopID,
		m.PaymentTypeID,
		m.ReturnAddressID,
		m.TryOn,
		core.String(m.ShippingNote),
		core.Int(m.Weight),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *ShopSetting) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ShopID,
		&m.PaymentTypeID,
		&m.ReturnAddressID,
		&m.TryOn,
		(*core.String)(&m.ShippingNote),
		(*core.Int)(&m.Weight),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *ShopSetting) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopSettings) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopSettings, 0, 128)
	for rows.Next() {
		m := new(ShopSetting)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopSetting) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopSetting_Select)
	return nil
}

func (_ *ShopSettings) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopSetting_Select)
	return nil
}

func (m *ShopSetting) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopSetting_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopSettings) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopSetting_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(8)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopSetting) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlShopSetting_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopSetting_ListColsOnConflict)
	return nil
}

func (ms ShopSettings) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlShopSetting_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopSetting_ListColsOnConflict)
	return nil
}

func (m *ShopSetting) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_setting")
	w.WriteRawString(" SET ")
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.PaymentTypeID != 0 {
		flag = true
		w.WriteName("payment_type_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PaymentTypeID)
	}
	if m.ReturnAddressID != 0 {
		flag = true
		w.WriteName("return_address_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ReturnAddressID)
	}
	if m.TryOn != 0 {
		flag = true
		w.WriteName("try_on")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TryOn)
	}
	if m.ShippingNote != "" {
		flag = true
		w.WriteName("shipping_note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShippingNote)
	}
	if m.Weight != 0 {
		flag = true
		w.WriteName("weight")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Weight)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if true { // always update time
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopSetting) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopSetting_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopSettingHistory map[string]interface{}
type ShopSettingHistories []map[string]interface{}

func (m *ShopSettingHistory) SQLTableName() string  { return "history.\"shop_setting\"" }
func (m ShopSettingHistories) SQLTableName() string { return "history.\"shop_setting\"" }

func (m *ShopSettingHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopSetting_Select_history)
	return nil
}

func (m ShopSettingHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopSetting_Select_history)
	return nil
}

func (m ShopSettingHistory) ShopID() core.Interface { return core.Interface{m["shop_id"]} }
func (m ShopSettingHistory) PaymentTypeID() core.Interface {
	return core.Interface{m["payment_type_id"]}
}
func (m ShopSettingHistory) ReturnAddressID() core.Interface {
	return core.Interface{m["return_address_id"]}
}
func (m ShopSettingHistory) TryOn() core.Interface        { return core.Interface{m["try_on"]} }
func (m ShopSettingHistory) ShippingNote() core.Interface { return core.Interface{m["shipping_note"]} }
func (m ShopSettingHistory) Weight() core.Interface       { return core.Interface{m["weight"]} }
func (m ShopSettingHistory) CreatedAt() core.Interface    { return core.Interface{m["created_at"]} }
func (m ShopSettingHistory) UpdatedAt() core.Interface    { return core.Interface{m["updated_at"]} }

func (m *ShopSettingHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopSettingHistory, 8)
	res["shop_id"] = data[0]
	res["payment_type_id"] = data[1]
	res["return_address_id"] = data[2]
	res["try_on"] = data[3]
	res["shipping_note"] = data[4]
	res["weight"] = data[5]
	res["created_at"] = data[6]
	res["updated_at"] = data[7]
	*m = res
	return nil
}

func (ms *ShopSettingHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	res := make(ShopSettingHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopSettingHistory)
		m["shop_id"] = data[0]
		m["payment_type_id"] = data[1]
		m["return_address_id"] = data[2]
		m["try_on"] = data[3]
		m["shipping_note"] = data[4]
		m["weight"] = data[5]
		m["created_at"] = data[6]
		m["updated_at"] = data[7]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
