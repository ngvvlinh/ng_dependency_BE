// Code generated by goderive DO NOT EDIT.

package test

// *Foo1 is a substruct of *Foo
func substructFoo1(_ *Foo1, _ *Foo) bool { return true }

func Foo1sFromFoos(ps []*Foo) []*Foo1 {
	ss := make([]*Foo1, len(ps))
	for i, p := range ps {
		ss[i] = NewFoo1FromFoo(p)
	}
	return ss
}

func Foo1sToFoos(ss []*Foo1) []*Foo {
	ps := make([]*Foo, len(ss))
	for i, s := range ss {
		ps[i] = s.ToFoo()
	}
	return ps
}

func NewFoo1FromFoo(sp *Foo) *Foo1 {
	if sp == nil {
		return nil
	}
	s := new(Foo1)
	s.CopyFrom(sp)
	return s
}

func (s *Foo1) ToFoo() *Foo {
	if s == nil {
		return nil
	}
	sp := new(Foo)
	s.AssignTo(sp)
	return sp
}

func (s *Foo1) CopyFrom(sp *Foo) {
	s.A = sp.A
	s.I = sp.I
	s.SS = sp.SS
	s.PS = sp.PS
	s.PSS = sp.PSS
	s.PSPS = sp.PSPS
}

func (s *Foo1) AssignTo(sp *Foo) {
	sp.A = s.A
	sp.I = s.I
	sp.SS = s.SS
	sp.PS = s.PS
	sp.PSS = s.PSS
	sp.PSPS = s.PSPS
}
