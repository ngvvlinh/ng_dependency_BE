// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package tests

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type As []*A

const __sqlA_Table = "a"
const __sqlA_ListCols = "\"id\",\"name\",\"created_at\",\"updated_at\""
const __sqlA_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"name\" = EXCLUDED.\"name\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\""
const __sqlA_Insert = "INSERT INTO \"a\" (" + __sqlA_ListCols + ") VALUES"
const __sqlA_Select = "SELECT " + __sqlA_ListCols + " FROM \"a\""
const __sqlA_Select_history = "SELECT " + __sqlA_ListCols + " FROM history.\"a\""
const __sqlA_UpdateAll = "UPDATE \"a\" SET (" + __sqlA_ListCols + ")"
const __sqlA_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT a_pkey DO UPDATE SET"

func (m *A) SQLTableName() string  { return "a" }
func (m *As) SQLTableName() string { return "a" }
func (m *A) SQLListCols() string   { return __sqlA_ListCols }

func (m *A) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlA_ListCols + " FROM \"a\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *A) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "a"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"name": {
			ColumnName:       "name",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "a", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*A)(nil))
}

func (m *A) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		m.ID,
		core.String(m.Name),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *A) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.Name),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *A) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *As) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(As, 0, 128)
	for rows.Next() {
		m := new(A)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *A) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlA_Select)
	return nil
}

func (_ *As) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlA_Select)
	return nil
}

func (m *A) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlA_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(4)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms As) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlA_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(4)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *A) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlA_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlA_ListColsOnConflict)
	return nil
}

func (ms As) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlA_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlA_ListColsOnConflict)
	return nil
}

func (m *A) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("a")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if true { // always update time
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *A) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlA_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(4)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type AHistory map[string]interface{}
type AHistories []map[string]interface{}

func (m *AHistory) SQLTableName() string  { return "history.\"a\"" }
func (m AHistories) SQLTableName() string { return "history.\"a\"" }

func (m *AHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlA_Select_history)
	return nil
}

func (m AHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlA_Select_history)
	return nil
}

func (m AHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m AHistory) Name() core.Interface      { return core.Interface{m["name"]} }
func (m AHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m AHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *AHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 4)
	args := make([]interface{}, 4)
	for i := 0; i < 4; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(AHistory, 4)
	res["id"] = data[0]
	res["name"] = data[1]
	res["created_at"] = data[2]
	res["updated_at"] = data[3]
	*m = res
	return nil
}

func (ms *AHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 4)
	args := make([]interface{}, 4)
	for i := 0; i < 4; i++ {
		args[i] = &data[i]
	}
	res := make(AHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(AHistory)
		m["id"] = data[0]
		m["name"] = data[1]
		m["created_at"] = data[2]
		m["updated_at"] = data[3]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
