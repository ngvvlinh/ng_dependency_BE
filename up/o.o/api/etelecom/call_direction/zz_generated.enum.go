// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package call_direction

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumCallDirectionName = map[int]string{
	0:  "unknown",
	3:  "in",
	9:  "out",
	15: "ext",
	17: "ext_in",
	21: "ext_out",
}

var enumCallDirectionValue = map[string]int{
	"unknown": 0,
	"in":      3,
	"out":     9,
	"ext":     15,
	"ext_in":  17,
	"ext_out": 21,
}

func ParseCallDirection(s string) (CallDirection, bool) {
	val, ok := enumCallDirectionValue[s]
	return CallDirection(val), ok
}

func ParseCallDirectionWithDefault(s string, d CallDirection) CallDirection {
	val, ok := enumCallDirectionValue[s]
	if !ok {
		return d
	}
	return CallDirection(val)
}

func (e CallDirection) Apply(d CallDirection) CallDirection {
	if e == 0 {
		return d
	}
	return e
}

func (e CallDirection) Enum() int {
	return int(e)
}

func (e CallDirection) Name() string {
	return enumCallDirectionName[e.Enum()]
}

func (e CallDirection) String() string {
	s, ok := enumCallDirectionName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("CallDirection(%v)", e.Enum())
}

func (e CallDirection) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumCallDirectionName[e.Enum()] + "\""), nil
}

func (e *CallDirection) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumCallDirectionValue, data, "CallDirection")
	if err != nil {
		return err
	}
	*e = CallDirection(value)
	return nil
}

func (e CallDirection) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return int64(e), nil
}

func (e *CallDirection) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumCallDirectionValue, src, "CallDirection")
	*e = (CallDirection)(value)
	return err
}

func (e CallDirection) Wrap() NullCallDirection {
	return WrapCallDirection(e)
}

func ParseCallDirectionWithNull(s dot.NullString, d CallDirection) NullCallDirection {
	if !s.Valid {
		return NullCallDirection{}
	}
	val, ok := enumCallDirectionValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return CallDirection(val).Wrap()
}

func WrapCallDirection(enum CallDirection) NullCallDirection {
	return NullCallDirection{Enum: enum, Valid: true}
}

func (n NullCallDirection) Apply(s CallDirection) CallDirection {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullCallDirection) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullCallDirection) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullCallDirection) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullCallDirection) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
