// +build !generator

// Code generated by generator api. DO NOT EDIT.

package usersetting

import (
	context "context"

	charge_type "o.o/api/top/types/etc/charge_type"
	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type UpdateUserSettingCommand struct {
	UserID              dot.ID
	ExtensionChargeType charge_type.ChargeType

	Result *UserSetting `json:"-"`
}

func (h AggregateHandler) HandleUpdateUserSetting(ctx context.Context, msg *UpdateUserSettingCommand) (err error) {
	msg.Result, err = h.inner.UpdateUserSetting(msg.GetArgs(ctx))
	return err
}

type GetUserSettingQuery struct {
	UserID dot.ID

	Result *UserSetting `json:"-"`
}

func (h QueryServiceHandler) HandleGetUserSetting(ctx context.Context, msg *GetUserSettingQuery) (err error) {
	msg.Result, err = h.inner.GetUserSetting(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *UpdateUserSettingCommand) command() {}

func (q *GetUserSettingQuery) query() {}

// implement conversion

func (q *UpdateUserSettingCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateUserSettingArgs) {
	return ctx,
		&UpdateUserSettingArgs{
			UserID:              q.UserID,
			ExtensionChargeType: q.ExtensionChargeType,
		}
}

func (q *UpdateUserSettingCommand) SetUpdateUserSettingArgs(args *UpdateUserSettingArgs) {
	q.UserID = args.UserID
	q.ExtensionChargeType = args.ExtensionChargeType
}

func (q *GetUserSettingQuery) GetArgs(ctx context.Context) (_ context.Context, userID dot.ID) {
	return ctx,
		q.UserID
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleUpdateUserSetting)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetUserSetting)
	return QueryBus{b}
}
