// +build !generator

// Code generated by generator api. DO NOT EDIT.

package etelecom

import (
	context "context"

	common "o.o/api/top/types/common"
	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateExtensionCommand struct {
	ExtensionNumber   string
	UserID            dot.ID
	AccountID         dot.ID
	ExtensionPassword string
	ConnectionID      dot.ID

	Result *Extension `json:"-"`
}

func (h AggregateHandler) HandleCreateExtension(ctx context.Context, msg *CreateExtensionCommand) (err error) {
	msg.Result, err = h.inner.CreateExtension(msg.GetArgs(ctx))
	return err
}

type DeleteExtensionCommand struct {
	Id dot.ID

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleDeleteExtension(ctx context.Context, msg *DeleteExtensionCommand) (err error) {
	return h.inner.DeleteExtension(msg.GetArgs(ctx))
}

type UpdateExternalExtensionInfoCommand struct {
	ID                dot.ID
	HotlineID         dot.ID
	ExternalID        string
	ExtensionNumber   string
	ExtensionPassword string

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleUpdateExternalExtensionInfo(ctx context.Context, msg *UpdateExternalExtensionInfoCommand) (err error) {
	return h.inner.UpdateExternalExtensionInfo(msg.GetArgs(ctx))
}

type GetExtensionQuery struct {
	ID           dot.ID
	UserID       dot.ID
	AccountID    dot.ID
	ConnectionID dot.ID

	Result *Extension `json:"-"`
}

func (h QueryServiceHandler) HandleGetExtension(ctx context.Context, msg *GetExtensionQuery) (err error) {
	msg.Result, err = h.inner.GetExtension(msg.GetArgs(ctx))
	return err
}

type GetHotlineQuery struct {
	ID      dot.ID
	OwnerID dot.ID

	Result *Hotline `json:"-"`
}

func (h QueryServiceHandler) HandleGetHotline(ctx context.Context, msg *GetHotlineQuery) (err error) {
	msg.Result, err = h.inner.GetHotline(msg.GetArgs(ctx))
	return err
}

type GetPrivateExtensionNumberQuery struct {
	Result string `json:"-"`
}

func (h QueryServiceHandler) HandleGetPrivateExtensionNumber(ctx context.Context, msg *GetPrivateExtensionNumberQuery) (err error) {
	msg.Result, err = h.inner.GetPrivateExtensionNumber(msg.GetArgs(ctx))
	return err
}

type ListExtensionsQuery struct {
	UserID       dot.ID
	ConnectionID dot.ID

	Result []*Extension `json:"-"`
}

func (h QueryServiceHandler) HandleListExtensions(ctx context.Context, msg *ListExtensionsQuery) (err error) {
	msg.Result, err = h.inner.ListExtensions(msg.GetArgs(ctx))
	return err
}

type ListHotlinesQuery struct {
	OwnerID      dot.ID
	ConnectionID dot.ID

	Result []*Hotline `json:"-"`
}

func (h QueryServiceHandler) HandleListHotlines(ctx context.Context, msg *ListHotlinesQuery) (err error) {
	msg.Result, err = h.inner.ListHotlines(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateExtensionCommand) command()             {}
func (q *DeleteExtensionCommand) command()             {}
func (q *UpdateExternalExtensionInfoCommand) command() {}

func (q *GetExtensionQuery) query()              {}
func (q *GetHotlineQuery) query()                {}
func (q *GetPrivateExtensionNumberQuery) query() {}
func (q *ListExtensionsQuery) query()            {}
func (q *ListHotlinesQuery) query()              {}

// implement conversion

func (q *CreateExtensionCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateExtensionArgs) {
	return ctx,
		&CreateExtensionArgs{
			ExtensionNumber:   q.ExtensionNumber,
			UserID:            q.UserID,
			AccountID:         q.AccountID,
			ExtensionPassword: q.ExtensionPassword,
			ConnectionID:      q.ConnectionID,
		}
}

func (q *CreateExtensionCommand) SetCreateExtensionArgs(args *CreateExtensionArgs) {
	q.ExtensionNumber = args.ExtensionNumber
	q.UserID = args.UserID
	q.AccountID = args.AccountID
	q.ExtensionPassword = args.ExtensionPassword
	q.ConnectionID = args.ConnectionID
}

func (q *DeleteExtensionCommand) GetArgs(ctx context.Context) (_ context.Context, id dot.ID) {
	return ctx,
		q.Id
}

func (q *UpdateExternalExtensionInfoCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateExternalExtensionInfoArgs) {
	return ctx,
		&UpdateExternalExtensionInfoArgs{
			ID:                q.ID,
			HotlineID:         q.HotlineID,
			ExternalID:        q.ExternalID,
			ExtensionNumber:   q.ExtensionNumber,
			ExtensionPassword: q.ExtensionPassword,
		}
}

func (q *UpdateExternalExtensionInfoCommand) SetUpdateExternalExtensionInfoArgs(args *UpdateExternalExtensionInfoArgs) {
	q.ID = args.ID
	q.HotlineID = args.HotlineID
	q.ExternalID = args.ExternalID
	q.ExtensionNumber = args.ExtensionNumber
	q.ExtensionPassword = args.ExtensionPassword
}

func (q *GetExtensionQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetExtensionArgs) {
	return ctx,
		&GetExtensionArgs{
			ID:           q.ID,
			UserID:       q.UserID,
			AccountID:    q.AccountID,
			ConnectionID: q.ConnectionID,
		}
}

func (q *GetExtensionQuery) SetGetExtensionArgs(args *GetExtensionArgs) {
	q.ID = args.ID
	q.UserID = args.UserID
	q.AccountID = args.AccountID
	q.ConnectionID = args.ConnectionID
}

func (q *GetHotlineQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetHotlineArgs) {
	return ctx,
		&GetHotlineArgs{
			ID:      q.ID,
			OwnerID: q.OwnerID,
		}
}

func (q *GetHotlineQuery) SetGetHotlineArgs(args *GetHotlineArgs) {
	q.ID = args.ID
	q.OwnerID = args.OwnerID
}

func (q *GetPrivateExtensionNumberQuery) GetArgs(ctx context.Context) (_ context.Context, _ *common.Empty) {
	return ctx,
		&common.Empty{}
}

func (q *GetPrivateExtensionNumberQuery) SetEmpty(args *common.Empty) {
}

func (q *ListExtensionsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListExtensionsArgs) {
	return ctx,
		&ListExtensionsArgs{
			UserID:       q.UserID,
			ConnectionID: q.ConnectionID,
		}
}

func (q *ListExtensionsQuery) SetListExtensionsArgs(args *ListExtensionsArgs) {
	q.UserID = args.UserID
	q.ConnectionID = args.ConnectionID
}

func (q *ListHotlinesQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListHotlinesArgs) {
	return ctx,
		&ListHotlinesArgs{
			OwnerID:      q.OwnerID,
			ConnectionID: q.ConnectionID,
		}
}

func (q *ListHotlinesQuery) SetListHotlinesArgs(args *ListHotlinesArgs) {
	q.OwnerID = args.OwnerID
	q.ConnectionID = args.ConnectionID
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateExtension)
	b.AddHandler(h.HandleDeleteExtension)
	b.AddHandler(h.HandleUpdateExternalExtensionInfo)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetExtension)
	b.AddHandler(h.HandleGetHotline)
	b.AddHandler(h.HandleGetPrivateExtensionNumber)
	b.AddHandler(h.HandleListExtensions)
	b.AddHandler(h.HandleListHotlines)
	return QueryBus{b}
}
