// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package mobile_network

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumMobileNetworkName = map[int]string{
	0: "unknown",
	1: "mobiphone",
	2: "vinaphone",
	3: "viettel",
	4: "other",
}

var enumMobileNetworkValue = map[string]int{
	"unknown":   0,
	"mobiphone": 1,
	"vinaphone": 2,
	"viettel":   3,
	"other":     4,
}

func ParseMobileNetwork(s string) (MobileNetwork, bool) {
	val, ok := enumMobileNetworkValue[s]
	return MobileNetwork(val), ok
}

func ParseMobileNetworkWithDefault(s string, d MobileNetwork) MobileNetwork {
	val, ok := enumMobileNetworkValue[s]
	if !ok {
		return d
	}
	return MobileNetwork(val)
}

func (e MobileNetwork) Apply(d MobileNetwork) MobileNetwork {
	if e == 0 {
		return d
	}
	return e
}

func (e MobileNetwork) Enum() int {
	return int(e)
}

func (e MobileNetwork) Name() string {
	return enumMobileNetworkName[e.Enum()]
}

func (e MobileNetwork) String() string {
	s, ok := enumMobileNetworkName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("MobileNetwork(%v)", e.Enum())
}

func (e MobileNetwork) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumMobileNetworkName[e.Enum()] + "\""), nil
}

func (e *MobileNetwork) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumMobileNetworkValue, data, "MobileNetwork")
	if err != nil {
		return err
	}
	*e = MobileNetwork(value)
	return nil
}

func (e MobileNetwork) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *MobileNetwork) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumMobileNetworkValue, src, "MobileNetwork")
	*e = (MobileNetwork)(value)
	return err
}

func (e MobileNetwork) Wrap() NullMobileNetwork {
	return WrapMobileNetwork(e)
}

func ParseMobileNetworkWithNull(s dot.NullString, d MobileNetwork) NullMobileNetwork {
	if !s.Valid {
		return NullMobileNetwork{}
	}
	val, ok := enumMobileNetworkValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return MobileNetwork(val).Wrap()
}

func WrapMobileNetwork(enum MobileNetwork) NullMobileNetwork {
	return NullMobileNetwork{Enum: enum, Valid: true}
}

func (n NullMobileNetwork) Apply(s MobileNetwork) MobileNetwork {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullMobileNetwork) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullMobileNetwork) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullMobileNetwork) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullMobileNetwork) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
