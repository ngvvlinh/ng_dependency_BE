// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package call_log_direction

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumCallLogDirectionName = map[int]string{
	0:  "unknown",
	3:  "in",
	9:  "out",
	15: "ext",
}

var enumCallLogDirectionValue = map[string]int{
	"unknown": 0,
	"in":      3,
	"out":     9,
	"ext":     15,
}

func ParseCallLogDirection(s string) (CallLogDirection, bool) {
	val, ok := enumCallLogDirectionValue[s]
	return CallLogDirection(val), ok
}

func ParseCallLogDirectionWithDefault(s string, d CallLogDirection) CallLogDirection {
	val, ok := enumCallLogDirectionValue[s]
	if !ok {
		return d
	}
	return CallLogDirection(val)
}

func (e CallLogDirection) Apply(d CallLogDirection) CallLogDirection {
	if e == 0 {
		return d
	}
	return e
}

func (e CallLogDirection) Enum() int {
	return int(e)
}

func (e CallLogDirection) Name() string {
	return enumCallLogDirectionName[e.Enum()]
}

func (e CallLogDirection) String() string {
	s, ok := enumCallLogDirectionName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("CallLogDirection(%v)", e.Enum())
}

func (e CallLogDirection) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumCallLogDirectionName[e.Enum()] + "\""), nil
}

func (e *CallLogDirection) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumCallLogDirectionValue, data, "CallLogDirection")
	if err != nil {
		return err
	}
	*e = CallLogDirection(value)
	return nil
}

func (e CallLogDirection) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return int64(e), nil
}

func (e *CallLogDirection) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumCallLogDirectionValue, src, "CallLogDirection")
	*e = (CallLogDirection)(value)
	return err
}

func (e CallLogDirection) Wrap() NullCallLogDirection {
	return WrapCallLogDirection(e)
}

func ParseCallLogDirectionWithNull(s dot.NullString, d CallLogDirection) NullCallLogDirection {
	if !s.Valid {
		return NullCallLogDirection{}
	}
	val, ok := enumCallLogDirectionValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return CallLogDirection(val).Wrap()
}

func WrapCallLogDirection(enum CallLogDirection) NullCallLogDirection {
	return NullCallLogDirection{Enum: enum, Valid: true}
}

func (n NullCallLogDirection) Apply(s CallLogDirection) CallLogDirection {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullCallLogDirection) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullCallLogDirection) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullCallLogDirection) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullCallLogDirection) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
