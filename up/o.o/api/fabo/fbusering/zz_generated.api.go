// +build !generator

// Code generated by generator api. DO NOT EDIT.

package fbusering

import (
	context "context"

	meta "o.o/api/meta"
	status3 "o.o/api/top/types/etc/status3"
	capi "o.o/capi"
	dot "o.o/capi/dot"
	filter "o.o/capi/filter"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateFbExternalUserCommand struct {
	ExternalID     string
	ExternalInfo   *FbExternalUserInfo
	ExternalPageID string
	Status         status3.Status

	Result *FbExternalUser `json:"-"`
}

func (h AggregateHandler) HandleCreateFbExternalUser(ctx context.Context, msg *CreateFbExternalUserCommand) (err error) {
	msg.Result, err = h.inner.CreateFbExternalUser(msg.GetArgs(ctx))
	return err
}

type CreateFbExternalUserCombinedCommand struct {
	FbUser         *CreateFbExternalUserArgs
	FbUserInternal *CreateFbExternalUserInternalArgs

	Result *FbExternalUserCombined `json:"-"`
}

func (h AggregateHandler) HandleCreateFbExternalUserCombined(ctx context.Context, msg *CreateFbExternalUserCombinedCommand) (err error) {
	msg.Result, err = h.inner.CreateFbExternalUserCombined(msg.GetArgs(ctx))
	return err
}

type CreateFbExternalUserInternalCommand struct {
	ExternalID string
	Token      string
	ExpiresIn  int

	Result *FbExternalUserInternal `json:"-"`
}

func (h AggregateHandler) HandleCreateFbExternalUserInternal(ctx context.Context, msg *CreateFbExternalUserInternalCommand) (err error) {
	msg.Result, err = h.inner.CreateFbExternalUserInternal(msg.GetArgs(ctx))
	return err
}

type CreateFbExternalUserShopCustomerCommand struct {
	ShopID     dot.ID
	ExternalID string
	CustomerID dot.ID

	Result *FbExternalUserWithCustomer `json:"-"`
}

func (h AggregateHandler) HandleCreateFbExternalUserShopCustomer(ctx context.Context, msg *CreateFbExternalUserShopCustomerCommand) (err error) {
	msg.Result, err = h.inner.CreateFbExternalUserShopCustomer(msg.GetArgs(ctx))
	return err
}

type CreateFbExternalUsersCommand struct {
	FbExternalUsers []*CreateFbExternalUserArgs

	Result []*FbExternalUser `json:"-"`
}

func (h AggregateHandler) HandleCreateFbExternalUsers(ctx context.Context, msg *CreateFbExternalUsersCommand) (err error) {
	msg.Result, err = h.inner.CreateFbExternalUsers(msg.GetArgs(ctx))
	return err
}

type DeleteFbExternalUserShopCustomerCommand struct {
	ShopID     dot.ID
	ExternalID dot.NullString
	CustomerID dot.NullID

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleDeleteFbExternalUserShopCustomer(ctx context.Context, msg *DeleteFbExternalUserShopCustomerCommand) (err error) {
	return h.inner.DeleteFbExternalUserShopCustomer(msg.GetArgs(ctx))
}

type GetFbExternalUserByExternalIDQuery struct {
	ExternalID string

	Result *FbExternalUser `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbExternalUserByExternalID(ctx context.Context, msg *GetFbExternalUserByExternalIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbExternalUserByExternalID(msg.GetArgs(ctx))
	return err
}

type GetFbExternalUserInternalByExternalIDQuery struct {
	ExternalID string

	Result *FbExternalUserInternal `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbExternalUserInternalByExternalID(ctx context.Context, msg *GetFbExternalUserInternalByExternalIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbExternalUserInternalByExternalID(msg.GetArgs(ctx))
	return err
}

type GetFbExternalUserWithCustomerByExternalIDQuery struct {
	ShopID     dot.ID
	ExternalID string

	Result *FbExternalUserWithCustomer `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbExternalUserWithCustomerByExternalID(ctx context.Context, msg *GetFbExternalUserWithCustomerByExternalIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbExternalUserWithCustomerByExternalID(msg.GetArgs(ctx))
	return err
}

type ListFbExternalUserWithCustomerQuery struct {
	Args ListFbExternalUserWithCustomerRequest

	Result []*FbExternalUserWithCustomer `json:"-"`
}

func (h QueryServiceHandler) HandleListFbExternalUserWithCustomer(ctx context.Context, msg *ListFbExternalUserWithCustomerQuery) (err error) {
	msg.Result, err = h.inner.ListFbExternalUserWithCustomer(msg.GetArgs(ctx))
	return err
}

type ListFbExternalUserWithCustomerByExternalIDsQuery struct {
	ShopID      dot.ID
	ExternalIDs []string

	Result []*FbExternalUserWithCustomer `json:"-"`
}

func (h QueryServiceHandler) HandleListFbExternalUserWithCustomerByExternalIDs(ctx context.Context, msg *ListFbExternalUserWithCustomerByExternalIDsQuery) (err error) {
	msg.Result, err = h.inner.ListFbExternalUserWithCustomerByExternalIDs(msg.GetArgs(ctx))
	return err
}

type ListFbExternalUsersQuery struct {
	CustomerID dot.NullID
	ShopID     dot.ID

	Result []*FbExternalUserWithCustomer `json:"-"`
}

func (h QueryServiceHandler) HandleListFbExternalUsers(ctx context.Context, msg *ListFbExternalUsersQuery) (err error) {
	msg.Result, err = h.inner.ListFbExternalUsers(msg.GetArgs(ctx))
	return err
}

type ListFbExternalUsersByExternalIDsQuery struct {
	ExternalIDs    filter.Strings
	ExternalPageID dot.NullString

	Result []*FbExternalUser `json:"-"`
}

func (h QueryServiceHandler) HandleListFbExternalUsersByExternalIDs(ctx context.Context, msg *ListFbExternalUsersByExternalIDsQuery) (err error) {
	msg.Result, err = h.inner.ListFbExternalUsersByExternalIDs(msg.GetArgs(ctx))
	return err
}

type ListShopCustomerWithFbExternalUserQuery struct {
	ShopID  dot.ID
	Paging  meta.Paging
	Filters meta.Filters

	Result *ListShopCustomerWithFbExternalUserResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopCustomerWithFbExternalUser(ctx context.Context, msg *ListShopCustomerWithFbExternalUserQuery) (err error) {
	msg.Result, err = h.inner.ListShopCustomerWithFbExternalUser(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateFbExternalUserCommand) command()             {}
func (q *CreateFbExternalUserCombinedCommand) command()     {}
func (q *CreateFbExternalUserInternalCommand) command()     {}
func (q *CreateFbExternalUserShopCustomerCommand) command() {}
func (q *CreateFbExternalUsersCommand) command()            {}
func (q *DeleteFbExternalUserShopCustomerCommand) command() {}

func (q *GetFbExternalUserByExternalIDQuery) query()               {}
func (q *GetFbExternalUserInternalByExternalIDQuery) query()       {}
func (q *GetFbExternalUserWithCustomerByExternalIDQuery) query()   {}
func (q *ListFbExternalUserWithCustomerQuery) query()              {}
func (q *ListFbExternalUserWithCustomerByExternalIDsQuery) query() {}
func (q *ListFbExternalUsersQuery) query()                         {}
func (q *ListFbExternalUsersByExternalIDsQuery) query()            {}
func (q *ListShopCustomerWithFbExternalUserQuery) query()          {}

// implement conversion

func (q *CreateFbExternalUserCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFbExternalUserArgs) {
	return ctx,
		&CreateFbExternalUserArgs{
			ExternalID:     q.ExternalID,
			ExternalInfo:   q.ExternalInfo,
			ExternalPageID: q.ExternalPageID,
			Status:         q.Status,
		}
}

func (q *CreateFbExternalUserCommand) SetCreateFbExternalUserArgs(args *CreateFbExternalUserArgs) {
	q.ExternalID = args.ExternalID
	q.ExternalInfo = args.ExternalInfo
	q.ExternalPageID = args.ExternalPageID
	q.Status = args.Status
}

func (q *CreateFbExternalUserCombinedCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFbExternalUserCombinedArgs) {
	return ctx,
		&CreateFbExternalUserCombinedArgs{
			FbUser:         q.FbUser,
			FbUserInternal: q.FbUserInternal,
		}
}

func (q *CreateFbExternalUserCombinedCommand) SetCreateFbExternalUserCombinedArgs(args *CreateFbExternalUserCombinedArgs) {
	q.FbUser = args.FbUser
	q.FbUserInternal = args.FbUserInternal
}

func (q *CreateFbExternalUserInternalCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFbExternalUserInternalArgs) {
	return ctx,
		&CreateFbExternalUserInternalArgs{
			ExternalID: q.ExternalID,
			Token:      q.Token,
			ExpiresIn:  q.ExpiresIn,
		}
}

func (q *CreateFbExternalUserInternalCommand) SetCreateFbExternalUserInternalArgs(args *CreateFbExternalUserInternalArgs) {
	q.ExternalID = args.ExternalID
	q.Token = args.Token
	q.ExpiresIn = args.ExpiresIn
}

func (q *CreateFbExternalUserShopCustomerCommand) GetArgs(ctx context.Context) (_ context.Context, shopID dot.ID, externalID string, customerID dot.ID) {
	return ctx,
		q.ShopID,
		q.ExternalID,
		q.CustomerID
}

func (q *CreateFbExternalUsersCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFbExternalUsersArgs) {
	return ctx,
		&CreateFbExternalUsersArgs{
			FbExternalUsers: q.FbExternalUsers,
		}
}

func (q *CreateFbExternalUsersCommand) SetCreateFbExternalUsersArgs(args *CreateFbExternalUsersArgs) {
	q.FbExternalUsers = args.FbExternalUsers
}

func (q *DeleteFbExternalUserShopCustomerCommand) GetArgs(ctx context.Context) (_ context.Context, _ *DeleteFbExternalUserShopCustomerArgs) {
	return ctx,
		&DeleteFbExternalUserShopCustomerArgs{
			ShopID:     q.ShopID,
			ExternalID: q.ExternalID,
			CustomerID: q.CustomerID,
		}
}

func (q *DeleteFbExternalUserShopCustomerCommand) SetDeleteFbExternalUserShopCustomerArgs(args *DeleteFbExternalUserShopCustomerArgs) {
	q.ShopID = args.ShopID
	q.ExternalID = args.ExternalID
	q.CustomerID = args.CustomerID
}

func (q *GetFbExternalUserByExternalIDQuery) GetArgs(ctx context.Context) (_ context.Context, externalID string) {
	return ctx,
		q.ExternalID
}

func (q *GetFbExternalUserInternalByExternalIDQuery) GetArgs(ctx context.Context) (_ context.Context, externalID string) {
	return ctx,
		q.ExternalID
}

func (q *GetFbExternalUserWithCustomerByExternalIDQuery) GetArgs(ctx context.Context) (_ context.Context, shopID dot.ID, externalID string) {
	return ctx,
		q.ShopID,
		q.ExternalID
}

func (q *ListFbExternalUserWithCustomerQuery) GetArgs(ctx context.Context) (_ context.Context, args ListFbExternalUserWithCustomerRequest) {
	return ctx,
		q.Args
}

func (q *ListFbExternalUserWithCustomerByExternalIDsQuery) GetArgs(ctx context.Context) (_ context.Context, shopID dot.ID, externalIDs []string) {
	return ctx,
		q.ShopID,
		q.ExternalIDs
}

func (q *ListFbExternalUsersQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListFbExternalUsersArgs) {
	return ctx,
		&ListFbExternalUsersArgs{
			CustomerID: q.CustomerID,
			ShopID:     q.ShopID,
		}
}

func (q *ListFbExternalUsersQuery) SetListFbExternalUsersArgs(args *ListFbExternalUsersArgs) {
	q.CustomerID = args.CustomerID
	q.ShopID = args.ShopID
}

func (q *ListFbExternalUsersByExternalIDsQuery) GetArgs(ctx context.Context) (_ context.Context, externalIDs filter.Strings, externalPageID dot.NullString) {
	return ctx,
		q.ExternalIDs,
		q.ExternalPageID
}

func (q *ListShopCustomerWithFbExternalUserQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListCustomerWithFbAvatarsArgs) {
	return ctx,
		&ListCustomerWithFbAvatarsArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListShopCustomerWithFbExternalUserQuery) SetListCustomerWithFbAvatarsArgs(args *ListCustomerWithFbAvatarsArgs) {
	q.ShopID = args.ShopID
	q.Paging = args.Paging
	q.Filters = args.Filters
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateFbExternalUser)
	b.AddHandler(h.HandleCreateFbExternalUserCombined)
	b.AddHandler(h.HandleCreateFbExternalUserInternal)
	b.AddHandler(h.HandleCreateFbExternalUserShopCustomer)
	b.AddHandler(h.HandleCreateFbExternalUsers)
	b.AddHandler(h.HandleDeleteFbExternalUserShopCustomer)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetFbExternalUserByExternalID)
	b.AddHandler(h.HandleGetFbExternalUserInternalByExternalID)
	b.AddHandler(h.HandleGetFbExternalUserWithCustomerByExternalID)
	b.AddHandler(h.HandleListFbExternalUserWithCustomer)
	b.AddHandler(h.HandleListFbExternalUserWithCustomerByExternalIDs)
	b.AddHandler(h.HandleListFbExternalUsers)
	b.AddHandler(h.HandleListFbExternalUsersByExternalIDs)
	b.AddHandler(h.HandleListShopCustomerWithFbExternalUser)
	return QueryBus{b}
}
