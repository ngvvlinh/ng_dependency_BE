// +build !generator

// Code generated by generator api. DO NOT EDIT.

package fbusering

import (
	context "context"

	status3 "o.o/api/top/types/etc/status3"
	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateFbExternalUserCommand struct {
	ID           dot.ID
	UserID       dot.ID
	ExternalID   string
	ExternalInfo *FbExternalUserInfo
	Token        string
	Status       status3.Status

	Result *FbExternalUser `json:"-"`
}

func (h AggregateHandler) HandleCreateFbExternalUser(ctx context.Context, msg *CreateFbExternalUserCommand) (err error) {
	msg.Result, err = h.inner.CreateFbExternalUser(msg.GetArgs(ctx))
	return err
}

type CreateFbExternalUserCombinedCommand struct {
	UserID         dot.ID
	ShopID         dot.ID
	FbUser         *CreateFbExternalUserArgs
	FbUserInternal *CreateFbExternalUserInternalArgs

	Result *FbExternalUserCombined `json:"-"`
}

func (h AggregateHandler) HandleCreateFbExternalUserCombined(ctx context.Context, msg *CreateFbExternalUserCombinedCommand) (err error) {
	msg.Result, err = h.inner.CreateFbExternalUserCombined(msg.GetArgs(ctx))
	return err
}

type CreateFbExternalUserInternalCommand struct {
	ID        dot.ID
	Token     string
	ExpiresIn int

	Result *FbExternalUserInternal `json:"-"`
}

func (h AggregateHandler) HandleCreateFbExternalUserInternal(ctx context.Context, msg *CreateFbExternalUserInternalCommand) (err error) {
	msg.Result, err = h.inner.CreateFbExternalUserInternal(msg.GetArgs(ctx))
	return err
}

type GetFbExternalUserByExternalIDQuery struct {
	ExternalID string

	Result *FbExternalUser `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbExternalUserByExternalID(ctx context.Context, msg *GetFbExternalUserByExternalIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbExternalUserByExternalID(msg.GetArgs(ctx))
	return err
}

type GetFbExternalUserByIDQuery struct {
	ID dot.ID

	Result *FbExternalUser `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbExternalUserByID(ctx context.Context, msg *GetFbExternalUserByIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbExternalUserByID(msg.GetArgs(ctx))
	return err
}

type GetFbExternalUserByUserIDQuery struct {
	UserID dot.ID

	Result *FbExternalUser `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbExternalUserByUserID(ctx context.Context, msg *GetFbExternalUserByUserIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbExternalUserByUserID(msg.GetArgs(ctx))
	return err
}

type GetFbExternalUserInternalByIDQuery struct {
	ID dot.ID

	Result *FbExternalUserInternal `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbExternalUserInternalByID(ctx context.Context, msg *GetFbExternalUserInternalByIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbExternalUserInternalByID(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateFbExternalUserCommand) command()         {}
func (q *CreateFbExternalUserCombinedCommand) command() {}
func (q *CreateFbExternalUserInternalCommand) command() {}

func (q *GetFbExternalUserByExternalIDQuery) query() {}
func (q *GetFbExternalUserByIDQuery) query()         {}
func (q *GetFbExternalUserByUserIDQuery) query()     {}
func (q *GetFbExternalUserInternalByIDQuery) query() {}

// implement conversion

func (q *CreateFbExternalUserCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFbExternalUserArgs) {
	return ctx,
		&CreateFbExternalUserArgs{
			ID:           q.ID,
			UserID:       q.UserID,
			ExternalID:   q.ExternalID,
			ExternalInfo: q.ExternalInfo,
			Token:        q.Token,
			Status:       q.Status,
		}
}

func (q *CreateFbExternalUserCommand) SetCreateFbExternalUserArgs(args *CreateFbExternalUserArgs) {
	q.ID = args.ID
	q.UserID = args.UserID
	q.ExternalID = args.ExternalID
	q.ExternalInfo = args.ExternalInfo
	q.Token = args.Token
	q.Status = args.Status
}

func (q *CreateFbExternalUserCombinedCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFbExternalUserCombinedArgs) {
	return ctx,
		&CreateFbExternalUserCombinedArgs{
			UserID:         q.UserID,
			ShopID:         q.ShopID,
			FbUser:         q.FbUser,
			FbUserInternal: q.FbUserInternal,
		}
}

func (q *CreateFbExternalUserCombinedCommand) SetCreateFbExternalUserCombinedArgs(args *CreateFbExternalUserCombinedArgs) {
	q.UserID = args.UserID
	q.ShopID = args.ShopID
	q.FbUser = args.FbUser
	q.FbUserInternal = args.FbUserInternal
}

func (q *CreateFbExternalUserInternalCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFbExternalUserInternalArgs) {
	return ctx,
		&CreateFbExternalUserInternalArgs{
			ID:        q.ID,
			Token:     q.Token,
			ExpiresIn: q.ExpiresIn,
		}
}

func (q *CreateFbExternalUserInternalCommand) SetCreateFbExternalUserInternalArgs(args *CreateFbExternalUserInternalArgs) {
	q.ID = args.ID
	q.Token = args.Token
	q.ExpiresIn = args.ExpiresIn
}

func (q *GetFbExternalUserByExternalIDQuery) GetArgs(ctx context.Context) (_ context.Context, externalID string) {
	return ctx,
		q.ExternalID
}

func (q *GetFbExternalUserByIDQuery) GetArgs(ctx context.Context) (_ context.Context, ID dot.ID) {
	return ctx,
		q.ID
}

func (q *GetFbExternalUserByUserIDQuery) GetArgs(ctx context.Context) (_ context.Context, userID dot.ID) {
	return ctx,
		q.UserID
}

func (q *GetFbExternalUserInternalByIDQuery) GetArgs(ctx context.Context) (_ context.Context, ID dot.ID) {
	return ctx,
		q.ID
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateFbExternalUser)
	b.AddHandler(h.HandleCreateFbExternalUserCombined)
	b.AddHandler(h.HandleCreateFbExternalUserInternal)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetFbExternalUserByExternalID)
	b.AddHandler(h.HandleGetFbExternalUserByID)
	b.AddHandler(h.HandleGetFbExternalUserByUserID)
	b.AddHandler(h.HandleGetFbExternalUserInternalByID)
	return QueryBus{b}
}
