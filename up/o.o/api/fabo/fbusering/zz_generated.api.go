// +build !generator

// Code generated by generator api. DO NOT EDIT.

package fbusering

import (
	context "context"

	status3 "o.o/api/top/types/etc/status3"
	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateFbUserCommand struct {
	ID           dot.ID
	ExternalID   string
	UserID       dot.ID
	ExternalInfo *ExternalFBUserInfo
	Token        string
	Status       status3.Status

	Result *FbUser `json:"-"`
}

func (h AggregateHandler) HandleCreateFbUser(ctx context.Context, msg *CreateFbUserCommand) (err error) {
	msg.Result, err = h.inner.CreateFbUser(msg.GetArgs(ctx))
	return err
}

type CreateFbUserCombinedCommand struct {
	UserID         dot.ID
	ShopID         dot.ID
	FbUser         *CreateFbUserArgs
	FbUserInternal *CreateFbUserInternalArgs

	Result *FbUserCombined `json:"-"`
}

func (h AggregateHandler) HandleCreateFbUserCombined(ctx context.Context, msg *CreateFbUserCombinedCommand) (err error) {
	msg.Result, err = h.inner.CreateFbUserCombined(msg.GetArgs(ctx))
	return err
}

type CreateFbUserInternalCommand struct {
	ID        dot.ID
	Token     string
	ExpiresIn int

	Result *FbUserInternal `json:"-"`
}

func (h AggregateHandler) HandleCreateFbUserInternal(ctx context.Context, msg *CreateFbUserInternalCommand) (err error) {
	msg.Result, err = h.inner.CreateFbUserInternal(msg.GetArgs(ctx))
	return err
}

type GetFbUserByExternalIDQuery struct {
	ExternalID string

	Result *FbUser `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbUserByExternalID(ctx context.Context, msg *GetFbUserByExternalIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbUserByExternalID(msg.GetArgs(ctx))
	return err
}

type GetFbUserByIDQuery struct {
	ID dot.ID

	Result *FbUser `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbUserByID(ctx context.Context, msg *GetFbUserByIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbUserByID(msg.GetArgs(ctx))
	return err
}

type GetFbUserByUserIDQuery struct {
	UserID dot.ID

	Result *FbUser `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbUserByUserID(ctx context.Context, msg *GetFbUserByUserIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbUserByUserID(msg.GetArgs(ctx))
	return err
}

type GetFbUserInternalByIDQuery struct {
	ID dot.ID

	Result *FbUserInternal `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbUserInternalByID(ctx context.Context, msg *GetFbUserInternalByIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbUserInternalByID(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateFbUserCommand) command()         {}
func (q *CreateFbUserCombinedCommand) command() {}
func (q *CreateFbUserInternalCommand) command() {}

func (q *GetFbUserByExternalIDQuery) query() {}
func (q *GetFbUserByIDQuery) query()         {}
func (q *GetFbUserByUserIDQuery) query()     {}
func (q *GetFbUserInternalByIDQuery) query() {}

// implement conversion

func (q *CreateFbUserCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFbUserArgs) {
	return ctx,
		&CreateFbUserArgs{
			ID:           q.ID,
			ExternalID:   q.ExternalID,
			UserID:       q.UserID,
			ExternalInfo: q.ExternalInfo,
			Token:        q.Token,
			Status:       q.Status,
		}
}

func (q *CreateFbUserCommand) SetCreateFbUserArgs(args *CreateFbUserArgs) {
	q.ID = args.ID
	q.ExternalID = args.ExternalID
	q.UserID = args.UserID
	q.ExternalInfo = args.ExternalInfo
	q.Token = args.Token
	q.Status = args.Status
}

func (q *CreateFbUserCombinedCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFbUserCombinedArgs) {
	return ctx,
		&CreateFbUserCombinedArgs{
			UserID:         q.UserID,
			ShopID:         q.ShopID,
			FbUser:         q.FbUser,
			FbUserInternal: q.FbUserInternal,
		}
}

func (q *CreateFbUserCombinedCommand) SetCreateFbUserCombinedArgs(args *CreateFbUserCombinedArgs) {
	q.UserID = args.UserID
	q.ShopID = args.ShopID
	q.FbUser = args.FbUser
	q.FbUserInternal = args.FbUserInternal
}

func (q *CreateFbUserInternalCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFbUserInternalArgs) {
	return ctx,
		&CreateFbUserInternalArgs{
			ID:        q.ID,
			Token:     q.Token,
			ExpiresIn: q.ExpiresIn,
		}
}

func (q *CreateFbUserInternalCommand) SetCreateFbUserInternalArgs(args *CreateFbUserInternalArgs) {
	q.ID = args.ID
	q.Token = args.Token
	q.ExpiresIn = args.ExpiresIn
}

func (q *GetFbUserByExternalIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetFbUserByExternalIDArgs) {
	return ctx,
		&GetFbUserByExternalIDArgs{
			ExternalID: q.ExternalID,
		}
}

func (q *GetFbUserByExternalIDQuery) SetGetFbUserByExternalIDArgs(args *GetFbUserByExternalIDArgs) {
	q.ExternalID = args.ExternalID
}

func (q *GetFbUserByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetFbUserByIDArgs) {
	return ctx,
		&GetFbUserByIDArgs{
			ID: q.ID,
		}
}

func (q *GetFbUserByIDQuery) SetGetFbUserByIDArgs(args *GetFbUserByIDArgs) {
	q.ID = args.ID
}

func (q *GetFbUserByUserIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetFbUserByUserIDArgs) {
	return ctx,
		&GetFbUserByUserIDArgs{
			UserID: q.UserID,
		}
}

func (q *GetFbUserByUserIDQuery) SetGetFbUserByUserIDArgs(args *GetFbUserByUserIDArgs) {
	q.UserID = args.UserID
}

func (q *GetFbUserInternalByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetFbUserInternalByIDArgs) {
	return ctx,
		&GetFbUserInternalByIDArgs{
			ID: q.ID,
		}
}

func (q *GetFbUserInternalByIDQuery) SetGetFbUserInternalByIDArgs(args *GetFbUserInternalByIDArgs) {
	q.ID = args.ID
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateFbUser)
	b.AddHandler(h.HandleCreateFbUserCombined)
	b.AddHandler(h.HandleCreateFbUserInternal)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetFbUserByExternalID)
	b.AddHandler(h.HandleGetFbUserByID)
	b.AddHandler(h.HandleGetFbUserByUserID)
	b.AddHandler(h.HandleGetFbUserInternalByID)
	return QueryBus{b}
}
