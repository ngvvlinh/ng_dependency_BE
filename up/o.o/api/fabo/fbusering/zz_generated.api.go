// +build !generator

// Code generated by generator api. DO NOT EDIT.

package fbusering

import (
	context "context"

	meta "o.o/api/meta"
	capi "o.o/capi"
	dot "o.o/capi/dot"
	filter "o.o/capi/filter"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateFbExternalUserShopCustomerCommand struct {
	ShopID     dot.ID
	ExternalID string
	CustomerID dot.ID

	Result *FbExternalUserWithCustomer `json:"-"`
}

func (h AggregateHandler) HandleCreateFbExternalUserShopCustomer(ctx context.Context, msg *CreateFbExternalUserShopCustomerCommand) (err error) {
	msg.Result, err = h.inner.CreateFbExternalUserShopCustomer(msg.GetArgs(ctx))
	return err
}

type CreateFbExternalUsersCommand struct {
	FbExternalUsers []*CreateFbExternalUserArgs

	Result []*FbExternalUser `json:"-"`
}

func (h AggregateHandler) HandleCreateFbExternalUsers(ctx context.Context, msg *CreateFbExternalUsersCommand) (err error) {
	msg.Result, err = h.inner.CreateFbExternalUsers(msg.GetArgs(ctx))
	return err
}

type CreateOrUpdateFbExternalUserCombinedCommand struct {
	FbUserConnected *CreateOrUpdateFbExternalUserConnectedArgs
	FbUserInternal  *CreateOrUpdateFbExternalUserInternalArgs

	Result *FbExternalUserCombined `json:"-"`
}

func (h AggregateHandler) HandleCreateOrUpdateFbExternalUserCombined(ctx context.Context, msg *CreateOrUpdateFbExternalUserCombinedCommand) (err error) {
	msg.Result, err = h.inner.CreateOrUpdateFbExternalUserCombined(msg.GetArgs(ctx))
	return err
}

type CreateShopUserTagCommand struct {
	Name   string
	Color  string
	ShopID dot.ID

	Result *FbShopUserTag `json:"-"`
}

func (h AggregateHandler) HandleCreateShopUserTag(ctx context.Context, msg *CreateShopUserTagCommand) (err error) {
	msg.Result, err = h.inner.CreateShopUserTag(msg.GetArgs(ctx))
	return err
}

type DeleteFbExternalUserShopCustomerCommand struct {
	ShopID     dot.ID
	ExternalID dot.NullString
	CustomerID dot.NullID

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleDeleteFbExternalUserShopCustomer(ctx context.Context, msg *DeleteFbExternalUserShopCustomerCommand) (err error) {
	return h.inner.DeleteFbExternalUserShopCustomer(msg.GetArgs(ctx))
}

type DeleteShopUserTagCommand struct {
	ID     dot.ID
	ShopID dot.ID

	Result int `json:"-"`
}

func (h AggregateHandler) HandleDeleteShopUserTag(ctx context.Context, msg *DeleteShopUserTagCommand) (err error) {
	msg.Result, err = h.inner.DeleteShopUserTag(msg.GetArgs(ctx))
	return err
}

type UpdateShopUserTagCommand struct {
	Name  string
	Color string
	ID    dot.ID

	Result *FbShopUserTag `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopUserTag(ctx context.Context, msg *UpdateShopUserTagCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopUserTag(msg.GetArgs(ctx))
	return err
}

type UpdateShopUserTagsCommand struct {
	ShopID           dot.ID
	TagIDs           []dot.ID
	FbExternalUserID dot.ID

	Result *FbExternalUser `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopUserTags(ctx context.Context, msg *UpdateShopUserTagsCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopUserTags(msg.GetArgs(ctx))
	return err
}

type GetFbExternalUserByExternalIDQuery struct {
	ExternalID string

	Result *FbExternalUser `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbExternalUserByExternalID(ctx context.Context, msg *GetFbExternalUserByExternalIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbExternalUserByExternalID(msg.GetArgs(ctx))
	return err
}

type GetFbExternalUserConnectedByShopIDQuery struct {
	ShopID dot.ID

	Result *FbExternalUserConnected `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbExternalUserConnectedByShopID(ctx context.Context, msg *GetFbExternalUserConnectedByShopIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbExternalUserConnectedByShopID(msg.GetArgs(ctx))
	return err
}

type GetFbExternalUserInternalByExternalIDQuery struct {
	ExternalID string

	Result *FbExternalUserInternal `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbExternalUserInternalByExternalID(ctx context.Context, msg *GetFbExternalUserInternalByExternalIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbExternalUserInternalByExternalID(msg.GetArgs(ctx))
	return err
}

type GetFbExternalUserWithCustomerByExternalIDQuery struct {
	ShopID     dot.ID
	ExternalID string

	Result *FbExternalUserWithCustomer `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbExternalUserWithCustomerByExternalID(ctx context.Context, msg *GetFbExternalUserWithCustomerByExternalIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbExternalUserWithCustomerByExternalID(msg.GetArgs(ctx))
	return err
}

type GetShopUserTagQuery struct {
	ID     dot.ID
	ShopID dot.ID

	Result *FbShopUserTag `json:"-"`
}

func (h QueryServiceHandler) HandleGetShopUserTag(ctx context.Context, msg *GetShopUserTagQuery) (err error) {
	msg.Result, err = h.inner.GetShopUserTag(msg.GetArgs(ctx))
	return err
}

type ListFbExtUserShopCustomersByShopCustomerIDsQuery struct {
	CustomerIDs []dot.ID

	Result []*FbExternalUserShopCustomer `json:"-"`
}

func (h QueryServiceHandler) HandleListFbExtUserShopCustomersByShopCustomerIDs(ctx context.Context, msg *ListFbExtUserShopCustomersByShopCustomerIDsQuery) (err error) {
	msg.Result, err = h.inner.ListFbExtUserShopCustomersByShopCustomerIDs(msg.GetArgs(ctx))
	return err
}

type ListFbExternalUserByIDsQuery struct {
	ExtFbUserIDs []string

	Result []*FbExternalUser `json:"-"`
}

func (h QueryServiceHandler) HandleListFbExternalUserByIDs(ctx context.Context, msg *ListFbExternalUserByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListFbExternalUserByIDs(msg.GetArgs(ctx))
	return err
}

type ListFbExternalUserIDsByShopCustomerIDsQuery struct {
	CustomerIDs []dot.ID

	Result []string `json:"-"`
}

func (h QueryServiceHandler) HandleListFbExternalUserIDsByShopCustomerIDs(ctx context.Context, msg *ListFbExternalUserIDsByShopCustomerIDsQuery) (err error) {
	msg.Result, err = h.inner.ListFbExternalUserIDsByShopCustomerIDs(msg.GetArgs(ctx))
	return err
}

type ListFbExternalUserWithCustomerQuery struct {
	Args ListFbExternalUserWithCustomerRequest

	Result []*FbExternalUserWithCustomer `json:"-"`
}

func (h QueryServiceHandler) HandleListFbExternalUserWithCustomer(ctx context.Context, msg *ListFbExternalUserWithCustomerQuery) (err error) {
	msg.Result, err = h.inner.ListFbExternalUserWithCustomer(msg.GetArgs(ctx))
	return err
}

type ListFbExternalUserWithCustomerByExternalIDsQuery struct {
	ShopID      dot.ID
	ExternalIDs []string

	Result []*FbExternalUserWithCustomer `json:"-"`
}

func (h QueryServiceHandler) HandleListFbExternalUserWithCustomerByExternalIDs(ctx context.Context, msg *ListFbExternalUserWithCustomerByExternalIDsQuery) (err error) {
	msg.Result, err = h.inner.ListFbExternalUserWithCustomerByExternalIDs(msg.GetArgs(ctx))
	return err
}

type ListFbExternalUsersQuery struct {
	CustomerID dot.NullID
	ShopID     dot.ID

	Result []*FbExternalUserWithCustomer `json:"-"`
}

func (h QueryServiceHandler) HandleListFbExternalUsers(ctx context.Context, msg *ListFbExternalUsersQuery) (err error) {
	msg.Result, err = h.inner.ListFbExternalUsers(msg.GetArgs(ctx))
	return err
}

type ListFbExternalUsersByExternalIDsQuery struct {
	ExternalIDs    filter.Strings
	ExternalPageID dot.NullString

	Result []*FbExternalUser `json:"-"`
}

func (h QueryServiceHandler) HandleListFbExternalUsersByExternalIDs(ctx context.Context, msg *ListFbExternalUsersByExternalIDsQuery) (err error) {
	msg.Result, err = h.inner.ListFbExternalUsersByExternalIDs(msg.GetArgs(ctx))
	return err
}

type ListShopCustomerIDWithPhoneNormQuery struct {
	ShopID dot.ID
	Phone  string

	Result []dot.ID `json:"-"`
}

func (h QueryServiceHandler) HandleListShopCustomerIDWithPhoneNorm(ctx context.Context, msg *ListShopCustomerIDWithPhoneNormQuery) (err error) {
	msg.Result, err = h.inner.ListShopCustomerIDWithPhoneNorm(msg.GetArgs(ctx))
	return err
}

type ListShopCustomerWithFbExternalUserQuery struct {
	ShopID  dot.ID
	Paging  meta.Paging
	Filters meta.Filters

	Result *ListShopCustomerWithFbExternalUserResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopCustomerWithFbExternalUser(ctx context.Context, msg *ListShopCustomerWithFbExternalUserQuery) (err error) {
	msg.Result, err = h.inner.ListShopCustomerWithFbExternalUser(msg.GetArgs(ctx))
	return err
}

type ListShopUserTagsQuery struct {
	ShopID dot.ID

	Result []*FbShopUserTag `json:"-"`
}

func (h QueryServiceHandler) HandleListShopUserTags(ctx context.Context, msg *ListShopUserTagsQuery) (err error) {
	msg.Result, err = h.inner.ListShopUserTags(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateFbExternalUserShopCustomerCommand) command()     {}
func (q *CreateFbExternalUsersCommand) command()                {}
func (q *CreateOrUpdateFbExternalUserCombinedCommand) command() {}
func (q *CreateShopUserTagCommand) command()                    {}
func (q *DeleteFbExternalUserShopCustomerCommand) command()     {}
func (q *DeleteShopUserTagCommand) command()                    {}
func (q *UpdateShopUserTagCommand) command()                    {}
func (q *UpdateShopUserTagsCommand) command()                   {}

func (q *GetFbExternalUserByExternalIDQuery) query()               {}
func (q *GetFbExternalUserConnectedByShopIDQuery) query()          {}
func (q *GetFbExternalUserInternalByExternalIDQuery) query()       {}
func (q *GetFbExternalUserWithCustomerByExternalIDQuery) query()   {}
func (q *GetShopUserTagQuery) query()                              {}
func (q *ListFbExtUserShopCustomersByShopCustomerIDsQuery) query() {}
func (q *ListFbExternalUserByIDsQuery) query()                     {}
func (q *ListFbExternalUserIDsByShopCustomerIDsQuery) query()      {}
func (q *ListFbExternalUserWithCustomerQuery) query()              {}
func (q *ListFbExternalUserWithCustomerByExternalIDsQuery) query() {}
func (q *ListFbExternalUsersQuery) query()                         {}
func (q *ListFbExternalUsersByExternalIDsQuery) query()            {}
func (q *ListShopCustomerIDWithPhoneNormQuery) query()             {}
func (q *ListShopCustomerWithFbExternalUserQuery) query()          {}
func (q *ListShopUserTagsQuery) query()                            {}

// implement conversion

func (q *CreateFbExternalUserShopCustomerCommand) GetArgs(ctx context.Context) (_ context.Context, shopID dot.ID, externalID string, customerID dot.ID) {
	return ctx,
		q.ShopID,
		q.ExternalID,
		q.CustomerID
}

func (q *CreateFbExternalUsersCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFbExternalUsersArgs) {
	return ctx,
		&CreateFbExternalUsersArgs{
			FbExternalUsers: q.FbExternalUsers,
		}
}

func (q *CreateFbExternalUsersCommand) SetCreateFbExternalUsersArgs(args *CreateFbExternalUsersArgs) {
	q.FbExternalUsers = args.FbExternalUsers
}

func (q *CreateOrUpdateFbExternalUserCombinedCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateOrUpdateFbExternalUserCombinedArgs) {
	return ctx,
		&CreateOrUpdateFbExternalUserCombinedArgs{
			FbUserConnected: q.FbUserConnected,
			FbUserInternal:  q.FbUserInternal,
		}
}

func (q *CreateOrUpdateFbExternalUserCombinedCommand) SetCreateOrUpdateFbExternalUserCombinedArgs(args *CreateOrUpdateFbExternalUserCombinedArgs) {
	q.FbUserConnected = args.FbUserConnected
	q.FbUserInternal = args.FbUserInternal
}

func (q *CreateShopUserTagCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateShopUserTagArgs) {
	return ctx,
		&CreateShopUserTagArgs{
			Name:   q.Name,
			Color:  q.Color,
			ShopID: q.ShopID,
		}
}

func (q *CreateShopUserTagCommand) SetCreateShopUserTagArgs(args *CreateShopUserTagArgs) {
	q.Name = args.Name
	q.Color = args.Color
	q.ShopID = args.ShopID
}

func (q *DeleteFbExternalUserShopCustomerCommand) GetArgs(ctx context.Context) (_ context.Context, _ *DeleteFbExternalUserShopCustomerArgs) {
	return ctx,
		&DeleteFbExternalUserShopCustomerArgs{
			ShopID:     q.ShopID,
			ExternalID: q.ExternalID,
			CustomerID: q.CustomerID,
		}
}

func (q *DeleteFbExternalUserShopCustomerCommand) SetDeleteFbExternalUserShopCustomerArgs(args *DeleteFbExternalUserShopCustomerArgs) {
	q.ShopID = args.ShopID
	q.ExternalID = args.ExternalID
	q.CustomerID = args.CustomerID
}

func (q *DeleteShopUserTagCommand) GetArgs(ctx context.Context) (_ context.Context, _ *DeleteShopUserTagArgs) {
	return ctx,
		&DeleteShopUserTagArgs{
			ID:     q.ID,
			ShopID: q.ShopID,
		}
}

func (q *DeleteShopUserTagCommand) SetDeleteShopUserTagArgs(args *DeleteShopUserTagArgs) {
	q.ID = args.ID
	q.ShopID = args.ShopID
}

func (q *UpdateShopUserTagCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShopUserTagArgs) {
	return ctx,
		&UpdateShopUserTagArgs{
			Name:  q.Name,
			Color: q.Color,
			ID:    q.ID,
		}
}

func (q *UpdateShopUserTagCommand) SetUpdateShopUserTagArgs(args *UpdateShopUserTagArgs) {
	q.Name = args.Name
	q.Color = args.Color
	q.ID = args.ID
}

func (q *UpdateShopUserTagsCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShopUserTagsArgs) {
	return ctx,
		&UpdateShopUserTagsArgs{
			ShopID:           q.ShopID,
			TagIDs:           q.TagIDs,
			FbExternalUserID: q.FbExternalUserID,
		}
}

func (q *UpdateShopUserTagsCommand) SetUpdateShopUserTagsArgs(args *UpdateShopUserTagsArgs) {
	q.ShopID = args.ShopID
	q.TagIDs = args.TagIDs
	q.FbExternalUserID = args.FbExternalUserID
}

func (q *GetFbExternalUserByExternalIDQuery) GetArgs(ctx context.Context) (_ context.Context, externalID string) {
	return ctx,
		q.ExternalID
}

func (q *GetFbExternalUserConnectedByShopIDQuery) GetArgs(ctx context.Context) (_ context.Context, shopID dot.ID) {
	return ctx,
		q.ShopID
}

func (q *GetFbExternalUserInternalByExternalIDQuery) GetArgs(ctx context.Context) (_ context.Context, externalID string) {
	return ctx,
		q.ExternalID
}

func (q *GetFbExternalUserWithCustomerByExternalIDQuery) GetArgs(ctx context.Context) (_ context.Context, shopID dot.ID, externalID string) {
	return ctx,
		q.ShopID,
		q.ExternalID
}

func (q *GetShopUserTagQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShopUserTagArgs) {
	return ctx,
		&GetShopUserTagArgs{
			ID:     q.ID,
			ShopID: q.ShopID,
		}
}

func (q *GetShopUserTagQuery) SetGetShopUserTagArgs(args *GetShopUserTagArgs) {
	q.ID = args.ID
	q.ShopID = args.ShopID
}

func (q *ListFbExtUserShopCustomersByShopCustomerIDsQuery) GetArgs(ctx context.Context) (_ context.Context, customerIDs []dot.ID) {
	return ctx,
		q.CustomerIDs
}

func (q *ListFbExternalUserByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, extFbUserIDs []string) {
	return ctx,
		q.ExtFbUserIDs
}

func (q *ListFbExternalUserIDsByShopCustomerIDsQuery) GetArgs(ctx context.Context) (_ context.Context, customerIDs []dot.ID) {
	return ctx,
		q.CustomerIDs
}

func (q *ListFbExternalUserWithCustomerQuery) GetArgs(ctx context.Context) (_ context.Context, args ListFbExternalUserWithCustomerRequest) {
	return ctx,
		q.Args
}

func (q *ListFbExternalUserWithCustomerByExternalIDsQuery) GetArgs(ctx context.Context) (_ context.Context, shopID dot.ID, externalIDs []string) {
	return ctx,
		q.ShopID,
		q.ExternalIDs
}

func (q *ListFbExternalUsersQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListFbExternalUsersArgs) {
	return ctx,
		&ListFbExternalUsersArgs{
			CustomerID: q.CustomerID,
			ShopID:     q.ShopID,
		}
}

func (q *ListFbExternalUsersQuery) SetListFbExternalUsersArgs(args *ListFbExternalUsersArgs) {
	q.CustomerID = args.CustomerID
	q.ShopID = args.ShopID
}

func (q *ListFbExternalUsersByExternalIDsQuery) GetArgs(ctx context.Context) (_ context.Context, externalIDs filter.Strings, externalPageID dot.NullString) {
	return ctx,
		q.ExternalIDs,
		q.ExternalPageID
}

func (q *ListShopCustomerIDWithPhoneNormQuery) GetArgs(ctx context.Context) (_ context.Context, shopID dot.ID, phone string) {
	return ctx,
		q.ShopID,
		q.Phone
}

func (q *ListShopCustomerWithFbExternalUserQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListCustomerWithFbAvatarsArgs) {
	return ctx,
		&ListCustomerWithFbAvatarsArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListShopCustomerWithFbExternalUserQuery) SetListCustomerWithFbAvatarsArgs(args *ListCustomerWithFbAvatarsArgs) {
	q.ShopID = args.ShopID
	q.Paging = args.Paging
	q.Filters = args.Filters
}

func (q *ListShopUserTagsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListShopUserTagsArgs) {
	return ctx,
		&ListShopUserTagsArgs{
			ShopID: q.ShopID,
		}
}

func (q *ListShopUserTagsQuery) SetListShopUserTagsArgs(args *ListShopUserTagsArgs) {
	q.ShopID = args.ShopID
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateFbExternalUserShopCustomer)
	b.AddHandler(h.HandleCreateFbExternalUsers)
	b.AddHandler(h.HandleCreateOrUpdateFbExternalUserCombined)
	b.AddHandler(h.HandleCreateShopUserTag)
	b.AddHandler(h.HandleDeleteFbExternalUserShopCustomer)
	b.AddHandler(h.HandleDeleteShopUserTag)
	b.AddHandler(h.HandleUpdateShopUserTag)
	b.AddHandler(h.HandleUpdateShopUserTags)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetFbExternalUserByExternalID)
	b.AddHandler(h.HandleGetFbExternalUserConnectedByShopID)
	b.AddHandler(h.HandleGetFbExternalUserInternalByExternalID)
	b.AddHandler(h.HandleGetFbExternalUserWithCustomerByExternalID)
	b.AddHandler(h.HandleGetShopUserTag)
	b.AddHandler(h.HandleListFbExtUserShopCustomersByShopCustomerIDs)
	b.AddHandler(h.HandleListFbExternalUserByIDs)
	b.AddHandler(h.HandleListFbExternalUserIDsByShopCustomerIDs)
	b.AddHandler(h.HandleListFbExternalUserWithCustomer)
	b.AddHandler(h.HandleListFbExternalUserWithCustomerByExternalIDs)
	b.AddHandler(h.HandleListFbExternalUsers)
	b.AddHandler(h.HandleListFbExternalUsersByExternalIDs)
	b.AddHandler(h.HandleListShopCustomerIDWithPhoneNorm)
	b.AddHandler(h.HandleListShopCustomerWithFbExternalUser)
	b.AddHandler(h.HandleListShopUserTags)
	return QueryBus{b}
}
