// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package fb_comment_source

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumFbCommentSourceName = map[int]string{
	0:   "unknown",
	427: "web",
	135: "app",
}

var enumFbCommentSourceValue = map[string]int{
	"unknown": 0,
	"web":     427,
	"app":     135,
}

func ParseFbCommentSource(s string) (FbCommentSource, bool) {
	val, ok := enumFbCommentSourceValue[s]
	return FbCommentSource(val), ok
}

func ParseFbCommentSourceWithDefault(s string, d FbCommentSource) FbCommentSource {
	val, ok := enumFbCommentSourceValue[s]
	if !ok {
		return d
	}
	return FbCommentSource(val)
}

func (e FbCommentSource) Apply(d FbCommentSource) FbCommentSource {
	if e == 0 {
		return d
	}
	return e
}

func (e FbCommentSource) Enum() int {
	return int(e)
}

func (e FbCommentSource) Name() string {
	return enumFbCommentSourceName[e.Enum()]
}

func (e FbCommentSource) String() string {
	s, ok := enumFbCommentSourceName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("FbCommentSource(%v)", e.Enum())
}

func (e FbCommentSource) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumFbCommentSourceName[e.Enum()] + "\""), nil
}

func (e *FbCommentSource) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumFbCommentSourceValue, data, "FbCommentSource")
	if err != nil {
		return err
	}
	*e = FbCommentSource(value)
	return nil
}

func (e FbCommentSource) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return int64(e), nil
}

func (e *FbCommentSource) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumFbCommentSourceValue, src, "FbCommentSource")
	*e = (FbCommentSource)(value)
	return err
}

func (e FbCommentSource) Wrap() NullFbCommentSource {
	return WrapFbCommentSource(e)
}

func ParseFbCommentSourceWithNull(s dot.NullString, d FbCommentSource) NullFbCommentSource {
	if !s.Valid {
		return NullFbCommentSource{}
	}
	val, ok := enumFbCommentSourceValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return FbCommentSource(val).Wrap()
}

func WrapFbCommentSource(enum FbCommentSource) NullFbCommentSource {
	return NullFbCommentSource{Enum: enum, Valid: true}
}

func (n NullFbCommentSource) Apply(s FbCommentSource) FbCommentSource {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullFbCommentSource) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullFbCommentSource) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullFbCommentSource) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullFbCommentSource) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
