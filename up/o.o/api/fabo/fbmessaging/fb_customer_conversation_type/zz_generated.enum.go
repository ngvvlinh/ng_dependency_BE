// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package fb_customer_conversation_type

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumFbCustomerConversationTypeName = map[int]string{
	0:   "unknown",
	872: "message",
	90:  "comment",
	176: "live_video",
	585: "all",
}

var enumFbCustomerConversationTypeValue = map[string]int{
	"unknown":    0,
	"message":    872,
	"comment":    90,
	"live_video": 176,
	"all":        585,
}

func ParseFbCustomerConversationType(s string) (FbCustomerConversationType, bool) {
	val, ok := enumFbCustomerConversationTypeValue[s]
	return FbCustomerConversationType(val), ok
}

func ParseFbCustomerConversationTypeWithDefault(s string, d FbCustomerConversationType) FbCustomerConversationType {
	val, ok := enumFbCustomerConversationTypeValue[s]
	if !ok {
		return d
	}
	return FbCustomerConversationType(val)
}

func (e FbCustomerConversationType) Apply(d FbCustomerConversationType) FbCustomerConversationType {
	if e == 0 {
		return d
	}
	return e
}

func (e FbCustomerConversationType) Enum() int {
	return int(e)
}

func (e FbCustomerConversationType) Name() string {
	return enumFbCustomerConversationTypeName[e.Enum()]
}

func (e FbCustomerConversationType) String() string {
	s, ok := enumFbCustomerConversationTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("FbCustomerConversationType(%v)", e.Enum())
}

func (e FbCustomerConversationType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumFbCustomerConversationTypeName[e.Enum()] + "\""), nil
}

func (e *FbCustomerConversationType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumFbCustomerConversationTypeValue, data, "FbCustomerConversationType")
	if err != nil {
		return err
	}
	*e = FbCustomerConversationType(value)
	return nil
}

func (e FbCustomerConversationType) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return int64(e), nil
}

func (e *FbCustomerConversationType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumFbCustomerConversationTypeValue, src, "FbCustomerConversationType")
	*e = (FbCustomerConversationType)(value)
	return err
}

func (e FbCustomerConversationType) Wrap() NullFbCustomerConversationType {
	return WrapFbCustomerConversationType(e)
}

func ParseFbCustomerConversationTypeWithNull(s dot.NullString, d FbCustomerConversationType) NullFbCustomerConversationType {
	if !s.Valid {
		return NullFbCustomerConversationType{}
	}
	val, ok := enumFbCustomerConversationTypeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return FbCustomerConversationType(val).Wrap()
}

func WrapFbCustomerConversationType(enum FbCustomerConversationType) NullFbCustomerConversationType {
	return NullFbCustomerConversationType{Enum: enum, Valid: true}
}

func (n NullFbCustomerConversationType) Apply(s FbCustomerConversationType) FbCustomerConversationType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullFbCustomerConversationType) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullFbCustomerConversationType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullFbCustomerConversationType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullFbCustomerConversationType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
