// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package fb_comment_action

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumFbCommentActionName = map[int]string{
	0:   "unknown",
	123: "like",
	145: "unlike",
	275: "hide",
	842: "unhide",
}

var enumFbCommentActionValue = map[string]int{
	"unknown": 0,
	"like":    123,
	"unlike":  145,
	"hide":    275,
	"unhide":  842,
}

func ParseFbCommentAction(s string) (FbCommentAction, bool) {
	val, ok := enumFbCommentActionValue[s]
	return FbCommentAction(val), ok
}

func ParseFbCommentActionWithDefault(s string, d FbCommentAction) FbCommentAction {
	val, ok := enumFbCommentActionValue[s]
	if !ok {
		return d
	}
	return FbCommentAction(val)
}

func (e FbCommentAction) Apply(d FbCommentAction) FbCommentAction {
	if e == 0 {
		return d
	}
	return e
}

func (e FbCommentAction) Enum() int {
	return int(e)
}

func (e FbCommentAction) Name() string {
	return enumFbCommentActionName[e.Enum()]
}

func (e FbCommentAction) String() string {
	s, ok := enumFbCommentActionName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("FbCommentAction(%v)", e.Enum())
}

func (e FbCommentAction) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumFbCommentActionName[e.Enum()] + "\""), nil
}

func (e *FbCommentAction) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumFbCommentActionValue, data, "FbCommentAction")
	if err != nil {
		return err
	}
	*e = FbCommentAction(value)
	return nil
}

func (e FbCommentAction) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return int64(e), nil
}

func (e *FbCommentAction) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumFbCommentActionValue, src, "FbCommentAction")
	*e = (FbCommentAction)(value)
	return err
}

func (e FbCommentAction) Wrap() NullFbCommentAction {
	return WrapFbCommentAction(e)
}

func ParseFbCommentActionWithNull(s dot.NullString, d FbCommentAction) NullFbCommentAction {
	if !s.Valid {
		return NullFbCommentAction{}
	}
	val, ok := enumFbCommentActionValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return FbCommentAction(val).Wrap()
}

func WrapFbCommentAction(enum FbCommentAction) NullFbCommentAction {
	return NullFbCommentAction{Enum: enum, Valid: true}
}

func (n NullFbCommentAction) Apply(s FbCommentAction) FbCommentAction {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullFbCommentAction) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullFbCommentAction) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullFbCommentAction) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullFbCommentAction) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
