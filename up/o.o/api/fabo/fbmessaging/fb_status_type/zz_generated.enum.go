// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package fb_status_type

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumFbStatusTypeName = map[int]string{
	0:  "unknown",
	23: "added_photos",
	27: "added_video",
	28: "app_created_story",
	32: "approved_friend",
	37: "created_event",
	41: "created_group",
	45: "created_note",
	52: "mobile_status_update",
	57: "published_story",
	68: "shared_story",
	73: "tagged_in_photo",
	78: "wall_post",
}

var enumFbStatusTypeValue = map[string]int{
	"unknown":              0,
	"added_photos":         23,
	"added_video":          27,
	"app_created_story":    28,
	"approved_friend":      32,
	"created_event":        37,
	"created_group":        41,
	"created_note":         45,
	"mobile_status_update": 52,
	"published_story":      57,
	"shared_story":         68,
	"tagged_in_photo":      73,
	"wall_post":            78,
}

func ParseFbStatusType(s string) (FbStatusType, bool) {
	val, ok := enumFbStatusTypeValue[s]
	return FbStatusType(val), ok
}

func ParseFbStatusTypeWithDefault(s string, d FbStatusType) FbStatusType {
	val, ok := enumFbStatusTypeValue[s]
	if !ok {
		return d
	}
	return FbStatusType(val)
}

func (e FbStatusType) Apply(d FbStatusType) FbStatusType {
	if e == 0 {
		return d
	}
	return e
}

func (e FbStatusType) Enum() int {
	return int(e)
}

func (e FbStatusType) Name() string {
	return enumFbStatusTypeName[e.Enum()]
}

func (e FbStatusType) String() string {
	s, ok := enumFbStatusTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("FbStatusType(%v)", e.Enum())
}

func (e FbStatusType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumFbStatusTypeName[e.Enum()] + "\""), nil
}

func (e *FbStatusType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumFbStatusTypeValue, data, "FbStatusType")
	if err != nil {
		return err
	}
	*e = FbStatusType(value)
	return nil
}

func (e FbStatusType) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return int64(e), nil
}

func (e *FbStatusType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumFbStatusTypeValue, src, "FbStatusType")
	*e = (FbStatusType)(value)
	return err
}

func (e FbStatusType) Wrap() NullFbStatusType {
	return WrapFbStatusType(e)
}

func ParseFbStatusTypeWithNull(s dot.NullString, d FbStatusType) NullFbStatusType {
	if !s.Valid {
		return NullFbStatusType{}
	}
	val, ok := enumFbStatusTypeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return FbStatusType(val).Wrap()
}

func WrapFbStatusType(enum FbStatusType) NullFbStatusType {
	return NullFbStatusType{Enum: enum, Valid: true}
}

func (n NullFbStatusType) Apply(s FbStatusType) FbStatusType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullFbStatusType) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullFbStatusType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullFbStatusType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullFbStatusType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
