// +build !generator

// Code generated by generator api. DO NOT EDIT.

package fbpaging

import (
	context "context"

	meta "o.o/api/meta"
	status3 "o.o/api/top/types/etc/status3"
	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateFbExternalPageCommand struct {
	ID                   dot.ID
	ExternalID           string
	ShopID               dot.ID
	ExternalName         string
	ExternalCategory     string
	ExternalCategoryList []*ExternalCategory
	ExternalTasks        []string
	ExternalPermissions  []string
	ExternalImageURL     string
	Status               status3.Status
	ConnectionStatus     status3.Status

	Result *FbExternalPage `json:"-"`
}

func (h AggregateHandler) HandleCreateFbExternalPage(ctx context.Context, msg *CreateFbExternalPageCommand) (err error) {
	msg.Result, err = h.inner.CreateFbExternalPage(msg.GetArgs(ctx))
	return err
}

type CreateFbExternalPageCombinedsCommand struct {
	FbPageCombineds []*CreateFbExternalPageCombinedArgs

	Result []*FbExternalPageCombined `json:"-"`
}

func (h AggregateHandler) HandleCreateFbExternalPageCombineds(ctx context.Context, msg *CreateFbExternalPageCombinedsCommand) (err error) {
	msg.Result, err = h.inner.CreateFbExternalPageCombineds(msg.GetArgs(ctx))
	return err
}

type CreateFbExternalPageInternalCommand struct {
	ID         dot.ID
	ExternalID string
	Token      string

	Result *FbExternalPageInternal `json:"-"`
}

func (h AggregateHandler) HandleCreateFbExternalPageInternal(ctx context.Context, msg *CreateFbExternalPageInternalCommand) (err error) {
	msg.Result, err = h.inner.CreateFbExternalPageInternal(msg.GetArgs(ctx))
	return err
}

type DisableFbExternalPagesByExternalIDsCommand struct {
	ExternalIDs []string
	ShopID      dot.ID

	Result int `json:"-"`
}

func (h AggregateHandler) HandleDisableFbExternalPagesByExternalIDs(ctx context.Context, msg *DisableFbExternalPagesByExternalIDsCommand) (err error) {
	msg.Result, err = h.inner.DisableFbExternalPagesByExternalIDs(msg.GetArgs(ctx))
	return err
}

type GetFbExternalPageActiveByExternalIDQuery struct {
	ExternalID string

	Result *FbExternalPage `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbExternalPageActiveByExternalID(ctx context.Context, msg *GetFbExternalPageActiveByExternalIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbExternalPageActiveByExternalID(msg.GetArgs(ctx))
	return err
}

type GetFbExternalPageByExternalIDQuery struct {
	ExternalID string

	Result *FbExternalPage `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbExternalPageByExternalID(ctx context.Context, msg *GetFbExternalPageByExternalIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbExternalPageByExternalID(msg.GetArgs(ctx))
	return err
}

type GetFbExternalPageInternalActiveByExternalIDQuery struct {
	ExternalID string

	Result *FbExternalPageInternal `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbExternalPageInternalActiveByExternalID(ctx context.Context, msg *GetFbExternalPageInternalActiveByExternalIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbExternalPageInternalActiveByExternalID(msg.GetArgs(ctx))
	return err
}

type GetFbExternalPageInternalByExternalIDQuery struct {
	ExternalID string

	Result *FbExternalPageInternal `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbExternalPageInternalByExternalID(ctx context.Context, msg *GetFbExternalPageInternalByExternalIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbExternalPageInternalByExternalID(msg.GetArgs(ctx))
	return err
}

type GetPageAccessTokenQuery struct {
	ExternalID string

	Result string `json:"-"`
}

func (h QueryServiceHandler) HandleGetPageAccessToken(ctx context.Context, msg *GetPageAccessTokenQuery) (err error) {
	msg.Result, err = h.inner.GetPageAccessToken(msg.GetArgs(ctx))
	return err
}

type ListActiveFbPagesByShopIDsQuery struct {
	ShopIDs []dot.ID

	Result []*FbExternalPage `json:"-"`
}

func (h QueryServiceHandler) HandleListActiveFbPagesByShopIDs(ctx context.Context, msg *ListActiveFbPagesByShopIDsQuery) (err error) {
	msg.Result, err = h.inner.ListActiveFbPagesByShopIDs(msg.GetArgs(ctx))
	return err
}

type ListFbExternalPagesQuery struct {
	ShopID  dot.ID
	Paging  meta.Paging
	Filters meta.Filters

	Result *FbPagesResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListFbExternalPages(ctx context.Context, msg *ListFbExternalPagesQuery) (err error) {
	msg.Result, err = h.inner.ListFbExternalPages(msg.GetArgs(ctx))
	return err
}

type ListFbExternalPagesActiveByExternalIDsQuery struct {
	ExternalIDs []string

	Result []*FbExternalPage `json:"-"`
}

func (h QueryServiceHandler) HandleListFbExternalPagesActiveByExternalIDs(ctx context.Context, msg *ListFbExternalPagesActiveByExternalIDsQuery) (err error) {
	msg.Result, err = h.inner.ListFbExternalPagesActiveByExternalIDs(msg.GetArgs(ctx))
	return err
}

type ListFbExternalPagesByExternalIDsQuery struct {
	ExternalIDs []string

	Result []*FbExternalPage `json:"-"`
}

func (h QueryServiceHandler) HandleListFbExternalPagesByExternalIDs(ctx context.Context, msg *ListFbExternalPagesByExternalIDsQuery) (err error) {
	msg.Result, err = h.inner.ListFbExternalPagesByExternalIDs(msg.GetArgs(ctx))
	return err
}

type ListFbPagesByShopQuery struct {
	ShopIDs []dot.ID

	Result []*FbExternalPage `json:"-"`
}

func (h QueryServiceHandler) HandleListFbPagesByShop(ctx context.Context, msg *ListFbPagesByShopQuery) (err error) {
	msg.Result, err = h.inner.ListFbPagesByShop(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateFbExternalPageCommand) command()                {}
func (q *CreateFbExternalPageCombinedsCommand) command()       {}
func (q *CreateFbExternalPageInternalCommand) command()        {}
func (q *DisableFbExternalPagesByExternalIDsCommand) command() {}

func (q *GetFbExternalPageActiveByExternalIDQuery) query()         {}
func (q *GetFbExternalPageByExternalIDQuery) query()               {}
func (q *GetFbExternalPageInternalActiveByExternalIDQuery) query() {}
func (q *GetFbExternalPageInternalByExternalIDQuery) query()       {}
func (q *GetPageAccessTokenQuery) query()                          {}
func (q *ListActiveFbPagesByShopIDsQuery) query()                  {}
func (q *ListFbExternalPagesQuery) query()                         {}
func (q *ListFbExternalPagesActiveByExternalIDsQuery) query()      {}
func (q *ListFbExternalPagesByExternalIDsQuery) query()            {}
func (q *ListFbPagesByShopQuery) query()                           {}

// implement conversion

func (q *CreateFbExternalPageCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFbExternalPageArgs) {
	return ctx,
		&CreateFbExternalPageArgs{
			ID:                   q.ID,
			ExternalID:           q.ExternalID,
			ShopID:               q.ShopID,
			ExternalName:         q.ExternalName,
			ExternalCategory:     q.ExternalCategory,
			ExternalCategoryList: q.ExternalCategoryList,
			ExternalTasks:        q.ExternalTasks,
			ExternalPermissions:  q.ExternalPermissions,
			ExternalImageURL:     q.ExternalImageURL,
			Status:               q.Status,
			ConnectionStatus:     q.ConnectionStatus,
		}
}

func (q *CreateFbExternalPageCommand) SetCreateFbExternalPageArgs(args *CreateFbExternalPageArgs) {
	q.ID = args.ID
	q.ExternalID = args.ExternalID
	q.ShopID = args.ShopID
	q.ExternalName = args.ExternalName
	q.ExternalCategory = args.ExternalCategory
	q.ExternalCategoryList = args.ExternalCategoryList
	q.ExternalTasks = args.ExternalTasks
	q.ExternalPermissions = args.ExternalPermissions
	q.ExternalImageURL = args.ExternalImageURL
	q.Status = args.Status
	q.ConnectionStatus = args.ConnectionStatus
}

func (q *CreateFbExternalPageCombinedsCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFbExternalPageCombinedsArgs) {
	return ctx,
		&CreateFbExternalPageCombinedsArgs{
			FbPageCombineds: q.FbPageCombineds,
		}
}

func (q *CreateFbExternalPageCombinedsCommand) SetCreateFbExternalPageCombinedsArgs(args *CreateFbExternalPageCombinedsArgs) {
	q.FbPageCombineds = args.FbPageCombineds
}

func (q *CreateFbExternalPageInternalCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFbExternalPageInternalArgs) {
	return ctx,
		&CreateFbExternalPageInternalArgs{
			ID:         q.ID,
			ExternalID: q.ExternalID,
			Token:      q.Token,
		}
}

func (q *CreateFbExternalPageInternalCommand) SetCreateFbExternalPageInternalArgs(args *CreateFbExternalPageInternalArgs) {
	q.ID = args.ID
	q.ExternalID = args.ExternalID
	q.Token = args.Token
}

func (q *DisableFbExternalPagesByExternalIDsCommand) GetArgs(ctx context.Context) (_ context.Context, _ *DisableFbExternalPagesByIDsArgs) {
	return ctx,
		&DisableFbExternalPagesByIDsArgs{
			ExternalIDs: q.ExternalIDs,
			ShopID:      q.ShopID,
		}
}

func (q *DisableFbExternalPagesByExternalIDsCommand) SetDisableFbExternalPagesByIDsArgs(args *DisableFbExternalPagesByIDsArgs) {
	q.ExternalIDs = args.ExternalIDs
	q.ShopID = args.ShopID
}

func (q *GetFbExternalPageActiveByExternalIDQuery) GetArgs(ctx context.Context) (_ context.Context, externalID string) {
	return ctx,
		q.ExternalID
}

func (q *GetFbExternalPageByExternalIDQuery) GetArgs(ctx context.Context) (_ context.Context, externalID string) {
	return ctx,
		q.ExternalID
}

func (q *GetFbExternalPageInternalActiveByExternalIDQuery) GetArgs(ctx context.Context) (_ context.Context, externalID string) {
	return ctx,
		q.ExternalID
}

func (q *GetFbExternalPageInternalByExternalIDQuery) GetArgs(ctx context.Context) (_ context.Context, externalID string) {
	return ctx,
		q.ExternalID
}

func (q *GetPageAccessTokenQuery) GetArgs(ctx context.Context) (_ context.Context, externalID string) {
	return ctx,
		q.ExternalID
}

func (q *ListActiveFbPagesByShopIDsQuery) GetArgs(ctx context.Context) (_ context.Context, shopIDs []dot.ID) {
	return ctx,
		q.ShopIDs
}

func (q *ListFbExternalPagesQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListFbExternalPagesArgs) {
	return ctx,
		&ListFbExternalPagesArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListFbExternalPagesQuery) SetListFbExternalPagesArgs(args *ListFbExternalPagesArgs) {
	q.ShopID = args.ShopID
	q.Paging = args.Paging
	q.Filters = args.Filters
}

func (q *ListFbExternalPagesActiveByExternalIDsQuery) GetArgs(ctx context.Context) (_ context.Context, externalIDs []string) {
	return ctx,
		q.ExternalIDs
}

func (q *ListFbExternalPagesByExternalIDsQuery) GetArgs(ctx context.Context) (_ context.Context, externalIDs []string) {
	return ctx,
		q.ExternalIDs
}

func (q *ListFbPagesByShopQuery) GetArgs(ctx context.Context) (_ context.Context, shopIDs []dot.ID) {
	return ctx,
		q.ShopIDs
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateFbExternalPage)
	b.AddHandler(h.HandleCreateFbExternalPageCombineds)
	b.AddHandler(h.HandleCreateFbExternalPageInternal)
	b.AddHandler(h.HandleDisableFbExternalPagesByExternalIDs)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetFbExternalPageActiveByExternalID)
	b.AddHandler(h.HandleGetFbExternalPageByExternalID)
	b.AddHandler(h.HandleGetFbExternalPageInternalActiveByExternalID)
	b.AddHandler(h.HandleGetFbExternalPageInternalByExternalID)
	b.AddHandler(h.HandleGetPageAccessToken)
	b.AddHandler(h.HandleListActiveFbPagesByShopIDs)
	b.AddHandler(h.HandleListFbExternalPages)
	b.AddHandler(h.HandleListFbExternalPagesActiveByExternalIDs)
	b.AddHandler(h.HandleListFbExternalPagesByExternalIDs)
	b.AddHandler(h.HandleListFbPagesByShop)
	return QueryBus{b}
}
