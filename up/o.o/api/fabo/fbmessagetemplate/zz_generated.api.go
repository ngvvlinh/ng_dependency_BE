// +build !generator

// Code generated by generator api. DO NOT EDIT.

package fbmessagetemplate

import (
	context "context"

	common "o.o/api/top/types/common"
	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateMessageTemplateCommand struct {
	ShopID    dot.ID
	Template  string
	ShortCode string

	Result *FbMessageTemplate `json:"-"`
}

func (h AggregateHandler) HandleCreateMessageTemplate(ctx context.Context, msg *CreateMessageTemplateCommand) (err error) {
	msg.Result, err = h.inner.CreateMessageTemplate(msg.GetArgs(ctx))
	return err
}

type DeleteMessageTemplateCommand struct {
	ShopID dot.ID
	ID     dot.ID

	Result *common.Empty `json:"-"`
}

func (h AggregateHandler) HandleDeleteMessageTemplate(ctx context.Context, msg *DeleteMessageTemplateCommand) (err error) {
	msg.Result, err = h.inner.DeleteMessageTemplate(msg.GetArgs(ctx))
	return err
}

type UpdateMessageTemplateCommand struct {
	ID        dot.ID
	ShopID    dot.ID
	Template  dot.NullString
	ShortCode dot.NullString

	Result *common.Empty `json:"-"`
}

func (h AggregateHandler) HandleUpdateMessageTemplate(ctx context.Context, msg *UpdateMessageTemplateCommand) (err error) {
	msg.Result, err = h.inner.UpdateMessageTemplate(msg.GetArgs(ctx))
	return err
}

type GetMessageTemplatesQuery struct {
	ShopID dot.ID

	Result []*FbMessageTemplate `json:"-"`
}

func (h QueryServiceHandler) HandleGetMessageTemplates(ctx context.Context, msg *GetMessageTemplatesQuery) (err error) {
	msg.Result, err = h.inner.GetMessageTemplates(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateMessageTemplateCommand) command() {}
func (q *DeleteMessageTemplateCommand) command() {}
func (q *UpdateMessageTemplateCommand) command() {}

func (q *GetMessageTemplatesQuery) query() {}

// implement conversion

func (q *CreateMessageTemplateCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFbMessageTemplate) {
	return ctx,
		&CreateFbMessageTemplate{
			ShopID:    q.ShopID,
			Template:  q.Template,
			ShortCode: q.ShortCode,
		}
}

func (q *CreateMessageTemplateCommand) SetCreateFbMessageTemplate(args *CreateFbMessageTemplate) {
	q.ShopID = args.ShopID
	q.Template = args.Template
	q.ShortCode = args.ShortCode
}

func (q *DeleteMessageTemplateCommand) GetArgs(ctx context.Context) (_ context.Context, _ *DeleteFbMessageTemplate) {
	return ctx,
		&DeleteFbMessageTemplate{
			ShopID: q.ShopID,
			ID:     q.ID,
		}
}

func (q *DeleteMessageTemplateCommand) SetDeleteFbMessageTemplate(args *DeleteFbMessageTemplate) {
	q.ShopID = args.ShopID
	q.ID = args.ID
}

func (q *UpdateMessageTemplateCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateFbMessageTemplate) {
	return ctx,
		&UpdateFbMessageTemplate{
			ID:        q.ID,
			ShopID:    q.ShopID,
			Template:  q.Template,
			ShortCode: q.ShortCode,
		}
}

func (q *UpdateMessageTemplateCommand) SetUpdateFbMessageTemplate(args *UpdateFbMessageTemplate) {
	q.ID = args.ID
	q.ShopID = args.ShopID
	q.Template = args.Template
	q.ShortCode = args.ShortCode
}

func (q *GetMessageTemplatesQuery) GetArgs(ctx context.Context) (_ context.Context, shopID dot.ID) {
	return ctx,
		q.ShopID
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateMessageTemplate)
	b.AddHandler(h.HandleDeleteMessageTemplate)
	b.AddHandler(h.HandleUpdateMessageTemplate)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetMessageTemplates)
	return QueryBus{b}
}
