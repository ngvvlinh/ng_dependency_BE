// +build !generator

// Code generated by generator api. DO NOT EDIT.

package setting

import (
	context "context"

	address "o.o/api/main/address"
	shipping_payment_type "o.o/api/top/types/etc/shipping_payment_type"
	try_on "o.o/api/top/types/etc/try_on"
	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type UpdateShopSettingCommand struct {
	ShopID          dot.ID
	ReturnAddress   *address.Address
	PaymentTypeID   shipping_payment_type.NullShippingPaymentType
	TryOn           try_on.NullTryOnCode
	ShippingNote    dot.NullString
	Weight          dot.NullInt
	HideAllComments dot.NullBool

	Result *ShopSetting `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopSetting(ctx context.Context, msg *UpdateShopSettingCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopSetting(msg.GetArgs(ctx))
	return err
}

type UpdateShopSettingDirectShipmentCommand struct {
	ShopID                     dot.ID
	AllowConnectDirectShipment bool

	Result *ShopSetting `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopSettingDirectShipment(ctx context.Context, msg *UpdateShopSettingDirectShipmentCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopSettingDirectShipment(msg.GetArgs(ctx))
	return err
}

type GetShopSettingQuery struct {
	ShopID dot.ID

	Result *ShopSetting `json:"-"`
}

func (h QueryServiceHandler) HandleGetShopSetting(ctx context.Context, msg *GetShopSettingQuery) (err error) {
	msg.Result, err = h.inner.GetShopSetting(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *UpdateShopSettingCommand) command()               {}
func (q *UpdateShopSettingDirectShipmentCommand) command() {}

func (q *GetShopSettingQuery) query() {}

// implement conversion

func (q *UpdateShopSettingCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShopSettingArgs) {
	return ctx,
		&UpdateShopSettingArgs{
			ShopID:          q.ShopID,
			ReturnAddress:   q.ReturnAddress,
			PaymentTypeID:   q.PaymentTypeID,
			TryOn:           q.TryOn,
			ShippingNote:    q.ShippingNote,
			Weight:          q.Weight,
			HideAllComments: q.HideAllComments,
		}
}

func (q *UpdateShopSettingCommand) SetUpdateShopSettingArgs(args *UpdateShopSettingArgs) {
	q.ShopID = args.ShopID
	q.ReturnAddress = args.ReturnAddress
	q.PaymentTypeID = args.PaymentTypeID
	q.TryOn = args.TryOn
	q.ShippingNote = args.ShippingNote
	q.Weight = args.Weight
	q.HideAllComments = args.HideAllComments
}

func (q *UpdateShopSettingDirectShipmentCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateDirectShopSettingArgs) {
	return ctx,
		&UpdateDirectShopSettingArgs{
			ShopID:                     q.ShopID,
			AllowConnectDirectShipment: q.AllowConnectDirectShipment,
		}
}

func (q *UpdateShopSettingDirectShipmentCommand) SetUpdateDirectShopSettingArgs(args *UpdateDirectShopSettingArgs) {
	q.ShopID = args.ShopID
	q.AllowConnectDirectShipment = args.AllowConnectDirectShipment
}

func (q *GetShopSettingQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShopSettingArgs) {
	return ctx,
		&GetShopSettingArgs{
			ShopID: q.ShopID,
		}
}

func (q *GetShopSettingQuery) SetGetShopSettingArgs(args *GetShopSettingArgs) {
	q.ShopID = args.ShopID
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleUpdateShopSetting)
	b.AddHandler(h.HandleUpdateShopSettingDirectShipment)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetShopSetting)
	return QueryBus{b}
}
