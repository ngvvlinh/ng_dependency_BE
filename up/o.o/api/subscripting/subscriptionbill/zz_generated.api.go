// +build !generator

// Code generated by generator api. DO NOT EDIT.

package subscriptionbill

import (
	context "context"

	meta "o.o/api/meta"
	subscriptingtypes "o.o/api/subscripting/types"
	status4 "o.o/api/top/types/etc/status4"
	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateSubscriptionBillCommand struct {
	AccountID      dot.ID
	SubscriptionID dot.ID
	TotalAmount    int
	Lines          []*SubscriptionBillLine
	Description    string
	Customer       *subscriptingtypes.CustomerInfo

	Result *SubscriptionBillFtLine `json:"-"`
}

func (h AggregateHandler) HandleCreateSubscriptionBill(ctx context.Context, msg *CreateSubscriptionBillCommand) (err error) {
	msg.Result, err = h.inner.CreateSubscriptionBill(msg.GetArgs(ctx))
	return err
}

type CreateSubscriptionBillBySubrIDCommand struct {
	SubscriptionID dot.ID
	AccountID      dot.ID
	TotalAmount    int
	Customer       *subscriptingtypes.CustomerInfo
	Description    string

	Result *SubscriptionBillFtLine `json:"-"`
}

func (h AggregateHandler) HandleCreateSubscriptionBillBySubrID(ctx context.Context, msg *CreateSubscriptionBillBySubrIDCommand) (err error) {
	msg.Result, err = h.inner.CreateSubscriptionBillBySubrID(msg.GetArgs(ctx))
	return err
}

type DeleteSubsciptionBillCommand struct {
	ID        dot.ID
	AccountID dot.ID

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleDeleteSubsciptionBill(ctx context.Context, msg *DeleteSubsciptionBillCommand) (err error) {
	return h.inner.DeleteSubsciptionBill(msg.GetArgs(ctx))
}

type ManualPaymentSubscriptionBillCommand struct {
	ID          dot.ID
	AccountID   dot.ID
	TotalAmount int

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleManualPaymentSubscriptionBill(ctx context.Context, msg *ManualPaymentSubscriptionBillCommand) (err error) {
	return h.inner.ManualPaymentSubscriptionBill(msg.GetArgs(ctx))
}

type UpdateSubscriptionBillPaymentInfoCommand struct {
	ID            dot.ID
	AccountID     dot.ID
	PaymentID     dot.ID
	PaymentStatus status4.Status

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleUpdateSubscriptionBillPaymentInfo(ctx context.Context, msg *UpdateSubscriptionBillPaymentInfoCommand) (err error) {
	return h.inner.UpdateSubscriptionBillPaymentInfo(msg.GetArgs(ctx))
}

type UpdateSubscriptionBillStatusCommand struct {
	ID        dot.ID
	AccountID dot.ID
	Status    status4.NullStatus

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleUpdateSubscriptionBillStatus(ctx context.Context, msg *UpdateSubscriptionBillStatusCommand) (err error) {
	return h.inner.UpdateSubscriptionBillStatus(msg.GetArgs(ctx))
}

type GetSubscriptionBillByIDQuery struct {
	ID        dot.ID
	AccountID dot.ID

	Result *SubscriptionBillFtLine `json:"-"`
}

func (h QueryServiceHandler) HandleGetSubscriptionBillByID(ctx context.Context, msg *GetSubscriptionBillByIDQuery) (err error) {
	msg.Result, err = h.inner.GetSubscriptionBillByID(msg.GetArgs(ctx))
	return err
}

type ListSubscriptionBillsQuery struct {
	AccountID      dot.ID
	SubscriptionID dot.ID
	Paging         meta.Paging
	Filters        meta.Filters

	Result *ListSubscriptionBillsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListSubscriptionBills(ctx context.Context, msg *ListSubscriptionBillsQuery) (err error) {
	msg.Result, err = h.inner.ListSubscriptionBills(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateSubscriptionBillCommand) command()            {}
func (q *CreateSubscriptionBillBySubrIDCommand) command()    {}
func (q *DeleteSubsciptionBillCommand) command()             {}
func (q *ManualPaymentSubscriptionBillCommand) command()     {}
func (q *UpdateSubscriptionBillPaymentInfoCommand) command() {}
func (q *UpdateSubscriptionBillStatusCommand) command()      {}

func (q *GetSubscriptionBillByIDQuery) query() {}
func (q *ListSubscriptionBillsQuery) query()   {}

// implement conversion

func (q *CreateSubscriptionBillCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateSubscriptionBillArgs) {
	return ctx,
		&CreateSubscriptionBillArgs{
			AccountID:      q.AccountID,
			SubscriptionID: q.SubscriptionID,
			TotalAmount:    q.TotalAmount,
			Lines:          q.Lines,
			Description:    q.Description,
			Customer:       q.Customer,
		}
}

func (q *CreateSubscriptionBillCommand) SetCreateSubscriptionBillArgs(args *CreateSubscriptionBillArgs) {
	q.AccountID = args.AccountID
	q.SubscriptionID = args.SubscriptionID
	q.TotalAmount = args.TotalAmount
	q.Lines = args.Lines
	q.Description = args.Description
	q.Customer = args.Customer
}

func (q *CreateSubscriptionBillBySubrIDCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateSubscriptionBillBySubrIDArgs) {
	return ctx,
		&CreateSubscriptionBillBySubrIDArgs{
			SubscriptionID: q.SubscriptionID,
			AccountID:      q.AccountID,
			TotalAmount:    q.TotalAmount,
			Customer:       q.Customer,
			Description:    q.Description,
		}
}

func (q *CreateSubscriptionBillBySubrIDCommand) SetCreateSubscriptionBillBySubrIDArgs(args *CreateSubscriptionBillBySubrIDArgs) {
	q.SubscriptionID = args.SubscriptionID
	q.AccountID = args.AccountID
	q.TotalAmount = args.TotalAmount
	q.Customer = args.Customer
	q.Description = args.Description
}

func (q *DeleteSubsciptionBillCommand) GetArgs(ctx context.Context) (_ context.Context, ID dot.ID, AccountID dot.ID) {
	return ctx,
		q.ID,
		q.AccountID
}

func (q *ManualPaymentSubscriptionBillCommand) GetArgs(ctx context.Context) (_ context.Context, _ *ManualPaymentSubrBillArgs) {
	return ctx,
		&ManualPaymentSubrBillArgs{
			ID:          q.ID,
			AccountID:   q.AccountID,
			TotalAmount: q.TotalAmount,
		}
}

func (q *ManualPaymentSubscriptionBillCommand) SetManualPaymentSubrBillArgs(args *ManualPaymentSubrBillArgs) {
	q.ID = args.ID
	q.AccountID = args.AccountID
	q.TotalAmount = args.TotalAmount
}

func (q *UpdateSubscriptionBillPaymentInfoCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateSubscriptionBillPaymentInfoArgs) {
	return ctx,
		&UpdateSubscriptionBillPaymentInfoArgs{
			ID:            q.ID,
			AccountID:     q.AccountID,
			PaymentID:     q.PaymentID,
			PaymentStatus: q.PaymentStatus,
		}
}

func (q *UpdateSubscriptionBillPaymentInfoCommand) SetUpdateSubscriptionBillPaymentInfoArgs(args *UpdateSubscriptionBillPaymentInfoArgs) {
	q.ID = args.ID
	q.AccountID = args.AccountID
	q.PaymentID = args.PaymentID
	q.PaymentStatus = args.PaymentStatus
}

func (q *UpdateSubscriptionBillStatusCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateSubscriptionBillStatusArgs) {
	return ctx,
		&UpdateSubscriptionBillStatusArgs{
			ID:        q.ID,
			AccountID: q.AccountID,
			Status:    q.Status,
		}
}

func (q *UpdateSubscriptionBillStatusCommand) SetUpdateSubscriptionBillStatusArgs(args *UpdateSubscriptionBillStatusArgs) {
	q.ID = args.ID
	q.AccountID = args.AccountID
	q.Status = args.Status
}

func (q *GetSubscriptionBillByIDQuery) GetArgs(ctx context.Context) (_ context.Context, ID dot.ID, AccountID dot.ID) {
	return ctx,
		q.ID,
		q.AccountID
}

func (q *ListSubscriptionBillsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListSubscriptionBillsArgs) {
	return ctx,
		&ListSubscriptionBillsArgs{
			AccountID:      q.AccountID,
			SubscriptionID: q.SubscriptionID,
			Paging:         q.Paging,
			Filters:        q.Filters,
		}
}

func (q *ListSubscriptionBillsQuery) SetListSubscriptionBillsArgs(args *ListSubscriptionBillsArgs) {
	q.AccountID = args.AccountID
	q.SubscriptionID = args.SubscriptionID
	q.Paging = args.Paging
	q.Filters = args.Filters
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateSubscriptionBill)
	b.AddHandler(h.HandleCreateSubscriptionBillBySubrID)
	b.AddHandler(h.HandleDeleteSubsciptionBill)
	b.AddHandler(h.HandleManualPaymentSubscriptionBill)
	b.AddHandler(h.HandleUpdateSubscriptionBillPaymentInfo)
	b.AddHandler(h.HandleUpdateSubscriptionBillStatus)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetSubscriptionBillByID)
	b.AddHandler(h.HandleListSubscriptionBills)
	return QueryBus{b}
}
