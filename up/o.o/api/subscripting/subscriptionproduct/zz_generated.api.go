// +build !generator

// Code generated by generator api. DO NOT EDIT.

package subscriptionproduct

import (
	context "context"

	common "o.o/api/top/types/common"
	subscription_product_type "o.o/api/top/types/etc/subscription_product_type"
	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateSubrProductCommand struct {
	Name        string
	Description string
	ImageURL    string
	Type        subscription_product_type.ProductSubscriptionType

	Result *SubscriptionProduct `json:"-"`
}

func (h AggregateHandler) HandleCreateSubrProduct(ctx context.Context, msg *CreateSubrProductCommand) (err error) {
	msg.Result, err = h.inner.CreateSubrProduct(msg.GetArgs(ctx))
	return err
}

type DeleteSubrProductCommand struct {
	ID dot.ID

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleDeleteSubrProduct(ctx context.Context, msg *DeleteSubrProductCommand) (err error) {
	return h.inner.DeleteSubrProduct(msg.GetArgs(ctx))
}

type UpdateSubrProductCommand struct {
	ID          dot.ID
	Name        string
	Description string
	ImageURL    string

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleUpdateSubrProduct(ctx context.Context, msg *UpdateSubrProductCommand) (err error) {
	return h.inner.UpdateSubrProduct(msg.GetArgs(ctx))
}

type GetSubrProductByIDQuery struct {
	ID dot.ID

	Result *SubscriptionProduct `json:"-"`
}

func (h QueryServiceHandler) HandleGetSubrProductByID(ctx context.Context, msg *GetSubrProductByIDQuery) (err error) {
	msg.Result, err = h.inner.GetSubrProductByID(msg.GetArgs(ctx))
	return err
}

type ListSubrProductsQuery struct {
	Result []*SubscriptionProduct `json:"-"`
}

func (h QueryServiceHandler) HandleListSubrProducts(ctx context.Context, msg *ListSubrProductsQuery) (err error) {
	msg.Result, err = h.inner.ListSubrProducts(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateSubrProductCommand) command() {}
func (q *DeleteSubrProductCommand) command() {}
func (q *UpdateSubrProductCommand) command() {}

func (q *GetSubrProductByIDQuery) query() {}
func (q *ListSubrProductsQuery) query()   {}

// implement conversion

func (q *CreateSubrProductCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateSubrProductArgs) {
	return ctx,
		&CreateSubrProductArgs{
			Name:        q.Name,
			Description: q.Description,
			ImageURL:    q.ImageURL,
			Type:        q.Type,
		}
}

func (q *CreateSubrProductCommand) SetCreateSubrProductArgs(args *CreateSubrProductArgs) {
	q.Name = args.Name
	q.Description = args.Description
	q.ImageURL = args.ImageURL
	q.Type = args.Type
}

func (q *DeleteSubrProductCommand) GetArgs(ctx context.Context) (_ context.Context, ID dot.ID) {
	return ctx,
		q.ID
}

func (q *UpdateSubrProductCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateSubrProductArgs) {
	return ctx,
		&UpdateSubrProductArgs{
			ID:          q.ID,
			Name:        q.Name,
			Description: q.Description,
			ImageURL:    q.ImageURL,
		}
}

func (q *UpdateSubrProductCommand) SetUpdateSubrProductArgs(args *UpdateSubrProductArgs) {
	q.ID = args.ID
	q.Name = args.Name
	q.Description = args.Description
	q.ImageURL = args.ImageURL
}

func (q *GetSubrProductByIDQuery) GetArgs(ctx context.Context) (_ context.Context, ID dot.ID) {
	return ctx,
		q.ID
}

func (q *ListSubrProductsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *common.Empty) {
	return ctx,
		&common.Empty{}
}

func (q *ListSubrProductsQuery) SetEmpty(args *common.Empty) {
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateSubrProduct)
	b.AddHandler(h.HandleDeleteSubrProduct)
	b.AddHandler(h.HandleUpdateSubrProduct)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetSubrProductByID)
	b.AddHandler(h.HandleListSubrProducts)
	return QueryBus{b}
}
