// +build !generator

// Code generated by generator api. DO NOT EDIT.

package invoice

import (
	context "context"
	time "time"

	meta "o.o/api/meta"
	subscriptingtypes "o.o/api/subscripting/types"
	payment_method "o.o/api/top/types/etc/payment_method"
	service_classify "o.o/api/top/types/etc/service_classify"
	status4 "o.o/api/top/types/etc/status4"
	subject_referral "o.o/api/top/types/etc/subject_referral"
	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateInvoiceCommand struct {
	AccountID    dot.ID
	TotalAmount  int
	Lines        []*InvoiceLine
	Description  string
	Customer     *subscriptingtypes.CustomerInfo
	ReferralType subject_referral.SubjectReferral

	Result *InvoiceFtLine `json:"-"`
}

func (h AggregateHandler) HandleCreateInvoice(ctx context.Context, msg *CreateInvoiceCommand) (err error) {
	msg.Result, err = h.inner.CreateInvoice(msg.GetArgs(ctx))
	return err
}

type CreateInvoiceBySubrIDCommand struct {
	SubscriptionID dot.ID
	AccountID      dot.ID
	TotalAmount    int
	Customer       *subscriptingtypes.CustomerInfo
	Description    string

	Result *InvoiceFtLine `json:"-"`
}

func (h AggregateHandler) HandleCreateInvoiceBySubrID(ctx context.Context, msg *CreateInvoiceBySubrIDCommand) (err error) {
	msg.Result, err = h.inner.CreateInvoiceBySubrID(msg.GetArgs(ctx))
	return err
}

type DeleteInvoiceCommand struct {
	ID          dot.ID
	AccountID   dot.ID
	ForceDelete bool

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleDeleteInvoice(ctx context.Context, msg *DeleteInvoiceCommand) (err error) {
	return h.inner.DeleteInvoice(msg.GetArgs(ctx))
}

type ManualPaymentInvoiceCommand struct {
	ID          dot.ID
	AccountID   dot.ID
	TotalAmount int

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleManualPaymentInvoice(ctx context.Context, msg *ManualPaymentInvoiceCommand) (err error) {
	return h.inner.ManualPaymentInvoice(msg.GetArgs(ctx))
}

type PaymentInvoiceCommand struct {
	InvoiceID       dot.ID
	AccountID       dot.ID
	OwnerID         dot.ID
	TotalAmount     int
	PaymentMethod   payment_method.PaymentMethod
	ServiceClassify service_classify.NullServiceClassify

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandlePaymentInvoice(ctx context.Context, msg *PaymentInvoiceCommand) (err error) {
	return h.inner.PaymentInvoice(msg.GetArgs(ctx))
}

type UpdateInvoicePaymentInfoCommand struct {
	ID            dot.ID
	AccountID     dot.ID
	PaymentID     dot.ID
	PaymentStatus status4.Status

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleUpdateInvoicePaymentInfo(ctx context.Context, msg *UpdateInvoicePaymentInfoCommand) (err error) {
	return h.inner.UpdateInvoicePaymentInfo(msg.GetArgs(ctx))
}

type UpdateInvoiceStatusCommand struct {
	ID        dot.ID
	AccountID dot.ID
	Status    status4.NullStatus

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleUpdateInvoiceStatus(ctx context.Context, msg *UpdateInvoiceStatusCommand) (err error) {
	return h.inner.UpdateInvoiceStatus(msg.GetArgs(ctx))
}

type GetInvoiceByIDQuery struct {
	ID        dot.ID
	AccountID dot.ID

	Result *InvoiceFtLine `json:"-"`
}

func (h QueryServiceHandler) HandleGetInvoiceByID(ctx context.Context, msg *GetInvoiceByIDQuery) (err error) {
	msg.Result, err = h.inner.GetInvoiceByID(msg.GetArgs(ctx))
	return err
}

type ListInvoicesQuery struct {
	AccountID dot.ID
	Paging    meta.Paging
	Filters   meta.Filters
	RefID     dot.ID
	RefType   subject_referral.SubjectReferral
	DateFrom  time.Time
	DateTo    time.Time

	Result *ListInvoicesResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListInvoices(ctx context.Context, msg *ListInvoicesQuery) (err error) {
	msg.Result, err = h.inner.ListInvoices(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateInvoiceCommand) command()            {}
func (q *CreateInvoiceBySubrIDCommand) command()    {}
func (q *DeleteInvoiceCommand) command()            {}
func (q *ManualPaymentInvoiceCommand) command()     {}
func (q *PaymentInvoiceCommand) command()           {}
func (q *UpdateInvoicePaymentInfoCommand) command() {}
func (q *UpdateInvoiceStatusCommand) command()      {}

func (q *GetInvoiceByIDQuery) query() {}
func (q *ListInvoicesQuery) query()   {}

// implement conversion

func (q *CreateInvoiceCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateInvoiceArgs) {
	return ctx,
		&CreateInvoiceArgs{
			AccountID:    q.AccountID,
			TotalAmount:  q.TotalAmount,
			Lines:        q.Lines,
			Description:  q.Description,
			Customer:     q.Customer,
			ReferralType: q.ReferralType,
		}
}

func (q *CreateInvoiceCommand) SetCreateInvoiceArgs(args *CreateInvoiceArgs) {
	q.AccountID = args.AccountID
	q.TotalAmount = args.TotalAmount
	q.Lines = args.Lines
	q.Description = args.Description
	q.Customer = args.Customer
	q.ReferralType = args.ReferralType
}

func (q *CreateInvoiceBySubrIDCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateInvoiceBySubrIDArgs) {
	return ctx,
		&CreateInvoiceBySubrIDArgs{
			SubscriptionID: q.SubscriptionID,
			AccountID:      q.AccountID,
			TotalAmount:    q.TotalAmount,
			Customer:       q.Customer,
			Description:    q.Description,
		}
}

func (q *CreateInvoiceBySubrIDCommand) SetCreateInvoiceBySubrIDArgs(args *CreateInvoiceBySubrIDArgs) {
	q.SubscriptionID = args.SubscriptionID
	q.AccountID = args.AccountID
	q.TotalAmount = args.TotalAmount
	q.Customer = args.Customer
	q.Description = args.Description
}

func (q *DeleteInvoiceCommand) GetArgs(ctx context.Context) (_ context.Context, _ *DeleteInvoiceArgs) {
	return ctx,
		&DeleteInvoiceArgs{
			ID:          q.ID,
			AccountID:   q.AccountID,
			ForceDelete: q.ForceDelete,
		}
}

func (q *DeleteInvoiceCommand) SetDeleteInvoiceArgs(args *DeleteInvoiceArgs) {
	q.ID = args.ID
	q.AccountID = args.AccountID
	q.ForceDelete = args.ForceDelete
}

func (q *ManualPaymentInvoiceCommand) GetArgs(ctx context.Context) (_ context.Context, _ *ManualPaymentInvoiceArgs) {
	return ctx,
		&ManualPaymentInvoiceArgs{
			ID:          q.ID,
			AccountID:   q.AccountID,
			TotalAmount: q.TotalAmount,
		}
}

func (q *ManualPaymentInvoiceCommand) SetManualPaymentInvoiceArgs(args *ManualPaymentInvoiceArgs) {
	q.ID = args.ID
	q.AccountID = args.AccountID
	q.TotalAmount = args.TotalAmount
}

func (q *PaymentInvoiceCommand) GetArgs(ctx context.Context) (_ context.Context, _ *PaymentInvoiceArgs) {
	return ctx,
		&PaymentInvoiceArgs{
			InvoiceID:       q.InvoiceID,
			AccountID:       q.AccountID,
			OwnerID:         q.OwnerID,
			TotalAmount:     q.TotalAmount,
			PaymentMethod:   q.PaymentMethod,
			ServiceClassify: q.ServiceClassify,
		}
}

func (q *PaymentInvoiceCommand) SetPaymentInvoiceArgs(args *PaymentInvoiceArgs) {
	q.InvoiceID = args.InvoiceID
	q.AccountID = args.AccountID
	q.OwnerID = args.OwnerID
	q.TotalAmount = args.TotalAmount
	q.PaymentMethod = args.PaymentMethod
	q.ServiceClassify = args.ServiceClassify
}

func (q *UpdateInvoicePaymentInfoCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateInvoicePaymentInfoArgs) {
	return ctx,
		&UpdateInvoicePaymentInfoArgs{
			ID:            q.ID,
			AccountID:     q.AccountID,
			PaymentID:     q.PaymentID,
			PaymentStatus: q.PaymentStatus,
		}
}

func (q *UpdateInvoicePaymentInfoCommand) SetUpdateInvoicePaymentInfoArgs(args *UpdateInvoicePaymentInfoArgs) {
	q.ID = args.ID
	q.AccountID = args.AccountID
	q.PaymentID = args.PaymentID
	q.PaymentStatus = args.PaymentStatus
}

func (q *UpdateInvoiceStatusCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateInvoiceStatusArgs) {
	return ctx,
		&UpdateInvoiceStatusArgs{
			ID:        q.ID,
			AccountID: q.AccountID,
			Status:    q.Status,
		}
}

func (q *UpdateInvoiceStatusCommand) SetUpdateInvoiceStatusArgs(args *UpdateInvoiceStatusArgs) {
	q.ID = args.ID
	q.AccountID = args.AccountID
	q.Status = args.Status
}

func (q *GetInvoiceByIDQuery) GetArgs(ctx context.Context) (_ context.Context, ID dot.ID, AccountID dot.ID) {
	return ctx,
		q.ID,
		q.AccountID
}

func (q *ListInvoicesQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListInvoicesArgs) {
	return ctx,
		&ListInvoicesArgs{
			AccountID: q.AccountID,
			Paging:    q.Paging,
			Filters:   q.Filters,
			RefID:     q.RefID,
			RefType:   q.RefType,
			DateFrom:  q.DateFrom,
			DateTo:    q.DateTo,
		}
}

func (q *ListInvoicesQuery) SetListInvoicesArgs(args *ListInvoicesArgs) {
	q.AccountID = args.AccountID
	q.Paging = args.Paging
	q.Filters = args.Filters
	q.RefID = args.RefID
	q.RefType = args.RefType
	q.DateFrom = args.DateFrom
	q.DateTo = args.DateTo
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateInvoice)
	b.AddHandler(h.HandleCreateInvoiceBySubrID)
	b.AddHandler(h.HandleDeleteInvoice)
	b.AddHandler(h.HandleManualPaymentInvoice)
	b.AddHandler(h.HandlePaymentInvoice)
	b.AddHandler(h.HandleUpdateInvoicePaymentInfo)
	b.AddHandler(h.HandleUpdateInvoiceStatus)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetInvoiceByID)
	b.AddHandler(h.HandleListInvoices)
	return QueryBus{b}
}
