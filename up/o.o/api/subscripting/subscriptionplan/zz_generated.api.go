// +build !generator

// Code generated by generator api. DO NOT EDIT.

package subscriptionplan

import (
	context "context"

	common "o.o/api/top/types/common"
	subscription_plan_interval "o.o/api/top/types/etc/subscription_plan_interval"
	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateSubrPlanCommand struct {
	Name          string
	Price         int
	Description   string
	ProductID     dot.ID
	Interval      subscription_plan_interval.SubscriptionPlanInterval
	IntervalCount int

	Result *SubscriptionPlan `json:"-"`
}

func (h AggregateHandler) HandleCreateSubrPlan(ctx context.Context, msg *CreateSubrPlanCommand) (err error) {
	msg.Result, err = h.inner.CreateSubrPlan(msg.GetArgs(ctx))
	return err
}

type DeleteSubrPlanCommand struct {
	ID dot.ID

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleDeleteSubrPlan(ctx context.Context, msg *DeleteSubrPlanCommand) (err error) {
	return h.inner.DeleteSubrPlan(msg.GetArgs(ctx))
}

type UpdateSubrPlanCommand struct {
	ID            dot.ID
	Name          string
	Price         int
	Description   string
	ProductID     dot.ID
	Interval      subscription_plan_interval.SubscriptionPlanInterval
	IntervalCount int

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleUpdateSubrPlan(ctx context.Context, msg *UpdateSubrPlanCommand) (err error) {
	return h.inner.UpdateSubrPlan(msg.GetArgs(ctx))
}

type GetSubrPlanByIDQuery struct {
	ID dot.ID

	Result *SubscriptionPlan `json:"-"`
}

func (h QueryServiceHandler) HandleGetSubrPlanByID(ctx context.Context, msg *GetSubrPlanByIDQuery) (err error) {
	msg.Result, err = h.inner.GetSubrPlanByID(msg.GetArgs(ctx))
	return err
}

type ListSubrPlansQuery struct {
	Result []*SubscriptionPlan `json:"-"`
}

func (h QueryServiceHandler) HandleListSubrPlans(ctx context.Context, msg *ListSubrPlansQuery) (err error) {
	msg.Result, err = h.inner.ListSubrPlans(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateSubrPlanCommand) command() {}
func (q *DeleteSubrPlanCommand) command() {}
func (q *UpdateSubrPlanCommand) command() {}

func (q *GetSubrPlanByIDQuery) query() {}
func (q *ListSubrPlansQuery) query()   {}

// implement conversion

func (q *CreateSubrPlanCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateSubrPlanArgs) {
	return ctx,
		&CreateSubrPlanArgs{
			Name:          q.Name,
			Price:         q.Price,
			Description:   q.Description,
			ProductID:     q.ProductID,
			Interval:      q.Interval,
			IntervalCount: q.IntervalCount,
		}
}

func (q *CreateSubrPlanCommand) SetCreateSubrPlanArgs(args *CreateSubrPlanArgs) {
	q.Name = args.Name
	q.Price = args.Price
	q.Description = args.Description
	q.ProductID = args.ProductID
	q.Interval = args.Interval
	q.IntervalCount = args.IntervalCount
}

func (q *DeleteSubrPlanCommand) GetArgs(ctx context.Context) (_ context.Context, ID dot.ID) {
	return ctx,
		q.ID
}

func (q *UpdateSubrPlanCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateSubrPlanArgs) {
	return ctx,
		&UpdateSubrPlanArgs{
			ID:            q.ID,
			Name:          q.Name,
			Price:         q.Price,
			Description:   q.Description,
			ProductID:     q.ProductID,
			Interval:      q.Interval,
			IntervalCount: q.IntervalCount,
		}
}

func (q *UpdateSubrPlanCommand) SetUpdateSubrPlanArgs(args *UpdateSubrPlanArgs) {
	q.ID = args.ID
	q.Name = args.Name
	q.Price = args.Price
	q.Description = args.Description
	q.ProductID = args.ProductID
	q.Interval = args.Interval
	q.IntervalCount = args.IntervalCount
}

func (q *GetSubrPlanByIDQuery) GetArgs(ctx context.Context) (_ context.Context, ID dot.ID) {
	return ctx,
		q.ID
}

func (q *ListSubrPlansQuery) GetArgs(ctx context.Context) (_ context.Context, _ *common.Empty) {
	return ctx,
		&common.Empty{}
}

func (q *ListSubrPlansQuery) SetEmpty(args *common.Empty) {
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateSubrPlan)
	b.AddHandler(h.HandleDeleteSubrPlan)
	b.AddHandler(h.HandleUpdateSubrPlan)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetSubrPlanByID)
	b.AddHandler(h.HandleListSubrPlans)
	return QueryBus{b}
}
