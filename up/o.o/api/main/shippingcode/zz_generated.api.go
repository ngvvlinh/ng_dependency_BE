// +build !generator

// Code generated by generator api. DO NOT EDIT.

package shippingcode

import (
	context "context"

	common "o.o/api/top/types/common"
	capi "o.o/capi"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type GenerateShippingCodeQuery struct {
	Result string `json:"-"`
}

func (h QueryServiceHandler) HandleGenerateShippingCode(ctx context.Context, msg *GenerateShippingCodeQuery) (err error) {
	msg.Result, err = h.inner.GenerateShippingCode(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *GenerateShippingCodeQuery) query() {}

// implement conversion

func (q *GenerateShippingCodeQuery) GetArgs(ctx context.Context) (_ context.Context, _ *common.Empty) {
	return ctx,
		&common.Empty{}
}

func (q *GenerateShippingCodeQuery) SetEmpty(args *common.Empty) {
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGenerateShippingCode)
	return QueryBus{b}
}
