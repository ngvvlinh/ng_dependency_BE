// +build !generator

// Code generated by generator api. DO NOT EDIT.

package reporting

import (
	context "context"
	time "time"

	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type QueryBus struct{ bus capi.Bus }

func NewQueryBus(bus capi.Bus) QueryBus { return QueryBus{bus} }

func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type ReportOrdersQuery struct {
	ShopID        dot.ID
	CreatedAtFrom time.Time
	CreatedAtTo   time.Time
	CreatedBy     dot.ID

	Result []*ReportOrder `json:"-"`
}

func (h QueryServiceHandler) HandleReportOrders(ctx context.Context, msg *ReportOrdersQuery) (err error) {
	msg.Result, err = h.inner.ReportOrders(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *ReportOrdersQuery) query() {}

// implement conversion

func (q *ReportOrdersQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ReportOrdersArgs) {
	return ctx,
		&ReportOrdersArgs{
			ShopID:        q.ShopID,
			CreatedAtFrom: q.CreatedAtFrom,
			CreatedAtTo:   q.CreatedAtTo,
			CreatedBy:     q.CreatedBy,
		}
}

func (q *ReportOrdersQuery) SetReportOrdersArgs(args *ReportOrdersArgs) {
	q.ShopID = args.ShopID
	q.CreatedAtFrom = args.CreatedAtFrom
	q.CreatedAtTo = args.CreatedAtTo
	q.CreatedBy = args.CreatedBy
}

// implement dispatching

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleReportOrders)
	return QueryBus{b}
}
