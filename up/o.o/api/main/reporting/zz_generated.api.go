// +build !generator

// Code generated by generator api. DO NOT EDIT.

package reporting

import (
	context "context"
	time "time"

	report_time_filter "o.o/api/top/types/etc/report_time_filter"
	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type QueryBus struct{ bus capi.Bus }

func NewQueryBus(bus capi.Bus) QueryBus { return QueryBus{bus} }

func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type ReportIncomeStatementQuery struct {
	ShopID     dot.ID
	Year       int
	TimeFilter report_time_filter.TimeFilter

	Result map[int]*ReportIncomeStatement `json:"-"`
}

func (h QueryServiceHandler) HandleReportIncomeStatement(ctx context.Context, msg *ReportIncomeStatementQuery) (err error) {
	msg.Result, err = h.inner.ReportIncomeStatement(msg.GetArgs(ctx))
	return err
}

type ReportOrdersQuery struct {
	ShopID        dot.ID
	CreatedAtFrom time.Time
	CreatedAtTo   time.Time
	CreatedBy     dot.ID

	Result []*ReportOrder `json:"-"`
}

func (h QueryServiceHandler) HandleReportOrders(ctx context.Context, msg *ReportOrdersQuery) (err error) {
	msg.Result, err = h.inner.ReportOrders(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *ReportIncomeStatementQuery) query() {}
func (q *ReportOrdersQuery) query()          {}

// implement conversion

func (q *ReportIncomeStatementQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ReportIncomeStatementArgs) {
	return ctx,
		&ReportIncomeStatementArgs{
			ShopID:     q.ShopID,
			Year:       q.Year,
			TimeFilter: q.TimeFilter,
		}
}

func (q *ReportIncomeStatementQuery) SetReportIncomeStatementArgs(args *ReportIncomeStatementArgs) {
	q.ShopID = args.ShopID
	q.Year = args.Year
	q.TimeFilter = args.TimeFilter
}

func (q *ReportOrdersQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ReportOrdersArgs) {
	return ctx,
		&ReportOrdersArgs{
			ShopID:        q.ShopID,
			CreatedAtFrom: q.CreatedAtFrom,
			CreatedAtTo:   q.CreatedAtTo,
			CreatedBy:     q.CreatedBy,
		}
}

func (q *ReportOrdersQuery) SetReportOrdersArgs(args *ReportOrdersArgs) {
	q.ShopID = args.ShopID
	q.CreatedAtFrom = args.CreatedAtFrom
	q.CreatedAtTo = args.CreatedAtTo
	q.CreatedBy = args.CreatedBy
}

// implement dispatching

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleReportIncomeStatement)
	b.AddHandler(h.HandleReportOrders)
	return QueryBus{b}
}
