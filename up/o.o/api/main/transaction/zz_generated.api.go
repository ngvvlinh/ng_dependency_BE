// +build !generator

// Code generated by generator api. DO NOT EDIT.

package transaction

import (
	context "context"

	meta "o.o/api/meta"
	service_classify "o.o/api/top/types/etc/service_classify"
	status3 "o.o/api/top/types/etc/status3"
	subject_referral "o.o/api/top/types/etc/subject_referral"
	transaction_type "o.o/api/top/types/etc/transaction_type"
	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CancelTransactionCommand struct {
	TrxnID    dot.ID
	AccountID dot.ID

	Result *Transaction `json:"-"`
}

func (h AggregateHandler) HandleCancelTransaction(ctx context.Context, msg *CancelTransactionCommand) (err error) {
	msg.Result, err = h.inner.CancelTransaction(msg.GetArgs(ctx))
	return err
}

type ConfirmTransactionCommand struct {
	TrxnID    dot.ID
	AccountID dot.ID

	Result *Transaction `json:"-"`
}

func (h AggregateHandler) HandleConfirmTransaction(ctx context.Context, msg *ConfirmTransactionCommand) (err error) {
	msg.Result, err = h.inner.ConfirmTransaction(msg.GetArgs(ctx))
	return err
}

type CreateTransactionCommand struct {
	ID           dot.ID
	Name         string
	Amount       int
	AccountID    dot.ID
	Status       status3.Status
	Type         transaction_type.TransactionType
	Classify     service_classify.ServiceClassify
	Note         string
	ReferralType subject_referral.SubjectReferral
	ReferralIDs  []dot.ID

	Result *Transaction `json:"-"`
}

func (h AggregateHandler) HandleCreateTransaction(ctx context.Context, msg *CreateTransactionCommand) (err error) {
	msg.Result, err = h.inner.CreateTransaction(msg.GetArgs(ctx))
	return err
}

type DeleteTransactionCommand struct {
	TrxnID    dot.ID
	AccountID dot.ID

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleDeleteTransaction(ctx context.Context, msg *DeleteTransactionCommand) (err error) {
	return h.inner.DeleteTransaction(msg.GetArgs(ctx))
}

type GetBalanceUserQuery struct {
	UserID   dot.ID
	Classify service_classify.ServiceClassify

	Result *GetBalanceUserResponse `json:"-"`
}

func (h QueryServiceHandler) HandleGetBalanceUser(ctx context.Context, msg *GetBalanceUserQuery) (err error) {
	msg.Result, err = h.inner.GetBalanceUser(msg.GetArgs(ctx))
	return err
}

type GetTransactionByIDQuery struct {
	TrxnID    dot.ID
	AccountID dot.ID

	Result *Transaction `json:"-"`
}

func (h QueryServiceHandler) HandleGetTransactionByID(ctx context.Context, msg *GetTransactionByIDQuery) (err error) {
	msg.Result, err = h.inner.GetTransactionByID(msg.GetArgs(ctx))
	return err
}

type GetTransactionByReferralQuery struct {
	ReferralType subject_referral.SubjectReferral
	ReferralID   dot.ID

	Result *Transaction `json:"-"`
}

func (h QueryServiceHandler) HandleGetTransactionByReferral(ctx context.Context, msg *GetTransactionByReferralQuery) (err error) {
	msg.Result, err = h.inner.GetTransactionByReferral(msg.GetArgs(ctx))
	return err
}

type ListTransactionsQuery struct {
	AccountID dot.ID
	Paging    meta.Paging

	Result *TransactionResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListTransactions(ctx context.Context, msg *ListTransactionsQuery) (err error) {
	msg.Result, err = h.inner.ListTransactions(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CancelTransactionCommand) command()  {}
func (q *ConfirmTransactionCommand) command() {}
func (q *CreateTransactionCommand) command()  {}
func (q *DeleteTransactionCommand) command()  {}

func (q *GetBalanceUserQuery) query()           {}
func (q *GetTransactionByIDQuery) query()       {}
func (q *GetTransactionByReferralQuery) query() {}
func (q *ListTransactionsQuery) query()         {}

// implement conversion

func (q *CancelTransactionCommand) GetArgs(ctx context.Context) (_ context.Context, trxnID dot.ID, accountID dot.ID) {
	return ctx,
		q.TrxnID,
		q.AccountID
}

func (q *ConfirmTransactionCommand) GetArgs(ctx context.Context) (_ context.Context, trxnID dot.ID, accountID dot.ID) {
	return ctx,
		q.TrxnID,
		q.AccountID
}

func (q *CreateTransactionCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateTransactionArgs) {
	return ctx,
		&CreateTransactionArgs{
			ID:           q.ID,
			Name:         q.Name,
			Amount:       q.Amount,
			AccountID:    q.AccountID,
			Status:       q.Status,
			Type:         q.Type,
			Classify:     q.Classify,
			Note:         q.Note,
			ReferralType: q.ReferralType,
			ReferralIDs:  q.ReferralIDs,
		}
}

func (q *CreateTransactionCommand) SetCreateTransactionArgs(args *CreateTransactionArgs) {
	q.ID = args.ID
	q.Name = args.Name
	q.Amount = args.Amount
	q.AccountID = args.AccountID
	q.Status = args.Status
	q.Type = args.Type
	q.Classify = args.Classify
	q.Note = args.Note
	q.ReferralType = args.ReferralType
	q.ReferralIDs = args.ReferralIDs
}

func (q *DeleteTransactionCommand) GetArgs(ctx context.Context) (_ context.Context, trxnID dot.ID, accountID dot.ID) {
	return ctx,
		q.TrxnID,
		q.AccountID
}

func (q *GetBalanceUserQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetBalanceUserArgs) {
	return ctx,
		&GetBalanceUserArgs{
			UserID:   q.UserID,
			Classify: q.Classify,
		}
}

func (q *GetBalanceUserQuery) SetGetBalanceUserArgs(args *GetBalanceUserArgs) {
	q.UserID = args.UserID
	q.Classify = args.Classify
}

func (q *GetTransactionByIDQuery) GetArgs(ctx context.Context) (_ context.Context, trxnID dot.ID, accountID dot.ID) {
	return ctx,
		q.TrxnID,
		q.AccountID
}

func (q *GetTransactionByReferralQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetTrxnByReferralArgs) {
	return ctx,
		&GetTrxnByReferralArgs{
			ReferralType: q.ReferralType,
			ReferralID:   q.ReferralID,
		}
}

func (q *GetTransactionByReferralQuery) SetGetTrxnByReferralArgs(args *GetTrxnByReferralArgs) {
	q.ReferralType = args.ReferralType
	q.ReferralID = args.ReferralID
}

func (q *ListTransactionsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetTransactionsArgs) {
	return ctx,
		&GetTransactionsArgs{
			AccountID: q.AccountID,
			Paging:    q.Paging,
		}
}

func (q *ListTransactionsQuery) SetGetTransactionsArgs(args *GetTransactionsArgs) {
	q.AccountID = args.AccountID
	q.Paging = args.Paging
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCancelTransaction)
	b.AddHandler(h.HandleConfirmTransaction)
	b.AddHandler(h.HandleCreateTransaction)
	b.AddHandler(h.HandleDeleteTransaction)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetBalanceUser)
	b.AddHandler(h.HandleGetTransactionByID)
	b.AddHandler(h.HandleGetTransactionByReferral)
	b.AddHandler(h.HandleListTransactions)
	return QueryBus{b}
}
