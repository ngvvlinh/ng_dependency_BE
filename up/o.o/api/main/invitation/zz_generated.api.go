// +build !generator

// Code generated by generator api. DO NOT EDIT.

package invitation

import (
	context "context"
	time "time"

	authorization "o.o/api/main/authorization"
	meta "o.o/api/meta"
	shopping "o.o/api/shopping"
	status3 "o.o/api/top/types/etc/status3"
	capi "o.o/capi"
	dot "o.o/capi/dot"
	filter "o.o/capi/filter"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type AcceptInvitationCommand struct {
	UserID dot.ID
	Token  string

	Result int `json:"-"`
}

func (h AggregateHandler) HandleAcceptInvitation(ctx context.Context, msg *AcceptInvitationCommand) (err error) {
	msg.Result, err = h.inner.AcceptInvitation(msg.GetArgs(ctx))
	return err
}

type CreateInvitationCommand struct {
	AccountID dot.ID
	Email     string
	Phone     string
	FullName  string
	ShortName string
	Position  string
	Roles     []authorization.Role
	Status    status3.Status
	InvitedBy dot.ID
	CreatedBy time.Time
	OriginURL string

	Result *Invitation `json:"-"`
}

func (h AggregateHandler) HandleCreateInvitation(ctx context.Context, msg *CreateInvitationCommand) (err error) {
	msg.Result, err = h.inner.CreateInvitation(msg.GetArgs(ctx))
	return err
}

type DeleteInvitationCommand struct {
	UserID    dot.ID
	AccountID dot.ID
	Token     string

	Result int `json:"-"`
}

func (h AggregateHandler) HandleDeleteInvitation(ctx context.Context, msg *DeleteInvitationCommand) (err error) {
	msg.Result, err = h.inner.DeleteInvitation(msg.GetArgs(ctx))
	return err
}

type RejectInvitationCommand struct {
	UserID dot.ID
	Token  string

	Result int `json:"-"`
}

func (h AggregateHandler) HandleRejectInvitation(ctx context.Context, msg *RejectInvitationCommand) (err error) {
	msg.Result, err = h.inner.RejectInvitation(msg.GetArgs(ctx))
	return err
}

type ResendInvitationCommand struct {
	AccountID dot.ID
	ResendBy  dot.ID
	Email     string
	Phone     string
	OriginURL string

	Result *Invitation `json:"-"`
}

func (h AggregateHandler) HandleResendInvitation(ctx context.Context, msg *ResendInvitationCommand) (err error) {
	msg.Result, err = h.inner.ResendInvitation(msg.GetArgs(ctx))
	return err
}

type GetInvitationQuery struct {
	ID dot.ID

	Result *Invitation `json:"-"`
}

func (h QueryServiceHandler) HandleGetInvitation(ctx context.Context, msg *GetInvitationQuery) (err error) {
	msg.Result, err = h.inner.GetInvitation(msg.GetArgs(ctx))
	return err
}

type GetInvitationByTokenQuery struct {
	Token string

	Result *Invitation `json:"-"`
}

func (h QueryServiceHandler) HandleGetInvitationByToken(ctx context.Context, msg *GetInvitationByTokenQuery) (err error) {
	msg.Result, err = h.inner.GetInvitationByToken(msg.GetArgs(ctx))
	return err
}

type ListInvitationsQuery struct {
	ShopID  dot.ID
	Paging  meta.Paging
	Filters meta.Filters
	Name    filter.FullTextSearch

	Result *InvitationsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListInvitations(ctx context.Context, msg *ListInvitationsQuery) (err error) {
	msg.Result, err = h.inner.ListInvitations(msg.GetArgs(ctx))
	return err
}

type ListInvitationsAcceptedByEmailQuery struct {
	Email string

	Result *InvitationsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListInvitationsAcceptedByEmail(ctx context.Context, msg *ListInvitationsAcceptedByEmailQuery) (err error) {
	msg.Result, err = h.inner.ListInvitationsAcceptedByEmail(msg.GetArgs(ctx))
	return err
}

type ListInvitationsByEmailAndPhoneQuery struct {
	Email   string
	Phone   string
	Paging  meta.Paging
	Filters meta.Filters

	Result *InvitationsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListInvitationsByEmailAndPhone(ctx context.Context, msg *ListInvitationsByEmailAndPhoneQuery) (err error) {
	msg.Result, err = h.inner.ListInvitationsByEmailAndPhone(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *AcceptInvitationCommand) command() {}
func (q *CreateInvitationCommand) command() {}
func (q *DeleteInvitationCommand) command() {}
func (q *RejectInvitationCommand) command() {}
func (q *ResendInvitationCommand) command() {}

func (q *GetInvitationQuery) query()                  {}
func (q *GetInvitationByTokenQuery) query()           {}
func (q *ListInvitationsQuery) query()                {}
func (q *ListInvitationsAcceptedByEmailQuery) query() {}
func (q *ListInvitationsByEmailAndPhoneQuery) query() {}

// implement conversion

func (q *AcceptInvitationCommand) GetArgs(ctx context.Context) (_ context.Context, userID dot.ID, token string) {
	return ctx,
		q.UserID,
		q.Token
}

func (q *CreateInvitationCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateInvitationArgs) {
	return ctx,
		&CreateInvitationArgs{
			AccountID: q.AccountID,
			Email:     q.Email,
			Phone:     q.Phone,
			FullName:  q.FullName,
			ShortName: q.ShortName,
			Position:  q.Position,
			Roles:     q.Roles,
			Status:    q.Status,
			InvitedBy: q.InvitedBy,
			CreatedBy: q.CreatedBy,
			OriginURL: q.OriginURL,
		}
}

func (q *CreateInvitationCommand) SetCreateInvitationArgs(args *CreateInvitationArgs) {
	q.AccountID = args.AccountID
	q.Email = args.Email
	q.Phone = args.Phone
	q.FullName = args.FullName
	q.ShortName = args.ShortName
	q.Position = args.Position
	q.Roles = args.Roles
	q.Status = args.Status
	q.InvitedBy = args.InvitedBy
	q.CreatedBy = args.CreatedBy
	q.OriginURL = args.OriginURL
}

func (q *DeleteInvitationCommand) GetArgs(ctx context.Context) (_ context.Context, userID dot.ID, accountID dot.ID, token string) {
	return ctx,
		q.UserID,
		q.AccountID,
		q.Token
}

func (q *RejectInvitationCommand) GetArgs(ctx context.Context) (_ context.Context, userID dot.ID, token string) {
	return ctx,
		q.UserID,
		q.Token
}

func (q *ResendInvitationCommand) GetArgs(ctx context.Context) (_ context.Context, _ *ResendInvitationArgs) {
	return ctx,
		&ResendInvitationArgs{
			AccountID: q.AccountID,
			ResendBy:  q.ResendBy,
			Email:     q.Email,
			Phone:     q.Phone,
			OriginURL: q.OriginURL,
		}
}

func (q *ResendInvitationCommand) SetResendInvitationArgs(args *ResendInvitationArgs) {
	q.AccountID = args.AccountID
	q.ResendBy = args.ResendBy
	q.Email = args.Email
	q.Phone = args.Phone
	q.OriginURL = args.OriginURL
}

func (q *GetInvitationQuery) GetArgs(ctx context.Context) (_ context.Context, ID dot.ID) {
	return ctx,
		q.ID
}

func (q *GetInvitationByTokenQuery) GetArgs(ctx context.Context) (_ context.Context, token string) {
	return ctx,
		q.Token
}

func (q *ListInvitationsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.ListQueryShopArgs) {
	return ctx,
		&shopping.ListQueryShopArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
			Name:    q.Name,
		}
}

func (q *ListInvitationsQuery) SetListQueryShopArgs(args *shopping.ListQueryShopArgs) {
	q.ShopID = args.ShopID
	q.Paging = args.Paging
	q.Filters = args.Filters
	q.Name = args.Name
}

func (q *ListInvitationsAcceptedByEmailQuery) GetArgs(ctx context.Context) (_ context.Context, email string) {
	return ctx,
		q.Email
}

func (q *ListInvitationsByEmailAndPhoneQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListInvitationsByEmailAndPhoneArgs) {
	return ctx,
		&ListInvitationsByEmailAndPhoneArgs{
			Email:   q.Email,
			Phone:   q.Phone,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListInvitationsByEmailAndPhoneQuery) SetListInvitationsByEmailAndPhoneArgs(args *ListInvitationsByEmailAndPhoneArgs) {
	q.Email = args.Email
	q.Phone = args.Phone
	q.Paging = args.Paging
	q.Filters = args.Filters
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleAcceptInvitation)
	b.AddHandler(h.HandleCreateInvitation)
	b.AddHandler(h.HandleDeleteInvitation)
	b.AddHandler(h.HandleRejectInvitation)
	b.AddHandler(h.HandleResendInvitation)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetInvitation)
	b.AddHandler(h.HandleGetInvitationByToken)
	b.AddHandler(h.HandleListInvitations)
	b.AddHandler(h.HandleListInvitationsAcceptedByEmail)
	b.AddHandler(h.HandleListInvitationsByEmailAndPhone)
	return QueryBus{b}
}
