// +build !generator

// Code generated by generator api. DO NOT EDIT.

package shipnow

import (
	context "context"
	time "time"

	orderingtypes "o.o/api/main/ordering/types"
	carriertypes "o.o/api/main/shipnow/carrier/types"
	shipnowtypes "o.o/api/main/shipnow/types"
	shippingtypes "o.o/api/main/shipping/types"
	meta "o.o/api/meta"
	shipnow_state "o.o/api/top/types/etc/shipnow_state"
	status3 "o.o/api/top/types/etc/status3"
	status4 "o.o/api/top/types/etc/status4"
	status5 "o.o/api/top/types/etc/status5"
	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CancelShipnowFulfillmentCommand struct {
	ID           dot.ID
	ShippingCode string
	ShopID       dot.ID
	ExternalID   string
	CancelReason string

	Result *meta.Empty `json:"-"`
}

func (h AggregateHandler) HandleCancelShipnowFulfillment(ctx context.Context, msg *CancelShipnowFulfillmentCommand) (err error) {
	msg.Result, err = h.inner.CancelShipnowFulfillment(msg.GetArgs(ctx))
	return err
}

type ConfirmShipnowFulfillmentCommand struct {
	ID     dot.ID
	ShopID dot.ID

	Result *ShipnowFulfillment `json:"-"`
}

func (h AggregateHandler) HandleConfirmShipnowFulfillment(ctx context.Context, msg *ConfirmShipnowFulfillmentCommand) (err error) {
	msg.Result, err = h.inner.ConfirmShipnowFulfillment(msg.GetArgs(ctx))
	return err
}

type CreateShipnowFulfillmentCommand struct {
	DeliveryPoints      []*OrderShippingInfo
	Carrier             carriertypes.ShipnowCarrier
	ShopID              dot.ID
	ShippingServiceCode string
	ShippingServiceFee  int
	ShippingNote        string
	RequestPickupAt     time.Time
	PickupAddress       *orderingtypes.Address
	ConnectionID        dot.ID
	ExternalID          string
	Coupon              string

	Result *ShipnowFulfillment `json:"-"`
}

func (h AggregateHandler) HandleCreateShipnowFulfillment(ctx context.Context, msg *CreateShipnowFulfillmentCommand) (err error) {
	msg.Result, err = h.inner.CreateShipnowFulfillment(msg.GetArgs(ctx))
	return err
}

type GetShipnowServicesCommand struct {
	ShopId         dot.ID
	OrderIds       []dot.ID
	PickupAddress  *orderingtypes.Address
	DeliveryPoints []*shipnowtypes.DeliveryPoint
	ConnectionIDs  []dot.ID
	Coupon         string

	Result *GetShipnowServicesResult `json:"-"`
}

func (h AggregateHandler) HandleGetShipnowServices(ctx context.Context, msg *GetShipnowServicesCommand) (err error) {
	msg.Result, err = h.inner.GetShipnowServices(msg.GetArgs(ctx))
	return err
}

type UpdateShipnowFulfillmentCommand struct {
	ID                  dot.ID
	DeliveryPoints      []*OrderShippingInfo
	Carrier             carriertypes.ShipnowCarrier
	ShopID              dot.ID
	ShippingServiceCode string
	ShippingServiceFee  int
	ShippingNote        string
	RequestPickupAt     time.Time
	PickupAddress       *orderingtypes.Address
	Coupon              string

	Result *ShipnowFulfillment `json:"-"`
}

func (h AggregateHandler) HandleUpdateShipnowFulfillment(ctx context.Context, msg *UpdateShipnowFulfillmentCommand) (err error) {
	msg.Result, err = h.inner.UpdateShipnowFulfillment(msg.GetArgs(ctx))
	return err
}

type UpdateShipnowFulfillmentCarrierInfoCommand struct {
	ID                         dot.ID
	ShippingCode               string
	ShippingState              shipnow_state.State
	TotalFee                   int
	FeeLines                   []*shippingtypes.ShippingFeeLine
	CarrierFeeLines            []*shippingtypes.ShippingFeeLine
	ShippingCreatedAt          time.Time
	EtopPaymentStatus          status4.Status
	ShippingStatus             status5.Status
	Status                     status5.Status
	CodEtopTransferedAt        time.Time
	ShippingPickingAt          time.Time
	ShippingDeliveringAt       time.Time
	ShippingDeliveredAt        time.Time
	ShippingCancelledAt        time.Time
	ShippingServiceName        string
	CancelReason               string
	ShippingSharedLink         string
	ShippingServiceDescription string
	DeliveryPoints             []*shipnowtypes.DeliveryPoint

	Result *ShipnowFulfillment `json:"-"`
}

func (h AggregateHandler) HandleUpdateShipnowFulfillmentCarrierInfo(ctx context.Context, msg *UpdateShipnowFulfillmentCarrierInfoCommand) (err error) {
	msg.Result, err = h.inner.UpdateShipnowFulfillmentCarrierInfo(msg.GetArgs(ctx))
	return err
}

type UpdateShipnowFulfillmentStateCommand struct {
	Id             dot.ID
	SyncStatus     status4.Status
	Status         status5.Status
	ConfirmStatus  status3.Status
	ShippingStatus status5.Status
	SyncStates     *SyncStates
	ShippingState  shipnow_state.State

	Result *ShipnowFulfillment `json:"-"`
}

func (h AggregateHandler) HandleUpdateShipnowFulfillmentState(ctx context.Context, msg *UpdateShipnowFulfillmentStateCommand) (err error) {
	msg.Result, err = h.inner.UpdateShipnowFulfillmentState(msg.GetArgs(ctx))
	return err
}

type GetShipnowFulfillmentQuery struct {
	ID           dot.ID
	ShippingCode string
	ExternalID   string
	ShopID       dot.ID

	Result *GetShipnowFulfillmentQueryResult `json:"-"`
}

func (h QueryServiceHandler) HandleGetShipnowFulfillment(ctx context.Context, msg *GetShipnowFulfillmentQuery) (err error) {
	msg.Result, err = h.inner.GetShipnowFulfillment(msg.GetArgs(ctx))
	return err
}

type GetShipnowFulfillmentByShippingCodeQuery struct {
	ShippingCode string

	Result *GetShipnowFulfillmentQueryResult `json:"-"`
}

func (h QueryServiceHandler) HandleGetShipnowFulfillmentByShippingCode(ctx context.Context, msg *GetShipnowFulfillmentByShippingCodeQuery) (err error) {
	msg.Result, err = h.inner.GetShipnowFulfillmentByShippingCode(msg.GetArgs(ctx))
	return err
}

type GetShipnowFulfillmentsQuery struct {
	ShopIds []dot.ID
	Paging  *meta.Paging
	Filters []*meta.Filter

	Result *GetShipnowFulfillmentsQueryResult `json:"-"`
}

func (h QueryServiceHandler) HandleGetShipnowFulfillments(ctx context.Context, msg *GetShipnowFulfillmentsQuery) (err error) {
	msg.Result, err = h.inner.GetShipnowFulfillments(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CancelShipnowFulfillmentCommand) command()            {}
func (q *ConfirmShipnowFulfillmentCommand) command()           {}
func (q *CreateShipnowFulfillmentCommand) command()            {}
func (q *GetShipnowServicesCommand) command()                  {}
func (q *UpdateShipnowFulfillmentCommand) command()            {}
func (q *UpdateShipnowFulfillmentCarrierInfoCommand) command() {}
func (q *UpdateShipnowFulfillmentStateCommand) command()       {}

func (q *GetShipnowFulfillmentQuery) query()               {}
func (q *GetShipnowFulfillmentByShippingCodeQuery) query() {}
func (q *GetShipnowFulfillmentsQuery) query()              {}

// implement conversion

func (q *CancelShipnowFulfillmentCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CancelShipnowFulfillmentArgs) {
	return ctx,
		&CancelShipnowFulfillmentArgs{
			ID:           q.ID,
			ShippingCode: q.ShippingCode,
			ShopID:       q.ShopID,
			ExternalID:   q.ExternalID,
			CancelReason: q.CancelReason,
		}
}

func (q *CancelShipnowFulfillmentCommand) SetCancelShipnowFulfillmentArgs(args *CancelShipnowFulfillmentArgs) {
	q.ID = args.ID
	q.ShippingCode = args.ShippingCode
	q.ShopID = args.ShopID
	q.ExternalID = args.ExternalID
	q.CancelReason = args.CancelReason
}

func (q *ConfirmShipnowFulfillmentCommand) GetArgs(ctx context.Context) (_ context.Context, _ *ConfirmShipnowFulfillmentArgs) {
	return ctx,
		&ConfirmShipnowFulfillmentArgs{
			ID:     q.ID,
			ShopID: q.ShopID,
		}
}

func (q *ConfirmShipnowFulfillmentCommand) SetConfirmShipnowFulfillmentArgs(args *ConfirmShipnowFulfillmentArgs) {
	q.ID = args.ID
	q.ShopID = args.ShopID
}

func (q *CreateShipnowFulfillmentCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateShipnowFulfillmentArgs) {
	return ctx,
		&CreateShipnowFulfillmentArgs{
			DeliveryPoints:      q.DeliveryPoints,
			Carrier:             q.Carrier,
			ShopID:              q.ShopID,
			ShippingServiceCode: q.ShippingServiceCode,
			ShippingServiceFee:  q.ShippingServiceFee,
			ShippingNote:        q.ShippingNote,
			RequestPickupAt:     q.RequestPickupAt,
			PickupAddress:       q.PickupAddress,
			ConnectionID:        q.ConnectionID,
			ExternalID:          q.ExternalID,
			Coupon:              q.Coupon,
		}
}

func (q *CreateShipnowFulfillmentCommand) SetCreateShipnowFulfillmentArgs(args *CreateShipnowFulfillmentArgs) {
	q.DeliveryPoints = args.DeliveryPoints
	q.Carrier = args.Carrier
	q.ShopID = args.ShopID
	q.ShippingServiceCode = args.ShippingServiceCode
	q.ShippingServiceFee = args.ShippingServiceFee
	q.ShippingNote = args.ShippingNote
	q.RequestPickupAt = args.RequestPickupAt
	q.PickupAddress = args.PickupAddress
	q.ConnectionID = args.ConnectionID
	q.ExternalID = args.ExternalID
	q.Coupon = args.Coupon
}

func (q *GetShipnowServicesCommand) GetArgs(ctx context.Context) (_ context.Context, _ *GetShipnowServicesArgs) {
	return ctx,
		&GetShipnowServicesArgs{
			ShopId:         q.ShopId,
			OrderIds:       q.OrderIds,
			PickupAddress:  q.PickupAddress,
			DeliveryPoints: q.DeliveryPoints,
			ConnectionIDs:  q.ConnectionIDs,
			Coupon:         q.Coupon,
		}
}

func (q *GetShipnowServicesCommand) SetGetShipnowServicesArgs(args *GetShipnowServicesArgs) {
	q.ShopId = args.ShopId
	q.OrderIds = args.OrderIds
	q.PickupAddress = args.PickupAddress
	q.DeliveryPoints = args.DeliveryPoints
	q.ConnectionIDs = args.ConnectionIDs
	q.Coupon = args.Coupon
}

func (q *UpdateShipnowFulfillmentCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShipnowFulfillmentArgs) {
	return ctx,
		&UpdateShipnowFulfillmentArgs{
			ID:                  q.ID,
			DeliveryPoints:      q.DeliveryPoints,
			Carrier:             q.Carrier,
			ShopID:              q.ShopID,
			ShippingServiceCode: q.ShippingServiceCode,
			ShippingServiceFee:  q.ShippingServiceFee,
			ShippingNote:        q.ShippingNote,
			RequestPickupAt:     q.RequestPickupAt,
			PickupAddress:       q.PickupAddress,
			Coupon:              q.Coupon,
		}
}

func (q *UpdateShipnowFulfillmentCommand) SetUpdateShipnowFulfillmentArgs(args *UpdateShipnowFulfillmentArgs) {
	q.ID = args.ID
	q.DeliveryPoints = args.DeliveryPoints
	q.Carrier = args.Carrier
	q.ShopID = args.ShopID
	q.ShippingServiceCode = args.ShippingServiceCode
	q.ShippingServiceFee = args.ShippingServiceFee
	q.ShippingNote = args.ShippingNote
	q.RequestPickupAt = args.RequestPickupAt
	q.PickupAddress = args.PickupAddress
	q.Coupon = args.Coupon
}

func (q *UpdateShipnowFulfillmentCarrierInfoCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShipnowFulfillmentCarrierInfoArgs) {
	return ctx,
		&UpdateShipnowFulfillmentCarrierInfoArgs{
			ID:                         q.ID,
			ShippingCode:               q.ShippingCode,
			ShippingState:              q.ShippingState,
			TotalFee:                   q.TotalFee,
			FeeLines:                   q.FeeLines,
			CarrierFeeLines:            q.CarrierFeeLines,
			ShippingCreatedAt:          q.ShippingCreatedAt,
			EtopPaymentStatus:          q.EtopPaymentStatus,
			ShippingStatus:             q.ShippingStatus,
			Status:                     q.Status,
			CodEtopTransferedAt:        q.CodEtopTransferedAt,
			ShippingPickingAt:          q.ShippingPickingAt,
			ShippingDeliveringAt:       q.ShippingDeliveringAt,
			ShippingDeliveredAt:        q.ShippingDeliveredAt,
			ShippingCancelledAt:        q.ShippingCancelledAt,
			ShippingServiceName:        q.ShippingServiceName,
			CancelReason:               q.CancelReason,
			ShippingSharedLink:         q.ShippingSharedLink,
			ShippingServiceDescription: q.ShippingServiceDescription,
			DeliveryPoints:             q.DeliveryPoints,
		}
}

func (q *UpdateShipnowFulfillmentCarrierInfoCommand) SetUpdateShipnowFulfillmentCarrierInfoArgs(args *UpdateShipnowFulfillmentCarrierInfoArgs) {
	q.ID = args.ID
	q.ShippingCode = args.ShippingCode
	q.ShippingState = args.ShippingState
	q.TotalFee = args.TotalFee
	q.FeeLines = args.FeeLines
	q.CarrierFeeLines = args.CarrierFeeLines
	q.ShippingCreatedAt = args.ShippingCreatedAt
	q.EtopPaymentStatus = args.EtopPaymentStatus
	q.ShippingStatus = args.ShippingStatus
	q.Status = args.Status
	q.CodEtopTransferedAt = args.CodEtopTransferedAt
	q.ShippingPickingAt = args.ShippingPickingAt
	q.ShippingDeliveringAt = args.ShippingDeliveringAt
	q.ShippingDeliveredAt = args.ShippingDeliveredAt
	q.ShippingCancelledAt = args.ShippingCancelledAt
	q.ShippingServiceName = args.ShippingServiceName
	q.CancelReason = args.CancelReason
	q.ShippingSharedLink = args.ShippingSharedLink
	q.ShippingServiceDescription = args.ShippingServiceDescription
	q.DeliveryPoints = args.DeliveryPoints
}

func (q *UpdateShipnowFulfillmentStateCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShipnowFulfillmentStateArgs) {
	return ctx,
		&UpdateShipnowFulfillmentStateArgs{
			Id:             q.Id,
			SyncStatus:     q.SyncStatus,
			Status:         q.Status,
			ConfirmStatus:  q.ConfirmStatus,
			ShippingStatus: q.ShippingStatus,
			SyncStates:     q.SyncStates,
			ShippingState:  q.ShippingState,
		}
}

func (q *UpdateShipnowFulfillmentStateCommand) SetUpdateShipnowFulfillmentStateArgs(args *UpdateShipnowFulfillmentStateArgs) {
	q.Id = args.Id
	q.SyncStatus = args.SyncStatus
	q.Status = args.Status
	q.ConfirmStatus = args.ConfirmStatus
	q.ShippingStatus = args.ShippingStatus
	q.SyncStates = args.SyncStates
	q.ShippingState = args.ShippingState
}

func (q *GetShipnowFulfillmentQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShipnowFulfillmentQueryArgs) {
	return ctx,
		&GetShipnowFulfillmentQueryArgs{
			ID:           q.ID,
			ShippingCode: q.ShippingCode,
			ExternalID:   q.ExternalID,
			ShopID:       q.ShopID,
		}
}

func (q *GetShipnowFulfillmentQuery) SetGetShipnowFulfillmentQueryArgs(args *GetShipnowFulfillmentQueryArgs) {
	q.ID = args.ID
	q.ShippingCode = args.ShippingCode
	q.ExternalID = args.ExternalID
	q.ShopID = args.ShopID
}

func (q *GetShipnowFulfillmentByShippingCodeQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShipnowFulfillmentByShippingCodeQueryArgs) {
	return ctx,
		&GetShipnowFulfillmentByShippingCodeQueryArgs{
			ShippingCode: q.ShippingCode,
		}
}

func (q *GetShipnowFulfillmentByShippingCodeQuery) SetGetShipnowFulfillmentByShippingCodeQueryArgs(args *GetShipnowFulfillmentByShippingCodeQueryArgs) {
	q.ShippingCode = args.ShippingCode
}

func (q *GetShipnowFulfillmentsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShipnowFulfillmentsQueryArgs) {
	return ctx,
		&GetShipnowFulfillmentsQueryArgs{
			ShopIds: q.ShopIds,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *GetShipnowFulfillmentsQuery) SetGetShipnowFulfillmentsQueryArgs(args *GetShipnowFulfillmentsQueryArgs) {
	q.ShopIds = args.ShopIds
	q.Paging = args.Paging
	q.Filters = args.Filters
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCancelShipnowFulfillment)
	b.AddHandler(h.HandleConfirmShipnowFulfillment)
	b.AddHandler(h.HandleCreateShipnowFulfillment)
	b.AddHandler(h.HandleGetShipnowServices)
	b.AddHandler(h.HandleUpdateShipnowFulfillment)
	b.AddHandler(h.HandleUpdateShipnowFulfillmentCarrierInfo)
	b.AddHandler(h.HandleUpdateShipnowFulfillmentState)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetShipnowFulfillment)
	b.AddHandler(h.HandleGetShipnowFulfillmentByShippingCode)
	b.AddHandler(h.HandleGetShipnowFulfillments)
	return QueryBus{b}
}
