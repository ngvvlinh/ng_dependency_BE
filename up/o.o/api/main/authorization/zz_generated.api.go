// +build !generator

// Code generated by generator api. DO NOT EDIT.

package authorization

import (
	context "context"

	meta "o.o/api/meta"
	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type LeaveAccountCommand struct {
	UserID    dot.ID
	AccountID dot.ID

	Result int `json:"-"`
}

func (h AggregateHandler) HandleLeaveAccount(ctx context.Context, msg *LeaveAccountCommand) (err error) {
	msg.Result, err = h.inner.LeaveAccount(msg.GetArgs(ctx))
	return err
}

type RemoveUserCommand struct {
	AccountID     dot.ID
	CurrentUserID dot.ID
	UserID        dot.ID
	Roles         []Role

	Result int `json:"-"`
}

func (h AggregateHandler) HandleRemoveUser(ctx context.Context, msg *RemoveUserCommand) (err error) {
	msg.Result, err = h.inner.RemoveUser(msg.GetArgs(ctx))
	return err
}

type UpdatePermissionCommand struct {
	AccountID  dot.ID
	CurrUserID dot.ID
	UserID     dot.ID
	Roles      []Role

	Result *Relationship `json:"-"`
}

func (h AggregateHandler) HandleUpdatePermission(ctx context.Context, msg *UpdatePermissionCommand) (err error) {
	msg.Result, err = h.inner.UpdatePermission(msg.GetArgs(ctx))
	return err
}

type UpdateRelationshipCommand struct {
	AccountID dot.ID
	UserID    dot.ID
	FullName  dot.NullString
	ShortName dot.NullString
	Position  dot.NullString

	Result *Relationship `json:"-"`
}

func (h AggregateHandler) HandleUpdateRelationship(ctx context.Context, msg *UpdateRelationshipCommand) (err error) {
	msg.Result, err = h.inner.UpdateRelationship(msg.GetArgs(ctx))
	return err
}

type GetAccountAuthorizationQuery struct {
	AccountID dot.ID

	Result []*Authorization `json:"-"`
}

func (h QueryServiceHandler) HandleGetAccountAuthorization(ctx context.Context, msg *GetAccountAuthorizationQuery) (err error) {
	msg.Result, err = h.inner.GetAccountAuthorization(msg.GetArgs(ctx))
	return err
}

type GetAuthorizationQuery struct {
	AccountID dot.ID
	UserID    dot.ID

	Result *Authorization `json:"-"`
}

func (h QueryServiceHandler) HandleGetAuthorization(ctx context.Context, msg *GetAuthorizationQuery) (err error) {
	msg.Result, err = h.inner.GetAuthorization(msg.GetArgs(ctx))
	return err
}

type GetRelationshipsQuery struct {
	AccountID dot.ID
	Paging    meta.Paging
	Filters   meta.Filters

	Result []*Relationship `json:"-"`
}

func (h QueryServiceHandler) HandleGetRelationships(ctx context.Context, msg *GetRelationshipsQuery) (err error) {
	msg.Result, err = h.inner.GetRelationships(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *LeaveAccountCommand) command()       {}
func (q *RemoveUserCommand) command()         {}
func (q *UpdatePermissionCommand) command()   {}
func (q *UpdateRelationshipCommand) command() {}

func (q *GetAccountAuthorizationQuery) query() {}
func (q *GetAuthorizationQuery) query()        {}
func (q *GetRelationshipsQuery) query()        {}

// implement conversion

func (q *LeaveAccountCommand) GetArgs(ctx context.Context) (_ context.Context, userID dot.ID, accountID dot.ID) {
	return ctx,
		q.UserID,
		q.AccountID
}

func (q *RemoveUserCommand) GetArgs(ctx context.Context) (_ context.Context, _ *RemoveUserArgs) {
	return ctx,
		&RemoveUserArgs{
			AccountID:     q.AccountID,
			CurrentUserID: q.CurrentUserID,
			UserID:        q.UserID,
			Roles:         q.Roles,
		}
}

func (q *RemoveUserCommand) SetRemoveUserArgs(args *RemoveUserArgs) {
	q.AccountID = args.AccountID
	q.CurrentUserID = args.CurrentUserID
	q.UserID = args.UserID
	q.Roles = args.Roles
}

func (q *UpdatePermissionCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdatePermissionArgs) {
	return ctx,
		&UpdatePermissionArgs{
			AccountID:  q.AccountID,
			CurrUserID: q.CurrUserID,
			UserID:     q.UserID,
			Roles:      q.Roles,
		}
}

func (q *UpdatePermissionCommand) SetUpdatePermissionArgs(args *UpdatePermissionArgs) {
	q.AccountID = args.AccountID
	q.CurrUserID = args.CurrUserID
	q.UserID = args.UserID
	q.Roles = args.Roles
}

func (q *UpdateRelationshipCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateRelationshipArgs) {
	return ctx,
		&UpdateRelationshipArgs{
			AccountID: q.AccountID,
			UserID:    q.UserID,
			FullName:  q.FullName,
			ShortName: q.ShortName,
			Position:  q.Position,
		}
}

func (q *UpdateRelationshipCommand) SetUpdateRelationshipArgs(args *UpdateRelationshipArgs) {
	q.AccountID = args.AccountID
	q.UserID = args.UserID
	q.FullName = args.FullName
	q.ShortName = args.ShortName
	q.Position = args.Position
}

func (q *GetAccountAuthorizationQuery) GetArgs(ctx context.Context) (_ context.Context, accountID dot.ID) {
	return ctx,
		q.AccountID
}

func (q *GetAuthorizationQuery) GetArgs(ctx context.Context) (_ context.Context, accountID dot.ID, userID dot.ID) {
	return ctx,
		q.AccountID,
		q.UserID
}

func (q *GetRelationshipsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetRelationshipsArgs) {
	return ctx,
		&GetRelationshipsArgs{
			AccountID: q.AccountID,
			Paging:    q.Paging,
			Filters:   q.Filters,
		}
}

func (q *GetRelationshipsQuery) SetGetRelationshipsArgs(args *GetRelationshipsArgs) {
	q.AccountID = args.AccountID
	q.Paging = args.Paging
	q.Filters = args.Filters
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleLeaveAccount)
	b.AddHandler(h.HandleRemoveUser)
	b.AddHandler(h.HandleUpdatePermission)
	b.AddHandler(h.HandleUpdateRelationship)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetAccountAuthorization)
	b.AddHandler(h.HandleGetAuthorization)
	b.AddHandler(h.HandleGetRelationships)
	return QueryBus{b}
}
