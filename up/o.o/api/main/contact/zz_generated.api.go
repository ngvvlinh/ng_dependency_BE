// +build !generator

// Code generated by generator api. DO NOT EDIT.

package contact

import (
	context "context"

	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateContactCommand struct {
	ShopID   dot.ID
	FullName string
	Phone    string

	Result *Contact `json:"-"`
}

func (h AggregateHandler) HandleCreateContact(ctx context.Context, msg *CreateContactCommand) (err error) {
	msg.Result, err = h.inner.CreateContact(msg.GetArgs(ctx))
	return err
}

type DeleteContactCommand struct {
	ID     dot.ID
	ShopID dot.ID

	Result int `json:"-"`
}

func (h AggregateHandler) HandleDeleteContact(ctx context.Context, msg *DeleteContactCommand) (err error) {
	msg.Result, err = h.inner.DeleteContact(msg.GetArgs(ctx))
	return err
}

type UpdateContactCommand struct {
	ID       dot.ID
	ShopID   dot.ID
	FullName dot.NullString
	Phone    dot.NullString

	Result *Contact `json:"-"`
}

func (h AggregateHandler) HandleUpdateContact(ctx context.Context, msg *UpdateContactCommand) (err error) {
	msg.Result, err = h.inner.UpdateContact(msg.GetArgs(ctx))
	return err
}

type GetContactByIDQuery struct {
	ID     dot.ID
	ShopID dot.ID

	Result *Contact `json:"-"`
}

func (h QueryServiceHandler) HandleGetContactByID(ctx context.Context, msg *GetContactByIDQuery) (err error) {
	msg.Result, err = h.inner.GetContactByID(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateContactCommand) command() {}
func (q *DeleteContactCommand) command() {}
func (q *UpdateContactCommand) command() {}

func (q *GetContactByIDQuery) query() {}

// implement conversion

func (q *CreateContactCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateContactArgs) {
	return ctx,
		&CreateContactArgs{
			ShopID:   q.ShopID,
			FullName: q.FullName,
			Phone:    q.Phone,
		}
}

func (q *CreateContactCommand) SetCreateContactArgs(args *CreateContactArgs) {
	q.ShopID = args.ShopID
	q.FullName = args.FullName
	q.Phone = args.Phone
}

func (q *DeleteContactCommand) GetArgs(ctx context.Context) (_ context.Context, _ *DeleteContactArgs) {
	return ctx,
		&DeleteContactArgs{
			ID:     q.ID,
			ShopID: q.ShopID,
		}
}

func (q *DeleteContactCommand) SetDeleteContactArgs(args *DeleteContactArgs) {
	q.ID = args.ID
	q.ShopID = args.ShopID
}

func (q *UpdateContactCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateContactArgs) {
	return ctx,
		&UpdateContactArgs{
			ID:       q.ID,
			ShopID:   q.ShopID,
			FullName: q.FullName,
			Phone:    q.Phone,
		}
}

func (q *UpdateContactCommand) SetUpdateContactArgs(args *UpdateContactArgs) {
	q.ID = args.ID
	q.ShopID = args.ShopID
	q.FullName = args.FullName
	q.Phone = args.Phone
}

func (q *GetContactByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetContactByIDArgs) {
	return ctx,
		&GetContactByIDArgs{
			ID:     q.ID,
			ShopID: q.ShopID,
		}
}

func (q *GetContactByIDQuery) SetGetContactByIDArgs(args *GetContactByIDArgs) {
	q.ID = args.ID
	q.ShopID = args.ShopID
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateContact)
	b.AddHandler(h.HandleDeleteContact)
	b.AddHandler(h.HandleUpdateContact)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetContactByID)
	return QueryBus{b}
}
