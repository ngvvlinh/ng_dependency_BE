// +build !generator

// Code generated by generator api. DO NOT EDIT.

package purchaserefund

import (
	context "context"

	meta "o.o/api/meta"
	inttypes "o.o/api/top/int/types"
	inventory_auto "o.o/api/top/types/etc/inventory_auto"
	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CancelPurchaseRefundCommand struct {
	ShopID               dot.ID
	ID                   dot.ID
	UpdatedBy            dot.ID
	CancelReason         string
	AutoInventoryVoucher inventory_auto.AutoInventoryVoucher
	InventoryOverStock   bool

	Result *PurchaseRefund `json:"-"`
}

func (h AggregateHandler) HandleCancelPurchaseRefund(ctx context.Context, msg *CancelPurchaseRefundCommand) (err error) {
	msg.Result, err = h.inner.CancelPurchaseRefund(msg.GetArgs(ctx))
	return err
}

type ConfirmPurchaseRefundCommand struct {
	ShopID               dot.ID
	ID                   dot.ID
	UpdatedBy            dot.ID
	AutoInventoryVoucher inventory_auto.AutoInventoryVoucher
	InventoryOverStock   bool

	Result *PurchaseRefund `json:"-"`
}

func (h AggregateHandler) HandleConfirmPurchaseRefund(ctx context.Context, msg *ConfirmPurchaseRefundCommand) (err error) {
	msg.Result, err = h.inner.ConfirmPurchaseRefund(msg.GetArgs(ctx))
	return err
}

type CreatePurchaseRefundCommand struct {
	Lines           []*PurchaseRefundLine
	PurchaseOrderID dot.ID
	AdjustmentLines []*inttypes.AdjustmentLine
	TotalAdjustment int
	TotalAmount     int
	BasketValue     int
	ShopID          dot.ID
	CreatedBy       dot.ID
	Note            string

	Result *PurchaseRefund `json:"-"`
}

func (h AggregateHandler) HandleCreatePurchaseRefund(ctx context.Context, msg *CreatePurchaseRefundCommand) (err error) {
	msg.Result, err = h.inner.CreatePurchaseRefund(msg.GetArgs(ctx))
	return err
}

type UpdatePurchaseRefundCommand struct {
	Lines           []*PurchaseRefundLine
	ID              dot.ID
	ShopID          dot.ID
	AdjustmentLines []*inttypes.AdjustmentLine
	TotalAdjustment dot.NullInt
	TotalAmount     dot.NullInt
	UpdateBy        dot.ID
	BasketValue     dot.NullInt
	Note            dot.NullString

	Result *PurchaseRefund `json:"-"`
}

func (h AggregateHandler) HandleUpdatePurchaseRefund(ctx context.Context, msg *UpdatePurchaseRefundCommand) (err error) {
	msg.Result, err = h.inner.UpdatePurchaseRefund(msg.GetArgs(ctx))
	return err
}

type GetPurchaseRefundByIDQuery struct {
	ID     dot.ID
	ShopID dot.ID

	Result *PurchaseRefund `json:"-"`
}

func (h QueryServiceHandler) HandleGetPurchaseRefundByID(ctx context.Context, msg *GetPurchaseRefundByIDQuery) (err error) {
	msg.Result, err = h.inner.GetPurchaseRefundByID(msg.GetArgs(ctx))
	return err
}

type GetPurchaseRefundsByIDsQuery struct {
	IDs    []dot.ID
	ShopID dot.ID

	Result []*PurchaseRefund `json:"-"`
}

func (h QueryServiceHandler) HandleGetPurchaseRefundsByIDs(ctx context.Context, msg *GetPurchaseRefundsByIDsQuery) (err error) {
	msg.Result, err = h.inner.GetPurchaseRefundsByIDs(msg.GetArgs(ctx))
	return err
}

type GetPurchaseRefundsByPurchaseOrderIDQuery struct {
	PurchaseOrderID dot.ID
	ShopID          dot.ID

	Result []*PurchaseRefund `json:"-"`
}

func (h QueryServiceHandler) HandleGetPurchaseRefundsByPurchaseOrderID(ctx context.Context, msg *GetPurchaseRefundsByPurchaseOrderIDQuery) (err error) {
	msg.Result, err = h.inner.GetPurchaseRefundsByPurchaseOrderID(msg.GetArgs(ctx))
	return err
}

type ListPurchaseRefundsQuery struct {
	ShopID  dot.ID
	Paging  meta.Paging
	Filters meta.Filters

	Result *GetPurchaseRefundsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListPurchaseRefunds(ctx context.Context, msg *ListPurchaseRefundsQuery) (err error) {
	msg.Result, err = h.inner.ListPurchaseRefunds(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CancelPurchaseRefundCommand) command()  {}
func (q *ConfirmPurchaseRefundCommand) command() {}
func (q *CreatePurchaseRefundCommand) command()  {}
func (q *UpdatePurchaseRefundCommand) command()  {}

func (q *GetPurchaseRefundByIDQuery) query()               {}
func (q *GetPurchaseRefundsByIDsQuery) query()             {}
func (q *GetPurchaseRefundsByPurchaseOrderIDQuery) query() {}
func (q *ListPurchaseRefundsQuery) query()                 {}

// implement conversion

func (q *CancelPurchaseRefundCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CancelPurchaseRefundArgs) {
	return ctx,
		&CancelPurchaseRefundArgs{
			ShopID:               q.ShopID,
			ID:                   q.ID,
			UpdatedBy:            q.UpdatedBy,
			CancelReason:         q.CancelReason,
			AutoInventoryVoucher: q.AutoInventoryVoucher,
			InventoryOverStock:   q.InventoryOverStock,
		}
}

func (q *CancelPurchaseRefundCommand) SetCancelPurchaseRefundArgs(args *CancelPurchaseRefundArgs) {
	q.ShopID = args.ShopID
	q.ID = args.ID
	q.UpdatedBy = args.UpdatedBy
	q.CancelReason = args.CancelReason
	q.AutoInventoryVoucher = args.AutoInventoryVoucher
	q.InventoryOverStock = args.InventoryOverStock
}

func (q *ConfirmPurchaseRefundCommand) GetArgs(ctx context.Context) (_ context.Context, _ *ConfirmPurchaseRefundArgs) {
	return ctx,
		&ConfirmPurchaseRefundArgs{
			ShopID:               q.ShopID,
			ID:                   q.ID,
			UpdatedBy:            q.UpdatedBy,
			AutoInventoryVoucher: q.AutoInventoryVoucher,
			InventoryOverStock:   q.InventoryOverStock,
		}
}

func (q *ConfirmPurchaseRefundCommand) SetConfirmPurchaseRefundArgs(args *ConfirmPurchaseRefundArgs) {
	q.ShopID = args.ShopID
	q.ID = args.ID
	q.UpdatedBy = args.UpdatedBy
	q.AutoInventoryVoucher = args.AutoInventoryVoucher
	q.InventoryOverStock = args.InventoryOverStock
}

func (q *CreatePurchaseRefundCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreatePurchaseRefundArgs) {
	return ctx,
		&CreatePurchaseRefundArgs{
			Lines:           q.Lines,
			PurchaseOrderID: q.PurchaseOrderID,
			AdjustmentLines: q.AdjustmentLines,
			TotalAdjustment: q.TotalAdjustment,
			TotalAmount:     q.TotalAmount,
			BasketValue:     q.BasketValue,
			ShopID:          q.ShopID,
			CreatedBy:       q.CreatedBy,
			Note:            q.Note,
		}
}

func (q *CreatePurchaseRefundCommand) SetCreatePurchaseRefundArgs(args *CreatePurchaseRefundArgs) {
	q.Lines = args.Lines
	q.PurchaseOrderID = args.PurchaseOrderID
	q.AdjustmentLines = args.AdjustmentLines
	q.TotalAdjustment = args.TotalAdjustment
	q.TotalAmount = args.TotalAmount
	q.BasketValue = args.BasketValue
	q.ShopID = args.ShopID
	q.CreatedBy = args.CreatedBy
	q.Note = args.Note
}

func (q *UpdatePurchaseRefundCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdatePurchaseRefundArgs) {
	return ctx,
		&UpdatePurchaseRefundArgs{
			Lines:           q.Lines,
			ID:              q.ID,
			ShopID:          q.ShopID,
			AdjustmentLines: q.AdjustmentLines,
			TotalAdjustment: q.TotalAdjustment,
			TotalAmount:     q.TotalAmount,
			UpdateBy:        q.UpdateBy,
			BasketValue:     q.BasketValue,
			Note:            q.Note,
		}
}

func (q *UpdatePurchaseRefundCommand) SetUpdatePurchaseRefundArgs(args *UpdatePurchaseRefundArgs) {
	q.Lines = args.Lines
	q.ID = args.ID
	q.ShopID = args.ShopID
	q.AdjustmentLines = args.AdjustmentLines
	q.TotalAdjustment = args.TotalAdjustment
	q.TotalAmount = args.TotalAmount
	q.UpdateBy = args.UpdateBy
	q.BasketValue = args.BasketValue
	q.Note = args.Note
}

func (q *GetPurchaseRefundByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetPurchaseRefundByIDArgs) {
	return ctx,
		&GetPurchaseRefundByIDArgs{
			ID:     q.ID,
			ShopID: q.ShopID,
		}
}

func (q *GetPurchaseRefundByIDQuery) SetGetPurchaseRefundByIDArgs(args *GetPurchaseRefundByIDArgs) {
	q.ID = args.ID
	q.ShopID = args.ShopID
}

func (q *GetPurchaseRefundsByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetPurchaseRefundsByIDsArgs) {
	return ctx,
		&GetPurchaseRefundsByIDsArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
		}
}

func (q *GetPurchaseRefundsByIDsQuery) SetGetPurchaseRefundsByIDsArgs(args *GetPurchaseRefundsByIDsArgs) {
	q.IDs = args.IDs
	q.ShopID = args.ShopID
}

func (q *GetPurchaseRefundsByPurchaseOrderIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetPurchaseRefundsByPurchaseOrderIDRequest) {
	return ctx,
		&GetPurchaseRefundsByPurchaseOrderIDRequest{
			PurchaseOrderID: q.PurchaseOrderID,
			ShopID:          q.ShopID,
		}
}

func (q *GetPurchaseRefundsByPurchaseOrderIDQuery) SetGetPurchaseRefundsByPurchaseOrderIDRequest(args *GetPurchaseRefundsByPurchaseOrderIDRequest) {
	q.PurchaseOrderID = args.PurchaseOrderID
	q.ShopID = args.ShopID
}

func (q *ListPurchaseRefundsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetPurchaseRefundsArgs) {
	return ctx,
		&GetPurchaseRefundsArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListPurchaseRefundsQuery) SetGetPurchaseRefundsArgs(args *GetPurchaseRefundsArgs) {
	q.ShopID = args.ShopID
	q.Paging = args.Paging
	q.Filters = args.Filters
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCancelPurchaseRefund)
	b.AddHandler(h.HandleConfirmPurchaseRefund)
	b.AddHandler(h.HandleCreatePurchaseRefund)
	b.AddHandler(h.HandleUpdatePurchaseRefund)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetPurchaseRefundByID)
	b.AddHandler(h.HandleGetPurchaseRefundsByIDs)
	b.AddHandler(h.HandleGetPurchaseRefundsByPurchaseOrderID)
	b.AddHandler(h.HandleListPurchaseRefunds)
	return QueryBus{b}
}
