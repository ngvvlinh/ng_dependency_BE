// +build !generator

// Code generated by generator api. DO NOT EDIT.

package department

import (
	context "context"

	meta "o.o/api/meta"
	capi "o.o/capi"
	dot "o.o/capi/dot"
	filter "o.o/capi/filter"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateDepartmentCommand struct {
	AccountID   dot.ID
	Name        string
	Description string

	Result *Department `json:"-"`
}

func (h AggregateHandler) HandleCreateDepartment(ctx context.Context, msg *CreateDepartmentCommand) (err error) {
	msg.Result, err = h.inner.CreateDepartment(msg.GetArgs(ctx))
	return err
}

type DeleteDepartmentCommand struct {
	ID        dot.ID
	AccountID dot.ID

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleDeleteDepartment(ctx context.Context, msg *DeleteDepartmentCommand) (err error) {
	return h.inner.DeleteDepartment(msg.GetArgs(ctx))
}

type UpdateDepartmentCommand struct {
	ID          dot.ID
	AccountID   dot.ID
	Name        string
	Description string

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleUpdateDepartment(ctx context.Context, msg *UpdateDepartmentCommand) (err error) {
	return h.inner.UpdateDepartment(msg.GetArgs(ctx))
}

type GetDepartmentByIDQuery struct {
	ID        dot.ID
	AccountID dot.ID

	Result *Department `json:"-"`
}

func (h QueryServiceHandler) HandleGetDepartmentByID(ctx context.Context, msg *GetDepartmentByIDQuery) (err error) {
	msg.Result, err = h.inner.GetDepartmentByID(msg.GetArgs(ctx))
	return err
}

type ListDepartmentsQuery struct {
	AccountID dot.ID
	Name      filter.FullTextSearch
	Paging    meta.Paging
	Filters   meta.Filters

	Result *ListDepartmentsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListDepartments(ctx context.Context, msg *ListDepartmentsQuery) (err error) {
	msg.Result, err = h.inner.ListDepartments(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateDepartmentCommand) command() {}
func (q *DeleteDepartmentCommand) command() {}
func (q *UpdateDepartmentCommand) command() {}

func (q *GetDepartmentByIDQuery) query() {}
func (q *ListDepartmentsQuery) query()   {}

// implement conversion

func (q *CreateDepartmentCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateDepartmentArgs) {
	return ctx,
		&CreateDepartmentArgs{
			AccountID:   q.AccountID,
			Name:        q.Name,
			Description: q.Description,
		}
}

func (q *CreateDepartmentCommand) SetCreateDepartmentArgs(args *CreateDepartmentArgs) {
	q.AccountID = args.AccountID
	q.Name = args.Name
	q.Description = args.Description
}

func (q *DeleteDepartmentCommand) GetArgs(ctx context.Context) (_ context.Context, _ *DeleteDepartmentArgs) {
	return ctx,
		&DeleteDepartmentArgs{
			ID:        q.ID,
			AccountID: q.AccountID,
		}
}

func (q *DeleteDepartmentCommand) SetDeleteDepartmentArgs(args *DeleteDepartmentArgs) {
	q.ID = args.ID
	q.AccountID = args.AccountID
}

func (q *UpdateDepartmentCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateDepartmentArgs) {
	return ctx,
		&UpdateDepartmentArgs{
			ID:          q.ID,
			AccountID:   q.AccountID,
			Name:        q.Name,
			Description: q.Description,
		}
}

func (q *UpdateDepartmentCommand) SetUpdateDepartmentArgs(args *UpdateDepartmentArgs) {
	q.ID = args.ID
	q.AccountID = args.AccountID
	q.Name = args.Name
	q.Description = args.Description
}

func (q *GetDepartmentByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetDepartmentByIDArgs) {
	return ctx,
		&GetDepartmentByIDArgs{
			ID:        q.ID,
			AccountID: q.AccountID,
		}
}

func (q *GetDepartmentByIDQuery) SetGetDepartmentByIDArgs(args *GetDepartmentByIDArgs) {
	q.ID = args.ID
	q.AccountID = args.AccountID
}

func (q *ListDepartmentsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListDepartmentsArgs) {
	return ctx,
		&ListDepartmentsArgs{
			AccountID: q.AccountID,
			Name:      q.Name,
			Paging:    q.Paging,
			Filters:   q.Filters,
		}
}

func (q *ListDepartmentsQuery) SetListDepartmentsArgs(args *ListDepartmentsArgs) {
	q.AccountID = args.AccountID
	q.Name = args.Name
	q.Paging = args.Paging
	q.Filters = args.Filters
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateDepartment)
	b.AddHandler(h.HandleDeleteDepartment)
	b.AddHandler(h.HandleUpdateDepartment)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetDepartmentByID)
	b.AddHandler(h.HandleListDepartments)
	return QueryBus{b}
}
