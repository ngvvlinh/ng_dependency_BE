// +build !generator

// Code generated by generator api. DO NOT EDIT.

package subpricelist

import (
	context "context"

	status3 "o.o/api/top/types/etc/status3"
	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateShipmentSubPriceListCommand struct {
	Name         string
	Description  string
	ConnectionID dot.ID

	Result *ShipmentSubPriceList `json:"-"`
}

func (h AggregateHandler) HandleCreateShipmentSubPriceList(ctx context.Context, msg *CreateShipmentSubPriceListCommand) (err error) {
	msg.Result, err = h.inner.CreateShipmentSubPriceList(msg.GetArgs(ctx))
	return err
}

type DeleteShipmentSubPriceListCommand struct {
	ID dot.ID

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleDeleteShipmentSubPriceList(ctx context.Context, msg *DeleteShipmentSubPriceListCommand) (err error) {
	return h.inner.DeleteShipmentSubPriceList(msg.GetArgs(ctx))
}

type UpdateShipmentSubPriceListCommand struct {
	ID          dot.ID
	Name        string
	Description string
	Status      status3.NullStatus

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleUpdateShipmentSubPriceList(ctx context.Context, msg *UpdateShipmentSubPriceListCommand) (err error) {
	return h.inner.UpdateShipmentSubPriceList(msg.GetArgs(ctx))
}

type GetShipmentSubPriceListQuery struct {
	ID dot.ID

	Result *ShipmentSubPriceList `json:"-"`
}

func (h QueryServiceHandler) HandleGetShipmentSubPriceList(ctx context.Context, msg *GetShipmentSubPriceListQuery) (err error) {
	msg.Result, err = h.inner.GetShipmentSubPriceList(msg.GetArgs(ctx))
	return err
}

type ListShipmentSubPriceListQuery struct {
	ConnectionID dot.ID
	Status       status3.NullStatus

	Result []*ShipmentSubPriceList `json:"-"`
}

func (h QueryServiceHandler) HandleListShipmentSubPriceList(ctx context.Context, msg *ListShipmentSubPriceListQuery) (err error) {
	msg.Result, err = h.inner.ListShipmentSubPriceList(msg.GetArgs(ctx))
	return err
}

type ListShipmentSubPriceListByIDsQuery struct {
	IDs []dot.ID

	Result []*ShipmentSubPriceList `json:"-"`
}

func (h QueryServiceHandler) HandleListShipmentSubPriceListByIDs(ctx context.Context, msg *ListShipmentSubPriceListByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListShipmentSubPriceListByIDs(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateShipmentSubPriceListCommand) command() {}
func (q *DeleteShipmentSubPriceListCommand) command() {}
func (q *UpdateShipmentSubPriceListCommand) command() {}

func (q *GetShipmentSubPriceListQuery) query()       {}
func (q *ListShipmentSubPriceListQuery) query()      {}
func (q *ListShipmentSubPriceListByIDsQuery) query() {}

// implement conversion

func (q *CreateShipmentSubPriceListCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateSubPriceListArgs) {
	return ctx,
		&CreateSubPriceListArgs{
			Name:         q.Name,
			Description:  q.Description,
			ConnectionID: q.ConnectionID,
		}
}

func (q *CreateShipmentSubPriceListCommand) SetCreateSubPriceListArgs(args *CreateSubPriceListArgs) {
	q.Name = args.Name
	q.Description = args.Description
	q.ConnectionID = args.ConnectionID
}

func (q *DeleteShipmentSubPriceListCommand) GetArgs(ctx context.Context) (_ context.Context, ID dot.ID) {
	return ctx,
		q.ID
}

func (q *UpdateShipmentSubPriceListCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateSubPriceListArgs) {
	return ctx,
		&UpdateSubPriceListArgs{
			ID:          q.ID,
			Name:        q.Name,
			Description: q.Description,
			Status:      q.Status,
		}
}

func (q *UpdateShipmentSubPriceListCommand) SetUpdateSubPriceListArgs(args *UpdateSubPriceListArgs) {
	q.ID = args.ID
	q.Name = args.Name
	q.Description = args.Description
	q.Status = args.Status
}

func (q *GetShipmentSubPriceListQuery) GetArgs(ctx context.Context) (_ context.Context, ID dot.ID) {
	return ctx,
		q.ID
}

func (q *ListShipmentSubPriceListQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListSubPriceListArgs) {
	return ctx,
		&ListSubPriceListArgs{
			ConnectionID: q.ConnectionID,
			Status:       q.Status,
		}
}

func (q *ListShipmentSubPriceListQuery) SetListSubPriceListArgs(args *ListSubPriceListArgs) {
	q.ConnectionID = args.ConnectionID
	q.Status = args.Status
}

func (q *ListShipmentSubPriceListByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, IDs []dot.ID) {
	return ctx,
		q.IDs
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateShipmentSubPriceList)
	b.AddHandler(h.HandleDeleteShipmentSubPriceList)
	b.AddHandler(h.HandleUpdateShipmentSubPriceList)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetShipmentSubPriceList)
	b.AddHandler(h.HandleListShipmentSubPriceList)
	b.AddHandler(h.HandleListShipmentSubPriceListByIDs)
	return QueryBus{b}
}
