// +build !generator

// Code generated by generator api. DO NOT EDIT.

package shopshipmentpricelist

import (
	context "context"

	meta "o.o/api/meta"
	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateShopShipmentPriceListCommand struct {
	ShopID              dot.ID
	ShipmentPriceListID dot.ID
	Note                string
	UpdatedBy           dot.ID

	Result *ShopShipmentPriceList `json:"-"`
}

func (h AggregateHandler) HandleCreateShopShipmentPriceList(ctx context.Context, msg *CreateShopShipmentPriceListCommand) (err error) {
	msg.Result, err = h.inner.CreateShopShipmentPriceList(msg.GetArgs(ctx))
	return err
}

type DeleteShopShipmentPriceListCommand struct {
	ShopID dot.ID

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleDeleteShopShipmentPriceList(ctx context.Context, msg *DeleteShopShipmentPriceListCommand) (err error) {
	return h.inner.DeleteShopShipmentPriceList(msg.GetArgs(ctx))
}

type UpdateShopShipmentPriceListCommand struct {
	ShopID              dot.ID
	ShipmentPriceListID dot.ID
	Note                string
	UpdatedBy           dot.ID

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopShipmentPriceList(ctx context.Context, msg *UpdateShopShipmentPriceListCommand) (err error) {
	return h.inner.UpdateShopShipmentPriceList(msg.GetArgs(ctx))
}

type GetShopShipmentPriceListQuery struct {
	ShopID dot.ID

	Result *ShopShipmentPriceList `json:"-"`
}

func (h QueryServiceHandler) HandleGetShopShipmentPriceList(ctx context.Context, msg *GetShopShipmentPriceListQuery) (err error) {
	msg.Result, err = h.inner.GetShopShipmentPriceList(msg.GetArgs(ctx))
	return err
}

type ListShopShipmentPriceListsQuery struct {
	ShipmentPriceListID dot.ID
	Paging              meta.Paging

	Result *GetShopShipmentPriceListsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopShipmentPriceLists(ctx context.Context, msg *ListShopShipmentPriceListsQuery) (err error) {
	msg.Result, err = h.inner.ListShopShipmentPriceLists(msg.GetArgs(ctx))
	return err
}

type ListShopShipmentPriceListsByPriceListIDsQuery struct {
	PriceListIDs []dot.ID

	Result []*ShopShipmentPriceList `json:"-"`
}

func (h QueryServiceHandler) HandleListShopShipmentPriceListsByPriceListIDs(ctx context.Context, msg *ListShopShipmentPriceListsByPriceListIDsQuery) (err error) {
	msg.Result, err = h.inner.ListShopShipmentPriceListsByPriceListIDs(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateShopShipmentPriceListCommand) command() {}
func (q *DeleteShopShipmentPriceListCommand) command() {}
func (q *UpdateShopShipmentPriceListCommand) command() {}

func (q *GetShopShipmentPriceListQuery) query()                 {}
func (q *ListShopShipmentPriceListsQuery) query()               {}
func (q *ListShopShipmentPriceListsByPriceListIDsQuery) query() {}

// implement conversion

func (q *CreateShopShipmentPriceListCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateShopShipmentPriceListArgs) {
	return ctx,
		&CreateShopShipmentPriceListArgs{
			ShopID:              q.ShopID,
			ShipmentPriceListID: q.ShipmentPriceListID,
			Note:                q.Note,
			UpdatedBy:           q.UpdatedBy,
		}
}

func (q *CreateShopShipmentPriceListCommand) SetCreateShopShipmentPriceListArgs(args *CreateShopShipmentPriceListArgs) {
	q.ShopID = args.ShopID
	q.ShipmentPriceListID = args.ShipmentPriceListID
	q.Note = args.Note
	q.UpdatedBy = args.UpdatedBy
}

func (q *DeleteShopShipmentPriceListCommand) GetArgs(ctx context.Context) (_ context.Context, ShopID dot.ID) {
	return ctx,
		q.ShopID
}

func (q *UpdateShopShipmentPriceListCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShopShipmentPriceListArgs) {
	return ctx,
		&UpdateShopShipmentPriceListArgs{
			ShopID:              q.ShopID,
			ShipmentPriceListID: q.ShipmentPriceListID,
			Note:                q.Note,
			UpdatedBy:           q.UpdatedBy,
		}
}

func (q *UpdateShopShipmentPriceListCommand) SetUpdateShopShipmentPriceListArgs(args *UpdateShopShipmentPriceListArgs) {
	q.ShopID = args.ShopID
	q.ShipmentPriceListID = args.ShipmentPriceListID
	q.Note = args.Note
	q.UpdatedBy = args.UpdatedBy
}

func (q *GetShopShipmentPriceListQuery) GetArgs(ctx context.Context) (_ context.Context, ShopID dot.ID) {
	return ctx,
		q.ShopID
}

func (q *ListShopShipmentPriceListsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShopShipmentPriceListsArgs) {
	return ctx,
		&GetShopShipmentPriceListsArgs{
			ShipmentPriceListID: q.ShipmentPriceListID,
			Paging:              q.Paging,
		}
}

func (q *ListShopShipmentPriceListsQuery) SetGetShopShipmentPriceListsArgs(args *GetShopShipmentPriceListsArgs) {
	q.ShipmentPriceListID = args.ShipmentPriceListID
	q.Paging = args.Paging
}

func (q *ListShopShipmentPriceListsByPriceListIDsQuery) GetArgs(ctx context.Context) (_ context.Context, PriceListIDs []dot.ID) {
	return ctx,
		q.PriceListIDs
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateShopShipmentPriceList)
	b.AddHandler(h.HandleDeleteShopShipmentPriceList)
	b.AddHandler(h.HandleUpdateShopShipmentPriceList)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetShopShipmentPriceList)
	b.AddHandler(h.HandleListShopShipmentPriceLists)
	b.AddHandler(h.HandleListShopShipmentPriceListsByPriceListIDs)
	return QueryBus{b}
}
