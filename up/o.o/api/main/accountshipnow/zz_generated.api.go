// +build !generator

// Code generated by generator api. DO NOT EDIT.

package accountshipnow

import (
	context "context"
	json "encoding/json"
	time "time"

	capi "o.o/capi"
	dot "o.o/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateExternalAccountAhamoveCommand struct {
	ShopID       dot.ID
	OwnerID      dot.ID
	Phone        string
	Name         string
	ConnectionID dot.ID

	Result *ExternalAccountAhamove `json:"-"`
}

func (h AggregateHandler) HandleCreateExternalAccountAhamove(ctx context.Context, msg *CreateExternalAccountAhamoveCommand) (err error) {
	msg.Result, err = h.inner.CreateExternalAccountAhamove(msg.GetArgs(ctx))
	return err
}

type DeleteExternalAccountAhamoveCommand struct {
	ID           dot.ID
	OwnerID      dot.ID
	ConnectionID dot.ID

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleDeleteExternalAccountAhamove(ctx context.Context, msg *DeleteExternalAccountAhamoveCommand) (err error) {
	return h.inner.DeleteExternalAccountAhamove(msg.GetArgs(ctx))
}

type RequestVerifyExternalAccountAhamoveCommand struct {
	OwnerID      dot.ID
	Phone        string
	ConnectionID dot.ID

	Result *RequestVerifyExternalAccountAhamoveResult `json:"-"`
}

func (h AggregateHandler) HandleRequestVerifyExternalAccountAhamove(ctx context.Context, msg *RequestVerifyExternalAccountAhamoveCommand) (err error) {
	msg.Result, err = h.inner.RequestVerifyExternalAccountAhamove(msg.GetArgs(ctx))
	return err
}

type UpdateExternalAccountAhamoveExternalInfoCommand struct {
	ID                   dot.ID
	ExternalID           string
	ExternalCreatedAt    time.Time
	ExternalVerified     bool
	ExternalToken        string
	ExternalTicketID     string
	LastSendVerifiedAt   time.Time
	ExternalDataVerified json.RawMessage

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleUpdateExternalAccountAhamoveExternalInfo(ctx context.Context, msg *UpdateExternalAccountAhamoveExternalInfoCommand) (err error) {
	return h.inner.UpdateExternalAccountAhamoveExternalInfo(msg.GetArgs(ctx))
}

type UpdateExternalAccountAhamoveVerificationCommand struct {
	OwnerID             dot.ID
	Phone               string
	IDCardFrontImg      string
	IDCardBackImg       string
	PortraitImg         string
	WebsiteURL          string
	FanpageURL          string
	CompanyImgs         []string
	BusinessLicenseImgs []string

	Result *ExternalAccountAhamove `json:"-"`
}

func (h AggregateHandler) HandleUpdateExternalAccountAhamoveVerification(ctx context.Context, msg *UpdateExternalAccountAhamoveVerificationCommand) (err error) {
	msg.Result, err = h.inner.UpdateExternalAccountAhamoveVerification(msg.GetArgs(ctx))
	return err
}

type UpdateVerifiedExternalAccountAhamoveCommand struct {
	OwnerID      dot.ID
	Phone        string
	ConnectionID dot.ID

	Result *ExternalAccountAhamove `json:"-"`
}

func (h AggregateHandler) HandleUpdateVerifiedExternalAccountAhamove(ctx context.Context, msg *UpdateVerifiedExternalAccountAhamoveCommand) (err error) {
	msg.Result, err = h.inner.UpdateVerifiedExternalAccountAhamove(msg.GetArgs(ctx))
	return err
}

type GetAccountShipnowQuery struct {
	Phone        string
	OwnerID      dot.ID
	ConnectionID dot.ID

	Result *ExternalAccountAhamove `json:"-"`
}

func (h QueryServiceHandler) HandleGetAccountShipnow(ctx context.Context, msg *GetAccountShipnowQuery) (err error) {
	msg.Result, err = h.inner.GetAccountShipnow(msg.GetArgs(ctx))
	return err
}

type GetExternalAccountAhamoveQuery struct {
	OwnerID      dot.ID
	Phone        string
	ConnectionID dot.ID

	Result *ExternalAccountAhamove `json:"-"`
}

func (h QueryServiceHandler) HandleGetExternalAccountAhamove(ctx context.Context, msg *GetExternalAccountAhamoveQuery) (err error) {
	msg.Result, err = h.inner.GetExternalAccountAhamove(msg.GetArgs(ctx))
	return err
}

type GetExternalAccountAhamoveByExternalIDQuery struct {
	ExternalID string

	Result *ExternalAccountAhamove `json:"-"`
}

func (h QueryServiceHandler) HandleGetExternalAccountAhamoveByExternalID(ctx context.Context, msg *GetExternalAccountAhamoveByExternalIDQuery) (err error) {
	msg.Result, err = h.inner.GetExternalAccountAhamoveByExternalID(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateExternalAccountAhamoveCommand) command()             {}
func (q *DeleteExternalAccountAhamoveCommand) command()             {}
func (q *RequestVerifyExternalAccountAhamoveCommand) command()      {}
func (q *UpdateExternalAccountAhamoveExternalInfoCommand) command() {}
func (q *UpdateExternalAccountAhamoveVerificationCommand) command() {}
func (q *UpdateVerifiedExternalAccountAhamoveCommand) command()     {}

func (q *GetAccountShipnowQuery) query()                     {}
func (q *GetExternalAccountAhamoveQuery) query()             {}
func (q *GetExternalAccountAhamoveByExternalIDQuery) query() {}

// implement conversion

func (q *CreateExternalAccountAhamoveCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateExternalAccountAhamoveArgs) {
	return ctx,
		&CreateExternalAccountAhamoveArgs{
			ShopID:       q.ShopID,
			OwnerID:      q.OwnerID,
			Phone:        q.Phone,
			Name:         q.Name,
			ConnectionID: q.ConnectionID,
		}
}

func (q *CreateExternalAccountAhamoveCommand) SetCreateExternalAccountAhamoveArgs(args *CreateExternalAccountAhamoveArgs) {
	q.ShopID = args.ShopID
	q.OwnerID = args.OwnerID
	q.Phone = args.Phone
	q.Name = args.Name
	q.ConnectionID = args.ConnectionID
}

func (q *DeleteExternalAccountAhamoveCommand) GetArgs(ctx context.Context) (_ context.Context, _ *DeleteXAccountAhamoveArgs) {
	return ctx,
		&DeleteXAccountAhamoveArgs{
			ID:           q.ID,
			OwnerID:      q.OwnerID,
			ConnectionID: q.ConnectionID,
		}
}

func (q *DeleteExternalAccountAhamoveCommand) SetDeleteXAccountAhamoveArgs(args *DeleteXAccountAhamoveArgs) {
	q.ID = args.ID
	q.OwnerID = args.OwnerID
	q.ConnectionID = args.ConnectionID
}

func (q *RequestVerifyExternalAccountAhamoveCommand) GetArgs(ctx context.Context) (_ context.Context, _ *RequestVerifyExternalAccountAhamoveArgs) {
	return ctx,
		&RequestVerifyExternalAccountAhamoveArgs{
			OwnerID:      q.OwnerID,
			Phone:        q.Phone,
			ConnectionID: q.ConnectionID,
		}
}

func (q *RequestVerifyExternalAccountAhamoveCommand) SetRequestVerifyExternalAccountAhamoveArgs(args *RequestVerifyExternalAccountAhamoveArgs) {
	q.OwnerID = args.OwnerID
	q.Phone = args.Phone
	q.ConnectionID = args.ConnectionID
}

func (q *UpdateExternalAccountAhamoveExternalInfoCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateXAccountAhamoveExternalInfoArgs) {
	return ctx,
		&UpdateXAccountAhamoveExternalInfoArgs{
			ID:                   q.ID,
			ExternalID:           q.ExternalID,
			ExternalCreatedAt:    q.ExternalCreatedAt,
			ExternalVerified:     q.ExternalVerified,
			ExternalToken:        q.ExternalToken,
			ExternalTicketID:     q.ExternalTicketID,
			LastSendVerifiedAt:   q.LastSendVerifiedAt,
			ExternalDataVerified: q.ExternalDataVerified,
		}
}

func (q *UpdateExternalAccountAhamoveExternalInfoCommand) SetUpdateXAccountAhamoveExternalInfoArgs(args *UpdateXAccountAhamoveExternalInfoArgs) {
	q.ID = args.ID
	q.ExternalID = args.ExternalID
	q.ExternalCreatedAt = args.ExternalCreatedAt
	q.ExternalVerified = args.ExternalVerified
	q.ExternalToken = args.ExternalToken
	q.ExternalTicketID = args.ExternalTicketID
	q.LastSendVerifiedAt = args.LastSendVerifiedAt
	q.ExternalDataVerified = args.ExternalDataVerified
}

func (q *UpdateExternalAccountAhamoveVerificationCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateExternalAccountAhamoveVerificationArgs) {
	return ctx,
		&UpdateExternalAccountAhamoveVerificationArgs{
			OwnerID:             q.OwnerID,
			Phone:               q.Phone,
			IDCardFrontImg:      q.IDCardFrontImg,
			IDCardBackImg:       q.IDCardBackImg,
			PortraitImg:         q.PortraitImg,
			WebsiteURL:          q.WebsiteURL,
			FanpageURL:          q.FanpageURL,
			CompanyImgs:         q.CompanyImgs,
			BusinessLicenseImgs: q.BusinessLicenseImgs,
		}
}

func (q *UpdateExternalAccountAhamoveVerificationCommand) SetUpdateExternalAccountAhamoveVerificationArgs(args *UpdateExternalAccountAhamoveVerificationArgs) {
	q.OwnerID = args.OwnerID
	q.Phone = args.Phone
	q.IDCardFrontImg = args.IDCardFrontImg
	q.IDCardBackImg = args.IDCardBackImg
	q.PortraitImg = args.PortraitImg
	q.WebsiteURL = args.WebsiteURL
	q.FanpageURL = args.FanpageURL
	q.CompanyImgs = args.CompanyImgs
	q.BusinessLicenseImgs = args.BusinessLicenseImgs
}

func (q *UpdateVerifiedExternalAccountAhamoveCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateVerifiedExternalAccountAhamoveArgs) {
	return ctx,
		&UpdateVerifiedExternalAccountAhamoveArgs{
			OwnerID:      q.OwnerID,
			Phone:        q.Phone,
			ConnectionID: q.ConnectionID,
		}
}

func (q *UpdateVerifiedExternalAccountAhamoveCommand) SetUpdateVerifiedExternalAccountAhamoveArgs(args *UpdateVerifiedExternalAccountAhamoveArgs) {
	q.OwnerID = args.OwnerID
	q.Phone = args.Phone
	q.ConnectionID = args.ConnectionID
}

func (q *GetAccountShipnowQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetAccountShipnowArgs) {
	return ctx,
		&GetAccountShipnowArgs{
			Phone:        q.Phone,
			OwnerID:      q.OwnerID,
			ConnectionID: q.ConnectionID,
		}
}

func (q *GetAccountShipnowQuery) SetGetAccountShipnowArgs(args *GetAccountShipnowArgs) {
	q.Phone = args.Phone
	q.OwnerID = args.OwnerID
	q.ConnectionID = args.ConnectionID
}

func (q *GetExternalAccountAhamoveQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetExternalAccountAhamoveArgs) {
	return ctx,
		&GetExternalAccountAhamoveArgs{
			OwnerID:      q.OwnerID,
			Phone:        q.Phone,
			ConnectionID: q.ConnectionID,
		}
}

func (q *GetExternalAccountAhamoveQuery) SetGetExternalAccountAhamoveArgs(args *GetExternalAccountAhamoveArgs) {
	q.OwnerID = args.OwnerID
	q.Phone = args.Phone
	q.ConnectionID = args.ConnectionID
}

func (q *GetExternalAccountAhamoveByExternalIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetExternalAccountAhamoveByExternalIDQueryArgs) {
	return ctx,
		&GetExternalAccountAhamoveByExternalIDQueryArgs{
			ExternalID: q.ExternalID,
		}
}

func (q *GetExternalAccountAhamoveByExternalIDQuery) SetGetExternalAccountAhamoveByExternalIDQueryArgs(args *GetExternalAccountAhamoveByExternalIDQueryArgs) {
	q.ExternalID = args.ExternalID
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateExternalAccountAhamove)
	b.AddHandler(h.HandleDeleteExternalAccountAhamove)
	b.AddHandler(h.HandleRequestVerifyExternalAccountAhamove)
	b.AddHandler(h.HandleUpdateExternalAccountAhamoveExternalInfo)
	b.AddHandler(h.HandleUpdateExternalAccountAhamoveVerification)
	b.AddHandler(h.HandleUpdateVerifiedExternalAccountAhamove)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetAccountShipnow)
	b.AddHandler(h.HandleGetExternalAccountAhamove)
	b.AddHandler(h.HandleGetExternalAccountAhamoveByExternalID)
	return QueryBus{b}
}
