// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package ws_banner_show_style

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumWsBannerShowStyleName = map[int]string{
	0: "slider",
	1: "grid",
}

var enumWsBannerShowStyleValue = map[string]int{
	"slider": 0,
	"grid":   1,
}

func ParseWsBannerShowStyle(s string) (WsBannerShowStyle, bool) {
	val, ok := enumWsBannerShowStyleValue[s]
	return WsBannerShowStyle(val), ok
}

func ParseWsBannerShowStyleWithDefault(s string, d WsBannerShowStyle) WsBannerShowStyle {
	val, ok := enumWsBannerShowStyleValue[s]
	if !ok {
		return d
	}
	return WsBannerShowStyle(val)
}

func (e WsBannerShowStyle) Apply(d WsBannerShowStyle) WsBannerShowStyle {
	if e == 0 {
		return d
	}
	return e
}

func (e WsBannerShowStyle) Enum() int {
	return int(e)
}

func (e WsBannerShowStyle) Name() string {
	return enumWsBannerShowStyleName[e.Enum()]
}

func (e WsBannerShowStyle) String() string {
	s, ok := enumWsBannerShowStyleName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("WsBannerShowStyle(%v)", e.Enum())
}

func (e WsBannerShowStyle) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumWsBannerShowStyleName[e.Enum()] + "\""), nil
}

func (e *WsBannerShowStyle) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumWsBannerShowStyleValue, data, "WsBannerShowStyle")
	if err != nil {
		return err
	}
	*e = WsBannerShowStyle(value)
	return nil
}

func (e WsBannerShowStyle) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *WsBannerShowStyle) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumWsBannerShowStyleValue, src, "WsBannerShowStyle")
	*e = (WsBannerShowStyle)(value)
	return err
}

func (e WsBannerShowStyle) Wrap() NullWsBannerShowStyle {
	return WrapWsBannerShowStyle(e)
}

func ParseWsBannerShowStyleWithNull(s dot.NullString, d WsBannerShowStyle) NullWsBannerShowStyle {
	if !s.Valid {
		return NullWsBannerShowStyle{}
	}
	val, ok := enumWsBannerShowStyleValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return WsBannerShowStyle(val).Wrap()
}

func WrapWsBannerShowStyle(enum WsBannerShowStyle) NullWsBannerShowStyle {
	return NullWsBannerShowStyle{Enum: enum, Valid: true}
}

func (n NullWsBannerShowStyle) Apply(s WsBannerShowStyle) WsBannerShowStyle {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullWsBannerShowStyle) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullWsBannerShowStyle) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullWsBannerShowStyle) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullWsBannerShowStyle) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
