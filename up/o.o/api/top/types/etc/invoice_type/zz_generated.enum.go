// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package invoice_type

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumInvoiceTypeName = map[int]string{
	0: "default",
	1: "in",
	9: "out",
}

var enumInvoiceTypeValue = map[string]int{
	"default": 0,
	"in":      1,
	"out":     9,
}

func ParseInvoiceType(s string) (InvoiceType, bool) {
	val, ok := enumInvoiceTypeValue[s]
	return InvoiceType(val), ok
}

func ParseInvoiceTypeWithDefault(s string, d InvoiceType) InvoiceType {
	val, ok := enumInvoiceTypeValue[s]
	if !ok {
		return d
	}
	return InvoiceType(val)
}

func (e InvoiceType) Enum() int {
	return int(e)
}

func (e InvoiceType) Name() string {
	return enumInvoiceTypeName[e.Enum()]
}

func (e InvoiceType) String() string {
	s, ok := enumInvoiceTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("InvoiceType(%v)", e.Enum())
}

func (e InvoiceType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumInvoiceTypeName[e.Enum()] + "\""), nil
}

func (e *InvoiceType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumInvoiceTypeValue, data, "InvoiceType")
	if err != nil {
		return err
	}
	*e = InvoiceType(value)
	return nil
}

func (e InvoiceType) Value() (driver.Value, error) {
	return e.String(), nil
}

func (e *InvoiceType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumInvoiceTypeValue, src, "InvoiceType")
	*e = (InvoiceType)(value)
	return err
}

func (e InvoiceType) Wrap() NullInvoiceType {
	return WrapInvoiceType(e)
}

func ParseInvoiceTypeWithNull(s dot.NullString, d InvoiceType) NullInvoiceType {
	if !s.Valid {
		return NullInvoiceType{}
	}
	val, ok := enumInvoiceTypeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return InvoiceType(val).Wrap()
}

func WrapInvoiceType(enum InvoiceType) NullInvoiceType {
	return NullInvoiceType{Enum: enum, Valid: true}
}

func (n NullInvoiceType) Apply(s InvoiceType) InvoiceType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullInvoiceType) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullInvoiceType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullInvoiceType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullInvoiceType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
