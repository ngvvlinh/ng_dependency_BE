// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package ghn_payment_type

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumGHNPaymentTypeName = map[int]string{
	1: "seller",
	2: "buyer",
}

var enumGHNPaymentTypeValue = map[string]int{
	"seller": 1,
	"buyer":  2,
}

func ParseGHNPaymentType(s string) (GHNPaymentType, bool) {
	val, ok := enumGHNPaymentTypeValue[s]
	return GHNPaymentType(val), ok
}

func ParseGHNPaymentTypeWithDefault(s string, d GHNPaymentType) GHNPaymentType {
	val, ok := enumGHNPaymentTypeValue[s]
	if !ok {
		return d
	}
	return GHNPaymentType(val)
}

func (e GHNPaymentType) Apply(d GHNPaymentType) GHNPaymentType {
	if e == 0 {
		return d
	}
	return e
}

func (e GHNPaymentType) Enum() int {
	return int(e)
}

func (e GHNPaymentType) Name() string {
	return enumGHNPaymentTypeName[e.Enum()]
}

func (e GHNPaymentType) String() string {
	s, ok := enumGHNPaymentTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("GHNPaymentType(%v)", e.Enum())
}

func (e GHNPaymentType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumGHNPaymentTypeName[e.Enum()] + "\""), nil
}

func (e *GHNPaymentType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumGHNPaymentTypeValue, data, "GHNPaymentType")
	if err != nil {
		return err
	}
	*e = GHNPaymentType(value)
	return nil
}

func (e GHNPaymentType) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *GHNPaymentType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumGHNPaymentTypeValue, src, "GHNPaymentType")
	*e = (GHNPaymentType)(value)
	return err
}

func (e GHNPaymentType) Wrap() NullGHNPaymentType {
	return WrapGHNPaymentType(e)
}

func ParseGHNPaymentTypeWithNull(s dot.NullString, d GHNPaymentType) NullGHNPaymentType {
	if !s.Valid {
		return NullGHNPaymentType{}
	}
	val, ok := enumGHNPaymentTypeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return GHNPaymentType(val).Wrap()
}

func WrapGHNPaymentType(enum GHNPaymentType) NullGHNPaymentType {
	return NullGHNPaymentType{Enum: enum, Valid: true}
}

func (n NullGHNPaymentType) Apply(s GHNPaymentType) GHNPaymentType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullGHNPaymentType) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullGHNPaymentType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullGHNPaymentType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullGHNPaymentType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
