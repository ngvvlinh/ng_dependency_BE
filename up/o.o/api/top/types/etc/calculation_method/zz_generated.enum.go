// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package calculation_method

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumCalculationMethodTypeName = map[int]string{
	0: "unknown",
	1: "cumulative",
	2: "first_satisfy",
}

var enumCalculationMethodTypeValue = map[string]int{
	"unknown":       0,
	"cumulative":    1,
	"first_satisfy": 2,
}

func ParseCalculationMethodType(s string) (CalculationMethodType, bool) {
	val, ok := enumCalculationMethodTypeValue[s]
	return CalculationMethodType(val), ok
}

func ParseCalculationMethodTypeWithDefault(s string, d CalculationMethodType) CalculationMethodType {
	val, ok := enumCalculationMethodTypeValue[s]
	if !ok {
		return d
	}
	return CalculationMethodType(val)
}

func (e CalculationMethodType) Apply(d CalculationMethodType) CalculationMethodType {
	if e == 0 {
		return d
	}
	return e
}

func (e CalculationMethodType) Enum() int {
	return int(e)
}

func (e CalculationMethodType) Name() string {
	return enumCalculationMethodTypeName[e.Enum()]
}

func (e CalculationMethodType) String() string {
	s, ok := enumCalculationMethodTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("CalculationMethodType(%v)", e.Enum())
}

func (e CalculationMethodType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumCalculationMethodTypeName[e.Enum()] + "\""), nil
}

func (e *CalculationMethodType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumCalculationMethodTypeValue, data, "CalculationMethodType")
	if err != nil {
		return err
	}
	*e = CalculationMethodType(value)
	return nil
}

func (e CalculationMethodType) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *CalculationMethodType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumCalculationMethodTypeValue, src, "CalculationMethodType")
	*e = (CalculationMethodType)(value)
	return err
}

func (e CalculationMethodType) Wrap() NullCalculationMethodType {
	return WrapCalculationMethodType(e)
}

func ParseCalculationMethodTypeWithNull(s dot.NullString, d CalculationMethodType) NullCalculationMethodType {
	if !s.Valid {
		return NullCalculationMethodType{}
	}
	val, ok := enumCalculationMethodTypeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return CalculationMethodType(val).Wrap()
}

func WrapCalculationMethodType(enum CalculationMethodType) NullCalculationMethodType {
	return NullCalculationMethodType{Enum: enum, Valid: true}
}

func (n NullCalculationMethodType) Apply(s CalculationMethodType) CalculationMethodType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullCalculationMethodType) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullCalculationMethodType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullCalculationMethodType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullCalculationMethodType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
