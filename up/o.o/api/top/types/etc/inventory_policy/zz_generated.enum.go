// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package inventory_policy

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumInventoryPolicyName = map[int]string{
	0: "unknown",
	1: "obey",
	2: "ignore",
}

var enumInventoryPolicyValue = map[string]int{
	"unknown": 0,
	"obey":    1,
	"ignore":  2,
}

func ParseInventoryPolicy(s string) (InventoryPolicy, bool) {
	val, ok := enumInventoryPolicyValue[s]
	return InventoryPolicy(val), ok
}

func ParseInventoryPolicyWithDefault(s string, d InventoryPolicy) InventoryPolicy {
	val, ok := enumInventoryPolicyValue[s]
	if !ok {
		return d
	}
	return InventoryPolicy(val)
}

func (e InventoryPolicy) Apply(d InventoryPolicy) InventoryPolicy {
	if e == 0 {
		return d
	}
	return e
}

func (e InventoryPolicy) Enum() int {
	return int(e)
}

func (e InventoryPolicy) Name() string {
	return enumInventoryPolicyName[e.Enum()]
}

func (e InventoryPolicy) String() string {
	s, ok := enumInventoryPolicyName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("InventoryPolicy(%v)", e.Enum())
}

func (e InventoryPolicy) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumInventoryPolicyName[e.Enum()] + "\""), nil
}

func (e *InventoryPolicy) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumInventoryPolicyValue, data, "InventoryPolicy")
	if err != nil {
		return err
	}
	*e = InventoryPolicy(value)
	return nil
}

func (e InventoryPolicy) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *InventoryPolicy) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumInventoryPolicyValue, src, "InventoryPolicy")
	*e = (InventoryPolicy)(value)
	return err
}

func (e InventoryPolicy) Wrap() NullInventoryPolicy {
	return WrapInventoryPolicy(e)
}

func ParseInventoryPolicyWithNull(s dot.NullString, d InventoryPolicy) NullInventoryPolicy {
	if !s.Valid {
		return NullInventoryPolicy{}
	}
	val, ok := enumInventoryPolicyValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return InventoryPolicy(val).Wrap()
}

func WrapInventoryPolicy(enum InventoryPolicy) NullInventoryPolicy {
	return NullInventoryPolicy{Enum: enum, Valid: true}
}

func (n NullInventoryPolicy) Apply(s InventoryPolicy) InventoryPolicy {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullInventoryPolicy) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullInventoryPolicy) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullInventoryPolicy) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullInventoryPolicy) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
