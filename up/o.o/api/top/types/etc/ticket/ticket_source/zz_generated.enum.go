// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package ticket_source

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumTicketSourceName = map[int]string{
	65:  "pos_web",
	12:  "pos_app",
	74:  "shipment_app",
	101: "telecom_app_call",
	77:  "telecom_web",
	79:  "telecom_ext_call",
	42:  "telecom_web_call",
	85:  "shipment_web",
	38:  "admin",
	98:  "webphone",
}

var enumTicketSourceValue = map[string]int{
	"pos_web":          65,
	"pos_app":          12,
	"shipment_app":     74,
	"telecom_app_call": 101,
	"telecom_web":      77,
	"telecom_ext_call": 79,
	"telecom_web_call": 42,
	"shipment_web":     85,
	"admin":            38,
	"system":           42,
	"webphone":         98,
}

func ParseTicketSource(s string) (TicketSource, bool) {
	val, ok := enumTicketSourceValue[s]
	return TicketSource(val), ok
}

func ParseTicketSourceWithDefault(s string, d TicketSource) TicketSource {
	val, ok := enumTicketSourceValue[s]
	if !ok {
		return d
	}
	return TicketSource(val)
}

func (e TicketSource) Enum() int {
	return int(e)
}

func (e TicketSource) Name() string {
	return enumTicketSourceName[e.Enum()]
}

func (e TicketSource) String() string {
	s, ok := enumTicketSourceName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("TicketSource(%v)", e.Enum())
}

func (e TicketSource) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumTicketSourceName[e.Enum()] + "\""), nil
}

func (e *TicketSource) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumTicketSourceValue, data, "TicketSource")
	if err != nil {
		return err
	}
	*e = TicketSource(value)
	return nil
}

func (e TicketSource) Value() (driver.Value, error) {
	return int64(e), nil
}

func (e *TicketSource) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumTicketSourceValue, src, "TicketSource")
	*e = (TicketSource)(value)
	return err
}

func (e TicketSource) Wrap() NullTicketSource {
	return WrapTicketSource(e)
}

func ParseTicketSourceWithNull(s dot.NullString, d TicketSource) NullTicketSource {
	if !s.Valid {
		return NullTicketSource{}
	}
	val, ok := enumTicketSourceValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return TicketSource(val).Wrap()
}

func WrapTicketSource(enum TicketSource) NullTicketSource {
	return NullTicketSource{Enum: enum, Valid: true}
}

func (n NullTicketSource) Apply(s TicketSource) TicketSource {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullTicketSource) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullTicketSource) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullTicketSource) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullTicketSource) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
