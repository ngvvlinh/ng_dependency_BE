// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package ticket_type

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumTicketTypeName = map[int]string{
	0:  "unknown",
	12: "internal",
	74: "system",
}

var enumTicketTypeValue = map[string]int{
	"unknown":  0,
	"internal": 12,
	"system":   74,
}

func ParseTicketType(s string) (TicketType, bool) {
	val, ok := enumTicketTypeValue[s]
	return TicketType(val), ok
}

func ParseTicketTypeWithDefault(s string, d TicketType) TicketType {
	val, ok := enumTicketTypeValue[s]
	if !ok {
		return d
	}
	return TicketType(val)
}

func (e TicketType) Enum() int {
	return int(e)
}

func (e TicketType) Name() string {
	return enumTicketTypeName[e.Enum()]
}

func (e TicketType) String() string {
	s, ok := enumTicketTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("TicketType(%v)", e.Enum())
}

func (e TicketType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumTicketTypeName[e.Enum()] + "\""), nil
}

func (e *TicketType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumTicketTypeValue, data, "TicketType")
	if err != nil {
		return err
	}
	*e = TicketType(value)
	return nil
}

func (e TicketType) Value() (driver.Value, error) {
	return int64(e), nil
}

func (e *TicketType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumTicketTypeValue, src, "TicketType")
	*e = (TicketType)(value)
	return err
}

func (e TicketType) Wrap() NullTicketType {
	return WrapTicketType(e)
}

func ParseTicketTypeWithNull(s dot.NullString, d TicketType) NullTicketType {
	if !s.Valid {
		return NullTicketType{}
	}
	val, ok := enumTicketTypeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return TicketType(val).Wrap()
}

func WrapTicketType(enum TicketType) NullTicketType {
	return NullTicketType{Enum: enum, Valid: true}
}

func (n NullTicketType) Apply(s TicketType) TicketType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullTicketType) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullTicketType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullTicketType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullTicketType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
