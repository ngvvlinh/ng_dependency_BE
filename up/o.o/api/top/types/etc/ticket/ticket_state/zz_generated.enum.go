// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package ticket_state

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumTicketStateName = map[int]string{
	45: "new",
	21: "received",
	54: "processing",
	71: "success",
	84: "fail",
	27: "ignore",
	68: "cancel",
}

var enumTicketStateValue = map[string]int{
	"new":        45,
	"received":   21,
	"processing": 54,
	"success":    71,
	"fail":       84,
	"ignore":     27,
	"cancel":     68,
}

func ParseTicketState(s string) (TicketState, bool) {
	val, ok := enumTicketStateValue[s]
	return TicketState(val), ok
}

func ParseTicketStateWithDefault(s string, d TicketState) TicketState {
	val, ok := enumTicketStateValue[s]
	if !ok {
		return d
	}
	return TicketState(val)
}

func (e TicketState) Enum() int {
	return int(e)
}

func (e TicketState) Name() string {
	return enumTicketStateName[e.Enum()]
}

func (e TicketState) String() string {
	s, ok := enumTicketStateName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("TicketState(%v)", e.Enum())
}

func (e TicketState) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumTicketStateName[e.Enum()] + "\""), nil
}

func (e *TicketState) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumTicketStateValue, data, "TicketState")
	if err != nil {
		return err
	}
	*e = TicketState(value)
	return nil
}

func (e TicketState) Value() (driver.Value, error) {
	return int64(e), nil
}

func (e *TicketState) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumTicketStateValue, src, "TicketState")
	*e = (TicketState)(value)
	return err
}

func (e TicketState) Wrap() NullTicketState {
	return WrapTicketState(e)
}

func ParseTicketStateWithNull(s dot.NullString, d TicketState) NullTicketState {
	if !s.Valid {
		return NullTicketState{}
	}
	val, ok := enumTicketStateValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return TicketState(val).Wrap()
}

func WrapTicketState(enum TicketState) NullTicketState {
	return NullTicketState{Enum: enum, Valid: true}
}

func (n NullTicketState) Apply(s TicketState) TicketState {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullTicketState) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullTicketState) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullTicketState) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullTicketState) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
