// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package ticket_ref_type

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumTicketRefTypeName = map[int]string{
	34: "order_trading",
	42: "ffm",
	95: "money_transaction",
	31: "other",
	88: "contact",
}

var enumTicketRefTypeValue = map[string]int{
	"order_trading":     34,
	"ffm":               42,
	"money_transaction": 95,
	"other":             31,
	"contact":           88,
}

func ParseTicketRefType(s string) (TicketRefType, bool) {
	val, ok := enumTicketRefTypeValue[s]
	return TicketRefType(val), ok
}

func ParseTicketRefTypeWithDefault(s string, d TicketRefType) TicketRefType {
	val, ok := enumTicketRefTypeValue[s]
	if !ok {
		return d
	}
	return TicketRefType(val)
}

func (e TicketRefType) Enum() int {
	return int(e)
}

func (e TicketRefType) Name() string {
	return enumTicketRefTypeName[e.Enum()]
}

func (e TicketRefType) String() string {
	s, ok := enumTicketRefTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("TicketRefType(%v)", e.Enum())
}

func (e TicketRefType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumTicketRefTypeName[e.Enum()] + "\""), nil
}

func (e *TicketRefType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumTicketRefTypeValue, data, "TicketRefType")
	if err != nil {
		return err
	}
	*e = TicketRefType(value)
	return nil
}

func (e TicketRefType) Value() (driver.Value, error) {
	return int64(e), nil
}

func (e *TicketRefType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumTicketRefTypeValue, src, "TicketRefType")
	*e = (TicketRefType)(value)
	return err
}

func (e TicketRefType) Wrap() NullTicketRefType {
	return WrapTicketRefType(e)
}

func ParseTicketRefTypeWithNull(s dot.NullString, d TicketRefType) NullTicketRefType {
	if !s.Valid {
		return NullTicketRefType{}
	}
	val, ok := enumTicketRefTypeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return TicketRefType(val).Wrap()
}

func WrapTicketRefType(enum TicketRefType) NullTicketRefType {
	return NullTicketRefType{Enum: enum, Valid: true}
}

func (n NullTicketRefType) Apply(s TicketRefType) TicketRefType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullTicketRefType) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullTicketRefType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullTicketRefType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullTicketRefType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
