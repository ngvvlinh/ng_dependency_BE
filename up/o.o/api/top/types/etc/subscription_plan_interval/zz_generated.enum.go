// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package subscription_plan_interval

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumSubscriptionPlanIntervalName = map[int]string{
	0: "unknown",
	1: "day",
	2: "week",
	3: "month",
	4: "year",
}

var enumSubscriptionPlanIntervalValue = map[string]int{
	"unknown": 0,
	"day":     1,
	"week":    2,
	"month":   3,
	"year":    4,
}

func ParseSubscriptionPlanInterval(s string) (SubscriptionPlanInterval, bool) {
	val, ok := enumSubscriptionPlanIntervalValue[s]
	return SubscriptionPlanInterval(val), ok
}

func ParseSubscriptionPlanIntervalWithDefault(s string, d SubscriptionPlanInterval) SubscriptionPlanInterval {
	val, ok := enumSubscriptionPlanIntervalValue[s]
	if !ok {
		return d
	}
	return SubscriptionPlanInterval(val)
}

func (e SubscriptionPlanInterval) Apply(d SubscriptionPlanInterval) SubscriptionPlanInterval {
	if e == 0 {
		return d
	}
	return e
}

func (e SubscriptionPlanInterval) Enum() int {
	return int(e)
}

func (e SubscriptionPlanInterval) Name() string {
	return enumSubscriptionPlanIntervalName[e.Enum()]
}

func (e SubscriptionPlanInterval) String() string {
	s, ok := enumSubscriptionPlanIntervalName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("SubscriptionPlanInterval(%v)", e.Enum())
}

func (e SubscriptionPlanInterval) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumSubscriptionPlanIntervalName[e.Enum()] + "\""), nil
}

func (e *SubscriptionPlanInterval) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumSubscriptionPlanIntervalValue, data, "SubscriptionPlanInterval")
	if err != nil {
		return err
	}
	*e = SubscriptionPlanInterval(value)
	return nil
}

func (e SubscriptionPlanInterval) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *SubscriptionPlanInterval) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumSubscriptionPlanIntervalValue, src, "SubscriptionPlanInterval")
	*e = (SubscriptionPlanInterval)(value)
	return err
}

func (e SubscriptionPlanInterval) Wrap() NullSubscriptionPlanInterval {
	return WrapSubscriptionPlanInterval(e)
}

func ParseSubscriptionPlanIntervalWithNull(s dot.NullString, d SubscriptionPlanInterval) NullSubscriptionPlanInterval {
	if !s.Valid {
		return NullSubscriptionPlanInterval{}
	}
	val, ok := enumSubscriptionPlanIntervalValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return SubscriptionPlanInterval(val).Wrap()
}

func WrapSubscriptionPlanInterval(enum SubscriptionPlanInterval) NullSubscriptionPlanInterval {
	return NullSubscriptionPlanInterval{Enum: enum, Valid: true}
}

func (n NullSubscriptionPlanInterval) Apply(s SubscriptionPlanInterval) SubscriptionPlanInterval {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullSubscriptionPlanInterval) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullSubscriptionPlanInterval) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullSubscriptionPlanInterval) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullSubscriptionPlanInterval) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
