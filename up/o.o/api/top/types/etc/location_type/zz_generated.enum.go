// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package location_type

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumRegionTypeName = map[int]string{
	1: "north",
	2: "middle",
	3: "south",
}

var enumRegionTypeValue = map[string]int{
	"north":  1,
	"middle": 2,
	"south":  3,
}

func ParseRegionType(s string) (RegionType, bool) {
	val, ok := enumRegionTypeValue[s]
	return RegionType(val), ok
}

func ParseRegionTypeWithDefault(s string, d RegionType) RegionType {
	val, ok := enumRegionTypeValue[s]
	if !ok {
		return d
	}
	return RegionType(val)
}

func (e RegionType) Apply(d RegionType) RegionType {
	if e == 0 {
		return d
	}
	return e
}

func (e RegionType) Enum() int {
	return int(e)
}

func (e RegionType) Name() string {
	return enumRegionTypeName[e.Enum()]
}

func (e RegionType) String() string {
	s, ok := enumRegionTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("RegionType(%v)", e.Enum())
}

func (e RegionType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumRegionTypeName[e.Enum()] + "\""), nil
}

func (e *RegionType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumRegionTypeValue, data, "RegionType")
	if err != nil {
		return err
	}
	*e = RegionType(value)
	return nil
}

func (e RegionType) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *RegionType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumRegionTypeValue, src, "RegionType")
	*e = (RegionType)(value)
	return err
}

func (e RegionType) Wrap() NullRegionType {
	return WrapRegionType(e)
}

func ParseRegionTypeWithNull(s dot.NullString, d RegionType) NullRegionType {
	if !s.Valid {
		return NullRegionType{}
	}
	val, ok := enumRegionTypeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return RegionType(val).Wrap()
}

func WrapRegionType(enum RegionType) NullRegionType {
	return NullRegionType{Enum: enum, Valid: true}
}

func (n NullRegionType) Apply(s RegionType) RegionType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullRegionType) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullRegionType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullRegionType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullRegionType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}

var enumShippingLocationTypeName = map[int]string{
	1: "pick",
	2: "deliver",
}

var enumShippingLocationTypeValue = map[string]int{
	"pick":    1,
	"deliver": 2,
}

var enumShippingLocationTypeMapLabel = map[string]map[string]string{
	"pick": {
		"RefName": "Địa chỉ lấy hàng",
	},
	"deliver": {
		"RefName": "Địa chỉ giao hàng",
	},
}

func (e ShippingLocationType) GetLabelRefName() string {
	val := enumShippingLocationTypeName[int(e)]
	nameVal := enumShippingLocationTypeMapLabel[val]
	return nameVal["RefName"]
}
func ParseShippingLocationType(s string) (ShippingLocationType, bool) {
	val, ok := enumShippingLocationTypeValue[s]
	return ShippingLocationType(val), ok
}

func ParseShippingLocationTypeWithDefault(s string, d ShippingLocationType) ShippingLocationType {
	val, ok := enumShippingLocationTypeValue[s]
	if !ok {
		return d
	}
	return ShippingLocationType(val)
}

func (e ShippingLocationType) Apply(d ShippingLocationType) ShippingLocationType {
	if e == 0 {
		return d
	}
	return e
}

func (e ShippingLocationType) Enum() int {
	return int(e)
}

func (e ShippingLocationType) Name() string {
	return enumShippingLocationTypeName[e.Enum()]
}

func (e ShippingLocationType) String() string {
	s, ok := enumShippingLocationTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("ShippingLocationType(%v)", e.Enum())
}

func (e ShippingLocationType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumShippingLocationTypeName[e.Enum()] + "\""), nil
}

func (e *ShippingLocationType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumShippingLocationTypeValue, data, "ShippingLocationType")
	if err != nil {
		return err
	}
	*e = ShippingLocationType(value)
	return nil
}

func (e ShippingLocationType) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *ShippingLocationType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumShippingLocationTypeValue, src, "ShippingLocationType")
	*e = (ShippingLocationType)(value)
	return err
}

func (e ShippingLocationType) Wrap() NullShippingLocationType {
	return WrapShippingLocationType(e)
}

func ParseShippingLocationTypeWithNull(s dot.NullString, d ShippingLocationType) NullShippingLocationType {
	if !s.Valid {
		return NullShippingLocationType{}
	}
	val, ok := enumShippingLocationTypeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return ShippingLocationType(val).Wrap()
}

func WrapShippingLocationType(enum ShippingLocationType) NullShippingLocationType {
	return NullShippingLocationType{Enum: enum, Valid: true}
}

func (n NullShippingLocationType) Apply(s ShippingLocationType) ShippingLocationType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullShippingLocationType) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullShippingLocationType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullShippingLocationType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullShippingLocationType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
