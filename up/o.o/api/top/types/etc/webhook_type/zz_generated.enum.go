// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package webhook_type

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumWebhookTypeName = map[int]string{
	0: "unknown",
	1: "fabo",
}

var enumWebhookTypeValue = map[string]int{
	"unknown": 0,
	"fabo":    1,
}

func ParseWebhookType(s string) (WebhookType, bool) {
	val, ok := enumWebhookTypeValue[s]
	return WebhookType(val), ok
}

func ParseWebhookTypeWithDefault(s string, d WebhookType) WebhookType {
	val, ok := enumWebhookTypeValue[s]
	if !ok {
		return d
	}
	return WebhookType(val)
}

func (e WebhookType) Apply(d WebhookType) WebhookType {
	if e == 0 {
		return d
	}
	return e
}

func (e WebhookType) Enum() int {
	return int(e)
}

func (e WebhookType) Name() string {
	return enumWebhookTypeName[e.Enum()]
}

func (e WebhookType) String() string {
	s, ok := enumWebhookTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("WebhookType(%v)", e.Enum())
}

func (e WebhookType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumWebhookTypeName[e.Enum()] + "\""), nil
}

func (e *WebhookType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumWebhookTypeValue, data, "WebhookType")
	if err != nil {
		return err
	}
	*e = WebhookType(value)
	return nil
}

func (e WebhookType) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *WebhookType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumWebhookTypeValue, src, "WebhookType")
	*e = (WebhookType)(value)
	return err
}

func (e WebhookType) Wrap() NullWebhookType {
	return WrapWebhookType(e)
}

func ParseWebhookTypeWithNull(s dot.NullString, d WebhookType) NullWebhookType {
	if !s.Valid {
		return NullWebhookType{}
	}
	val, ok := enumWebhookTypeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return WebhookType(val).Wrap()
}

func WrapWebhookType(enum WebhookType) NullWebhookType {
	return NullWebhookType{Enum: enum, Valid: true}
}

func (n NullWebhookType) Apply(s WebhookType) WebhookType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullWebhookType) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullWebhookType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullWebhookType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullWebhookType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
