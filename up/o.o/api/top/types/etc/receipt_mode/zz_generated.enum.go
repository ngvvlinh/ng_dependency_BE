// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package receipt_mode

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumReceiptModeName = map[int]string{
	0: "unknown",
	1: "manual",
	2: "auto",
}

var enumReceiptModeValue = map[string]int{
	"unknown": 0,
	"manual":  1,
	"auto":    2,
}

func ParseReceiptMode(s string) (ReceiptMode, bool) {
	val, ok := enumReceiptModeValue[s]
	return ReceiptMode(val), ok
}

func ParseReceiptModeWithDefault(s string, d ReceiptMode) ReceiptMode {
	val, ok := enumReceiptModeValue[s]
	if !ok {
		return d
	}
	return ReceiptMode(val)
}

func (e ReceiptMode) Apply(d ReceiptMode) ReceiptMode {
	if e == 0 {
		return d
	}
	return e
}

func (e ReceiptMode) Enum() int {
	return int(e)
}

func (e ReceiptMode) Name() string {
	return enumReceiptModeName[e.Enum()]
}

func (e ReceiptMode) String() string {
	s, ok := enumReceiptModeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("ReceiptMode(%v)", e.Enum())
}

func (e ReceiptMode) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumReceiptModeName[e.Enum()] + "\""), nil
}

func (e *ReceiptMode) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumReceiptModeValue, data, "ReceiptMode")
	if err != nil {
		return err
	}
	*e = ReceiptMode(value)
	return nil
}

func (e ReceiptMode) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *ReceiptMode) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumReceiptModeValue, src, "ReceiptMode")
	*e = (ReceiptMode)(value)
	return err
}

func (e ReceiptMode) Wrap() NullReceiptMode {
	return WrapReceiptMode(e)
}

func ParseReceiptModeWithNull(s dot.NullString, d ReceiptMode) NullReceiptMode {
	if !s.Valid {
		return NullReceiptMode{}
	}
	val, ok := enumReceiptModeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return ReceiptMode(val).Wrap()
}

func WrapReceiptMode(enum ReceiptMode) NullReceiptMode {
	return NullReceiptMode{Enum: enum, Valid: true}
}

func (n NullReceiptMode) Apply(s ReceiptMode) ReceiptMode {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullReceiptMode) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullReceiptMode) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullReceiptMode) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullReceiptMode) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
