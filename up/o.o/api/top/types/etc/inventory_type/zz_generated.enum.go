// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package inventory_type

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumInventoryVoucherTypeName = map[int]string{
	0: "unknown",
	1: "in",
	2: "out",
}

var enumInventoryVoucherTypeValue = map[string]int{
	"unknown": 0,
	"in":      1,
	"out":     2,
}

func ParseInventoryVoucherType(s string) (InventoryVoucherType, bool) {
	val, ok := enumInventoryVoucherTypeValue[s]
	return InventoryVoucherType(val), ok
}

func ParseInventoryVoucherTypeWithDefault(s string, d InventoryVoucherType) InventoryVoucherType {
	val, ok := enumInventoryVoucherTypeValue[s]
	if !ok {
		return d
	}
	return InventoryVoucherType(val)
}

func (e InventoryVoucherType) Apply(d InventoryVoucherType) InventoryVoucherType {
	if e == 0 {
		return d
	}
	return e
}

func (e InventoryVoucherType) Enum() int {
	return int(e)
}

func (e InventoryVoucherType) Name() string {
	return enumInventoryVoucherTypeName[e.Enum()]
}

func (e InventoryVoucherType) String() string {
	s, ok := enumInventoryVoucherTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("InventoryVoucherType(%v)", e.Enum())
}

func (e InventoryVoucherType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumInventoryVoucherTypeName[e.Enum()] + "\""), nil
}

func (e *InventoryVoucherType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumInventoryVoucherTypeValue, data, "InventoryVoucherType")
	if err != nil {
		return err
	}
	*e = InventoryVoucherType(value)
	return nil
}

func (e InventoryVoucherType) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *InventoryVoucherType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumInventoryVoucherTypeValue, src, "InventoryVoucherType")
	*e = (InventoryVoucherType)(value)
	return err
}

func (e InventoryVoucherType) Wrap() NullInventoryVoucherType {
	return WrapInventoryVoucherType(e)
}

func ParseInventoryVoucherTypeWithNull(s dot.NullString, d InventoryVoucherType) NullInventoryVoucherType {
	if !s.Valid {
		return NullInventoryVoucherType{}
	}
	val, ok := enumInventoryVoucherTypeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return InventoryVoucherType(val).Wrap()
}

func WrapInventoryVoucherType(enum InventoryVoucherType) NullInventoryVoucherType {
	return NullInventoryVoucherType{Enum: enum, Valid: true}
}

func (n NullInventoryVoucherType) Apply(s InventoryVoucherType) InventoryVoucherType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullInventoryVoucherType) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullInventoryVoucherType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullInventoryVoucherType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullInventoryVoucherType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
