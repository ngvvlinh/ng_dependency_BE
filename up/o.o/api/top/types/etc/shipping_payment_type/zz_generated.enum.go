// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package shipping_payment_type

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumShippingPaymentTypeName = map[int]string{
	0: "none",
	1: "seller",
	2: "buyer",
}

var enumShippingPaymentTypeValue = map[string]int{
	"none":   0,
	"seller": 1,
	"buyer":  2,
}

func ParseShippingPaymentType(s string) (ShippingPaymentType, bool) {
	val, ok := enumShippingPaymentTypeValue[s]
	return ShippingPaymentType(val), ok
}

func ParseShippingPaymentTypeWithDefault(s string, d ShippingPaymentType) ShippingPaymentType {
	val, ok := enumShippingPaymentTypeValue[s]
	if !ok {
		return d
	}
	return ShippingPaymentType(val)
}

func (e ShippingPaymentType) Apply(d ShippingPaymentType) ShippingPaymentType {
	if e == 0 {
		return d
	}
	return e
}

func (e ShippingPaymentType) Enum() int {
	return int(e)
}

func (e ShippingPaymentType) Name() string {
	return enumShippingPaymentTypeName[e.Enum()]
}

func (e ShippingPaymentType) String() string {
	s, ok := enumShippingPaymentTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("ShippingPaymentType(%v)", e.Enum())
}

func (e ShippingPaymentType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumShippingPaymentTypeName[e.Enum()] + "\""), nil
}

func (e *ShippingPaymentType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumShippingPaymentTypeValue, data, "ShippingPaymentType")
	if err != nil {
		return err
	}
	*e = ShippingPaymentType(value)
	return nil
}

func (e ShippingPaymentType) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return int64(e), nil
}

func (e *ShippingPaymentType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumShippingPaymentTypeValue, src, "ShippingPaymentType")
	*e = (ShippingPaymentType)(value)
	return err
}

func (e ShippingPaymentType) Wrap() NullShippingPaymentType {
	return WrapShippingPaymentType(e)
}

func ParseShippingPaymentTypeWithNull(s dot.NullString, d ShippingPaymentType) NullShippingPaymentType {
	if !s.Valid {
		return NullShippingPaymentType{}
	}
	val, ok := enumShippingPaymentTypeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return ShippingPaymentType(val).Wrap()
}

func WrapShippingPaymentType(enum ShippingPaymentType) NullShippingPaymentType {
	return NullShippingPaymentType{Enum: enum, Valid: true}
}

func (n NullShippingPaymentType) Apply(s ShippingPaymentType) ShippingPaymentType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullShippingPaymentType) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullShippingPaymentType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullShippingPaymentType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullShippingPaymentType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
