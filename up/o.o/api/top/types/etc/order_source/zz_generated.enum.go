// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package order_source

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumSourceName = map[int]string{
	0:  "unknown",
	1:  "self",
	2:  "import",
	3:  "api",
	5:  "etop_pos",
	6:  "etop_pxs",
	7:  "etop_cmx",
	8:  "ts_app",
	9:  "etop_app",
	10: "haravan",
}

var enumSourceValue = map[string]int{
	"unknown":  0,
	"self":     1,
	"import":   2,
	"api":      3,
	"etop_pos": 5,
	"etop_pxs": 6,
	"etop_cmx": 7,
	"ts_app":   8,
	"etop_app": 9,
	"haravan":  10,
}

func ParseSource(s string) (Source, bool) {
	val, ok := enumSourceValue[s]
	return Source(val), ok
}

func ParseSourceWithDefault(s string, d Source) Source {
	val, ok := enumSourceValue[s]
	if !ok {
		return d
	}
	return Source(val)
}

func (e Source) Apply(d Source) Source {
	if e == 0 {
		return d
	}
	return e
}

func (e Source) Enum() int {
	return int(e)
}

func (e Source) Name() string {
	return enumSourceName[e.Enum()]
}

func (e Source) String() string {
	s, ok := enumSourceName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("Source(%v)", e.Enum())
}

func (e Source) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumSourceName[e.Enum()] + "\""), nil
}

func (e *Source) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumSourceValue, data, "Source")
	if err != nil {
		return err
	}
	*e = Source(value)
	return nil
}

func (e Source) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *Source) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumSourceValue, src, "Source")
	*e = (Source)(value)
	return err
}

func (e Source) Wrap() NullSource {
	return WrapSource(e)
}

func ParseSourceWithNull(s dot.NullString, d Source) NullSource {
	if !s.Valid {
		return NullSource{}
	}
	val, ok := enumSourceValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return Source(val).Wrap()
}

func WrapSource(enum Source) NullSource {
	return NullSource{Enum: enum, Valid: true}
}

func (n NullSource) Apply(s Source) Source {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullSource) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullSource) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullSource) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullSource) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
