// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package wl_type

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumWhiteLabelTypeName = map[int]string{
	0:   "unknown",
	267: "pos",
	453: "shipship",
}

var enumWhiteLabelTypeValue = map[string]int{
	"unknown":  0,
	"pos":      267,
	"shipship": 453,
}

func ParseWhiteLabelType(s string) (WhiteLabelType, bool) {
	val, ok := enumWhiteLabelTypeValue[s]
	return WhiteLabelType(val), ok
}

func ParseWhiteLabelTypeWithDefault(s string, d WhiteLabelType) WhiteLabelType {
	val, ok := enumWhiteLabelTypeValue[s]
	if !ok {
		return d
	}
	return WhiteLabelType(val)
}

func (e WhiteLabelType) Apply(d WhiteLabelType) WhiteLabelType {
	if e == 0 {
		return d
	}
	return e
}

func (e WhiteLabelType) Enum() int {
	return int(e)
}

func (e WhiteLabelType) Name() string {
	return enumWhiteLabelTypeName[e.Enum()]
}

func (e WhiteLabelType) String() string {
	s, ok := enumWhiteLabelTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("WhiteLabelType(%v)", e.Enum())
}

func (e WhiteLabelType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumWhiteLabelTypeName[e.Enum()] + "\""), nil
}

func (e *WhiteLabelType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumWhiteLabelTypeValue, data, "WhiteLabelType")
	if err != nil {
		return err
	}
	*e = WhiteLabelType(value)
	return nil
}

func (e WhiteLabelType) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *WhiteLabelType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumWhiteLabelTypeValue, src, "WhiteLabelType")
	*e = (WhiteLabelType)(value)
	return err
}

func (e WhiteLabelType) Wrap() NullWhiteLabelType {
	return WrapWhiteLabelType(e)
}

func ParseWhiteLabelTypeWithNull(s dot.NullString, d WhiteLabelType) NullWhiteLabelType {
	if !s.Valid {
		return NullWhiteLabelType{}
	}
	val, ok := enumWhiteLabelTypeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return WhiteLabelType(val).Wrap()
}

func WrapWhiteLabelType(enum WhiteLabelType) NullWhiteLabelType {
	return NullWhiteLabelType{Enum: enum, Valid: true}
}

func (n NullWhiteLabelType) Apply(s WhiteLabelType) WhiteLabelType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullWhiteLabelType) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullWhiteLabelType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullWhiteLabelType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullWhiteLabelType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
