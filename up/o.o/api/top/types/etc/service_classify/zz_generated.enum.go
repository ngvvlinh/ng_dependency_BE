// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package service_classify

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumServiceClassifyName = map[int]string{
	0: "shipping",
	1: "telecom",
	9: "all",
}

var enumServiceClassifyValue = map[string]int{
	"shipping": 0,
	"telecom":  1,
	"all":      9,
}

func ParseServiceClassify(s string) (ServiceClassify, bool) {
	val, ok := enumServiceClassifyValue[s]
	return ServiceClassify(val), ok
}

func ParseServiceClassifyWithDefault(s string, d ServiceClassify) ServiceClassify {
	val, ok := enumServiceClassifyValue[s]
	if !ok {
		return d
	}
	return ServiceClassify(val)
}

func (e ServiceClassify) Enum() int {
	return int(e)
}

func (e ServiceClassify) Name() string {
	return enumServiceClassifyName[e.Enum()]
}

func (e ServiceClassify) String() string {
	s, ok := enumServiceClassifyName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("ServiceClassify(%v)", e.Enum())
}

func (e ServiceClassify) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumServiceClassifyName[e.Enum()] + "\""), nil
}

func (e *ServiceClassify) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumServiceClassifyValue, data, "ServiceClassify")
	if err != nil {
		return err
	}
	*e = ServiceClassify(value)
	return nil
}

func (e ServiceClassify) Value() (driver.Value, error) {
	return e.String(), nil
}

func (e *ServiceClassify) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumServiceClassifyValue, src, "ServiceClassify")
	*e = (ServiceClassify)(value)
	return err
}

func (e ServiceClassify) Wrap() NullServiceClassify {
	return WrapServiceClassify(e)
}

func ParseServiceClassifyWithNull(s dot.NullString, d ServiceClassify) NullServiceClassify {
	if !s.Valid {
		return NullServiceClassify{}
	}
	val, ok := enumServiceClassifyValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return ServiceClassify(val).Wrap()
}

func WrapServiceClassify(enum ServiceClassify) NullServiceClassify {
	return NullServiceClassify{Enum: enum, Valid: true}
}

func (n NullServiceClassify) Apply(s ServiceClassify) ServiceClassify {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullServiceClassify) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullServiceClassify) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullServiceClassify) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullServiceClassify) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
