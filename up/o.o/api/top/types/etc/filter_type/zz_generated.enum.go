// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package filter_type

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumFilterTypeName = map[int]string{
	1: "include",
	2: "exclude",
}

var enumFilterTypeValue = map[string]int{
	"include": 1,
	"exclude": 2,
}

func ParseFilterType(s string) (FilterType, bool) {
	val, ok := enumFilterTypeValue[s]
	return FilterType(val), ok
}

func ParseFilterTypeWithDefault(s string, d FilterType) FilterType {
	val, ok := enumFilterTypeValue[s]
	if !ok {
		return d
	}
	return FilterType(val)
}

func (e FilterType) Apply(d FilterType) FilterType {
	if e == 0 {
		return d
	}
	return e
}

func (e FilterType) Enum() int {
	return int(e)
}

func (e FilterType) Name() string {
	return enumFilterTypeName[e.Enum()]
}

func (e FilterType) String() string {
	s, ok := enumFilterTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("FilterType(%v)", e.Enum())
}

func (e FilterType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumFilterTypeName[e.Enum()] + "\""), nil
}

func (e *FilterType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumFilterTypeValue, data, "FilterType")
	if err != nil {
		return err
	}
	*e = FilterType(value)
	return nil
}

func (e FilterType) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *FilterType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumFilterTypeValue, src, "FilterType")
	*e = (FilterType)(value)
	return err
}

func (e FilterType) Wrap() NullFilterType {
	return WrapFilterType(e)
}

func ParseFilterTypeWithNull(s dot.NullString, d FilterType) NullFilterType {
	if !s.Valid {
		return NullFilterType{}
	}
	val, ok := enumFilterTypeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return FilterType(val).Wrap()
}

func WrapFilterType(enum FilterType) NullFilterType {
	return NullFilterType{Enum: enum, Valid: true}
}

func (n NullFilterType) Apply(s FilterType) FilterType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullFilterType) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullFilterType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullFilterType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullFilterType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
