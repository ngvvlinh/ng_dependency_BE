// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package etop

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "o.o/capi/dot"
	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumRedirectTypeName = map[int]string{
	1: "web",
	2: "app",
}

var enumRedirectTypeValue = map[string]int{
	"web": 1,
	"app": 2,
}

func ParseRedirectType(s string) (RedirectType, bool) {
	val, ok := enumRedirectTypeValue[s]
	return RedirectType(val), ok
}

func ParseRedirectTypeWithDefault(s string, d RedirectType) RedirectType {
	val, ok := enumRedirectTypeValue[s]
	if !ok {
		return d
	}
	return RedirectType(val)
}

func (e RedirectType) Apply(d RedirectType) RedirectType {
	if e == 0 {
		return d
	}
	return e
}

func (e RedirectType) Enum() int {
	return int(e)
}

func (e RedirectType) Name() string {
	return enumRedirectTypeName[e.Enum()]
}

func (e RedirectType) String() string {
	s, ok := enumRedirectTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("RedirectType(%v)", e.Enum())
}

func (e RedirectType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumRedirectTypeName[e.Enum()] + "\""), nil
}

func (e *RedirectType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumRedirectTypeValue, data, "RedirectType")
	if err != nil {
		return err
	}
	*e = RedirectType(value)
	return nil
}

func (e RedirectType) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *RedirectType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumRedirectTypeValue, src, "RedirectType")
	*e = (RedirectType)(value)
	return err
}

func (e RedirectType) Wrap() NullRedirectType {
	return WrapRedirectType(e)
}

func ParseRedirectTypeWithNull(s dot.NullString, d RedirectType) NullRedirectType {
	if !s.Valid {
		return NullRedirectType{}
	}
	val, ok := enumRedirectTypeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return RedirectType(val).Wrap()
}

func WrapRedirectType(enum RedirectType) NullRedirectType {
	return NullRedirectType{Enum: enum, Valid: true}
}

func (n NullRedirectType) Apply(s RedirectType) RedirectType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullRedirectType) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullRedirectType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullRedirectType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullRedirectType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
