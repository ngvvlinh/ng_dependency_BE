// +build !generator

// Code generated by generator api. DO NOT EDIT.

package webserver

import (
	context "context"

	meta "etop.vn/api/meta"
	capi "etop.vn/capi"
	dot "etop.vn/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateOrUpdateWsCategoryCommand struct {
	ShopID    dot.ID
	ID        dot.ID
	Slug      dot.NullString
	SEOConfig *WsSEOConfig
	Image     dot.NullString
	Appear    dot.NullBool

	Result *WsCategory `json:"-"`
}

func (h AggregateHandler) HandleCreateOrUpdateWsCategory(ctx context.Context, msg *CreateOrUpdateWsCategoryCommand) (err error) {
	msg.Result, err = h.inner.CreateOrUpdateWsCategory(msg.GetArgs(ctx))
	return err
}

type CreateOrUpdateWsProductCommand struct {
	ID           dot.ID
	ShopID       dot.ID
	SEOConfig    *WsSEOConfig
	Slug         dot.NullString
	Appear       dot.NullBool
	ComparePrice []*ComparePrice
	DescHTML     dot.NullString

	Result *WsProduct `json:"-"`
}

func (h AggregateHandler) HandleCreateOrUpdateWsProduct(ctx context.Context, msg *CreateOrUpdateWsProductCommand) (err error) {
	msg.Result, err = h.inner.CreateOrUpdateWsProduct(msg.GetArgs(ctx))
	return err
}

type CreateWsPageCommand struct {
	ShopID    dot.ID
	SEOConfig *WsSEOConfig
	Name      string
	Slug      string
	DescHTML  string
	Image     string
	Appear    bool

	Result *WsPage `json:"-"`
}

func (h AggregateHandler) HandleCreateWsPage(ctx context.Context, msg *CreateWsPageCommand) (err error) {
	msg.Result, err = h.inner.CreateWsPage(msg.GetArgs(ctx))
	return err
}

type CreateWsWebsiteCommand struct {
	ShopID             dot.ID
	MainColor          string
	Banner             *Banner
	OutstandingProduct *SpecialProduct
	NewProduct         *SpecialProduct
	SEOConfig          *WsGeneralSEO
	Facebook           *Facebook
	GoogleAnalyticsID  string
	DomainName         string
	OverStock          bool
	ShopInfo           *ShopInfo
	Description        string
	LogoImage          string
	FaviconImage       string

	Result *WsWebsite `json:"-"`
}

func (h AggregateHandler) HandleCreateWsWebsite(ctx context.Context, msg *CreateWsWebsiteCommand) (err error) {
	msg.Result, err = h.inner.CreateWsWebsite(msg.GetArgs(ctx))
	return err
}

type DeleteWsPageCommand struct {
	ShopID dot.ID
	ID     dot.ID

	Result int `json:"-"`
}

func (h AggregateHandler) HandleDeleteWsPage(ctx context.Context, msg *DeleteWsPageCommand) (err error) {
	msg.Result, err = h.inner.DeleteWsPage(msg.GetArgs(ctx))
	return err
}

type UpdateWsPageCommand struct {
	ShopID    dot.ID
	ID        dot.ID
	SEOConfig *WsSEOConfig
	Name      dot.NullString
	Slug      dot.NullString
	DescHTML  dot.NullString
	Image     dot.NullString
	Appear    dot.NullBool

	Result *WsPage `json:"-"`
}

func (h AggregateHandler) HandleUpdateWsPage(ctx context.Context, msg *UpdateWsPageCommand) (err error) {
	msg.Result, err = h.inner.UpdateWsPage(msg.GetArgs(ctx))
	return err
}

type UpdateWsWebsiteCommand struct {
	ShopID             dot.ID
	ID                 dot.ID
	MainColor          dot.NullString
	Banner             *Banner
	OutstandingProduct *SpecialProduct
	NewProduct         *SpecialProduct
	SEOConfig          *WsGeneralSEO
	Facebook           *Facebook
	GoogleAnalyticsID  dot.NullString
	DomainName         dot.NullString
	OverStock          dot.NullBool
	ShopInfo           *ShopInfo
	Description        dot.NullString
	LogoImage          dot.NullString
	FaviconImage       dot.NullString

	Result *WsWebsite `json:"-"`
}

func (h AggregateHandler) HandleUpdateWsWebsite(ctx context.Context, msg *UpdateWsWebsiteCommand) (err error) {
	msg.Result, err = h.inner.UpdateWsWebsite(msg.GetArgs(ctx))
	return err
}

type GetWsCategoryByIDQuery struct {
	ShopID dot.ID
	ID     dot.ID

	Result *WsCategory `json:"-"`
}

func (h QueryServiceHandler) HandleGetWsCategoryByID(ctx context.Context, msg *GetWsCategoryByIDQuery) (err error) {
	msg.Result, err = h.inner.GetWsCategoryByID(msg.GetArgs(ctx))
	return err
}

type GetWsPageByIDQuery struct {
	ShopID dot.ID
	ID     dot.ID

	Result *WsPage `json:"-"`
}

func (h QueryServiceHandler) HandleGetWsPageByID(ctx context.Context, msg *GetWsPageByIDQuery) (err error) {
	msg.Result, err = h.inner.GetWsPageByID(msg.GetArgs(ctx))
	return err
}

type GetWsProductByIDQuery struct {
	ShopID dot.ID
	ID     dot.ID

	Result *WsProduct `json:"-"`
}

func (h QueryServiceHandler) HandleGetWsProductByID(ctx context.Context, msg *GetWsProductByIDQuery) (err error) {
	msg.Result, err = h.inner.GetWsProductByID(msg.GetArgs(ctx))
	return err
}

type GetWsWebsiteByIDQuery struct {
	ShopID dot.ID
	ID     dot.ID

	Result *WsWebsite `json:"-"`
}

func (h QueryServiceHandler) HandleGetWsWebsiteByID(ctx context.Context, msg *GetWsWebsiteByIDQuery) (err error) {
	msg.Result, err = h.inner.GetWsWebsiteByID(msg.GetArgs(ctx))
	return err
}

type ListWsCategoriesQuery struct {
	ShopID  dot.ID
	Paging  meta.Paging
	Filters meta.Filters

	Result *ListWsCategoriesResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListWsCategories(ctx context.Context, msg *ListWsCategoriesQuery) (err error) {
	msg.Result, err = h.inner.ListWsCategories(msg.GetArgs(ctx))
	return err
}

type ListWsCategoriesByIDsQuery struct {
	ShopID dot.ID
	IDs    []dot.ID

	Result []*WsCategory `json:"-"`
}

func (h QueryServiceHandler) HandleListWsCategoriesByIDs(ctx context.Context, msg *ListWsCategoriesByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListWsCategoriesByIDs(msg.GetArgs(ctx))
	return err
}

type ListWsPagesQuery struct {
	ShopID  dot.ID
	Paging  meta.Paging
	Filters meta.Filters

	Result *ListWsPagesResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListWsPages(ctx context.Context, msg *ListWsPagesQuery) (err error) {
	msg.Result, err = h.inner.ListWsPages(msg.GetArgs(ctx))
	return err
}

type ListWsPagesByIDsQuery struct {
	ShopID dot.ID
	IDs    []dot.ID

	Result []*WsPage `json:"-"`
}

func (h QueryServiceHandler) HandleListWsPagesByIDs(ctx context.Context, msg *ListWsPagesByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListWsPagesByIDs(msg.GetArgs(ctx))
	return err
}

type ListWsProductsQuery struct {
	ShopID  dot.ID
	Paging  meta.Paging
	Filters meta.Filters

	Result *ListWsProductsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListWsProducts(ctx context.Context, msg *ListWsProductsQuery) (err error) {
	msg.Result, err = h.inner.ListWsProducts(msg.GetArgs(ctx))
	return err
}

type ListWsProductsByIDsQuery struct {
	ShopID dot.ID
	IDs    []dot.ID

	Result []*WsProduct `json:"-"`
}

func (h QueryServiceHandler) HandleListWsProductsByIDs(ctx context.Context, msg *ListWsProductsByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListWsProductsByIDs(msg.GetArgs(ctx))
	return err
}

type ListWsWebsitesQuery struct {
	ShopID  dot.ID
	Paging  meta.Paging
	Filters meta.Filters

	Result *ListWsWebsitesResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListWsWebsites(ctx context.Context, msg *ListWsWebsitesQuery) (err error) {
	msg.Result, err = h.inner.ListWsWebsites(msg.GetArgs(ctx))
	return err
}

type ListWsWebsitesByIDsQuery struct {
	ShopID dot.ID
	IDs    []dot.ID

	Result []*WsWebsite `json:"-"`
}

func (h QueryServiceHandler) HandleListWsWebsitesByIDs(ctx context.Context, msg *ListWsWebsitesByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListWsWebsitesByIDs(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateOrUpdateWsCategoryCommand) command() {}
func (q *CreateOrUpdateWsProductCommand) command()  {}
func (q *CreateWsPageCommand) command()             {}
func (q *CreateWsWebsiteCommand) command()          {}
func (q *DeleteWsPageCommand) command()             {}
func (q *UpdateWsPageCommand) command()             {}
func (q *UpdateWsWebsiteCommand) command()          {}

func (q *GetWsCategoryByIDQuery) query()     {}
func (q *GetWsPageByIDQuery) query()         {}
func (q *GetWsProductByIDQuery) query()      {}
func (q *GetWsWebsiteByIDQuery) query()      {}
func (q *ListWsCategoriesQuery) query()      {}
func (q *ListWsCategoriesByIDsQuery) query() {}
func (q *ListWsPagesQuery) query()           {}
func (q *ListWsPagesByIDsQuery) query()      {}
func (q *ListWsProductsQuery) query()        {}
func (q *ListWsProductsByIDsQuery) query()   {}
func (q *ListWsWebsitesQuery) query()        {}
func (q *ListWsWebsitesByIDsQuery) query()   {}

// implement conversion

func (q *CreateOrUpdateWsCategoryCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateOrUpdateWsCategoryArgs) {
	return ctx,
		&CreateOrUpdateWsCategoryArgs{
			ShopID:    q.ShopID,
			ID:        q.ID,
			Slug:      q.Slug,
			SEOConfig: q.SEOConfig,
			Image:     q.Image,
			Appear:    q.Appear,
		}
}

func (q *CreateOrUpdateWsCategoryCommand) SetCreateOrUpdateWsCategoryArgs(args *CreateOrUpdateWsCategoryArgs) {
	q.ShopID = args.ShopID
	q.ID = args.ID
	q.Slug = args.Slug
	q.SEOConfig = args.SEOConfig
	q.Image = args.Image
	q.Appear = args.Appear
}

func (q *CreateOrUpdateWsProductCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateOrUpdateWsProductArgs) {
	return ctx,
		&CreateOrUpdateWsProductArgs{
			ID:           q.ID,
			ShopID:       q.ShopID,
			SEOConfig:    q.SEOConfig,
			Slug:         q.Slug,
			Appear:       q.Appear,
			ComparePrice: q.ComparePrice,
			DescHTML:     q.DescHTML,
		}
}

func (q *CreateOrUpdateWsProductCommand) SetCreateOrUpdateWsProductArgs(args *CreateOrUpdateWsProductArgs) {
	q.ID = args.ID
	q.ShopID = args.ShopID
	q.SEOConfig = args.SEOConfig
	q.Slug = args.Slug
	q.Appear = args.Appear
	q.ComparePrice = args.ComparePrice
	q.DescHTML = args.DescHTML
}

func (q *CreateWsPageCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateWsPageArgs) {
	return ctx,
		&CreateWsPageArgs{
			ShopID:    q.ShopID,
			SEOConfig: q.SEOConfig,
			Name:      q.Name,
			Slug:      q.Slug,
			DescHTML:  q.DescHTML,
			Image:     q.Image,
			Appear:    q.Appear,
		}
}

func (q *CreateWsPageCommand) SetCreateWsPageArgs(args *CreateWsPageArgs) {
	q.ShopID = args.ShopID
	q.SEOConfig = args.SEOConfig
	q.Name = args.Name
	q.Slug = args.Slug
	q.DescHTML = args.DescHTML
	q.Image = args.Image
	q.Appear = args.Appear
}

func (q *CreateWsWebsiteCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateWsWebsiteArgs) {
	return ctx,
		&CreateWsWebsiteArgs{
			ShopID:             q.ShopID,
			MainColor:          q.MainColor,
			Banner:             q.Banner,
			OutstandingProduct: q.OutstandingProduct,
			NewProduct:         q.NewProduct,
			SEOConfig:          q.SEOConfig,
			Facebook:           q.Facebook,
			GoogleAnalyticsID:  q.GoogleAnalyticsID,
			DomainName:         q.DomainName,
			OverStock:          q.OverStock,
			ShopInfo:           q.ShopInfo,
			Description:        q.Description,
			LogoImage:          q.LogoImage,
			FaviconImage:       q.FaviconImage,
		}
}

func (q *CreateWsWebsiteCommand) SetCreateWsWebsiteArgs(args *CreateWsWebsiteArgs) {
	q.ShopID = args.ShopID
	q.MainColor = args.MainColor
	q.Banner = args.Banner
	q.OutstandingProduct = args.OutstandingProduct
	q.NewProduct = args.NewProduct
	q.SEOConfig = args.SEOConfig
	q.Facebook = args.Facebook
	q.GoogleAnalyticsID = args.GoogleAnalyticsID
	q.DomainName = args.DomainName
	q.OverStock = args.OverStock
	q.ShopInfo = args.ShopInfo
	q.Description = args.Description
	q.LogoImage = args.LogoImage
	q.FaviconImage = args.FaviconImage
}

func (q *DeleteWsPageCommand) GetArgs(ctx context.Context) (_ context.Context, shopID dot.ID, ID dot.ID) {
	return ctx,
		q.ShopID,
		q.ID
}

func (q *UpdateWsPageCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateWsPageArgs) {
	return ctx,
		&UpdateWsPageArgs{
			ShopID:    q.ShopID,
			ID:        q.ID,
			SEOConfig: q.SEOConfig,
			Name:      q.Name,
			Slug:      q.Slug,
			DescHTML:  q.DescHTML,
			Image:     q.Image,
			Appear:    q.Appear,
		}
}

func (q *UpdateWsPageCommand) SetUpdateWsPageArgs(args *UpdateWsPageArgs) {
	q.ShopID = args.ShopID
	q.ID = args.ID
	q.SEOConfig = args.SEOConfig
	q.Name = args.Name
	q.Slug = args.Slug
	q.DescHTML = args.DescHTML
	q.Image = args.Image
	q.Appear = args.Appear
}

func (q *UpdateWsWebsiteCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateWsWebsiteArgs) {
	return ctx,
		&UpdateWsWebsiteArgs{
			ShopID:             q.ShopID,
			ID:                 q.ID,
			MainColor:          q.MainColor,
			Banner:             q.Banner,
			OutstandingProduct: q.OutstandingProduct,
			NewProduct:         q.NewProduct,
			SEOConfig:          q.SEOConfig,
			Facebook:           q.Facebook,
			GoogleAnalyticsID:  q.GoogleAnalyticsID,
			DomainName:         q.DomainName,
			OverStock:          q.OverStock,
			ShopInfo:           q.ShopInfo,
			Description:        q.Description,
			LogoImage:          q.LogoImage,
			FaviconImage:       q.FaviconImage,
		}
}

func (q *UpdateWsWebsiteCommand) SetUpdateWsWebsiteArgs(args *UpdateWsWebsiteArgs) {
	q.ShopID = args.ShopID
	q.ID = args.ID
	q.MainColor = args.MainColor
	q.Banner = args.Banner
	q.OutstandingProduct = args.OutstandingProduct
	q.NewProduct = args.NewProduct
	q.SEOConfig = args.SEOConfig
	q.Facebook = args.Facebook
	q.GoogleAnalyticsID = args.GoogleAnalyticsID
	q.DomainName = args.DomainName
	q.OverStock = args.OverStock
	q.ShopInfo = args.ShopInfo
	q.Description = args.Description
	q.LogoImage = args.LogoImage
	q.FaviconImage = args.FaviconImage
}

func (q *GetWsCategoryByIDQuery) GetArgs(ctx context.Context) (_ context.Context, shopID dot.ID, ID dot.ID) {
	return ctx,
		q.ShopID,
		q.ID
}

func (q *GetWsPageByIDQuery) GetArgs(ctx context.Context) (_ context.Context, shopID dot.ID, ID dot.ID) {
	return ctx,
		q.ShopID,
		q.ID
}

func (q *GetWsProductByIDQuery) GetArgs(ctx context.Context) (_ context.Context, shopID dot.ID, ID dot.ID) {
	return ctx,
		q.ShopID,
		q.ID
}

func (q *GetWsWebsiteByIDQuery) GetArgs(ctx context.Context) (_ context.Context, shopID dot.ID, ID dot.ID) {
	return ctx,
		q.ShopID,
		q.ID
}

func (q *ListWsCategoriesQuery) GetArgs(ctx context.Context) (_ context.Context, _ ListWsCategoriesArgs) {
	return ctx,
		ListWsCategoriesArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListWsCategoriesQuery) SetListWsCategoriesArgs(args ListWsCategoriesArgs) {
	q.ShopID = args.ShopID
	q.Paging = args.Paging
	q.Filters = args.Filters
}

func (q *ListWsCategoriesByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, shopID dot.ID, IDs []dot.ID) {
	return ctx,
		q.ShopID,
		q.IDs
}

func (q *ListWsPagesQuery) GetArgs(ctx context.Context) (_ context.Context, _ ListWsPagesArgs) {
	return ctx,
		ListWsPagesArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListWsPagesQuery) SetListWsPagesArgs(args ListWsPagesArgs) {
	q.ShopID = args.ShopID
	q.Paging = args.Paging
	q.Filters = args.Filters
}

func (q *ListWsPagesByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, shopID dot.ID, IDs []dot.ID) {
	return ctx,
		q.ShopID,
		q.IDs
}

func (q *ListWsProductsQuery) GetArgs(ctx context.Context) (_ context.Context, _ ListWsProductsArgs) {
	return ctx,
		ListWsProductsArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListWsProductsQuery) SetListWsProductsArgs(args ListWsProductsArgs) {
	q.ShopID = args.ShopID
	q.Paging = args.Paging
	q.Filters = args.Filters
}

func (q *ListWsProductsByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, shopID dot.ID, IDs []dot.ID) {
	return ctx,
		q.ShopID,
		q.IDs
}

func (q *ListWsWebsitesQuery) GetArgs(ctx context.Context) (_ context.Context, _ ListWsWebsitesArgs) {
	return ctx,
		ListWsWebsitesArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListWsWebsitesQuery) SetListWsWebsitesArgs(args ListWsWebsitesArgs) {
	q.ShopID = args.ShopID
	q.Paging = args.Paging
	q.Filters = args.Filters
}

func (q *ListWsWebsitesByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, shopID dot.ID, IDs []dot.ID) {
	return ctx,
		q.ShopID,
		q.IDs
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateOrUpdateWsCategory)
	b.AddHandler(h.HandleCreateOrUpdateWsProduct)
	b.AddHandler(h.HandleCreateWsPage)
	b.AddHandler(h.HandleCreateWsWebsite)
	b.AddHandler(h.HandleDeleteWsPage)
	b.AddHandler(h.HandleUpdateWsPage)
	b.AddHandler(h.HandleUpdateWsWebsite)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetWsCategoryByID)
	b.AddHandler(h.HandleGetWsPageByID)
	b.AddHandler(h.HandleGetWsProductByID)
	b.AddHandler(h.HandleGetWsWebsiteByID)
	b.AddHandler(h.HandleListWsCategories)
	b.AddHandler(h.HandleListWsCategoriesByIDs)
	b.AddHandler(h.HandleListWsPages)
	b.AddHandler(h.HandleListWsPagesByIDs)
	b.AddHandler(h.HandleListWsProducts)
	b.AddHandler(h.HandleListWsProductsByIDs)
	b.AddHandler(h.HandleListWsWebsites)
	b.AddHandler(h.HandleListWsWebsitesByIDs)
	return QueryBus{b}
}
