// +build !generator

// Code generated by generator api. DO NOT EDIT.

package carrying

import (
	context "context"

	meta "etop.vn/api/meta"
	shopping "etop.vn/api/shopping"
	capi "etop.vn/capi"
	dot "etop.vn/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateCarrierCommand struct {
	ShopID   dot.ID
	FullName string
	Note     string

	Result *ShopCarrier `json:"-"`
}

func (h AggregateHandler) HandleCreateCarrier(ctx context.Context, msg *CreateCarrierCommand) (err error) {
	msg.Result, err = h.inner.CreateCarrier(msg.GetArgs(ctx))
	return err
}

type DeleteCarrierCommand struct {
	ID     dot.ID
	ShopID dot.ID

	Result int `json:"-"`
}

func (h AggregateHandler) HandleDeleteCarrier(ctx context.Context, msg *DeleteCarrierCommand) (err error) {
	msg.Result, err = h.inner.DeleteCarrier(msg.GetArgs(ctx))
	return err
}

type UpdateCarrierCommand struct {
	ID       dot.ID
	ShopID   dot.ID
	FullName dot.NullString
	Note     dot.NullString

	Result *ShopCarrier `json:"-"`
}

func (h AggregateHandler) HandleUpdateCarrier(ctx context.Context, msg *UpdateCarrierCommand) (err error) {
	msg.Result, err = h.inner.UpdateCarrier(msg.GetArgs(ctx))
	return err
}

type GetCarrierByIDQuery struct {
	ID     dot.ID
	ShopID dot.ID

	Result *ShopCarrier `json:"-"`
}

func (h QueryServiceHandler) HandleGetCarrierByID(ctx context.Context, msg *GetCarrierByIDQuery) (err error) {
	msg.Result, err = h.inner.GetCarrierByID(msg.GetArgs(ctx))
	return err
}

type ListCarriersQuery struct {
	ShopID  dot.ID
	Paging  meta.Paging
	Filters meta.Filters

	Result *CarriersResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListCarriers(ctx context.Context, msg *ListCarriersQuery) (err error) {
	msg.Result, err = h.inner.ListCarriers(msg.GetArgs(ctx))
	return err
}

type ListCarriersByIDsQuery struct {
	IDs    []dot.ID
	ShopID dot.ID
	Paging meta.Paging

	Result *CarriersResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListCarriersByIDs(ctx context.Context, msg *ListCarriersByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListCarriersByIDs(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateCarrierCommand) command() {}
func (q *DeleteCarrierCommand) command() {}
func (q *UpdateCarrierCommand) command() {}

func (q *GetCarrierByIDQuery) query()    {}
func (q *ListCarriersQuery) query()      {}
func (q *ListCarriersByIDsQuery) query() {}

// implement conversion

func (q *CreateCarrierCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateCarrierArgs) {
	return ctx,
		&CreateCarrierArgs{
			ShopID:   q.ShopID,
			FullName: q.FullName,
			Note:     q.Note,
		}
}

func (q *CreateCarrierCommand) SetCreateCarrierArgs(args *CreateCarrierArgs) {
	q.ShopID = args.ShopID
	q.FullName = args.FullName
	q.Note = args.Note
}

func (q *DeleteCarrierCommand) GetArgs(ctx context.Context) (_ context.Context, ID dot.ID, shopID dot.ID) {
	return ctx,
		q.ID,
		q.ShopID
}

func (q *UpdateCarrierCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateCarrierArgs) {
	return ctx,
		&UpdateCarrierArgs{
			ID:       q.ID,
			ShopID:   q.ShopID,
			FullName: q.FullName,
			Note:     q.Note,
		}
}

func (q *UpdateCarrierCommand) SetUpdateCarrierArgs(args *UpdateCarrierArgs) {
	q.ID = args.ID
	q.ShopID = args.ShopID
	q.FullName = args.FullName
	q.Note = args.Note
}

func (q *GetCarrierByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.IDQueryShopArg) {
	return ctx,
		&shopping.IDQueryShopArg{
			ID:     q.ID,
			ShopID: q.ShopID,
		}
}

func (q *GetCarrierByIDQuery) SetIDQueryShopArg(args *shopping.IDQueryShopArg) {
	q.ID = args.ID
	q.ShopID = args.ShopID
}

func (q *ListCarriersQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.ListQueryShopArgs) {
	return ctx,
		&shopping.ListQueryShopArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListCarriersQuery) SetListQueryShopArgs(args *shopping.ListQueryShopArgs) {
	q.ShopID = args.ShopID
	q.Paging = args.Paging
	q.Filters = args.Filters
}

func (q *ListCarriersByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.IDsQueryShopArgs) {
	return ctx,
		&shopping.IDsQueryShopArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
			Paging: q.Paging,
		}
}

func (q *ListCarriersByIDsQuery) SetIDsQueryShopArgs(args *shopping.IDsQueryShopArgs) {
	q.IDs = args.IDs
	q.ShopID = args.ShopID
	q.Paging = args.Paging
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateCarrier)
	b.AddHandler(h.HandleDeleteCarrier)
	b.AddHandler(h.HandleUpdateCarrier)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetCarrierByID)
	b.AddHandler(h.HandleListCarriers)
	b.AddHandler(h.HandleListCarriersByIDs)
	return QueryBus{b}
}
