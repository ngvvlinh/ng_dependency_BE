// +build !generator

// Code generated by generator cq. DO NOT EDIT.

package carrying

import (
	context "context"

	meta "etop.vn/api/meta"
	shopping "etop.vn/api/shopping"
	capi "etop.vn/capi"
	dot "etop.vn/capi/dot"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func (c CommandBus) Dispatch(ctx context.Context, msg Command) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type CreateCarrierCommand struct {
	ShopID   int64
	FullName string
	Note     string

	Result *ShopCarrier `json:"-"`
}

func (h AggregateHandler) HandleCreateCarrier(ctx context.Context, msg *CreateCarrierCommand) (err error) {
	msg.Result, err = h.inner.CreateCarrier(msg.GetArgs(ctx))
	return err
}

type DeleteCarrierCommand struct {
	ID     int64
	ShopID int64

	Result int `json:"-"`
}

func (h AggregateHandler) HandleDeleteCarrier(ctx context.Context, msg *DeleteCarrierCommand) (err error) {
	msg.Result, err = h.inner.DeleteCarrier(msg.GetArgs(ctx))
	return err
}

type UpdateCarrierCommand struct {
	ID       int64
	ShopID   int64
	FullName dot.NullString
	Note     dot.NullString

	Result *ShopCarrier `json:"-"`
}

func (h AggregateHandler) HandleUpdateCarrier(ctx context.Context, msg *UpdateCarrierCommand) (err error) {
	msg.Result, err = h.inner.UpdateCarrier(msg.GetArgs(ctx))
	return err
}

type GetCarrierByIDQuery struct {
	ID     int64
	ShopID int64

	Result *ShopCarrier `json:"-"`
}

func (h QueryServiceHandler) HandleGetCarrierByID(ctx context.Context, msg *GetCarrierByIDQuery) (err error) {
	msg.Result, err = h.inner.GetCarrierByID(msg.GetArgs(ctx))
	return err
}

type ListCarriersQuery struct {
	ShopID  int64
	Paging  meta.Paging
	Filters meta.Filters

	Result *CarriersResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListCarriers(ctx context.Context, msg *ListCarriersQuery) (err error) {
	msg.Result, err = h.inner.ListCarriers(msg.GetArgs(ctx))
	return err
}

type ListCarriersByIDsQuery struct {
	IDs    []int64
	ShopID int64

	Result *CarriersResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListCarriersByIDs(ctx context.Context, msg *ListCarriersByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListCarriersByIDs(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateCarrierCommand) command() {}
func (q *DeleteCarrierCommand) command() {}
func (q *UpdateCarrierCommand) command() {}
func (q *GetCarrierByIDQuery) query()    {}
func (q *ListCarriersQuery) query()      {}
func (q *ListCarriersByIDsQuery) query() {}

// implement conversion

func (q *CreateCarrierCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateCarrierArgs) {
	return ctx,
		&CreateCarrierArgs{
			ShopID:   q.ShopID,
			FullName: q.FullName,
			Note:     q.Note,
		}
}

func (q *DeleteCarrierCommand) GetArgs(ctx context.Context) (_ context.Context, ID int64, shopID int64) {
	return ctx,
		q.ID,
		q.ShopID
}

func (q *UpdateCarrierCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateCarrierArgs) {
	return ctx,
		&UpdateCarrierArgs{
			ID:       q.ID,
			ShopID:   q.ShopID,
			FullName: q.FullName,
			Note:     q.Note,
		}
}

func (q *GetCarrierByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.IDQueryShopArg) {
	return ctx,
		&shopping.IDQueryShopArg{
			ID:     q.ID,
			ShopID: q.ShopID,
		}
}

func (q *ListCarriersQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.ListQueryShopArgs) {
	return ctx,
		&shopping.ListQueryShopArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListCarriersByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.IDsQueryShopArgs) {
	return ctx,
		&shopping.IDsQueryShopArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
		}
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateCarrier)
	b.AddHandler(h.HandleDeleteCarrier)
	b.AddHandler(h.HandleUpdateCarrier)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetCarrierByID)
	b.AddHandler(h.HandleListCarriers)
	b.AddHandler(h.HandleListCarriersByIDs)
	return QueryBus{b}
}
