// Code generated by gen-cmd-query. DO NOT EDIT.

package customering

import (
	context "context"

	meta "etop.vn/api/meta"
	metav1 "etop.vn/api/meta/v1"
	shopping "etop.vn/api/shopping"
	dot "etop.vn/capi/dot"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus meta.Bus }
type QueryBus struct{ bus meta.Bus }

func (c CommandBus) Dispatch(ctx context.Context, msg Command) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type BatchSetCustomersStatusCommand struct {
	IDs    []int64
	ShopID int64
	Status int32

	Result *meta.UpdatedResponse `json:"-"`
}

type CreateCustomerCommand struct {
	ShopID   int64
	Code     string
	FullName string
	Gender   string
	Type     string
	Birthday string
	Note     string
	Phone    string
	Email    string

	Result *ShopCustomer `json:"-"`
}

type DeleteCustomerCommand struct {
	ID     int64
	ShopID int64

	Result *metav1.Empty `json:"-"`
}

type UpdateCustomerCommand struct {
	ID       int64
	ShopID   int64
	Code     dot.NullString
	FullName dot.NullString
	Gender   dot.NullString
	Type     dot.NullString
	Birthday dot.NullString
	Note     dot.NullString
	Phone    dot.NullString
	Email    dot.NullString

	Result *ShopCustomer `json:"-"`
}

type GetCustomerByIDQuery struct {
	ID     int64
	ShopID int64

	Result *ShopCustomer `json:"-"`
}

type ListCustomersQuery struct {
	ShopID  int64
	Paging  metav1.Paging
	Filters meta.Filters

	Result *CustomersResponse `json:"-"`
}

type ListCustomersByIDsQuery struct {
	IDs    []int64
	ShopID int64

	Result *CustomersResponse `json:"-"`
}

// implement interfaces

func (q *BatchSetCustomersStatusCommand) command() {}
func (q *CreateCustomerCommand) command()          {}
func (q *DeleteCustomerCommand) command()          {}
func (q *UpdateCustomerCommand) command()          {}
func (q *GetCustomerByIDQuery) query()             {}
func (q *ListCustomersQuery) query()               {}
func (q *ListCustomersByIDsQuery) query()          {}

// implement conversion

func (q *BatchSetCustomersStatusCommand) GetArgs() *BatchSetCustomersStatusArgs {
	return &BatchSetCustomersStatusArgs{
		IDs:    q.IDs,
		ShopID: q.ShopID,
		Status: q.Status,
	}
}
func (q *CreateCustomerCommand) GetArgs() *CreateCustomerArgs {
	return &CreateCustomerArgs{
		ShopID:   q.ShopID,
		Code:     q.Code,
		FullName: q.FullName,
		Gender:   q.Gender,
		Type:     q.Type,
		Birthday: q.Birthday,
		Note:     q.Note,
		Phone:    q.Phone,
		Email:    q.Email,
	}
}
func (q *DeleteCustomerCommand) GetArgs() *shopping.IDQueryShopArg {
	return &shopping.IDQueryShopArg{
		ID:     q.ID,
		ShopID: q.ShopID,
	}
}
func (q *UpdateCustomerCommand) GetArgs() *UpdateCustomerArgs {
	return &UpdateCustomerArgs{
		ID:       q.ID,
		ShopID:   q.ShopID,
		Code:     q.Code,
		FullName: q.FullName,
		Gender:   q.Gender,
		Type:     q.Type,
		Birthday: q.Birthday,
		Note:     q.Note,
		Phone:    q.Phone,
		Email:    q.Email,
	}
}
func (q *GetCustomerByIDQuery) GetArgs() *shopping.IDQueryShopArg {
	return &shopping.IDQueryShopArg{
		ID:     q.ID,
		ShopID: q.ShopID,
	}
}
func (q *ListCustomersQuery) GetArgs() *shopping.ListQueryShopArgs {
	return &shopping.ListQueryShopArgs{
		ShopID:  q.ShopID,
		Paging:  q.Paging,
		Filters: q.Filters,
	}
}
func (q *ListCustomersByIDsQuery) GetArgs() *shopping.IDsQueryShopArgs {
	return &shopping.IDsQueryShopArgs{
		IDs:    q.IDs,
		ShopID: q.ShopID,
	}
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleBatchSetCustomersStatus)
	b.AddHandler(h.HandleCreateCustomer)
	b.AddHandler(h.HandleDeleteCustomer)
	b.AddHandler(h.HandleUpdateCustomer)
	return CommandBus{b}
}

func (h AggregateHandler) HandleBatchSetCustomersStatus(ctx context.Context, cmd *BatchSetCustomersStatusCommand) error {
	result, err := h.inner.BatchSetCustomersStatus(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleCreateCustomer(ctx context.Context, cmd *CreateCustomerCommand) error {
	result, err := h.inner.CreateCustomer(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleDeleteCustomer(ctx context.Context, cmd *DeleteCustomerCommand) error {
	result, err := h.inner.DeleteCustomer(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleUpdateCustomer(ctx context.Context, cmd *UpdateCustomerCommand) error {
	result, err := h.inner.UpdateCustomer(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetCustomerByID)
	b.AddHandler(h.HandleListCustomers)
	b.AddHandler(h.HandleListCustomersByIDs)
	return QueryBus{b}
}

func (h QueryServiceHandler) HandleGetCustomerByID(ctx context.Context, query *GetCustomerByIDQuery) error {
	result, err := h.inner.GetCustomerByID(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleListCustomers(ctx context.Context, query *ListCustomersQuery) error {
	result, err := h.inner.ListCustomers(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleListCustomersByIDs(ctx context.Context, query *ListCustomersByIDsQuery) error {
	result, err := h.inner.ListCustomersByIDs(ctx, query.GetArgs())
	query.Result = result
	return err
}
