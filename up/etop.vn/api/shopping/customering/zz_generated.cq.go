// Code generated by generator cq. DO NOT EDIT.

// +build !generator

package customering

import (
	context "context"

	meta "etop.vn/api/meta"
	shopping "etop.vn/api/shopping"
	dot "etop.vn/capi/dot"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus meta.Bus }
type QueryBus struct{ bus meta.Bus }

func (c CommandBus) Dispatch(ctx context.Context, msg Command) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type BatchSetCustomersStatusCommand struct {
	IDs    []int64
	ShopID int64
	Status int32

	Result *meta.UpdatedResponse `json:"-"`
}

func (h AggregateHandler) HandleBatchSetCustomersStatus(ctx context.Context, msg *BatchSetCustomersStatusCommand) (err error) {
	msg.Result, err = h.inner.BatchSetCustomersStatus(msg.GetArgs(ctx))
	return err
}

type CreateCustomerCommand struct {
	ShopID   int64
	Code     string
	FullName string
	Gender   string
	Type     string
	Birthday string
	Note     string
	Phone    string
	Email    string

	Result *ShopCustomer `json:"-"`
}

func (h AggregateHandler) HandleCreateCustomer(ctx context.Context, msg *CreateCustomerCommand) (err error) {
	msg.Result, err = h.inner.CreateCustomer(msg.GetArgs(ctx))
	return err
}

type DeleteCustomerCommand struct {
	ID     int64
	ShopID int64

	Result int `json:"-"`
}

func (h AggregateHandler) HandleDeleteCustomer(ctx context.Context, msg *DeleteCustomerCommand) (err error) {
	msg.Result, err = h.inner.DeleteCustomer(msg.GetArgs(ctx))
	return err
}

type UpdateCustomerCommand struct {
	ID       int64
	ShopID   int64
	Code     dot.NullString
	FullName dot.NullString
	Gender   dot.NullString
	Type     dot.NullString
	Birthday dot.NullString
	Note     dot.NullString
	Phone    dot.NullString
	Email    dot.NullString

	Result *ShopCustomer `json:"-"`
}

func (h AggregateHandler) HandleUpdateCustomer(ctx context.Context, msg *UpdateCustomerCommand) (err error) {
	msg.Result, err = h.inner.UpdateCustomer(msg.GetArgs(ctx))
	return err
}

type GetCustomerByIDQuery struct {
	ID     int64
	ShopID int64

	Result *ShopCustomer `json:"-"`
}

func (h QueryServiceHandler) HandleGetCustomerByID(ctx context.Context, msg *GetCustomerByIDQuery) (err error) {
	msg.Result, err = h.inner.GetCustomerByID(msg.GetArgs(ctx))
	return err
}

type ListCustomersQuery struct {
	ShopID  int64
	Paging  meta.Paging
	Filters meta.Filters

	Result *CustomersResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListCustomers(ctx context.Context, msg *ListCustomersQuery) (err error) {
	msg.Result, err = h.inner.ListCustomers(msg.GetArgs(ctx))
	return err
}

type ListCustomersByIDsQuery struct {
	IDs    []int64
	ShopID int64

	Result *CustomersResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListCustomersByIDs(ctx context.Context, msg *ListCustomersByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListCustomersByIDs(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *BatchSetCustomersStatusCommand) command() {}
func (q *CreateCustomerCommand) command()          {}
func (q *DeleteCustomerCommand) command()          {}
func (q *UpdateCustomerCommand) command()          {}
func (q *GetCustomerByIDQuery) query()             {}
func (q *ListCustomersQuery) query()               {}
func (q *ListCustomersByIDsQuery) query()          {}

// implement conversion

func (q *BatchSetCustomersStatusCommand) GetArgs(ctx context.Context) (_ context.Context, IDs []int64, shopID int64, status int32) {
	return ctx,
		q.IDs,
		q.ShopID,
		q.Status
}

func (q *CreateCustomerCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateCustomerArgs) {
	return ctx,
		&CreateCustomerArgs{
			ShopID:   q.ShopID,
			Code:     q.Code,
			FullName: q.FullName,
			Gender:   q.Gender,
			Type:     q.Type,
			Birthday: q.Birthday,
			Note:     q.Note,
			Phone:    q.Phone,
			Email:    q.Email,
		}
}

func (q *DeleteCustomerCommand) GetArgs(ctx context.Context) (_ context.Context, ID int64, shopID int64) {
	return ctx,
		q.ID,
		q.ShopID
}

func (q *UpdateCustomerCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateCustomerArgs) {
	return ctx,
		&UpdateCustomerArgs{
			ID:       q.ID,
			ShopID:   q.ShopID,
			Code:     q.Code,
			FullName: q.FullName,
			Gender:   q.Gender,
			Type:     q.Type,
			Birthday: q.Birthday,
			Note:     q.Note,
			Phone:    q.Phone,
			Email:    q.Email,
		}
}

func (q *GetCustomerByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.IDQueryShopArg) {
	return ctx,
		&shopping.IDQueryShopArg{
			ID:     q.ID,
			ShopID: q.ShopID,
		}
}

func (q *ListCustomersQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.ListQueryShopArgs) {
	return ctx,
		&shopping.ListQueryShopArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListCustomersByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.IDsQueryShopArgs) {
	return ctx,
		&shopping.IDsQueryShopArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
		}
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleBatchSetCustomersStatus)
	b.AddHandler(h.HandleCreateCustomer)
	b.AddHandler(h.HandleDeleteCustomer)
	b.AddHandler(h.HandleUpdateCustomer)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetCustomerByID)
	b.AddHandler(h.HandleListCustomers)
	b.AddHandler(h.HandleListCustomersByIDs)
	return QueryBus{b}
}
