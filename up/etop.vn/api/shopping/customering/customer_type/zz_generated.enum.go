// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package customer_type

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "etop.vn/capi/dot"
	mix "etop.vn/capi/mix"
)

var __jsonNull = []byte("null")

var enumCustomerTypeName = map[int]string{
	0: "unknown",
	1: "individual",
	2: "organization",
	3: "anonymous",
}

var enumCustomerTypeValue = map[string]int{
	"unknown":      0,
	"individual":   1,
	"organization": 2,
	"anonymous":    3,
	"independent":  3,
}

func ParseCustomerType(s string) (CustomerType, bool) {
	val, ok := enumCustomerTypeValue[s]
	return CustomerType(val), ok
}

func ParseCustomerTypeWithDefault(s string, d CustomerType) CustomerType {
	val, ok := enumCustomerTypeValue[s]
	if !ok {
		return d
	}
	return CustomerType(val)
}

func (e CustomerType) Apply(d CustomerType) CustomerType {
	if e == 0 {
		return d
	}
	return e
}

func (e CustomerType) Enum() int {
	return int(e)
}

func (e CustomerType) Name() string {
	return enumCustomerTypeName[e.Enum()]
}

func (e CustomerType) String() string {
	s, ok := enumCustomerTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("CustomerType(%v)", e.Enum())
}

func (e CustomerType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumCustomerTypeName[e.Enum()] + "\""), nil
}

func (e *CustomerType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumCustomerTypeValue, data, "CustomerType")
	if err != nil {
		return err
	}
	*e = CustomerType(value)
	return nil
}

func (e CustomerType) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *CustomerType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumCustomerTypeValue, src, "CustomerType")
	*e = (CustomerType)(value)
	return err
}

func (e CustomerType) Wrap() NullCustomerType {
	return WrapCustomerType(e)
}

func ParseCustomerTypeWithNull(s dot.NullString, d CustomerType) NullCustomerType {
	if !s.Valid {
		return NullCustomerType{}
	}
	val, ok := enumCustomerTypeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return CustomerType(val).Wrap()
}

func WrapCustomerType(enum CustomerType) NullCustomerType {
	return NullCustomerType{Enum: enum, Valid: true}
}

func (n NullCustomerType) Apply(s CustomerType) CustomerType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullCustomerType) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullCustomerType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullCustomerType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullCustomerType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
