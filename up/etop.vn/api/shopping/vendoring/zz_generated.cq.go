// +build !generator

// Code generated by generator cq. DO NOT EDIT.

package vendoring

import (
	context "context"

	meta "etop.vn/api/meta"
	shopping "etop.vn/api/shopping"
	capi "etop.vn/capi"
	dot "etop.vn/capi/dot"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus                          { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus                              { return QueryBus{bus} }
func (c CommandBus) Dispatch(ctx context.Context, msg Command) error { return c.bus.Dispatch(ctx, msg) }
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error     { return c.bus.Dispatch(ctx, msg) }
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type CreateVendorCommand struct {
	ShopID   int64
	FullName string
	Note     string

	Result *ShopVendor `json:"-"`
}

func (h AggregateHandler) HandleCreateVendor(ctx context.Context, msg *CreateVendorCommand) (err error) {
	msg.Result, err = h.inner.CreateVendor(msg.GetArgs(ctx))
	return err
}

type DeleteVendorCommand struct {
	ID     int64
	ShopID int64

	Result int `json:"-"`
}

func (h AggregateHandler) HandleDeleteVendor(ctx context.Context, msg *DeleteVendorCommand) (err error) {
	msg.Result, err = h.inner.DeleteVendor(msg.GetArgs(ctx))
	return err
}

type UpdateVendorCommand struct {
	ID       int64
	ShopID   int64
	FullName dot.NullString
	Note     dot.NullString

	Result *ShopVendor `json:"-"`
}

func (h AggregateHandler) HandleUpdateVendor(ctx context.Context, msg *UpdateVendorCommand) (err error) {
	msg.Result, err = h.inner.UpdateVendor(msg.GetArgs(ctx))
	return err
}

type GetVendorByIDQuery struct {
	ID     int64
	ShopID int64

	Result *ShopVendor `json:"-"`
}

func (h QueryServiceHandler) HandleGetVendorByID(ctx context.Context, msg *GetVendorByIDQuery) (err error) {
	msg.Result, err = h.inner.GetVendorByID(msg.GetArgs(ctx))
	return err
}

type ListVendorsQuery struct {
	ShopID  int64
	Paging  meta.Paging
	Filters meta.Filters

	Result *VendorsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListVendors(ctx context.Context, msg *ListVendorsQuery) (err error) {
	msg.Result, err = h.inner.ListVendors(msg.GetArgs(ctx))
	return err
}

type ListVendorsByIDsQuery struct {
	IDs    []int64
	ShopID int64

	Result *VendorsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListVendorsByIDs(ctx context.Context, msg *ListVendorsByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListVendorsByIDs(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateVendorCommand) command() {}
func (q *DeleteVendorCommand) command() {}
func (q *UpdateVendorCommand) command() {}
func (q *GetVendorByIDQuery) query()    {}
func (q *ListVendorsQuery) query()      {}
func (q *ListVendorsByIDsQuery) query() {}

// implement conversion

func (q *CreateVendorCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateVendorArgs) {
	return ctx,
		&CreateVendorArgs{
			ShopID:   q.ShopID,
			FullName: q.FullName,
			Note:     q.Note,
		}
}

func (q *CreateVendorCommand) SetCreateVendorArgs(args *CreateVendorArgs) {
	q.ShopID = args.ShopID
	q.FullName = args.FullName
	q.Note = args.Note
}

func (q *DeleteVendorCommand) GetArgs(ctx context.Context) (_ context.Context, ID int64, shopID int64) {
	return ctx,
		q.ID,
		q.ShopID
}

func (q *UpdateVendorCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateVendorArgs) {
	return ctx,
		&UpdateVendorArgs{
			ID:       q.ID,
			ShopID:   q.ShopID,
			FullName: q.FullName,
			Note:     q.Note,
		}
}

func (q *UpdateVendorCommand) SetUpdateVendorArgs(args *UpdateVendorArgs) {
	q.ID = args.ID
	q.ShopID = args.ShopID
	q.FullName = args.FullName
	q.Note = args.Note
}

func (q *GetVendorByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.IDQueryShopArg) {
	return ctx,
		&shopping.IDQueryShopArg{
			ID:     q.ID,
			ShopID: q.ShopID,
		}
}

func (q *GetVendorByIDQuery) SetIDQueryShopArg(args *shopping.IDQueryShopArg) {
	q.ID = args.ID
	q.ShopID = args.ShopID
}

func (q *ListVendorsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.ListQueryShopArgs) {
	return ctx,
		&shopping.ListQueryShopArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListVendorsQuery) SetListQueryShopArgs(args *shopping.ListQueryShopArgs) {
	q.ShopID = args.ShopID
	q.Paging = args.Paging
	q.Filters = args.Filters
}

func (q *ListVendorsByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.IDsQueryShopArgs) {
	return ctx,
		&shopping.IDsQueryShopArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
		}
}

func (q *ListVendorsByIDsQuery) SetIDsQueryShopArgs(args *shopping.IDsQueryShopArgs) {
	q.IDs = args.IDs
	q.ShopID = args.ShopID
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateVendor)
	b.AddHandler(h.HandleDeleteVendor)
	b.AddHandler(h.HandleUpdateVendor)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetVendorByID)
	b.AddHandler(h.HandleListVendors)
	b.AddHandler(h.HandleListVendorsByIDs)
	return QueryBus{b}
}
