// +build !generator

// Code generated by generator apix. DO NOT EDIT.

package whitelabel

import (
	context "context"
	fmt "fmt"
	http "net/http"

	capi "etop.vn/capi"
	httprpc "etop.vn/capi/httprpc"
)

type Server interface {
	http.Handler
	PathPrefix() string
}

type ImportServiceServer struct {
	inner ImportService
}

func NewImportServiceServer(svc ImportService) Server {
	return &ImportServiceServer{
		inner: svc,
	}
}

const ImportServicePathPrefix = "/partner.Import/"

func (s *ImportServiceServer) PathPrefix() string {
	return ImportServicePathPrefix
}

func (s *ImportServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	serve, err := httprpc.ParseRequestHeader(req)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	reqMsg, exec, err := s.parseRoute(req.URL.Path)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	serve(ctx, resp, req, reqMsg, exec)
}

func (s *ImportServiceServer) parseRoute(path string) (reqMsg capi.Message, _ httprpc.ExecFunc, _ error) {
	switch path {
	case "/partner.Import/Brands":
		msg := &ImportBrandsRequest{}
		fn := func(ctx context.Context) (capi.Message, error) {
			return s.inner.Brands(ctx, msg)
		}
		return msg, fn, nil
	case "/partner.Import/Categories":
		msg := &ImportCategoriesRequest{}
		fn := func(ctx context.Context) (capi.Message, error) {
			return s.inner.Categories(ctx, msg)
		}
		return msg, fn, nil
	case "/partner.Import/Collections":
		msg := &ImportCollectionsRequest{}
		fn := func(ctx context.Context) (capi.Message, error) {
			return s.inner.Collections(ctx, msg)
		}
		return msg, fn, nil
	case "/partner.Import/Customers":
		msg := &ImportCustomersRequest{}
		fn := func(ctx context.Context) (capi.Message, error) {
			return s.inner.Customers(ctx, msg)
		}
		return msg, fn, nil
	case "/partner.Import/ProductCollections":
		msg := &ImportProductCollectionsRequest{}
		fn := func(ctx context.Context) (capi.Message, error) {
			return s.inner.ProductCollections(ctx, msg)
		}
		return msg, fn, nil
	case "/partner.Import/Products":
		msg := &ImportProductsRequest{}
		fn := func(ctx context.Context) (capi.Message, error) {
			return s.inner.Products(ctx, msg)
		}
		return msg, fn, nil
	case "/partner.Import/Variants":
		msg := &ImportShopVariantsRequest{}
		fn := func(ctx context.Context) (capi.Message, error) {
			return s.inner.Variants(ctx, msg)
		}
		return msg, fn, nil
	default:
		msg := fmt.Sprintf("no handler for path %q", path)
		return nil, nil, httprpc.BadRouteError(msg, "POST", path)
	}
}
