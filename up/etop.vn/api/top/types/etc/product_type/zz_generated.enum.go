// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package product_type

import (
	fmt "fmt"

	encode "etop.vn/capi/encode"
)

var __jsonNull = []byte("null")

var enumProductTypeName = map[int]string{
	0: "unknown",
	1: "services",
	2: "goods",
}

var enumProductTypeValue = map[string]int{
	"unknown":  0,
	"services": 1,
	"goods":    2,
}

func ParseProductType(s string) (ProductType, bool) {
	val, ok := enumProductTypeValue[s]
	return ProductType(val), ok
}

func (e ProductType) Enum() int {
	return int(e)
}

func (e ProductType) Wrap() NullProductType {
	return WrapProductType(e)
}

func (e ProductType) Name() string {
	return enumProductTypeName[e.Enum()]
}

func (e ProductType) String() string {
	s, ok := enumProductTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("ProductType(%v)", e.Enum())
}

func (e ProductType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumProductTypeName[e.Enum()] + "\""), nil
}

func (e *ProductType) UnmarshalJSON(data []byte) error {
	value, err := encode.UnmarshalJSONEnumInt(enumProductTypeValue, data, "ProductType")
	if err != nil {
		return err
	}
	*e = ProductType(value)
	return nil
}

func (e ProductType) Value() (interface{}, error) {
	return e.String(), nil
}

func (e *ProductType) Scan(src interface{}) error {
	value, err := encode.ScanEnumInt(enumProductTypeValue, src, "ProductType")
	*e = (ProductType)(value)
	return err
}

type NullProductType struct {
	Enum  ProductType
	Valid bool
}

func WrapProductType(enum ProductType) NullProductType {
	return NullProductType{Enum: enum, Valid: true}
}

func (n NullProductType) Apply(s ProductType) ProductType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullProductType) Value() (interface{}, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullProductType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullProductType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullProductType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
