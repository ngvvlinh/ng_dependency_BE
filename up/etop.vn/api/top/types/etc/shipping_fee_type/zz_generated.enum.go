// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package shipping_fee_type

import (
	fmt "fmt"

	mix "etop.vn/capi/mix"
)

var __jsonNull = []byte("null")

var enumShippingFeeTypeName = map[int]string{
	0:   "main",
	1:   "return",
	2:   "adjustment",
	3:   "insurance",
	4:   "tax",
	5:   "other",
	6:   "cods",
	7:   "address_change",
	8:   "discount",
	127: "unknown",
}

var enumShippingFeeTypeValue = map[string]int{
	"main":           0,
	"return":         1,
	"adjustment":     2,
	"insurance":      3,
	"tax":            4,
	"other":          5,
	"cods":           6,
	"address_change": 7,
	"discount":       8,
	"unknown":        127,
}

func ParseShippingFeeType(s string) (ShippingFeeType, bool) {
	val, ok := enumShippingFeeTypeValue[s]
	return ShippingFeeType(val), ok
}

func (e ShippingFeeType) Enum() int {
	return int(e)
}

func (e ShippingFeeType) Wrap() NullShippingFeeType {
	return WrapShippingFeeType(e)
}

func (e ShippingFeeType) Name() string {
	return enumShippingFeeTypeName[e.Enum()]
}

func (e ShippingFeeType) String() string {
	s, ok := enumShippingFeeTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("ShippingFeeType(%v)", e.Enum())
}

func (e ShippingFeeType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumShippingFeeTypeName[e.Enum()] + "\""), nil
}

func (e *ShippingFeeType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumShippingFeeTypeValue, data, "ShippingFeeType")
	if err != nil {
		return err
	}
	*e = ShippingFeeType(value)
	return nil
}

func (e ShippingFeeType) Value() (interface{}, error) {
	return e.String(), nil
}

func (e *ShippingFeeType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumShippingFeeTypeValue, src, "ShippingFeeType")
	*e = (ShippingFeeType)(value)
	return err
}

type NullShippingFeeType struct {
	Enum  ShippingFeeType
	Valid bool
}

func WrapShippingFeeType(enum ShippingFeeType) NullShippingFeeType {
	return NullShippingFeeType{Enum: enum, Valid: true}
}

func (n NullShippingFeeType) Apply(s ShippingFeeType) ShippingFeeType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullShippingFeeType) Value() (interface{}, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullShippingFeeType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullShippingFeeType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullShippingFeeType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
