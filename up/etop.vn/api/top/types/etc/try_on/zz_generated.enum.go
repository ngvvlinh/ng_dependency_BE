// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package try_on

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "etop.vn/capi/dot"
	mix "etop.vn/capi/mix"
)

var __jsonNull = []byte("null")

var enumTryOnCodeName = map[int]string{
	0: "unknown",
	1: "none",
	2: "open",
	3: "try",
}

var enumTryOnCodeValue = map[string]int{
	"unknown": 0,
	"none":    1,
	"open":    2,
	"try":     3,
}

func ParseTryOnCode(s string) (TryOnCode, bool) {
	val, ok := enumTryOnCodeValue[s]
	return TryOnCode(val), ok
}

func ParseTryOnCodeWithDefault(s string, d TryOnCode) TryOnCode {
	val, ok := enumTryOnCodeValue[s]
	if !ok {
		return d
	}
	return TryOnCode(val)
}

func (e TryOnCode) Enum() int {
	return int(e)
}

func (e TryOnCode) Name() string {
	return enumTryOnCodeName[e.Enum()]
}

func (e TryOnCode) String() string {
	s, ok := enumTryOnCodeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("TryOnCode(%v)", e.Enum())
}

func (e TryOnCode) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumTryOnCodeName[e.Enum()] + "\""), nil
}

func (e *TryOnCode) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumTryOnCodeValue, data, "TryOnCode")
	if err != nil {
		return err
	}
	*e = TryOnCode(value)
	return nil
}

func (e TryOnCode) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *TryOnCode) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumTryOnCodeValue, src, "TryOnCode")
	*e = (TryOnCode)(value)
	return err
}

func (e TryOnCode) Wrap() NullTryOnCode {
	return WrapTryOnCode(e)
}

func ParseTryOnCodeWithNull(s dot.NullString, d TryOnCode) NullTryOnCode {
	if !s.Valid {
		return NullTryOnCode{}
	}
	val, ok := enumTryOnCodeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return TryOnCode(val).Wrap()
}

func WrapTryOnCode(enum TryOnCode) NullTryOnCode {
	return NullTryOnCode{Enum: enum, Valid: true}
}

func (n NullTryOnCode) Apply(s TryOnCode) TryOnCode {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullTryOnCode) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullTryOnCode) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullTryOnCode) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullTryOnCode) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
