// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package inventory_voucher_ref

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "etop.vn/capi/dot"
	mix "etop.vn/capi/mix"
)

var __jsonNull = []byte("null")

var enumInventoryVoucherRefName = map[int]string{
	0: "unknown",
	1: "refund",
	2: "purchase_refund",
	3: "stocktake",
	4: "purchase_order",
	5: "order",
}

var enumInventoryVoucherRefValue = map[string]int{
	"unknown":         0,
	"refund":          1,
	"purchase_refund": 2,
	"stocktake":       3,
	"purchase_order":  4,
	"order":           5,
}

var enumInventoryVoucherRefMapLabel = map[string]map[string]string{
	"unknown": {
		"RefName": "Không nguồn",
	},
	"refund": {
		"RefName": "Trả hàng",
	},
	"purchase_refund": {
		"RefName": "Trả hàng nhập",
	},
	"stocktake": {
		"RefName": "Kiểm kho",
	},
	"purchase_order": {
		"RefName": "Nhập hàng",
	},
	"order": {
		"RefName": "Bán hàng",
	},
}

func (e InventoryVoucherRef) GetLabelRefName() string {
	val := enumInventoryVoucherRefName[int(e)]
	nameVal := enumInventoryVoucherRefMapLabel[val]
	return nameVal["RefName"]
}
func ParseInventoryVoucherRef(s string) (InventoryVoucherRef, bool) {
	val, ok := enumInventoryVoucherRefValue[s]
	return InventoryVoucherRef(val), ok
}

func ParseInventoryVoucherRefWithDefault(s string, d InventoryVoucherRef) InventoryVoucherRef {
	val, ok := enumInventoryVoucherRefValue[s]
	if !ok {
		return d
	}
	return InventoryVoucherRef(val)
}

func (e InventoryVoucherRef) Apply(d InventoryVoucherRef) InventoryVoucherRef {
	if e == 0 {
		return d
	}
	return e
}

func (e InventoryVoucherRef) Enum() int {
	return int(e)
}

func (e InventoryVoucherRef) Name() string {
	return enumInventoryVoucherRefName[e.Enum()]
}

func (e InventoryVoucherRef) String() string {
	s, ok := enumInventoryVoucherRefName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("InventoryVoucherRef(%v)", e.Enum())
}

func (e InventoryVoucherRef) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumInventoryVoucherRefName[e.Enum()] + "\""), nil
}

func (e *InventoryVoucherRef) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumInventoryVoucherRefValue, data, "InventoryVoucherRef")
	if err != nil {
		return err
	}
	*e = InventoryVoucherRef(value)
	return nil
}

func (e InventoryVoucherRef) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *InventoryVoucherRef) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumInventoryVoucherRefValue, src, "InventoryVoucherRef")
	*e = (InventoryVoucherRef)(value)
	return err
}

func (e InventoryVoucherRef) Wrap() NullInventoryVoucherRef {
	return WrapInventoryVoucherRef(e)
}

func ParseInventoryVoucherRefWithNull(s dot.NullString, d InventoryVoucherRef) NullInventoryVoucherRef {
	if !s.Valid {
		return NullInventoryVoucherRef{}
	}
	val, ok := enumInventoryVoucherRefValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return InventoryVoucherRef(val).Wrap()
}

func WrapInventoryVoucherRef(enum InventoryVoucherRef) NullInventoryVoucherRef {
	return NullInventoryVoucherRef{Enum: enum, Valid: true}
}

func (n NullInventoryVoucherRef) Apply(s InventoryVoucherRef) InventoryVoucherRef {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullInventoryVoucherRef) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullInventoryVoucherRef) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullInventoryVoucherRef) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullInventoryVoucherRef) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
