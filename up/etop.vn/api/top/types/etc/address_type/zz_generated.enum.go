// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package address_type

import (
	driver "database/sql/driver"
	fmt "fmt"

	"etop.vn/capi/dot"
	mix "etop.vn/capi/mix"
)

var __jsonNull = []byte("null")

var enumAddressTypeName = map[int]string{
	0: "unknown",
	1: "general",
	2: "warehouse",
	3: "shipto",
	4: "shipfrom",
}

var enumAddressTypeValue = map[string]int{
	"unknown":   0,
	"general":   1,
	"warehouse": 2,
	"shipto":    3,
	"shipfrom":  4,
}

func ParseAddressType(s string) (AddressType, bool) {
	val, ok := enumAddressTypeValue[s]
	return AddressType(val), ok
}

func ParseAddressTypeWithDefault(s string, d AddressType) AddressType {
	val, ok := enumAddressTypeValue[s]
	if !ok {
		return d
	}
	return AddressType(val)
}

func ParseAddressTypeWithNull(s dot.NullString, d AddressType) NullAddressType {
	if !s.Valid {
		return NullAddressType{}
	}
	val, ok := enumAddressTypeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return AddressType(val).Wrap()
}

func (e AddressType) Enum() int {
	return int(e)
}

func (e AddressType) Wrap() NullAddressType {
	return WrapAddressType(e)
}

func (e AddressType) Name() string {
	return enumAddressTypeName[e.Enum()]
}

func (e AddressType) String() string {
	s, ok := enumAddressTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("AddressType(%v)", e.Enum())
}

func (e AddressType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumAddressTypeName[e.Enum()] + "\""), nil
}

func (e *AddressType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumAddressTypeValue, data, "AddressType")
	if err != nil {
		return err
	}
	*e = AddressType(value)
	return nil
}

func (e AddressType) Value() (driver.Value, error) {
	return e.String(), nil
}

func (e *AddressType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumAddressTypeValue, src, "AddressType")
	*e = (AddressType)(value)
	return err
}

type NullAddressType struct {
	Enum  AddressType
	Valid bool
}

func WrapAddressType(enum AddressType) NullAddressType {
	return NullAddressType{Enum: enum, Valid: true}
}

func (n NullAddressType) Apply(s AddressType) AddressType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullAddressType) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullAddressType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullAddressType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullAddressType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
