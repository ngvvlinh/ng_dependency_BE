// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package receipt_ref

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "etop.vn/capi/dot"
	mix "etop.vn/capi/mix"
)

var __jsonNull = []byte("null")

var enumReceiptRefName = map[int]string{
	0: "unknown",
	1: "order",
	2: "fulfillment",
	3: "purchase_order",
	4: "refund",
}

var enumReceiptRefValue = map[string]int{
	"unknown":        0,
	"order":          1,
	"fulfillment":    2,
	"purchase_order": 3,
	"refund":         4,
}

func ParseReceiptRef(s string) (ReceiptRef, bool) {
	val, ok := enumReceiptRefValue[s]
	return ReceiptRef(val), ok
}

func ParseReceiptRefWithDefault(s string, d ReceiptRef) ReceiptRef {
	val, ok := enumReceiptRefValue[s]
	if !ok {
		return d
	}
	return ReceiptRef(val)
}

func (e ReceiptRef) Enum() int {
	return int(e)
}

func (e ReceiptRef) Name() string {
	return enumReceiptRefName[e.Enum()]
}

func (e ReceiptRef) String() string {
	s, ok := enumReceiptRefName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("ReceiptRef(%v)", e.Enum())
}

func (e ReceiptRef) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumReceiptRefName[e.Enum()] + "\""), nil
}

func (e *ReceiptRef) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumReceiptRefValue, data, "ReceiptRef")
	if err != nil {
		return err
	}
	*e = ReceiptRef(value)
	return nil
}

func (e ReceiptRef) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *ReceiptRef) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumReceiptRefValue, src, "ReceiptRef")
	*e = (ReceiptRef)(value)
	return err
}

func (e ReceiptRef) Wrap() NullReceiptRef {
	return WrapReceiptRef(e)
}

func ParseReceiptRefWithNull(s dot.NullString, d ReceiptRef) NullReceiptRef {
	if !s.Valid {
		return NullReceiptRef{}
	}
	val, ok := enumReceiptRefValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return ReceiptRef(val).Wrap()
}

func WrapReceiptRef(enum ReceiptRef) NullReceiptRef {
	return NullReceiptRef{Enum: enum, Valid: true}
}

func (n NullReceiptRef) Apply(s ReceiptRef) ReceiptRef {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullReceiptRef) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullReceiptRef) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullReceiptRef) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullReceiptRef) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
