// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package fee

import (
	driver "database/sql/driver"
	fmt "fmt"

	"etop.vn/capi/dot"
	mix "etop.vn/capi/mix"
)

var __jsonNull = []byte("null")

var enumFeeTypeName = map[int]string{
	0: "other",
	1: "shipping",
	2: "tax",
}

var enumFeeTypeValue = map[string]int{
	"other":    0,
	"shipping": 1,
	"tax":      2,
}

func ParseFeeType(s string) (FeeType, bool) {
	val, ok := enumFeeTypeValue[s]
	return FeeType(val), ok
}

func ParseFeeTypeWithDefault(s string, d FeeType) FeeType {
	val, ok := enumFeeTypeValue[s]
	if !ok {
		return d
	}
	return FeeType(val)
}

func ParseFeeTypeWithNull(s dot.NullString, d FeeType) NullFeeType {
	if !s.Valid {
		return NullFeeType{}
	}
	val, ok := enumFeeTypeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return FeeType(val).Wrap()
}

func (e FeeType) Enum() int {
	return int(e)
}

func (e FeeType) Wrap() NullFeeType {
	return WrapFeeType(e)
}

func (e FeeType) Name() string {
	return enumFeeTypeName[e.Enum()]
}

func (e FeeType) String() string {
	s, ok := enumFeeTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("FeeType(%v)", e.Enum())
}

func (e FeeType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumFeeTypeName[e.Enum()] + "\""), nil
}

func (e *FeeType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumFeeTypeValue, data, "FeeType")
	if err != nil {
		return err
	}
	*e = FeeType(value)
	return nil
}

func (e FeeType) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *FeeType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumFeeTypeValue, src, "FeeType")
	*e = (FeeType)(value)
	return err
}

type NullFeeType struct {
	Enum  FeeType
	Valid bool
}

func WrapFeeType(enum FeeType) NullFeeType {
	return NullFeeType{Enum: enum, Valid: true}
}

func (n NullFeeType) Apply(s FeeType) FeeType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullFeeType) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullFeeType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullFeeType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullFeeType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
