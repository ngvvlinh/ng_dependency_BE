// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package payment_state

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "etop.vn/capi/dot"
	mix "etop.vn/capi/mix"
)

var __jsonNull = []byte("null")

var enumPaymentStateName = map[int]string{
	0: "unknown",
	1: "default",
	2: "created",
	3: "pending",
	4: "success",
	5: "failed",
	6: "cancelled",
}

var enumPaymentStateValue = map[string]int{
	"unknown":   0,
	"default":   1,
	"created":   2,
	"pending":   3,
	"success":   4,
	"failed":    5,
	"cancelled": 6,
}

func ParsePaymentState(s string) (PaymentState, bool) {
	val, ok := enumPaymentStateValue[s]
	return PaymentState(val), ok
}

func ParsePaymentStateWithDefault(s string, d PaymentState) PaymentState {
	val, ok := enumPaymentStateValue[s]
	if !ok {
		return d
	}
	return PaymentState(val)
}

func (e PaymentState) Enum() int {
	return int(e)
}

func (e PaymentState) Name() string {
	return enumPaymentStateName[e.Enum()]
}

func (e PaymentState) String() string {
	s, ok := enumPaymentStateName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("PaymentState(%v)", e.Enum())
}

func (e PaymentState) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumPaymentStateName[e.Enum()] + "\""), nil
}

func (e *PaymentState) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumPaymentStateValue, data, "PaymentState")
	if err != nil {
		return err
	}
	*e = PaymentState(value)
	return nil
}

func (e PaymentState) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *PaymentState) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumPaymentStateValue, src, "PaymentState")
	*e = (PaymentState)(value)
	return err
}

func (e PaymentState) Wrap() NullPaymentState {
	return WrapPaymentState(e)
}

func ParsePaymentStateWithNull(s dot.NullString, d PaymentState) NullPaymentState {
	if !s.Valid {
		return NullPaymentState{}
	}
	val, ok := enumPaymentStateValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return PaymentState(val).Wrap()
}

func WrapPaymentState(enum PaymentState) NullPaymentState {
	return NullPaymentState{Enum: enum, Valid: true}
}

func (n NullPaymentState) Apply(s PaymentState) PaymentState {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullPaymentState) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullPaymentState) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullPaymentState) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullPaymentState) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
