// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package inventory_auto

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "etop.vn/capi/dot"
	mix "etop.vn/capi/mix"
)

var __jsonNull = []byte("null")

var enumAutoInventoryVoucherName = map[int]string{
	0: "unknown",
	1: "create",
	2: "confirm",
}

var enumAutoInventoryVoucherValue = map[string]int{
	"unknown": 0,
	"create":  1,
	"confirm": 2,
}

func ParseAutoInventoryVoucher(s string) (AutoInventoryVoucher, bool) {
	val, ok := enumAutoInventoryVoucherValue[s]
	return AutoInventoryVoucher(val), ok
}

func ParseAutoInventoryVoucherWithDefault(s string, d AutoInventoryVoucher) AutoInventoryVoucher {
	val, ok := enumAutoInventoryVoucherValue[s]
	if !ok {
		return d
	}
	return AutoInventoryVoucher(val)
}

func (e AutoInventoryVoucher) Apply(d AutoInventoryVoucher) AutoInventoryVoucher {
	if e == 0 {
		return d
	}
	return e
}

func (e AutoInventoryVoucher) Enum() int {
	return int(e)
}

func (e AutoInventoryVoucher) Name() string {
	return enumAutoInventoryVoucherName[e.Enum()]
}

func (e AutoInventoryVoucher) String() string {
	s, ok := enumAutoInventoryVoucherName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("AutoInventoryVoucher(%v)", e.Enum())
}

func (e AutoInventoryVoucher) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumAutoInventoryVoucherName[e.Enum()] + "\""), nil
}

func (e *AutoInventoryVoucher) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumAutoInventoryVoucherValue, data, "AutoInventoryVoucher")
	if err != nil {
		return err
	}
	*e = AutoInventoryVoucher(value)
	return nil
}

func (e AutoInventoryVoucher) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *AutoInventoryVoucher) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumAutoInventoryVoucherValue, src, "AutoInventoryVoucher")
	*e = (AutoInventoryVoucher)(value)
	return err
}

func (e AutoInventoryVoucher) Wrap() NullAutoInventoryVoucher {
	return WrapAutoInventoryVoucher(e)
}

func ParseAutoInventoryVoucherWithNull(s dot.NullString, d AutoInventoryVoucher) NullAutoInventoryVoucher {
	if !s.Valid {
		return NullAutoInventoryVoucher{}
	}
	val, ok := enumAutoInventoryVoucherValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return AutoInventoryVoucher(val).Wrap()
}

func WrapAutoInventoryVoucher(enum AutoInventoryVoucher) NullAutoInventoryVoucher {
	return NullAutoInventoryVoucher{Enum: enum, Valid: true}
}

func (n NullAutoInventoryVoucher) Apply(s AutoInventoryVoucher) AutoInventoryVoucher {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullAutoInventoryVoucher) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullAutoInventoryVoucher) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullAutoInventoryVoucher) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullAutoInventoryVoucher) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
