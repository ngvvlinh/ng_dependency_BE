// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package authentication_method

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "etop.vn/capi/dot"
	mix "etop.vn/capi/mix"
)

var __jsonNull = []byte("null")

var enumAuthenticationMethodName = map[int]string{
	1: "email",
	2: "phone",
}

var enumAuthenticationMethodValue = map[string]int{
	"email": 1,
	"phone": 2,
}

func ParseAuthenticationMethod(s string) (AuthenticationMethod, bool) {
	val, ok := enumAuthenticationMethodValue[s]
	return AuthenticationMethod(val), ok
}

func ParseAuthenticationMethodWithDefault(s string, d AuthenticationMethod) AuthenticationMethod {
	val, ok := enumAuthenticationMethodValue[s]
	if !ok {
		return d
	}
	return AuthenticationMethod(val)
}

func (e AuthenticationMethod) Enum() int {
	return int(e)
}

func (e AuthenticationMethod) Name() string {
	return enumAuthenticationMethodName[e.Enum()]
}

func (e AuthenticationMethod) String() string {
	s, ok := enumAuthenticationMethodName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("AuthenticationMethod(%v)", e.Enum())
}

func (e AuthenticationMethod) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumAuthenticationMethodName[e.Enum()] + "\""), nil
}

func (e *AuthenticationMethod) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumAuthenticationMethodValue, data, "AuthenticationMethod")
	if err != nil {
		return err
	}
	*e = AuthenticationMethod(value)
	return nil
}

func (e AuthenticationMethod) Value() (driver.Value, error) {
	return e.String(), nil
}

func (e *AuthenticationMethod) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumAuthenticationMethodValue, src, "AuthenticationMethod")
	*e = (AuthenticationMethod)(value)
	return err
}

func (e AuthenticationMethod) Wrap() NullAuthenticationMethod {
	return WrapAuthenticationMethod(e)
}

func ParseAuthenticationMethodWithNull(s dot.NullString, d AuthenticationMethod) NullAuthenticationMethod {
	if !s.Valid {
		return NullAuthenticationMethod{}
	}
	val, ok := enumAuthenticationMethodValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return AuthenticationMethod(val).Wrap()
}

func WrapAuthenticationMethod(enum AuthenticationMethod) NullAuthenticationMethod {
	return NullAuthenticationMethod{Enum: enum, Valid: true}
}

func (n NullAuthenticationMethod) Apply(s AuthenticationMethod) AuthenticationMethod {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullAuthenticationMethod) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullAuthenticationMethod) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullAuthenticationMethod) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullAuthenticationMethod) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
