// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package stocktake_type

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "etop.vn/capi/dot"
	mix "etop.vn/capi/mix"
)

var __jsonNull = []byte("null")

var enumStocktakeTypeName = map[int]string{
	0: "balance",
	1: "discard",
}

var enumStocktakeTypeValue = map[string]int{
	"balance": 0,
	"discard": 1,
}

func ParseStocktakeType(s string) (StocktakeType, bool) {
	val, ok := enumStocktakeTypeValue[s]
	return StocktakeType(val), ok
}

func ParseStocktakeTypeWithDefault(s string, d StocktakeType) StocktakeType {
	val, ok := enumStocktakeTypeValue[s]
	if !ok {
		return d
	}
	return StocktakeType(val)
}

func (e StocktakeType) Apply(d StocktakeType) StocktakeType {
	if e == 0 {
		return d
	}
	return e
}

func (e StocktakeType) Enum() int {
	return int(e)
}

func (e StocktakeType) Name() string {
	return enumStocktakeTypeName[e.Enum()]
}

func (e StocktakeType) String() string {
	s, ok := enumStocktakeTypeName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("StocktakeType(%v)", e.Enum())
}

func (e StocktakeType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumStocktakeTypeName[e.Enum()] + "\""), nil
}

func (e *StocktakeType) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumStocktakeTypeValue, data, "StocktakeType")
	if err != nil {
		return err
	}
	*e = StocktakeType(value)
	return nil
}

func (e StocktakeType) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *StocktakeType) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumStocktakeTypeValue, src, "StocktakeType")
	*e = (StocktakeType)(value)
	return err
}

func (e StocktakeType) Wrap() NullStocktakeType {
	return WrapStocktakeType(e)
}

func ParseStocktakeTypeWithNull(s dot.NullString, d StocktakeType) NullStocktakeType {
	if !s.Valid {
		return NullStocktakeType{}
	}
	val, ok := enumStocktakeTypeValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return StocktakeType(val).Wrap()
}

func WrapStocktakeType(enum StocktakeType) NullStocktakeType {
	return NullStocktakeType{Enum: enum, Valid: true}
}

func (n NullStocktakeType) Apply(s StocktakeType) StocktakeType {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullStocktakeType) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullStocktakeType) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullStocktakeType) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullStocktakeType) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
