// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package payment_source

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "etop.vn/capi/dot"
	mix "etop.vn/capi/mix"
)

var __jsonNull = []byte("null")

var enumPaymentSourceName = map[int]string{
	0: "unknown",
	1: "order",
}

var enumPaymentSourceValue = map[string]int{
	"unknown": 0,
	"order":   1,
}

func ParsePaymentSource(s string) (PaymentSource, bool) {
	val, ok := enumPaymentSourceValue[s]
	return PaymentSource(val), ok
}

func ParsePaymentSourceWithDefault(s string, d PaymentSource) PaymentSource {
	val, ok := enumPaymentSourceValue[s]
	if !ok {
		return d
	}
	return PaymentSource(val)
}

func (e PaymentSource) Enum() int {
	return int(e)
}

func (e PaymentSource) Name() string {
	return enumPaymentSourceName[e.Enum()]
}

func (e PaymentSource) String() string {
	s, ok := enumPaymentSourceName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("PaymentSource(%v)", e.Enum())
}

func (e PaymentSource) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumPaymentSourceName[e.Enum()] + "\""), nil
}

func (e *PaymentSource) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumPaymentSourceValue, data, "PaymentSource")
	if err != nil {
		return err
	}
	*e = PaymentSource(value)
	return nil
}

func (e PaymentSource) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *PaymentSource) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumPaymentSourceValue, src, "PaymentSource")
	*e = (PaymentSource)(value)
	return err
}

func (e PaymentSource) Wrap() NullPaymentSource {
	return WrapPaymentSource(e)
}

func ParsePaymentSourceWithNull(s dot.NullString, d PaymentSource) NullPaymentSource {
	if !s.Valid {
		return NullPaymentSource{}
	}
	val, ok := enumPaymentSourceValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return PaymentSource(val).Wrap()
}

func WrapPaymentSource(enum PaymentSource) NullPaymentSource {
	return NullPaymentSource{Enum: enum, Valid: true}
}

func (n NullPaymentSource) Apply(s PaymentSource) PaymentSource {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullPaymentSource) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullPaymentSource) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullPaymentSource) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullPaymentSource) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
