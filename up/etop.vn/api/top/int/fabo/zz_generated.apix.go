// +build !generator

// Code generated by generator apix. DO NOT EDIT.

package fabo

import (
	context "context"
	fmt "fmt"
	http "net/http"

	capi "etop.vn/capi"
	httprpc "etop.vn/capi/httprpc"
)

type Server interface {
	http.Handler
	PathPrefix() string
}

type PageServiceServer struct {
	inner PageService
}

func NewPageServiceServer(svc PageService) Server {
	return &PageServiceServer{
		inner: svc,
	}
}

const PageServicePathPrefix = "/fabo.Page/"

func (s *PageServiceServer) PathPrefix() string {
	return PageServicePathPrefix
}

func (s *PageServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	serve, err := httprpc.ParseRequestHeader(req)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	reqMsg, exec, err := s.parseRoute(req.URL.Path)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	serve(ctx, resp, req, reqMsg, exec)
}

func (s *PageServiceServer) parseRoute(path string) (reqMsg capi.Message, _ httprpc.ExecFunc, _ error) {
	switch path {
	case "/fabo.Page/ListFbPages":
		msg := &ListFbPagesRequest{}
		fn := func(ctx context.Context) (capi.Message, error) {
			return s.inner.ListFbPages(ctx, msg)
		}
		return msg, fn, nil
	case "/fabo.Page/RemoveFbPages":
		msg := &RemoveFbPagesRequest{}
		fn := func(ctx context.Context) (capi.Message, error) {
			return s.inner.RemoveFbPages(ctx, msg)
		}
		return msg, fn, nil
	default:
		msg := fmt.Sprintf("no handler for path %q", path)
		return nil, nil, httprpc.BadRouteError(msg, "POST", path)
	}
}

type SessionServiceServer struct {
	inner SessionService
}

func NewSessionServiceServer(svc SessionService) Server {
	return &SessionServiceServer{
		inner: svc,
	}
}

const SessionServicePathPrefix = "/fabo.Session/"

func (s *SessionServiceServer) PathPrefix() string {
	return SessionServicePathPrefix
}

func (s *SessionServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	serve, err := httprpc.ParseRequestHeader(req)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	reqMsg, exec, err := s.parseRoute(req.URL.Path)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	serve(ctx, resp, req, reqMsg, exec)
}

func (s *SessionServiceServer) parseRoute(path string) (reqMsg capi.Message, _ httprpc.ExecFunc, _ error) {
	switch path {
	case "/fabo.Session/InitSession":
		msg := &InitSessionRequest{}
		fn := func(ctx context.Context) (capi.Message, error) {
			return s.inner.InitSession(ctx, msg)
		}
		return msg, fn, nil
	default:
		msg := fmt.Sprintf("no handler for path %q", path)
		return nil, nil, httprpc.BadRouteError(msg, "POST", path)
	}
}
