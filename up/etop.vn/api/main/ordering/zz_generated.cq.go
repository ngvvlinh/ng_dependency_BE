// +build !generator

// Code generated by generator cq. DO NOT EDIT.

package ordering

import (
	context "context"
	time "time"

	etop "etop.vn/api/main/etop"
	types "etop.vn/api/main/ordering/types"
	meta "etop.vn/api/meta"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus meta.Bus }
type QueryBus struct{ bus meta.Bus }

func (c CommandBus) Dispatch(ctx context.Context, msg Command) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type ReleaseOrdersForFfmCommand struct {
	OrderIDs []int64

	Result *ReleaseOrdersForFfmResponse `json:"-"`
}

func (h AggregateHandler) HandleReleaseOrdersForFfm(ctx context.Context, msg *ReleaseOrdersForFfmCommand) (err error) {
	msg.Result, err = h.inner.ReleaseOrdersForFfm(msg.GetArgs(ctx))
	return err
}

type ReserveOrdersForFfmCommand struct {
	OrderIDs   []int64
	Fulfill    types.Fulfill
	FulfillIDs []int64

	Result *ReserveOrdersForFfmResponse `json:"-"`
}

func (h AggregateHandler) HandleReserveOrdersForFfm(ctx context.Context, msg *ReserveOrdersForFfmCommand) (err error) {
	msg.Result, err = h.inner.ReserveOrdersForFfm(msg.GetArgs(ctx))
	return err
}

type UpdateOrderPaymentInfoCommand struct {
	ID            int64
	PaymentStatus etop.Status4
	PaymentID     int64

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleUpdateOrderPaymentInfo(ctx context.Context, msg *UpdateOrderPaymentInfoCommand) (err error) {
	return h.inner.UpdateOrderPaymentInfo(msg.GetArgs(ctx))
}

type UpdateOrderShippingStatusCommand struct {
	ID                         int64
	FulfillmentShippingStates  []string
	FulfillmentShippingStatus  etop.Status5
	FulfillmentPaymentStatuses []int
	EtopPaymentStatus          etop.Status4
	CODEtopPaidAt              time.Time

	Result *UpdateOrderShippingStatusResponse `json:"-"`
}

func (h AggregateHandler) HandleUpdateOrderShippingStatus(ctx context.Context, msg *UpdateOrderShippingStatusCommand) (err error) {
	msg.Result, err = h.inner.UpdateOrderShippingStatus(msg.GetArgs(ctx))
	return err
}

type UpdateOrdersConfirmStatusCommand struct {
	IDs           []int64
	ShopConfirm   etop.Status3
	ConfirmStatus etop.Status3

	Result *UpdateOrdersConfirmStatusResponse `json:"-"`
}

func (h AggregateHandler) HandleUpdateOrdersConfirmStatus(ctx context.Context, msg *UpdateOrdersConfirmStatusCommand) (err error) {
	msg.Result, err = h.inner.UpdateOrdersConfirmStatus(msg.GetArgs(ctx))
	return err
}

type ValidateOrdersForShippingCommand struct {
	OrderIDs []int64

	Result *ValidateOrdersForShippingResponse `json:"-"`
}

func (h AggregateHandler) HandleValidateOrdersForShipping(ctx context.Context, msg *ValidateOrdersForShippingCommand) (err error) {
	msg.Result, err = h.inner.ValidateOrdersForShipping(msg.GetArgs(ctx))
	return err
}

type GetOrderByCodeQuery struct {
	Code string

	Result *Order `json:"-"`
}

func (h QueryServiceHandler) HandleGetOrderByCode(ctx context.Context, msg *GetOrderByCodeQuery) (err error) {
	msg.Result, err = h.inner.GetOrderByCode(msg.GetArgs(ctx))
	return err
}

type GetOrderByIDQuery struct {
	ID int64

	Result *Order `json:"-"`
}

func (h QueryServiceHandler) HandleGetOrderByID(ctx context.Context, msg *GetOrderByIDQuery) (err error) {
	msg.Result, err = h.inner.GetOrderByID(msg.GetArgs(ctx))
	return err
}

type GetOrdersQuery struct {
	ShopID int64
	IDs    []int64

	Result *OrdersResponse `json:"-"`
}

func (h QueryServiceHandler) HandleGetOrders(ctx context.Context, msg *GetOrdersQuery) (err error) {
	msg.Result, err = h.inner.GetOrders(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *ReleaseOrdersForFfmCommand) command()       {}
func (q *ReserveOrdersForFfmCommand) command()       {}
func (q *UpdateOrderPaymentInfoCommand) command()    {}
func (q *UpdateOrderShippingStatusCommand) command() {}
func (q *UpdateOrdersConfirmStatusCommand) command() {}
func (q *ValidateOrdersForShippingCommand) command() {}
func (q *GetOrderByCodeQuery) query()                {}
func (q *GetOrderByIDQuery) query()                  {}
func (q *GetOrdersQuery) query()                     {}

// implement conversion

func (q *ReleaseOrdersForFfmCommand) GetArgs(ctx context.Context) (_ context.Context, _ *ReleaseOrdersForFfmArgs) {
	return ctx,
		&ReleaseOrdersForFfmArgs{
			OrderIDs: q.OrderIDs,
		}
}

func (q *ReserveOrdersForFfmCommand) GetArgs(ctx context.Context) (_ context.Context, _ *ReserveOrdersForFfmArgs) {
	return ctx,
		&ReserveOrdersForFfmArgs{
			OrderIDs:   q.OrderIDs,
			Fulfill:    q.Fulfill,
			FulfillIDs: q.FulfillIDs,
		}
}

func (q *UpdateOrderPaymentInfoCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateOrderPaymentInfoArgs) {
	return ctx,
		&UpdateOrderPaymentInfoArgs{
			ID:            q.ID,
			PaymentStatus: q.PaymentStatus,
			PaymentID:     q.PaymentID,
		}
}

func (q *UpdateOrderShippingStatusCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateOrderShippingStatusArgs) {
	return ctx,
		&UpdateOrderShippingStatusArgs{
			ID:                         q.ID,
			FulfillmentShippingStates:  q.FulfillmentShippingStates,
			FulfillmentShippingStatus:  q.FulfillmentShippingStatus,
			FulfillmentPaymentStatuses: q.FulfillmentPaymentStatuses,
			EtopPaymentStatus:          q.EtopPaymentStatus,
			CODEtopPaidAt:              q.CODEtopPaidAt,
		}
}

func (q *UpdateOrdersConfirmStatusCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateOrdersConfirmStatusArgs) {
	return ctx,
		&UpdateOrdersConfirmStatusArgs{
			IDs:           q.IDs,
			ShopConfirm:   q.ShopConfirm,
			ConfirmStatus: q.ConfirmStatus,
		}
}

func (q *ValidateOrdersForShippingCommand) GetArgs(ctx context.Context) (_ context.Context, _ *ValidateOrdersForShippingArgs) {
	return ctx,
		&ValidateOrdersForShippingArgs{
			OrderIDs: q.OrderIDs,
		}
}

func (q *GetOrderByCodeQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetOrderByCodeArgs) {
	return ctx,
		&GetOrderByCodeArgs{
			Code: q.Code,
		}
}

func (q *GetOrderByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetOrderByIDArgs) {
	return ctx,
		&GetOrderByIDArgs{
			ID: q.ID,
		}
}

func (q *GetOrdersQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetOrdersArgs) {
	return ctx,
		&GetOrdersArgs{
			ShopID: q.ShopID,
			IDs:    q.IDs,
		}
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleReleaseOrdersForFfm)
	b.AddHandler(h.HandleReserveOrdersForFfm)
	b.AddHandler(h.HandleUpdateOrderPaymentInfo)
	b.AddHandler(h.HandleUpdateOrderShippingStatus)
	b.AddHandler(h.HandleUpdateOrdersConfirmStatus)
	b.AddHandler(h.HandleValidateOrdersForShipping)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetOrderByCode)
	b.AddHandler(h.HandleGetOrderByID)
	b.AddHandler(h.HandleGetOrders)
	return QueryBus{b}
}
