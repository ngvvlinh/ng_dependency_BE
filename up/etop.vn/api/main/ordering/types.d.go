// Code generated by gen-cmd-query. DO NOT EDIT.

package ordering

import (
	context "context"

	orderingv1types "etop.vn/api/main/ordering/v1/types"
	meta "etop.vn/api/meta"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus meta.Bus }
type QueryBus struct{ bus meta.Bus }

func (c CommandBus) Dispatch(ctx context.Context, msg Command) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type ReleaseOrdersForFfmCommand struct {
	OrderIDs []int64

	Result *ReleaseOrdersForFfmResponse `json:"-"`
}

type ReserveOrdersForFfmCommand struct {
	OrderIDs   []int64
	Fulfill    orderingv1types.Fulfill
	FulfillIDs []int64

	Result *ReserveOrdersForFfmResponse `json:"-"`
}

type ValidateOrdersForShippingCommand struct {
	OrderIDs []int64

	Result *ValidateOrdersForShippingResponse `json:"-"`
}

type GetOrderByIDQuery struct {
	ID int64

	Result *Order `json:"-"`
}

type GetOrdersQuery struct {
	ShopID int64
	IDs    []int64

	Result *OrdersResponse `json:"-"`
}

// implement interfaces

func (q *ReleaseOrdersForFfmCommand) command()       {}
func (q *ReserveOrdersForFfmCommand) command()       {}
func (q *ValidateOrdersForShippingCommand) command() {}
func (q *GetOrderByIDQuery) query()                  {}
func (q *GetOrdersQuery) query()                     {}

// implement conversion

func (q *ReleaseOrdersForFfmCommand) GetArgs() *ReleaseOrdersForFfmArgs {
	return &ReleaseOrdersForFfmArgs{
		OrderIDs: q.OrderIDs,
	}
}
func (q *ReserveOrdersForFfmCommand) GetArgs() *ReserveOrdersForFfmArgs {
	return &ReserveOrdersForFfmArgs{
		OrderIDs:   q.OrderIDs,
		Fulfill:    q.Fulfill,
		FulfillIDs: q.FulfillIDs,
	}
}
func (q *ValidateOrdersForShippingCommand) GetArgs() *ValidateOrdersForShippingArgs {
	return &ValidateOrdersForShippingArgs{
		OrderIDs: q.OrderIDs,
	}
}
func (q *GetOrderByIDQuery) GetArgs() *GetOrderByIDArgs {
	return &GetOrderByIDArgs{
		ID: q.ID,
	}
}
func (q *GetOrdersQuery) GetArgs() *GetOrdersArgs {
	return &GetOrdersArgs{
		ShopID: q.ShopID,
		IDs:    q.IDs,
	}
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleReleaseOrdersForFfm)
	b.AddHandler(h.HandleReserveOrdersForFfm)
	b.AddHandler(h.HandleValidateOrdersForShipping)
	return CommandBus{b}
}

func (h AggregateHandler) HandleReleaseOrdersForFfm(ctx context.Context, cmd *ReleaseOrdersForFfmCommand) error {
	result, err := h.inner.ReleaseOrdersForFfm(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleReserveOrdersForFfm(ctx context.Context, cmd *ReserveOrdersForFfmCommand) error {
	result, err := h.inner.ReserveOrdersForFfm(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleValidateOrdersForShipping(ctx context.Context, cmd *ValidateOrdersForShippingCommand) error {
	result, err := h.inner.ValidateOrdersForShipping(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetOrderByID)
	b.AddHandler(h.HandleGetOrders)
	return QueryBus{b}
}

func (h QueryServiceHandler) HandleGetOrderByID(ctx context.Context, query *GetOrderByIDQuery) error {
	result, err := h.inner.GetOrderByID(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleGetOrders(ctx context.Context, query *GetOrdersQuery) error {
	result, err := h.inner.GetOrders(ctx, query.GetArgs())
	query.Result = result
	return err
}
