// +build !generator

// Package shipnow generated by generator:cq. DO NOT EDIT.
package shipnow

import (
	"context"
	time "time"

	etop "etop.vn/api/main/etop"
	types1 "etop.vn/api/main/ordering/types"
	types "etop.vn/api/main/shipnow/carrier/types"
	types2 "etop.vn/api/main/shipnow/types"
	types3 "etop.vn/api/main/shipping/types"
	meta "etop.vn/api/meta"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus meta.Bus }
type QueryBus struct{ bus meta.Bus }

func (c CommandBus) Dispatch(ctx context.Context, msg Command) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type CancelShipnowFulfillmentCommand struct {
	Id           int64
	ShopId       int64
	CancelReason string

	Result *meta.Empty `json:"-"`
}

func (h AggregateHandler) HandleCancelShipnowFulfillment(ctx context.Context, msg *CancelShipnowFulfillmentCommand) (err error) {
	msg.Result, err = h.inner.CancelShipnowFulfillment(msg.GetArgs(ctx))
	return err
}

type ConfirmShipnowFulfillmentCommand struct {
	Id     int64
	ShopId int64

	Result *ShipnowFulfillment `json:"-"`
}

func (h AggregateHandler) HandleConfirmShipnowFulfillment(ctx context.Context, msg *ConfirmShipnowFulfillmentCommand) (err error) {
	msg.Result, err = h.inner.ConfirmShipnowFulfillment(msg.GetArgs(ctx))
	return err
}

type CreateShipnowFulfillmentCommand struct {
	OrderIds            []int64
	Carrier             types.Carrier
	ShopId              int64
	ShippingServiceCode string
	ShippingServiceFee  int32
	ShippingNote        string
	RequestPickupAt     time.Time
	PickupAddress       *types1.Address

	Result *ShipnowFulfillment `json:"-"`
}

func (h AggregateHandler) HandleCreateShipnowFulfillment(ctx context.Context, msg *CreateShipnowFulfillmentCommand) (err error) {
	msg.Result, err = h.inner.CreateShipnowFulfillment(msg.GetArgs(ctx))
	return err
}

type GetShipnowServicesCommand struct {
	ShopId         int64
	OrderIds       []int64
	PickupAddress  *types1.Address
	DeliveryPoints []*types2.DeliveryPoint

	Result *GetShipnowServicesResult `json:"-"`
}

func (h AggregateHandler) HandleGetShipnowServices(ctx context.Context, msg *GetShipnowServicesCommand) (err error) {
	msg.Result, err = h.inner.GetShipnowServices(msg.GetArgs(ctx))
	return err
}

type UpdateShipnowFulfillmentCommand struct {
	Id                  int64
	OrderIds            []int64
	Carrier             types.Carrier
	ShopId              int64
	ShippingServiceCode string
	ShippingServiceFee  int32
	ShippingNote        string
	RequestPickupAt     time.Time
	PickupAddress       *types1.Address

	Result *ShipnowFulfillment `json:"-"`
}

func (h AggregateHandler) HandleUpdateShipnowFulfillment(ctx context.Context, msg *UpdateShipnowFulfillmentCommand) (err error) {
	msg.Result, err = h.inner.UpdateShipnowFulfillment(msg.GetArgs(ctx))
	return err
}

type UpdateShipnowFulfillmentCarrierInfoCommand struct {
	Id                         int64
	ShippingCode               string
	ShippingState              types2.State
	TotalFee                   int32
	FeeLines                   []*types3.FeeLine
	CarrierFeeLines            []*types3.FeeLine
	ShippingCreatedAt          time.Time
	EtopPaymentStatus          etop.Status4
	ShippingStatus             etop.Status5
	Status                     etop.Status5
	CodEtopTransferedAt        time.Time
	ShippingPickingAt          time.Time
	ShippingDeliveringAt       time.Time
	ShippingDeliveredAt        time.Time
	ShippingCancelledAt        time.Time
	ShippingServiceName        string
	CancelReason               string
	ShippingSharedLink         string
	ShippingServiceDescription string

	Result *ShipnowFulfillment `json:"-"`
}

func (h AggregateHandler) HandleUpdateShipnowFulfillmentCarrierInfo(ctx context.Context, msg *UpdateShipnowFulfillmentCarrierInfoCommand) (err error) {
	msg.Result, err = h.inner.UpdateShipnowFulfillmentCarrierInfo(msg.GetArgs(ctx))
	return err
}

type UpdateShipnowFulfillmentStateCommand struct {
	Id             int64
	SyncStatus     etop.Status4
	Status         etop.Status5
	ConfirmStatus  etop.Status3
	ShippingStatus etop.Status5
	SyncStates     *SyncStates
	ShippingState  types2.State

	Result *ShipnowFulfillment `json:"-"`
}

func (h AggregateHandler) HandleUpdateShipnowFulfillmentState(ctx context.Context, msg *UpdateShipnowFulfillmentStateCommand) (err error) {
	msg.Result, err = h.inner.UpdateShipnowFulfillmentState(msg.GetArgs(ctx))
	return err
}

type GetShipnowFulfillmentQuery struct {
	Id     int64
	ShopId int64

	Result *GetShipnowFulfillmentQueryResult `json:"-"`
}

func (h QueryServiceHandler) HandleGetShipnowFulfillment(ctx context.Context, msg *GetShipnowFulfillmentQuery) (err error) {
	msg.Result, err = h.inner.GetShipnowFulfillment(msg.GetArgs(ctx))
	return err
}

type GetShipnowFulfillmentByShippingCodeQuery struct {
	ShippingCode string

	Result *GetShipnowFulfillmentQueryResult `json:"-"`
}

func (h QueryServiceHandler) HandleGetShipnowFulfillmentByShippingCode(ctx context.Context, msg *GetShipnowFulfillmentByShippingCodeQuery) (err error) {
	msg.Result, err = h.inner.GetShipnowFulfillmentByShippingCode(msg.GetArgs(ctx))
	return err
}

type GetShipnowFulfillmentsQuery struct {
	ShopIds []int64
	Paging  *meta.Paging
	Filters []*meta.Filter

	Result *GetShipnowFulfillmentsQueryResult `json:"-"`
}

func (h QueryServiceHandler) HandleGetShipnowFulfillments(ctx context.Context, msg *GetShipnowFulfillmentsQuery) (err error) {
	msg.Result, err = h.inner.GetShipnowFulfillments(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CancelShipnowFulfillmentCommand) command()            {}
func (q *ConfirmShipnowFulfillmentCommand) command()           {}
func (q *CreateShipnowFulfillmentCommand) command()            {}
func (q *GetShipnowServicesCommand) command()                  {}
func (q *UpdateShipnowFulfillmentCommand) command()            {}
func (q *UpdateShipnowFulfillmentCarrierInfoCommand) command() {}
func (q *UpdateShipnowFulfillmentStateCommand) command()       {}
func (q *GetShipnowFulfillmentQuery) query()                   {}
func (q *GetShipnowFulfillmentByShippingCodeQuery) query()     {}
func (q *GetShipnowFulfillmentsQuery) query()                  {}

// implement conversion

func (q *CancelShipnowFulfillmentCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CancelShipnowFulfillmentArgs) {
	return ctx,
		&CancelShipnowFulfillmentArgs{
			Id:           q.Id,
			ShopId:       q.ShopId,
			CancelReason: q.CancelReason,
		}
}

func (q *ConfirmShipnowFulfillmentCommand) GetArgs(ctx context.Context) (_ context.Context, _ *ConfirmShipnowFulfillmentArgs) {
	return ctx,
		&ConfirmShipnowFulfillmentArgs{
			Id:     q.Id,
			ShopId: q.ShopId,
		}
}

func (q *CreateShipnowFulfillmentCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateShipnowFulfillmentArgs) {
	return ctx,
		&CreateShipnowFulfillmentArgs{
			OrderIds:            q.OrderIds,
			Carrier:             q.Carrier,
			ShopId:              q.ShopId,
			ShippingServiceCode: q.ShippingServiceCode,
			ShippingServiceFee:  q.ShippingServiceFee,
			ShippingNote:        q.ShippingNote,
			RequestPickupAt:     q.RequestPickupAt,
			PickupAddress:       q.PickupAddress,
		}
}

func (q *GetShipnowServicesCommand) GetArgs(ctx context.Context) (_ context.Context, _ *GetShipnowServicesArgs) {
	return ctx,
		&GetShipnowServicesArgs{
			ShopId:         q.ShopId,
			OrderIds:       q.OrderIds,
			PickupAddress:  q.PickupAddress,
			DeliveryPoints: q.DeliveryPoints,
		}
}

func (q *UpdateShipnowFulfillmentCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShipnowFulfillmentArgs) {
	return ctx,
		&UpdateShipnowFulfillmentArgs{
			Id:                  q.Id,
			OrderIds:            q.OrderIds,
			Carrier:             q.Carrier,
			ShopId:              q.ShopId,
			ShippingServiceCode: q.ShippingServiceCode,
			ShippingServiceFee:  q.ShippingServiceFee,
			ShippingNote:        q.ShippingNote,
			RequestPickupAt:     q.RequestPickupAt,
			PickupAddress:       q.PickupAddress,
		}
}

func (q *UpdateShipnowFulfillmentCarrierInfoCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShipnowFulfillmentCarrierInfoArgs) {
	return ctx,
		&UpdateShipnowFulfillmentCarrierInfoArgs{
			Id:                         q.Id,
			ShippingCode:               q.ShippingCode,
			ShippingState:              q.ShippingState,
			TotalFee:                   q.TotalFee,
			FeeLines:                   q.FeeLines,
			CarrierFeeLines:            q.CarrierFeeLines,
			ShippingCreatedAt:          q.ShippingCreatedAt,
			EtopPaymentStatus:          q.EtopPaymentStatus,
			ShippingStatus:             q.ShippingStatus,
			Status:                     q.Status,
			CodEtopTransferedAt:        q.CodEtopTransferedAt,
			ShippingPickingAt:          q.ShippingPickingAt,
			ShippingDeliveringAt:       q.ShippingDeliveringAt,
			ShippingDeliveredAt:        q.ShippingDeliveredAt,
			ShippingCancelledAt:        q.ShippingCancelledAt,
			ShippingServiceName:        q.ShippingServiceName,
			CancelReason:               q.CancelReason,
			ShippingSharedLink:         q.ShippingSharedLink,
			ShippingServiceDescription: q.ShippingServiceDescription,
		}
}

func (q *UpdateShipnowFulfillmentStateCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShipnowFulfillmentStateArgs) {
	return ctx,
		&UpdateShipnowFulfillmentStateArgs{
			Id:             q.Id,
			SyncStatus:     q.SyncStatus,
			Status:         q.Status,
			ConfirmStatus:  q.ConfirmStatus,
			ShippingStatus: q.ShippingStatus,
			SyncStates:     q.SyncStates,
			ShippingState:  q.ShippingState,
		}
}

func (q *GetShipnowFulfillmentQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShipnowFulfillmentQueryArgs) {
	return ctx,
		&GetShipnowFulfillmentQueryArgs{
			Id:     q.Id,
			ShopId: q.ShopId,
		}
}

func (q *GetShipnowFulfillmentByShippingCodeQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShipnowFulfillmentByShippingCodeQueryArgs) {
	return ctx,
		&GetShipnowFulfillmentByShippingCodeQueryArgs{
			ShippingCode: q.ShippingCode,
		}
}

func (q *GetShipnowFulfillmentsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShipnowFulfillmentsQueryArgs) {
	return ctx,
		&GetShipnowFulfillmentsQueryArgs{
			ShopIds: q.ShopIds,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCancelShipnowFulfillment)
	b.AddHandler(h.HandleConfirmShipnowFulfillment)
	b.AddHandler(h.HandleCreateShipnowFulfillment)
	b.AddHandler(h.HandleGetShipnowServices)
	b.AddHandler(h.HandleUpdateShipnowFulfillment)
	b.AddHandler(h.HandleUpdateShipnowFulfillmentCarrierInfo)
	b.AddHandler(h.HandleUpdateShipnowFulfillmentState)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetShipnowFulfillment)
	b.AddHandler(h.HandleGetShipnowFulfillmentByShippingCode)
	b.AddHandler(h.HandleGetShipnowFulfillments)
	return QueryBus{b}
}
