// Code generated by gen-cmd-query. DO NOT EDIT.

package shipnow

import (
	context "context"

	orderingv1types "etop.vn/api/main/ordering/v1/types"
	shipnowv1 "etop.vn/api/main/shipnow/v1"
	meta "etop.vn/api/meta"
	metav1 "etop.vn/api/meta/v1"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus meta.Bus }
type QueryBus struct{ bus meta.Bus }

func (c CommandBus) Dispatch(ctx context.Context, msg Command) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type CancelShipnowFulfillmentCommand struct {
	Id           int64  `json:"id"`
	ShopId       int64  `json:"shop_id"`
	CancelReason string `json:"cancel_reason"`

	Result *metav1.Empty `json:"-"`
}

type ConfirmShipnowFulfillmentCommand struct {
	Id     int64 `json:"id"`
	ShopId int64 `json:"shop_id"`

	Result *shipnowv1.ShipnowFulfillment `json:"-"`
}

type CreateShipnowFulfillmentCommand struct {
	OrderIds            []int64                  `json:"order_ids,omitempty"`
	Carrier             string                   `json:"carrier"`
	ShopId              int64                    `json:"shop_id"`
	ShippingServiceCode string                   `json:"shipping_service_code"`
	ShippingServiceFee  int32                    `json:"shipping_service_fee"`
	ShippingNote        string                   `json:"shipping_note"`
	RequestPickupAt     *metav1.Timestamp        `json:"request_pickup_at,omitempty"`
	PickupAddress       *orderingv1types.Address `json:"pickup_address,omitempty"`

	Result *shipnowv1.ShipnowFulfillment `json:"-"`
}

type UpdateShipnowFulfillmentCommand struct {
	Id                  int64                    `json:"id"`
	OrderIds            []int64                  `json:"order_ids,omitempty"`
	Carrier             string                   `json:"carrier"`
	ShopId              int64                    `json:"shop_id"`
	ShippingServiceCode string                   `json:"shipping_service_code"`
	ShippingServiceFee  int32                    `json:"shipping_service_fee"`
	ShippingNote        string                   `json:"shipping_note"`
	RequestPickupAt     *metav1.Timestamp        `json:"request_pickup_at,omitempty"`
	PickupAddress       *orderingv1types.Address `json:"pickup_address,omitempty"`

	Result *shipnowv1.ShipnowFulfillment `json:"-"`
}

type GetShipnowFulfillmentQuery struct {
	Id     int64 `json:"id"`
	ShopId int64 `json:"shop_id"`

	Result *shipnowv1.GetShipnowFulfillmentQueryResult `json:"-"`
}

type GetShipnowFulfillmentsQuery struct {
	ShopId int64 `json:"shop_id"`

	Result *shipnowv1.GetShipnowFulfillmentsQueryResult `json:"-"`
}

// implement interfaces

func (q *CancelShipnowFulfillmentCommand) command()  {}
func (q *ConfirmShipnowFulfillmentCommand) command() {}
func (q *CreateShipnowFulfillmentCommand) command()  {}
func (q *UpdateShipnowFulfillmentCommand) command()  {}
func (q *GetShipnowFulfillmentQuery) query()         {}
func (q *GetShipnowFulfillmentsQuery) query()        {}

// implement conversion

func (q *CancelShipnowFulfillmentCommand) GetArgs() *shipnowv1.CancelShipnowFulfillmentCommand {
	return &shipnowv1.CancelShipnowFulfillmentCommand{
		Id:           q.Id,
		ShopId:       q.ShopId,
		CancelReason: q.CancelReason,
	}
}
func (q *ConfirmShipnowFulfillmentCommand) GetArgs() *shipnowv1.ConfirmShipnowFulfillmentCommand {
	return &shipnowv1.ConfirmShipnowFulfillmentCommand{
		Id:     q.Id,
		ShopId: q.ShopId,
	}
}
func (q *CreateShipnowFulfillmentCommand) GetArgs() *shipnowv1.CreateShipnowFulfillmentCommand {
	return &shipnowv1.CreateShipnowFulfillmentCommand{
		OrderIds:            q.OrderIds,
		Carrier:             q.Carrier,
		ShopId:              q.ShopId,
		ShippingServiceCode: q.ShippingServiceCode,
		ShippingServiceFee:  q.ShippingServiceFee,
		ShippingNote:        q.ShippingNote,
		RequestPickupAt:     q.RequestPickupAt,
		PickupAddress:       q.PickupAddress,
	}
}
func (q *UpdateShipnowFulfillmentCommand) GetArgs() *shipnowv1.UpdateShipnowFulfillmentCommand {
	return &shipnowv1.UpdateShipnowFulfillmentCommand{
		Id:                  q.Id,
		OrderIds:            q.OrderIds,
		Carrier:             q.Carrier,
		ShopId:              q.ShopId,
		ShippingServiceCode: q.ShippingServiceCode,
		ShippingServiceFee:  q.ShippingServiceFee,
		ShippingNote:        q.ShippingNote,
		RequestPickupAt:     q.RequestPickupAt,
		PickupAddress:       q.PickupAddress,
	}
}
func (q *GetShipnowFulfillmentQuery) GetArgs() *shipnowv1.GetShipnowFulfillmentQueryArgs {
	return &shipnowv1.GetShipnowFulfillmentQueryArgs{
		Id:     q.Id,
		ShopId: q.ShopId,
	}
}
func (q *GetShipnowFulfillmentsQuery) GetArgs() *shipnowv1.GetShipnowFulfillmentsQueryArgs {
	return &shipnowv1.GetShipnowFulfillmentsQueryArgs{
		ShopId: q.ShopId,
	}
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCancelShipnowFulfillment)
	b.AddHandler(h.HandleConfirmShipnowFulfillment)
	b.AddHandler(h.HandleCreateShipnowFulfillment)
	b.AddHandler(h.HandleUpdateShipnowFulfillment)
	return CommandBus{b}
}

func (h AggregateHandler) HandleCancelShipnowFulfillment(ctx context.Context, cmd *CancelShipnowFulfillmentCommand) error {
	result, err := h.inner.CancelShipnowFulfillment(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleConfirmShipnowFulfillment(ctx context.Context, cmd *ConfirmShipnowFulfillmentCommand) error {
	result, err := h.inner.ConfirmShipnowFulfillment(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleCreateShipnowFulfillment(ctx context.Context, cmd *CreateShipnowFulfillmentCommand) error {
	result, err := h.inner.CreateShipnowFulfillment(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleUpdateShipnowFulfillment(ctx context.Context, cmd *UpdateShipnowFulfillmentCommand) error {
	result, err := h.inner.UpdateShipnowFulfillment(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetShipnowFulfillment)
	b.AddHandler(h.HandleGetShipnowFulfillments)
	return QueryBus{b}
}

func (h QueryServiceHandler) HandleGetShipnowFulfillment(ctx context.Context, query *GetShipnowFulfillmentQuery) error {
	result, err := h.inner.GetShipnowFulfillment(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleGetShipnowFulfillments(ctx context.Context, query *GetShipnowFulfillmentsQuery) error {
	result, err := h.inner.GetShipnowFulfillments(ctx, query.GetArgs())
	query.Result = result
	return err
}
