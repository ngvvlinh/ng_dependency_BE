// +build !generator

// Code generated by generator cq. DO NOT EDIT.

package shipping

import (
	context "context"

	types "etop.vn/api/main/shipping/types"
	meta "etop.vn/api/meta"
	capi "etop.vn/capi"
	dot "etop.vn/capi/dot"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus                          { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus                              { return QueryBus{bus} }
func (c CommandBus) Dispatch(ctx context.Context, msg Command) error { return c.bus.Dispatch(ctx, msg) }
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error     { return c.bus.Dispatch(ctx, msg) }
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type CancelFulfillmentCommand struct {
	FulfillmentID dot.ID
	CancelReason  string

	Result *meta.Empty `json:"-"`
}

func (h AggregateHandler) HandleCancelFulfillment(ctx context.Context, msg *CancelFulfillmentCommand) (err error) {
	msg.Result, err = h.inner.CancelFulfillment(msg.GetArgs(ctx))
	return err
}

type ConfirmFulfillmentCommand struct {
	FulfillmentID dot.ID

	Result *meta.Empty `json:"-"`
}

func (h AggregateHandler) HandleConfirmFulfillment(ctx context.Context, msg *ConfirmFulfillmentCommand) (err error) {
	msg.Result, err = h.inner.ConfirmFulfillment(msg.GetArgs(ctx))
	return err
}

type CreateFulfillmentCommand struct {
	OrderID             dot.ID
	PickupAddress       *Address
	ShippingAddress     *Address
	ReturnAddress       *Address
	Carrier             string
	ShippingServiceCode string
	ShippingServiceFee  string
	WeightInfo          WeightInfo
	ValueInfo           ValueInfo
	TryOn               types.TryOn
	ShippingNote        string

	Result *meta.Empty `json:"-"`
}

func (h AggregateHandler) HandleCreateFulfillment(ctx context.Context, msg *CreateFulfillmentCommand) (err error) {
	msg.Result, err = h.inner.CreateFulfillment(msg.GetArgs(ctx))
	return err
}

type GetFulfillmentByIDCommand struct {
	FulfillmentID dot.ID

	Result *Fulfillment `json:"-"`
}

func (h AggregateHandler) HandleGetFulfillmentByID(ctx context.Context, msg *GetFulfillmentByIDCommand) (err error) {
	msg.Result, err = h.inner.GetFulfillmentByID(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CancelFulfillmentCommand) command()  {}
func (q *ConfirmFulfillmentCommand) command() {}
func (q *CreateFulfillmentCommand) command()  {}
func (q *GetFulfillmentByIDCommand) command() {}

// implement conversion

func (q *CancelFulfillmentCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CancelFulfillmentArgs) {
	return ctx,
		&CancelFulfillmentArgs{
			FulfillmentID: q.FulfillmentID,
			CancelReason:  q.CancelReason,
		}
}

func (q *CancelFulfillmentCommand) SetCancelFulfillmentArgs(args *CancelFulfillmentArgs) {
	q.FulfillmentID = args.FulfillmentID
	q.CancelReason = args.CancelReason
}

func (q *ConfirmFulfillmentCommand) GetArgs(ctx context.Context) (_ context.Context, _ *ConfirmFulfillmentArgs) {
	return ctx,
		&ConfirmFulfillmentArgs{
			FulfillmentID: q.FulfillmentID,
		}
}

func (q *ConfirmFulfillmentCommand) SetConfirmFulfillmentArgs(args *ConfirmFulfillmentArgs) {
	q.FulfillmentID = args.FulfillmentID
}

func (q *CreateFulfillmentCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFulfillmentArgs) {
	return ctx,
		&CreateFulfillmentArgs{
			OrderID:             q.OrderID,
			PickupAddress:       q.PickupAddress,
			ShippingAddress:     q.ShippingAddress,
			ReturnAddress:       q.ReturnAddress,
			Carrier:             q.Carrier,
			ShippingServiceCode: q.ShippingServiceCode,
			ShippingServiceFee:  q.ShippingServiceFee,
			WeightInfo:          q.WeightInfo,
			ValueInfo:           q.ValueInfo,
			TryOn:               q.TryOn,
			ShippingNote:        q.ShippingNote,
		}
}

func (q *CreateFulfillmentCommand) SetCreateFulfillmentArgs(args *CreateFulfillmentArgs) {
	q.OrderID = args.OrderID
	q.PickupAddress = args.PickupAddress
	q.ShippingAddress = args.ShippingAddress
	q.ReturnAddress = args.ReturnAddress
	q.Carrier = args.Carrier
	q.ShippingServiceCode = args.ShippingServiceCode
	q.ShippingServiceFee = args.ShippingServiceFee
	q.WeightInfo = args.WeightInfo
	q.ValueInfo = args.ValueInfo
	q.TryOn = args.TryOn
	q.ShippingNote = args.ShippingNote
}

func (q *GetFulfillmentByIDCommand) GetArgs(ctx context.Context) (_ context.Context, _ *GetFulfillmentByIDQueryArgs) {
	return ctx,
		&GetFulfillmentByIDQueryArgs{
			FulfillmentID: q.FulfillmentID,
		}
}

func (q *GetFulfillmentByIDCommand) SetGetFulfillmentByIDQueryArgs(args *GetFulfillmentByIDQueryArgs) {
	q.FulfillmentID = args.FulfillmentID
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCancelFulfillment)
	b.AddHandler(h.HandleConfirmFulfillment)
	b.AddHandler(h.HandleCreateFulfillment)
	b.AddHandler(h.HandleGetFulfillmentByID)
	return CommandBus{b}
}
