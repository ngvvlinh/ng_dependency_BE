// Code generated by gen-cmd-query. DO NOT EDIT.

package shipping

import (
	context "context"
	unsafe "unsafe"

	shippingv1types "etop.vn/api/main/shipping/v1/types"
	meta "etop.vn/api/meta"
	metav1 "etop.vn/api/meta/v1"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus meta.Bus }
type QueryBus struct{ bus meta.Bus }

func (c CommandBus) Dispatch(ctx context.Context, msg Command) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type CancelFulfillmentCommand struct {
	FulfillmentID int64
	CancelReason  string

	Result *metav1.Empty `json:"-"`
}

type ConfirmFulfillmentCommand struct {
	FulfillmentID int64

	Result *metav1.Empty `json:"-"`
}

type CreateFulfillmentCommand struct {
	OrderID             int64
	PickupAddress       *Address
	ShippingAddress     *Address
	ReturnAddress       *Address
	Carrier             string
	ShippingServiceCode string
	ShippingServiceFee  string
	WeightInfo
	ValueInfo
	TryOn        shippingv1types.TryOnCode
	ShippingNote string

	Result *metav1.Empty `json:"-"`
}

type GetFulfillmentByIDCommand struct {
	FulfillmentID int64

	Result *Fulfillment `json:"-"`
}

// implement interfaces

func (q *CancelFulfillmentCommand) command()  {}
func (q *ConfirmFulfillmentCommand) command() {}
func (q *CreateFulfillmentCommand) command()  {}
func (q *GetFulfillmentByIDCommand) command() {}

// implement conversion

func (q *CancelFulfillmentCommand) GetArgs() *CancelFulfillmentArgs {
	return (*CancelFulfillmentArgs)(unsafe.Pointer(q))
}
func (q *ConfirmFulfillmentCommand) GetArgs() *ConfirmFulfillmentArgs {
	return (*ConfirmFulfillmentArgs)(unsafe.Pointer(q))
}
func (q *CreateFulfillmentCommand) GetArgs() *CreateFulfillmentArgs {
	return (*CreateFulfillmentArgs)(unsafe.Pointer(q))
}
func (q *GetFulfillmentByIDCommand) GetArgs() *GetFulfillmentByIDQueryArgs {
	return (*GetFulfillmentByIDQueryArgs)(unsafe.Pointer(q))
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCancelFulfillment)
	b.AddHandler(h.HandleConfirmFulfillment)
	b.AddHandler(h.HandleCreateFulfillment)
	b.AddHandler(h.HandleGetFulfillmentByID)
	return CommandBus{b}
}

func (h AggregateHandler) HandleCancelFulfillment(ctx context.Context, cmd *CancelFulfillmentCommand) error {
	result, err := h.inner.CancelFulfillment(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleConfirmFulfillment(ctx context.Context, cmd *ConfirmFulfillmentCommand) error {
	result, err := h.inner.ConfirmFulfillment(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleCreateFulfillment(ctx context.Context, cmd *CreateFulfillmentCommand) error {
	result, err := h.inner.CreateFulfillment(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleGetFulfillmentByID(ctx context.Context, cmd *GetFulfillmentByIDCommand) error {
	result, err := h.inner.GetFulfillmentByID(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}
