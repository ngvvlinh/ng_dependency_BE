// +build !generator

// Code generated by generator api. DO NOT EDIT.

package shipping

import (
	context "context"

	orderingtypes "etop.vn/api/main/ordering/types"
	shippingtypes "etop.vn/api/main/shipping/types"
	shipping "etop.vn/api/top/types/etc/shipping"
	status3 "etop.vn/api/top/types/etc/status3"
	status4 "etop.vn/api/top/types/etc/status4"
	try_on "etop.vn/api/top/types/etc/try_on"
	capi "etop.vn/capi"
	dot "etop.vn/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CancelFulfillmentCommand struct {
	FulfillmentID dot.ID
	CancelReason  string

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleCancelFulfillment(ctx context.Context, msg *CancelFulfillmentCommand) (err error) {
	return h.inner.CancelFulfillment(msg.GetArgs(ctx))
}

type CreateFulfillmentsCommand struct {
	ShopID              dot.ID
	OrderID             dot.ID
	PickupAddress       *orderingtypes.Address
	ShippingAddress     *orderingtypes.Address
	ReturnAddress       *orderingtypes.Address
	ShippingType        orderingtypes.ShippingType
	ShippingServiceCode string
	ShippingServiceFee  int
	ShippingServiceName string
	WeightInfo          shippingtypes.WeightInfo
	ValueInfo           shippingtypes.ValueInfo
	TryOn               try_on.TryOnCode
	ShippingNote        string
	ConnectionID        dot.ID
	ShopCarrierID       dot.ID

	Result []dot.ID `json:"-"`
}

func (h AggregateHandler) HandleCreateFulfillments(ctx context.Context, msg *CreateFulfillmentsCommand) (err error) {
	msg.Result, err = h.inner.CreateFulfillments(msg.GetArgs(ctx))
	return err
}

type UpdateFulfillmentShippingFeesCommand struct {
	FulfillmentID    dot.ID
	ShippingCode     string
	ShippingFeeLines []*ShippingFeeLine

	Result int `json:"-"`
}

func (h AggregateHandler) HandleUpdateFulfillmentShippingFees(ctx context.Context, msg *UpdateFulfillmentShippingFeesCommand) (err error) {
	msg.Result, err = h.inner.UpdateFulfillmentShippingFees(msg.GetArgs(ctx))
	return err
}

type UpdateFulfillmentShippingStateCommand struct {
	PartnerID                dot.ID
	FulfillmentID            dot.ID
	ShippingCode             string
	ShippingState            shipping.State
	ActualCompensationAmount dot.NullInt
	ConnectionIDs            []dot.ID

	Result int `json:"-"`
}

func (h AggregateHandler) HandleUpdateFulfillmentShippingState(ctx context.Context, msg *UpdateFulfillmentShippingStateCommand) (err error) {
	msg.Result, err = h.inner.UpdateFulfillmentShippingState(msg.GetArgs(ctx))
	return err
}

type UpdateFulfillmentsMoneyTxShippingExternalIDCommand struct {
	FulfillmentIDs            []dot.ID
	MoneyTxShippingExternalID dot.ID

	Result int `json:"-"`
}

func (h AggregateHandler) HandleUpdateFulfillmentsMoneyTxShippingExternalID(ctx context.Context, msg *UpdateFulfillmentsMoneyTxShippingExternalIDCommand) (err error) {
	msg.Result, err = h.inner.UpdateFulfillmentsMoneyTxShippingExternalID(msg.GetArgs(ctx))
	return err
}

type UpdateFulfillmentsStatusCommand struct {
	FulfillmentIDs []dot.ID
	Status         status4.NullStatus
	ShopConfirm    status3.NullStatus
	SyncStatus     status4.NullStatus

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleUpdateFulfillmentsStatus(ctx context.Context, msg *UpdateFulfillmentsStatusCommand) (err error) {
	return h.inner.UpdateFulfillmentsStatus(msg.GetArgs(ctx))
}

type GetFulfillmentByIDOrShippingCodeQuery struct {
	ID           dot.ID
	ShippingCode string

	Result *Fulfillment `json:"-"`
}

func (h QueryServiceHandler) HandleGetFulfillmentByIDOrShippingCode(ctx context.Context, msg *GetFulfillmentByIDOrShippingCodeQuery) (err error) {
	msg.Result, err = h.inner.GetFulfillmentByIDOrShippingCode(msg.GetArgs(ctx))
	return err
}

type ListFulfillmentByIDsQuery struct {
	IDs    []dot.ID
	ShopID dot.ID

	Result []*Fulfillment `json:"-"`
}

func (h QueryServiceHandler) HandleListFulfillmentByIDs(ctx context.Context, msg *ListFulfillmentByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListFulfillmentByIDs(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CancelFulfillmentCommand) command()                           {}
func (q *CreateFulfillmentsCommand) command()                          {}
func (q *UpdateFulfillmentShippingFeesCommand) command()               {}
func (q *UpdateFulfillmentShippingStateCommand) command()              {}
func (q *UpdateFulfillmentsMoneyTxShippingExternalIDCommand) command() {}
func (q *UpdateFulfillmentsStatusCommand) command()                    {}

func (q *GetFulfillmentByIDOrShippingCodeQuery) query() {}
func (q *ListFulfillmentByIDsQuery) query()             {}

// implement conversion

func (q *CancelFulfillmentCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CancelFulfillmentArgs) {
	return ctx,
		&CancelFulfillmentArgs{
			FulfillmentID: q.FulfillmentID,
			CancelReason:  q.CancelReason,
		}
}

func (q *CancelFulfillmentCommand) SetCancelFulfillmentArgs(args *CancelFulfillmentArgs) {
	q.FulfillmentID = args.FulfillmentID
	q.CancelReason = args.CancelReason
}

func (q *CreateFulfillmentsCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFulfillmentsArgs) {
	return ctx,
		&CreateFulfillmentsArgs{
			ShopID:              q.ShopID,
			OrderID:             q.OrderID,
			PickupAddress:       q.PickupAddress,
			ShippingAddress:     q.ShippingAddress,
			ReturnAddress:       q.ReturnAddress,
			ShippingType:        q.ShippingType,
			ShippingServiceCode: q.ShippingServiceCode,
			ShippingServiceFee:  q.ShippingServiceFee,
			ShippingServiceName: q.ShippingServiceName,
			WeightInfo:          q.WeightInfo,
			ValueInfo:           q.ValueInfo,
			TryOn:               q.TryOn,
			ShippingNote:        q.ShippingNote,
			ConnectionID:        q.ConnectionID,
			ShopCarrierID:       q.ShopCarrierID,
		}
}

func (q *CreateFulfillmentsCommand) SetCreateFulfillmentsArgs(args *CreateFulfillmentsArgs) {
	q.ShopID = args.ShopID
	q.OrderID = args.OrderID
	q.PickupAddress = args.PickupAddress
	q.ShippingAddress = args.ShippingAddress
	q.ReturnAddress = args.ReturnAddress
	q.ShippingType = args.ShippingType
	q.ShippingServiceCode = args.ShippingServiceCode
	q.ShippingServiceFee = args.ShippingServiceFee
	q.ShippingServiceName = args.ShippingServiceName
	q.WeightInfo = args.WeightInfo
	q.ValueInfo = args.ValueInfo
	q.TryOn = args.TryOn
	q.ShippingNote = args.ShippingNote
	q.ConnectionID = args.ConnectionID
	q.ShopCarrierID = args.ShopCarrierID
}

func (q *UpdateFulfillmentShippingFeesCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateFulfillmentShippingFeesArgs) {
	return ctx,
		&UpdateFulfillmentShippingFeesArgs{
			FulfillmentID:    q.FulfillmentID,
			ShippingCode:     q.ShippingCode,
			ShippingFeeLines: q.ShippingFeeLines,
		}
}

func (q *UpdateFulfillmentShippingFeesCommand) SetUpdateFulfillmentShippingFeesArgs(args *UpdateFulfillmentShippingFeesArgs) {
	q.FulfillmentID = args.FulfillmentID
	q.ShippingCode = args.ShippingCode
	q.ShippingFeeLines = args.ShippingFeeLines
}

func (q *UpdateFulfillmentShippingStateCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateFulfillmentShippingStateArgs) {
	return ctx,
		&UpdateFulfillmentShippingStateArgs{
			PartnerID:                q.PartnerID,
			FulfillmentID:            q.FulfillmentID,
			ShippingCode:             q.ShippingCode,
			ShippingState:            q.ShippingState,
			ActualCompensationAmount: q.ActualCompensationAmount,
			ConnectionIDs:            q.ConnectionIDs,
		}
}

func (q *UpdateFulfillmentShippingStateCommand) SetUpdateFulfillmentShippingStateArgs(args *UpdateFulfillmentShippingStateArgs) {
	q.PartnerID = args.PartnerID
	q.FulfillmentID = args.FulfillmentID
	q.ShippingCode = args.ShippingCode
	q.ShippingState = args.ShippingState
	q.ActualCompensationAmount = args.ActualCompensationAmount
	q.ConnectionIDs = args.ConnectionIDs
}

func (q *UpdateFulfillmentsMoneyTxShippingExternalIDCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateFulfillmentsMoneyTxShippingExternalIDArgs) {
	return ctx,
		&UpdateFulfillmentsMoneyTxShippingExternalIDArgs{
			FulfillmentIDs:            q.FulfillmentIDs,
			MoneyTxShippingExternalID: q.MoneyTxShippingExternalID,
		}
}

func (q *UpdateFulfillmentsMoneyTxShippingExternalIDCommand) SetUpdateFulfillmentsMoneyTxShippingExternalIDArgs(args *UpdateFulfillmentsMoneyTxShippingExternalIDArgs) {
	q.FulfillmentIDs = args.FulfillmentIDs
	q.MoneyTxShippingExternalID = args.MoneyTxShippingExternalID
}

func (q *UpdateFulfillmentsStatusCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateFulfillmentsStatusArgs) {
	return ctx,
		&UpdateFulfillmentsStatusArgs{
			FulfillmentIDs: q.FulfillmentIDs,
			Status:         q.Status,
			ShopConfirm:    q.ShopConfirm,
			SyncStatus:     q.SyncStatus,
		}
}

func (q *UpdateFulfillmentsStatusCommand) SetUpdateFulfillmentsStatusArgs(args *UpdateFulfillmentsStatusArgs) {
	q.FulfillmentIDs = args.FulfillmentIDs
	q.Status = args.Status
	q.ShopConfirm = args.ShopConfirm
	q.SyncStatus = args.SyncStatus
}

func (q *GetFulfillmentByIDOrShippingCodeQuery) GetArgs(ctx context.Context) (_ context.Context, ID dot.ID, ShippingCode string) {
	return ctx,
		q.ID,
		q.ShippingCode
}

func (q *ListFulfillmentByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, IDs []dot.ID, shopID dot.ID) {
	return ctx,
		q.IDs,
		q.ShopID
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCancelFulfillment)
	b.AddHandler(h.HandleCreateFulfillments)
	b.AddHandler(h.HandleUpdateFulfillmentShippingFees)
	b.AddHandler(h.HandleUpdateFulfillmentShippingState)
	b.AddHandler(h.HandleUpdateFulfillmentsMoneyTxShippingExternalID)
	b.AddHandler(h.HandleUpdateFulfillmentsStatus)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetFulfillmentByIDOrShippingCode)
	b.AddHandler(h.HandleListFulfillmentByIDs)
	return QueryBus{b}
}
