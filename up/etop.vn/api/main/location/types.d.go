// Code generated by gen-cmd-query. DO NOT EDIT.

package location

import (
	context "context"

	meta "etop.vn/api/meta"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus meta.Bus }
type QueryBus struct{ bus meta.Bus }

func (c CommandBus) Dispatch(ctx context.Context, msg Command) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type FindLocationQuery struct {
	Province string
	District string
	Ward     string

	Result *LocationQueryResult `json:"-"`
}

type FindOrGetLocationQuery struct {
	Province     string
	District     string
	Ward         string
	ProvinceCode string
	DistrictCode string
	WardCode     string

	Result *LocationQueryResult `json:"-"`
}

type GetAllLocationsQuery struct {
	All          bool
	ProvinceCode string
	DistrictCode string

	Result *GetAllLocationsQueryResult `json:"-"`
}

type GetLocationQuery struct {
	ProvinceCode     string
	DistrictCode     string
	WardCode         string
	LocationCodeType LocationCodeType

	Result *LocationQueryResult `json:"-"`
}

// implement interfaces

func (q *FindLocationQuery) query()      {}
func (q *FindOrGetLocationQuery) query() {}
func (q *GetAllLocationsQuery) query()   {}
func (q *GetLocationQuery) query()       {}

// implement conversion

func (q *FindLocationQuery) GetArgs(ctx context.Context) (_ context.Context, _ *FindLocationQueryArgs) {
	return ctx,
		&FindLocationQueryArgs{
			Province: q.Province,
			District: q.District,
			Ward:     q.Ward,
		}
}

func (q *FindOrGetLocationQuery) GetArgs(ctx context.Context) (_ context.Context, _ *FindOrGetLocationQueryArgs) {
	return ctx,
		&FindOrGetLocationQueryArgs{
			Province:     q.Province,
			District:     q.District,
			Ward:         q.Ward,
			ProvinceCode: q.ProvinceCode,
			DistrictCode: q.DistrictCode,
			WardCode:     q.WardCode,
		}
}

func (q *GetAllLocationsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetAllLocationsQueryArgs) {
	return ctx,
		&GetAllLocationsQueryArgs{
			All:          q.All,
			ProvinceCode: q.ProvinceCode,
			DistrictCode: q.DistrictCode,
		}
}

func (q *GetLocationQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetLocationQueryArgs) {
	return ctx,
		&GetLocationQueryArgs{
			ProvinceCode:     q.ProvinceCode,
			DistrictCode:     q.DistrictCode,
			WardCode:         q.WardCode,
			LocationCodeType: q.LocationCodeType,
		}
}

// implement dispatching

type LocationQueryServiceHandler struct {
	inner LocationQueryService
}

func NewLocationQueryServiceHandler(service LocationQueryService) LocationQueryServiceHandler {
	return LocationQueryServiceHandler{service}
}

func (h LocationQueryServiceHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleFindLocation)
	b.AddHandler(h.HandleFindOrGetLocation)
	b.AddHandler(h.HandleGetAllLocations)
	b.AddHandler(h.HandleGetLocation)
	return QueryBus{b}
}

func (h LocationQueryServiceHandler) HandleFindLocation(ctx context.Context, msg *FindLocationQuery) error {
	result, err := h.inner.FindLocation(msg.GetArgs(ctx))
	msg.Result = result
	return err
}

func (h LocationQueryServiceHandler) HandleFindOrGetLocation(ctx context.Context, msg *FindOrGetLocationQuery) error {
	result, err := h.inner.FindOrGetLocation(msg.GetArgs(ctx))
	msg.Result = result
	return err
}

func (h LocationQueryServiceHandler) HandleGetAllLocations(ctx context.Context, msg *GetAllLocationsQuery) error {
	result, err := h.inner.GetAllLocations(msg.GetArgs(ctx))
	msg.Result = result
	return err
}

func (h LocationQueryServiceHandler) HandleGetLocation(ctx context.Context, msg *GetLocationQuery) error {
	result, err := h.inner.GetLocation(msg.GetArgs(ctx))
	msg.Result = result
	return err
}
