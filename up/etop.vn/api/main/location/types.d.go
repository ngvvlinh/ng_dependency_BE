// Code generated by gen-cmd-query. DO NOT EDIT.

package location

import (
	context "context"

	locationv1 "etop.vn/api/main/location/v1"
	meta "etop.vn/api/meta"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus meta.Bus }
type QueryBus struct{ bus meta.Bus }

func (c CommandBus) Dispatch(ctx context.Context, msg Command) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type FindLocationQuery struct {
	Province string `json:"province"`
	District string `json:"district"`
	Ward     string `json:"ward"`

	Result *locationv1.LocationQueryResult `json:"-"`
}

type FindOrGetLocationQuery struct {
	Province     string `json:"province"`
	District     string `json:"district"`
	Ward         string `json:"ward"`
	ProvinceCode string `json:"province_code"`
	DistrictCode string `json:"district_code"`
	WardCode     string `json:"ward_code"`

	Result *locationv1.LocationQueryResult `json:"-"`
}

type GetAllLocationsQuery struct {
	All          bool   `json:"all"`
	ProvinceCode string `json:"province_code"`
	DistrictCode string `json:"district_code"`

	Result *locationv1.GetAllLocationsQueryResult `json:"-"`
}

type GetLocationQuery struct {
	ProvinceCode     string                      `json:"province_code"`
	DistrictCode     string                      `json:"district_code"`
	WardCode         string                      `json:"ward_code"`
	LocationCodeType locationv1.LocationCodeType `json:"location_code_type"`

	Result *locationv1.LocationQueryResult `json:"-"`
}

// implement interfaces

func (q *FindLocationQuery) query()      {}
func (q *FindOrGetLocationQuery) query() {}
func (q *GetAllLocationsQuery) query()   {}
func (q *GetLocationQuery) query()       {}

// implement conversion

func (q *FindLocationQuery) GetArgs() *locationv1.FindLocationQueryArgs {
	return &locationv1.FindLocationQueryArgs{
		Province: q.Province,
		District: q.District,
		Ward:     q.Ward,
	}
}
func (q *FindOrGetLocationQuery) GetArgs() *locationv1.FindOrGetLocationQueryArgs {
	return &locationv1.FindOrGetLocationQueryArgs{
		Province:     q.Province,
		District:     q.District,
		Ward:         q.Ward,
		ProvinceCode: q.ProvinceCode,
		DistrictCode: q.DistrictCode,
		WardCode:     q.WardCode,
	}
}
func (q *GetAllLocationsQuery) GetArgs() *locationv1.GetAllLocationsQueryArgs {
	return &locationv1.GetAllLocationsQueryArgs{
		All:          q.All,
		ProvinceCode: q.ProvinceCode,
		DistrictCode: q.DistrictCode,
	}
}
func (q *GetLocationQuery) GetArgs() *locationv1.GetLocationQueryArgs {
	return &locationv1.GetLocationQueryArgs{
		ProvinceCode:     q.ProvinceCode,
		DistrictCode:     q.DistrictCode,
		WardCode:         q.WardCode,
		LocationCodeType: q.LocationCodeType,
	}
}

// implement dispatching

type LocationQueryServiceHandler struct {
	inner LocationQueryService
}

func NewLocationQueryServiceHandler(service LocationQueryService) LocationQueryServiceHandler {
	return LocationQueryServiceHandler{service}
}

func (h LocationQueryServiceHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleFindLocation)
	b.AddHandler(h.HandleFindOrGetLocation)
	b.AddHandler(h.HandleGetAllLocations)
	b.AddHandler(h.HandleGetLocation)
	return QueryBus{b}
}

func (h LocationQueryServiceHandler) HandleFindLocation(ctx context.Context, query *FindLocationQuery) error {
	result, err := h.inner.FindLocation(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h LocationQueryServiceHandler) HandleFindOrGetLocation(ctx context.Context, query *FindOrGetLocationQuery) error {
	result, err := h.inner.FindOrGetLocation(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h LocationQueryServiceHandler) HandleGetAllLocations(ctx context.Context, query *GetAllLocationsQuery) error {
	result, err := h.inner.GetAllLocations(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h LocationQueryServiceHandler) HandleGetLocation(ctx context.Context, query *GetLocationQuery) error {
	result, err := h.inner.GetLocation(ctx, query.GetArgs())
	query.Result = result
	return err
}
