// +build !generator

// Code generated by generator api. DO NOT EDIT.

package location

import (
	context "context"

	capi "etop.vn/capi"
)

type QueryBus struct{ bus capi.Bus }

func NewQueryBus(bus capi.Bus) QueryBus { return QueryBus{bus} }

func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type FindLocationQuery struct {
	Province string
	District string
	Ward     string

	Result *LocationQueryResult `json:"-"`
}

func (h QueryServiceHandler) HandleFindLocation(ctx context.Context, msg *FindLocationQuery) (err error) {
	msg.Result, err = h.inner.FindLocation(msg.GetArgs(ctx))
	return err
}

type FindOrGetLocationQuery struct {
	Province     string
	District     string
	Ward         string
	ProvinceCode string
	DistrictCode string
	WardCode     string

	Result *LocationQueryResult `json:"-"`
}

func (h QueryServiceHandler) HandleFindOrGetLocation(ctx context.Context, msg *FindOrGetLocationQuery) (err error) {
	msg.Result, err = h.inner.FindOrGetLocation(msg.GetArgs(ctx))
	return err
}

type GetAllLocationsQuery struct {
	All          bool
	ProvinceCode string
	DistrictCode string

	Result *GetAllLocationsQueryResult `json:"-"`
}

func (h QueryServiceHandler) HandleGetAllLocations(ctx context.Context, msg *GetAllLocationsQuery) (err error) {
	msg.Result, err = h.inner.GetAllLocations(msg.GetArgs(ctx))
	return err
}

type GetLocationQuery struct {
	ProvinceCode     string
	DistrictCode     string
	WardCode         string
	LocationCodeType LocationCodeType

	Result *LocationQueryResult `json:"-"`
}

func (h QueryServiceHandler) HandleGetLocation(ctx context.Context, msg *GetLocationQuery) (err error) {
	msg.Result, err = h.inner.GetLocation(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *FindLocationQuery) query()      {}
func (q *FindOrGetLocationQuery) query() {}
func (q *GetAllLocationsQuery) query()   {}
func (q *GetLocationQuery) query()       {}

// implement conversion

func (q *FindLocationQuery) GetArgs(ctx context.Context) (_ context.Context, _ *FindLocationQueryArgs) {
	return ctx,
		&FindLocationQueryArgs{
			Province: q.Province,
			District: q.District,
			Ward:     q.Ward,
		}
}

func (q *FindLocationQuery) SetFindLocationQueryArgs(args *FindLocationQueryArgs) {
	q.Province = args.Province
	q.District = args.District
	q.Ward = args.Ward
}

func (q *FindOrGetLocationQuery) GetArgs(ctx context.Context) (_ context.Context, _ *FindOrGetLocationQueryArgs) {
	return ctx,
		&FindOrGetLocationQueryArgs{
			Province:     q.Province,
			District:     q.District,
			Ward:         q.Ward,
			ProvinceCode: q.ProvinceCode,
			DistrictCode: q.DistrictCode,
			WardCode:     q.WardCode,
		}
}

func (q *FindOrGetLocationQuery) SetFindOrGetLocationQueryArgs(args *FindOrGetLocationQueryArgs) {
	q.Province = args.Province
	q.District = args.District
	q.Ward = args.Ward
	q.ProvinceCode = args.ProvinceCode
	q.DistrictCode = args.DistrictCode
	q.WardCode = args.WardCode
}

func (q *GetAllLocationsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetAllLocationsQueryArgs) {
	return ctx,
		&GetAllLocationsQueryArgs{
			All:          q.All,
			ProvinceCode: q.ProvinceCode,
			DistrictCode: q.DistrictCode,
		}
}

func (q *GetAllLocationsQuery) SetGetAllLocationsQueryArgs(args *GetAllLocationsQueryArgs) {
	q.All = args.All
	q.ProvinceCode = args.ProvinceCode
	q.DistrictCode = args.DistrictCode
}

func (q *GetLocationQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetLocationQueryArgs) {
	return ctx,
		&GetLocationQueryArgs{
			ProvinceCode:     q.ProvinceCode,
			DistrictCode:     q.DistrictCode,
			WardCode:         q.WardCode,
			LocationCodeType: q.LocationCodeType,
		}
}

func (q *GetLocationQuery) SetGetLocationQueryArgs(args *GetLocationQueryArgs) {
	q.ProvinceCode = args.ProvinceCode
	q.DistrictCode = args.DistrictCode
	q.WardCode = args.WardCode
	q.LocationCodeType = args.LocationCodeType
}

// implement dispatching

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleFindLocation)
	b.AddHandler(h.HandleFindOrGetLocation)
	b.AddHandler(h.HandleGetAllLocations)
	b.AddHandler(h.HandleGetLocation)
	return QueryBus{b}
}
