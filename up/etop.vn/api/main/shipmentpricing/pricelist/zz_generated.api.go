// +build !generator

// Code generated by generator api. DO NOT EDIT.

package pricelist

import (
	context "context"

	meta "etop.vn/api/meta"
	capi "etop.vn/capi"
	dot "etop.vn/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type ActivateShipmentPriceListCommand struct {
	ID dot.ID

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleActivateShipmentPriceList(ctx context.Context, msg *ActivateShipmentPriceListCommand) (err error) {
	return h.inner.ActivateShipmentPriceList(msg.GetArgs(ctx))
}

type CreateShipmentPriceListCommand struct {
	Name        string
	Description string
	IsActive    bool

	Result *ShipmentPriceList `json:"-"`
}

func (h AggregateHandler) HandleCreateShipmentPriceList(ctx context.Context, msg *CreateShipmentPriceListCommand) (err error) {
	msg.Result, err = h.inner.CreateShipmentPriceList(msg.GetArgs(ctx))
	return err
}

type DeleteShipmentPriceListCommand struct {
	ID dot.ID

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleDeleteShipmentPriceList(ctx context.Context, msg *DeleteShipmentPriceListCommand) (err error) {
	return h.inner.DeleteShipmentPriceList(msg.GetArgs(ctx))
}

type UpdateShipmentPriceListCommand struct {
	ID          dot.ID
	Name        string
	Description string

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleUpdateShipmentPriceList(ctx context.Context, msg *UpdateShipmentPriceListCommand) (err error) {
	return h.inner.UpdateShipmentPriceList(msg.GetArgs(ctx))
}

type GetActiveShipmentPriceListQuery struct {
	Result *ShipmentPriceList `json:"-"`
}

func (h QueryServiceHandler) HandleGetActiveShipmentPriceList(ctx context.Context, msg *GetActiveShipmentPriceListQuery) (err error) {
	msg.Result, err = h.inner.GetActiveShipmentPriceList(msg.GetArgs(ctx))
	return err
}

type GetShipmentPriceListQuery struct {
	ID dot.ID

	Result *ShipmentPriceList `json:"-"`
}

func (h QueryServiceHandler) HandleGetShipmentPriceList(ctx context.Context, msg *GetShipmentPriceListQuery) (err error) {
	msg.Result, err = h.inner.GetShipmentPriceList(msg.GetArgs(ctx))
	return err
}

type ListShipmentPriceListQuery struct {
	Result []*ShipmentPriceList `json:"-"`
}

func (h QueryServiceHandler) HandleListShipmentPriceList(ctx context.Context, msg *ListShipmentPriceListQuery) (err error) {
	msg.Result, err = h.inner.ListShipmentPriceList(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *ActivateShipmentPriceListCommand) command() {}
func (q *CreateShipmentPriceListCommand) command()   {}
func (q *DeleteShipmentPriceListCommand) command()   {}
func (q *UpdateShipmentPriceListCommand) command()   {}

func (q *GetActiveShipmentPriceListQuery) query() {}
func (q *GetShipmentPriceListQuery) query()       {}
func (q *ListShipmentPriceListQuery) query()      {}

// implement conversion

func (q *ActivateShipmentPriceListCommand) GetArgs(ctx context.Context) (_ context.Context, ID dot.ID) {
	return ctx,
		q.ID
}

func (q *CreateShipmentPriceListCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateShipmentPriceListArg) {
	return ctx,
		&CreateShipmentPriceListArg{
			Name:        q.Name,
			Description: q.Description,
			IsActive:    q.IsActive,
		}
}

func (q *CreateShipmentPriceListCommand) SetCreateShipmentPriceListArg(args *CreateShipmentPriceListArg) {
	q.Name = args.Name
	q.Description = args.Description
	q.IsActive = args.IsActive
}

func (q *DeleteShipmentPriceListCommand) GetArgs(ctx context.Context) (_ context.Context, ID dot.ID) {
	return ctx,
		q.ID
}

func (q *UpdateShipmentPriceListCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShipmentPriceListArgs) {
	return ctx,
		&UpdateShipmentPriceListArgs{
			ID:          q.ID,
			Name:        q.Name,
			Description: q.Description,
		}
}

func (q *UpdateShipmentPriceListCommand) SetUpdateShipmentPriceListArgs(args *UpdateShipmentPriceListArgs) {
	q.ID = args.ID
	q.Name = args.Name
	q.Description = args.Description
}

func (q *GetActiveShipmentPriceListQuery) GetArgs(ctx context.Context) (_ context.Context, _ *meta.Empty) {
	return ctx,
		&meta.Empty{}
}

func (q *GetActiveShipmentPriceListQuery) SetEmpty(args *meta.Empty) {
}

func (q *GetShipmentPriceListQuery) GetArgs(ctx context.Context) (_ context.Context, ID dot.ID) {
	return ctx,
		q.ID
}

func (q *ListShipmentPriceListQuery) GetArgs(ctx context.Context) (_ context.Context, _ *meta.Empty) {
	return ctx,
		&meta.Empty{}
}

func (q *ListShipmentPriceListQuery) SetEmpty(args *meta.Empty) {
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleActivateShipmentPriceList)
	b.AddHandler(h.HandleCreateShipmentPriceList)
	b.AddHandler(h.HandleDeleteShipmentPriceList)
	b.AddHandler(h.HandleUpdateShipmentPriceList)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetActiveShipmentPriceList)
	b.AddHandler(h.HandleGetShipmentPriceList)
	b.AddHandler(h.HandleListShipmentPriceList)
	return QueryBus{b}
}
