// +build !generator

// Code generated by generator api. DO NOT EDIT.

package shipmentprice

import (
	context "context"

	route_type "etop.vn/api/top/types/etc/route_type"
	status3 "etop.vn/api/top/types/etc/status3"
	capi "etop.vn/capi"
	dot "etop.vn/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateShipmentPriceCommand struct {
	Name                string
	ShipmentPriceListID dot.ID
	ShipmentServiceID   dot.ID
	CustomRegionTypes   []route_type.CustomRegionRouteType
	CustomRegionIDs     []dot.ID
	RegionTypes         []route_type.RegionRouteType
	ProvinceTypes       []route_type.ProvinceRouteType
	UrbanTypes          []route_type.UrbanType
	PriorityPoint       int
	Details             []*PricingDetail

	Result *ShipmentPrice `json:"-"`
}

func (h AggregateHandler) HandleCreateShipmentPrice(ctx context.Context, msg *CreateShipmentPriceCommand) (err error) {
	msg.Result, err = h.inner.CreateShipmentPrice(msg.GetArgs(ctx))
	return err
}

type DeleteShipmentPriceCommand struct {
	ID dot.ID

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleDeleteShipmentPrice(ctx context.Context, msg *DeleteShipmentPriceCommand) (err error) {
	return h.inner.DeleteShipmentPrice(msg.GetArgs(ctx))
}

type UpdateShipmentPriceCommand struct {
	ID                  dot.ID
	Name                string
	ShipmentPriceListID dot.ID
	ShipmentServiceID   dot.ID
	CustomRegionTypes   []route_type.CustomRegionRouteType
	CustomRegionIDs     []dot.ID
	RegionTypes         []route_type.RegionRouteType
	ProvinceTypes       []route_type.ProvinceRouteType
	UrbanTypes          []route_type.UrbanType
	PriorityPoint       int
	Details             []*PricingDetail
	Status              status3.Status

	Result *ShipmentPrice `json:"-"`
}

func (h AggregateHandler) HandleUpdateShipmentPrice(ctx context.Context, msg *UpdateShipmentPriceCommand) (err error) {
	msg.Result, err = h.inner.UpdateShipmentPrice(msg.GetArgs(ctx))
	return err
}

type UpdateShipmentPricesPriorityPointCommand struct {
	ShipmentPrices []*UpdateShipmentPricePriorityPointArgs

	Result int `json:"-"`
}

func (h AggregateHandler) HandleUpdateShipmentPricesPriorityPoint(ctx context.Context, msg *UpdateShipmentPricesPriorityPointCommand) (err error) {
	msg.Result, err = h.inner.UpdateShipmentPricesPriorityPoint(msg.GetArgs(ctx))
	return err
}

type CalculatePriceQuery struct {
	ShipmentPriceListID dot.ID
	FromProvince        string
	FromProvinceCode    string
	FromDistrict        string
	FromDistrictCode    string
	ToProvince          string
	ToProvinceCode      string
	ToDistrict          string
	ToDistrictCode      string
	ShipmentServiceID   dot.ID
	Weight              int

	Result *CalculatePriceResult `json:"-"`
}

func (h QueryServiceHandler) HandleCalculatePrice(ctx context.Context, msg *CalculatePriceQuery) (err error) {
	msg.Result, err = h.inner.CalculatePrice(msg.GetArgs(ctx))
	return err
}

type GetShipmentPriceQuery struct {
	ID dot.ID

	Result *ShipmentPrice `json:"-"`
}

func (h QueryServiceHandler) HandleGetShipmentPrice(ctx context.Context, msg *GetShipmentPriceQuery) (err error) {
	msg.Result, err = h.inner.GetShipmentPrice(msg.GetArgs(ctx))
	return err
}

type ListShipmentPricesQuery struct {
	ShipmentPriceListID dot.ID
	ShipmentServiceID   dot.ID

	Result []*ShipmentPrice `json:"-"`
}

func (h QueryServiceHandler) HandleListShipmentPrices(ctx context.Context, msg *ListShipmentPricesQuery) (err error) {
	msg.Result, err = h.inner.ListShipmentPrices(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateShipmentPriceCommand) command()               {}
func (q *DeleteShipmentPriceCommand) command()               {}
func (q *UpdateShipmentPriceCommand) command()               {}
func (q *UpdateShipmentPricesPriorityPointCommand) command() {}

func (q *CalculatePriceQuery) query()     {}
func (q *GetShipmentPriceQuery) query()   {}
func (q *ListShipmentPricesQuery) query() {}

// implement conversion

func (q *CreateShipmentPriceCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateShipmentPriceArgs) {
	return ctx,
		&CreateShipmentPriceArgs{
			Name:                q.Name,
			ShipmentPriceListID: q.ShipmentPriceListID,
			ShipmentServiceID:   q.ShipmentServiceID,
			CustomRegionTypes:   q.CustomRegionTypes,
			CustomRegionIDs:     q.CustomRegionIDs,
			RegionTypes:         q.RegionTypes,
			ProvinceTypes:       q.ProvinceTypes,
			UrbanTypes:          q.UrbanTypes,
			PriorityPoint:       q.PriorityPoint,
			Details:             q.Details,
		}
}

func (q *CreateShipmentPriceCommand) SetCreateShipmentPriceArgs(args *CreateShipmentPriceArgs) {
	q.Name = args.Name
	q.ShipmentPriceListID = args.ShipmentPriceListID
	q.ShipmentServiceID = args.ShipmentServiceID
	q.CustomRegionTypes = args.CustomRegionTypes
	q.CustomRegionIDs = args.CustomRegionIDs
	q.RegionTypes = args.RegionTypes
	q.ProvinceTypes = args.ProvinceTypes
	q.UrbanTypes = args.UrbanTypes
	q.PriorityPoint = args.PriorityPoint
	q.Details = args.Details
}

func (q *DeleteShipmentPriceCommand) GetArgs(ctx context.Context) (_ context.Context, ID dot.ID) {
	return ctx,
		q.ID
}

func (q *UpdateShipmentPriceCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShipmentPriceArgs) {
	return ctx,
		&UpdateShipmentPriceArgs{
			ID:                  q.ID,
			Name:                q.Name,
			ShipmentPriceListID: q.ShipmentPriceListID,
			ShipmentServiceID:   q.ShipmentServiceID,
			CustomRegionTypes:   q.CustomRegionTypes,
			CustomRegionIDs:     q.CustomRegionIDs,
			RegionTypes:         q.RegionTypes,
			ProvinceTypes:       q.ProvinceTypes,
			UrbanTypes:          q.UrbanTypes,
			PriorityPoint:       q.PriorityPoint,
			Details:             q.Details,
			Status:              q.Status,
		}
}

func (q *UpdateShipmentPriceCommand) SetUpdateShipmentPriceArgs(args *UpdateShipmentPriceArgs) {
	q.ID = args.ID
	q.Name = args.Name
	q.ShipmentPriceListID = args.ShipmentPriceListID
	q.ShipmentServiceID = args.ShipmentServiceID
	q.CustomRegionTypes = args.CustomRegionTypes
	q.CustomRegionIDs = args.CustomRegionIDs
	q.RegionTypes = args.RegionTypes
	q.ProvinceTypes = args.ProvinceTypes
	q.UrbanTypes = args.UrbanTypes
	q.PriorityPoint = args.PriorityPoint
	q.Details = args.Details
	q.Status = args.Status
}

func (q *UpdateShipmentPricesPriorityPointCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShipmentPricesPriorityPointArgs) {
	return ctx,
		&UpdateShipmentPricesPriorityPointArgs{
			ShipmentPrices: q.ShipmentPrices,
		}
}

func (q *UpdateShipmentPricesPriorityPointCommand) SetUpdateShipmentPricesPriorityPointArgs(args *UpdateShipmentPricesPriorityPointArgs) {
	q.ShipmentPrices = args.ShipmentPrices
}

func (q *CalculatePriceQuery) GetArgs(ctx context.Context) (_ context.Context, _ *CalculatePriceArgs) {
	return ctx,
		&CalculatePriceArgs{
			ShipmentPriceListID: q.ShipmentPriceListID,
			FromProvince:        q.FromProvince,
			FromProvinceCode:    q.FromProvinceCode,
			FromDistrict:        q.FromDistrict,
			FromDistrictCode:    q.FromDistrictCode,
			ToProvince:          q.ToProvince,
			ToProvinceCode:      q.ToProvinceCode,
			ToDistrict:          q.ToDistrict,
			ToDistrictCode:      q.ToDistrictCode,
			ShipmentServiceID:   q.ShipmentServiceID,
			Weight:              q.Weight,
		}
}

func (q *CalculatePriceQuery) SetCalculatePriceArgs(args *CalculatePriceArgs) {
	q.ShipmentPriceListID = args.ShipmentPriceListID
	q.FromProvince = args.FromProvince
	q.FromProvinceCode = args.FromProvinceCode
	q.FromDistrict = args.FromDistrict
	q.FromDistrictCode = args.FromDistrictCode
	q.ToProvince = args.ToProvince
	q.ToProvinceCode = args.ToProvinceCode
	q.ToDistrict = args.ToDistrict
	q.ToDistrictCode = args.ToDistrictCode
	q.ShipmentServiceID = args.ShipmentServiceID
	q.Weight = args.Weight
}

func (q *GetShipmentPriceQuery) GetArgs(ctx context.Context) (_ context.Context, ID dot.ID) {
	return ctx,
		q.ID
}

func (q *ListShipmentPricesQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListShipmentPricesArgs) {
	return ctx,
		&ListShipmentPricesArgs{
			ShipmentPriceListID: q.ShipmentPriceListID,
			ShipmentServiceID:   q.ShipmentServiceID,
		}
}

func (q *ListShipmentPricesQuery) SetListShipmentPricesArgs(args *ListShipmentPricesArgs) {
	q.ShipmentPriceListID = args.ShipmentPriceListID
	q.ShipmentServiceID = args.ShipmentServiceID
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateShipmentPrice)
	b.AddHandler(h.HandleDeleteShipmentPrice)
	b.AddHandler(h.HandleUpdateShipmentPrice)
	b.AddHandler(h.HandleUpdateShipmentPricesPriorityPoint)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleCalculatePrice)
	b.AddHandler(h.HandleGetShipmentPrice)
	b.AddHandler(h.HandleListShipmentPrices)
	return QueryBus{b}
}
