// +build !generator

// Code generated by generator api. DO NOT EDIT.

package catalog

import (
	context "context"

	catalogtypes "etop.vn/api/main/catalog/types"
	meta "etop.vn/api/meta"
	shopping "etop.vn/api/shopping"
	product_type "etop.vn/api/top/types/etc/product_type"
	capi "etop.vn/capi"
	dot "etop.vn/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type AddShopProductCollectionCommand struct {
	ProductID     dot.ID
	ShopID        dot.ID
	CollectionIDs []dot.ID

	Result int `json:"-"`
}

func (h AggregateHandler) HandleAddShopProductCollection(ctx context.Context, msg *AddShopProductCollectionCommand) (err error) {
	msg.Result, err = h.inner.AddShopProductCollection(msg.GetArgs(ctx))
	return err
}

type CreateBrandCommand struct {
	ShopID      dot.ID
	BrandName   string
	Description string

	Result *ShopBrand `json:"-"`
}

func (h AggregateHandler) HandleCreateBrand(ctx context.Context, msg *CreateBrandCommand) (err error) {
	msg.Result, err = h.inner.CreateBrand(msg.GetArgs(ctx))
	return err
}

type CreateShopCategoryCommand struct {
	ID       dot.ID
	ShopID   dot.ID
	ParentID dot.ID
	Name     string
	Status   int

	Result *ShopCategory `json:"-"`
}

func (h AggregateHandler) HandleCreateShopCategory(ctx context.Context, msg *CreateShopCategoryCommand) (err error) {
	msg.Result, err = h.inner.CreateShopCategory(msg.GetArgs(ctx))
	return err
}

type CreateShopCollectionCommand struct {
	ID          dot.ID
	ShopID      dot.ID
	Name        string
	Description string
	DescHTML    string
	ShortDesc   string

	Result *ShopCollection `json:"-"`
}

func (h AggregateHandler) HandleCreateShopCollection(ctx context.Context, msg *CreateShopCollectionCommand) (err error) {
	msg.Result, err = h.inner.CreateShopCollection(msg.GetArgs(ctx))
	return err
}

type CreateShopProductCommand struct {
	ExternalID      string
	ExternalCode    string
	PartnerID       dot.ID
	ShopID          dot.ID
	Code            string
	Name            string
	Unit            string
	ImageURLs       []string
	Note            string
	DescriptionInfo DescriptionInfo
	PriceInfo       PriceInfo
	ProductType     product_type.ProductType
	MetaFields      []*MetaField
	BrandID         dot.ID

	Result *ShopProductWithVariants `json:"-"`
}

func (h AggregateHandler) HandleCreateShopProduct(ctx context.Context, msg *CreateShopProductCommand) (err error) {
	msg.Result, err = h.inner.CreateShopProduct(msg.GetArgs(ctx))
	return err
}

type CreateShopVariantCommand struct {
	ExternalID      string
	ExternalCode    string
	PartnerID       dot.ID
	ShopID          dot.ID
	ProductID       dot.ID
	Code            string
	Name            string
	ImageURLs       []string
	Note            string
	Attributes      catalogtypes.Attributes
	DescriptionInfo DescriptionInfo
	PriceInfo       PriceInfo

	Result *ShopVariant `json:"-"`
}

func (h AggregateHandler) HandleCreateShopVariant(ctx context.Context, msg *CreateShopVariantCommand) (err error) {
	msg.Result, err = h.inner.CreateShopVariant(msg.GetArgs(ctx))
	return err
}

type CreateVariantSupplierCommand struct {
	ShopID     dot.ID
	SupplierID dot.ID
	VariantID  dot.ID

	Result *ShopVariantSupplier `json:"-"`
}

func (h AggregateHandler) HandleCreateVariantSupplier(ctx context.Context, msg *CreateVariantSupplierCommand) (err error) {
	msg.Result, err = h.inner.CreateVariantSupplier(msg.GetArgs(ctx))
	return err
}

type CreateVariantsSupplierCommand struct {
	ShopID     dot.ID
	SupplierID dot.ID
	VariantIDs []dot.ID

	Result int `json:"-"`
}

func (h AggregateHandler) HandleCreateVariantsSupplier(ctx context.Context, msg *CreateVariantsSupplierCommand) (err error) {
	msg.Result, err = h.inner.CreateVariantsSupplier(msg.GetArgs(ctx))
	return err
}

type DeleteShopBrandCommand struct {
	Ids    []dot.ID
	ShopId dot.ID

	Result int `json:"-"`
}

func (h AggregateHandler) HandleDeleteShopBrand(ctx context.Context, msg *DeleteShopBrandCommand) (err error) {
	msg.Result, err = h.inner.DeleteShopBrand(msg.GetArgs(ctx))
	return err
}

type DeleteShopCategoryCommand struct {
	ID     dot.ID
	ShopID dot.ID

	Result int `json:"-"`
}

func (h AggregateHandler) HandleDeleteShopCategory(ctx context.Context, msg *DeleteShopCategoryCommand) (err error) {
	msg.Result, err = h.inner.DeleteShopCategory(msg.GetArgs(ctx))
	return err
}

type DeleteShopCollectionCommand struct {
	Id     dot.ID
	ShopId dot.ID

	Result int `json:"-"`
}

func (h AggregateHandler) HandleDeleteShopCollection(ctx context.Context, msg *DeleteShopCollectionCommand) (err error) {
	msg.Result, err = h.inner.DeleteShopCollection(msg.GetArgs(ctx))
	return err
}

type DeleteShopProductsCommand struct {
	IDs    []dot.ID
	ShopID dot.ID
	Paging meta.Paging

	Result int `json:"-"`
}

func (h AggregateHandler) HandleDeleteShopProducts(ctx context.Context, msg *DeleteShopProductsCommand) (err error) {
	msg.Result, err = h.inner.DeleteShopProducts(msg.GetArgs(ctx))
	return err
}

type DeleteShopVariantsCommand struct {
	IDs    []dot.ID
	ShopID dot.ID
	Paging meta.Paging

	Result int `json:"-"`
}

func (h AggregateHandler) HandleDeleteShopVariants(ctx context.Context, msg *DeleteShopVariantsCommand) (err error) {
	msg.Result, err = h.inner.DeleteShopVariants(msg.GetArgs(ctx))
	return err
}

type DeleteVariantSupplierCommand struct {
	VariantID  dot.ID
	SupplierID dot.ID
	ShopID     dot.ID

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleDeleteVariantSupplier(ctx context.Context, msg *DeleteVariantSupplierCommand) (err error) {
	return h.inner.DeleteVariantSupplier(msg.GetArgs(ctx))
}

type RemoveShopProductCategoryCommand struct {
	ProductID dot.ID
	ShopID    dot.ID

	Result *ShopProductWithVariants `json:"-"`
}

func (h AggregateHandler) HandleRemoveShopProductCategory(ctx context.Context, msg *RemoveShopProductCategoryCommand) (err error) {
	msg.Result, err = h.inner.RemoveShopProductCategory(msg.GetArgs(ctx))
	return err
}

type RemoveShopProductCollectionCommand struct {
	ProductID     dot.ID
	ShopID        dot.ID
	CollectionIDs []dot.ID

	Result int `json:"-"`
}

func (h AggregateHandler) HandleRemoveShopProductCollection(ctx context.Context, msg *RemoveShopProductCollectionCommand) (err error) {
	msg.Result, err = h.inner.RemoveShopProductCollection(msg.GetArgs(ctx))
	return err
}

type UpdateBrandInfoCommand struct {
	ShopID      dot.ID
	ID          dot.ID
	BrandName   string
	Description string

	Result *ShopBrand `json:"-"`
}

func (h AggregateHandler) HandleUpdateBrandInfo(ctx context.Context, msg *UpdateBrandInfoCommand) (err error) {
	msg.Result, err = h.inner.UpdateBrandInfo(msg.GetArgs(ctx))
	return err
}

type UpdateShopCategoryCommand struct {
	ID       dot.ID
	Name     dot.NullString
	ShopID   dot.ID
	ParentID dot.ID

	Result *ShopCategory `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopCategory(ctx context.Context, msg *UpdateShopCategoryCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopCategory(msg.GetArgs(ctx))
	return err
}

type UpdateShopCollectionCommand struct {
	ID          dot.ID
	ShopID      dot.ID
	Name        dot.NullString
	Description dot.NullString
	DescHTML    dot.NullString
	ShortDesc   dot.NullString

	Result *ShopCollection `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopCollection(ctx context.Context, msg *UpdateShopCollectionCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopCollection(msg.GetArgs(ctx))
	return err
}

type UpdateShopProductCategoryCommand struct {
	CategoryID dot.ID
	ShopID     dot.ID
	ProductID  dot.ID

	Result *ShopProductWithVariants `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopProductCategory(ctx context.Context, msg *UpdateShopProductCategoryCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopProductCategory(msg.GetArgs(ctx))
	return err
}

type UpdateShopProductImagesCommand struct {
	ID      dot.ID
	ShopID  dot.ID
	Updates []*meta.UpdateSet

	Result *ShopProductWithVariants `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopProductImages(ctx context.Context, msg *UpdateShopProductImagesCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopProductImages(msg.GetArgs(ctx))
	return err
}

type UpdateShopProductInfoCommand struct {
	ShopID      dot.ID
	ProductID   dot.ID
	Code        dot.NullString
	Name        dot.NullString
	Unit        dot.NullString
	Note        dot.NullString
	ShortDesc   dot.NullString
	Description dot.NullString
	DescHTML    dot.NullString
	CostPrice   dot.NullInt
	ListPrice   dot.NullInt
	RetailPrice dot.NullInt
	BrandID     dot.NullID
	ProductType product_type.NullProductType
	CategoryID  dot.NullID

	Result *ShopProductWithVariants `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopProductInfo(ctx context.Context, msg *UpdateShopProductInfoCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopProductInfo(msg.GetArgs(ctx))
	return err
}

type UpdateShopProductMetaFieldsCommand struct {
	ID         dot.ID
	ShopID     dot.ID
	MetaFields []*MetaField

	Result *ShopProductWithVariants `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopProductMetaFields(ctx context.Context, msg *UpdateShopProductMetaFieldsCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopProductMetaFields(msg.GetArgs(ctx))
	return err
}

type UpdateShopProductStatusCommand struct {
	IDs    []dot.ID
	ShopID dot.ID
	Status int16

	Result int `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopProductStatus(ctx context.Context, msg *UpdateShopProductStatusCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopProductStatus(msg.GetArgs(ctx))
	return err
}

type UpdateShopVariantAttributesCommand struct {
	ShopID     dot.ID
	VariantID  dot.ID
	Attributes catalogtypes.Attributes

	Result *ShopVariant `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopVariantAttributes(ctx context.Context, msg *UpdateShopVariantAttributesCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopVariantAttributes(msg.GetArgs(ctx))
	return err
}

type UpdateShopVariantImagesCommand struct {
	ID      dot.ID
	ShopID  dot.ID
	Updates []*meta.UpdateSet

	Result *ShopVariant `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopVariantImages(ctx context.Context, msg *UpdateShopVariantImagesCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopVariantImages(msg.GetArgs(ctx))
	return err
}

type UpdateShopVariantInfoCommand struct {
	ShopID       dot.ID
	VariantID    dot.ID
	Code         dot.NullString
	Name         dot.NullString
	Note         dot.NullString
	ShortDesc    dot.NullString
	Descripttion dot.NullString
	DescHTML     dot.NullString
	CostPrice    dot.NullInt
	ListPrice    dot.NullInt
	RetailPrice  dot.NullInt

	Result *ShopVariant `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopVariantInfo(ctx context.Context, msg *UpdateShopVariantInfoCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopVariantInfo(msg.GetArgs(ctx))
	return err
}

type UpdateShopVariantStatusCommand struct {
	IDs    []dot.ID
	ShopID dot.ID
	Status int16

	Result int `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopVariantStatus(ctx context.Context, msg *UpdateShopVariantStatusCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopVariantStatus(msg.GetArgs(ctx))
	return err
}

type GetBrandByIDQuery struct {
	Id     dot.ID
	ShopID dot.ID

	Result *ShopBrand `json:"-"`
}

func (h QueryServiceHandler) HandleGetBrandByID(ctx context.Context, msg *GetBrandByIDQuery) (err error) {
	msg.Result, err = h.inner.GetBrandByID(msg.GetArgs(ctx))
	return err
}

type GetBrandsByIDsQuery struct {
	Ids    []dot.ID
	ShopID dot.ID

	Result []*ShopBrand `json:"-"`
}

func (h QueryServiceHandler) HandleGetBrandsByIDs(ctx context.Context, msg *GetBrandsByIDsQuery) (err error) {
	msg.Result, err = h.inner.GetBrandsByIDs(msg.GetArgs(ctx))
	return err
}

type GetShopCategoryQuery struct {
	ID     dot.ID
	ShopID dot.ID

	Result *ShopCategory `json:"-"`
}

func (h QueryServiceHandler) HandleGetShopCategory(ctx context.Context, msg *GetShopCategoryQuery) (err error) {
	msg.Result, err = h.inner.GetShopCategory(msg.GetArgs(ctx))
	return err
}

type GetShopCollectionQuery struct {
	ID     dot.ID
	ShopID dot.ID

	Result *ShopCollection `json:"-"`
}

func (h QueryServiceHandler) HandleGetShopCollection(ctx context.Context, msg *GetShopCollectionQuery) (err error) {
	msg.Result, err = h.inner.GetShopCollection(msg.GetArgs(ctx))
	return err
}

type GetShopProductQuery struct {
	ExternalID string
	Code       string
	ProductID  dot.ID
	ShopID     dot.ID

	Result *ShopProduct `json:"-"`
}

func (h QueryServiceHandler) HandleGetShopProduct(ctx context.Context, msg *GetShopProductQuery) (err error) {
	msg.Result, err = h.inner.GetShopProduct(msg.GetArgs(ctx))
	return err
}

type GetShopProductByIDQuery struct {
	ProductID dot.ID
	ShopID    dot.ID

	Result *ShopProduct `json:"-"`
}

func (h QueryServiceHandler) HandleGetShopProductByID(ctx context.Context, msg *GetShopProductByIDQuery) (err error) {
	msg.Result, err = h.inner.GetShopProductByID(msg.GetArgs(ctx))
	return err
}

type GetShopProductWithVariantsByIDQuery struct {
	ProductID dot.ID
	ShopID    dot.ID

	Result *ShopProductWithVariants `json:"-"`
}

func (h QueryServiceHandler) HandleGetShopProductWithVariantsByID(ctx context.Context, msg *GetShopProductWithVariantsByIDQuery) (err error) {
	msg.Result, err = h.inner.GetShopProductWithVariantsByID(msg.GetArgs(ctx))
	return err
}

type GetShopVariantQuery struct {
	ExternalID string
	VariantID  dot.ID
	ShopID     dot.ID
	Code       string

	Result *ShopVariant `json:"-"`
}

func (h QueryServiceHandler) HandleGetShopVariant(ctx context.Context, msg *GetShopVariantQuery) (err error) {
	msg.Result, err = h.inner.GetShopVariant(msg.GetArgs(ctx))
	return err
}

type GetShopVariantWithProductByIDQuery struct {
	VariantID dot.ID
	ShopID    dot.ID

	Result *ShopVariantWithProduct `json:"-"`
}

func (h QueryServiceHandler) HandleGetShopVariantWithProductByID(ctx context.Context, msg *GetShopVariantWithProductByIDQuery) (err error) {
	msg.Result, err = h.inner.GetShopVariantWithProductByID(msg.GetArgs(ctx))
	return err
}

type GetSupplierIDsByVariantIDQuery struct {
	VariantID dot.ID
	ShopID    dot.ID

	Result []dot.ID `json:"-"`
}

func (h QueryServiceHandler) HandleGetSupplierIDsByVariantID(ctx context.Context, msg *GetSupplierIDsByVariantIDQuery) (err error) {
	msg.Result, err = h.inner.GetSupplierIDsByVariantID(msg.GetArgs(ctx))
	return err
}

type GetVariantsBySupplierIDQuery struct {
	SupplierID dot.ID
	ShopID     dot.ID

	Result *ShopVariantsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleGetVariantsBySupplierID(ctx context.Context, msg *GetVariantsBySupplierIDQuery) (err error) {
	msg.Result, err = h.inner.GetVariantsBySupplierID(msg.GetArgs(ctx))
	return err
}

type ListBrandsQuery struct {
	Paging meta.Paging
	ShopId dot.ID

	Result *ListBrandsResult `json:"-"`
}

func (h QueryServiceHandler) HandleListBrands(ctx context.Context, msg *ListBrandsQuery) (err error) {
	msg.Result, err = h.inner.ListBrands(msg.GetArgs(ctx))
	return err
}

type ListShopCategoriesQuery struct {
	ShopID  dot.ID
	Paging  meta.Paging
	Filters meta.Filters

	Result *ShopCategoriesResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopCategories(ctx context.Context, msg *ListShopCategoriesQuery) (err error) {
	msg.Result, err = h.inner.ListShopCategories(msg.GetArgs(ctx))
	return err
}

type ListShopCollectionsQuery struct {
	ShopID  dot.ID
	Paging  meta.Paging
	Filters meta.Filters

	Result *ShopCollectionsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopCollections(ctx context.Context, msg *ListShopCollectionsQuery) (err error) {
	msg.Result, err = h.inner.ListShopCollections(msg.GetArgs(ctx))
	return err
}

type ListShopCollectionsByIDsQuery struct {
	IDs            []dot.ID
	ShopID         dot.ID
	Paging         meta.Paging
	IncludeDeleted bool

	Result *ShopCollectionsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopCollectionsByIDs(ctx context.Context, msg *ListShopCollectionsByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListShopCollectionsByIDs(msg.GetArgs(ctx))
	return err
}

type ListShopCollectionsByProductIDQuery struct {
	ProductID dot.ID
	ShopID    dot.ID

	Result []*ShopCollection `json:"-"`
}

func (h QueryServiceHandler) HandleListShopCollectionsByProductID(ctx context.Context, msg *ListShopCollectionsByProductIDQuery) (err error) {
	msg.Result, err = h.inner.ListShopCollectionsByProductID(msg.GetArgs(ctx))
	return err
}

type ListShopProductsQuery struct {
	ShopID  dot.ID
	Paging  meta.Paging
	Filters meta.Filters

	Result *ShopProductsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopProducts(ctx context.Context, msg *ListShopProductsQuery) (err error) {
	msg.Result, err = h.inner.ListShopProducts(msg.GetArgs(ctx))
	return err
}

type ListShopProductsByIDsQuery struct {
	IDs    []dot.ID
	ShopID dot.ID
	Paging meta.Paging

	Result *ShopProductsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopProductsByIDs(ctx context.Context, msg *ListShopProductsByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListShopProductsByIDs(msg.GetArgs(ctx))
	return err
}

type ListShopProductsCollectionsQuery struct {
	ProductIds     []dot.ID
	CollectionIDs  []dot.ID
	ShopID         dot.ID
	Paging         meta.Paging
	IncludeDeleted bool

	Result *ShopProductsCollectionResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopProductsCollections(ctx context.Context, msg *ListShopProductsCollectionsQuery) (err error) {
	msg.Result, err = h.inner.ListShopProductsCollections(msg.GetArgs(ctx))
	return err
}

type ListShopProductsWithVariantsQuery struct {
	ShopID  dot.ID
	Paging  meta.Paging
	Filters meta.Filters

	Result *ShopProductsWithVariantsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopProductsWithVariants(ctx context.Context, msg *ListShopProductsWithVariantsQuery) (err error) {
	msg.Result, err = h.inner.ListShopProductsWithVariants(msg.GetArgs(ctx))
	return err
}

type ListShopProductsWithVariantsByIDsQuery struct {
	IDs    []dot.ID
	ShopID dot.ID
	Paging meta.Paging

	Result *ShopProductsWithVariantsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopProductsWithVariantsByIDs(ctx context.Context, msg *ListShopProductsWithVariantsByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListShopProductsWithVariantsByIDs(msg.GetArgs(ctx))
	return err
}

type ListShopVariantsQuery struct {
	ShopID  dot.ID
	Paging  meta.Paging
	Filters meta.Filters

	Result *ShopVariantsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopVariants(ctx context.Context, msg *ListShopVariantsQuery) (err error) {
	msg.Result, err = h.inner.ListShopVariants(msg.GetArgs(ctx))
	return err
}

type ListShopVariantsByIDsQuery struct {
	IDs    []dot.ID
	ShopID dot.ID
	Paging meta.Paging

	Result *ShopVariantsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopVariantsByIDs(ctx context.Context, msg *ListShopVariantsByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListShopVariantsByIDs(msg.GetArgs(ctx))
	return err
}

type ListShopVariantsWithProductByIDsQuery struct {
	IDs    []dot.ID
	ShopID dot.ID
	Paging meta.Paging

	Result *ShopVariantsWithProductResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopVariantsWithProductByIDs(ctx context.Context, msg *ListShopVariantsWithProductByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListShopVariantsWithProductByIDs(msg.GetArgs(ctx))
	return err
}

type ValidateVariantIDsQuery struct {
	ShopId         dot.ID
	ShopVariantIds []dot.ID

	Result struct {
	} `json:"-"`
}

func (h QueryServiceHandler) HandleValidateVariantIDs(ctx context.Context, msg *ValidateVariantIDsQuery) (err error) {
	return h.inner.ValidateVariantIDs(msg.GetArgs(ctx))
}

// implement interfaces

func (q *AddShopProductCollectionCommand) command()    {}
func (q *CreateBrandCommand) command()                 {}
func (q *CreateShopCategoryCommand) command()          {}
func (q *CreateShopCollectionCommand) command()        {}
func (q *CreateShopProductCommand) command()           {}
func (q *CreateShopVariantCommand) command()           {}
func (q *CreateVariantSupplierCommand) command()       {}
func (q *CreateVariantsSupplierCommand) command()      {}
func (q *DeleteShopBrandCommand) command()             {}
func (q *DeleteShopCategoryCommand) command()          {}
func (q *DeleteShopCollectionCommand) command()        {}
func (q *DeleteShopProductsCommand) command()          {}
func (q *DeleteShopVariantsCommand) command()          {}
func (q *DeleteVariantSupplierCommand) command()       {}
func (q *RemoveShopProductCategoryCommand) command()   {}
func (q *RemoveShopProductCollectionCommand) command() {}
func (q *UpdateBrandInfoCommand) command()             {}
func (q *UpdateShopCategoryCommand) command()          {}
func (q *UpdateShopCollectionCommand) command()        {}
func (q *UpdateShopProductCategoryCommand) command()   {}
func (q *UpdateShopProductImagesCommand) command()     {}
func (q *UpdateShopProductInfoCommand) command()       {}
func (q *UpdateShopProductMetaFieldsCommand) command() {}
func (q *UpdateShopProductStatusCommand) command()     {}
func (q *UpdateShopVariantAttributesCommand) command() {}
func (q *UpdateShopVariantImagesCommand) command()     {}
func (q *UpdateShopVariantInfoCommand) command()       {}
func (q *UpdateShopVariantStatusCommand) command()     {}

func (q *GetBrandByIDQuery) query()                      {}
func (q *GetBrandsByIDsQuery) query()                    {}
func (q *GetShopCategoryQuery) query()                   {}
func (q *GetShopCollectionQuery) query()                 {}
func (q *GetShopProductQuery) query()                    {}
func (q *GetShopProductByIDQuery) query()                {}
func (q *GetShopProductWithVariantsByIDQuery) query()    {}
func (q *GetShopVariantQuery) query()                    {}
func (q *GetShopVariantWithProductByIDQuery) query()     {}
func (q *GetSupplierIDsByVariantIDQuery) query()         {}
func (q *GetVariantsBySupplierIDQuery) query()           {}
func (q *ListBrandsQuery) query()                        {}
func (q *ListShopCategoriesQuery) query()                {}
func (q *ListShopCollectionsQuery) query()               {}
func (q *ListShopCollectionsByIDsQuery) query()          {}
func (q *ListShopCollectionsByProductIDQuery) query()    {}
func (q *ListShopProductsQuery) query()                  {}
func (q *ListShopProductsByIDsQuery) query()             {}
func (q *ListShopProductsCollectionsQuery) query()       {}
func (q *ListShopProductsWithVariantsQuery) query()      {}
func (q *ListShopProductsWithVariantsByIDsQuery) query() {}
func (q *ListShopVariantsQuery) query()                  {}
func (q *ListShopVariantsByIDsQuery) query()             {}
func (q *ListShopVariantsWithProductByIDsQuery) query()  {}
func (q *ValidateVariantIDsQuery) query()                {}

// implement conversion

func (q *AddShopProductCollectionCommand) GetArgs(ctx context.Context) (_ context.Context, _ *AddShopProductCollectionArgs) {
	return ctx,
		&AddShopProductCollectionArgs{
			ProductID:     q.ProductID,
			ShopID:        q.ShopID,
			CollectionIDs: q.CollectionIDs,
		}
}

func (q *AddShopProductCollectionCommand) SetAddShopProductCollectionArgs(args *AddShopProductCollectionArgs) {
	q.ProductID = args.ProductID
	q.ShopID = args.ShopID
	q.CollectionIDs = args.CollectionIDs
}

func (q *CreateBrandCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateBrandArgs) {
	return ctx,
		&CreateBrandArgs{
			ShopID:      q.ShopID,
			BrandName:   q.BrandName,
			Description: q.Description,
		}
}

func (q *CreateBrandCommand) SetCreateBrandArgs(args *CreateBrandArgs) {
	q.ShopID = args.ShopID
	q.BrandName = args.BrandName
	q.Description = args.Description
}

func (q *CreateShopCategoryCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateShopCategoryArgs) {
	return ctx,
		&CreateShopCategoryArgs{
			ID:       q.ID,
			ShopID:   q.ShopID,
			ParentID: q.ParentID,
			Name:     q.Name,
			Status:   q.Status,
		}
}

func (q *CreateShopCategoryCommand) SetCreateShopCategoryArgs(args *CreateShopCategoryArgs) {
	q.ID = args.ID
	q.ShopID = args.ShopID
	q.ParentID = args.ParentID
	q.Name = args.Name
	q.Status = args.Status
}

func (q *CreateShopCollectionCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateShopCollectionArgs) {
	return ctx,
		&CreateShopCollectionArgs{
			ID:          q.ID,
			ShopID:      q.ShopID,
			Name:        q.Name,
			Description: q.Description,
			DescHTML:    q.DescHTML,
			ShortDesc:   q.ShortDesc,
		}
}

func (q *CreateShopCollectionCommand) SetCreateShopCollectionArgs(args *CreateShopCollectionArgs) {
	q.ID = args.ID
	q.ShopID = args.ShopID
	q.Name = args.Name
	q.Description = args.Description
	q.DescHTML = args.DescHTML
	q.ShortDesc = args.ShortDesc
}

func (q *CreateShopProductCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateShopProductArgs) {
	return ctx,
		&CreateShopProductArgs{
			ExternalID:      q.ExternalID,
			ExternalCode:    q.ExternalCode,
			PartnerID:       q.PartnerID,
			ShopID:          q.ShopID,
			Code:            q.Code,
			Name:            q.Name,
			Unit:            q.Unit,
			ImageURLs:       q.ImageURLs,
			Note:            q.Note,
			DescriptionInfo: q.DescriptionInfo,
			PriceInfo:       q.PriceInfo,
			ProductType:     q.ProductType,
			MetaFields:      q.MetaFields,
			BrandID:         q.BrandID,
		}
}

func (q *CreateShopProductCommand) SetCreateShopProductArgs(args *CreateShopProductArgs) {
	q.ExternalID = args.ExternalID
	q.ExternalCode = args.ExternalCode
	q.PartnerID = args.PartnerID
	q.ShopID = args.ShopID
	q.Code = args.Code
	q.Name = args.Name
	q.Unit = args.Unit
	q.ImageURLs = args.ImageURLs
	q.Note = args.Note
	q.DescriptionInfo = args.DescriptionInfo
	q.PriceInfo = args.PriceInfo
	q.ProductType = args.ProductType
	q.MetaFields = args.MetaFields
	q.BrandID = args.BrandID
}

func (q *CreateShopVariantCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateShopVariantArgs) {
	return ctx,
		&CreateShopVariantArgs{
			ExternalID:      q.ExternalID,
			ExternalCode:    q.ExternalCode,
			PartnerID:       q.PartnerID,
			ShopID:          q.ShopID,
			ProductID:       q.ProductID,
			Code:            q.Code,
			Name:            q.Name,
			ImageURLs:       q.ImageURLs,
			Note:            q.Note,
			Attributes:      q.Attributes,
			DescriptionInfo: q.DescriptionInfo,
			PriceInfo:       q.PriceInfo,
		}
}

func (q *CreateShopVariantCommand) SetCreateShopVariantArgs(args *CreateShopVariantArgs) {
	q.ExternalID = args.ExternalID
	q.ExternalCode = args.ExternalCode
	q.PartnerID = args.PartnerID
	q.ShopID = args.ShopID
	q.ProductID = args.ProductID
	q.Code = args.Code
	q.Name = args.Name
	q.ImageURLs = args.ImageURLs
	q.Note = args.Note
	q.Attributes = args.Attributes
	q.DescriptionInfo = args.DescriptionInfo
	q.PriceInfo = args.PriceInfo
}

func (q *CreateVariantSupplierCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateVariantSupplier) {
	return ctx,
		&CreateVariantSupplier{
			ShopID:     q.ShopID,
			SupplierID: q.SupplierID,
			VariantID:  q.VariantID,
		}
}

func (q *CreateVariantSupplierCommand) SetCreateVariantSupplier(args *CreateVariantSupplier) {
	q.ShopID = args.ShopID
	q.SupplierID = args.SupplierID
	q.VariantID = args.VariantID
}

func (q *CreateVariantsSupplierCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateVariantsSupplier) {
	return ctx,
		&CreateVariantsSupplier{
			ShopID:     q.ShopID,
			SupplierID: q.SupplierID,
			VariantIDs: q.VariantIDs,
		}
}

func (q *CreateVariantsSupplierCommand) SetCreateVariantsSupplier(args *CreateVariantsSupplier) {
	q.ShopID = args.ShopID
	q.SupplierID = args.SupplierID
	q.VariantIDs = args.VariantIDs
}

func (q *DeleteShopBrandCommand) GetArgs(ctx context.Context) (_ context.Context, ids []dot.ID, shopId dot.ID) {
	return ctx,
		q.Ids,
		q.ShopId
}

func (q *DeleteShopCategoryCommand) GetArgs(ctx context.Context) (_ context.Context, _ *DeleteShopCategoryArgs) {
	return ctx,
		&DeleteShopCategoryArgs{
			ID:     q.ID,
			ShopID: q.ShopID,
		}
}

func (q *DeleteShopCategoryCommand) SetDeleteShopCategoryArgs(args *DeleteShopCategoryArgs) {
	q.ID = args.ID
	q.ShopID = args.ShopID
}

func (q *DeleteShopCollectionCommand) GetArgs(ctx context.Context) (_ context.Context, id dot.ID, shopId dot.ID) {
	return ctx,
		q.Id,
		q.ShopId
}

func (q *DeleteShopProductsCommand) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.IDsQueryShopArgs) {
	return ctx,
		&shopping.IDsQueryShopArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
			Paging: q.Paging,
		}
}

func (q *DeleteShopProductsCommand) SetIDsQueryShopArgs(args *shopping.IDsQueryShopArgs) {
	q.IDs = args.IDs
	q.ShopID = args.ShopID
	q.Paging = args.Paging
}

func (q *DeleteShopVariantsCommand) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.IDsQueryShopArgs) {
	return ctx,
		&shopping.IDsQueryShopArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
			Paging: q.Paging,
		}
}

func (q *DeleteShopVariantsCommand) SetIDsQueryShopArgs(args *shopping.IDsQueryShopArgs) {
	q.IDs = args.IDs
	q.ShopID = args.ShopID
	q.Paging = args.Paging
}

func (q *DeleteVariantSupplierCommand) GetArgs(ctx context.Context) (_ context.Context, variantID dot.ID, supplierID dot.ID, shopID dot.ID) {
	return ctx,
		q.VariantID,
		q.SupplierID,
		q.ShopID
}

func (q *RemoveShopProductCategoryCommand) GetArgs(ctx context.Context) (_ context.Context, _ *RemoveShopProductCategoryArgs) {
	return ctx,
		&RemoveShopProductCategoryArgs{
			ProductID: q.ProductID,
			ShopID:    q.ShopID,
		}
}

func (q *RemoveShopProductCategoryCommand) SetRemoveShopProductCategoryArgs(args *RemoveShopProductCategoryArgs) {
	q.ProductID = args.ProductID
	q.ShopID = args.ShopID
}

func (q *RemoveShopProductCollectionCommand) GetArgs(ctx context.Context) (_ context.Context, _ *RemoveShopProductColelctionArgs) {
	return ctx,
		&RemoveShopProductColelctionArgs{
			ProductID:     q.ProductID,
			ShopID:        q.ShopID,
			CollectionIDs: q.CollectionIDs,
		}
}

func (q *RemoveShopProductCollectionCommand) SetRemoveShopProductColelctionArgs(args *RemoveShopProductColelctionArgs) {
	q.ProductID = args.ProductID
	q.ShopID = args.ShopID
	q.CollectionIDs = args.CollectionIDs
}

func (q *UpdateBrandInfoCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateBrandArgs) {
	return ctx,
		&UpdateBrandArgs{
			ShopID:      q.ShopID,
			ID:          q.ID,
			BrandName:   q.BrandName,
			Description: q.Description,
		}
}

func (q *UpdateBrandInfoCommand) SetUpdateBrandArgs(args *UpdateBrandArgs) {
	q.ShopID = args.ShopID
	q.ID = args.ID
	q.BrandName = args.BrandName
	q.Description = args.Description
}

func (q *UpdateShopCategoryCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShopCategoryArgs) {
	return ctx,
		&UpdateShopCategoryArgs{
			ID:       q.ID,
			Name:     q.Name,
			ShopID:   q.ShopID,
			ParentID: q.ParentID,
		}
}

func (q *UpdateShopCategoryCommand) SetUpdateShopCategoryArgs(args *UpdateShopCategoryArgs) {
	q.ID = args.ID
	q.Name = args.Name
	q.ShopID = args.ShopID
	q.ParentID = args.ParentID
}

func (q *UpdateShopCollectionCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShopCollectionArgs) {
	return ctx,
		&UpdateShopCollectionArgs{
			ID:          q.ID,
			ShopID:      q.ShopID,
			Name:        q.Name,
			Description: q.Description,
			DescHTML:    q.DescHTML,
			ShortDesc:   q.ShortDesc,
		}
}

func (q *UpdateShopCollectionCommand) SetUpdateShopCollectionArgs(args *UpdateShopCollectionArgs) {
	q.ID = args.ID
	q.ShopID = args.ShopID
	q.Name = args.Name
	q.Description = args.Description
	q.DescHTML = args.DescHTML
	q.ShortDesc = args.ShortDesc
}

func (q *UpdateShopProductCategoryCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShopProductCategoryArgs) {
	return ctx,
		&UpdateShopProductCategoryArgs{
			CategoryID: q.CategoryID,
			ShopID:     q.ShopID,
			ProductID:  q.ProductID,
		}
}

func (q *UpdateShopProductCategoryCommand) SetUpdateShopProductCategoryArgs(args *UpdateShopProductCategoryArgs) {
	q.CategoryID = args.CategoryID
	q.ShopID = args.ShopID
	q.ProductID = args.ProductID
}

func (q *UpdateShopProductImagesCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateImagesArgs) {
	return ctx,
		&UpdateImagesArgs{
			ID:      q.ID,
			ShopID:  q.ShopID,
			Updates: q.Updates,
		}
}

func (q *UpdateShopProductImagesCommand) SetUpdateImagesArgs(args *UpdateImagesArgs) {
	q.ID = args.ID
	q.ShopID = args.ShopID
	q.Updates = args.Updates
}

func (q *UpdateShopProductInfoCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShopProductInfoArgs) {
	return ctx,
		&UpdateShopProductInfoArgs{
			ShopID:      q.ShopID,
			ProductID:   q.ProductID,
			Code:        q.Code,
			Name:        q.Name,
			Unit:        q.Unit,
			Note:        q.Note,
			ShortDesc:   q.ShortDesc,
			Description: q.Description,
			DescHTML:    q.DescHTML,
			CostPrice:   q.CostPrice,
			ListPrice:   q.ListPrice,
			RetailPrice: q.RetailPrice,
			BrandID:     q.BrandID,
			ProductType: q.ProductType,
			CategoryID:  q.CategoryID,
		}
}

func (q *UpdateShopProductInfoCommand) SetUpdateShopProductInfoArgs(args *UpdateShopProductInfoArgs) {
	q.ShopID = args.ShopID
	q.ProductID = args.ProductID
	q.Code = args.Code
	q.Name = args.Name
	q.Unit = args.Unit
	q.Note = args.Note
	q.ShortDesc = args.ShortDesc
	q.Description = args.Description
	q.DescHTML = args.DescHTML
	q.CostPrice = args.CostPrice
	q.ListPrice = args.ListPrice
	q.RetailPrice = args.RetailPrice
	q.BrandID = args.BrandID
	q.ProductType = args.ProductType
	q.CategoryID = args.CategoryID
}

func (q *UpdateShopProductMetaFieldsCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShopProductMetaFieldsArgs) {
	return ctx,
		&UpdateShopProductMetaFieldsArgs{
			ID:         q.ID,
			ShopID:     q.ShopID,
			MetaFields: q.MetaFields,
		}
}

func (q *UpdateShopProductMetaFieldsCommand) SetUpdateShopProductMetaFieldsArgs(args *UpdateShopProductMetaFieldsArgs) {
	q.ID = args.ID
	q.ShopID = args.ShopID
	q.MetaFields = args.MetaFields
}

func (q *UpdateShopProductStatusCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateStatusArgs) {
	return ctx,
		&UpdateStatusArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
			Status: q.Status,
		}
}

func (q *UpdateShopProductStatusCommand) SetUpdateStatusArgs(args *UpdateStatusArgs) {
	q.IDs = args.IDs
	q.ShopID = args.ShopID
	q.Status = args.Status
}

func (q *UpdateShopVariantAttributesCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShopVariantAttributes) {
	return ctx,
		&UpdateShopVariantAttributes{
			ShopID:     q.ShopID,
			VariantID:  q.VariantID,
			Attributes: q.Attributes,
		}
}

func (q *UpdateShopVariantAttributesCommand) SetUpdateShopVariantAttributes(args *UpdateShopVariantAttributes) {
	q.ShopID = args.ShopID
	q.VariantID = args.VariantID
	q.Attributes = args.Attributes
}

func (q *UpdateShopVariantImagesCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateImagesArgs) {
	return ctx,
		&UpdateImagesArgs{
			ID:      q.ID,
			ShopID:  q.ShopID,
			Updates: q.Updates,
		}
}

func (q *UpdateShopVariantImagesCommand) SetUpdateImagesArgs(args *UpdateImagesArgs) {
	q.ID = args.ID
	q.ShopID = args.ShopID
	q.Updates = args.Updates
}

func (q *UpdateShopVariantInfoCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShopVariantInfoArgs) {
	return ctx,
		&UpdateShopVariantInfoArgs{
			ShopID:       q.ShopID,
			VariantID:    q.VariantID,
			Code:         q.Code,
			Name:         q.Name,
			Note:         q.Note,
			ShortDesc:    q.ShortDesc,
			Descripttion: q.Descripttion,
			DescHTML:     q.DescHTML,
			CostPrice:    q.CostPrice,
			ListPrice:    q.ListPrice,
			RetailPrice:  q.RetailPrice,
		}
}

func (q *UpdateShopVariantInfoCommand) SetUpdateShopVariantInfoArgs(args *UpdateShopVariantInfoArgs) {
	q.ShopID = args.ShopID
	q.VariantID = args.VariantID
	q.Code = args.Code
	q.Name = args.Name
	q.Note = args.Note
	q.ShortDesc = args.ShortDesc
	q.Descripttion = args.Descripttion
	q.DescHTML = args.DescHTML
	q.CostPrice = args.CostPrice
	q.ListPrice = args.ListPrice
	q.RetailPrice = args.RetailPrice
}

func (q *UpdateShopVariantStatusCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateStatusArgs) {
	return ctx,
		&UpdateStatusArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
			Status: q.Status,
		}
}

func (q *UpdateShopVariantStatusCommand) SetUpdateStatusArgs(args *UpdateStatusArgs) {
	q.IDs = args.IDs
	q.ShopID = args.ShopID
	q.Status = args.Status
}

func (q *GetBrandByIDQuery) GetArgs(ctx context.Context) (_ context.Context, id dot.ID, shopID dot.ID) {
	return ctx,
		q.Id,
		q.ShopID
}

func (q *GetBrandsByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, ids []dot.ID, shopID dot.ID) {
	return ctx,
		q.Ids,
		q.ShopID
}

func (q *GetShopCategoryQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShopCategoryArgs) {
	return ctx,
		&GetShopCategoryArgs{
			ID:     q.ID,
			ShopID: q.ShopID,
		}
}

func (q *GetShopCategoryQuery) SetGetShopCategoryArgs(args *GetShopCategoryArgs) {
	q.ID = args.ID
	q.ShopID = args.ShopID
}

func (q *GetShopCollectionQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShopCollectionArgs) {
	return ctx,
		&GetShopCollectionArgs{
			ID:     q.ID,
			ShopID: q.ShopID,
		}
}

func (q *GetShopCollectionQuery) SetGetShopCollectionArgs(args *GetShopCollectionArgs) {
	q.ID = args.ID
	q.ShopID = args.ShopID
}

func (q *GetShopProductQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShopProductArgs) {
	return ctx,
		&GetShopProductArgs{
			ExternalID: q.ExternalID,
			Code:       q.Code,
			ProductID:  q.ProductID,
			ShopID:     q.ShopID,
		}
}

func (q *GetShopProductQuery) SetGetShopProductArgs(args *GetShopProductArgs) {
	q.ExternalID = args.ExternalID
	q.Code = args.Code
	q.ProductID = args.ProductID
	q.ShopID = args.ShopID
}

func (q *GetShopProductByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShopProductByIDQueryArgs) {
	return ctx,
		&GetShopProductByIDQueryArgs{
			ProductID: q.ProductID,
			ShopID:    q.ShopID,
		}
}

func (q *GetShopProductByIDQuery) SetGetShopProductByIDQueryArgs(args *GetShopProductByIDQueryArgs) {
	q.ProductID = args.ProductID
	q.ShopID = args.ShopID
}

func (q *GetShopProductWithVariantsByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShopProductByIDQueryArgs) {
	return ctx,
		&GetShopProductByIDQueryArgs{
			ProductID: q.ProductID,
			ShopID:    q.ShopID,
		}
}

func (q *GetShopProductWithVariantsByIDQuery) SetGetShopProductByIDQueryArgs(args *GetShopProductByIDQueryArgs) {
	q.ProductID = args.ProductID
	q.ShopID = args.ShopID
}

func (q *GetShopVariantQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShopVariantQueryArgs) {
	return ctx,
		&GetShopVariantQueryArgs{
			ExternalID: q.ExternalID,
			VariantID:  q.VariantID,
			ShopID:     q.ShopID,
			Code:       q.Code,
		}
}

func (q *GetShopVariantQuery) SetGetShopVariantQueryArgs(args *GetShopVariantQueryArgs) {
	q.ExternalID = args.ExternalID
	q.VariantID = args.VariantID
	q.ShopID = args.ShopID
	q.Code = args.Code
}

func (q *GetShopVariantWithProductByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShopVariantByIDQueryArgs) {
	return ctx,
		&GetShopVariantByIDQueryArgs{
			VariantID: q.VariantID,
			ShopID:    q.ShopID,
		}
}

func (q *GetShopVariantWithProductByIDQuery) SetGetShopVariantByIDQueryArgs(args *GetShopVariantByIDQueryArgs) {
	q.VariantID = args.VariantID
	q.ShopID = args.ShopID
}

func (q *GetSupplierIDsByVariantIDQuery) GetArgs(ctx context.Context) (_ context.Context, variantID dot.ID, shopID dot.ID) {
	return ctx,
		q.VariantID,
		q.ShopID
}

func (q *GetVariantsBySupplierIDQuery) GetArgs(ctx context.Context) (_ context.Context, supplierID dot.ID, shopID dot.ID) {
	return ctx,
		q.SupplierID,
		q.ShopID
}

func (q *ListBrandsQuery) GetArgs(ctx context.Context) (_ context.Context, paging meta.Paging, shopId dot.ID) {
	return ctx,
		q.Paging,
		q.ShopId
}

func (q *ListShopCategoriesQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.ListQueryShopArgs) {
	return ctx,
		&shopping.ListQueryShopArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListShopCategoriesQuery) SetListQueryShopArgs(args *shopping.ListQueryShopArgs) {
	q.ShopID = args.ShopID
	q.Paging = args.Paging
	q.Filters = args.Filters
}

func (q *ListShopCollectionsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.ListQueryShopArgs) {
	return ctx,
		&shopping.ListQueryShopArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListShopCollectionsQuery) SetListQueryShopArgs(args *shopping.ListQueryShopArgs) {
	q.ShopID = args.ShopID
	q.Paging = args.Paging
	q.Filters = args.Filters
}

func (q *ListShopCollectionsByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListShopCollectionsByIDsArg) {
	return ctx,
		&ListShopCollectionsByIDsArg{
			IDs:            q.IDs,
			ShopID:         q.ShopID,
			Paging:         q.Paging,
			IncludeDeleted: q.IncludeDeleted,
		}
}

func (q *ListShopCollectionsByIDsQuery) SetListShopCollectionsByIDsArg(args *ListShopCollectionsByIDsArg) {
	q.IDs = args.IDs
	q.ShopID = args.ShopID
	q.Paging = args.Paging
	q.IncludeDeleted = args.IncludeDeleted
}

func (q *ListShopCollectionsByProductIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListShopCollectionsByProductIDArgs) {
	return ctx,
		&ListShopCollectionsByProductIDArgs{
			ProductID: q.ProductID,
			ShopID:    q.ShopID,
		}
}

func (q *ListShopCollectionsByProductIDQuery) SetListShopCollectionsByProductIDArgs(args *ListShopCollectionsByProductIDArgs) {
	q.ProductID = args.ProductID
	q.ShopID = args.ShopID
}

func (q *ListShopProductsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.ListQueryShopArgs) {
	return ctx,
		&shopping.ListQueryShopArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListShopProductsQuery) SetListQueryShopArgs(args *shopping.ListQueryShopArgs) {
	q.ShopID = args.ShopID
	q.Paging = args.Paging
	q.Filters = args.Filters
}

func (q *ListShopProductsByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListShopProductsByIDsArgs) {
	return ctx,
		&ListShopProductsByIDsArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
			Paging: q.Paging,
		}
}

func (q *ListShopProductsByIDsQuery) SetListShopProductsByIDsArgs(args *ListShopProductsByIDsArgs) {
	q.IDs = args.IDs
	q.ShopID = args.ShopID
	q.Paging = args.Paging
}

func (q *ListShopProductsCollectionsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListProductsCollections) {
	return ctx,
		&ListProductsCollections{
			ProductIds:     q.ProductIds,
			CollectionIDs:  q.CollectionIDs,
			ShopID:         q.ShopID,
			Paging:         q.Paging,
			IncludeDeleted: q.IncludeDeleted,
		}
}

func (q *ListShopProductsCollectionsQuery) SetListProductsCollections(args *ListProductsCollections) {
	q.ProductIds = args.ProductIds
	q.CollectionIDs = args.CollectionIDs
	q.ShopID = args.ShopID
	q.Paging = args.Paging
	q.IncludeDeleted = args.IncludeDeleted
}

func (q *ListShopProductsWithVariantsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.ListQueryShopArgs) {
	return ctx,
		&shopping.ListQueryShopArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListShopProductsWithVariantsQuery) SetListQueryShopArgs(args *shopping.ListQueryShopArgs) {
	q.ShopID = args.ShopID
	q.Paging = args.Paging
	q.Filters = args.Filters
}

func (q *ListShopProductsWithVariantsByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.IDsQueryShopArgs) {
	return ctx,
		&shopping.IDsQueryShopArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
			Paging: q.Paging,
		}
}

func (q *ListShopProductsWithVariantsByIDsQuery) SetIDsQueryShopArgs(args *shopping.IDsQueryShopArgs) {
	q.IDs = args.IDs
	q.ShopID = args.ShopID
	q.Paging = args.Paging
}

func (q *ListShopVariantsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.ListQueryShopArgs) {
	return ctx,
		&shopping.ListQueryShopArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListShopVariantsQuery) SetListQueryShopArgs(args *shopping.ListQueryShopArgs) {
	q.ShopID = args.ShopID
	q.Paging = args.Paging
	q.Filters = args.Filters
}

func (q *ListShopVariantsByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListShopVariantsByIDsArgs) {
	return ctx,
		&ListShopVariantsByIDsArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
			Paging: q.Paging,
		}
}

func (q *ListShopVariantsByIDsQuery) SetListShopVariantsByIDsArgs(args *ListShopVariantsByIDsArgs) {
	q.IDs = args.IDs
	q.ShopID = args.ShopID
	q.Paging = args.Paging
}

func (q *ListShopVariantsWithProductByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.IDsQueryShopArgs) {
	return ctx,
		&shopping.IDsQueryShopArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
			Paging: q.Paging,
		}
}

func (q *ListShopVariantsWithProductByIDsQuery) SetIDsQueryShopArgs(args *shopping.IDsQueryShopArgs) {
	q.IDs = args.IDs
	q.ShopID = args.ShopID
	q.Paging = args.Paging
}

func (q *ValidateVariantIDsQuery) GetArgs(ctx context.Context) (_ context.Context, shopId dot.ID, shopVariantIds []dot.ID) {
	return ctx,
		q.ShopId,
		q.ShopVariantIds
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleAddShopProductCollection)
	b.AddHandler(h.HandleCreateBrand)
	b.AddHandler(h.HandleCreateShopCategory)
	b.AddHandler(h.HandleCreateShopCollection)
	b.AddHandler(h.HandleCreateShopProduct)
	b.AddHandler(h.HandleCreateShopVariant)
	b.AddHandler(h.HandleCreateVariantSupplier)
	b.AddHandler(h.HandleCreateVariantsSupplier)
	b.AddHandler(h.HandleDeleteShopBrand)
	b.AddHandler(h.HandleDeleteShopCategory)
	b.AddHandler(h.HandleDeleteShopCollection)
	b.AddHandler(h.HandleDeleteShopProducts)
	b.AddHandler(h.HandleDeleteShopVariants)
	b.AddHandler(h.HandleDeleteVariantSupplier)
	b.AddHandler(h.HandleRemoveShopProductCategory)
	b.AddHandler(h.HandleRemoveShopProductCollection)
	b.AddHandler(h.HandleUpdateBrandInfo)
	b.AddHandler(h.HandleUpdateShopCategory)
	b.AddHandler(h.HandleUpdateShopCollection)
	b.AddHandler(h.HandleUpdateShopProductCategory)
	b.AddHandler(h.HandleUpdateShopProductImages)
	b.AddHandler(h.HandleUpdateShopProductInfo)
	b.AddHandler(h.HandleUpdateShopProductMetaFields)
	b.AddHandler(h.HandleUpdateShopProductStatus)
	b.AddHandler(h.HandleUpdateShopVariantAttributes)
	b.AddHandler(h.HandleUpdateShopVariantImages)
	b.AddHandler(h.HandleUpdateShopVariantInfo)
	b.AddHandler(h.HandleUpdateShopVariantStatus)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetBrandByID)
	b.AddHandler(h.HandleGetBrandsByIDs)
	b.AddHandler(h.HandleGetShopCategory)
	b.AddHandler(h.HandleGetShopCollection)
	b.AddHandler(h.HandleGetShopProduct)
	b.AddHandler(h.HandleGetShopProductByID)
	b.AddHandler(h.HandleGetShopProductWithVariantsByID)
	b.AddHandler(h.HandleGetShopVariant)
	b.AddHandler(h.HandleGetShopVariantWithProductByID)
	b.AddHandler(h.HandleGetSupplierIDsByVariantID)
	b.AddHandler(h.HandleGetVariantsBySupplierID)
	b.AddHandler(h.HandleListBrands)
	b.AddHandler(h.HandleListShopCategories)
	b.AddHandler(h.HandleListShopCollections)
	b.AddHandler(h.HandleListShopCollectionsByIDs)
	b.AddHandler(h.HandleListShopCollectionsByProductID)
	b.AddHandler(h.HandleListShopProducts)
	b.AddHandler(h.HandleListShopProductsByIDs)
	b.AddHandler(h.HandleListShopProductsCollections)
	b.AddHandler(h.HandleListShopProductsWithVariants)
	b.AddHandler(h.HandleListShopProductsWithVariantsByIDs)
	b.AddHandler(h.HandleListShopVariants)
	b.AddHandler(h.HandleListShopVariantsByIDs)
	b.AddHandler(h.HandleListShopVariantsWithProductByIDs)
	b.AddHandler(h.HandleValidateVariantIDs)
	return QueryBus{b}
}
