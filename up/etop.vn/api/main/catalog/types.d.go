// Code generated by gen-cmd-query. DO NOT EDIT.

package catalog

import (
	context "context"
	unsafe "unsafe"

	meta "etop.vn/api/meta"
)

type UpdateProductCommand struct {
	Result *Product `json:"-"`
}

type GetProductByIDQuery struct {
	ProductID int64

	Result *ProductWithVariants `json:"-"`
}

type GetShopProductByIDQuery struct {
	ProductID int64
	ShopID    int64

	Result *ShopProductExtended `json:"-"`
}

type GetShopVariantByIDQuery struct {
	Result *ShopVariantExtended `json:"-"`
}

type GetVariantByIDQuery struct {
	VariantID int64

	Result *VariantWithProduct `json:"-"`
}

type ListProductsQuery struct {
	IDs             []int64
	ProductSourceID int64
	Paging          meta.Paging
	Filters         meta.Filters

	Result *ProductsResonse `json:"-"`
}

type ListProductsWithVariantsQuery struct {
	IDs             []int64
	ProductSourceID int64
	Paging          meta.Paging
	Filters         meta.Filters

	Result *ProductsWithVariantsResponse `json:"-"`
}

type ListShopProductsQuery struct {
	IDs    int64
	ShopID int64

	Result *ShopProductsResponse `json:"-"`
}

type ListShopProductsWithVariantsQuery struct {
	IDs    int64
	ShopID int64

	Result *ShopProductsWithVariantsResponse `json:"-"`
}

type ListShopVariantsQuery struct {
	IDs    int64
	ShopID int64

	Result *ShopVariantsResponse `json:"-"`
}

type ListVariantsQuery struct {
	IDs             int64
	ProductSourceID int64
	Paging          meta.Paging
	Filters         meta.Filters

	Result *VariantsResponse `json:"-"`
}

type ListVariantsWithProductQuery struct {
	IDs             int64
	ProductSourceID int64
	Paging          meta.Paging
	Filters         meta.Filters

	Result *VariantsWithProductResponse `json:"-"`
}

// implement conversion

func (q *UpdateProductCommand) GetArgs() *UpdateProductArgs {
	return (*UpdateProductArgs)(unsafe.Pointer(q))
}
func (q *GetProductByIDQuery) GetArgs() *GetProductByIDQueryArgs {
	return (*GetProductByIDQueryArgs)(unsafe.Pointer(q))
}
func (q *GetShopProductByIDQuery) GetArgs() *GetShopProductByIDQueryArgs {
	return (*GetShopProductByIDQueryArgs)(unsafe.Pointer(q))
}
func (q *GetShopVariantByIDQuery) GetArgs() *GetShopVariantsByIDQueryArgs {
	return (*GetShopVariantsByIDQueryArgs)(unsafe.Pointer(q))
}
func (q *GetVariantByIDQuery) GetArgs() *GetVariantByIDQueryArgs {
	return (*GetVariantByIDQueryArgs)(unsafe.Pointer(q))
}
func (q *ListProductsQuery) GetArgs() *GetProductsQueryArgs {
	return (*GetProductsQueryArgs)(unsafe.Pointer(q))
}
func (q *ListProductsWithVariantsQuery) GetArgs() *GetProductsQueryArgs {
	return (*GetProductsQueryArgs)(unsafe.Pointer(q))
}
func (q *ListShopProductsQuery) GetArgs() *GetShopProductsQueryArgs {
	return (*GetShopProductsQueryArgs)(unsafe.Pointer(q))
}
func (q *ListShopProductsWithVariantsQuery) GetArgs() *GetShopProductsQueryArgs {
	return (*GetShopProductsQueryArgs)(unsafe.Pointer(q))
}
func (q *ListShopVariantsQuery) GetArgs() *GetShopVariantsQueryArgs {
	return (*GetShopVariantsQueryArgs)(unsafe.Pointer(q))
}
func (q *ListVariantsQuery) GetArgs() *GetVariantsQueryArgs {
	return (*GetVariantsQueryArgs)(unsafe.Pointer(q))
}
func (q *ListVariantsWithProductQuery) GetArgs() *GetVariantsQueryArgs {
	return (*GetVariantsQueryArgs)(unsafe.Pointer(q))
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	AddHandler(handler interface{})
}) {
	b.AddHandler(h.HandleUpdateProduct)
}

func (h AggregateHandler) HandleUpdateProduct(ctx context.Context, cmd *UpdateProductCommand) error {
	result, err := h.inner.UpdateProduct(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	AddHandler(handler interface{})
}) {
	b.AddHandler(h.HandleGetProductByID)
	b.AddHandler(h.HandleGetShopProductByID)
	b.AddHandler(h.HandleGetShopVariantByID)
	b.AddHandler(h.HandleGetVariantByID)
	b.AddHandler(h.HandleListProducts)
	b.AddHandler(h.HandleListProductsWithVariants)
	b.AddHandler(h.HandleListShopProducts)
	b.AddHandler(h.HandleListShopProductsWithVariants)
	b.AddHandler(h.HandleListShopVariants)
	b.AddHandler(h.HandleListVariants)
	b.AddHandler(h.HandleListVariantsWithProduct)
}

func (h QueryServiceHandler) HandleGetProductByID(ctx context.Context, query *GetProductByIDQuery) error {
	result, err := h.inner.GetProductByID(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleGetShopProductByID(ctx context.Context, query *GetShopProductByIDQuery) error {
	result, err := h.inner.GetShopProductByID(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleGetShopVariantByID(ctx context.Context, query *GetShopVariantByIDQuery) error {
	result, err := h.inner.GetShopVariantByID(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleGetVariantByID(ctx context.Context, query *GetVariantByIDQuery) error {
	result, err := h.inner.GetVariantByID(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleListProducts(ctx context.Context, query *ListProductsQuery) error {
	result, err := h.inner.ListProducts(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleListProductsWithVariants(ctx context.Context, query *ListProductsWithVariantsQuery) error {
	result, err := h.inner.ListProductsWithVariants(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleListShopProducts(ctx context.Context, query *ListShopProductsQuery) error {
	result, err := h.inner.ListShopProducts(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleListShopProductsWithVariants(ctx context.Context, query *ListShopProductsWithVariantsQuery) error {
	result, err := h.inner.ListShopProductsWithVariants(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleListShopVariants(ctx context.Context, query *ListShopVariantsQuery) error {
	result, err := h.inner.ListShopVariants(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleListVariants(ctx context.Context, query *ListVariantsQuery) error {
	result, err := h.inner.ListVariants(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleListVariantsWithProduct(ctx context.Context, query *ListVariantsWithProductQuery) error {
	result, err := h.inner.ListVariantsWithProduct(ctx, query.GetArgs())
	query.Result = result
	return err
}
