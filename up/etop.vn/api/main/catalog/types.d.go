// Code generated by gen-cmd-query. DO NOT EDIT.

package catalog

import (
	context "context"

	meta "etop.vn/api/meta"
	metav1 "etop.vn/api/meta/v1"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus meta.Bus }
type QueryBus struct{ bus meta.Bus }

func (c CommandBus) Dispatch(ctx context.Context, msg Command) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type CreateShopProductCommand struct {
	Result *ShopProduct `json:"-"`
}

type CreateShopVariantCommand struct {
	Result *ShopVariant `json:"-"`
}

type DeleteShopProductsCommand struct {
	IDs    []int64
	ShopID int64

	Result *metav1.Empty `json:"-"`
}

type DeleteShopVariantsCommand struct {
	IDs    []int64
	ShopID int64

	Result *metav1.Empty `json:"-"`
}

type UpdateShopProductImagesCommand struct {
	ID      int64
	ShopID  int64
	Updates []*meta.UpdateSet

	Result *ShopProduct `json:"-"`
}

type UpdateShopProductInfoCommand struct {
	Result *ShopProduct `json:"-"`
}

type UpdateShopProductStatusCommand struct {
	IDs    []int64
	ShopID int64
	Status int16

	Result *ShopProduct `json:"-"`
}

type UpdateShopVariantImagesCommand struct {
	ID      int64
	ShopID  int64
	Updates []*meta.UpdateSet

	Result *ShopVariant `json:"-"`
}

type UpdateShopVariantInfoCommand struct {
	Result *ShopVariant `json:"-"`
}

type UpdateShopVariantStatusCommand struct {
	IDs    []int64
	ShopID int64
	Status int16

	Result *ShopVariant `json:"-"`
}

type GetShopProductByIDQuery struct {
	ProductID int64
	ShopID    int64

	Result *ShopProduct `json:"-"`
}

type GetShopProductWithVariantsByIDQuery struct {
	ProductID int64
	ShopID    int64

	Result *ShopProductWithVariants `json:"-"`
}

type GetShopVariantByIDQuery struct {
	VariantID int64
	ShopID    int64

	Result *ShopVariant `json:"-"`
}

type GetShopVariantWithProductByIDQuery struct {
	VariantID int64
	ShopID    int64

	Result *ShopVariantWithProduct `json:"-"`
}

type ListShopProductsQuery struct {
	ShopID  int64
	Paging  metav1.Paging
	Filters meta.Filters

	Result *ShopProductsResponse `json:"-"`
}

type ListShopProductsByIDsQuery struct {
	IDs    []int64
	ShopID int64

	Result *ShopProductsResponse `json:"-"`
}

type ListShopProductsWithVariantsQuery struct {
	ShopID  int64
	Paging  metav1.Paging
	Filters meta.Filters

	Result *ShopProductsWithVariantsResponse `json:"-"`
}

type ListShopProductsWithVariantsByIDsQuery struct {
	IDs    []int64
	ShopID int64

	Result *ShopProductsWithVariantsResponse `json:"-"`
}

type ListShopVariantsQuery struct {
	ShopID  int64
	Paging  metav1.Paging
	Filters meta.Filters

	Result *ShopVariantsResponse `json:"-"`
}

type ListShopVariantsByIDsQuery struct {
	IDs    []int64
	ShopID int64

	Result *ShopVariantsResponse `json:"-"`
}

type ListShopVariantsWithProductByIDsQuery struct {
	IDs    []int64
	ShopID int64

	Result *ShopVariantsWithProductResponse `json:"-"`
}

// implement interfaces

func (q *CreateShopProductCommand) command()             {}
func (q *CreateShopVariantCommand) command()             {}
func (q *DeleteShopProductsCommand) command()            {}
func (q *DeleteShopVariantsCommand) command()            {}
func (q *UpdateShopProductImagesCommand) command()       {}
func (q *UpdateShopProductInfoCommand) command()         {}
func (q *UpdateShopProductStatusCommand) command()       {}
func (q *UpdateShopVariantImagesCommand) command()       {}
func (q *UpdateShopVariantInfoCommand) command()         {}
func (q *UpdateShopVariantStatusCommand) command()       {}
func (q *GetShopProductByIDQuery) query()                {}
func (q *GetShopProductWithVariantsByIDQuery) query()    {}
func (q *GetShopVariantByIDQuery) query()                {}
func (q *GetShopVariantWithProductByIDQuery) query()     {}
func (q *ListShopProductsQuery) query()                  {}
func (q *ListShopProductsByIDsQuery) query()             {}
func (q *ListShopProductsWithVariantsQuery) query()      {}
func (q *ListShopProductsWithVariantsByIDsQuery) query() {}
func (q *ListShopVariantsQuery) query()                  {}
func (q *ListShopVariantsByIDsQuery) query()             {}
func (q *ListShopVariantsWithProductByIDsQuery) query()  {}

// implement conversion

func (q *CreateShopProductCommand) GetArgs() *CreateShopProductArgs {
	return &CreateShopProductArgs{}
}
func (q *CreateShopVariantCommand) GetArgs() *CreateShopVariantArgs {
	return &CreateShopVariantArgs{}
}
func (q *DeleteShopProductsCommand) GetArgs() *IDsShopArgs {
	return &IDsShopArgs{
		IDs:    q.IDs,
		ShopID: q.ShopID,
	}
}
func (q *DeleteShopVariantsCommand) GetArgs() *IDsShopArgs {
	return &IDsShopArgs{
		IDs:    q.IDs,
		ShopID: q.ShopID,
	}
}
func (q *UpdateShopProductImagesCommand) GetArgs() *UpdateImagesArgs {
	return &UpdateImagesArgs{
		ID:      q.ID,
		ShopID:  q.ShopID,
		Updates: q.Updates,
	}
}
func (q *UpdateShopProductInfoCommand) GetArgs() *UpdateShopProductInfoArgs {
	return &UpdateShopProductInfoArgs{}
}
func (q *UpdateShopProductStatusCommand) GetArgs() *UpdateStatusArgs {
	return &UpdateStatusArgs{
		IDs:    q.IDs,
		ShopID: q.ShopID,
		Status: q.Status,
	}
}
func (q *UpdateShopVariantImagesCommand) GetArgs() *UpdateImagesArgs {
	return &UpdateImagesArgs{
		ID:      q.ID,
		ShopID:  q.ShopID,
		Updates: q.Updates,
	}
}
func (q *UpdateShopVariantInfoCommand) GetArgs() *UpdateShopVariantInfoArgs {
	return &UpdateShopVariantInfoArgs{}
}
func (q *UpdateShopVariantStatusCommand) GetArgs() *UpdateStatusArgs {
	return &UpdateStatusArgs{
		IDs:    q.IDs,
		ShopID: q.ShopID,
		Status: q.Status,
	}
}
func (q *GetShopProductByIDQuery) GetArgs() *GetShopProductByIDQueryArgs {
	return &GetShopProductByIDQueryArgs{
		ProductID: q.ProductID,
		ShopID:    q.ShopID,
	}
}
func (q *GetShopProductWithVariantsByIDQuery) GetArgs() *GetShopProductByIDQueryArgs {
	return &GetShopProductByIDQueryArgs{
		ProductID: q.ProductID,
		ShopID:    q.ShopID,
	}
}
func (q *GetShopVariantByIDQuery) GetArgs() *GetShopVariantByIDQueryArgs {
	return &GetShopVariantByIDQueryArgs{
		VariantID: q.VariantID,
		ShopID:    q.ShopID,
	}
}
func (q *GetShopVariantWithProductByIDQuery) GetArgs() *GetShopVariantByIDQueryArgs {
	return &GetShopVariantByIDQueryArgs{
		VariantID: q.VariantID,
		ShopID:    q.ShopID,
	}
}
func (q *ListShopProductsQuery) GetArgs() *ListShopProductsQueryArgs {
	return &ListShopProductsQueryArgs{
		ShopID:  q.ShopID,
		Paging:  q.Paging,
		Filters: q.Filters,
	}
}
func (q *ListShopProductsByIDsQuery) GetArgs() *IDsShopArgs {
	return &IDsShopArgs{
		IDs:    q.IDs,
		ShopID: q.ShopID,
	}
}
func (q *ListShopProductsWithVariantsQuery) GetArgs() *ListShopProductsQueryArgs {
	return &ListShopProductsQueryArgs{
		ShopID:  q.ShopID,
		Paging:  q.Paging,
		Filters: q.Filters,
	}
}
func (q *ListShopProductsWithVariantsByIDsQuery) GetArgs() *IDsShopArgs {
	return &IDsShopArgs{
		IDs:    q.IDs,
		ShopID: q.ShopID,
	}
}
func (q *ListShopVariantsQuery) GetArgs() *ListShopVariantsQueryArgs {
	return &ListShopVariantsQueryArgs{
		ShopID:  q.ShopID,
		Paging:  q.Paging,
		Filters: q.Filters,
	}
}
func (q *ListShopVariantsByIDsQuery) GetArgs() *IDsShopArgs {
	return &IDsShopArgs{
		IDs:    q.IDs,
		ShopID: q.ShopID,
	}
}
func (q *ListShopVariantsWithProductByIDsQuery) GetArgs() *IDsShopArgs {
	return &IDsShopArgs{
		IDs:    q.IDs,
		ShopID: q.ShopID,
	}
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateShopProduct)
	b.AddHandler(h.HandleCreateShopVariant)
	b.AddHandler(h.HandleDeleteShopProducts)
	b.AddHandler(h.HandleDeleteShopVariants)
	b.AddHandler(h.HandleUpdateShopProductImages)
	b.AddHandler(h.HandleUpdateShopProductInfo)
	b.AddHandler(h.HandleUpdateShopProductStatus)
	b.AddHandler(h.HandleUpdateShopVariantImages)
	b.AddHandler(h.HandleUpdateShopVariantInfo)
	b.AddHandler(h.HandleUpdateShopVariantStatus)
	return CommandBus{b}
}

func (h AggregateHandler) HandleCreateShopProduct(ctx context.Context, cmd *CreateShopProductCommand) error {
	result, err := h.inner.CreateShopProduct(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleCreateShopVariant(ctx context.Context, cmd *CreateShopVariantCommand) error {
	result, err := h.inner.CreateShopVariant(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleDeleteShopProducts(ctx context.Context, cmd *DeleteShopProductsCommand) error {
	result, err := h.inner.DeleteShopProducts(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleDeleteShopVariants(ctx context.Context, cmd *DeleteShopVariantsCommand) error {
	result, err := h.inner.DeleteShopVariants(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleUpdateShopProductImages(ctx context.Context, cmd *UpdateShopProductImagesCommand) error {
	result, err := h.inner.UpdateShopProductImages(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleUpdateShopProductInfo(ctx context.Context, cmd *UpdateShopProductInfoCommand) error {
	result, err := h.inner.UpdateShopProductInfo(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleUpdateShopProductStatus(ctx context.Context, cmd *UpdateShopProductStatusCommand) error {
	result, err := h.inner.UpdateShopProductStatus(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleUpdateShopVariantImages(ctx context.Context, cmd *UpdateShopVariantImagesCommand) error {
	result, err := h.inner.UpdateShopVariantImages(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleUpdateShopVariantInfo(ctx context.Context, cmd *UpdateShopVariantInfoCommand) error {
	result, err := h.inner.UpdateShopVariantInfo(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleUpdateShopVariantStatus(ctx context.Context, cmd *UpdateShopVariantStatusCommand) error {
	result, err := h.inner.UpdateShopVariantStatus(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetShopProductByID)
	b.AddHandler(h.HandleGetShopProductWithVariantsByID)
	b.AddHandler(h.HandleGetShopVariantByID)
	b.AddHandler(h.HandleGetShopVariantWithProductByID)
	b.AddHandler(h.HandleListShopProducts)
	b.AddHandler(h.HandleListShopProductsByIDs)
	b.AddHandler(h.HandleListShopProductsWithVariants)
	b.AddHandler(h.HandleListShopProductsWithVariantsByIDs)
	b.AddHandler(h.HandleListShopVariants)
	b.AddHandler(h.HandleListShopVariantsByIDs)
	b.AddHandler(h.HandleListShopVariantsWithProductByIDs)
	return QueryBus{b}
}

func (h QueryServiceHandler) HandleGetShopProductByID(ctx context.Context, query *GetShopProductByIDQuery) error {
	result, err := h.inner.GetShopProductByID(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleGetShopProductWithVariantsByID(ctx context.Context, query *GetShopProductWithVariantsByIDQuery) error {
	result, err := h.inner.GetShopProductWithVariantsByID(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleGetShopVariantByID(ctx context.Context, query *GetShopVariantByIDQuery) error {
	result, err := h.inner.GetShopVariantByID(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleGetShopVariantWithProductByID(ctx context.Context, query *GetShopVariantWithProductByIDQuery) error {
	result, err := h.inner.GetShopVariantWithProductByID(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleListShopProducts(ctx context.Context, query *ListShopProductsQuery) error {
	result, err := h.inner.ListShopProducts(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleListShopProductsByIDs(ctx context.Context, query *ListShopProductsByIDsQuery) error {
	result, err := h.inner.ListShopProductsByIDs(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleListShopProductsWithVariants(ctx context.Context, query *ListShopProductsWithVariantsQuery) error {
	result, err := h.inner.ListShopProductsWithVariants(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleListShopProductsWithVariantsByIDs(ctx context.Context, query *ListShopProductsWithVariantsByIDsQuery) error {
	result, err := h.inner.ListShopProductsWithVariantsByIDs(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleListShopVariants(ctx context.Context, query *ListShopVariantsQuery) error {
	result, err := h.inner.ListShopVariants(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleListShopVariantsByIDs(ctx context.Context, query *ListShopVariantsByIDsQuery) error {
	result, err := h.inner.ListShopVariantsByIDs(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleListShopVariantsWithProductByIDs(ctx context.Context, query *ListShopVariantsWithProductByIDsQuery) error {
	result, err := h.inner.ListShopVariantsWithProductByIDs(ctx, query.GetArgs())
	query.Result = result
	return err
}
