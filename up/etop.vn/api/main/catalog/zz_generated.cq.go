// +build !generator

// Code generated by generator cq. DO NOT EDIT.

package catalog

import (
	context "context"

	types "etop.vn/api/main/catalog/types"
	meta "etop.vn/api/meta"
	shopping "etop.vn/api/shopping"
	capi "etop.vn/capi"
	dot "etop.vn/capi/dot"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func (c CommandBus) Dispatch(ctx context.Context, msg Command) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type AddShopProductCollectionCommand struct {
	ProductID     int64
	ShopID        int64
	CollectionIDs []int64

	Result int `json:"-"`
}

func (h AggregateHandler) HandleAddShopProductCollection(ctx context.Context, msg *AddShopProductCollectionCommand) (err error) {
	msg.Result, err = h.inner.AddShopProductCollection(msg.GetArgs(ctx))
	return err
}

type CreateShopCategoryCommand struct {
	ID       int64
	ShopID   int64
	ParentID int64
	Name     string
	Status   int

	Result *ShopCategory `json:"-"`
}

func (h AggregateHandler) HandleCreateShopCategory(ctx context.Context, msg *CreateShopCategoryCommand) (err error) {
	msg.Result, err = h.inner.CreateShopCategory(msg.GetArgs(ctx))
	return err
}

type CreateShopCollectionCommand struct {
	ID          int64
	ShopID      int64
	Name        string
	Description string
	DescHTML    string
	ShortDesc   string

	Result *ShopCollection `json:"-"`
}

func (h AggregateHandler) HandleCreateShopCollection(ctx context.Context, msg *CreateShopCollectionCommand) (err error) {
	msg.Result, err = h.inner.CreateShopCollection(msg.GetArgs(ctx))
	return err
}

type CreateShopProductCommand struct {
	ShopID          int64
	VendorID        int64
	Code            string
	Name            string
	Unit            string
	ImageURLs       []string
	Note            string
	DescriptionInfo DescriptionInfo
	PriceInfo       PriceInfo
	ProductType     string

	Result *ShopProductWithVariants `json:"-"`
}

func (h AggregateHandler) HandleCreateShopProduct(ctx context.Context, msg *CreateShopProductCommand) (err error) {
	msg.Result, err = h.inner.CreateShopProduct(msg.GetArgs(ctx))
	return err
}

type CreateShopVariantCommand struct {
	ShopID          int64
	ProductID       int64
	Code            string
	Name            string
	ImageURLs       []string
	Note            string
	Attributes      types.Attributes
	DescriptionInfo DescriptionInfo
	PriceInfo       PriceInfo

	Result *ShopVariant `json:"-"`
}

func (h AggregateHandler) HandleCreateShopVariant(ctx context.Context, msg *CreateShopVariantCommand) (err error) {
	msg.Result, err = h.inner.CreateShopVariant(msg.GetArgs(ctx))
	return err
}

type DeleteShopCategoryCommand struct {
	ID     int64
	ShopID int64

	Result int `json:"-"`
}

func (h AggregateHandler) HandleDeleteShopCategory(ctx context.Context, msg *DeleteShopCategoryCommand) (err error) {
	msg.Result, err = h.inner.DeleteShopCategory(msg.GetArgs(ctx))
	return err
}

type DeleteShopProductsCommand struct {
	IDs    []int64
	ShopID int64

	Result int `json:"-"`
}

func (h AggregateHandler) HandleDeleteShopProducts(ctx context.Context, msg *DeleteShopProductsCommand) (err error) {
	msg.Result, err = h.inner.DeleteShopProducts(msg.GetArgs(ctx))
	return err
}

type DeleteShopVariantsCommand struct {
	IDs    []int64
	ShopID int64

	Result int `json:"-"`
}

func (h AggregateHandler) HandleDeleteShopVariants(ctx context.Context, msg *DeleteShopVariantsCommand) (err error) {
	msg.Result, err = h.inner.DeleteShopVariants(msg.GetArgs(ctx))
	return err
}

type RemoveShopProductCategoryCommand struct {
	ProductID int64
	ShopID    int64

	Result *ShopProductWithVariants `json:"-"`
}

func (h AggregateHandler) HandleRemoveShopProductCategory(ctx context.Context, msg *RemoveShopProductCategoryCommand) (err error) {
	msg.Result, err = h.inner.RemoveShopProductCategory(msg.GetArgs(ctx))
	return err
}

type RemoveShopProductCollectionCommand struct {
	ProductID     int64
	ShopID        int64
	CollectionIDs []int64

	Result int `json:"-"`
}

func (h AggregateHandler) HandleRemoveShopProductCollection(ctx context.Context, msg *RemoveShopProductCollectionCommand) (err error) {
	msg.Result, err = h.inner.RemoveShopProductCollection(msg.GetArgs(ctx))
	return err
}

type UpdateShopCategoryCommand struct {
	ID       int64
	Name     dot.NullString
	ShopID   int64
	ParentID int64

	Result *ShopCategory `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopCategory(ctx context.Context, msg *UpdateShopCategoryCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopCategory(msg.GetArgs(ctx))
	return err
}

type UpdateShopCollectionCommand struct {
	ID          int64
	ShopID      int64
	Name        dot.NullString
	Description dot.NullString
	DescHTML    dot.NullString
	ShortDesc   dot.NullString

	Result *ShopCollection `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopCollection(ctx context.Context, msg *UpdateShopCollectionCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopCollection(msg.GetArgs(ctx))
	return err
}

type UpdateShopProductCategoryCommand struct {
	CategoryID int64
	ShopID     int64
	ProductID  int64

	Result *ShopProductWithVariants `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopProductCategory(ctx context.Context, msg *UpdateShopProductCategoryCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopProductCategory(msg.GetArgs(ctx))
	return err
}

type UpdateShopProductImagesCommand struct {
	ID      int64
	ShopID  int64
	Updates []*meta.UpdateSet

	Result *ShopProductWithVariants `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopProductImages(ctx context.Context, msg *UpdateShopProductImagesCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopProductImages(msg.GetArgs(ctx))
	return err
}

type UpdateShopProductInfoCommand struct {
	ShopID      int64
	ProductID   int64
	Code        dot.NullString
	Name        dot.NullString
	Unit        dot.NullString
	Note        dot.NullString
	ShortDesc   dot.NullString
	Description dot.NullString
	DescHTML    dot.NullString
	CostPrice   dot.NullInt32
	ListPrice   dot.NullInt32
	RetailPrice dot.NullInt32
	ProductType string
	CategoryID  int64
	VendorID    int64

	Result *ShopProductWithVariants `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopProductInfo(ctx context.Context, msg *UpdateShopProductInfoCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopProductInfo(msg.GetArgs(ctx))
	return err
}

type UpdateShopProductStatusCommand struct {
	IDs    []int64
	ShopID int64
	Status int16

	Result int `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopProductStatus(ctx context.Context, msg *UpdateShopProductStatusCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopProductStatus(msg.GetArgs(ctx))
	return err
}

type UpdateShopVariantAttributesCommand struct {
	ShopID     int64
	VariantID  int64
	Attributes types.Attributes

	Result *ShopVariant `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopVariantAttributes(ctx context.Context, msg *UpdateShopVariantAttributesCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopVariantAttributes(msg.GetArgs(ctx))
	return err
}

type UpdateShopVariantImagesCommand struct {
	ID      int64
	ShopID  int64
	Updates []*meta.UpdateSet

	Result *ShopVariant `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopVariantImages(ctx context.Context, msg *UpdateShopVariantImagesCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopVariantImages(msg.GetArgs(ctx))
	return err
}

type UpdateShopVariantInfoCommand struct {
	ShopID       int64
	VariantID    int64
	Code         dot.NullString
	Name         dot.NullString
	Note         dot.NullString
	ShortDesc    dot.NullString
	Descripttion dot.NullString
	DescHTML     dot.NullString
	CostPrice    dot.NullInt32
	ListPrice    dot.NullInt32
	RetailPrice  dot.NullInt32

	Result *ShopVariant `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopVariantInfo(ctx context.Context, msg *UpdateShopVariantInfoCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopVariantInfo(msg.GetArgs(ctx))
	return err
}

type UpdateShopVariantStatusCommand struct {
	IDs    []int64
	ShopID int64
	Status int16

	Result int `json:"-"`
}

func (h AggregateHandler) HandleUpdateShopVariantStatus(ctx context.Context, msg *UpdateShopVariantStatusCommand) (err error) {
	msg.Result, err = h.inner.UpdateShopVariantStatus(msg.GetArgs(ctx))
	return err
}

type GetShopCategoryQuery struct {
	ID     int64
	ShopID int64

	Result *ShopCategory `json:"-"`
}

func (h QueryServiceHandler) HandleGetShopCategory(ctx context.Context, msg *GetShopCategoryQuery) (err error) {
	msg.Result, err = h.inner.GetShopCategory(msg.GetArgs(ctx))
	return err
}

type GetShopCollectionQuery struct {
	ID     int64
	ShopID int64

	Result *ShopCollection `json:"-"`
}

func (h QueryServiceHandler) HandleGetShopCollection(ctx context.Context, msg *GetShopCollectionQuery) (err error) {
	msg.Result, err = h.inner.GetShopCollection(msg.GetArgs(ctx))
	return err
}

type GetShopProductByIDQuery struct {
	ProductID int64
	ShopID    int64

	Result *ShopProduct `json:"-"`
}

func (h QueryServiceHandler) HandleGetShopProductByID(ctx context.Context, msg *GetShopProductByIDQuery) (err error) {
	msg.Result, err = h.inner.GetShopProductByID(msg.GetArgs(ctx))
	return err
}

type GetShopProductWithVariantsByIDQuery struct {
	ProductID int64
	ShopID    int64

	Result *ShopProductWithVariants `json:"-"`
}

func (h QueryServiceHandler) HandleGetShopProductWithVariantsByID(ctx context.Context, msg *GetShopProductWithVariantsByIDQuery) (err error) {
	msg.Result, err = h.inner.GetShopProductWithVariantsByID(msg.GetArgs(ctx))
	return err
}

type GetShopVariantByIDQuery struct {
	VariantID int64
	ShopID    int64

	Result *ShopVariant `json:"-"`
}

func (h QueryServiceHandler) HandleGetShopVariantByID(ctx context.Context, msg *GetShopVariantByIDQuery) (err error) {
	msg.Result, err = h.inner.GetShopVariantByID(msg.GetArgs(ctx))
	return err
}

type GetShopVariantWithProductByIDQuery struct {
	VariantID int64
	ShopID    int64

	Result *ShopVariantWithProduct `json:"-"`
}

func (h QueryServiceHandler) HandleGetShopVariantWithProductByID(ctx context.Context, msg *GetShopVariantWithProductByIDQuery) (err error) {
	msg.Result, err = h.inner.GetShopVariantWithProductByID(msg.GetArgs(ctx))
	return err
}

type ListShopCategoriesQuery struct {
	ShopID  int64
	Paging  meta.Paging
	Filters meta.Filters

	Result *ShopCategoriesResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopCategories(ctx context.Context, msg *ListShopCategoriesQuery) (err error) {
	msg.Result, err = h.inner.ListShopCategories(msg.GetArgs(ctx))
	return err
}

type ListShopCollectionsQuery struct {
	ShopID  int64
	Paging  meta.Paging
	Filters meta.Filters

	Result *ShopCollectionsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopCollections(ctx context.Context, msg *ListShopCollectionsQuery) (err error) {
	msg.Result, err = h.inner.ListShopCollections(msg.GetArgs(ctx))
	return err
}

type ListShopCollectionsByProductIDQuery struct {
	ProductID int64
	ShopID    int64

	Result []*ShopCollection `json:"-"`
}

func (h QueryServiceHandler) HandleListShopCollectionsByProductID(ctx context.Context, msg *ListShopCollectionsByProductIDQuery) (err error) {
	msg.Result, err = h.inner.ListShopCollectionsByProductID(msg.GetArgs(ctx))
	return err
}

type ListShopProductsQuery struct {
	ShopID  int64
	Paging  meta.Paging
	Filters meta.Filters

	Result *ShopProductsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopProducts(ctx context.Context, msg *ListShopProductsQuery) (err error) {
	msg.Result, err = h.inner.ListShopProducts(msg.GetArgs(ctx))
	return err
}

type ListShopProductsByIDsQuery struct {
	IDs    []int64
	ShopID int64

	Result *ShopProductsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopProductsByIDs(ctx context.Context, msg *ListShopProductsByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListShopProductsByIDs(msg.GetArgs(ctx))
	return err
}

type ListShopProductsWithVariantsQuery struct {
	ShopID  int64
	Paging  meta.Paging
	Filters meta.Filters

	Result *ShopProductsWithVariantsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopProductsWithVariants(ctx context.Context, msg *ListShopProductsWithVariantsQuery) (err error) {
	msg.Result, err = h.inner.ListShopProductsWithVariants(msg.GetArgs(ctx))
	return err
}

type ListShopProductsWithVariantsByIDsQuery struct {
	IDs    []int64
	ShopID int64

	Result *ShopProductsWithVariantsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopProductsWithVariantsByIDs(ctx context.Context, msg *ListShopProductsWithVariantsByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListShopProductsWithVariantsByIDs(msg.GetArgs(ctx))
	return err
}

type ListShopVariantsQuery struct {
	ShopID  int64
	Paging  meta.Paging
	Filters meta.Filters

	Result *ShopVariantsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopVariants(ctx context.Context, msg *ListShopVariantsQuery) (err error) {
	msg.Result, err = h.inner.ListShopVariants(msg.GetArgs(ctx))
	return err
}

type ListShopVariantsByIDsQuery struct {
	IDs    []int64
	ShopID int64

	Result *ShopVariantsResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopVariantsByIDs(ctx context.Context, msg *ListShopVariantsByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListShopVariantsByIDs(msg.GetArgs(ctx))
	return err
}

type ListShopVariantsWithProductByIDsQuery struct {
	IDs    []int64
	ShopID int64

	Result *ShopVariantsWithProductResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListShopVariantsWithProductByIDs(ctx context.Context, msg *ListShopVariantsWithProductByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListShopVariantsWithProductByIDs(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *AddShopProductCollectionCommand) command()      {}
func (q *CreateShopCategoryCommand) command()            {}
func (q *CreateShopCollectionCommand) command()          {}
func (q *CreateShopProductCommand) command()             {}
func (q *CreateShopVariantCommand) command()             {}
func (q *DeleteShopCategoryCommand) command()            {}
func (q *DeleteShopProductsCommand) command()            {}
func (q *DeleteShopVariantsCommand) command()            {}
func (q *RemoveShopProductCategoryCommand) command()     {}
func (q *RemoveShopProductCollectionCommand) command()   {}
func (q *UpdateShopCategoryCommand) command()            {}
func (q *UpdateShopCollectionCommand) command()          {}
func (q *UpdateShopProductCategoryCommand) command()     {}
func (q *UpdateShopProductImagesCommand) command()       {}
func (q *UpdateShopProductInfoCommand) command()         {}
func (q *UpdateShopProductStatusCommand) command()       {}
func (q *UpdateShopVariantAttributesCommand) command()   {}
func (q *UpdateShopVariantImagesCommand) command()       {}
func (q *UpdateShopVariantInfoCommand) command()         {}
func (q *UpdateShopVariantStatusCommand) command()       {}
func (q *GetShopCategoryQuery) query()                   {}
func (q *GetShopCollectionQuery) query()                 {}
func (q *GetShopProductByIDQuery) query()                {}
func (q *GetShopProductWithVariantsByIDQuery) query()    {}
func (q *GetShopVariantByIDQuery) query()                {}
func (q *GetShopVariantWithProductByIDQuery) query()     {}
func (q *ListShopCategoriesQuery) query()                {}
func (q *ListShopCollectionsQuery) query()               {}
func (q *ListShopCollectionsByProductIDQuery) query()    {}
func (q *ListShopProductsQuery) query()                  {}
func (q *ListShopProductsByIDsQuery) query()             {}
func (q *ListShopProductsWithVariantsQuery) query()      {}
func (q *ListShopProductsWithVariantsByIDsQuery) query() {}
func (q *ListShopVariantsQuery) query()                  {}
func (q *ListShopVariantsByIDsQuery) query()             {}
func (q *ListShopVariantsWithProductByIDsQuery) query()  {}

// implement conversion

func (q *AddShopProductCollectionCommand) GetArgs(ctx context.Context) (_ context.Context, _ *AddShopProductCollectionArgs) {
	return ctx,
		&AddShopProductCollectionArgs{
			ProductID:     q.ProductID,
			ShopID:        q.ShopID,
			CollectionIDs: q.CollectionIDs,
		}
}

func (q *CreateShopCategoryCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateShopCategoryArgs) {
	return ctx,
		&CreateShopCategoryArgs{
			ID:       q.ID,
			ShopID:   q.ShopID,
			ParentID: q.ParentID,
			Name:     q.Name,
			Status:   q.Status,
		}
}

func (q *CreateShopCollectionCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateShopCollectionArgs) {
	return ctx,
		&CreateShopCollectionArgs{
			ID:          q.ID,
			ShopID:      q.ShopID,
			Name:        q.Name,
			Description: q.Description,
			DescHTML:    q.DescHTML,
			ShortDesc:   q.ShortDesc,
		}
}

func (q *CreateShopProductCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateShopProductArgs) {
	return ctx,
		&CreateShopProductArgs{
			ShopID:          q.ShopID,
			VendorID:        q.VendorID,
			Code:            q.Code,
			Name:            q.Name,
			Unit:            q.Unit,
			ImageURLs:       q.ImageURLs,
			Note:            q.Note,
			DescriptionInfo: q.DescriptionInfo,
			PriceInfo:       q.PriceInfo,
			ProductType:     q.ProductType,
		}
}

func (q *CreateShopVariantCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateShopVariantArgs) {
	return ctx,
		&CreateShopVariantArgs{
			ShopID:          q.ShopID,
			ProductID:       q.ProductID,
			Code:            q.Code,
			Name:            q.Name,
			ImageURLs:       q.ImageURLs,
			Note:            q.Note,
			Attributes:      q.Attributes,
			DescriptionInfo: q.DescriptionInfo,
			PriceInfo:       q.PriceInfo,
		}
}

func (q *DeleteShopCategoryCommand) GetArgs(ctx context.Context) (_ context.Context, _ *DeleteShopCategoryArgs) {
	return ctx,
		&DeleteShopCategoryArgs{
			ID:     q.ID,
			ShopID: q.ShopID,
		}
}

func (q *DeleteShopProductsCommand) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.IDsQueryShopArgs) {
	return ctx,
		&shopping.IDsQueryShopArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
		}
}

func (q *DeleteShopVariantsCommand) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.IDsQueryShopArgs) {
	return ctx,
		&shopping.IDsQueryShopArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
		}
}

func (q *RemoveShopProductCategoryCommand) GetArgs(ctx context.Context) (_ context.Context, _ *RemoveShopProductCategoryArgs) {
	return ctx,
		&RemoveShopProductCategoryArgs{
			ProductID: q.ProductID,
			ShopID:    q.ShopID,
		}
}

func (q *RemoveShopProductCollectionCommand) GetArgs(ctx context.Context) (_ context.Context, _ *RemoveShopProductColelctionArgs) {
	return ctx,
		&RemoveShopProductColelctionArgs{
			ProductID:     q.ProductID,
			ShopID:        q.ShopID,
			CollectionIDs: q.CollectionIDs,
		}
}

func (q *UpdateShopCategoryCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShopCategoryArgs) {
	return ctx,
		&UpdateShopCategoryArgs{
			ID:       q.ID,
			Name:     q.Name,
			ShopID:   q.ShopID,
			ParentID: q.ParentID,
		}
}

func (q *UpdateShopCollectionCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShopCollectionArgs) {
	return ctx,
		&UpdateShopCollectionArgs{
			ID:          q.ID,
			ShopID:      q.ShopID,
			Name:        q.Name,
			Description: q.Description,
			DescHTML:    q.DescHTML,
			ShortDesc:   q.ShortDesc,
		}
}

func (q *UpdateShopProductCategoryCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShopProductCategoryArgs) {
	return ctx,
		&UpdateShopProductCategoryArgs{
			CategoryID: q.CategoryID,
			ShopID:     q.ShopID,
			ProductID:  q.ProductID,
		}
}

func (q *UpdateShopProductImagesCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateImagesArgs) {
	return ctx,
		&UpdateImagesArgs{
			ID:      q.ID,
			ShopID:  q.ShopID,
			Updates: q.Updates,
		}
}

func (q *UpdateShopProductInfoCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShopProductInfoArgs) {
	return ctx,
		&UpdateShopProductInfoArgs{
			ShopID:      q.ShopID,
			ProductID:   q.ProductID,
			Code:        q.Code,
			Name:        q.Name,
			Unit:        q.Unit,
			Note:        q.Note,
			ShortDesc:   q.ShortDesc,
			Description: q.Description,
			DescHTML:    q.DescHTML,
			CostPrice:   q.CostPrice,
			ListPrice:   q.ListPrice,
			RetailPrice: q.RetailPrice,
			ProductType: q.ProductType,
			CategoryID:  q.CategoryID,
			VendorID:    q.VendorID,
		}
}

func (q *UpdateShopProductStatusCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateStatusArgs) {
	return ctx,
		&UpdateStatusArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
			Status: q.Status,
		}
}

func (q *UpdateShopVariantAttributesCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShopVariantAttributes) {
	return ctx,
		&UpdateShopVariantAttributes{
			ShopID:     q.ShopID,
			VariantID:  q.VariantID,
			Attributes: q.Attributes,
		}
}

func (q *UpdateShopVariantImagesCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateImagesArgs) {
	return ctx,
		&UpdateImagesArgs{
			ID:      q.ID,
			ShopID:  q.ShopID,
			Updates: q.Updates,
		}
}

func (q *UpdateShopVariantInfoCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateShopVariantInfoArgs) {
	return ctx,
		&UpdateShopVariantInfoArgs{
			ShopID:       q.ShopID,
			VariantID:    q.VariantID,
			Code:         q.Code,
			Name:         q.Name,
			Note:         q.Note,
			ShortDesc:    q.ShortDesc,
			Descripttion: q.Descripttion,
			DescHTML:     q.DescHTML,
			CostPrice:    q.CostPrice,
			ListPrice:    q.ListPrice,
			RetailPrice:  q.RetailPrice,
		}
}

func (q *UpdateShopVariantStatusCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateStatusArgs) {
	return ctx,
		&UpdateStatusArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
			Status: q.Status,
		}
}

func (q *GetShopCategoryQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShopCategoryArgs) {
	return ctx,
		&GetShopCategoryArgs{
			ID:     q.ID,
			ShopID: q.ShopID,
		}
}

func (q *GetShopCollectionQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShopCollectionArgs) {
	return ctx,
		&GetShopCollectionArgs{
			ID:     q.ID,
			ShopID: q.ShopID,
		}
}

func (q *GetShopProductByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShopProductByIDQueryArgs) {
	return ctx,
		&GetShopProductByIDQueryArgs{
			ProductID: q.ProductID,
			ShopID:    q.ShopID,
		}
}

func (q *GetShopProductWithVariantsByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShopProductByIDQueryArgs) {
	return ctx,
		&GetShopProductByIDQueryArgs{
			ProductID: q.ProductID,
			ShopID:    q.ShopID,
		}
}

func (q *GetShopVariantByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShopVariantByIDQueryArgs) {
	return ctx,
		&GetShopVariantByIDQueryArgs{
			VariantID: q.VariantID,
			ShopID:    q.ShopID,
		}
}

func (q *GetShopVariantWithProductByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShopVariantByIDQueryArgs) {
	return ctx,
		&GetShopVariantByIDQueryArgs{
			VariantID: q.VariantID,
			ShopID:    q.ShopID,
		}
}

func (q *ListShopCategoriesQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.ListQueryShopArgs) {
	return ctx,
		&shopping.ListQueryShopArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListShopCollectionsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.ListQueryShopArgs) {
	return ctx,
		&shopping.ListQueryShopArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListShopCollectionsByProductIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListShopCollectionsByProductIDArgs) {
	return ctx,
		&ListShopCollectionsByProductIDArgs{
			ProductID: q.ProductID,
			ShopID:    q.ShopID,
		}
}

func (q *ListShopProductsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.ListQueryShopArgs) {
	return ctx,
		&shopping.ListQueryShopArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListShopProductsByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.IDsQueryShopArgs) {
	return ctx,
		&shopping.IDsQueryShopArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
		}
}

func (q *ListShopProductsWithVariantsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.ListQueryShopArgs) {
	return ctx,
		&shopping.ListQueryShopArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListShopProductsWithVariantsByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.IDsQueryShopArgs) {
	return ctx,
		&shopping.IDsQueryShopArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
		}
}

func (q *ListShopVariantsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.ListQueryShopArgs) {
	return ctx,
		&shopping.ListQueryShopArgs{
			ShopID:  q.ShopID,
			Paging:  q.Paging,
			Filters: q.Filters,
		}
}

func (q *ListShopVariantsByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.IDsQueryShopArgs) {
	return ctx,
		&shopping.IDsQueryShopArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
		}
}

func (q *ListShopVariantsWithProductByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *shopping.IDsQueryShopArgs) {
	return ctx,
		&shopping.IDsQueryShopArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
		}
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleAddShopProductCollection)
	b.AddHandler(h.HandleCreateShopCategory)
	b.AddHandler(h.HandleCreateShopCollection)
	b.AddHandler(h.HandleCreateShopProduct)
	b.AddHandler(h.HandleCreateShopVariant)
	b.AddHandler(h.HandleDeleteShopCategory)
	b.AddHandler(h.HandleDeleteShopProducts)
	b.AddHandler(h.HandleDeleteShopVariants)
	b.AddHandler(h.HandleRemoveShopProductCategory)
	b.AddHandler(h.HandleRemoveShopProductCollection)
	b.AddHandler(h.HandleUpdateShopCategory)
	b.AddHandler(h.HandleUpdateShopCollection)
	b.AddHandler(h.HandleUpdateShopProductCategory)
	b.AddHandler(h.HandleUpdateShopProductImages)
	b.AddHandler(h.HandleUpdateShopProductInfo)
	b.AddHandler(h.HandleUpdateShopProductStatus)
	b.AddHandler(h.HandleUpdateShopVariantAttributes)
	b.AddHandler(h.HandleUpdateShopVariantImages)
	b.AddHandler(h.HandleUpdateShopVariantInfo)
	b.AddHandler(h.HandleUpdateShopVariantStatus)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetShopCategory)
	b.AddHandler(h.HandleGetShopCollection)
	b.AddHandler(h.HandleGetShopProductByID)
	b.AddHandler(h.HandleGetShopProductWithVariantsByID)
	b.AddHandler(h.HandleGetShopVariantByID)
	b.AddHandler(h.HandleGetShopVariantWithProductByID)
	b.AddHandler(h.HandleListShopCategories)
	b.AddHandler(h.HandleListShopCollections)
	b.AddHandler(h.HandleListShopCollectionsByProductID)
	b.AddHandler(h.HandleListShopProducts)
	b.AddHandler(h.HandleListShopProductsByIDs)
	b.AddHandler(h.HandleListShopProductsWithVariants)
	b.AddHandler(h.HandleListShopProductsWithVariantsByIDs)
	b.AddHandler(h.HandleListShopVariants)
	b.AddHandler(h.HandleListShopVariantsByIDs)
	b.AddHandler(h.HandleListShopVariantsWithProductByIDs)
	return QueryBus{b}
}
