// +build !generator

// Code generated by generator cq. DO NOT EDIT.

package stocktaking

import (
	context "context"

	inventory "etop.vn/api/main/inventory"
	meta "etop.vn/api/meta"
	capi "etop.vn/capi"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus                          { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus                              { return QueryBus{bus} }
func (c CommandBus) Dispatch(ctx context.Context, msg Command) error { return c.bus.Dispatch(ctx, msg) }
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error     { return c.bus.Dispatch(ctx, msg) }
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type CancelStocktakeCommand struct {
	ShopID       int64
	ID           int64
	CancelReason string

	Result *ShopStocktake `json:"-"`
}

func (h AggregateHandler) HandleCancelStocktake(ctx context.Context, msg *CancelStocktakeCommand) (err error) {
	msg.Result, err = h.inner.CancelStocktake(msg.GetArgs(ctx))
	return err
}

type ConfirmStocktakeCommand struct {
	ID                   int64
	ShopID               int64
	ConfirmedBy          int64
	OverStock            bool
	AutoInventoryVoucher inventory.AutoInventoryVoucher

	Result *ShopStocktake `json:"-"`
}

func (h AggregateHandler) HandleConfirmStocktake(ctx context.Context, msg *ConfirmStocktakeCommand) (err error) {
	msg.Result, err = h.inner.ConfirmStocktake(msg.GetArgs(ctx))
	return err
}

type CreateStocktakeCommand struct {
	ShopID        int64
	TotalQuantity int32
	CreatedBy     int64
	Lines         []*StocktakeLine
	Note          string

	Result *ShopStocktake `json:"-"`
}

func (h AggregateHandler) HandleCreateStocktake(ctx context.Context, msg *CreateStocktakeCommand) (err error) {
	msg.Result, err = h.inner.CreateStocktake(msg.GetArgs(ctx))
	return err
}

type UpdateStocktakeCommand struct {
	ShopID        int64
	ID            int64
	TotalQuantity int32
	UpdatedBy     int64
	Lines         []*StocktakeLine
	Note          string

	Result *ShopStocktake `json:"-"`
}

func (h AggregateHandler) HandleUpdateStocktake(ctx context.Context, msg *UpdateStocktakeCommand) (err error) {
	msg.Result, err = h.inner.UpdateStocktake(msg.GetArgs(ctx))
	return err
}

type GetStocktakeByIDQuery struct {
	Id     int64
	ShopID int64

	Result *ShopStocktake `json:"-"`
}

func (h QueryServiceHandler) HandleGetStocktakeByID(ctx context.Context, msg *GetStocktakeByIDQuery) (err error) {
	msg.Result, err = h.inner.GetStocktakeByID(msg.GetArgs(ctx))
	return err
}

type GetStocktakesByIDsQuery struct {
	Ids    []int64
	ShopID int64

	Result []*ShopStocktake `json:"-"`
}

func (h QueryServiceHandler) HandleGetStocktakesByIDs(ctx context.Context, msg *GetStocktakesByIDsQuery) (err error) {
	msg.Result, err = h.inner.GetStocktakesByIDs(msg.GetArgs(ctx))
	return err
}

type ListStocktakeQuery struct {
	Page   meta.Paging
	ShopID int64
	Filter []meta.Filter

	Result *ListStocktakeResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListStocktake(ctx context.Context, msg *ListStocktakeQuery) (err error) {
	msg.Result, err = h.inner.ListStocktake(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CancelStocktakeCommand) command()  {}
func (q *ConfirmStocktakeCommand) command() {}
func (q *CreateStocktakeCommand) command()  {}
func (q *UpdateStocktakeCommand) command()  {}
func (q *GetStocktakeByIDQuery) query()     {}
func (q *GetStocktakesByIDsQuery) query()   {}
func (q *ListStocktakeQuery) query()        {}

// implement conversion

func (q *CancelStocktakeCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CancelStocktakeRequest) {
	return ctx,
		&CancelStocktakeRequest{
			ShopID:       q.ShopID,
			ID:           q.ID,
			CancelReason: q.CancelReason,
		}
}

func (q *CancelStocktakeCommand) SetCancelStocktakeRequest(args *CancelStocktakeRequest) {
	q.ShopID = args.ShopID
	q.ID = args.ID
	q.CancelReason = args.CancelReason
}

func (q *ConfirmStocktakeCommand) GetArgs(ctx context.Context) (_ context.Context, _ *ConfirmStocktakeRequest) {
	return ctx,
		&ConfirmStocktakeRequest{
			ID:                   q.ID,
			ShopID:               q.ShopID,
			ConfirmedBy:          q.ConfirmedBy,
			OverStock:            q.OverStock,
			AutoInventoryVoucher: q.AutoInventoryVoucher,
		}
}

func (q *ConfirmStocktakeCommand) SetConfirmStocktakeRequest(args *ConfirmStocktakeRequest) {
	q.ID = args.ID
	q.ShopID = args.ShopID
	q.ConfirmedBy = args.ConfirmedBy
	q.OverStock = args.OverStock
	q.AutoInventoryVoucher = args.AutoInventoryVoucher
}

func (q *CreateStocktakeCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateStocktakeRequest) {
	return ctx,
		&CreateStocktakeRequest{
			ShopID:        q.ShopID,
			TotalQuantity: q.TotalQuantity,
			CreatedBy:     q.CreatedBy,
			Lines:         q.Lines,
			Note:          q.Note,
		}
}

func (q *CreateStocktakeCommand) SetCreateStocktakeRequest(args *CreateStocktakeRequest) {
	q.ShopID = args.ShopID
	q.TotalQuantity = args.TotalQuantity
	q.CreatedBy = args.CreatedBy
	q.Lines = args.Lines
	q.Note = args.Note
}

func (q *UpdateStocktakeCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateStocktakeRequest) {
	return ctx,
		&UpdateStocktakeRequest{
			ShopID:        q.ShopID,
			ID:            q.ID,
			TotalQuantity: q.TotalQuantity,
			UpdatedBy:     q.UpdatedBy,
			Lines:         q.Lines,
			Note:          q.Note,
		}
}

func (q *UpdateStocktakeCommand) SetUpdateStocktakeRequest(args *UpdateStocktakeRequest) {
	q.ShopID = args.ShopID
	q.ID = args.ID
	q.TotalQuantity = args.TotalQuantity
	q.UpdatedBy = args.UpdatedBy
	q.Lines = args.Lines
	q.Note = args.Note
}

func (q *GetStocktakeByIDQuery) GetArgs(ctx context.Context) (_ context.Context, id int64, shopID int64) {
	return ctx,
		q.Id,
		q.ShopID
}

func (q *GetStocktakesByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, ids []int64, shopID int64) {
	return ctx,
		q.Ids,
		q.ShopID
}

func (q *ListStocktakeQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListStocktakeRequest) {
	return ctx,
		&ListStocktakeRequest{
			Page:   q.Page,
			ShopID: q.ShopID,
			Filter: q.Filter,
		}
}

func (q *ListStocktakeQuery) SetListStocktakeRequest(args *ListStocktakeRequest) {
	q.Page = args.Page
	q.ShopID = args.ShopID
	q.Filter = args.Filter
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCancelStocktake)
	b.AddHandler(h.HandleConfirmStocktake)
	b.AddHandler(h.HandleCreateStocktake)
	b.AddHandler(h.HandleUpdateStocktake)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetStocktakeByID)
	b.AddHandler(h.HandleGetStocktakesByIDs)
	b.AddHandler(h.HandleListStocktake)
	return QueryBus{b}
}
