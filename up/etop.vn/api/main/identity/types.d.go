// Code generated by gen-cmd-query. DO NOT EDIT.

package identity

import (
	context "context"

	meta "etop.vn/api/meta"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus meta.Bus }
type QueryBus struct{ bus meta.Bus }

func (c CommandBus) Dispatch(ctx context.Context, msg Command) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type CreateExternalAccountAhamoveCommand struct {
	OwnerID int64
	Phone   string
	Name    string
	Address string

	Result *ExternalAccountAhamove `json:"-"`
}

type RequestVerifyExternalAccountAhamoveCommand struct {
	OwnerID int64
	Phone   string

	Result *RequestVerifyExternalAccountAhamoveResult `json:"-"`
}

type UpdateExternalAccountAhamoveVerificationCommand struct {
	OwnerID             int64
	Phone               string
	IDCardFrontImg      string
	IDCardBackImg       string
	PortraitImg         string
	WebsiteURL          string
	FanpageURL          string
	CompanyImgs         []string
	BusinessLicenseImgs []string

	Result *ExternalAccountAhamove `json:"-"`
}

type UpdateVerifiedExternalAccountAhamoveCommand struct {
	OwnerID int64
	Phone   string

	Result *ExternalAccountAhamove `json:"-"`
}

type GetExternalAccountAhamoveQuery struct {
	OwnerID int64
	Phone   string

	Result *ExternalAccountAhamove `json:"-"`
}

type GetExternalAccountAhamoveByExternalIDQuery struct {
	ExternalID string

	Result *ExternalAccountAhamove `json:"-"`
}

type GetShopByIDQuery struct {
	ID int64

	Result *GetShopByIDQueryResult `json:"-"`
}

type GetUserByIDQuery struct {
	UserID int64

	Result *User `json:"-"`
}

// implement interfaces

func (q *CreateExternalAccountAhamoveCommand) command()             {}
func (q *RequestVerifyExternalAccountAhamoveCommand) command()      {}
func (q *UpdateExternalAccountAhamoveVerificationCommand) command() {}
func (q *UpdateVerifiedExternalAccountAhamoveCommand) command()     {}
func (q *GetExternalAccountAhamoveQuery) query()                    {}
func (q *GetExternalAccountAhamoveByExternalIDQuery) query()        {}
func (q *GetShopByIDQuery) query()                                  {}
func (q *GetUserByIDQuery) query()                                  {}

// implement conversion

func (q *CreateExternalAccountAhamoveCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateExternalAccountAhamoveArgs) {
	return ctx,
		&CreateExternalAccountAhamoveArgs{
			OwnerID: q.OwnerID,
			Phone:   q.Phone,
			Name:    q.Name,
			Address: q.Address,
		}
}

func (q *RequestVerifyExternalAccountAhamoveCommand) GetArgs(ctx context.Context) (_ context.Context, _ *RequestVerifyExternalAccountAhamoveArgs) {
	return ctx,
		&RequestVerifyExternalAccountAhamoveArgs{
			OwnerID: q.OwnerID,
			Phone:   q.Phone,
		}
}

func (q *UpdateExternalAccountAhamoveVerificationCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateExternalAccountAhamoveVerificationArgs) {
	return ctx,
		&UpdateExternalAccountAhamoveVerificationArgs{
			OwnerID:             q.OwnerID,
			Phone:               q.Phone,
			IDCardFrontImg:      q.IDCardFrontImg,
			IDCardBackImg:       q.IDCardBackImg,
			PortraitImg:         q.PortraitImg,
			WebsiteURL:          q.WebsiteURL,
			FanpageURL:          q.FanpageURL,
			CompanyImgs:         q.CompanyImgs,
			BusinessLicenseImgs: q.BusinessLicenseImgs,
		}
}

func (q *UpdateVerifiedExternalAccountAhamoveCommand) GetArgs(ctx context.Context) (_ context.Context, _ *UpdateVerifiedExternalAccountAhamoveArgs) {
	return ctx,
		&UpdateVerifiedExternalAccountAhamoveArgs{
			OwnerID: q.OwnerID,
			Phone:   q.Phone,
		}
}

func (q *GetExternalAccountAhamoveQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetExternalAccountAhamoveArgs) {
	return ctx,
		&GetExternalAccountAhamoveArgs{
			OwnerID: q.OwnerID,
			Phone:   q.Phone,
		}
}

func (q *GetExternalAccountAhamoveByExternalIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetExternalAccountAhamoveByExternalIDQueryArgs) {
	return ctx,
		&GetExternalAccountAhamoveByExternalIDQueryArgs{
			ExternalID: q.ExternalID,
		}
}

func (q *GetShopByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetShopByIDQueryArgs) {
	return ctx,
		&GetShopByIDQueryArgs{
			ID: q.ID,
		}
}

func (q *GetUserByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetUserByIDQueryArgs) {
	return ctx,
		&GetUserByIDQueryArgs{
			UserID: q.UserID,
		}
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateExternalAccountAhamove)
	b.AddHandler(h.HandleRequestVerifyExternalAccountAhamove)
	b.AddHandler(h.HandleUpdateExternalAccountAhamoveVerification)
	b.AddHandler(h.HandleUpdateVerifiedExternalAccountAhamove)
	return CommandBus{b}
}

func (h AggregateHandler) HandleCreateExternalAccountAhamove(ctx context.Context, msg *CreateExternalAccountAhamoveCommand) error {
	result, err := h.inner.CreateExternalAccountAhamove(msg.GetArgs(ctx))
	msg.Result = result
	return err
}

func (h AggregateHandler) HandleRequestVerifyExternalAccountAhamove(ctx context.Context, msg *RequestVerifyExternalAccountAhamoveCommand) error {
	result, err := h.inner.RequestVerifyExternalAccountAhamove(msg.GetArgs(ctx))
	msg.Result = result
	return err
}

func (h AggregateHandler) HandleUpdateExternalAccountAhamoveVerification(ctx context.Context, msg *UpdateExternalAccountAhamoveVerificationCommand) error {
	result, err := h.inner.UpdateExternalAccountAhamoveVerification(msg.GetArgs(ctx))
	msg.Result = result
	return err
}

func (h AggregateHandler) HandleUpdateVerifiedExternalAccountAhamove(ctx context.Context, msg *UpdateVerifiedExternalAccountAhamoveCommand) error {
	result, err := h.inner.UpdateVerifiedExternalAccountAhamove(msg.GetArgs(ctx))
	msg.Result = result
	return err
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetExternalAccountAhamove)
	b.AddHandler(h.HandleGetExternalAccountAhamoveByExternalID)
	b.AddHandler(h.HandleGetShopByID)
	b.AddHandler(h.HandleGetUserByID)
	return QueryBus{b}
}

func (h QueryServiceHandler) HandleGetExternalAccountAhamove(ctx context.Context, msg *GetExternalAccountAhamoveQuery) error {
	result, err := h.inner.GetExternalAccountAhamove(msg.GetArgs(ctx))
	msg.Result = result
	return err
}

func (h QueryServiceHandler) HandleGetExternalAccountAhamoveByExternalID(ctx context.Context, msg *GetExternalAccountAhamoveByExternalIDQuery) error {
	result, err := h.inner.GetExternalAccountAhamoveByExternalID(msg.GetArgs(ctx))
	msg.Result = result
	return err
}

func (h QueryServiceHandler) HandleGetShopByID(ctx context.Context, msg *GetShopByIDQuery) error {
	result, err := h.inner.GetShopByID(msg.GetArgs(ctx))
	msg.Result = result
	return err
}

func (h QueryServiceHandler) HandleGetUserByID(ctx context.Context, msg *GetUserByIDQuery) error {
	result, err := h.inner.GetUserByID(msg.GetArgs(ctx))
	msg.Result = result
	return err
}
