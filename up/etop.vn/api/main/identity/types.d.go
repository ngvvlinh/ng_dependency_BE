// Code generated by gen-cmd-query. DO NOT EDIT.

package identity

import (
	context "context"

	meta "etop.vn/api/meta"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus meta.Bus }
type QueryBus struct{ bus meta.Bus }

func (c CommandBus) Dispatch(ctx context.Context, msg Command) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type CreateExternalAccountAhamoveCommand struct {
	OwnerID int64
	Phone   string
	Name    string

	Result *ExternalAccountAhamove `json:"-"`
}

type GetExternalAccountAhamoveByPhoneQuery struct {
	Phone   string
	OwnerID int64

	Result *ExternalAccountAhamove `json:"-"`
}

type GetShopByIDQuery struct {
	ID int64

	Result *GetShopByIDQueryResult `json:"-"`
}

// implement interfaces

func (q *CreateExternalAccountAhamoveCommand) command() {}
func (q *GetExternalAccountAhamoveByPhoneQuery) query() {}
func (q *GetShopByIDQuery) query()                      {}

// implement conversion

func (q *CreateExternalAccountAhamoveCommand) GetArgs() *CreateExternalAccountAhamoveArgs {
	return &CreateExternalAccountAhamoveArgs{
		OwnerID: q.OwnerID,
		Phone:   q.Phone,
		Name:    q.Name,
	}
}
func (q *GetExternalAccountAhamoveByPhoneQuery) GetArgs() *GetExternalAccountAhamoveByPhoneArgs {
	return &GetExternalAccountAhamoveByPhoneArgs{
		Phone:   q.Phone,
		OwnerID: q.OwnerID,
	}
}
func (q *GetShopByIDQuery) GetArgs() *GetShopByIDQueryArgs {
	return &GetShopByIDQueryArgs{
		ID: q.ID,
	}
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateExternalAccountAhamove)
	return CommandBus{b}
}

func (h AggregateHandler) HandleCreateExternalAccountAhamove(ctx context.Context, cmd *CreateExternalAccountAhamoveCommand) error {
	result, err := h.inner.CreateExternalAccountAhamove(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetExternalAccountAhamoveByPhone)
	b.AddHandler(h.HandleGetShopByID)
	return QueryBus{b}
}

func (h QueryServiceHandler) HandleGetExternalAccountAhamoveByPhone(ctx context.Context, query *GetExternalAccountAhamoveByPhoneQuery) error {
	result, err := h.inner.GetExternalAccountAhamoveByPhone(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleGetShopByID(ctx context.Context, query *GetShopByIDQuery) error {
	result, err := h.inner.GetShopByID(ctx, query.GetArgs())
	query.Result = result
	return err
}
