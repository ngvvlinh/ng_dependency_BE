// +build !generator

// Code generated by generator api. DO NOT EDIT.

package fbpaging

import (
	context "context"

	meta "etop.vn/api/meta"
	status3 "etop.vn/api/top/types/etc/status3"
	capi "etop.vn/capi"
	dot "etop.vn/capi/dot"
)

type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus     { return QueryBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}
func (b QueryBus) Dispatch(ctx context.Context, msg interface{ query() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateFbPageCommand struct {
	ID                   dot.ID
	ExternalID           string
	FbUserID             dot.ID
	ShopID               dot.ID
	UserID               dot.ID
	ExternalName         string
	ExternalCategory     string
	ExternalCategoryList []*ExternalCategory
	ExternalTasks        []string
	Status               status3.Status

	Result *FbPage `json:"-"`
}

func (h AggregateHandler) HandleCreateFbPage(ctx context.Context, msg *CreateFbPageCommand) (err error) {
	msg.Result, err = h.inner.CreateFbPage(msg.GetArgs(ctx))
	return err
}

type CreateFbPageCombinedCommand struct {
	FbPage         *CreateFbPageArgs
	FbPageInternal *CreateFbPageInternalArgs

	Result *FbPageCombined `json:"-"`
}

func (h AggregateHandler) HandleCreateFbPageCombined(ctx context.Context, msg *CreateFbPageCombinedCommand) (err error) {
	msg.Result, err = h.inner.CreateFbPageCombined(msg.GetArgs(ctx))
	return err
}

type CreateFbPageCombinedsCommand struct {
	ShopID          dot.ID
	UserID          dot.ID
	FbPageCombineds []*CreateFbPageCombinedArgs

	Result []*FbPageCombined `json:"-"`
}

func (h AggregateHandler) HandleCreateFbPageCombineds(ctx context.Context, msg *CreateFbPageCombinedsCommand) (err error) {
	msg.Result, err = h.inner.CreateFbPageCombineds(msg.GetArgs(ctx))
	return err
}

type CreateFbPageInternalCommand struct {
	ID    dot.ID
	Token string

	Result *FbPageInternal `json:"-"`
}

func (h AggregateHandler) HandleCreateFbPageInternal(ctx context.Context, msg *CreateFbPageInternalCommand) (err error) {
	msg.Result, err = h.inner.CreateFbPageInternal(msg.GetArgs(ctx))
	return err
}

type DisableAllFbPagesCommand struct {
	ShopID dot.ID
	UserID dot.ID

	Result int `json:"-"`
}

func (h AggregateHandler) HandleDisableAllFbPages(ctx context.Context, msg *DisableAllFbPagesCommand) (err error) {
	msg.Result, err = h.inner.DisableAllFbPages(msg.GetArgs(ctx))
	return err
}

type DisableFbPagesByIDsCommand struct {
	IDs    []dot.ID
	ShopID dot.ID
	UserID dot.ID

	Result int `json:"-"`
}

func (h AggregateHandler) HandleDisableFbPagesByIDs(ctx context.Context, msg *DisableFbPagesByIDsCommand) (err error) {
	msg.Result, err = h.inner.DisableFbPagesByIDs(msg.GetArgs(ctx))
	return err
}

type GetFbPageByExternalIDQuery struct {
	ExternalID string

	Result *FbPage `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbPageByExternalID(ctx context.Context, msg *GetFbPageByExternalIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbPageByExternalID(msg.GetArgs(ctx))
	return err
}

type GetFbPageByIDQuery struct {
	ID dot.ID

	Result *FbPage `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbPageByID(ctx context.Context, msg *GetFbPageByIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbPageByID(msg.GetArgs(ctx))
	return err
}

type GetFbPageInternalByIDQuery struct {
	ID dot.ID

	Result *FbPageInternal `json:"-"`
}

func (h QueryServiceHandler) HandleGetFbPageInternalByID(ctx context.Context, msg *GetFbPageInternalByIDQuery) (err error) {
	msg.Result, err = h.inner.GetFbPageInternalByID(msg.GetArgs(ctx))
	return err
}

type ListFbPagesQuery struct {
	ShopID   dot.ID
	UserID   dot.ID
	FbUserID dot.NullID
	Paging   meta.Paging
	Filters  meta.Filters

	Result *FbPagesResponse `json:"-"`
}

func (h QueryServiceHandler) HandleListFbPages(ctx context.Context, msg *ListFbPagesQuery) (err error) {
	msg.Result, err = h.inner.ListFbPages(msg.GetArgs(ctx))
	return err
}

type ListFbPagesByIDsQuery struct {
	IDs []dot.ID

	Result []*FbPage `json:"-"`
}

func (h QueryServiceHandler) HandleListFbPagesByIDs(ctx context.Context, msg *ListFbPagesByIDsQuery) (err error) {
	msg.Result, err = h.inner.ListFbPagesByIDs(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateFbPageCommand) command()          {}
func (q *CreateFbPageCombinedCommand) command()  {}
func (q *CreateFbPageCombinedsCommand) command() {}
func (q *CreateFbPageInternalCommand) command()  {}
func (q *DisableAllFbPagesCommand) command()     {}
func (q *DisableFbPagesByIDsCommand) command()   {}

func (q *GetFbPageByExternalIDQuery) query() {}
func (q *GetFbPageByIDQuery) query()         {}
func (q *GetFbPageInternalByIDQuery) query() {}
func (q *ListFbPagesQuery) query()           {}
func (q *ListFbPagesByIDsQuery) query()      {}

// implement conversion

func (q *CreateFbPageCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFbPageArgs) {
	return ctx,
		&CreateFbPageArgs{
			ID:                   q.ID,
			ExternalID:           q.ExternalID,
			FbUserID:             q.FbUserID,
			ShopID:               q.ShopID,
			UserID:               q.UserID,
			ExternalName:         q.ExternalName,
			ExternalCategory:     q.ExternalCategory,
			ExternalCategoryList: q.ExternalCategoryList,
			ExternalTasks:        q.ExternalTasks,
			Status:               q.Status,
		}
}

func (q *CreateFbPageCommand) SetCreateFbPageArgs(args *CreateFbPageArgs) {
	q.ID = args.ID
	q.ExternalID = args.ExternalID
	q.FbUserID = args.FbUserID
	q.ShopID = args.ShopID
	q.UserID = args.UserID
	q.ExternalName = args.ExternalName
	q.ExternalCategory = args.ExternalCategory
	q.ExternalCategoryList = args.ExternalCategoryList
	q.ExternalTasks = args.ExternalTasks
	q.Status = args.Status
}

func (q *CreateFbPageCombinedCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFbPageCombinedArgs) {
	return ctx,
		&CreateFbPageCombinedArgs{
			FbPage:         q.FbPage,
			FbPageInternal: q.FbPageInternal,
		}
}

func (q *CreateFbPageCombinedCommand) SetCreateFbPageCombinedArgs(args *CreateFbPageCombinedArgs) {
	q.FbPage = args.FbPage
	q.FbPageInternal = args.FbPageInternal
}

func (q *CreateFbPageCombinedsCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFbPageCombinedsArgs) {
	return ctx,
		&CreateFbPageCombinedsArgs{
			ShopID:          q.ShopID,
			UserID:          q.UserID,
			FbPageCombineds: q.FbPageCombineds,
		}
}

func (q *CreateFbPageCombinedsCommand) SetCreateFbPageCombinedsArgs(args *CreateFbPageCombinedsArgs) {
	q.ShopID = args.ShopID
	q.UserID = args.UserID
	q.FbPageCombineds = args.FbPageCombineds
}

func (q *CreateFbPageInternalCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateFbPageInternalArgs) {
	return ctx,
		&CreateFbPageInternalArgs{
			ID:    q.ID,
			Token: q.Token,
		}
}

func (q *CreateFbPageInternalCommand) SetCreateFbPageInternalArgs(args *CreateFbPageInternalArgs) {
	q.ID = args.ID
	q.Token = args.Token
}

func (q *DisableAllFbPagesCommand) GetArgs(ctx context.Context) (_ context.Context, _ *DisableAllFbPagesArgs) {
	return ctx,
		&DisableAllFbPagesArgs{
			ShopID: q.ShopID,
			UserID: q.UserID,
		}
}

func (q *DisableAllFbPagesCommand) SetDisableAllFbPagesArgs(args *DisableAllFbPagesArgs) {
	q.ShopID = args.ShopID
	q.UserID = args.UserID
}

func (q *DisableFbPagesByIDsCommand) GetArgs(ctx context.Context) (_ context.Context, _ *DisableFbPagesByIDsArgs) {
	return ctx,
		&DisableFbPagesByIDsArgs{
			IDs:    q.IDs,
			ShopID: q.ShopID,
			UserID: q.UserID,
		}
}

func (q *DisableFbPagesByIDsCommand) SetDisableFbPagesByIDsArgs(args *DisableFbPagesByIDsArgs) {
	q.IDs = args.IDs
	q.ShopID = args.ShopID
	q.UserID = args.UserID
}

func (q *GetFbPageByExternalIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetFbPageByExternalIDArgs) {
	return ctx,
		&GetFbPageByExternalIDArgs{
			ExternalID: q.ExternalID,
		}
}

func (q *GetFbPageByExternalIDQuery) SetGetFbPageByExternalIDArgs(args *GetFbPageByExternalIDArgs) {
	q.ExternalID = args.ExternalID
}

func (q *GetFbPageByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetFbPageByIDArgs) {
	return ctx,
		&GetFbPageByIDArgs{
			ID: q.ID,
		}
}

func (q *GetFbPageByIDQuery) SetGetFbPageByIDArgs(args *GetFbPageByIDArgs) {
	q.ID = args.ID
}

func (q *GetFbPageInternalByIDQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetFbPageInternalByIDArgs) {
	return ctx,
		&GetFbPageInternalByIDArgs{
			ID: q.ID,
		}
}

func (q *GetFbPageInternalByIDQuery) SetGetFbPageInternalByIDArgs(args *GetFbPageInternalByIDArgs) {
	q.ID = args.ID
}

func (q *ListFbPagesQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListFbPagesArgs) {
	return ctx,
		&ListFbPagesArgs{
			ShopID:   q.ShopID,
			UserID:   q.UserID,
			FbUserID: q.FbUserID,
			Paging:   q.Paging,
			Filters:  q.Filters,
		}
}

func (q *ListFbPagesQuery) SetListFbPagesArgs(args *ListFbPagesArgs) {
	q.ShopID = args.ShopID
	q.UserID = args.UserID
	q.FbUserID = args.FbUserID
	q.Paging = args.Paging
	q.Filters = args.Filters
}

func (q *ListFbPagesByIDsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *ListFbPagesByIDsArgs) {
	return ctx,
		&ListFbPagesByIDsArgs{
			IDs: q.IDs,
		}
}

func (q *ListFbPagesByIDsQuery) SetListFbPagesByIDsArgs(args *ListFbPagesByIDsArgs) {
	q.IDs = args.IDs
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateFbPage)
	b.AddHandler(h.HandleCreateFbPageCombined)
	b.AddHandler(h.HandleCreateFbPageCombineds)
	b.AddHandler(h.HandleCreateFbPageInternal)
	b.AddHandler(h.HandleDisableAllFbPages)
	b.AddHandler(h.HandleDisableFbPagesByIDs)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetFbPageByExternalID)
	b.AddHandler(h.HandleGetFbPageByID)
	b.AddHandler(h.HandleGetFbPageInternalByID)
	b.AddHandler(h.HandleListFbPages)
	b.AddHandler(h.HandleListFbPagesByIDs)
	return QueryBus{b}
}
