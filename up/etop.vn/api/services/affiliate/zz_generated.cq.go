// +build !generator

// Code generated by generator cq. DO NOT EDIT.

package affiliate

import (
	context "context"

	meta "etop.vn/api/meta"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus meta.Bus }
type QueryBus struct{ bus meta.Bus }

func (c CommandBus) Dispatch(ctx context.Context, msg Command) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type CreateOrUpdateCommissionSettingCommand struct {
	ProductID int64
	AccountID int64
	Amount    int32
	Unit      string
	Type      string

	Result *CommissionSetting `json:"-"`
}

func (h AggregateHandler) HandleCreateOrUpdateCommissionSetting(ctx context.Context, msg *CreateOrUpdateCommissionSettingCommand) (err error) {
	msg.Result, err = h.inner.CreateOrUpdateCommissionSetting(msg.GetArgs(ctx))
	return err
}

type GetCommissionByProductIDsQuery struct {
	AccountID  int64
	ProductIDs []int64

	Result []*CommissionSetting `json:"-"`
}

func (h QueryServiceHandler) HandleGetCommissionByProductIDs(ctx context.Context, msg *GetCommissionByProductIDsQuery) (err error) {
	msg.Result, err = h.inner.GetCommissionByProductIDs(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateOrUpdateCommissionSettingCommand) command() {}
func (q *GetCommissionByProductIDsQuery) query()           {}

// implement conversion

func (q *CreateOrUpdateCommissionSettingCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateCommissionSettingArgs) {
	return ctx,
		&CreateCommissionSettingArgs{
			ProductID: q.ProductID,
			AccountID: q.AccountID,
			Amount:    q.Amount,
			Unit:      q.Unit,
			Type:      q.Type,
		}
}

func (q *GetCommissionByProductIDsQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetCommissionByProductIDsArgs) {
	return ctx,
		&GetCommissionByProductIDsArgs{
			AccountID:  q.AccountID,
			ProductIDs: q.ProductIDs,
		}
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateOrUpdateCommissionSetting)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetCommissionByProductIDs)
	return QueryBus{b}
}
