// +build !generator

// Code generated by generator api. DO NOT EDIT.

package smslog

import (
	context "context"

	status3 "etop.vn/api/top/types/etc/status3"
	capi "etop.vn/capi"
)

type CommandBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type CreateSmsLogCommand struct {
	ExternalID string
	Phone      string
	Provider   string
	Content    string
	Status     status3.Status
	Error      string

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleCreateSmsLog(ctx context.Context, msg *CreateSmsLogCommand) (err error) {
	return h.inner.CreateSmsLog(msg.GetArgs(ctx))
}

// implement interfaces
func (q *CreateSmsLogCommand) command() {}

// implement conversion

func (q *CreateSmsLogCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CreateSmsArgs) {
	return ctx,
		&CreateSmsArgs{
			ExternalID: q.ExternalID,
			Phone:      q.Phone,
			Provider:   q.Provider,
			Content:    q.Content,
			Status:     q.Status,
			Error:      q.Error,
		}
}

func (q *CreateSmsLogCommand) SetCreateSmsArgs(args *CreateSmsArgs) {
	q.ExternalID = args.ExternalID
	q.Phone = args.Phone
	q.Provider = args.Provider
	q.Content = args.Content
	q.Status = args.Status
	q.Error = args.Error
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateSmsLog)
	return CommandBus{b}
}
