// +build !generator

// Code generated by generator api. DO NOT EDIT.

package vht

import (
	context "context"
	time "time"

	meta "etop.vn/api/meta"
	capi "etop.vn/capi"
	dot "etop.vn/capi/dot"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus capi.Bus }
type QueryBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus                          { return CommandBus{bus} }
func NewQueryBus(bus capi.Bus) QueryBus                              { return QueryBus{bus} }
func (c CommandBus) Dispatch(ctx context.Context, msg Command) error { return c.bus.Dispatch(ctx, msg) }
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error     { return c.bus.Dispatch(ctx, msg) }
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type CreateOrUpdateCallHistoryByCallIDCommand struct {
	Direction       int
	CdrID           string
	CallID          string
	SipCallID       string
	SdkCallID       string
	Cause           string
	Q850Cause       string
	FromExtension   string
	ToExtension     string
	FromNumber      string
	ToNumber        string
	Duration        int
	TimeStarted     time.Time
	TimeConnected   time.Time
	TimeEnded       time.Time
	RecordingPath   string
	RecordingUrl    string
	RecordFileSize  int
	EtopAccountID   dot.ID
	VtigerAccountID string

	Result *VhtCallLog `json:"-"`
}

func (h AggregateHandler) HandleCreateOrUpdateCallHistoryByCallID(ctx context.Context, msg *CreateOrUpdateCallHistoryByCallIDCommand) (err error) {
	msg.Result, err = h.inner.CreateOrUpdateCallHistoryByCallID(msg.GetArgs(ctx))
	return err
}

type CreateOrUpdateCallHistoryBySDKCallIDCommand struct {
	Direction       int
	CdrID           string
	CallID          string
	SipCallID       string
	SdkCallID       string
	Cause           string
	Q850Cause       string
	FromExtension   string
	ToExtension     string
	FromNumber      string
	ToNumber        string
	Duration        int
	TimeStarted     time.Time
	TimeConnected   time.Time
	TimeEnded       time.Time
	RecordingPath   string
	RecordingUrl    string
	RecordFileSize  int
	EtopAccountID   dot.ID
	VtigerAccountID string

	Result *VhtCallLog `json:"-"`
}

func (h AggregateHandler) HandleCreateOrUpdateCallHistoryBySDKCallID(ctx context.Context, msg *CreateOrUpdateCallHistoryBySDKCallIDCommand) (err error) {
	msg.Result, err = h.inner.CreateOrUpdateCallHistoryBySDKCallID(msg.GetArgs(ctx))
	return err
}

type PingServerVhtCommand struct {
	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandlePingServerVht(ctx context.Context, msg *PingServerVhtCommand) (err error) {
	return h.inner.PingServerVht(msg.GetArgs(ctx))
}

type SyncVhtCallHistoriesCommand struct {
	SyncTime time.Time

	Result struct {
	} `json:"-"`
}

func (h AggregateHandler) HandleSyncVhtCallHistories(ctx context.Context, msg *SyncVhtCallHistoriesCommand) (err error) {
	return h.inner.SyncVhtCallHistories(msg.GetArgs(ctx))
}

type GetCallHistoriesQuery struct {
	Paging     *meta.Paging
	TextSearch string

	Result *GetCallHistoriesResponse `json:"-"`
}

func (h QueryServiceHandler) HandleGetCallHistories(ctx context.Context, msg *GetCallHistoriesQuery) (err error) {
	msg.Result, err = h.inner.GetCallHistories(msg.GetArgs(ctx))
	return err
}

type GetLastCallHistoryQuery struct {
	Offset int
	Limit  int
	Sort   []string

	Result *VhtCallLog `json:"-"`
}

func (h QueryServiceHandler) HandleGetLastCallHistory(ctx context.Context, msg *GetLastCallHistoryQuery) (err error) {
	msg.Result, err = h.inner.GetLastCallHistory(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *CreateOrUpdateCallHistoryByCallIDCommand) command()    {}
func (q *CreateOrUpdateCallHistoryBySDKCallIDCommand) command() {}
func (q *PingServerVhtCommand) command()                        {}
func (q *SyncVhtCallHistoriesCommand) command()                 {}
func (q *GetCallHistoriesQuery) query()                         {}
func (q *GetLastCallHistoryQuery) query()                       {}

// implement conversion

func (q *CreateOrUpdateCallHistoryByCallIDCommand) GetArgs(ctx context.Context) (_ context.Context, _ *VhtCallLog) {
	return ctx,
		&VhtCallLog{
			Direction:       q.Direction,
			CdrID:           q.CdrID,
			CallID:          q.CallID,
			SipCallID:       q.SipCallID,
			SdkCallID:       q.SdkCallID,
			Cause:           q.Cause,
			Q850Cause:       q.Q850Cause,
			FromExtension:   q.FromExtension,
			ToExtension:     q.ToExtension,
			FromNumber:      q.FromNumber,
			ToNumber:        q.ToNumber,
			Duration:        q.Duration,
			TimeStarted:     q.TimeStarted,
			TimeConnected:   q.TimeConnected,
			TimeEnded:       q.TimeEnded,
			RecordingPath:   q.RecordingPath,
			RecordingUrl:    q.RecordingUrl,
			RecordFileSize:  q.RecordFileSize,
			EtopAccountID:   q.EtopAccountID,
			VtigerAccountID: q.VtigerAccountID,
		}
}

func (q *CreateOrUpdateCallHistoryByCallIDCommand) SetVhtCallLog(args *VhtCallLog) {
	q.Direction = args.Direction
	q.CdrID = args.CdrID
	q.CallID = args.CallID
	q.SipCallID = args.SipCallID
	q.SdkCallID = args.SdkCallID
	q.Cause = args.Cause
	q.Q850Cause = args.Q850Cause
	q.FromExtension = args.FromExtension
	q.ToExtension = args.ToExtension
	q.FromNumber = args.FromNumber
	q.ToNumber = args.ToNumber
	q.Duration = args.Duration
	q.TimeStarted = args.TimeStarted
	q.TimeConnected = args.TimeConnected
	q.TimeEnded = args.TimeEnded
	q.RecordingPath = args.RecordingPath
	q.RecordingUrl = args.RecordingUrl
	q.RecordFileSize = args.RecordFileSize
	q.EtopAccountID = args.EtopAccountID
	q.VtigerAccountID = args.VtigerAccountID
}

func (q *CreateOrUpdateCallHistoryBySDKCallIDCommand) GetArgs(ctx context.Context) (_ context.Context, _ *VhtCallLog) {
	return ctx,
		&VhtCallLog{
			Direction:       q.Direction,
			CdrID:           q.CdrID,
			CallID:          q.CallID,
			SipCallID:       q.SipCallID,
			SdkCallID:       q.SdkCallID,
			Cause:           q.Cause,
			Q850Cause:       q.Q850Cause,
			FromExtension:   q.FromExtension,
			ToExtension:     q.ToExtension,
			FromNumber:      q.FromNumber,
			ToNumber:        q.ToNumber,
			Duration:        q.Duration,
			TimeStarted:     q.TimeStarted,
			TimeConnected:   q.TimeConnected,
			TimeEnded:       q.TimeEnded,
			RecordingPath:   q.RecordingPath,
			RecordingUrl:    q.RecordingUrl,
			RecordFileSize:  q.RecordFileSize,
			EtopAccountID:   q.EtopAccountID,
			VtigerAccountID: q.VtigerAccountID,
		}
}

func (q *CreateOrUpdateCallHistoryBySDKCallIDCommand) SetVhtCallLog(args *VhtCallLog) {
	q.Direction = args.Direction
	q.CdrID = args.CdrID
	q.CallID = args.CallID
	q.SipCallID = args.SipCallID
	q.SdkCallID = args.SdkCallID
	q.Cause = args.Cause
	q.Q850Cause = args.Q850Cause
	q.FromExtension = args.FromExtension
	q.ToExtension = args.ToExtension
	q.FromNumber = args.FromNumber
	q.ToNumber = args.ToNumber
	q.Duration = args.Duration
	q.TimeStarted = args.TimeStarted
	q.TimeConnected = args.TimeConnected
	q.TimeEnded = args.TimeEnded
	q.RecordingPath = args.RecordingPath
	q.RecordingUrl = args.RecordingUrl
	q.RecordFileSize = args.RecordFileSize
	q.EtopAccountID = args.EtopAccountID
	q.VtigerAccountID = args.VtigerAccountID
}

func (q *PingServerVhtCommand) GetArgs(ctx context.Context) (_ context.Context, _ *meta.Empty) {
	return ctx,
		&meta.Empty{}
}

func (q *PingServerVhtCommand) SetEmpty(args *meta.Empty) {
}

func (q *SyncVhtCallHistoriesCommand) GetArgs(ctx context.Context) (_ context.Context, _ *SyncVhtCallHistoriesArgs) {
	return ctx,
		&SyncVhtCallHistoriesArgs{
			SyncTime: q.SyncTime,
		}
}

func (q *SyncVhtCallHistoriesCommand) SetSyncVhtCallHistoriesArgs(args *SyncVhtCallHistoriesArgs) {
	q.SyncTime = args.SyncTime
}

func (q *GetCallHistoriesQuery) GetArgs(ctx context.Context) (_ context.Context, _ *GetCallHistoriesArgs) {
	return ctx,
		&GetCallHistoriesArgs{
			Paging:     q.Paging,
			TextSearch: q.TextSearch,
		}
}

func (q *GetCallHistoriesQuery) SetGetCallHistoriesArgs(args *GetCallHistoriesArgs) {
	q.Paging = args.Paging
	q.TextSearch = args.TextSearch
}

func (q *GetLastCallHistoryQuery) GetArgs(ctx context.Context) (_ context.Context, _ meta.Paging) {
	return ctx,
		meta.Paging{
			Offset: q.Offset,
			Limit:  q.Limit,
			Sort:   q.Sort,
		}
}

func (q *GetLastCallHistoryQuery) SetPaging(args meta.Paging) {
	q.Offset = args.Offset
	q.Limit = args.Limit
	q.Sort = args.Sort
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleCreateOrUpdateCallHistoryByCallID)
	b.AddHandler(h.HandleCreateOrUpdateCallHistoryBySDKCallID)
	b.AddHandler(h.HandlePingServerVht)
	b.AddHandler(h.HandleSyncVhtCallHistories)
	return CommandBus{b}
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetCallHistories)
	b.AddHandler(h.HandleGetLastCallHistory)
	return QueryBus{b}
}
