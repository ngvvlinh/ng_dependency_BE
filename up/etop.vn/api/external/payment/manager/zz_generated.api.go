// +build !generator

// Code generated by generator api. DO NOT EDIT.

package manager

import (
	context "context"

	payment_provider "etop.vn/api/top/types/etc/payment_provider"
	payment_source "etop.vn/api/top/types/etc/payment_source"
	capi "etop.vn/capi"
)

type CommandBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type BuildUrlConnectPaymentGatewayCommand struct {
	OrderID           string
	Desc              string
	ReturnURL         string
	CancelURL         string
	TransactionAmount int
	Provider          payment_provider.PaymentProvider

	Result string `json:"-"`
}

func (h AggregateHandler) HandleBuildUrlConnectPaymentGateway(ctx context.Context, msg *BuildUrlConnectPaymentGatewayCommand) (err error) {
	msg.Result, err = h.inner.BuildUrlConnectPaymentGateway(msg.GetArgs(ctx))
	return err
}

type CancelTransactionCommand struct {
	OrderID               string
	ExternalTransactionID string
	TransactionAmount     int
	Reason                string
	Provider              payment_provider.PaymentProvider

	Result *CancelTransactionResult `json:"-"`
}

func (h AggregateHandler) HandleCancelTransaction(ctx context.Context, msg *CancelTransactionCommand) (err error) {
	msg.Result, err = h.inner.CancelTransaction(msg.GetArgs(ctx))
	return err
}

type CheckReturnDataCommand struct {
	ID                    string
	Code                  string
	PaymentStatus         string
	Amount                int
	ExternalTransactionID string
	Provider              payment_provider.PaymentProvider

	Result *CheckReturnDataResult `json:"-"`
}

func (h AggregateHandler) HandleCheckReturnData(ctx context.Context, msg *CheckReturnDataCommand) (err error) {
	msg.Result, err = h.inner.CheckReturnData(msg.GetArgs(ctx))
	return err
}

type GenerateCodeCommand struct {
	PaymentSource payment_source.PaymentSource
	ID            string

	Result string `json:"-"`
}

func (h AggregateHandler) HandleGenerateCode(ctx context.Context, msg *GenerateCodeCommand) (err error) {
	msg.Result, err = h.inner.GenerateCode(msg.GetArgs(ctx))
	return err
}

type GetTransactionCommand struct {
	OrderID  string
	Provider payment_provider.PaymentProvider

	Result *GetTransactionResult `json:"-"`
}

func (h AggregateHandler) HandleGetTransaction(ctx context.Context, msg *GetTransactionCommand) (err error) {
	msg.Result, err = h.inner.GetTransaction(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *BuildUrlConnectPaymentGatewayCommand) command() {}
func (q *CancelTransactionCommand) command()             {}
func (q *CheckReturnDataCommand) command()               {}
func (q *GenerateCodeCommand) command()                  {}
func (q *GetTransactionCommand) command()                {}

// implement conversion

func (q *BuildUrlConnectPaymentGatewayCommand) GetArgs(ctx context.Context) (_ context.Context, _ *ConnectPaymentGatewayArgs) {
	return ctx,
		&ConnectPaymentGatewayArgs{
			OrderID:           q.OrderID,
			Desc:              q.Desc,
			ReturnURL:         q.ReturnURL,
			CancelURL:         q.CancelURL,
			TransactionAmount: q.TransactionAmount,
			Provider:          q.Provider,
		}
}

func (q *BuildUrlConnectPaymentGatewayCommand) SetConnectPaymentGatewayArgs(args *ConnectPaymentGatewayArgs) {
	q.OrderID = args.OrderID
	q.Desc = args.Desc
	q.ReturnURL = args.ReturnURL
	q.CancelURL = args.CancelURL
	q.TransactionAmount = args.TransactionAmount
	q.Provider = args.Provider
}

func (q *CancelTransactionCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CancelTransactionArgs) {
	return ctx,
		&CancelTransactionArgs{
			OrderID:               q.OrderID,
			ExternalTransactionID: q.ExternalTransactionID,
			TransactionAmount:     q.TransactionAmount,
			Reason:                q.Reason,
			Provider:              q.Provider,
		}
}

func (q *CancelTransactionCommand) SetCancelTransactionArgs(args *CancelTransactionArgs) {
	q.OrderID = args.OrderID
	q.ExternalTransactionID = args.ExternalTransactionID
	q.TransactionAmount = args.TransactionAmount
	q.Reason = args.Reason
	q.Provider = args.Provider
}

func (q *CheckReturnDataCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CheckReturnDataArgs) {
	return ctx,
		&CheckReturnDataArgs{
			ID:                    q.ID,
			Code:                  q.Code,
			PaymentStatus:         q.PaymentStatus,
			Amount:                q.Amount,
			ExternalTransactionID: q.ExternalTransactionID,
			Provider:              q.Provider,
		}
}

func (q *CheckReturnDataCommand) SetCheckReturnDataArgs(args *CheckReturnDataArgs) {
	q.ID = args.ID
	q.Code = args.Code
	q.PaymentStatus = args.PaymentStatus
	q.Amount = args.Amount
	q.ExternalTransactionID = args.ExternalTransactionID
	q.Provider = args.Provider
}

func (q *GenerateCodeCommand) GetArgs(ctx context.Context) (_ context.Context, _ *GenerateCodeArgs) {
	return ctx,
		&GenerateCodeArgs{
			PaymentSource: q.PaymentSource,
			ID:            q.ID,
		}
}

func (q *GenerateCodeCommand) SetGenerateCodeArgs(args *GenerateCodeArgs) {
	q.PaymentSource = args.PaymentSource
	q.ID = args.ID
}

func (q *GetTransactionCommand) GetArgs(ctx context.Context) (_ context.Context, _ *GetTransactionArgs) {
	return ctx,
		&GetTransactionArgs{
			OrderID:  q.OrderID,
			Provider: q.Provider,
		}
}

func (q *GetTransactionCommand) SetGetTransactionArgs(args *GetTransactionArgs) {
	q.OrderID = args.OrderID
	q.Provider = args.Provider
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleBuildUrlConnectPaymentGateway)
	b.AddHandler(h.HandleCancelTransaction)
	b.AddHandler(h.HandleCheckReturnData)
	b.AddHandler(h.HandleGenerateCode)
	b.AddHandler(h.HandleGetTransaction)
	return CommandBus{b}
}
