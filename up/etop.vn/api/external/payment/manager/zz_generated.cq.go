// Code generated by generator cq. DO NOT EDIT.

// +build !generator

package manager

import (
	context "context"

	payment "etop.vn/api/external/payment"
	meta "etop.vn/api/meta"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus meta.Bus }
type QueryBus struct{ bus meta.Bus }

func (c CommandBus) Dispatch(ctx context.Context, msg Command) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type BuildUrlConnectPaymentGatewayCommand struct {
	OrderID           string
	Desc              string
	ReturnURL         string
	CancelURL         string
	TransactionAmount int
	Provider          payment.PaymentProvider

	Result string `json:"-"`
}

func (h AggregateHandler) HandleBuildUrlConnectPaymentGateway(ctx context.Context, msg *BuildUrlConnectPaymentGatewayCommand) (err error) {
	msg.Result, err = h.inner.BuildUrlConnectPaymentGateway(msg.GetArgs(ctx))
	return err
}

type CancelTransactionCommand struct {
	OrderID               string
	ExternalTransactionID string
	TransactionAmount     int
	Reason                string
	Provider              payment.PaymentProvider

	Result *CancelTransactionResult `json:"-"`
}

func (h AggregateHandler) HandleCancelTransaction(ctx context.Context, msg *CancelTransactionCommand) (err error) {
	msg.Result, err = h.inner.CancelTransaction(msg.GetArgs(ctx))
	return err
}

type GetTransactionCommand struct {
	OrderID  string
	Provider payment.PaymentProvider

	Result *GetTransactionResult `json:"-"`
}

func (h AggregateHandler) HandleGetTransaction(ctx context.Context, msg *GetTransactionCommand) (err error) {
	msg.Result, err = h.inner.GetTransaction(msg.GetArgs(ctx))
	return err
}

// implement interfaces

func (q *BuildUrlConnectPaymentGatewayCommand) command() {}
func (q *CancelTransactionCommand) command()             {}
func (q *GetTransactionCommand) command()                {}

// implement conversion

func (q *BuildUrlConnectPaymentGatewayCommand) GetArgs(ctx context.Context) (_ context.Context, _ *ConnectPaymentGatewayArgs) {
	return ctx,
		&ConnectPaymentGatewayArgs{
			OrderID:           q.OrderID,
			Desc:              q.Desc,
			ReturnURL:         q.ReturnURL,
			CancelURL:         q.CancelURL,
			TransactionAmount: q.TransactionAmount,
			Provider:          q.Provider,
		}
}

func (q *CancelTransactionCommand) GetArgs(ctx context.Context) (_ context.Context, _ *CancelTransactionArgs) {
	return ctx,
		&CancelTransactionArgs{
			OrderID:               q.OrderID,
			ExternalTransactionID: q.ExternalTransactionID,
			TransactionAmount:     q.TransactionAmount,
			Reason:                q.Reason,
			Provider:              q.Provider,
		}
}

func (q *GetTransactionCommand) GetArgs(ctx context.Context) (_ context.Context, _ *GetTransactionArgs) {
	return ctx,
		&GetTransactionArgs{
			OrderID:  q.OrderID,
			Provider: q.Provider,
		}
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleBuildUrlConnectPaymentGateway)
	b.AddHandler(h.HandleCancelTransaction)
	b.AddHandler(h.HandleGetTransaction)
	return CommandBus{b}
}
