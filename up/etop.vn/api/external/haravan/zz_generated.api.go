// +build !generator

// Code generated by generator api. DO NOT EDIT.

package haravan

import (
	context "context"

	meta "etop.vn/api/meta"
	capi "etop.vn/capi"
	dot "etop.vn/capi/dot"
)

type CommandBus struct{ bus capi.Bus }

func NewCommandBus(bus capi.Bus) CommandBus { return CommandBus{bus} }

func (b CommandBus) Dispatch(ctx context.Context, msg interface{ command() }) error {
	return b.bus.Dispatch(ctx, msg)
}

type SendUpdateExternalFulfillmentStateCommand struct {
	FulfillmentID dot.ID

	Result *meta.Empty `json:"-"`
}

func (h AggregateHandler) HandleSendUpdateExternalFulfillmentState(ctx context.Context, msg *SendUpdateExternalFulfillmentStateCommand) (err error) {
	msg.Result, err = h.inner.SendUpdateExternalFulfillmentState(msg.GetArgs(ctx))
	return err
}

type SendUpdateExternalPaymentStatusCommand struct {
	FulfillmentID dot.ID

	Result *meta.Empty `json:"-"`
}

func (h AggregateHandler) HandleSendUpdateExternalPaymentStatus(ctx context.Context, msg *SendUpdateExternalPaymentStatusCommand) (err error) {
	msg.Result, err = h.inner.SendUpdateExternalPaymentStatus(msg.GetArgs(ctx))
	return err
}

// implement interfaces
func (q *SendUpdateExternalFulfillmentStateCommand) command() {}
func (q *SendUpdateExternalPaymentStatusCommand) command()    {}

// implement conversion

func (q *SendUpdateExternalFulfillmentStateCommand) GetArgs(ctx context.Context) (_ context.Context, _ *SendUpdateExternalFulfillmentStateArgs) {
	return ctx,
		&SendUpdateExternalFulfillmentStateArgs{
			FulfillmentID: q.FulfillmentID,
		}
}

func (q *SendUpdateExternalFulfillmentStateCommand) SetSendUpdateExternalFulfillmentStateArgs(args *SendUpdateExternalFulfillmentStateArgs) {
	q.FulfillmentID = args.FulfillmentID
}

func (q *SendUpdateExternalPaymentStatusCommand) GetArgs(ctx context.Context) (_ context.Context, _ *SendUpdateExternalPaymentStatusArgs) {
	return ctx,
		&SendUpdateExternalPaymentStatusArgs{
			FulfillmentID: q.FulfillmentID,
		}
}

func (q *SendUpdateExternalPaymentStatusCommand) SetSendUpdateExternalPaymentStatusArgs(args *SendUpdateExternalPaymentStatusArgs) {
	q.FulfillmentID = args.FulfillmentID
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	capi.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleSendUpdateExternalFulfillmentState)
	b.AddHandler(h.HandleSendUpdateExternalPaymentStatus)
	return CommandBus{b}
}
