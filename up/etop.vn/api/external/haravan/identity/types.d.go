// Code generated by gen-cmd-query. DO NOT EDIT.

package identity

import (
	context "context"

	meta "etop.vn/api/meta"
	metav1 "etop.vn/api/meta/v1"
)

type Command interface{ command() }
type Query interface{ query() }
type CommandBus struct{ bus meta.Bus }
type QueryBus struct{ bus meta.Bus }

func (c CommandBus) Dispatch(ctx context.Context, msg Command) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c QueryBus) Dispatch(ctx context.Context, msg Query) error {
	return c.bus.Dispatch(ctx, msg)
}
func (c CommandBus) DispatchAll(ctx context.Context, msgs ...Command) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}
func (c QueryBus) DispatchAll(ctx context.Context, msgs ...Query) error {
	for _, msg := range msgs {
		if err := c.bus.Dispatch(ctx, msg); err != nil {
			return err
		}
	}
	return nil
}

type ConnectCarrierServiceExternalAccountHaravanCommand struct {
	ShopID int64

	Result *metav1.Empty `json:"-"`
}

type CreateExternalAccountHaravanCommand struct {
	ShopID      int64
	Subdomain   string
	RedirectURI string
	Code        string

	Result *ExternalAccountHaravan `json:"-"`
}

type DeleteConnectedCarrierServiceExternalAccountHaravanCommand struct {
	ShopID int64

	Result *metav1.Empty `json:"-"`
}

type UpdateExternalAccountHaravanTokenCommand struct {
	ShopID      int64
	Subdomain   string
	RedirectURI string
	Code        string

	Result *ExternalAccountHaravan `json:"-"`
}

type GetExternalAccountHaravanByShopIDQuery struct {
	ShopID int64

	Result *ExternalAccountHaravan `json:"-"`
}

type GetExternalAccountHaravanByXShopIDQuery struct {
	ExternalShopID int

	Result *ExternalAccountHaravan `json:"-"`
}

// implement interfaces

func (q *ConnectCarrierServiceExternalAccountHaravanCommand) command()         {}
func (q *CreateExternalAccountHaravanCommand) command()                        {}
func (q *DeleteConnectedCarrierServiceExternalAccountHaravanCommand) command() {}
func (q *UpdateExternalAccountHaravanTokenCommand) command()                   {}
func (q *GetExternalAccountHaravanByShopIDQuery) query()                       {}
func (q *GetExternalAccountHaravanByXShopIDQuery) query()                      {}

// implement conversion

func (q *ConnectCarrierServiceExternalAccountHaravanCommand) GetArgs() *ConnectCarrierServiceExternalAccountHaravanArgs {
	return &ConnectCarrierServiceExternalAccountHaravanArgs{
		ShopID: q.ShopID,
	}
}
func (q *CreateExternalAccountHaravanCommand) GetArgs() *CreateExternalAccountHaravanArgs {
	return &CreateExternalAccountHaravanArgs{
		ShopID:      q.ShopID,
		Subdomain:   q.Subdomain,
		RedirectURI: q.RedirectURI,
		Code:        q.Code,
	}
}
func (q *DeleteConnectedCarrierServiceExternalAccountHaravanCommand) GetArgs() *DeleteConnectedCarrierServiceExternalAccountHaravanArgs {
	return &DeleteConnectedCarrierServiceExternalAccountHaravanArgs{
		ShopID: q.ShopID,
	}
}
func (q *UpdateExternalAccountHaravanTokenCommand) GetArgs() *UpdateExternalAccountHaravanTokenArgs {
	return &UpdateExternalAccountHaravanTokenArgs{
		ShopID:      q.ShopID,
		Subdomain:   q.Subdomain,
		RedirectURI: q.RedirectURI,
		Code:        q.Code,
	}
}
func (q *GetExternalAccountHaravanByShopIDQuery) GetArgs() *GetExternalAccountHaravanByShopIDQueryArgs {
	return &GetExternalAccountHaravanByShopIDQueryArgs{
		ShopID: q.ShopID,
	}
}
func (q *GetExternalAccountHaravanByXShopIDQuery) GetArgs() *GetExternalAccountHaravanByXShopIDQueryArgs {
	return &GetExternalAccountHaravanByXShopIDQueryArgs{
		ExternalShopID: q.ExternalShopID,
	}
}

// implement dispatching

type AggregateHandler struct {
	inner Aggregate
}

func NewAggregateHandler(service Aggregate) AggregateHandler { return AggregateHandler{service} }

func (h AggregateHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) CommandBus {
	b.AddHandler(h.HandleConnectCarrierServiceExternalAccountHaravan)
	b.AddHandler(h.HandleCreateExternalAccountHaravan)
	b.AddHandler(h.HandleDeleteConnectedCarrierServiceExternalAccountHaravan)
	b.AddHandler(h.HandleUpdateExternalAccountHaravanToken)
	return CommandBus{b}
}

func (h AggregateHandler) HandleConnectCarrierServiceExternalAccountHaravan(ctx context.Context, cmd *ConnectCarrierServiceExternalAccountHaravanCommand) error {
	result, err := h.inner.ConnectCarrierServiceExternalAccountHaravan(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleCreateExternalAccountHaravan(ctx context.Context, cmd *CreateExternalAccountHaravanCommand) error {
	result, err := h.inner.CreateExternalAccountHaravan(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleDeleteConnectedCarrierServiceExternalAccountHaravan(ctx context.Context, cmd *DeleteConnectedCarrierServiceExternalAccountHaravanCommand) error {
	result, err := h.inner.DeleteConnectedCarrierServiceExternalAccountHaravan(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

func (h AggregateHandler) HandleUpdateExternalAccountHaravanToken(ctx context.Context, cmd *UpdateExternalAccountHaravanTokenCommand) error {
	result, err := h.inner.UpdateExternalAccountHaravanToken(ctx, cmd.GetArgs())
	cmd.Result = result
	return err
}

type QueryServiceHandler struct {
	inner QueryService
}

func NewQueryServiceHandler(service QueryService) QueryServiceHandler {
	return QueryServiceHandler{service}
}

func (h QueryServiceHandler) RegisterHandlers(b interface {
	meta.Bus
	AddHandler(handler interface{})
}) QueryBus {
	b.AddHandler(h.HandleGetExternalAccountHaravanByShopID)
	b.AddHandler(h.HandleGetExternalAccountHaravanByXShopID)
	return QueryBus{b}
}

func (h QueryServiceHandler) HandleGetExternalAccountHaravanByShopID(ctx context.Context, query *GetExternalAccountHaravanByShopIDQuery) error {
	result, err := h.inner.GetExternalAccountHaravanByShopID(ctx, query.GetArgs())
	query.Result = result
	return err
}

func (h QueryServiceHandler) HandleGetExternalAccountHaravanByXShopID(ctx context.Context, query *GetExternalAccountHaravanByXShopIDQuery) error {
	result, err := h.inner.GetExternalAccountHaravanByXShopID(ctx, query.GetArgs())
	query.Result = result
	return err
}
