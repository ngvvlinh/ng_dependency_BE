// package supplier generated by wrapper_gen. DO NOT EDIT.
package supplierW

import (
	"context"
	"net/http"
	"time"

	"github.com/twitchtv/twirp"

	cm "etop.vn/backend/pb/common"
	etop "etop.vn/backend/pb/etop"
	order "etop.vn/backend/pb/etop/order"
	supplier "etop.vn/backend/pb/etop/supplier"
	common "etop.vn/backend/pkg/common"
	"etop.vn/backend/pkg/common/bus"
	"etop.vn/backend/pkg/common/l"
	cmWrapper "etop.vn/backend/pkg/common/wrapper"
	"etop.vn/backend/pkg/etop/authorize/claims"
	"etop.vn/backend/pkg/etop/authorize/middleware"
)

var ll = l.New()

var Client Supplier

type Supplier interface {
	supplier.MiscService
	supplier.KiotvietService
	supplier.CategoryService
	supplier.BrandService
	supplier.ProductService
	supplier.PriceService
	supplier.OrderService
	supplier.FulfillmentService
	supplier.AccountService
}

type SupplierClient struct {
	_MiscService        supplier.MiscService
	_KiotvietService    supplier.KiotvietService
	_CategoryService    supplier.CategoryService
	_BrandService       supplier.BrandService
	_ProductService     supplier.ProductService
	_PriceService       supplier.PriceService
	_OrderService       supplier.OrderService
	_FulfillmentService supplier.FulfillmentService
	_AccountService     supplier.AccountService
}

func NewSupplierClient(addr string, client *http.Client) Supplier {
	if client == nil {
		client = &http.Client{
			Timeout: 10 * time.Second,
		}
	}

	addr = "http://" + addr
	return &SupplierClient{
		_MiscService:        supplier.NewMiscServiceProtobufClient(addr, client),
		_KiotvietService:    supplier.NewKiotvietServiceProtobufClient(addr, client),
		_CategoryService:    supplier.NewCategoryServiceProtobufClient(addr, client),
		_BrandService:       supplier.NewBrandServiceProtobufClient(addr, client),
		_ProductService:     supplier.NewProductServiceProtobufClient(addr, client),
		_PriceService:       supplier.NewPriceServiceProtobufClient(addr, client),
		_OrderService:       supplier.NewOrderServiceProtobufClient(addr, client),
		_FulfillmentService: supplier.NewFulfillmentServiceProtobufClient(addr, client),
		_AccountService:     supplier.NewAccountServiceProtobufClient(addr, client),
	}
}

func ConnectSupplierService(addr string, client *http.Client) error {
	Client = NewSupplierClient(addr, client)
	bus.AddHandler("client", func(ctx context.Context, q *VersionInfoEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *ConnectKiotvietEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *ConnectKiotvietTestEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *GetCategoriesEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *GetCategoriesByIDsEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *GetCategoryEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *CreateBrandEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *DeleteBrandEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *GetBrandEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *GetBrandsEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *GetBrandsByIDsEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *UpdateBrandEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *UpdateBrandImagesEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *GetProductEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *GetProductsEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *GetProductsByIDsEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *GetVariantEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *GetVariantsEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *GetVariantsByIDsEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *UpdateProductEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *UpdateProductImagesEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *UpdateVariantEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *UpdateVariantImagesEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *UpdateVariantsEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *UpdateVariantsStatusEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *GetPriceRulesEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *UpdatePriceRulesEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *GetOrderEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *GetOrdersEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *GetOrdersByIDsEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *UpdateOrdersStatusEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *GetFulfillmentEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *GetFulfillmentsEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *SetDefaultAddressEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *UpdateSupplierEndpoint) error { panic("Unexpected") })
	ctx, _ := context.WithTimeout(context.Background(), 10*time.Second)
	_, err := Client.VersionInfo(ctx, &cm.Empty{})
	if err == nil {
		ll.S.Infof("Connected to SupplierService at %v", addr)
	}
	return err
}

func MustConnectSupplierService(addr string, client *http.Client) {
	err := ConnectSupplierService(addr, client)
	if err != nil {
		ll.Fatal("Unable to connect Supplier", l.Error(err))
	}
}

type (
	EmptyClaim    = claims.EmptyClaim
	UserClaim     = claims.UserClaim
	AdminClaim    = claims.AdminClaim
	PartnerClaim  = claims.PartnerClaim
	ShopClaim     = claims.ShopClaim
	SupplierClaim = claims.SupplierClaim
)

func (c *SupplierClient) VersionInfo(ctx context.Context, in *cm.Empty) (*cm.VersionInfoResponse, error) {
	resp, err := c._MiscService.VersionInfo(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) ConnectKiotviet(ctx context.Context, in *supplier.ConnectKiotvietRequest) (*supplier.ConnectKiotvietResponse, error) {
	resp, err := c._KiotvietService.ConnectKiotviet(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) ConnectKiotvietTest(ctx context.Context, in *supplier.ConnectKiotvietTestRequest) (*supplier.ConnectKiotvietTestResponse, error) {
	resp, err := c._KiotvietService.ConnectKiotvietTest(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) GetCategories(ctx context.Context, in *supplier.GetCategoriesRequest) (*supplier.CategoriesResponse, error) {
	resp, err := c._CategoryService.GetCategories(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) GetCategoriesByIDs(ctx context.Context, in *cm.IDsRequest) (*supplier.CategoriesResponse, error) {
	resp, err := c._CategoryService.GetCategoriesByIDs(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) GetCategory(ctx context.Context, in *cm.IDRequest) (*supplier.Category, error) {
	resp, err := c._CategoryService.GetCategory(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) CreateBrand(ctx context.Context, in *supplier.CreateBrandRequest) (*supplier.Brand, error) {
	resp, err := c._BrandService.CreateBrand(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) DeleteBrand(ctx context.Context, in *cm.IDRequest) (*cm.Empty, error) {
	resp, err := c._BrandService.DeleteBrand(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) GetBrand(ctx context.Context, in *cm.IDRequest) (*supplier.Brand, error) {
	resp, err := c._BrandService.GetBrand(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) GetBrands(ctx context.Context, in *cm.Empty) (*supplier.BrandsResponse, error) {
	resp, err := c._BrandService.GetBrands(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) GetBrandsByIDs(ctx context.Context, in *cm.IDsRequest) (*supplier.BrandsResponse, error) {
	resp, err := c._BrandService.GetBrandsByIDs(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) UpdateBrand(ctx context.Context, in *supplier.UpdateBrandRequest) (*supplier.Brand, error) {
	resp, err := c._BrandService.UpdateBrand(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) UpdateBrandImages(ctx context.Context, in *supplier.UpdateBrandImagesRequest) (*supplier.Brand, error) {
	resp, err := c._BrandService.UpdateBrandImages(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) GetProduct(ctx context.Context, in *cm.IDRequest) (*supplier.Product, error) {
	resp, err := c._ProductService.GetProduct(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) GetProducts(ctx context.Context, in *supplier.GetVariantsRequest) (*supplier.ProductsResponse, error) {
	resp, err := c._ProductService.GetProducts(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) GetProductsByIDs(ctx context.Context, in *cm.IDsRequest) (*supplier.ProductsResponse, error) {
	resp, err := c._ProductService.GetProductsByIDs(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) GetVariant(ctx context.Context, in *cm.IDRequest) (*supplier.Variant, error) {
	resp, err := c._ProductService.GetVariant(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) GetVariants(ctx context.Context, in *supplier.GetVariantsRequest) (*supplier.VariantsResponse, error) {
	resp, err := c._ProductService.GetVariants(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) GetVariantsByIDs(ctx context.Context, in *cm.IDsRequest) (*supplier.VariantsResponse, error) {
	resp, err := c._ProductService.GetVariantsByIDs(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) UpdateProduct(ctx context.Context, in *supplier.UpdateProductRequest) (*supplier.Product, error) {
	resp, err := c._ProductService.UpdateProduct(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) UpdateProductImages(ctx context.Context, in *supplier.UpdateVariantImagesRequest) (*supplier.Product, error) {
	resp, err := c._ProductService.UpdateProductImages(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) UpdateVariant(ctx context.Context, in *supplier.UpdateVariantRequest) (*supplier.Variant, error) {
	resp, err := c._ProductService.UpdateVariant(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) UpdateVariantImages(ctx context.Context, in *supplier.UpdateVariantImagesRequest) (*supplier.Variant, error) {
	resp, err := c._ProductService.UpdateVariantImages(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) UpdateVariants(ctx context.Context, in *supplier.UpdateVariantsRequest) (*supplier.UpdateVariantsResponse, error) {
	resp, err := c._ProductService.UpdateVariants(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) UpdateVariantsStatus(ctx context.Context, in *supplier.UpdateVariantsStatusRequest) (*cm.UpdatedResponse, error) {
	resp, err := c._ProductService.UpdateVariantsStatus(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) GetPriceRules(ctx context.Context, in *cm.Empty) (*supplier.PriceRulesResponse, error) {
	resp, err := c._PriceService.GetPriceRules(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) UpdatePriceRules(ctx context.Context, in *supplier.UpdatePriceRulesRequest) (*supplier.UpdatePriceRulesResponse, error) {
	resp, err := c._PriceService.UpdatePriceRules(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) GetOrder(ctx context.Context, in *cm.IDRequest) (*supplier.SupplierOrder, error) {
	resp, err := c._OrderService.GetOrder(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) GetOrders(ctx context.Context, in *supplier.GetOrdersRequest) (*supplier.OrdersResponse, error) {
	resp, err := c._OrderService.GetOrders(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) GetOrdersByIDs(ctx context.Context, in *cm.IDsRequest) (*supplier.OrdersResponse, error) {
	resp, err := c._OrderService.GetOrdersByIDs(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) UpdateOrdersStatus(ctx context.Context, in *supplier.UpdateOrdersStatusRequest) (*cm.UpdatedResponse, error) {
	resp, err := c._OrderService.UpdateOrdersStatus(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) GetFulfillment(ctx context.Context, in *cm.IDRequest) (*order.Fulfillment, error) {
	resp, err := c._FulfillmentService.GetFulfillment(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) GetFulfillments(ctx context.Context, in *supplier.GetFulfillmentsRequest) (*order.FulfillmentsResponse, error) {
	resp, err := c._FulfillmentService.GetFulfillments(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) SetDefaultAddress(ctx context.Context, in *etop.SetDefaultAddressRequest) (*cm.UpdatedResponse, error) {
	resp, err := c._AccountService.SetDefaultAddress(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *SupplierClient) UpdateSupplier(ctx context.Context, in *supplier.UpdateSupplierRequest) (*etop.Supplier, error) {
	resp, err := c._AccountService.UpdateSupplier(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}

type Muxer interface {
	Handle(string, http.Handler)
}

func NewSupplierServer(mux Muxer, hooks *twirp.ServerHooks) {
	bus.Expect(&VersionInfoEndpoint{})
	bus.Expect(&ConnectKiotvietEndpoint{})
	bus.Expect(&ConnectKiotvietTestEndpoint{})
	bus.Expect(&GetCategoriesEndpoint{})
	bus.Expect(&GetCategoriesByIDsEndpoint{})
	bus.Expect(&GetCategoryEndpoint{})
	bus.Expect(&CreateBrandEndpoint{})
	bus.Expect(&DeleteBrandEndpoint{})
	bus.Expect(&GetBrandEndpoint{})
	bus.Expect(&GetBrandsEndpoint{})
	bus.Expect(&GetBrandsByIDsEndpoint{})
	bus.Expect(&UpdateBrandEndpoint{})
	bus.Expect(&UpdateBrandImagesEndpoint{})
	bus.Expect(&GetProductEndpoint{})
	bus.Expect(&GetProductsEndpoint{})
	bus.Expect(&GetProductsByIDsEndpoint{})
	bus.Expect(&GetVariantEndpoint{})
	bus.Expect(&GetVariantsEndpoint{})
	bus.Expect(&GetVariantsByIDsEndpoint{})
	bus.Expect(&UpdateProductEndpoint{})
	bus.Expect(&UpdateProductImagesEndpoint{})
	bus.Expect(&UpdateVariantEndpoint{})
	bus.Expect(&UpdateVariantImagesEndpoint{})
	bus.Expect(&UpdateVariantsEndpoint{})
	bus.Expect(&UpdateVariantsStatusEndpoint{})
	bus.Expect(&GetPriceRulesEndpoint{})
	bus.Expect(&UpdatePriceRulesEndpoint{})
	bus.Expect(&GetOrderEndpoint{})
	bus.Expect(&GetOrdersEndpoint{})
	bus.Expect(&GetOrdersByIDsEndpoint{})
	bus.Expect(&UpdateOrdersStatusEndpoint{})
	bus.Expect(&GetFulfillmentEndpoint{})
	bus.Expect(&GetFulfillmentsEndpoint{})
	bus.Expect(&SetDefaultAddressEndpoint{})
	bus.Expect(&UpdateSupplierEndpoint{})
	mux.Handle(supplier.MiscServicePathPrefix, supplier.NewMiscServiceServer(MiscService{}, hooks))
	mux.Handle(supplier.KiotvietServicePathPrefix, supplier.NewKiotvietServiceServer(KiotvietService{}, hooks))
	mux.Handle(supplier.CategoryServicePathPrefix, supplier.NewCategoryServiceServer(CategoryService{}, hooks))
	mux.Handle(supplier.BrandServicePathPrefix, supplier.NewBrandServiceServer(BrandService{}, hooks))
	mux.Handle(supplier.ProductServicePathPrefix, supplier.NewProductServiceServer(ProductService{}, hooks))
	mux.Handle(supplier.PriceServicePathPrefix, supplier.NewPriceServiceServer(PriceService{}, hooks))
	mux.Handle(supplier.OrderServicePathPrefix, supplier.NewOrderServiceServer(OrderService{}, hooks))
	mux.Handle(supplier.FulfillmentServicePathPrefix, supplier.NewFulfillmentServiceServer(FulfillmentService{}, hooks))
	mux.Handle(supplier.AccountServicePathPrefix, supplier.NewAccountServiceServer(AccountService{}, hooks))
}

type SupplierImpl struct {
	MiscService
	KiotvietService
	CategoryService
	BrandService
	ProductService
	PriceService
	OrderService
	FulfillmentService
	AccountService
}

func NewSupplier() Supplier {
	return SupplierImpl{}
}

type MiscService struct{}

type VersionInfoEndpoint struct {
	*cm.Empty
	Result  *cm.VersionInfoResponse
	Context EmptyClaim
}

func (s MiscService) VersionInfo(ctx context.Context, req *cm.Empty) (resp *cm.VersionInfoResponse, err error) {
	t0 := time.Now()
	var errs []*cm.Error
	const rpcName = "supplier.Misc/VersionInfo"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, nil, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	query := &VersionInfoEndpoint{Empty: req}
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type KiotvietService struct{}

type ConnectKiotvietEndpoint struct {
	*supplier.ConnectKiotvietRequest
	Result  *supplier.ConnectKiotvietResponse
	Context UserClaim
}

func (s KiotvietService) ConnectKiotviet(ctx context.Context, req *supplier.ConnectKiotvietRequest) (resp *supplier.ConnectKiotvietResponse, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Kiotviet/ConnectKiotviet"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:     ctx,
		RequireAuth: true,
		RequireUser: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &ConnectKiotvietEndpoint{ConnectKiotvietRequest: req}
	query.Context.Claim = session.Claim
	query.Context.User = session.User
	query.Context.Admin = session.Admin
	// Verify that the user has correct service type
	if session.Claim.AuthPartnerID != 0 {
		return nil, common.ErrPermissionDenied
	}
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type ConnectKiotvietTestEndpoint struct {
	*supplier.ConnectKiotvietTestRequest
	Result  *supplier.ConnectKiotvietTestResponse
	Context UserClaim
}

func (s KiotvietService) ConnectKiotvietTest(ctx context.Context, req *supplier.ConnectKiotvietTestRequest) (resp *supplier.ConnectKiotvietTestResponse, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Kiotviet/ConnectKiotvietTest"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:     ctx,
		RequireAuth: true,
		RequireUser: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &ConnectKiotvietTestEndpoint{ConnectKiotvietTestRequest: req}
	query.Context.Claim = session.Claim
	query.Context.User = session.User
	query.Context.Admin = session.Admin
	// Verify that the user has correct service type
	if session.Claim.AuthPartnerID != 0 {
		return nil, common.ErrPermissionDenied
	}
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type CategoryService struct{}

type GetCategoriesEndpoint struct {
	*supplier.GetCategoriesRequest
	Result  *supplier.CategoriesResponse
	Context SupplierClaim
}

func (s CategoryService) GetCategories(ctx context.Context, req *supplier.GetCategoriesRequest) (resp *supplier.CategoriesResponse, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Category/GetCategories"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &GetCategoriesEndpoint{GetCategoriesRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type GetCategoriesByIDsEndpoint struct {
	*cm.IDsRequest
	Result  *supplier.CategoriesResponse
	Context SupplierClaim
}

func (s CategoryService) GetCategoriesByIDs(ctx context.Context, req *cm.IDsRequest) (resp *supplier.CategoriesResponse, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Category/GetCategoriesByIDs"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &GetCategoriesByIDsEndpoint{IDsRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type GetCategoryEndpoint struct {
	*cm.IDRequest
	Result  *supplier.Category
	Context SupplierClaim
}

func (s CategoryService) GetCategory(ctx context.Context, req *cm.IDRequest) (resp *supplier.Category, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Category/GetCategory"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &GetCategoryEndpoint{IDRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type BrandService struct{}

type CreateBrandEndpoint struct {
	*supplier.CreateBrandRequest
	Result  *supplier.Brand
	Context SupplierClaim
}

func (s BrandService) CreateBrand(ctx context.Context, req *supplier.CreateBrandRequest) (resp *supplier.Brand, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Brand/CreateBrand"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &CreateBrandEndpoint{CreateBrandRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type DeleteBrandEndpoint struct {
	*cm.IDRequest
	Result  *cm.Empty
	Context SupplierClaim
}

func (s BrandService) DeleteBrand(ctx context.Context, req *cm.IDRequest) (resp *cm.Empty, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Brand/DeleteBrand"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &DeleteBrandEndpoint{IDRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type GetBrandEndpoint struct {
	*cm.IDRequest
	Result  *supplier.Brand
	Context SupplierClaim
}

func (s BrandService) GetBrand(ctx context.Context, req *cm.IDRequest) (resp *supplier.Brand, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Brand/GetBrand"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &GetBrandEndpoint{IDRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type GetBrandsEndpoint struct {
	*cm.Empty
	Result  *supplier.BrandsResponse
	Context SupplierClaim
}

func (s BrandService) GetBrands(ctx context.Context, req *cm.Empty) (resp *supplier.BrandsResponse, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Brand/GetBrands"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &GetBrandsEndpoint{Empty: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type GetBrandsByIDsEndpoint struct {
	*cm.IDsRequest
	Result  *supplier.BrandsResponse
	Context SupplierClaim
}

func (s BrandService) GetBrandsByIDs(ctx context.Context, req *cm.IDsRequest) (resp *supplier.BrandsResponse, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Brand/GetBrandsByIDs"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &GetBrandsByIDsEndpoint{IDsRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type UpdateBrandEndpoint struct {
	*supplier.UpdateBrandRequest
	Result  *supplier.Brand
	Context SupplierClaim
}

func (s BrandService) UpdateBrand(ctx context.Context, req *supplier.UpdateBrandRequest) (resp *supplier.Brand, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Brand/UpdateBrand"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &UpdateBrandEndpoint{UpdateBrandRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type UpdateBrandImagesEndpoint struct {
	*supplier.UpdateBrandImagesRequest
	Result  *supplier.Brand
	Context SupplierClaim
}

func (s BrandService) UpdateBrandImages(ctx context.Context, req *supplier.UpdateBrandImagesRequest) (resp *supplier.Brand, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Brand/UpdateBrandImages"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &UpdateBrandImagesEndpoint{UpdateBrandImagesRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type ProductService struct{}

type GetProductEndpoint struct {
	*cm.IDRequest
	Result  *supplier.Product
	Context SupplierClaim
}

func (s ProductService) GetProduct(ctx context.Context, req *cm.IDRequest) (resp *supplier.Product, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Product/GetProduct"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &GetProductEndpoint{IDRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type GetProductsEndpoint struct {
	*supplier.GetVariantsRequest
	Result  *supplier.ProductsResponse
	Context SupplierClaim
}

func (s ProductService) GetProducts(ctx context.Context, req *supplier.GetVariantsRequest) (resp *supplier.ProductsResponse, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Product/GetProducts"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &GetProductsEndpoint{GetVariantsRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type GetProductsByIDsEndpoint struct {
	*cm.IDsRequest
	Result  *supplier.ProductsResponse
	Context SupplierClaim
}

func (s ProductService) GetProductsByIDs(ctx context.Context, req *cm.IDsRequest) (resp *supplier.ProductsResponse, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Product/GetProductsByIDs"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &GetProductsByIDsEndpoint{IDsRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type GetVariantEndpoint struct {
	*cm.IDRequest
	Result  *supplier.Variant
	Context SupplierClaim
}

func (s ProductService) GetVariant(ctx context.Context, req *cm.IDRequest) (resp *supplier.Variant, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Product/GetVariant"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &GetVariantEndpoint{IDRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type GetVariantsEndpoint struct {
	*supplier.GetVariantsRequest
	Result  *supplier.VariantsResponse
	Context SupplierClaim
}

func (s ProductService) GetVariants(ctx context.Context, req *supplier.GetVariantsRequest) (resp *supplier.VariantsResponse, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Product/GetVariants"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &GetVariantsEndpoint{GetVariantsRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type GetVariantsByIDsEndpoint struct {
	*cm.IDsRequest
	Result  *supplier.VariantsResponse
	Context SupplierClaim
}

func (s ProductService) GetVariantsByIDs(ctx context.Context, req *cm.IDsRequest) (resp *supplier.VariantsResponse, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Product/GetVariantsByIDs"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &GetVariantsByIDsEndpoint{IDsRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type UpdateProductEndpoint struct {
	*supplier.UpdateProductRequest
	Result  *supplier.Product
	Context SupplierClaim
}

func (s ProductService) UpdateProduct(ctx context.Context, req *supplier.UpdateProductRequest) (resp *supplier.Product, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Product/UpdateProduct"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &UpdateProductEndpoint{UpdateProductRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type UpdateProductImagesEndpoint struct {
	*supplier.UpdateVariantImagesRequest
	Result  *supplier.Product
	Context SupplierClaim
}

func (s ProductService) UpdateProductImages(ctx context.Context, req *supplier.UpdateVariantImagesRequest) (resp *supplier.Product, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Product/UpdateProductImages"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &UpdateProductImagesEndpoint{UpdateVariantImagesRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type UpdateVariantEndpoint struct {
	*supplier.UpdateVariantRequest
	Result  *supplier.Variant
	Context SupplierClaim
}

func (s ProductService) UpdateVariant(ctx context.Context, req *supplier.UpdateVariantRequest) (resp *supplier.Variant, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Product/UpdateVariant"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &UpdateVariantEndpoint{UpdateVariantRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type UpdateVariantImagesEndpoint struct {
	*supplier.UpdateVariantImagesRequest
	Result  *supplier.Variant
	Context SupplierClaim
}

func (s ProductService) UpdateVariantImages(ctx context.Context, req *supplier.UpdateVariantImagesRequest) (resp *supplier.Variant, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Product/UpdateVariantImages"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &UpdateVariantImagesEndpoint{UpdateVariantImagesRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type UpdateVariantsEndpoint struct {
	*supplier.UpdateVariantsRequest
	Result  *supplier.UpdateVariantsResponse
	Context SupplierClaim
}

func (s ProductService) UpdateVariants(ctx context.Context, req *supplier.UpdateVariantsRequest) (resp *supplier.UpdateVariantsResponse, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Product/UpdateVariants"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &UpdateVariantsEndpoint{UpdateVariantsRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type UpdateVariantsStatusEndpoint struct {
	*supplier.UpdateVariantsStatusRequest
	Result  *cm.UpdatedResponse
	Context SupplierClaim
}

func (s ProductService) UpdateVariantsStatus(ctx context.Context, req *supplier.UpdateVariantsStatusRequest) (resp *cm.UpdatedResponse, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Product/UpdateVariantsStatus"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &UpdateVariantsStatusEndpoint{UpdateVariantsStatusRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type PriceService struct{}

type GetPriceRulesEndpoint struct {
	*cm.Empty
	Result  *supplier.PriceRulesResponse
	Context SupplierClaim
}

func (s PriceService) GetPriceRules(ctx context.Context, req *cm.Empty) (resp *supplier.PriceRulesResponse, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Price/GetPriceRules"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &GetPriceRulesEndpoint{Empty: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type UpdatePriceRulesEndpoint struct {
	*supplier.UpdatePriceRulesRequest
	Result  *supplier.UpdatePriceRulesResponse
	Context SupplierClaim
}

func (s PriceService) UpdatePriceRules(ctx context.Context, req *supplier.UpdatePriceRulesRequest) (resp *supplier.UpdatePriceRulesResponse, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Price/UpdatePriceRules"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &UpdatePriceRulesEndpoint{UpdatePriceRulesRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type OrderService struct{}

type GetOrderEndpoint struct {
	*cm.IDRequest
	Result  *supplier.SupplierOrder
	Context SupplierClaim
}

func (s OrderService) GetOrder(ctx context.Context, req *cm.IDRequest) (resp *supplier.SupplierOrder, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Order/GetOrder"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &GetOrderEndpoint{IDRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type GetOrdersEndpoint struct {
	*supplier.GetOrdersRequest
	Result  *supplier.OrdersResponse
	Context SupplierClaim
}

func (s OrderService) GetOrders(ctx context.Context, req *supplier.GetOrdersRequest) (resp *supplier.OrdersResponse, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Order/GetOrders"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &GetOrdersEndpoint{GetOrdersRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type GetOrdersByIDsEndpoint struct {
	*cm.IDsRequest
	Result  *supplier.OrdersResponse
	Context SupplierClaim
}

func (s OrderService) GetOrdersByIDs(ctx context.Context, req *cm.IDsRequest) (resp *supplier.OrdersResponse, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Order/GetOrdersByIDs"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &GetOrdersByIDsEndpoint{IDsRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type UpdateOrdersStatusEndpoint struct {
	*supplier.UpdateOrdersStatusRequest
	Result  *cm.UpdatedResponse
	Context SupplierClaim
}

func (s OrderService) UpdateOrdersStatus(ctx context.Context, req *supplier.UpdateOrdersStatusRequest) (resp *cm.UpdatedResponse, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Order/UpdateOrdersStatus"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &UpdateOrdersStatusEndpoint{UpdateOrdersStatusRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type FulfillmentService struct{}

type GetFulfillmentEndpoint struct {
	*cm.IDRequest
	Result  *order.Fulfillment
	Context SupplierClaim
}

func (s FulfillmentService) GetFulfillment(ctx context.Context, req *cm.IDRequest) (resp *order.Fulfillment, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Fulfillment/GetFulfillment"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &GetFulfillmentEndpoint{IDRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type GetFulfillmentsEndpoint struct {
	*supplier.GetFulfillmentsRequest
	Result  *order.FulfillmentsResponse
	Context SupplierClaim
}

func (s FulfillmentService) GetFulfillments(ctx context.Context, req *supplier.GetFulfillmentsRequest) (resp *order.FulfillmentsResponse, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Fulfillment/GetFulfillments"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &GetFulfillmentsEndpoint{GetFulfillmentsRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type AccountService struct{}

type SetDefaultAddressEndpoint struct {
	*etop.SetDefaultAddressRequest
	Result  *cm.UpdatedResponse
	Context SupplierClaim
}

func (s AccountService) SetDefaultAddress(ctx context.Context, req *etop.SetDefaultAddressRequest) (resp *cm.UpdatedResponse, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Account/SetDefaultAddress"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &SetDefaultAddressEndpoint{SetDefaultAddressRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type UpdateSupplierEndpoint struct {
	*supplier.UpdateSupplierRequest
	Result  *etop.Supplier
	Context SupplierClaim
}

func (s AccountService) UpdateSupplier(ctx context.Context, req *supplier.UpdateSupplierRequest) (resp *etop.Supplier, err error) {
	t0 := time.Now()
	var session *middleware.Session
	var errs []*cm.Error
	const rpcName = "supplier.Account/UpdateSupplier"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, session, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	sessionQuery := &middleware.StartSessionQuery{
		Context:         ctx,
		RequireAuth:     true,
		RequireSupplier: true,
	}
	if err := bus.Dispatch(ctx, sessionQuery); err != nil {
		return nil, err
	}
	session = sessionQuery.Result
	query := &UpdateSupplierEndpoint{UpdateSupplierRequest: req}
	query.Context.Claim = session.Claim
	query.Context.Supplier = session.Supplier
	query.Context.IsOwner = session.IsOwner
	query.Context.Roles = session.Roles
	query.Context.Permissions = session.Permissions
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}
