// package handler generated by wrapper_gen. DO NOT EDIT.
package handlerW

import (
	"context"
	"net/http"
	"time"

	"github.com/twitchtv/twirp"

	cm "etop.vn/backend/pb/common"
	handler "etop.vn/backend/pb/services/handler"
	common "etop.vn/backend/pkg/common"
	"etop.vn/backend/pkg/common/bus"
	cmGrpc "etop.vn/backend/pkg/common/grpc"
	"etop.vn/backend/pkg/common/l"
	cmWrapper "etop.vn/backend/pkg/common/wrapper"
	"etop.vn/backend/pkg/etop/authorize/claims"
	"etop.vn/backend/pkg/etop/authorize/middleware"
)

var ll = l.New()

var Client Handler

type Handler interface {
	handler.MiscService
	handler.WebhookService
}

type HandlerClient struct {
	_MiscService    handler.MiscService
	_WebhookService handler.WebhookService
}

func NewHandlerClient(addr string, client *http.Client) Handler {
	if client == nil {
		client = &http.Client{
			Timeout: 10 * time.Second,
		}
	}

	addr = "http://" + addr
	return &HandlerClient{
		_MiscService:    handler.NewMiscServiceProtobufClient(addr, client),
		_WebhookService: handler.NewWebhookServiceProtobufClient(addr, client),
	}
}

func ConnectHandlerService(addr string, client *http.Client, secret string) error {
	Client = NewHandlerClient(addr, client)
	bus.AddHandler("client", func(ctx context.Context, q *VersionInfoEndpoint) error { panic("Unexpected") })
	bus.AddHandler("client", func(ctx context.Context, q *ResetStateEndpoint) error { panic("Unexpected") })
	ctx, _ := context.WithTimeout(context.Background(), 10*time.Second)
	ctx = cmGrpc.AppendAccessToken(ctx, secret)
	_, err := Client.VersionInfo(ctx, &cm.Empty{})
	if err == nil {
		ll.S.Infof("Connected to HandlerService at %v", addr)
	}
	return err
}

func MustConnectHandlerService(addr string, client *http.Client, secret string) {
	err := ConnectHandlerService(addr, client, secret)
	if err != nil {
		ll.Fatal("Unable to connect Handler", l.Error(err))
	}
}

type (
	EmptyClaim   = claims.EmptyClaim
	UserClaim    = claims.UserClaim
	AdminClaim   = claims.AdminClaim
	PartnerClaim = claims.PartnerClaim
	ShopClaim    = claims.ShopClaim
)

func (c *HandlerClient) VersionInfo(ctx context.Context, in *cm.Empty) (*cm.VersionInfoResponse, error) {
	resp, err := c._MiscService.VersionInfo(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}
func (c *HandlerClient) ResetState(ctx context.Context, in *handler.ResetStateRequest) (*cm.Empty, error) {
	resp, err := c._WebhookService.ResetState(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}

type Muxer interface {
	Handle(string, http.Handler)
}

func NewHandlerServer(mux Muxer, hooks *twirp.ServerHooks, secret string) {
	if secret == "" {
		ll.Fatal("Secret is empty")
	}
	bus.Expect(&VersionInfoEndpoint{})
	bus.Expect(&ResetStateEndpoint{})
	mux.Handle(handler.MiscServicePathPrefix, handler.NewMiscServiceServer(MiscService{secret: secret}, hooks))
	mux.Handle(handler.WebhookServicePathPrefix, handler.NewWebhookServiceServer(WebhookService{secret: secret}, hooks))
}

type HandlerImpl struct {
	MiscService
	WebhookService
}

func NewHandler() Handler {
	return HandlerImpl{}
}

type MiscService struct{ secret string }

type VersionInfoEndpoint struct {
	*cm.Empty
	Result  *cm.VersionInfoResponse
	Context EmptyClaim
}

func (s MiscService) VersionInfo(ctx context.Context, req *cm.Empty) (resp *cm.VersionInfoResponse, err error) {
	t0 := time.Now()
	var errs []*cm.Error
	const rpcName = "handler.Misc/VersionInfo"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, nil, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	query := &VersionInfoEndpoint{Empty: req}
	// Verify secret token
	token := middleware.GetBearerTokenFromCtx(ctx)
	if token != s.secret {
		return nil, common.ErrUnauthenticated
	}
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}

type WebhookService struct{ secret string }

type ResetStateEndpoint struct {
	*handler.ResetStateRequest
	Result  *cm.Empty
	Context EmptyClaim
}

func (s WebhookService) ResetState(ctx context.Context, req *handler.ResetStateRequest) (resp *cm.Empty, err error) {
	t0 := time.Now()
	var errs []*cm.Error
	const rpcName = "handler.Webhook/ResetState"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, nil, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	query := &ResetStateEndpoint{ResetStateRequest: req}
	// Verify secret token
	token := middleware.GetBearerTokenFromCtx(ctx)
	if token != s.secret {
		return nil, common.ErrUnauthenticated
	}
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}
