// package exporter generated by wrapper_gen. DO NOT EDIT.
package exporterW

import (
	"context"
	"net/http"
	"time"

	"github.com/twitchtv/twirp"

	cm "etop.vn/backend/pb/common"
	exporter "etop.vn/backend/pb/services/exporter"
	common "etop.vn/backend/pkg/common"
	"etop.vn/backend/pkg/common/bus"
	cmGrpc "etop.vn/backend/pkg/common/grpc"
	"etop.vn/backend/pkg/common/l"
	cmWrapper "etop.vn/backend/pkg/common/wrapper"
	"etop.vn/backend/pkg/etop/authorize/claims"
	"etop.vn/backend/pkg/etop/authorize/middleware"
)

var ll = l.New()

var Client Exporter

type Exporter interface {
	exporter.MiscService
}

type ExporterClient struct {
	_MiscService exporter.MiscService
}

func NewExporterClient(addr string, client *http.Client) Exporter {
	if client == nil {
		client = &http.Client{
			Timeout: 10 * time.Second,
		}
	}

	addr = "http://" + addr
	return &ExporterClient{
		_MiscService: exporter.NewMiscServiceProtobufClient(addr, client),
	}
}

func ConnectExporterService(addr string, client *http.Client, secret string) error {
	Client = NewExporterClient(addr, client)
	bus.AddHandler("client", func(ctx context.Context, q *VersionInfoEndpoint) error { panic("Unexpected") })
	ctx, _ := context.WithTimeout(context.Background(), 10*time.Second)
	ctx = cmGrpc.AppendAccessToken(ctx, secret)
	_, err := Client.VersionInfo(ctx, &cm.Empty{})
	if err == nil {
		ll.S.Infof("Connected to ExporterService at %v", addr)
	}
	return err
}

func MustConnectExporterService(addr string, client *http.Client, secret string) {
	err := ConnectExporterService(addr, client, secret)
	if err != nil {
		ll.Fatal("Unable to connect Exporter", l.Error(err))
	}
}

type (
	EmptyClaim    = claims.EmptyClaim
	UserClaim     = claims.UserClaim
	AdminClaim    = claims.AdminClaim
	PartnerClaim  = claims.PartnerClaim
	ShopClaim     = claims.ShopClaim
	SupplierClaim = claims.SupplierClaim
)

func (c *ExporterClient) VersionInfo(ctx context.Context, in *cm.Empty) (*cm.VersionInfoResponse, error) {
	resp, err := c._MiscService.VersionInfo(ctx, in)

	node, ok := ctx.(*bus.NodeContext)
	if !ok {
		return resp, err
	}
	newNode := node.WithMessage(map[string]interface{}{
		"Request": in,
		"Result":  resp,
	})
	newNode.Error = err
	return resp, err
}

type Muxer interface {
	Handle(string, http.Handler)
}

func NewExporterServer(mux Muxer, hooks *twirp.ServerHooks, secret string) {
	if secret == "" {
		ll.Fatal("Secret is empty")
	}
	bus.Expect(&VersionInfoEndpoint{})
	mux.Handle(exporter.MiscServicePathPrefix, exporter.NewMiscServiceServer(MiscService{secret: secret}, hooks))
}

type ExporterImpl struct {
	MiscService
}

func NewExporter() Exporter {
	return ExporterImpl{}
}

type MiscService struct{ secret string }

type VersionInfoEndpoint struct {
	*cm.Empty
	Result  *cm.VersionInfoResponse
	Context EmptyClaim
}

func (s MiscService) VersionInfo(ctx context.Context, req *cm.Empty) (resp *cm.VersionInfoResponse, err error) {
	t0 := time.Now()
	var errs []*cm.Error
	const rpcName = "exporter.Misc/VersionInfo"
	defer func() {
		recovered := recover()
		err = cmWrapper.RecoverAndLog(ctx, rpcName, nil, req, resp, recovered, err, errs, t0)
	}()
	defer cmWrapper.Censor(req)
	query := &VersionInfoEndpoint{Empty: req}
	// Verify secret token
	token := middleware.GetBearerTokenFromCtx(ctx)
	if token != s.secret {
		return nil, common.ErrUnauthenticated
	}
	ctx = bus.NewRootContext(ctx)
	err = bus.Dispatch(ctx, query)
	resp = query.Result
	if err == nil {
		if resp == nil {
			return nil, common.Error(common.Internal, "", nil).Log("nil response")
		}
		errs = cmWrapper.HasErrors(resp)
	}
	return resp, err
}
