// Code generated by protoc-gen-twirp v5.7.0, DO NOT EDIT.
// source: etop/admin/admin.proto

/*
Package admin is a generated twirp stub package.
This code was generated with github.com/twitchtv/twirp/protoc-gen-twirp v5.7.0.

It is generated from these files:
	etop/admin/admin.proto
*/
package admin

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"
import strconv "strconv"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

import cm "etop.vn/backend/pb/common"
import etop "etop.vn/backend/pb/etop"
import shop "etop.vn/backend/pb/etop/shop"
import order "etop.vn/backend/pb/etop/order"

// Imports only used by utility functions:
import io "io"
import json "encoding/json"
import url "net/url"

// =====================
// MiscService Interface
// =====================

type MiscService interface {
	VersionInfo(context.Context, *cm.Empty) (*cm.VersionInfoResponse, error)

	AdminLoginAsAccount(context.Context, *LoginAsAccountRequest) (*etop.LoginResponse, error)
}

// ===========================
// MiscService Protobuf Client
// ===========================

type miscServiceProtobufClient struct {
	client HTTPClient
	urls   [2]string
}

// NewMiscServiceProtobufClient creates a Protobuf client that implements the MiscService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewMiscServiceProtobufClient(addr string, client HTTPClient) MiscService {
	prefix := urlBase(addr) + MiscServicePathPrefix
	urls := [2]string{
		prefix + "VersionInfo",
		prefix + "AdminLoginAsAccount",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &miscServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &miscServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *miscServiceProtobufClient) VersionInfo(ctx context.Context, in *cm.Empty) (*cm.VersionInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Misc")
	ctx = ctxsetters.WithMethodName(ctx, "VersionInfo")
	out := new(cm.VersionInfoResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miscServiceProtobufClient) AdminLoginAsAccount(ctx context.Context, in *LoginAsAccountRequest) (*etop.LoginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Misc")
	ctx = ctxsetters.WithMethodName(ctx, "AdminLoginAsAccount")
	out := new(etop.LoginResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =======================
// MiscService JSON Client
// =======================

type miscServiceJSONClient struct {
	client HTTPClient
	urls   [2]string
}

// NewMiscServiceJSONClient creates a JSON client that implements the MiscService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewMiscServiceJSONClient(addr string, client HTTPClient) MiscService {
	prefix := urlBase(addr) + MiscServicePathPrefix
	urls := [2]string{
		prefix + "VersionInfo",
		prefix + "AdminLoginAsAccount",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &miscServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &miscServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *miscServiceJSONClient) VersionInfo(ctx context.Context, in *cm.Empty) (*cm.VersionInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Misc")
	ctx = ctxsetters.WithMethodName(ctx, "VersionInfo")
	out := new(cm.VersionInfoResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miscServiceJSONClient) AdminLoginAsAccount(ctx context.Context, in *LoginAsAccountRequest) (*etop.LoginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Misc")
	ctx = ctxsetters.WithMethodName(ctx, "AdminLoginAsAccount")
	out := new(etop.LoginResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// MiscService Server Handler
// ==========================

type miscServiceServer struct {
	MiscService
	hooks *twirp.ServerHooks
}

func NewMiscServiceServer(svc MiscService, hooks *twirp.ServerHooks) TwirpServer {
	return &miscServiceServer{
		MiscService: svc,
		hooks:       hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *miscServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// MiscServicePathPrefix is used for all URL paths on a twirp MiscService server.
// Requests are always: POST MiscServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const MiscServicePathPrefix = "/api/admin.Misc/"

func (s *miscServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Misc")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/admin.Misc/VersionInfo":
		s.serveVersionInfo(ctx, resp, req)
		return
	case "/api/admin.Misc/AdminLoginAsAccount":
		s.serveAdminLoginAsAccount(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *miscServiceServer) serveVersionInfo(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveVersionInfoJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveVersionInfoProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *miscServiceServer) serveVersionInfoJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "VersionInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.VersionInfoResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MiscService.VersionInfo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.VersionInfoResponse and nil error while calling VersionInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *miscServiceServer) serveVersionInfoProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "VersionInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.VersionInfoResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MiscService.VersionInfo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.VersionInfoResponse and nil error while calling VersionInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *miscServiceServer) serveAdminLoginAsAccount(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAdminLoginAsAccountJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAdminLoginAsAccountProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *miscServiceServer) serveAdminLoginAsAccountJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AdminLoginAsAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(LoginAsAccountRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *etop.LoginResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MiscService.AdminLoginAsAccount(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.LoginResponse and nil error while calling AdminLoginAsAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *miscServiceServer) serveAdminLoginAsAccountProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AdminLoginAsAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(LoginAsAccountRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *etop.LoginResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MiscService.AdminLoginAsAccount(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.LoginResponse and nil error while calling AdminLoginAsAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *miscServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 0
}

func (s *miscServiceServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *miscServiceServer) PathPrefix() string {
	return MiscServicePathPrefix
}

// ========================
// AccountService Interface
// ========================

type AccountService interface {
	CreatePartner(context.Context, *CreatePartnerRequest) (*etop.Partner, error)

	GenerateAPIKey(context.Context, *GenerateAPIKeyRequest) (*GenerateAPIKeyResponse, error)
}

// ==============================
// AccountService Protobuf Client
// ==============================

type accountServiceProtobufClient struct {
	client HTTPClient
	urls   [2]string
}

// NewAccountServiceProtobufClient creates a Protobuf client that implements the AccountService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewAccountServiceProtobufClient(addr string, client HTTPClient) AccountService {
	prefix := urlBase(addr) + AccountServicePathPrefix
	urls := [2]string{
		prefix + "CreatePartner",
		prefix + "GenerateAPIKey",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &accountServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &accountServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *accountServiceProtobufClient) CreatePartner(ctx context.Context, in *CreatePartnerRequest) (*etop.Partner, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "CreatePartner")
	out := new(etop.Partner)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceProtobufClient) GenerateAPIKey(ctx context.Context, in *GenerateAPIKeyRequest) (*GenerateAPIKeyResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "GenerateAPIKey")
	out := new(GenerateAPIKeyResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// AccountService JSON Client
// ==========================

type accountServiceJSONClient struct {
	client HTTPClient
	urls   [2]string
}

// NewAccountServiceJSONClient creates a JSON client that implements the AccountService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewAccountServiceJSONClient(addr string, client HTTPClient) AccountService {
	prefix := urlBase(addr) + AccountServicePathPrefix
	urls := [2]string{
		prefix + "CreatePartner",
		prefix + "GenerateAPIKey",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &accountServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &accountServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *accountServiceJSONClient) CreatePartner(ctx context.Context, in *CreatePartnerRequest) (*etop.Partner, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "CreatePartner")
	out := new(etop.Partner)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceJSONClient) GenerateAPIKey(ctx context.Context, in *GenerateAPIKeyRequest) (*GenerateAPIKeyResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "GenerateAPIKey")
	out := new(GenerateAPIKeyResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =============================
// AccountService Server Handler
// =============================

type accountServiceServer struct {
	AccountService
	hooks *twirp.ServerHooks
}

func NewAccountServiceServer(svc AccountService, hooks *twirp.ServerHooks) TwirpServer {
	return &accountServiceServer{
		AccountService: svc,
		hooks:          hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *accountServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// AccountServicePathPrefix is used for all URL paths on a twirp AccountService server.
// Requests are always: POST AccountServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const AccountServicePathPrefix = "/api/admin.Account/"

func (s *accountServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/admin.Account/CreatePartner":
		s.serveCreatePartner(ctx, resp, req)
		return
	case "/api/admin.Account/GenerateAPIKey":
		s.serveGenerateAPIKey(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *accountServiceServer) serveCreatePartner(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreatePartnerJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreatePartnerProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *accountServiceServer) serveCreatePartnerJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreatePartner")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CreatePartnerRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *etop.Partner
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.CreatePartner(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.Partner and nil error while calling CreatePartner. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveCreatePartnerProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreatePartner")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CreatePartnerRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *etop.Partner
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.CreatePartner(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.Partner and nil error while calling CreatePartner. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveGenerateAPIKey(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGenerateAPIKeyJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGenerateAPIKeyProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *accountServiceServer) serveGenerateAPIKeyJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GenerateAPIKey")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GenerateAPIKeyRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *GenerateAPIKeyResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.GenerateAPIKey(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GenerateAPIKeyResponse and nil error while calling GenerateAPIKey. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveGenerateAPIKeyProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GenerateAPIKey")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GenerateAPIKeyRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *GenerateAPIKeyResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.GenerateAPIKey(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GenerateAPIKeyResponse and nil error while calling GenerateAPIKey. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 1
}

func (s *accountServiceServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *accountServiceServer) PathPrefix() string {
	return AccountServicePathPrefix
}

// =========================
// CategoryService Interface
// =========================

type CategoryService interface {
	CreateCategory(context.Context, *CreateCategoryRequest) (*etop.Category, error)

	GetCategories(context.Context, *cm.Empty) (*etop.CategoriesResponse, error)

	UpdateProductsCategory(context.Context, *UpdateProductsCategoryRequest) (*cm.UpdatedResponse, error)

	RemoveProductsCategory(context.Context, *cm.IDsRequest) (*cm.UpdatedResponse, error)
}

// ===============================
// CategoryService Protobuf Client
// ===============================

type categoryServiceProtobufClient struct {
	client HTTPClient
	urls   [4]string
}

// NewCategoryServiceProtobufClient creates a Protobuf client that implements the CategoryService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewCategoryServiceProtobufClient(addr string, client HTTPClient) CategoryService {
	prefix := urlBase(addr) + CategoryServicePathPrefix
	urls := [4]string{
		prefix + "CreateCategory",
		prefix + "GetCategories",
		prefix + "UpdateProductsCategory",
		prefix + "RemoveProductsCategory",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &categoryServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &categoryServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *categoryServiceProtobufClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest) (*etop.Category, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Category")
	ctx = ctxsetters.WithMethodName(ctx, "CreateCategory")
	out := new(etop.Category)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceProtobufClient) GetCategories(ctx context.Context, in *cm.Empty) (*etop.CategoriesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Category")
	ctx = ctxsetters.WithMethodName(ctx, "GetCategories")
	out := new(etop.CategoriesResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceProtobufClient) UpdateProductsCategory(ctx context.Context, in *UpdateProductsCategoryRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Category")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsCategory")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceProtobufClient) RemoveProductsCategory(ctx context.Context, in *cm.IDsRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Category")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveProductsCategory")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===========================
// CategoryService JSON Client
// ===========================

type categoryServiceJSONClient struct {
	client HTTPClient
	urls   [4]string
}

// NewCategoryServiceJSONClient creates a JSON client that implements the CategoryService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewCategoryServiceJSONClient(addr string, client HTTPClient) CategoryService {
	prefix := urlBase(addr) + CategoryServicePathPrefix
	urls := [4]string{
		prefix + "CreateCategory",
		prefix + "GetCategories",
		prefix + "UpdateProductsCategory",
		prefix + "RemoveProductsCategory",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &categoryServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &categoryServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *categoryServiceJSONClient) CreateCategory(ctx context.Context, in *CreateCategoryRequest) (*etop.Category, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Category")
	ctx = ctxsetters.WithMethodName(ctx, "CreateCategory")
	out := new(etop.Category)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceJSONClient) GetCategories(ctx context.Context, in *cm.Empty) (*etop.CategoriesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Category")
	ctx = ctxsetters.WithMethodName(ctx, "GetCategories")
	out := new(etop.CategoriesResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceJSONClient) UpdateProductsCategory(ctx context.Context, in *UpdateProductsCategoryRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Category")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsCategory")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceJSONClient) RemoveProductsCategory(ctx context.Context, in *cm.IDsRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Category")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveProductsCategory")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==============================
// CategoryService Server Handler
// ==============================

type categoryServiceServer struct {
	CategoryService
	hooks *twirp.ServerHooks
}

func NewCategoryServiceServer(svc CategoryService, hooks *twirp.ServerHooks) TwirpServer {
	return &categoryServiceServer{
		CategoryService: svc,
		hooks:           hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *categoryServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// CategoryServicePathPrefix is used for all URL paths on a twirp CategoryService server.
// Requests are always: POST CategoryServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const CategoryServicePathPrefix = "/api/admin.Category/"

func (s *categoryServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Category")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/admin.Category/CreateCategory":
		s.serveCreateCategory(ctx, resp, req)
		return
	case "/api/admin.Category/GetCategories":
		s.serveGetCategories(ctx, resp, req)
		return
	case "/api/admin.Category/UpdateProductsCategory":
		s.serveUpdateProductsCategory(ctx, resp, req)
		return
	case "/api/admin.Category/RemoveProductsCategory":
		s.serveRemoveProductsCategory(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *categoryServiceServer) serveCreateCategory(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateCategoryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateCategoryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *categoryServiceServer) serveCreateCategoryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateCategory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CreateCategoryRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *etop.Category
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CategoryService.CreateCategory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.Category and nil error while calling CreateCategory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *categoryServiceServer) serveCreateCategoryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateCategory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CreateCategoryRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *etop.Category
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CategoryService.CreateCategory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.Category and nil error while calling CreateCategory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *categoryServiceServer) serveGetCategories(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetCategoriesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetCategoriesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *categoryServiceServer) serveGetCategoriesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCategories")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *etop.CategoriesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CategoryService.GetCategories(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.CategoriesResponse and nil error while calling GetCategories. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *categoryServiceServer) serveGetCategoriesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCategories")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *etop.CategoriesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CategoryService.GetCategories(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.CategoriesResponse and nil error while calling GetCategories. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *categoryServiceServer) serveUpdateProductsCategory(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateProductsCategoryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateProductsCategoryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *categoryServiceServer) serveUpdateProductsCategoryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsCategory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateProductsCategoryRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CategoryService.UpdateProductsCategory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateProductsCategory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *categoryServiceServer) serveUpdateProductsCategoryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsCategory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateProductsCategoryRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CategoryService.UpdateProductsCategory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateProductsCategory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *categoryServiceServer) serveRemoveProductsCategory(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoveProductsCategoryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveProductsCategoryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *categoryServiceServer) serveRemoveProductsCategoryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveProductsCategory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CategoryService.RemoveProductsCategory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling RemoveProductsCategory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *categoryServiceServer) serveRemoveProductsCategoryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveProductsCategory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CategoryService.RemoveProductsCategory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling RemoveProductsCategory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *categoryServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 2
}

func (s *categoryServiceServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *categoryServiceServer) PathPrefix() string {
	return CategoryServicePathPrefix
}

// ========================
// ProductService Interface
// ========================

type ProductService interface {
	GetProduct(context.Context, *cm.IDRequest) (*ProductWithSupplier, error)

	GetProducts(context.Context, *GetProductsRequest) (*ProductsResponse, error)

	GetProductsByIDs(context.Context, *cm.IDsRequest) (*ProductsResponse, error)

	UpdateProductsStatus(context.Context, *UpdateProductsStatusRequest) (*cm.UpdatedResponse, error)

	UpdateProduct(context.Context, *UpdateProductRequest) (*Product, error)

	UpdateProductImages(context.Context, *shop.UpdateVariantImagesRequest) (*Product, error)

	GetVariant(context.Context, *cm.IDRequest) (*VariantWithSupplier, error)

	GetVariants(context.Context, *GetVariantsRequest) (*VariantsResponse, error)

	GetVariantsByIDs(context.Context, *cm.IDsRequest) (*VariantsResponse, error)

	UpdateVariantsStatus(context.Context, *UpdateVariantsStatusRequest) (*cm.UpdatedResponse, error)

	UpdateVariant(context.Context, *UpdateVariantRequest) (*Variant, error)

	UpdateVariantImages(context.Context, *shop.UpdateVariantImagesRequest) (*Variant, error)
}

// ==============================
// ProductService Protobuf Client
// ==============================

type productServiceProtobufClient struct {
	client HTTPClient
	urls   [12]string
}

// NewProductServiceProtobufClient creates a Protobuf client that implements the ProductService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewProductServiceProtobufClient(addr string, client HTTPClient) ProductService {
	prefix := urlBase(addr) + ProductServicePathPrefix
	urls := [12]string{
		prefix + "GetProduct",
		prefix + "GetProducts",
		prefix + "GetProductsByIDs",
		prefix + "UpdateProductsStatus",
		prefix + "UpdateProduct",
		prefix + "UpdateProductImages",
		prefix + "GetVariant",
		prefix + "GetVariants",
		prefix + "GetVariantsByIDs",
		prefix + "UpdateVariantsStatus",
		prefix + "UpdateVariant",
		prefix + "UpdateVariantImages",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &productServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &productServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *productServiceProtobufClient) GetProduct(ctx context.Context, in *cm.IDRequest) (*ProductWithSupplier, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetProduct")
	out := new(ProductWithSupplier)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) GetProducts(ctx context.Context, in *GetProductsRequest) (*ProductsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetProducts")
	out := new(ProductsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) GetProductsByIDs(ctx context.Context, in *cm.IDsRequest) (*ProductsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetProductsByIDs")
	out := new(ProductsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) UpdateProductsStatus(ctx context.Context, in *UpdateProductsStatusRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsStatus")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest) (*Product, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProduct")
	out := new(Product)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) UpdateProductImages(ctx context.Context, in *shop.UpdateVariantImagesRequest) (*Product, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductImages")
	out := new(Product)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) GetVariant(ctx context.Context, in *cm.IDRequest) (*VariantWithSupplier, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetVariant")
	out := new(VariantWithSupplier)
	err := doProtobufRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) GetVariants(ctx context.Context, in *GetVariantsRequest) (*VariantsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetVariants")
	out := new(VariantsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) GetVariantsByIDs(ctx context.Context, in *cm.IDsRequest) (*VariantsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetVariantsByIDs")
	out := new(VariantsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) UpdateVariantsStatus(ctx context.Context, in *UpdateVariantsStatusRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantsStatus")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) UpdateVariant(ctx context.Context, in *UpdateVariantRequest) (*Variant, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariant")
	out := new(Variant)
	err := doProtobufRequest(ctx, c.client, c.urls[10], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) UpdateVariantImages(ctx context.Context, in *shop.UpdateVariantImagesRequest) (*Variant, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantImages")
	out := new(Variant)
	err := doProtobufRequest(ctx, c.client, c.urls[11], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// ProductService JSON Client
// ==========================

type productServiceJSONClient struct {
	client HTTPClient
	urls   [12]string
}

// NewProductServiceJSONClient creates a JSON client that implements the ProductService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewProductServiceJSONClient(addr string, client HTTPClient) ProductService {
	prefix := urlBase(addr) + ProductServicePathPrefix
	urls := [12]string{
		prefix + "GetProduct",
		prefix + "GetProducts",
		prefix + "GetProductsByIDs",
		prefix + "UpdateProductsStatus",
		prefix + "UpdateProduct",
		prefix + "UpdateProductImages",
		prefix + "GetVariant",
		prefix + "GetVariants",
		prefix + "GetVariantsByIDs",
		prefix + "UpdateVariantsStatus",
		prefix + "UpdateVariant",
		prefix + "UpdateVariantImages",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &productServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &productServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *productServiceJSONClient) GetProduct(ctx context.Context, in *cm.IDRequest) (*ProductWithSupplier, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetProduct")
	out := new(ProductWithSupplier)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) GetProducts(ctx context.Context, in *GetProductsRequest) (*ProductsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetProducts")
	out := new(ProductsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) GetProductsByIDs(ctx context.Context, in *cm.IDsRequest) (*ProductsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetProductsByIDs")
	out := new(ProductsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) UpdateProductsStatus(ctx context.Context, in *UpdateProductsStatusRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsStatus")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest) (*Product, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProduct")
	out := new(Product)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) UpdateProductImages(ctx context.Context, in *shop.UpdateVariantImagesRequest) (*Product, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductImages")
	out := new(Product)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) GetVariant(ctx context.Context, in *cm.IDRequest) (*VariantWithSupplier, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetVariant")
	out := new(VariantWithSupplier)
	err := doJSONRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) GetVariants(ctx context.Context, in *GetVariantsRequest) (*VariantsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetVariants")
	out := new(VariantsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) GetVariantsByIDs(ctx context.Context, in *cm.IDsRequest) (*VariantsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetVariantsByIDs")
	out := new(VariantsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) UpdateVariantsStatus(ctx context.Context, in *UpdateVariantsStatusRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantsStatus")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) UpdateVariant(ctx context.Context, in *UpdateVariantRequest) (*Variant, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariant")
	out := new(Variant)
	err := doJSONRequest(ctx, c.client, c.urls[10], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) UpdateVariantImages(ctx context.Context, in *shop.UpdateVariantImagesRequest) (*Variant, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantImages")
	out := new(Variant)
	err := doJSONRequest(ctx, c.client, c.urls[11], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =============================
// ProductService Server Handler
// =============================

type productServiceServer struct {
	ProductService
	hooks *twirp.ServerHooks
}

func NewProductServiceServer(svc ProductService, hooks *twirp.ServerHooks) TwirpServer {
	return &productServiceServer{
		ProductService: svc,
		hooks:          hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *productServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// ProductServicePathPrefix is used for all URL paths on a twirp ProductService server.
// Requests are always: POST ProductServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const ProductServicePathPrefix = "/api/admin.Product/"

func (s *productServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/admin.Product/GetProduct":
		s.serveGetProduct(ctx, resp, req)
		return
	case "/api/admin.Product/GetProducts":
		s.serveGetProducts(ctx, resp, req)
		return
	case "/api/admin.Product/GetProductsByIDs":
		s.serveGetProductsByIDs(ctx, resp, req)
		return
	case "/api/admin.Product/UpdateProductsStatus":
		s.serveUpdateProductsStatus(ctx, resp, req)
		return
	case "/api/admin.Product/UpdateProduct":
		s.serveUpdateProduct(ctx, resp, req)
		return
	case "/api/admin.Product/UpdateProductImages":
		s.serveUpdateProductImages(ctx, resp, req)
		return
	case "/api/admin.Product/GetVariant":
		s.serveGetVariant(ctx, resp, req)
		return
	case "/api/admin.Product/GetVariants":
		s.serveGetVariants(ctx, resp, req)
		return
	case "/api/admin.Product/GetVariantsByIDs":
		s.serveGetVariantsByIDs(ctx, resp, req)
		return
	case "/api/admin.Product/UpdateVariantsStatus":
		s.serveUpdateVariantsStatus(ctx, resp, req)
		return
	case "/api/admin.Product/UpdateVariant":
		s.serveUpdateVariant(ctx, resp, req)
		return
	case "/api/admin.Product/UpdateVariantImages":
		s.serveUpdateVariantImages(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *productServiceServer) serveGetProduct(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetProductJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetProductProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveGetProductJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProduct")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *ProductWithSupplier
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetProduct(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ProductWithSupplier and nil error while calling GetProduct. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetProductProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProduct")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *ProductWithSupplier
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetProduct(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ProductWithSupplier and nil error while calling GetProduct. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetProducts(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetProductsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetProductsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveGetProductsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProducts")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetProductsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *ProductsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetProducts(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ProductsResponse and nil error while calling GetProducts. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetProductsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProducts")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetProductsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *ProductsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetProducts(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ProductsResponse and nil error while calling GetProducts. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetProductsByIDs(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetProductsByIDsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetProductsByIDsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveGetProductsByIDsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProductsByIDs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *ProductsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetProductsByIDs(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ProductsResponse and nil error while calling GetProductsByIDs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetProductsByIDsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProductsByIDs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *ProductsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetProductsByIDs(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ProductsResponse and nil error while calling GetProductsByIDs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateProductsStatus(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateProductsStatusJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateProductsStatusProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveUpdateProductsStatusJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateProductsStatusRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateProductsStatus(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateProductsStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateProductsStatusProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateProductsStatusRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateProductsStatus(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateProductsStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateProduct(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateProductJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateProductProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveUpdateProductJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProduct")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateProductRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *Product
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateProduct(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Product and nil error while calling UpdateProduct. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateProductProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProduct")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateProductRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *Product
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateProduct(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Product and nil error while calling UpdateProduct. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateProductImages(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateProductImagesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateProductImagesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveUpdateProductImagesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductImages")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(shop.UpdateVariantImagesRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *Product
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateProductImages(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Product and nil error while calling UpdateProductImages. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateProductImagesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductImages")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(shop.UpdateVariantImagesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *Product
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateProductImages(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Product and nil error while calling UpdateProductImages. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetVariant(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetVariantJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetVariantProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveGetVariantJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetVariant")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *VariantWithSupplier
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetVariant(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *VariantWithSupplier and nil error while calling GetVariant. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetVariantProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetVariant")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *VariantWithSupplier
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetVariant(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *VariantWithSupplier and nil error while calling GetVariant. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetVariants(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetVariantsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetVariantsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveGetVariantsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetVariants")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetVariantsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *VariantsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetVariants(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *VariantsResponse and nil error while calling GetVariants. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetVariantsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetVariants")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetVariantsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *VariantsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetVariants(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *VariantsResponse and nil error while calling GetVariants. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetVariantsByIDs(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetVariantsByIDsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetVariantsByIDsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveGetVariantsByIDsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetVariantsByIDs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *VariantsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetVariantsByIDs(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *VariantsResponse and nil error while calling GetVariantsByIDs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetVariantsByIDsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetVariantsByIDs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *VariantsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetVariantsByIDs(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *VariantsResponse and nil error while calling GetVariantsByIDs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateVariantsStatus(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateVariantsStatusJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateVariantsStatusProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveUpdateVariantsStatusJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantsStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateVariantsStatusRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateVariantsStatus(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateVariantsStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateVariantsStatusProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantsStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateVariantsStatusRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateVariantsStatus(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateVariantsStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateVariant(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateVariantJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateVariantProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveUpdateVariantJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariant")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateVariantRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *Variant
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateVariant(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Variant and nil error while calling UpdateVariant. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateVariantProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariant")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateVariantRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *Variant
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateVariant(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Variant and nil error while calling UpdateVariant. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateVariantImages(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateVariantImagesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateVariantImagesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveUpdateVariantImagesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantImages")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(shop.UpdateVariantImagesRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *Variant
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateVariantImages(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Variant and nil error while calling UpdateVariantImages. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateVariantImagesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantImages")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(shop.UpdateVariantImagesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *Variant
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateVariantImages(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Variant and nil error while calling UpdateVariantImages. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 3
}

func (s *productServiceServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *productServiceServer) PathPrefix() string {
	return ProductServicePathPrefix
}

// ======================
// OrderService Interface
// ======================

type OrderService interface {
	GetOrder(context.Context, *cm.IDRequest) (*order.Order, error)

	GetOrders(context.Context, *GetOrdersRequest) (*order.OrdersResponse, error)

	GetOrdersByIDs(context.Context, *cm.IDsRequest) (*order.OrdersResponse, error)
}

// ============================
// OrderService Protobuf Client
// ============================

type orderServiceProtobufClient struct {
	client HTTPClient
	urls   [3]string
}

// NewOrderServiceProtobufClient creates a Protobuf client that implements the OrderService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewOrderServiceProtobufClient(addr string, client HTTPClient) OrderService {
	prefix := urlBase(addr) + OrderServicePathPrefix
	urls := [3]string{
		prefix + "GetOrder",
		prefix + "GetOrders",
		prefix + "GetOrdersByIDs",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &orderServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &orderServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *orderServiceProtobufClient) GetOrder(ctx context.Context, in *cm.IDRequest) (*order.Order, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "GetOrder")
	out := new(order.Order)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceProtobufClient) GetOrders(ctx context.Context, in *GetOrdersRequest) (*order.OrdersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "GetOrders")
	out := new(order.OrdersResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceProtobufClient) GetOrdersByIDs(ctx context.Context, in *cm.IDsRequest) (*order.OrdersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "GetOrdersByIDs")
	out := new(order.OrdersResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ========================
// OrderService JSON Client
// ========================

type orderServiceJSONClient struct {
	client HTTPClient
	urls   [3]string
}

// NewOrderServiceJSONClient creates a JSON client that implements the OrderService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewOrderServiceJSONClient(addr string, client HTTPClient) OrderService {
	prefix := urlBase(addr) + OrderServicePathPrefix
	urls := [3]string{
		prefix + "GetOrder",
		prefix + "GetOrders",
		prefix + "GetOrdersByIDs",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &orderServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &orderServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *orderServiceJSONClient) GetOrder(ctx context.Context, in *cm.IDRequest) (*order.Order, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "GetOrder")
	out := new(order.Order)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceJSONClient) GetOrders(ctx context.Context, in *GetOrdersRequest) (*order.OrdersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "GetOrders")
	out := new(order.OrdersResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceJSONClient) GetOrdersByIDs(ctx context.Context, in *cm.IDsRequest) (*order.OrdersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "GetOrdersByIDs")
	out := new(order.OrdersResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===========================
// OrderService Server Handler
// ===========================

type orderServiceServer struct {
	OrderService
	hooks *twirp.ServerHooks
}

func NewOrderServiceServer(svc OrderService, hooks *twirp.ServerHooks) TwirpServer {
	return &orderServiceServer{
		OrderService: svc,
		hooks:        hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *orderServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// OrderServicePathPrefix is used for all URL paths on a twirp OrderService server.
// Requests are always: POST OrderServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const OrderServicePathPrefix = "/api/admin.Order/"

func (s *orderServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/admin.Order/GetOrder":
		s.serveGetOrder(ctx, resp, req)
		return
	case "/api/admin.Order/GetOrders":
		s.serveGetOrders(ctx, resp, req)
		return
	case "/api/admin.Order/GetOrdersByIDs":
		s.serveGetOrdersByIDs(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *orderServiceServer) serveGetOrder(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetOrderJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetOrderProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orderServiceServer) serveGetOrderJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *order.Order
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.GetOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.Order and nil error while calling GetOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveGetOrderProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *order.Order
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.GetOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.Order and nil error while calling GetOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveGetOrders(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetOrdersJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetOrdersProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orderServiceServer) serveGetOrdersJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetOrders")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetOrdersRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *order.OrdersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.GetOrders(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.OrdersResponse and nil error while calling GetOrders. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveGetOrdersProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetOrders")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetOrdersRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *order.OrdersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.GetOrders(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.OrdersResponse and nil error while calling GetOrders. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveGetOrdersByIDs(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetOrdersByIDsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetOrdersByIDsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orderServiceServer) serveGetOrdersByIDsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetOrdersByIDs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *order.OrdersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.GetOrdersByIDs(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.OrdersResponse and nil error while calling GetOrdersByIDs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveGetOrdersByIDsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetOrdersByIDs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *order.OrdersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.GetOrdersByIDs(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.OrdersResponse and nil error while calling GetOrdersByIDs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 4
}

func (s *orderServiceServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *orderServiceServer) PathPrefix() string {
	return OrderServicePathPrefix
}

// ============================
// FulfillmentService Interface
// ============================

type FulfillmentService interface {
	GetFulfillment(context.Context, *cm.IDRequest) (*order.Fulfillment, error)

	GetFulfillments(context.Context, *GetFulfillmentsRequest) (*order.FulfillmentsResponse, error)

	// UpdateFulfillment
	//
	// `shipping_state`
	//
	// Only update from any state to `undeliverable`
	// Or update from `undeliverable`to any state
	UpdateFulfillment(context.Context, *UpdateFulfillmentRequest) (*cm.UpdatedResponse, error)
}

// ==================================
// FulfillmentService Protobuf Client
// ==================================

type fulfillmentServiceProtobufClient struct {
	client HTTPClient
	urls   [3]string
}

// NewFulfillmentServiceProtobufClient creates a Protobuf client that implements the FulfillmentService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewFulfillmentServiceProtobufClient(addr string, client HTTPClient) FulfillmentService {
	prefix := urlBase(addr) + FulfillmentServicePathPrefix
	urls := [3]string{
		prefix + "GetFulfillment",
		prefix + "GetFulfillments",
		prefix + "UpdateFulfillment",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &fulfillmentServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &fulfillmentServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *fulfillmentServiceProtobufClient) GetFulfillment(ctx context.Context, in *cm.IDRequest) (*order.Fulfillment, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillment")
	out := new(order.Fulfillment)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceProtobufClient) GetFulfillments(ctx context.Context, in *GetFulfillmentsRequest) (*order.FulfillmentsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillments")
	out := new(order.FulfillmentsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceProtobufClient) UpdateFulfillment(ctx context.Context, in *UpdateFulfillmentRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateFulfillment")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==============================
// FulfillmentService JSON Client
// ==============================

type fulfillmentServiceJSONClient struct {
	client HTTPClient
	urls   [3]string
}

// NewFulfillmentServiceJSONClient creates a JSON client that implements the FulfillmentService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewFulfillmentServiceJSONClient(addr string, client HTTPClient) FulfillmentService {
	prefix := urlBase(addr) + FulfillmentServicePathPrefix
	urls := [3]string{
		prefix + "GetFulfillment",
		prefix + "GetFulfillments",
		prefix + "UpdateFulfillment",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &fulfillmentServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &fulfillmentServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *fulfillmentServiceJSONClient) GetFulfillment(ctx context.Context, in *cm.IDRequest) (*order.Fulfillment, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillment")
	out := new(order.Fulfillment)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceJSONClient) GetFulfillments(ctx context.Context, in *GetFulfillmentsRequest) (*order.FulfillmentsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillments")
	out := new(order.FulfillmentsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceJSONClient) UpdateFulfillment(ctx context.Context, in *UpdateFulfillmentRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateFulfillment")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =================================
// FulfillmentService Server Handler
// =================================

type fulfillmentServiceServer struct {
	FulfillmentService
	hooks *twirp.ServerHooks
}

func NewFulfillmentServiceServer(svc FulfillmentService, hooks *twirp.ServerHooks) TwirpServer {
	return &fulfillmentServiceServer{
		FulfillmentService: svc,
		hooks:              hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *fulfillmentServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// FulfillmentServicePathPrefix is used for all URL paths on a twirp FulfillmentService server.
// Requests are always: POST FulfillmentServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const FulfillmentServicePathPrefix = "/api/admin.Fulfillment/"

func (s *fulfillmentServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/admin.Fulfillment/GetFulfillment":
		s.serveGetFulfillment(ctx, resp, req)
		return
	case "/api/admin.Fulfillment/GetFulfillments":
		s.serveGetFulfillments(ctx, resp, req)
		return
	case "/api/admin.Fulfillment/UpdateFulfillment":
		s.serveUpdateFulfillment(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *fulfillmentServiceServer) serveGetFulfillment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetFulfillmentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetFulfillmentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *fulfillmentServiceServer) serveGetFulfillmentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *order.Fulfillment
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.GetFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.Fulfillment and nil error while calling GetFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveGetFulfillmentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *order.Fulfillment
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.GetFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.Fulfillment and nil error while calling GetFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveGetFulfillments(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetFulfillmentsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetFulfillmentsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *fulfillmentServiceServer) serveGetFulfillmentsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillments")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetFulfillmentsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *order.FulfillmentsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.GetFulfillments(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.FulfillmentsResponse and nil error while calling GetFulfillments. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveGetFulfillmentsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillments")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetFulfillmentsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *order.FulfillmentsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.GetFulfillments(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.FulfillmentsResponse and nil error while calling GetFulfillments. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveUpdateFulfillment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateFulfillmentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateFulfillmentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *fulfillmentServiceServer) serveUpdateFulfillmentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateFulfillmentRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.UpdateFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveUpdateFulfillmentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateFulfillmentRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.UpdateFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 5
}

func (s *fulfillmentServiceServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *fulfillmentServiceServer) PathPrefix() string {
	return FulfillmentServicePathPrefix
}

// =================================
// MoneyTransactionService Interface
// =================================

type MoneyTransactionService interface {
	GetMoneyTransaction(context.Context, *cm.IDRequest) (*order.MoneyTransaction, error)

	GetMoneyTransactions(context.Context, *GetMoneyTransactionsRequest) (*order.MoneyTransactionsResponse, error)

	ConfirmMoneyTransaction(context.Context, *ConfirmMoneyTransactionRequest) (*cm.UpdatedResponse, error)

	UpdateMoneyTransaction(context.Context, *UpdateMoneyTransactionRequest) (*order.MoneyTransaction, error)

	GetMoneyTransactionShippingExternal(context.Context, *cm.IDRequest) (*order.MoneyTransactionShippingExternal, error)

	GetMoneyTransactionShippingExternals(context.Context, *GetMoneyTransactionShippingExternalsRequest) (*order.MoneyTransactionShippingExternalsResponse, error)

	RemoveMoneyTransactionShippingExternalLines(context.Context, *RemoveMoneyTransactionShippingExternalLinesRequest) (*order.MoneyTransactionShippingExternal, error)

	DeleteMoneyTransactionShippingExternal(context.Context, *cm.IDRequest) (*cm.RemovedResponse, error)

	ConfirmMoneyTransactionShippingExternal(context.Context, *cm.IDRequest) (*cm.UpdatedResponse, error)

	ConfirmMoneyTransactionShippingExternals(context.Context, *cm.IDsRequest) (*cm.UpdatedResponse, error)

	UpdateMoneyTransactionShippingExternal(context.Context, *UpdateMoneyTransactionShippingExternalRequest) (*order.MoneyTransactionShippingExternal, error)

	GetMoneyTransactionShippingEtop(context.Context, *cm.IDRequest) (*order.MoneyTransactionShippingEtop, error)

	GetMoneyTransactionShippingEtops(context.Context, *GetMoneyTransactionShippingEtopsRequest) (*order.MoneyTransactionShippingEtopsResponse, error)

	CreateMoneyTransactionShippingEtop(context.Context, *cm.IDsRequest) (*order.MoneyTransactionShippingEtop, error)

	UpdateMoneyTransactionShippingEtop(context.Context, *UpdateMoneyTransactionShippingEtopRequest) (*order.MoneyTransactionShippingEtop, error)

	DeleteMoneyTransactionShippingEtop(context.Context, *cm.IDRequest) (*cm.DeletedResponse, error)

	ConfirmMoneyTransactionShippingEtop(context.Context, *ConfirmMoneyTransactionShippingEtopRequest) (*cm.UpdatedResponse, error)
}

// =======================================
// MoneyTransactionService Protobuf Client
// =======================================

type moneyTransactionServiceProtobufClient struct {
	client HTTPClient
	urls   [17]string
}

// NewMoneyTransactionServiceProtobufClient creates a Protobuf client that implements the MoneyTransactionService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewMoneyTransactionServiceProtobufClient(addr string, client HTTPClient) MoneyTransactionService {
	prefix := urlBase(addr) + MoneyTransactionServicePathPrefix
	urls := [17]string{
		prefix + "GetMoneyTransaction",
		prefix + "GetMoneyTransactions",
		prefix + "ConfirmMoneyTransaction",
		prefix + "UpdateMoneyTransaction",
		prefix + "GetMoneyTransactionShippingExternal",
		prefix + "GetMoneyTransactionShippingExternals",
		prefix + "RemoveMoneyTransactionShippingExternalLines",
		prefix + "DeleteMoneyTransactionShippingExternal",
		prefix + "ConfirmMoneyTransactionShippingExternal",
		prefix + "ConfirmMoneyTransactionShippingExternals",
		prefix + "UpdateMoneyTransactionShippingExternal",
		prefix + "GetMoneyTransactionShippingEtop",
		prefix + "GetMoneyTransactionShippingEtops",
		prefix + "CreateMoneyTransactionShippingEtop",
		prefix + "UpdateMoneyTransactionShippingEtop",
		prefix + "DeleteMoneyTransactionShippingEtop",
		prefix + "ConfirmMoneyTransactionShippingEtop",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &moneyTransactionServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &moneyTransactionServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *moneyTransactionServiceProtobufClient) GetMoneyTransaction(ctx context.Context, in *cm.IDRequest) (*order.MoneyTransaction, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransaction")
	out := new(order.MoneyTransaction)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceProtobufClient) GetMoneyTransactions(ctx context.Context, in *GetMoneyTransactionsRequest) (*order.MoneyTransactionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactions")
	out := new(order.MoneyTransactionsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceProtobufClient) ConfirmMoneyTransaction(ctx context.Context, in *ConfirmMoneyTransactionRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmMoneyTransaction")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceProtobufClient) UpdateMoneyTransaction(ctx context.Context, in *UpdateMoneyTransactionRequest) (*order.MoneyTransaction, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateMoneyTransaction")
	out := new(order.MoneyTransaction)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceProtobufClient) GetMoneyTransactionShippingExternal(ctx context.Context, in *cm.IDRequest) (*order.MoneyTransactionShippingExternal, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactionShippingExternal")
	out := new(order.MoneyTransactionShippingExternal)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceProtobufClient) GetMoneyTransactionShippingExternals(ctx context.Context, in *GetMoneyTransactionShippingExternalsRequest) (*order.MoneyTransactionShippingExternalsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactionShippingExternals")
	out := new(order.MoneyTransactionShippingExternalsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceProtobufClient) RemoveMoneyTransactionShippingExternalLines(ctx context.Context, in *RemoveMoneyTransactionShippingExternalLinesRequest) (*order.MoneyTransactionShippingExternal, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveMoneyTransactionShippingExternalLines")
	out := new(order.MoneyTransactionShippingExternal)
	err := doProtobufRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceProtobufClient) DeleteMoneyTransactionShippingExternal(ctx context.Context, in *cm.IDRequest) (*cm.RemovedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteMoneyTransactionShippingExternal")
	out := new(cm.RemovedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceProtobufClient) ConfirmMoneyTransactionShippingExternal(ctx context.Context, in *cm.IDRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmMoneyTransactionShippingExternal")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceProtobufClient) ConfirmMoneyTransactionShippingExternals(ctx context.Context, in *cm.IDsRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmMoneyTransactionShippingExternals")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceProtobufClient) UpdateMoneyTransactionShippingExternal(ctx context.Context, in *UpdateMoneyTransactionShippingExternalRequest) (*order.MoneyTransactionShippingExternal, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateMoneyTransactionShippingExternal")
	out := new(order.MoneyTransactionShippingExternal)
	err := doProtobufRequest(ctx, c.client, c.urls[10], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceProtobufClient) GetMoneyTransactionShippingEtop(ctx context.Context, in *cm.IDRequest) (*order.MoneyTransactionShippingEtop, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactionShippingEtop")
	out := new(order.MoneyTransactionShippingEtop)
	err := doProtobufRequest(ctx, c.client, c.urls[11], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceProtobufClient) GetMoneyTransactionShippingEtops(ctx context.Context, in *GetMoneyTransactionShippingEtopsRequest) (*order.MoneyTransactionShippingEtopsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactionShippingEtops")
	out := new(order.MoneyTransactionShippingEtopsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[12], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceProtobufClient) CreateMoneyTransactionShippingEtop(ctx context.Context, in *cm.IDsRequest) (*order.MoneyTransactionShippingEtop, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "CreateMoneyTransactionShippingEtop")
	out := new(order.MoneyTransactionShippingEtop)
	err := doProtobufRequest(ctx, c.client, c.urls[13], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceProtobufClient) UpdateMoneyTransactionShippingEtop(ctx context.Context, in *UpdateMoneyTransactionShippingEtopRequest) (*order.MoneyTransactionShippingEtop, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateMoneyTransactionShippingEtop")
	out := new(order.MoneyTransactionShippingEtop)
	err := doProtobufRequest(ctx, c.client, c.urls[14], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceProtobufClient) DeleteMoneyTransactionShippingEtop(ctx context.Context, in *cm.IDRequest) (*cm.DeletedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteMoneyTransactionShippingEtop")
	out := new(cm.DeletedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[15], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceProtobufClient) ConfirmMoneyTransactionShippingEtop(ctx context.Context, in *ConfirmMoneyTransactionShippingEtopRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmMoneyTransactionShippingEtop")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[16], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===================================
// MoneyTransactionService JSON Client
// ===================================

type moneyTransactionServiceJSONClient struct {
	client HTTPClient
	urls   [17]string
}

// NewMoneyTransactionServiceJSONClient creates a JSON client that implements the MoneyTransactionService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewMoneyTransactionServiceJSONClient(addr string, client HTTPClient) MoneyTransactionService {
	prefix := urlBase(addr) + MoneyTransactionServicePathPrefix
	urls := [17]string{
		prefix + "GetMoneyTransaction",
		prefix + "GetMoneyTransactions",
		prefix + "ConfirmMoneyTransaction",
		prefix + "UpdateMoneyTransaction",
		prefix + "GetMoneyTransactionShippingExternal",
		prefix + "GetMoneyTransactionShippingExternals",
		prefix + "RemoveMoneyTransactionShippingExternalLines",
		prefix + "DeleteMoneyTransactionShippingExternal",
		prefix + "ConfirmMoneyTransactionShippingExternal",
		prefix + "ConfirmMoneyTransactionShippingExternals",
		prefix + "UpdateMoneyTransactionShippingExternal",
		prefix + "GetMoneyTransactionShippingEtop",
		prefix + "GetMoneyTransactionShippingEtops",
		prefix + "CreateMoneyTransactionShippingEtop",
		prefix + "UpdateMoneyTransactionShippingEtop",
		prefix + "DeleteMoneyTransactionShippingEtop",
		prefix + "ConfirmMoneyTransactionShippingEtop",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &moneyTransactionServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &moneyTransactionServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *moneyTransactionServiceJSONClient) GetMoneyTransaction(ctx context.Context, in *cm.IDRequest) (*order.MoneyTransaction, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransaction")
	out := new(order.MoneyTransaction)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceJSONClient) GetMoneyTransactions(ctx context.Context, in *GetMoneyTransactionsRequest) (*order.MoneyTransactionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactions")
	out := new(order.MoneyTransactionsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceJSONClient) ConfirmMoneyTransaction(ctx context.Context, in *ConfirmMoneyTransactionRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmMoneyTransaction")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceJSONClient) UpdateMoneyTransaction(ctx context.Context, in *UpdateMoneyTransactionRequest) (*order.MoneyTransaction, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateMoneyTransaction")
	out := new(order.MoneyTransaction)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceJSONClient) GetMoneyTransactionShippingExternal(ctx context.Context, in *cm.IDRequest) (*order.MoneyTransactionShippingExternal, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactionShippingExternal")
	out := new(order.MoneyTransactionShippingExternal)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceJSONClient) GetMoneyTransactionShippingExternals(ctx context.Context, in *GetMoneyTransactionShippingExternalsRequest) (*order.MoneyTransactionShippingExternalsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactionShippingExternals")
	out := new(order.MoneyTransactionShippingExternalsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceJSONClient) RemoveMoneyTransactionShippingExternalLines(ctx context.Context, in *RemoveMoneyTransactionShippingExternalLinesRequest) (*order.MoneyTransactionShippingExternal, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveMoneyTransactionShippingExternalLines")
	out := new(order.MoneyTransactionShippingExternal)
	err := doJSONRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceJSONClient) DeleteMoneyTransactionShippingExternal(ctx context.Context, in *cm.IDRequest) (*cm.RemovedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteMoneyTransactionShippingExternal")
	out := new(cm.RemovedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceJSONClient) ConfirmMoneyTransactionShippingExternal(ctx context.Context, in *cm.IDRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmMoneyTransactionShippingExternal")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceJSONClient) ConfirmMoneyTransactionShippingExternals(ctx context.Context, in *cm.IDsRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmMoneyTransactionShippingExternals")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceJSONClient) UpdateMoneyTransactionShippingExternal(ctx context.Context, in *UpdateMoneyTransactionShippingExternalRequest) (*order.MoneyTransactionShippingExternal, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateMoneyTransactionShippingExternal")
	out := new(order.MoneyTransactionShippingExternal)
	err := doJSONRequest(ctx, c.client, c.urls[10], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceJSONClient) GetMoneyTransactionShippingEtop(ctx context.Context, in *cm.IDRequest) (*order.MoneyTransactionShippingEtop, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactionShippingEtop")
	out := new(order.MoneyTransactionShippingEtop)
	err := doJSONRequest(ctx, c.client, c.urls[11], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceJSONClient) GetMoneyTransactionShippingEtops(ctx context.Context, in *GetMoneyTransactionShippingEtopsRequest) (*order.MoneyTransactionShippingEtopsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactionShippingEtops")
	out := new(order.MoneyTransactionShippingEtopsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[12], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceJSONClient) CreateMoneyTransactionShippingEtop(ctx context.Context, in *cm.IDsRequest) (*order.MoneyTransactionShippingEtop, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "CreateMoneyTransactionShippingEtop")
	out := new(order.MoneyTransactionShippingEtop)
	err := doJSONRequest(ctx, c.client, c.urls[13], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceJSONClient) UpdateMoneyTransactionShippingEtop(ctx context.Context, in *UpdateMoneyTransactionShippingEtopRequest) (*order.MoneyTransactionShippingEtop, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateMoneyTransactionShippingEtop")
	out := new(order.MoneyTransactionShippingEtop)
	err := doJSONRequest(ctx, c.client, c.urls[14], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceJSONClient) DeleteMoneyTransactionShippingEtop(ctx context.Context, in *cm.IDRequest) (*cm.DeletedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteMoneyTransactionShippingEtop")
	out := new(cm.DeletedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[15], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceJSONClient) ConfirmMoneyTransactionShippingEtop(ctx context.Context, in *ConfirmMoneyTransactionShippingEtopRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmMoneyTransactionShippingEtop")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[16], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ======================================
// MoneyTransactionService Server Handler
// ======================================

type moneyTransactionServiceServer struct {
	MoneyTransactionService
	hooks *twirp.ServerHooks
}

func NewMoneyTransactionServiceServer(svc MoneyTransactionService, hooks *twirp.ServerHooks) TwirpServer {
	return &moneyTransactionServiceServer{
		MoneyTransactionService: svc,
		hooks:                   hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *moneyTransactionServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// MoneyTransactionServicePathPrefix is used for all URL paths on a twirp MoneyTransactionService server.
// Requests are always: POST MoneyTransactionServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const MoneyTransactionServicePathPrefix = "/api/admin.MoneyTransaction/"

func (s *moneyTransactionServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/admin.MoneyTransaction/GetMoneyTransaction":
		s.serveGetMoneyTransaction(ctx, resp, req)
		return
	case "/api/admin.MoneyTransaction/GetMoneyTransactions":
		s.serveGetMoneyTransactions(ctx, resp, req)
		return
	case "/api/admin.MoneyTransaction/ConfirmMoneyTransaction":
		s.serveConfirmMoneyTransaction(ctx, resp, req)
		return
	case "/api/admin.MoneyTransaction/UpdateMoneyTransaction":
		s.serveUpdateMoneyTransaction(ctx, resp, req)
		return
	case "/api/admin.MoneyTransaction/GetMoneyTransactionShippingExternal":
		s.serveGetMoneyTransactionShippingExternal(ctx, resp, req)
		return
	case "/api/admin.MoneyTransaction/GetMoneyTransactionShippingExternals":
		s.serveGetMoneyTransactionShippingExternals(ctx, resp, req)
		return
	case "/api/admin.MoneyTransaction/RemoveMoneyTransactionShippingExternalLines":
		s.serveRemoveMoneyTransactionShippingExternalLines(ctx, resp, req)
		return
	case "/api/admin.MoneyTransaction/DeleteMoneyTransactionShippingExternal":
		s.serveDeleteMoneyTransactionShippingExternal(ctx, resp, req)
		return
	case "/api/admin.MoneyTransaction/ConfirmMoneyTransactionShippingExternal":
		s.serveConfirmMoneyTransactionShippingExternal(ctx, resp, req)
		return
	case "/api/admin.MoneyTransaction/ConfirmMoneyTransactionShippingExternals":
		s.serveConfirmMoneyTransactionShippingExternals(ctx, resp, req)
		return
	case "/api/admin.MoneyTransaction/UpdateMoneyTransactionShippingExternal":
		s.serveUpdateMoneyTransactionShippingExternal(ctx, resp, req)
		return
	case "/api/admin.MoneyTransaction/GetMoneyTransactionShippingEtop":
		s.serveGetMoneyTransactionShippingEtop(ctx, resp, req)
		return
	case "/api/admin.MoneyTransaction/GetMoneyTransactionShippingEtops":
		s.serveGetMoneyTransactionShippingEtops(ctx, resp, req)
		return
	case "/api/admin.MoneyTransaction/CreateMoneyTransactionShippingEtop":
		s.serveCreateMoneyTransactionShippingEtop(ctx, resp, req)
		return
	case "/api/admin.MoneyTransaction/UpdateMoneyTransactionShippingEtop":
		s.serveUpdateMoneyTransactionShippingEtop(ctx, resp, req)
		return
	case "/api/admin.MoneyTransaction/DeleteMoneyTransactionShippingEtop":
		s.serveDeleteMoneyTransactionShippingEtop(ctx, resp, req)
		return
	case "/api/admin.MoneyTransaction/ConfirmMoneyTransactionShippingEtop":
		s.serveConfirmMoneyTransactionShippingEtop(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransaction(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetMoneyTransactionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetMoneyTransactionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransaction")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransaction
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.GetMoneyTransaction(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransaction and nil error while calling GetMoneyTransaction. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransaction")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransaction
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.GetMoneyTransaction(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransaction and nil error while calling GetMoneyTransaction. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactions(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetMoneyTransactionsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetMoneyTransactionsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetMoneyTransactionsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.GetMoneyTransactions(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionsResponse and nil error while calling GetMoneyTransactions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetMoneyTransactionsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.GetMoneyTransactions(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionsResponse and nil error while calling GetMoneyTransactions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveConfirmMoneyTransaction(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveConfirmMoneyTransactionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveConfirmMoneyTransactionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransactionServiceServer) serveConfirmMoneyTransactionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmMoneyTransaction")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ConfirmMoneyTransactionRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.ConfirmMoneyTransaction(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling ConfirmMoneyTransaction. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveConfirmMoneyTransactionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmMoneyTransaction")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(ConfirmMoneyTransactionRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.ConfirmMoneyTransaction(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling ConfirmMoneyTransaction. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveUpdateMoneyTransaction(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateMoneyTransactionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateMoneyTransactionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransactionServiceServer) serveUpdateMoneyTransactionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateMoneyTransaction")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateMoneyTransactionRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransaction
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.UpdateMoneyTransaction(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransaction and nil error while calling UpdateMoneyTransaction. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveUpdateMoneyTransactionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateMoneyTransaction")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateMoneyTransactionRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransaction
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.UpdateMoneyTransaction(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransaction and nil error while calling UpdateMoneyTransaction. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionShippingExternal(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetMoneyTransactionShippingExternalJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetMoneyTransactionShippingExternalProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionShippingExternalJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactionShippingExternal")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionShippingExternal
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.GetMoneyTransactionShippingExternal(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionShippingExternal and nil error while calling GetMoneyTransactionShippingExternal. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionShippingExternalProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactionShippingExternal")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionShippingExternal
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.GetMoneyTransactionShippingExternal(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionShippingExternal and nil error while calling GetMoneyTransactionShippingExternal. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionShippingExternals(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetMoneyTransactionShippingExternalsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetMoneyTransactionShippingExternalsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionShippingExternalsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactionShippingExternals")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetMoneyTransactionShippingExternalsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionShippingExternalsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.GetMoneyTransactionShippingExternals(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionShippingExternalsResponse and nil error while calling GetMoneyTransactionShippingExternals. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionShippingExternalsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactionShippingExternals")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetMoneyTransactionShippingExternalsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionShippingExternalsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.GetMoneyTransactionShippingExternals(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionShippingExternalsResponse and nil error while calling GetMoneyTransactionShippingExternals. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveRemoveMoneyTransactionShippingExternalLines(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoveMoneyTransactionShippingExternalLinesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveMoneyTransactionShippingExternalLinesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransactionServiceServer) serveRemoveMoneyTransactionShippingExternalLinesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveMoneyTransactionShippingExternalLines")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(RemoveMoneyTransactionShippingExternalLinesRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionShippingExternal
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.RemoveMoneyTransactionShippingExternalLines(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionShippingExternal and nil error while calling RemoveMoneyTransactionShippingExternalLines. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveRemoveMoneyTransactionShippingExternalLinesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveMoneyTransactionShippingExternalLines")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(RemoveMoneyTransactionShippingExternalLinesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionShippingExternal
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.RemoveMoneyTransactionShippingExternalLines(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionShippingExternal and nil error while calling RemoveMoneyTransactionShippingExternalLines. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveDeleteMoneyTransactionShippingExternal(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteMoneyTransactionShippingExternalJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteMoneyTransactionShippingExternalProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransactionServiceServer) serveDeleteMoneyTransactionShippingExternalJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteMoneyTransactionShippingExternal")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.RemovedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.DeleteMoneyTransactionShippingExternal(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.RemovedResponse and nil error while calling DeleteMoneyTransactionShippingExternal. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveDeleteMoneyTransactionShippingExternalProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteMoneyTransactionShippingExternal")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.RemovedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.DeleteMoneyTransactionShippingExternal(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.RemovedResponse and nil error while calling DeleteMoneyTransactionShippingExternal. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveConfirmMoneyTransactionShippingExternal(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveConfirmMoneyTransactionShippingExternalJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveConfirmMoneyTransactionShippingExternalProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransactionServiceServer) serveConfirmMoneyTransactionShippingExternalJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmMoneyTransactionShippingExternal")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.ConfirmMoneyTransactionShippingExternal(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling ConfirmMoneyTransactionShippingExternal. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveConfirmMoneyTransactionShippingExternalProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmMoneyTransactionShippingExternal")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.ConfirmMoneyTransactionShippingExternal(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling ConfirmMoneyTransactionShippingExternal. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveConfirmMoneyTransactionShippingExternals(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveConfirmMoneyTransactionShippingExternalsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveConfirmMoneyTransactionShippingExternalsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransactionServiceServer) serveConfirmMoneyTransactionShippingExternalsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmMoneyTransactionShippingExternals")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.ConfirmMoneyTransactionShippingExternals(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling ConfirmMoneyTransactionShippingExternals. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveConfirmMoneyTransactionShippingExternalsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmMoneyTransactionShippingExternals")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.ConfirmMoneyTransactionShippingExternals(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling ConfirmMoneyTransactionShippingExternals. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveUpdateMoneyTransactionShippingExternal(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateMoneyTransactionShippingExternalJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateMoneyTransactionShippingExternalProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransactionServiceServer) serveUpdateMoneyTransactionShippingExternalJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateMoneyTransactionShippingExternal")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateMoneyTransactionShippingExternalRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionShippingExternal
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.UpdateMoneyTransactionShippingExternal(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionShippingExternal and nil error while calling UpdateMoneyTransactionShippingExternal. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveUpdateMoneyTransactionShippingExternalProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateMoneyTransactionShippingExternal")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateMoneyTransactionShippingExternalRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionShippingExternal
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.UpdateMoneyTransactionShippingExternal(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionShippingExternal and nil error while calling UpdateMoneyTransactionShippingExternal. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionShippingEtop(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetMoneyTransactionShippingEtopJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetMoneyTransactionShippingEtopProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionShippingEtopJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactionShippingEtop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionShippingEtop
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.GetMoneyTransactionShippingEtop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionShippingEtop and nil error while calling GetMoneyTransactionShippingEtop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionShippingEtopProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactionShippingEtop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionShippingEtop
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.GetMoneyTransactionShippingEtop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionShippingEtop and nil error while calling GetMoneyTransactionShippingEtop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionShippingEtops(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetMoneyTransactionShippingEtopsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetMoneyTransactionShippingEtopsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionShippingEtopsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactionShippingEtops")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetMoneyTransactionShippingEtopsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionShippingEtopsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.GetMoneyTransactionShippingEtops(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionShippingEtopsResponse and nil error while calling GetMoneyTransactionShippingEtops. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionShippingEtopsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactionShippingEtops")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetMoneyTransactionShippingEtopsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionShippingEtopsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.GetMoneyTransactionShippingEtops(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionShippingEtopsResponse and nil error while calling GetMoneyTransactionShippingEtops. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveCreateMoneyTransactionShippingEtop(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateMoneyTransactionShippingEtopJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateMoneyTransactionShippingEtopProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransactionServiceServer) serveCreateMoneyTransactionShippingEtopJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateMoneyTransactionShippingEtop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionShippingEtop
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.CreateMoneyTransactionShippingEtop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionShippingEtop and nil error while calling CreateMoneyTransactionShippingEtop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveCreateMoneyTransactionShippingEtopProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateMoneyTransactionShippingEtop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionShippingEtop
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.CreateMoneyTransactionShippingEtop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionShippingEtop and nil error while calling CreateMoneyTransactionShippingEtop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveUpdateMoneyTransactionShippingEtop(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateMoneyTransactionShippingEtopJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateMoneyTransactionShippingEtopProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransactionServiceServer) serveUpdateMoneyTransactionShippingEtopJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateMoneyTransactionShippingEtop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateMoneyTransactionShippingEtopRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionShippingEtop
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.UpdateMoneyTransactionShippingEtop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionShippingEtop and nil error while calling UpdateMoneyTransactionShippingEtop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveUpdateMoneyTransactionShippingEtopProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateMoneyTransactionShippingEtop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateMoneyTransactionShippingEtopRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionShippingEtop
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.UpdateMoneyTransactionShippingEtop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionShippingEtop and nil error while calling UpdateMoneyTransactionShippingEtop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveDeleteMoneyTransactionShippingEtop(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteMoneyTransactionShippingEtopJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteMoneyTransactionShippingEtopProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransactionServiceServer) serveDeleteMoneyTransactionShippingEtopJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteMoneyTransactionShippingEtop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.DeletedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.DeleteMoneyTransactionShippingEtop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.DeletedResponse and nil error while calling DeleteMoneyTransactionShippingEtop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveDeleteMoneyTransactionShippingEtopProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteMoneyTransactionShippingEtop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.DeletedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.DeleteMoneyTransactionShippingEtop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.DeletedResponse and nil error while calling DeleteMoneyTransactionShippingEtop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveConfirmMoneyTransactionShippingEtop(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveConfirmMoneyTransactionShippingEtopJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveConfirmMoneyTransactionShippingEtopProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransactionServiceServer) serveConfirmMoneyTransactionShippingEtopJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmMoneyTransactionShippingEtop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ConfirmMoneyTransactionShippingEtopRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.ConfirmMoneyTransactionShippingEtop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling ConfirmMoneyTransactionShippingEtop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveConfirmMoneyTransactionShippingEtopProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmMoneyTransactionShippingEtop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(ConfirmMoneyTransactionShippingEtopRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.ConfirmMoneyTransactionShippingEtop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling ConfirmMoneyTransactionShippingEtop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 6
}

func (s *moneyTransactionServiceServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *moneyTransactionServiceServer) PathPrefix() string {
	return MoneyTransactionServicePathPrefix
}

// =====================
// ShopService Interface
// =====================

type ShopService interface {
	GetShop(context.Context, *cm.IDRequest) (*etop.Shop, error)

	GetShops(context.Context, *GetShopsRequest) (*GetShopsResponse, error)
}

// ===========================
// ShopService Protobuf Client
// ===========================

type shopServiceProtobufClient struct {
	client HTTPClient
	urls   [2]string
}

// NewShopServiceProtobufClient creates a Protobuf client that implements the ShopService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewShopServiceProtobufClient(addr string, client HTTPClient) ShopService {
	prefix := urlBase(addr) + ShopServicePathPrefix
	urls := [2]string{
		prefix + "GetShop",
		prefix + "GetShops",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &shopServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &shopServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *shopServiceProtobufClient) GetShop(ctx context.Context, in *cm.IDRequest) (*etop.Shop, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Shop")
	ctx = ctxsetters.WithMethodName(ctx, "GetShop")
	out := new(etop.Shop)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceProtobufClient) GetShops(ctx context.Context, in *GetShopsRequest) (*GetShopsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Shop")
	ctx = ctxsetters.WithMethodName(ctx, "GetShops")
	out := new(GetShopsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =======================
// ShopService JSON Client
// =======================

type shopServiceJSONClient struct {
	client HTTPClient
	urls   [2]string
}

// NewShopServiceJSONClient creates a JSON client that implements the ShopService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewShopServiceJSONClient(addr string, client HTTPClient) ShopService {
	prefix := urlBase(addr) + ShopServicePathPrefix
	urls := [2]string{
		prefix + "GetShop",
		prefix + "GetShops",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &shopServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &shopServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *shopServiceJSONClient) GetShop(ctx context.Context, in *cm.IDRequest) (*etop.Shop, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Shop")
	ctx = ctxsetters.WithMethodName(ctx, "GetShop")
	out := new(etop.Shop)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceJSONClient) GetShops(ctx context.Context, in *GetShopsRequest) (*GetShopsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Shop")
	ctx = ctxsetters.WithMethodName(ctx, "GetShops")
	out := new(GetShopsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// ShopService Server Handler
// ==========================

type shopServiceServer struct {
	ShopService
	hooks *twirp.ServerHooks
}

func NewShopServiceServer(svc ShopService, hooks *twirp.ServerHooks) TwirpServer {
	return &shopServiceServer{
		ShopService: svc,
		hooks:       hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *shopServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// ShopServicePathPrefix is used for all URL paths on a twirp ShopService server.
// Requests are always: POST ShopServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const ShopServicePathPrefix = "/api/admin.Shop/"

func (s *shopServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Shop")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/admin.Shop/GetShop":
		s.serveGetShop(ctx, resp, req)
		return
	case "/api/admin.Shop/GetShops":
		s.serveGetShops(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *shopServiceServer) serveGetShop(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetShopJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetShopProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *shopServiceServer) serveGetShopJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetShop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *etop.Shop
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShopService.GetShop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.Shop and nil error while calling GetShop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shopServiceServer) serveGetShopProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetShop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *etop.Shop
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShopService.GetShop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.Shop and nil error while calling GetShop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shopServiceServer) serveGetShops(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetShopsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetShopsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *shopServiceServer) serveGetShopsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetShops")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetShopsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *GetShopsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShopService.GetShops(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetShopsResponse and nil error while calling GetShops. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shopServiceServer) serveGetShopsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetShops")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetShopsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *GetShopsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShopService.GetShops(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetShopsResponse and nil error while calling GetShops. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shopServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 7
}

func (s *shopServiceServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *shopServiceServer) PathPrefix() string {
	return ShopServicePathPrefix
}

// =======================
// CreditService Interface
// =======================

type CreditService interface {
	GetCredit(context.Context, *GetCreditRequest) (*etop.Credit, error)

	GetCredits(context.Context, *GetCreditsRequest) (*etop.CreditsResponse, error)

	CreateCredit(context.Context, *CreateCreditRequest) (*etop.Credit, error)

	UpdateCredit(context.Context, *UpdateCreditRequest) (*etop.Credit, error)

	ConfirmCredit(context.Context, *ConfirmCreditRequest) (*cm.UpdatedResponse, error)

	DeleteCredit(context.Context, *cm.IDRequest) (*cm.RemovedResponse, error)
}

// =============================
// CreditService Protobuf Client
// =============================

type creditServiceProtobufClient struct {
	client HTTPClient
	urls   [6]string
}

// NewCreditServiceProtobufClient creates a Protobuf client that implements the CreditService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewCreditServiceProtobufClient(addr string, client HTTPClient) CreditService {
	prefix := urlBase(addr) + CreditServicePathPrefix
	urls := [6]string{
		prefix + "GetCredit",
		prefix + "GetCredits",
		prefix + "CreateCredit",
		prefix + "UpdateCredit",
		prefix + "ConfirmCredit",
		prefix + "DeleteCredit",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &creditServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &creditServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *creditServiceProtobufClient) GetCredit(ctx context.Context, in *GetCreditRequest) (*etop.Credit, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Credit")
	ctx = ctxsetters.WithMethodName(ctx, "GetCredit")
	out := new(etop.Credit)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditServiceProtobufClient) GetCredits(ctx context.Context, in *GetCreditsRequest) (*etop.CreditsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Credit")
	ctx = ctxsetters.WithMethodName(ctx, "GetCredits")
	out := new(etop.CreditsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditServiceProtobufClient) CreateCredit(ctx context.Context, in *CreateCreditRequest) (*etop.Credit, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Credit")
	ctx = ctxsetters.WithMethodName(ctx, "CreateCredit")
	out := new(etop.Credit)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditServiceProtobufClient) UpdateCredit(ctx context.Context, in *UpdateCreditRequest) (*etop.Credit, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Credit")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCredit")
	out := new(etop.Credit)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditServiceProtobufClient) ConfirmCredit(ctx context.Context, in *ConfirmCreditRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Credit")
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmCredit")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditServiceProtobufClient) DeleteCredit(ctx context.Context, in *cm.IDRequest) (*cm.RemovedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Credit")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCredit")
	out := new(cm.RemovedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =========================
// CreditService JSON Client
// =========================

type creditServiceJSONClient struct {
	client HTTPClient
	urls   [6]string
}

// NewCreditServiceJSONClient creates a JSON client that implements the CreditService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewCreditServiceJSONClient(addr string, client HTTPClient) CreditService {
	prefix := urlBase(addr) + CreditServicePathPrefix
	urls := [6]string{
		prefix + "GetCredit",
		prefix + "GetCredits",
		prefix + "CreateCredit",
		prefix + "UpdateCredit",
		prefix + "ConfirmCredit",
		prefix + "DeleteCredit",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &creditServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &creditServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *creditServiceJSONClient) GetCredit(ctx context.Context, in *GetCreditRequest) (*etop.Credit, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Credit")
	ctx = ctxsetters.WithMethodName(ctx, "GetCredit")
	out := new(etop.Credit)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditServiceJSONClient) GetCredits(ctx context.Context, in *GetCreditsRequest) (*etop.CreditsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Credit")
	ctx = ctxsetters.WithMethodName(ctx, "GetCredits")
	out := new(etop.CreditsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditServiceJSONClient) CreateCredit(ctx context.Context, in *CreateCreditRequest) (*etop.Credit, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Credit")
	ctx = ctxsetters.WithMethodName(ctx, "CreateCredit")
	out := new(etop.Credit)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditServiceJSONClient) UpdateCredit(ctx context.Context, in *UpdateCreditRequest) (*etop.Credit, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Credit")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCredit")
	out := new(etop.Credit)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditServiceJSONClient) ConfirmCredit(ctx context.Context, in *ConfirmCreditRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Credit")
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmCredit")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditServiceJSONClient) DeleteCredit(ctx context.Context, in *cm.IDRequest) (*cm.RemovedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Credit")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCredit")
	out := new(cm.RemovedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ============================
// CreditService Server Handler
// ============================

type creditServiceServer struct {
	CreditService
	hooks *twirp.ServerHooks
}

func NewCreditServiceServer(svc CreditService, hooks *twirp.ServerHooks) TwirpServer {
	return &creditServiceServer{
		CreditService: svc,
		hooks:         hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *creditServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// CreditServicePathPrefix is used for all URL paths on a twirp CreditService server.
// Requests are always: POST CreditServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const CreditServicePathPrefix = "/api/admin.Credit/"

func (s *creditServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Credit")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/admin.Credit/GetCredit":
		s.serveGetCredit(ctx, resp, req)
		return
	case "/api/admin.Credit/GetCredits":
		s.serveGetCredits(ctx, resp, req)
		return
	case "/api/admin.Credit/CreateCredit":
		s.serveCreateCredit(ctx, resp, req)
		return
	case "/api/admin.Credit/UpdateCredit":
		s.serveUpdateCredit(ctx, resp, req)
		return
	case "/api/admin.Credit/ConfirmCredit":
		s.serveConfirmCredit(ctx, resp, req)
		return
	case "/api/admin.Credit/DeleteCredit":
		s.serveDeleteCredit(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *creditServiceServer) serveGetCredit(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetCreditJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetCreditProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *creditServiceServer) serveGetCreditJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCredit")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetCreditRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *etop.Credit
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CreditService.GetCredit(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.Credit and nil error while calling GetCredit. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *creditServiceServer) serveGetCreditProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCredit")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetCreditRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *etop.Credit
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CreditService.GetCredit(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.Credit and nil error while calling GetCredit. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *creditServiceServer) serveGetCredits(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetCreditsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetCreditsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *creditServiceServer) serveGetCreditsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCredits")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetCreditsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *etop.CreditsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CreditService.GetCredits(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.CreditsResponse and nil error while calling GetCredits. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *creditServiceServer) serveGetCreditsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCredits")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetCreditsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *etop.CreditsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CreditService.GetCredits(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.CreditsResponse and nil error while calling GetCredits. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *creditServiceServer) serveCreateCredit(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateCreditJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateCreditProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *creditServiceServer) serveCreateCreditJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateCredit")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CreateCreditRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *etop.Credit
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CreditService.CreateCredit(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.Credit and nil error while calling CreateCredit. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *creditServiceServer) serveCreateCreditProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateCredit")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CreateCreditRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *etop.Credit
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CreditService.CreateCredit(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.Credit and nil error while calling CreateCredit. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *creditServiceServer) serveUpdateCredit(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateCreditJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateCreditProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *creditServiceServer) serveUpdateCreditJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCredit")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateCreditRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *etop.Credit
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CreditService.UpdateCredit(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.Credit and nil error while calling UpdateCredit. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *creditServiceServer) serveUpdateCreditProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCredit")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateCreditRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *etop.Credit
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CreditService.UpdateCredit(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.Credit and nil error while calling UpdateCredit. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *creditServiceServer) serveConfirmCredit(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveConfirmCreditJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveConfirmCreditProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *creditServiceServer) serveConfirmCreditJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmCredit")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ConfirmCreditRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CreditService.ConfirmCredit(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling ConfirmCredit. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *creditServiceServer) serveConfirmCreditProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmCredit")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(ConfirmCreditRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CreditService.ConfirmCredit(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling ConfirmCredit. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *creditServiceServer) serveDeleteCredit(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteCreditJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteCreditProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *creditServiceServer) serveDeleteCreditJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCredit")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.RemovedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CreditService.DeleteCredit(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.RemovedResponse and nil error while calling DeleteCredit. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *creditServiceServer) serveDeleteCreditProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCredit")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.RemovedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CreditService.DeleteCredit(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.RemovedResponse and nil error while calling DeleteCredit. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *creditServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 8
}

func (s *creditServiceServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *creditServiceServer) PathPrefix() string {
	return CreditServicePathPrefix
}

// =============================
// NotificationService Interface
// =============================

type NotificationService interface {
	CreateNotifications(context.Context, *CreateNotificationsRequest) (*CreateNotificationsResponse, error)
}

// ===================================
// NotificationService Protobuf Client
// ===================================

type notificationServiceProtobufClient struct {
	client HTTPClient
	urls   [1]string
}

// NewNotificationServiceProtobufClient creates a Protobuf client that implements the NotificationService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewNotificationServiceProtobufClient(addr string, client HTTPClient) NotificationService {
	prefix := urlBase(addr) + NotificationServicePathPrefix
	urls := [1]string{
		prefix + "CreateNotifications",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &notificationServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &notificationServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *notificationServiceProtobufClient) CreateNotifications(ctx context.Context, in *CreateNotificationsRequest) (*CreateNotificationsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Notification")
	ctx = ctxsetters.WithMethodName(ctx, "CreateNotifications")
	out := new(CreateNotificationsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===============================
// NotificationService JSON Client
// ===============================

type notificationServiceJSONClient struct {
	client HTTPClient
	urls   [1]string
}

// NewNotificationServiceJSONClient creates a JSON client that implements the NotificationService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewNotificationServiceJSONClient(addr string, client HTTPClient) NotificationService {
	prefix := urlBase(addr) + NotificationServicePathPrefix
	urls := [1]string{
		prefix + "CreateNotifications",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &notificationServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &notificationServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *notificationServiceJSONClient) CreateNotifications(ctx context.Context, in *CreateNotificationsRequest) (*CreateNotificationsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Notification")
	ctx = ctxsetters.WithMethodName(ctx, "CreateNotifications")
	out := new(CreateNotificationsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==================================
// NotificationService Server Handler
// ==================================

type notificationServiceServer struct {
	NotificationService
	hooks *twirp.ServerHooks
}

func NewNotificationServiceServer(svc NotificationService, hooks *twirp.ServerHooks) TwirpServer {
	return &notificationServiceServer{
		NotificationService: svc,
		hooks:               hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *notificationServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// NotificationServicePathPrefix is used for all URL paths on a twirp NotificationService server.
// Requests are always: POST NotificationServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const NotificationServicePathPrefix = "/api/admin.Notification/"

func (s *notificationServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "admin")
	ctx = ctxsetters.WithServiceName(ctx, "Notification")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/admin.Notification/CreateNotifications":
		s.serveCreateNotifications(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *notificationServiceServer) serveCreateNotifications(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateNotificationsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateNotificationsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *notificationServiceServer) serveCreateNotificationsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateNotifications")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CreateNotificationsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *CreateNotificationsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.NotificationService.CreateNotifications(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateNotificationsResponse and nil error while calling CreateNotifications. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *notificationServiceServer) serveCreateNotificationsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateNotifications")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CreateNotificationsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *CreateNotificationsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.NotificationService.CreateNotifications(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateNotificationsResponse and nil error while calling CreateNotifications. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *notificationServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 9
}

func (s *notificationServiceServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *notificationServiceServer) PathPrefix() string {
	return NotificationServicePathPrefix
}

// =====
// Utils
// =====

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
//
// HTTPClient implementations should not follow redirects. Redirects are
// automatically disabled if *(net/http).Client is passed to client
// constructors. See the withoutRedirects function in this file for more
// details.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// TwirpServer is the interface generated server structs will support: they're
// HTTP handlers with additional methods for accessing metadata about the
// service. Those accessors are a low-level API for building reflection tools.
// Most people can think of TwirpServers as just http.Handlers.
type TwirpServer interface {
	http.Handler
	// ServiceDescriptor returns gzipped bytes describing the .proto file that
	// this service was generated from. Once unzipped, the bytes can be
	// unmarshalled as a
	// github.com/golang/protobuf/protoc-gen-go/descriptor.FileDescriptorProto.
	//
	// The returned integer is the index of this particular service within that
	// FileDescriptorProto's 'Service' slice of ServiceDescriptorProtos. This is a
	// low-level field, expected to be used for reflection.
	ServiceDescriptor() ([]byte, int)
	// ProtocGenTwirpVersion is the semantic version string of the version of
	// twirp used to generate this file.
	ProtocGenTwirpVersion() string
	// PathPrefix returns the HTTP URL path prefix for all methods handled by this
	// service. This can be used with an HTTP mux to route twirp requests
	// alongside non-twirp requests on one HTTP listener.
	PathPrefix() string
}

// WriteError writes an HTTP response with a valid Twirp error format (code, msg, meta).
// Useful outside of the Twirp server (e.g. http middleware), but does not trigger hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func WriteError(resp http.ResponseWriter, err error) {
	writeError(context.Background(), resp, err, nil)
}

// writeError writes Twirp errors in the response and triggers hooks.
func writeError(ctx context.Context, resp http.ResponseWriter, err error, hooks *twirp.ServerHooks) {
	// Non-twirp errors are wrapped as Internal (default)
	twerr, ok := err.(twirp.Error)
	if !ok {
		twerr = twirp.InternalErrorWith(err)
	}

	statusCode := twirp.ServerHTTPStatusFromErrorCode(twerr.Code())
	ctx = ctxsetters.WithStatusCode(ctx, statusCode)
	ctx = callError(ctx, hooks, twerr)

	respBody := marshalErrorToJSON(twerr)

	resp.Header().Set("Content-Type", "application/json") // Error responses are always JSON
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBody)))
	resp.WriteHeader(statusCode) // set HTTP status code and send response

	_, writeErr := resp.Write(respBody)
	if writeErr != nil {
		// We have three options here. We could log the error, call the Error
		// hook, or just silently ignore the error.
		//
		// Logging is unacceptable because we don't have a user-controlled
		// logger; writing out to stderr without permission is too rude.
		//
		// Calling the Error hook would confuse users: it would mean the Error
		// hook got called twice for one request, which is likely to lead to
		// duplicated log messages and metrics, no matter how well we document
		// the behavior.
		//
		// Silently ignoring the error is our least-bad option. It's highly
		// likely that the connection is broken and the original 'err' says
		// so anyway.
		_ = writeErr
	}

	callResponseSent(ctx, hooks)
}

// urlBase helps ensure that addr specifies a scheme. If it is unparsable
// as a URL, it returns addr unchanged.
func urlBase(addr string) string {
	// If the addr specifies a scheme, use it. If not, default to
	// http. If url.Parse fails on it, return it unchanged.
	url, err := url.Parse(addr)
	if err != nil {
		return addr
	}
	if url.Scheme == "" {
		url.Scheme = "http"
	}
	return url.String()
}

// getCustomHTTPReqHeaders retrieves a copy of any headers that are set in
// a context through the twirp.WithHTTPRequestHeaders function.
// If there are no headers set, or if they have the wrong type, nil is returned.
func getCustomHTTPReqHeaders(ctx context.Context) http.Header {
	header, ok := twirp.HTTPRequestHeaders(ctx)
	if !ok || header == nil {
		return nil
	}
	copied := make(http.Header)
	for k, vv := range header {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}
	return copied
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequest("POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if customHeader := getCustomHTTPReqHeaders(ctx); customHeader != nil {
		req.Header = customHeader
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	req.Header.Set("Twirp-Version", "v5.7.0")
	return req, nil
}

// JSON serialization for errors
type twerrJSON struct {
	Code string            `json:"code"`
	Msg  string            `json:"msg"`
	Meta map[string]string `json:"meta,omitempty"`
}

// marshalErrorToJSON returns JSON from a twirp.Error, that can be used as HTTP error response body.
// If serialization fails, it will use a descriptive Internal error instead.
func marshalErrorToJSON(twerr twirp.Error) []byte {
	// make sure that msg is not too large
	msg := twerr.Msg()
	if len(msg) > 1e6 {
		msg = msg[:1e6]
	}

	tj := twerrJSON{
		Code: string(twerr.Code()),
		Msg:  msg,
		Meta: twerr.MetaMap(),
	}

	buf, err := json.Marshal(&tj)
	if err != nil {
		buf = []byte("{\"type\": \"" + twirp.Internal + "\", \"msg\": \"There was an error but it could not be serialized into JSON\"}") // fallback
	}

	return buf
}

// errorFromResponse builds a twirp.Error from a non-200 HTTP response.
// If the response has a valid serialized Twirp error, then it's returned.
// If not, the response status code is used to generate a similar twirp
// error. See twirpErrorFromIntermediary for more info on intermediary errors.
func errorFromResponse(resp *http.Response) twirp.Error {
	statusCode := resp.StatusCode
	statusText := http.StatusText(statusCode)

	if isHTTPRedirect(statusCode) {
		// Unexpected redirect: it must be an error from an intermediary.
		// Twirp clients don't follow redirects automatically, Twirp only handles
		// POST requests, redirects should only happen on GET and HEAD requests.
		location := resp.Header.Get("Location")
		msg := fmt.Sprintf("unexpected HTTP status code %d %q received, Location=%q", statusCode, statusText, location)
		return twirpErrorFromIntermediary(statusCode, msg, location)
	}

	respBodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return wrapInternal(err, "failed to read server error response body")
	}
	var tj twerrJSON
	if err := json.Unmarshal(respBodyBytes, &tj); err != nil {
		// Invalid JSON response; it must be an error from an intermediary.
		msg := fmt.Sprintf("Error from intermediary with HTTP status code %d %q", statusCode, statusText)
		return twirpErrorFromIntermediary(statusCode, msg, string(respBodyBytes))
	}

	errorCode := twirp.ErrorCode(tj.Code)
	if !twirp.IsValidErrorCode(errorCode) {
		msg := "invalid type returned from server error response: " + tj.Code
		return twirp.InternalError(msg)
	}

	twerr := twirp.NewError(errorCode, tj.Msg)
	for k, v := range tj.Meta {
		twerr = twerr.WithMeta(k, v)
	}
	return twerr
}

// twirpErrorFromIntermediary maps HTTP errors from non-twirp sources to twirp errors.
// The mapping is similar to gRPC: https://github.com/grpc/grpc/blob/master/doc/http-grpc-status-mapping.md.
// Returned twirp Errors have some additional metadata for inspection.
func twirpErrorFromIntermediary(status int, msg string, bodyOrLocation string) twirp.Error {
	var code twirp.ErrorCode
	if isHTTPRedirect(status) { // 3xx
		code = twirp.Internal
	} else {
		switch status {
		case 400: // Bad Request
			code = twirp.Internal
		case 401: // Unauthorized
			code = twirp.Unauthenticated
		case 403: // Forbidden
			code = twirp.PermissionDenied
		case 404: // Not Found
			code = twirp.BadRoute
		case 429, 502, 503, 504: // Too Many Requests, Bad Gateway, Service Unavailable, Gateway Timeout
			code = twirp.Unavailable
		default: // All other codes
			code = twirp.Unknown
		}
	}

	twerr := twirp.NewError(code, msg)
	twerr = twerr.WithMeta("http_error_from_intermediary", "true") // to easily know if this error was from intermediary
	twerr = twerr.WithMeta("status_code", strconv.Itoa(status))
	if isHTTPRedirect(status) {
		twerr = twerr.WithMeta("location", bodyOrLocation)
	} else {
		twerr = twerr.WithMeta("body", bodyOrLocation)
	}
	return twerr
}

func isHTTPRedirect(status int) bool {
	return status >= 300 && status <= 399
}

// wrapInternal wraps an error with a prefix as an Internal error.
// The original error cause is accessible by github.com/pkg/errors.Cause.
func wrapInternal(err error, prefix string) twirp.Error {
	return twirp.InternalErrorWith(&wrappedError{prefix: prefix, cause: err})
}

type wrappedError struct {
	prefix string
	cause  error
}

func (e *wrappedError) Cause() error  { return e.cause }
func (e *wrappedError) Error() string { return e.prefix + ": " + e.cause.Error() }

// ensurePanicResponses makes sure that rpc methods causing a panic still result in a Twirp Internal
// error response (status 500), and error hooks are properly called with the panic wrapped as an error.
// The panic is re-raised so it can be handled normally with middleware.
func ensurePanicResponses(ctx context.Context, resp http.ResponseWriter, hooks *twirp.ServerHooks) {
	if r := recover(); r != nil {
		// Wrap the panic as an error so it can be passed to error hooks.
		// The original error is accessible from error hooks, but not visible in the response.
		err := errFromPanic(r)
		twerr := &internalWithCause{msg: "Internal service panic", cause: err}
		// Actually write the error
		writeError(ctx, resp, twerr, hooks)
		// If possible, flush the error to the wire.
		f, ok := resp.(http.Flusher)
		if ok {
			f.Flush()
		}

		panic(r)
	}
}

// errFromPanic returns the typed error if the recovered panic is an error, otherwise formats as error.
func errFromPanic(p interface{}) error {
	if err, ok := p.(error); ok {
		return err
	}
	return fmt.Errorf("panic: %v", p)
}

// internalWithCause is a Twirp Internal error wrapping an original error cause, accessible
// by github.com/pkg/errors.Cause, but the original error message is not exposed on Msg().
type internalWithCause struct {
	msg   string
	cause error
}

func (e *internalWithCause) Cause() error                                { return e.cause }
func (e *internalWithCause) Error() string                               { return e.msg + ": " + e.cause.Error() }
func (e *internalWithCause) Code() twirp.ErrorCode                       { return twirp.Internal }
func (e *internalWithCause) Msg() string                                 { return e.msg }
func (e *internalWithCause) Meta(key string) string                      { return "" }
func (e *internalWithCause) MetaMap() map[string]string                  { return nil }
func (e *internalWithCause) WithMeta(key string, val string) twirp.Error { return e }

// badRouteError is used when the twirp server cannot route a request
func badRouteError(msg string, method, url string) twirp.Error {
	err := twirp.NewError(twirp.BadRoute, msg)
	err = err.WithMeta("twirp_invalid_route", method+" "+url)
	return err
}

// withoutRedirects makes sure that the POST request can not be redirected.
// The standard library will, by default, redirect requests (including POSTs) if it gets a 302 or
// 303 response, and also 301s in go1.8. It redirects by making a second request, changing the
// method to GET and removing the body. This produces very confusing error messages, so instead we
// set a redirect policy that always errors. This stops Go from executing the redirect.
//
// We have to be a little careful in case the user-provided http.Client has its own CheckRedirect
// policy - if so, we'll run through that policy first.
//
// Because this requires modifying the http.Client, we make a new copy of the client and return it.
func withoutRedirects(in *http.Client) *http.Client {
	copy := *in
	copy.CheckRedirect = func(req *http.Request, via []*http.Request) error {
		if in.CheckRedirect != nil {
			// Run the input's redirect if it exists, in case it has side effects, but ignore any error it
			// returns, since we want to use ErrUseLastResponse.
			err := in.CheckRedirect(req, via)
			_ = err // Silly, but this makes sure generated code passes errcheck -blank, which some people use.
		}
		return http.ErrUseLastResponse
	}
	return &copy
}

// doProtobufRequest makes a Protobuf request to the remote Twirp service.
func doProtobufRequest(ctx context.Context, client HTTPClient, url string, in, out proto.Message) (err error) {
	reqBodyBytes, err := proto.Marshal(in)
	if err != nil {
		return wrapInternal(err, "failed to marshal proto request")
	}
	reqBody := bytes.NewBuffer(reqBodyBytes)
	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	req, err := newRequest(ctx, url, reqBody, "application/protobuf")
	if err != nil {
		return wrapInternal(err, "could not build request")
	}
	resp, err := client.Do(req)
	if err != nil {
		return wrapInternal(err, "failed to do request")
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = wrapInternal(cerr, "failed to close response body")
		}
	}()

	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return errorFromResponse(resp)
	}

	respBodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return wrapInternal(err, "failed to read response body")
	}
	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	if err = proto.Unmarshal(respBodyBytes, out); err != nil {
		return wrapInternal(err, "failed to unmarshal proto response")
	}
	return nil
}

// doJSONRequest makes a JSON request to the remote Twirp service.
func doJSONRequest(ctx context.Context, client HTTPClient, url string, in, out proto.Message) (err error) {
	reqBody := bytes.NewBuffer(nil)
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(reqBody, in); err != nil {
		return wrapInternal(err, "failed to marshal json request")
	}
	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	req, err := newRequest(ctx, url, reqBody, "application/json")
	if err != nil {
		return wrapInternal(err, "could not build request")
	}
	resp, err := client.Do(req)
	if err != nil {
		return wrapInternal(err, "failed to do request")
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = wrapInternal(cerr, "failed to close response body")
		}
	}()

	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return errorFromResponse(resp)
	}

	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(resp.Body, out); err != nil {
		return wrapInternal(err, "failed to unmarshal json response")
	}
	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}
	return nil
}

// Call twirp.ServerHooks.RequestReceived if the hook is available
func callRequestReceived(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestReceived == nil {
		return ctx, nil
	}
	return h.RequestReceived(ctx)
}

// Call twirp.ServerHooks.RequestRouted if the hook is available
func callRequestRouted(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestRouted == nil {
		return ctx, nil
	}
	return h.RequestRouted(ctx)
}

// Call twirp.ServerHooks.ResponsePrepared if the hook is available
func callResponsePrepared(ctx context.Context, h *twirp.ServerHooks) context.Context {
	if h == nil || h.ResponsePrepared == nil {
		return ctx
	}
	return h.ResponsePrepared(ctx)
}

// Call twirp.ServerHooks.ResponseSent if the hook is available
func callResponseSent(ctx context.Context, h *twirp.ServerHooks) {
	if h == nil || h.ResponseSent == nil {
		return
	}
	h.ResponseSent(ctx)
}

// Call twirp.ServerHooks.Error if the hook is available
func callError(ctx context.Context, h *twirp.ServerHooks, err twirp.Error) context.Context {
	if h == nil || h.Error == nil {
		return ctx
	}
	return h.Error(ctx, err)
}

var twirpFileDescriptor0 = []byte{
	// 3532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x3b, 0x4d, 0x73, 0x1b, 0xd7,
	0x91, 0x1c, 0x80, 0x24, 0x88, 0x06, 0x09, 0x4a, 0x8f, 0x94, 0x08, 0x83, 0x22, 0x48, 0x8d, 0x28,
	0x89, 0x92, 0x2c, 0x90, 0x82, 0xb4, 0xfe, 0x58, 0x59, 0xbb, 0x05, 0x91, 0x12, 0x85, 0xb5, 0xbe,
	0x0a, 0x94, 0x6c, 0xaf, 0x57, 0xae, 0xa9, 0x21, 0xe6, 0x11, 0x9c, 0xd5, 0x60, 0x06, 0x9e, 0x19,
	0x50, 0x60, 0x6d, 0x6d, 0xd5, 0xde, 0xbc, 0x9f, 0x55, 0xbb, 0x7b, 0x4a, 0x55, 0x72, 0x49, 0xe5,
	0x92, 0x1c, 0x92, 0x83, 0x2b, 0xe5, 0xe4, 0x9c, 0x93, 0x2b, 0xbe, 0xf8, 0x0f, 0x24, 0x65, 0xc9,
	0xd7, 0xa4, 0xca, 0x95, 0x73, 0x0e, 0xa9, 0xf7, 0x35, 0xf3, 0x66, 0x30, 0xf8, 0xa0, 0xe3, 0x38,
	0x76, 0x72, 0xa1, 0x30, 0xfd, 0x35, 0xfd, 0xba, 0x7b, 0xfa, 0xf5, 0xeb, 0xd7, 0x82, 0x93, 0xd8,
	0x77, 0xda, 0xeb, 0xba, 0xd1, 0x32, 0x6d, 0xf6, 0xb7, 0xdc, 0x76, 0x1d, 0xdf, 0x41, 0x13, 0xf4,
	0xa1, 0xf8, 0x32, 0x7d, 0x6a, 0x5c, 0x6e, 0x62, 0xfb, 0xb2, 0xf7, 0x4c, 0x6f, 0x36, 0xb1, 0xbb,
	0xee, 0xb4, 0x7d, 0xd3, 0xb1, 0xbd, 0x75, 0xdd, 0xb6, 0x1d, 0x5f, 0xa7, 0xbf, 0x19, 0x53, 0x71,
	0xbe, 0xe9, 0x34, 0x1d, 0xfa, 0x73, 0x9d, 0xfc, 0xe2, 0xd0, 0xb9, 0x86, 0xd3, 0x6a, 0x39, 0xf6,
	0x3a, 0xfb, 0x87, 0x03, 0x67, 0xe9, 0x7b, 0xc9, 0x1f, 0xc1, 0x4b, 0x01, 0xde, 0x3e, 0xff, 0xc3,
	0xa1, 0x4c, 0x3d, 0xc7, 0x35, 0xc8, 0x7b, 0xc9, 0x5f, 0x0e, 0x5f, 0xe2, 0xec, 0x8d, 0x75, 0xcf,
	0xd7, 0xfd, 0x8e, 0x77, 0x95, 0xff, 0xdb, 0x8b, 0xde, 0x37, 0xdb, 0x6d, 0xd3, 0x6e, 0x52, 0x3c,
	0xe6, 0xe8, 0xe5, 0x00, 0xdd, 0x70, 0xb1, 0x61, 0xfa, 0x9a, 0x7f, 0xd8, 0xc6, 0xeb, 0xe4, 0x0f,
	0x27, 0x38, 0x1b, 0x10, 0xd8, 0x8e, 0x6f, 0xee, 0x99, 0xd8, 0xd5, 0xb0, 0xed, 0x9b, 0xfe, 0xe1,
	0x3a, 0xfb, 0x47, 0xc8, 0x69, 0x3a, 0x4e, 0xd3, 0xc2, 0xeb, 0xf4, 0x69, 0xb7, 0xb3, 0xb7, 0xee,
	0x9b, 0x2d, 0xec, 0xf9, 0x7a, 0x8b, 0xab, 0xaf, 0x3e, 0x82, 0x13, 0x9b, 0x2e, 0xd6, 0x7d, 0xbc,
	0xa9, 0xfb, 0xb8, 0xe9, 0xb8, 0x87, 0x75, 0xfc, 0x7e, 0x07, 0x7b, 0x3e, 0x2a, 0xc0, 0xb8, 0xad,
	0xb7, 0x70, 0x41, 0x59, 0x51, 0xd6, 0xb2, 0x37, 0xc7, 0x3f, 0xfe, 0xf5, 0xf2, 0x58, 0x9d, 0x42,
	0xd0, 0x69, 0xc8, 0xb6, 0x75, 0x17, 0xdb, 0xbe, 0x66, 0x1a, 0x85, 0xd4, 0x8a, 0xb2, 0x96, 0xe6,
	0xe8, 0x29, 0x06, 0xae, 0x19, 0xea, 0x3b, 0xb0, 0xf4, 0xb8, 0x6d, 0xe8, 0x3e, 0x7e, 0xe8, 0x3a,
	0x46, 0xa7, 0xe1, 0x7b, 0x71, 0xe9, 0xc7, 0x20, 0x6d, 0x1a, 0x5e, 0x21, 0xb5, 0x92, 0x5e, 0x4b,
	0xd7, 0xc9, 0x4f, 0x74, 0x16, 0x72, 0x0d, 0x4e, 0x44, 0xe4, 0x2a, 0x92, 0x5c, 0x10, 0x88, 0x9a,
	0xa1, 0xfe, 0x13, 0x2c, 0x32, 0xc9, 0x6f, 0xe9, 0xae, 0xa9, 0xdb, 0xbe, 0xb7, 0x43, 0xad, 0x1a,
	0x93, 0xab, 0x84, 0x72, 0x2f, 0xc2, 0x14, 0xd6, 0x98, 0xe9, 0xa9, 0xb2, 0xf9, 0xca, 0x6c, 0x99,
	0x7b, 0xa4, 0xcc, 0x79, 0x33, 0x98, 0xfd, 0x50, 0xdf, 0x11, 0xc2, 0x85, 0xda, 0xc3, 0x84, 0x9f,
	0x87, 0xc9, 0xc1, 0xa2, 0x39, 0x5a, 0xfd, 0xaf, 0x14, 0xa0, 0x6d, 0xec, 0x0b, 0xa5, 0x85, 0x44,
	0x15, 0x26, 0xdb, 0x7a, 0xd3, 0xb4, 0x9b, 0x74, 0xbd, 0xb9, 0x0a, 0x94, 0x1b, 0xad, 0xf2, 0x43,
	0x0a, 0xa9, 0x73, 0x0c, 0x5a, 0x85, 0xcc, 0x9e, 0x69, 0xf9, 0xd8, 0x65, 0xe6, 0xe2, 0x44, 0xb7,
	0x29, 0xa8, 0x2e, 0x50, 0x64, 0x99, 0x9e, 0x58, 0xe6, 0x78, 0x9f, 0x65, 0xf2, 0xe5, 0x10, 0xda,
	0xae, 0xa0, 0x9d, 0xe8, 0x43, 0xdb, 0x0d, 0x69, 0x03, 0xf3, 0x4d, 0x0e, 0x36, 0x9f, 0x64, 0x8d,
	0xcc, 0x60, 0x6b, 0x7c, 0xa0, 0x50, 0x6b, 0x08, 0x2b, 0x7f, 0xf5, 0xd6, 0x18, 0x59, 0x93, 0xbf,
	0x87, 0x39, 0xee, 0x93, 0xb7, 0x4d, 0x7f, 0x7f, 0xa7, 0xd3, 0x6e, 0x5b, 0x26, 0x76, 0xd1, 0x1a,
	0x64, 0x0e, 0x18, 0x98, 0xab, 0x92, 0x2f, 0xb3, 0xd4, 0xc3, 0x89, 0xeb, 0x02, 0x4d, 0x04, 0xf0,
	0x65, 0xc4, 0x05, 0xb4, 0x19, 0x38, 0x26, 0x80, 0x13, 0xd7, 0x05, 0x5a, 0xdd, 0x82, 0x53, 0xc2,
	0x0e, 0xb2, 0x84, 0x3a, 0xf6, 0xda, 0x8e, 0xed, 0x61, 0xb4, 0x1a, 0x33, 0xca, 0x34, 0x37, 0x0a,
	0xae, 0xd9, 0x7b, 0x8e, 0x30, 0x8b, 0xfa, 0x04, 0x8e, 0x6d, 0x63, 0xff, 0x01, 0xc9, 0x3f, 0x5f,
	0xd6, 0x9c, 0xe3, 0x7d, 0xcd, 0xa9, 0x7e, 0xa4, 0xc0, 0x7c, 0xe4, 0xc3, 0x10, 0xaf, 0x98, 0x87,
	0x54, 0xec, 0x5b, 0x4d, 0x99, 0x46, 0x90, 0x3a, 0x52, 0x3d, 0xa9, 0xe3, 0x1c, 0xe4, 0x0c, 0xec,
	0x35, 0x5c, 0x93, 0x26, 0x68, 0x1a, 0xa8, 0x82, 0x40, 0x46, 0xa0, 0x33, 0x00, 0xde, 0xbe, 0xe3,
	0xfa, 0x1a, 0x01, 0xd2, 0x18, 0x15, 0x64, 0x59, 0x0a, 0xdf, 0xc2, 0x5e, 0x83, 0xe4, 0x21, 0x82,
	0xd6, 0xf6, 0xfd, 0x96, 0x45, 0x63, 0x53, 0xd0, 0x4c, 0x11, 0xf0, 0x1d, 0xbf, 0x65, 0x49, 0x8a,
	0x0b, 0xc7, 0x7d, 0x4b, 0x14, 0xff, 0x44, 0x81, 0x93, 0xdb, 0xd8, 0xbf, 0xdd, 0xb1, 0xf6, 0x4c,
	0xcb, 0x6a, 0xe1, 0x23, 0xe6, 0x8c, 0x25, 0xc8, 0x90, 0x2d, 0x2a, 0x9e, 0xa0, 0x27, 0x09, 0xb0,
	0x66, 0xa0, 0x65, 0x98, 0xa2, 0x5b, 0x15, 0xc1, 0x8f, 0x4b, 0xf8, 0x0c, 0x85, 0xd6, 0x0c, 0xe9,
	0xfb, 0x99, 0x18, 0xf8, 0xfd, 0xc8, 0xf1, 0x33, 0xd9, 0x3f, 0x7e, 0xfe, 0x15, 0x4e, 0xdc, 0x75,
	0x9a, 0xa6, 0x5d, 0xf5, 0xaa, 0x8d, 0x86, 0xd3, 0x09, 0xdd, 0xb0, 0x04, 0x99, 0x8e, 0xc7, 0xf4,
	0x90, 0x7d, 0x31, 0x49, 0x80, 0x35, 0x83, 0x58, 0x53, 0x67, 0x0c, 0xf1, 0x95, 0x64, 0x39, 0xbc,
	0x66, 0xa0, 0x15, 0x98, 0x6a, 0xeb, 0x9e, 0xf7, 0xcc, 0x71, 0x8d, 0x42, 0x5a, 0x36, 0xa6, 0x80,
	0xaa, 0xbf, 0x53, 0x60, 0x71, 0x1b, 0xfb, 0xf7, 0x1c, 0x1b, 0x1f, 0x3e, 0x72, 0x75, 0xdb, 0xd3,
	0x1b, 0xb4, 0x26, 0xe8, 0x9f, 0xd7, 0x87, 0xd8, 0xef, 0x1d, 0x38, 0xd7, 0x22, 0xc2, 0x34, 0x3f,
	0x94, 0xa6, 0x89, 0x7d, 0x5c, 0xc3, 0x5d, 0x1f, 0xbb, 0xb6, 0x6e, 0x11, 0xee, 0xb4, 0xc4, 0xad,
	0xb6, 0x62, 0x0a, 0xec, 0x70, 0x8e, 0x5b, 0x9c, 0xa1, 0x66, 0x48, 0xce, 0x1d, 0x1f, 0xe5, 0x9b,
	0x9d, 0xe8, 0x6f, 0xf3, 0x1f, 0x28, 0x70, 0xba, 0x8e, 0x5b, 0xce, 0x01, 0xbe, 0xbd, 0xd7, 0xf2,
	0xe2, 0x6b, 0x17, 0x4b, 0x3f, 0x0f, 0xb3, 0x7b, 0x61, 0x8c, 0x69, 0xa1, 0x19, 0xf2, 0x12, 0xb8,
	0x66, 0x78, 0xe8, 0x15, 0x98, 0xef, 0x5d, 0x72, 0xcc, 0x3c, 0x28, 0xbe, 0xc0, 0x9a, 0x21, 0x5b,
	0x32, 0xdd, 0x6b, 0x49, 0xf5, 0x3f, 0x14, 0xb8, 0x94, 0xe0, 0x9a, 0xb8, 0x65, 0x06, 0xb8, 0x2a,
	0xb4, 0x58, 0x6a, 0x14, 0x8b, 0xa5, 0xfb, 0x5b, 0xec, 0x47, 0x0a, 0x54, 0x98, 0xc5, 0x86, 0xa9,
	0x73, 0xd7, 0xb4, 0x71, 0xa0, 0xd2, 0x4b, 0x30, 0x65, 0x99, 0x36, 0x96, 0x6c, 0x97, 0x21, 0xcf,
	0xc4, 0x68, 0xa3, 0xc7, 0x49, 0xea, 0x68, 0x71, 0xa2, 0xfe, 0x46, 0x81, 0xd2, 0xa6, 0x63, 0xef,
	0x99, 0x6e, 0xab, 0x9f, 0x6b, 0xfb, 0x79, 0x4c, 0x19, 0xdd, 0x63, 0x49, 0xb1, 0x7f, 0x1a, 0xb2,
	0xbe, 0xe3, 0xeb, 0x96, 0xd6, 0x70, 0xa2, 0x2e, 0x9d, 0xa2, 0xe0, 0x4d, 0x87, 0x64, 0x8f, 0x69,
	0x46, 0xa2, 0xb7, 0xc8, 0x37, 0x1a, 0x49, 0x31, 0x39, 0x8a, 0xa9, 0x52, 0x44, 0x48, 0x48, 0xf3,
	0x0e, 0x4b, 0x36, 0x51, 0x42, 0xb6, 0xa3, 0xa9, 0x07, 0xb0, 0xb4, 0x85, 0x2d, 0xec, 0xe3, 0xaf,
	0x77, 0xb1, 0xea, 0xdf, 0xc0, 0xec, 0x36, 0xf6, 0x77, 0xf6, 0x9d, 0xf6, 0x51, 0xd2, 0xaf, 0xfa,
	0x2e, 0xdd, 0x8d, 0x39, 0xdb, 0x51, 0xf6, 0x71, 0xb4, 0x02, 0x13, 0xe4, 0xd5, 0x61, 0x71, 0x43,
	0xcf, 0x1f, 0x44, 0x52, 0x9d, 0x21, 0xd4, 0x6d, 0x2a, 0x7b, 0x93, 0x9e, 0x0a, 0x06, 0xef, 0x66,
	0x43, 0xd6, 0xf6, 0x16, 0x1c, 0x0f, 0x04, 0x79, 0x52, 0x42, 0x16, 0x3c, 0x4a, 0x82, 0xf3, 0x47,
	0xf8, 0xd8, 0xd4, 0x9f, 0x2a, 0x30, 0xc7, 0x8f, 0x14, 0x11, 0x25, 0x4f, 0xc1, 0x24, 0x8f, 0x87,
	0x88, 0x64, 0x06, 0x1b, 0x16, 0x75, 0x97, 0x60, 0x9c, 0x1c, 0x7e, 0x68, 0xc0, 0xe5, 0x2b, 0x0b,
	0x65, 0xe9, 0x54, 0x54, 0x66, 0xaf, 0x79, 0x74, 0xd8, 0xc6, 0x75, 0x4a, 0x84, 0xae, 0x42, 0xa6,
	0xad, 0x9b, 0x86, 0xa6, 0xfb, 0x3c, 0x8b, 0x16, 0xcb, 0xec, 0x18, 0x54, 0x16, 0xc7, 0xa0, 0xf2,
	0x23, 0x71, 0x0c, 0x22, 0x6a, 0x9b, 0x46, 0xd5, 0x57, 0x7f, 0xa9, 0xc0, 0x1c, 0x2b, 0x15, 0x46,
	0xb1, 0x6d, 0xb8, 0x98, 0xd4, 0xe0, 0xc5, 0xa4, 0x07, 0x2c, 0x66, 0xfc, 0x88, 0x8b, 0x99, 0x18,
	0x79, 0x31, 0x6f, 0xc2, 0x3c, 0xcf, 0x0e, 0x5f, 0x41, 0xa0, 0xdc, 0x82, 0x79, 0xe6, 0xcf, 0x87,
	0xba, 0xeb, 0xdb, 0xa4, 0x34, 0x65, 0xc2, 0x2e, 0x13, 0xcd, 0x28, 0x84, 0x87, 0xf4, 0x0c, 0x8b,
	0x56, 0x4e, 0x26, 0x6a, 0x0a, 0x4e, 0xa3, 0x7e, 0x91, 0x82, 0x02, 0x33, 0xb0, 0x54, 0xd5, 0x0c,
	0x56, 0xec, 0x34, 0x64, 0xf7, 0x3a, 0x96, 0xa5, 0xf5, 0x14, 0x65, 0x53, 0x04, 0x7c, 0x9f, 0x14,
	0x66, 0x45, 0x98, 0x68, 0xef, 0x3b, 0x36, 0x8e, 0x6c, 0xfd, 0x0c, 0x84, 0xd6, 0xe0, 0x58, 0x90,
	0xaa, 0x44, 0x2e, 0x22, 0x36, 0x9c, 0xa8, 0xe7, 0x45, 0xae, 0xe2, 0x89, 0xe8, 0x1a, 0xcc, 0x99,
	0x9e, 0x46, 0x34, 0x35, 0x75, 0x4b, 0x33, 0xb0, 0x65, 0x1e, 0x60, 0xf7, 0x90, 0xd6, 0x66, 0x53,
	0x5c, 0xe6, 0x71, 0xd3, 0x7b, 0xc8, 0xf0, 0x5b, 0x1c, 0x4d, 0xcb, 0x13, 0x52, 0xd4, 0x6b, 0xb6,
	0xe3, 0x63, 0x7a, 0xd2, 0x08, 0x8a, 0x3d, 0x0a, 0xbf, 0xef, 0xf8, 0x18, 0xdd, 0x84, 0xa2, 0xde,
	0xf0, 0x3b, 0x54, 0x8b, 0x56, 0x1b, 0xdb, 0x1e, 0xed, 0x47, 0x08, 0x75, 0xa6, 0x88, 0x3a, 0x9c,
	0xa9, 0xc0, 0xe8, 0x36, 0x25, 0x32, 0xae, 0xde, 0x2b, 0x90, 0x0f, 0x76, 0x0d, 0xda, 0x25, 0x28,
	0x64, 0x45, 0x59, 0xc6, 0xc1, 0xb4, 0x2e, 0xc3, 0xf5, 0x19, 0xf1, 0x4c, 0x1f, 0xd5, 0x37, 0xe0,
	0xc4, 0x36, 0xb6, 0xb1, 0xab, 0xfb, 0xb8, 0xfa, 0xb0, 0xf6, 0x26, 0x0e, 0x8e, 0xdf, 0xd1, 0xc2,
	0x4a, 0x49, 0x2c, 0xac, 0xd4, 0x27, 0xa4, 0x04, 0x8d, 0x72, 0xf3, 0x5c, 0x36, 0x0a, 0x3b, 0x89,
	0x2a, 0xbd, 0x6d, 0x6a, 0x4f, 0xf1, 0x61, 0xc4, 0x75, 0x93, 0x7a, 0xdb, 0x7c, 0x13, 0x1f, 0xaa,
	0xff, 0x93, 0x82, 0x0b, 0x2c, 0x1c, 0xfa, 0xee, 0xb6, 0xbe, 0xd3, 0x1e, 0x1c, 0x1f, 0x08, 0xc6,
	0x75, 0x23, 0x68, 0x23, 0xd0, 0xdf, 0xa8, 0x00, 0x19, 0x83, 0x6e, 0x15, 0x6c, 0xaf, 0x4f, 0xd7,
	0xc5, 0x23, 0x5a, 0x86, 0x9c, 0x8b, 0xdb, 0x96, 0xde, 0xc0, 0x9a, 0x6e, 0x59, 0xf4, 0xbc, 0x93,
	0xae, 0x03, 0x07, 0x55, 0x2d, 0x8b, 0x96, 0xff, 0xc4, 0x93, 0x13, 0x91, 0xf2, 0x9f, 0x38, 0xf1,
	0x12, 0xe4, 0x4d, 0xfb, 0xc0, 0x31, 0x1b, 0x58, 0xb3, 0x3b, 0xad, 0x5d, 0xec, 0x46, 0xca, 0xf6,
	0x19, 0x8e, 0xbb, 0x4f, 0x51, 0xe8, 0x1a, 0x4c, 0xef, 0xea, 0xf6, 0x53, 0x8d, 0x9b, 0x82, 0x06,
	0x46, 0xae, 0x72, 0x9c, 0x7d, 0x1c, 0x37, 0x75, 0xfb, 0xa9, 0x28, 0x82, 0x73, 0xbb, 0xe1, 0x83,
	0xfa, 0x13, 0x05, 0xce, 0x0f, 0xaa, 0x84, 0x7c, 0x69, 0x0f, 0xfa, 0xf2, 0x8d, 0x08, 0x29, 0x83,
	0xa7, 0xff, 0xc8, 0x43, 0xe1, 0xcf, 0x14, 0xb8, 0xd8, 0xa7, 0x04, 0x19, 0xdd, 0x83, 0x7f, 0x96,
	0x6a, 0xe2, 0x43, 0x45, 0xb4, 0xa7, 0xfa, 0x95, 0x13, 0xfd, 0x8f, 0x87, 0x24, 0x3e, 0x52, 0x23,
	0xc4, 0x47, 0x7a, 0xf4, 0xf8, 0x18, 0x1f, 0x29, 0x3e, 0x7e, 0xa1, 0xc0, 0xe5, 0x21, 0xdf, 0x0b,
	0x2f, 0x0f, 0xbf, 0xc1, 0x8b, 0xf8, 0xbd, 0x02, 0x45, 0xb6, 0x97, 0xdc, 0xa7, 0x5d, 0xcb, 0x86,
	0x1e, 0x39, 0x88, 0x15, 0x61, 0xc2, 0x37, 0x7d, 0x2b, 0xda, 0x74, 0x64, 0x20, 0x54, 0x82, 0x4c,
	0x0b, 0x7b, 0x9e, 0xde, 0x8c, 0xaa, 0x2e, 0x80, 0xe8, 0x06, 0x4c, 0xb2, 0xce, 0x27, 0xaf, 0x11,
	0x96, 0xcb, 0xb1, 0xc6, 0x68, 0xf9, 0x3e, 0x7f, 0xbe, 0x45, 0x1f, 0x45, 0x3a, 0x62, 0x48, 0x12,
	0x88, 0xec, 0x57, 0xfc, 0x4c, 0x3c, 0xc5, 0xc0, 0xf4, 0xd4, 0x9c, 0x0b, 0xb3, 0x1e, 0x3b, 0x7b,
	0xa5, 0xeb, 0x10, 0x24, 0x3c, 0x92, 0x60, 0xa6, 0x3c, 0x6c, 0x1b, 0x34, 0xbb, 0xc8, 0x5b, 0x47,
	0x86, 0x40, 0xab, 0x96, 0xa5, 0xbe, 0x07, 0x8b, 0x89, 0xab, 0xe7, 0x69, 0xb5, 0x04, 0x99, 0x06,
	0x45, 0x33, 0xaf, 0x89, 0x7d, 0x41, 0x00, 0x09, 0x1e, 0xbb, 0xae, 0xe3, 0x62, 0xb6, 0x4f, 0x07,
	0x78, 0x0e, 0x54, 0x0d, 0x38, 0x16, 0x36, 0x18, 0x8f, 0x54, 0x76, 0x5e, 0x84, 0x29, 0xde, 0xd0,
	0x12, 0x95, 0x67, 0xbc, 0xe1, 0x15, 0xe0, 0xc9, 0x5b, 0xc2, 0xc6, 0xdd, 0x51, 0xdf, 0xc2, 0xbb,
	0x5e, 0xf1, 0xb7, 0x88, 0xb6, 0x52, 0x80, 0x57, 0x3f, 0x52, 0x60, 0xfc, 0xb1, 0x6d, 0xd2, 0x3e,
	0x74, 0xc3, 0x31, 0x62, 0x7d, 0x68, 0x02, 0x19, 0xd0, 0xad, 0x89, 0xd4, 0x0d, 0xe9, 0xc4, 0xba,
	0xa1, 0x00, 0xe3, 0x1d, 0xdb, 0xf4, 0x23, 0x9d, 0x1c, 0x0a, 0x21, 0xcc, 0xe4, 0x5f, 0xad, 0xe1,
	0xd8, 0x07, 0x34, 0x87, 0xa4, 0x04, 0x33, 0x01, 0x6f, 0x3a, 0xf6, 0x01, 0x2d, 0x3a, 0x5c, 0xb3,
	0x81, 0xa9, 0x97, 0x27, 0x82, 0xa2, 0x83, 0x80, 0xd4, 0xef, 0xe7, 0x21, 0xc3, 0x8d, 0xd6, 0xe7,
	0x0b, 0x8c, 0x75, 0xba, 0xd3, 0xc9, 0x9d, 0x6e, 0xb4, 0x08, 0x93, 0x1e, 0x5b, 0x81, 0xbc, 0xd7,
	0x4c, 0x78, 0x54, 0xfd, 0x0b, 0x30, 0xe3, 0x69, 0x72, 0x47, 0x4a, 0xae, 0x3e, 0xa6, 0xbd, 0x2d,
	0xa9, 0x25, 0x75, 0x0e, 0xa6, 0x3d, 0x4d, 0x6a, 0x4a, 0x4d, 0x49, 0x94, 0xe0, 0xed, 0x04, 0x5d,
	0xa9, 0x55, 0xc8, 0x31, 0x91, 0xac, 0x2f, 0x95, 0x8d, 0xf4, 0xae, 0xb6, 0x78, 0x63, 0x8a, 0x6b,
	0x45, 0x12, 0x08, 0x44, 0xb5, 0x22, 0x19, 0x64, 0x8d, 0x20, 0x5b, 0xd8, 0xd7, 0x0b, 0x39, 0x9e,
	0x0e, 0x1a, 0xad, 0x72, 0x5d, 0x7f, 0xf6, 0x0f, 0x3b, 0x0f, 0xee, 0x3f, 0xd8, 0xfd, 0x67, 0xdc,
	0xf0, 0xeb, 0x13, 0xde, 0x3d, 0xec, 0xeb, 0x68, 0x09, 0xc0, 0x6c, 0xe9, 0x4d, 0xac, 0x75, 0x5c,
	0xcb, 0x2b, 0x4c, 0xaf, 0xa4, 0xd7, 0xb2, 0xf5, 0x2c, 0x85, 0x3c, 0x76, 0x2d, 0x0f, 0x2d, 0xc0,
	0x78, 0x97, 0xd8, 0x66, 0x46, 0x7a, 0x47, 0xba, 0x4b, 0x9b, 0x3d, 0xd9, 0xae, 0xb6, 0xab, 0x7b,
	0xe4, 0xb8, 0x5d, 0xc8, 0xcb, 0x79, 0xa0, 0x7b, 0x53, 0xf7, 0x70, 0xcd, 0x40, 0x6b, 0x30, 0xd3,
	0xd5, 0x64, 0xfb, 0xce, 0xca, 0xbd, 0xba, 0xee, 0x66, 0xc4, 0xc0, 0x5d, 0x8d, 0xc6, 0xd6, 0x31,
	0x79, 0x29, 0xdd, 0x4d, 0x12, 0x5c, 0x14, 0x49, 0xad, 0x7f, 0x3c, 0x82, 0xa4, 0xd6, 0x5f, 0x85,
	0x5c, 0x57, 0x0b, 0x23, 0x0c, 0xc9, 0xa6, 0xea, 0xde, 0x16, 0x21, 0x76, 0x81, 0x68, 0x22, 0xfb,
	0x68, 0x4e, 0xf6, 0x51, 0x57, 0xf6, 0xd1, 0x0a, 0x4c, 0x77, 0x35, 0xc9, 0x20, 0xf3, 0xd4, 0x20,
	0xd0, 0xad, 0x05, 0x16, 0xa1, 0xfa, 0xd0, 0x88, 0x3d, 0x11, 0xd1, 0x87, 0x7e, 0x23, 0x54, 0x9f,
	0x30, 0x68, 0x4f, 0x4a, 0x41, 0x9b, 0xa5, 0x14, 0x34, 0x6a, 0x97, 0x20, 0xd3, 0xd5, 0x58, 0xdc,
	0x2e, 0x48, 0x71, 0x3b, 0xd9, 0x7d, 0x48, 0x60, 0xa8, 0x42, 0x74, 0xd0, 0x7d, 0xdf, 0x35, 0x77,
	0x3b, 0xa4, 0x7a, 0x7a, 0x89, 0x7e, 0xa1, 0xa4, 0xc4, 0x74, 0xda, 0xe5, 0xaa, 0x80, 0xd7, 0x73,
	0xdd, 0xe0, 0xb7, 0x87, 0xde, 0x20, 0x3c, 0x1d, 0xba, 0x2b, 0xd1, 0x13, 0xca, 0xe2, 0xd0, 0x13,
	0x0a, 0x74, 0xd9, 0x26, 0x66, 0x54, 0x49, 0x59, 0x9b, 0xed, 0x6a, 0xde, 0xa1, 0xdd, 0x20, 0xac,
	0xa7, 0x86, 0xb2, 0x66, 0xba, 0x3b, 0x87, 0x76, 0xa3, 0xea, 0xa3, 0xd7, 0x01, 0xa4, 0x77, 0x2e,
	0x0d, 0x65, 0xcc, 0x76, 0x82, 0x57, 0xbe, 0x0e, 0xc0, 0xb3, 0x29, 0x61, 0x2d, 0x0d, 0x67, 0xe5,
	0xd4, 0x55, 0x1f, 0x6d, 0x48, 0x37, 0x2c, 0xcb, 0x89, 0x45, 0x56, 0x90, 0xee, 0xf9, 0x7d, 0xc8,
	0x86, 0x74, 0xcf, 0xb2, 0x32, 0x90, 0xa3, 0x1b, 0x72, 0x04, 0xb7, 0x2d, 0xa7, 0x07, 0x72, 0x88,
	0x3b, 0x97, 0xcb, 0x41, 0xe1, 0xa7, 0x0e, 0xa2, 0x17, 0xe5, 0xdf, 0x09, 0xf2, 0x85, 0xfa, 0x7a,
	0xd3, 0x2b, 0x9c, 0xa1, 0x21, 0x36, 0xe1, 0x3d, 0xd2, 0x9b, 0x1e, 0xba, 0x0a, 0xe8, 0xfd, 0x8e,
	0xce, 0xf6, 0x3f, 0xfd, 0x40, 0x37, 0x2d, 0x7d, 0xd7, 0xc2, 0x85, 0x55, 0x29, 0x4a, 0x8e, 0x0b,
	0x7c, 0x55, 0xa0, 0x51, 0x19, 0x8e, 0x05, 0x4c, 0x8e, 0xad, 0xed, 0xeb, 0xb6, 0x51, 0x38, 0x2b,
	0xb1, 0xe4, 0x05, 0xf6, 0x81, 0x7d, 0x47, 0xb7, 0x0d, 0x74, 0x05, 0x02, 0x21, 0x9a, 0x8b, 0x3d,
	0xec, 0x1e, 0x60, 0xa3, 0x70, 0x4e, 0x62, 0x08, 0xc4, 0xd5, 0x39, 0x16, 0x6d, 0xc0, 0x71, 0x4f,
	0x7b, 0xb6, 0xef, 0x58, 0xd8, 0xd3, 0x2d, 0xcc, 0x83, 0x77, 0x4d, 0x62, 0x99, 0xf5, 0xde, 0x16,
	0x58, 0x16, 0xc5, 0x34, 0xdb, 0x59, 0xa6, 0xe7, 0x73, 0xe2, 0x0b, 0x12, 0x31, 0x78, 0x77, 0x4d,
	0xcf, 0x67, 0x74, 0x57, 0x00, 0x79, 0x9a, 0x8b, 0x7d, 0xdd, 0xb4, 0x18, 0xa5, 0xd6, 0x32, 0xed,
	0xc2, 0xc5, 0x88, 0xe8, 0x3a, 0x45, 0x53, 0xfa, 0x7b, 0xa6, 0x9d, 0xc4, 0xa2, 0x77, 0x0b, 0x97,
	0xfa, 0xb2, 0xe8, 0x5d, 0xa2, 0x7f, 0x4c, 0x7b, 0x6d, 0xa3, 0xf0, 0xb2, 0xcc, 0xf1, 0x2c, 0xa2,
	0xfe, 0x06, 0xba, 0x0c, 0xb3, 0xf1, 0xf5, 0x5e, 0x96, 0x6d, 0x1a, 0xa5, 0x27, 0x27, 0x31, 0x69,
	0xb1, 0x65, 0x89, 0x32, 0x6b, 0x05, 0x6b, 0x2d, 0xc3, 0xb1, 0x9e, 0x95, 0xae, 0xcb, 0x42, 0xdd,
	0xe8, 0x42, 0x7b, 0xe8, 0xf5, 0x6e, 0x61, 0xa3, 0x1f, 0xbd, 0xde, 0x45, 0xeb, 0x00, 0x52, 0xde,
	0xa8, 0x24, 0xe7, 0x0d, 0x89, 0x44, 0xfd, 0x55, 0x16, 0x32, 0x7c, 0xcb, 0xff, 0xaa, 0xf6, 0xc8,
	0x89, 0x6f, 0xd0, 0x1e, 0xf9, 0xa7, 0xdf, 0x06, 0xbf, 0x8e, 0x4d, 0xee, 0x5b, 0xb6, 0x7d, 0xad,
	0x12, 0x34, 0x11, 0xe2, 0x15, 0x0a, 0x34, 0x02, 0x73, 0xbc, 0xb6, 0x24, 0x02, 0xea, 0x93, 0x54,
	0x0e, 0xdf, 0xb0, 0xa4, 0x1d, 0xa0, 0x38, 0xc2, 0x86, 0xb5, 0x19, 0x6c, 0x01, 0x7f, 0x65, 0xdb,
	0xdd, 0x11, 0x37, 0xaf, 0xbf, 0xec, 0xad, 0x48, 0x3e, 0x22, 0x55, 0x06, 0x1f, 0x91, 0x2a, 0xff,
	0xa9, 0x40, 0xee, 0x9e, 0xe9, 0x35, 0x76, 0xb0, 0x7b, 0xc0, 0x36, 0x9b, 0xdc, 0x5b, 0xd8, 0xf5,
	0x4c, 0xc7, 0x26, 0xe7, 0x21, 0x94, 0x25, 0xf9, 0xe0, 0x56, 0xab, 0xed, 0x1f, 0x16, 0x17, 0xc8,
	0x4f, 0x09, 0x17, 0x9c, 0xa8, 0xee, 0xc0, 0x5c, 0x95, 0x48, 0x8f, 0xde, 0x9b, 0xa2, 0x53, 0xfc,
	0x9d, 0x89, 0xd7, 0xa9, 0xc5, 0x39, 0x76, 0xfc, 0xa6, 0x48, 0x21, 0xa9, 0xf2, 0x3d, 0x05, 0xf2,
	0x9c, 0x4e, 0xe8, 0x73, 0x1d, 0x66, 0x22, 0x1d, 0x5d, 0xb4, 0xc8, 0xc5, 0x26, 0xf5, 0x79, 0x8b,
	0xd1, 0xb6, 0x2e, 0xba, 0x07, 0xf9, 0x68, 0x5b, 0x30, 0x50, 0x2a, 0xb1, 0xd7, 0x58, 0x5c, 0xea,
	0x83, 0xe5, 0xea, 0x7d, 0x37, 0x05, 0xb3, 0x22, 0x5f, 0x09, 0xfd, 0xfe, 0x0e, 0xf2, 0xd1, 0xa1,
	0xa4, 0xe0, 0x15, 0x89, 0xb3, 0x4a, 0xc5, 0x3c, 0xd3, 0x30, 0xa0, 0xbe, 0x06, 0x33, 0xdb, 0xd8,
	0xe7, 0x8f, 0x26, 0xf6, 0x64, 0x8b, 0x17, 0x22, 0xb4, 0x26, 0x0e, 0x0f, 0xb1, 0x3b, 0x70, 0x32,
	0x79, 0x68, 0x09, 0xad, 0x8a, 0x54, 0x32, 0x68, 0xa6, 0xa9, 0x38, 0x47, 0x5e, 0xc2, 0x3f, 0xf7,
	0x40, 0xe8, 0x0d, 0x38, 0xc9, 0xee, 0x14, 0x7b, 0x84, 0xe6, 0x09, 0x79, 0x6d, 0xcb, 0x1b, 0xc4,
	0x5e, 0xf9, 0x70, 0x12, 0xf2, 0x9c, 0x53, 0x18, 0xe7, 0x55, 0x80, 0x70, 0x76, 0x06, 0xcd, 0x30,
	0x29, 0x42, 0x48, 0x31, 0x7a, 0xa0, 0x8e, 0xcc, 0xa4, 0x54, 0x21, 0x27, 0x0d, 0xdd, 0xa0, 0x97,
	0x02, 0xbf, 0xc4, 0x07, 0x71, 0x8a, 0x0b, 0x51, 0x29, 0xa1, 0x89, 0xae, 0xd3, 0xcb, 0x27, 0x01,
	0xbe, 0x79, 0x58, 0xdb, 0xf2, 0x7a, 0xd6, 0xd1, 0x97, 0xf9, 0x41, 0x6c, 0x88, 0x44, 0x94, 0xc9,
	0x6a, 0xa2, 0x75, 0x23, 0xa3, 0x57, 0xc9, 0xb6, 0x7d, 0x03, 0x66, 0x22, 0x3c, 0x41, 0x18, 0x27,
	0xcd, 0xaa, 0x14, 0x63, 0xbd, 0x06, 0xb4, 0x2d, 0xee, 0x7b, 0x38, 0x80, 0x6e, 0x56, 0x1e, 0x5a,
	0x61, 0x85, 0x4b, 0x64, 0x6a, 0x84, 0xa1, 0xfa, 0x09, 0x62, 0x0e, 0x11, 0x67, 0xfe, 0x3e, 0x0e,
	0x49, 0x9a, 0x32, 0x62, 0x0e, 0x11, 0x2d, 0x1b, 0xd9, 0x21, 0xb1, 0x39, 0xb1, 0xc0, 0xa6, 0x3d,
	0xed, 0x1d, 0xe6, 0x10, 0x01, 0x1e, 0xec, 0x90, 0x1e, 0xe6, 0x07, 0xb1, 0xe1, 0x98, 0x64, 0x87,
	0x24, 0x0e, 0xda, 0x0d, 0x71, 0x88, 0x30, 0xc6, 0x62, 0x92, 0xa4, 0xb8, 0x1d, 0x05, 0x71, 0xe0,
	0x90, 0x88, 0xd5, 0x8f, 0xe0, 0x10, 0x8e, 0xac, 0xfc, 0x58, 0x81, 0x69, 0xda, 0xea, 0x15, 0x9f,
	0xcc, 0x79, 0x98, 0x12, 0xd3, 0x51, 0x71, 0xff, 0x4c, 0x97, 0xd9, 0xd0, 0x26, 0x43, 0x5e, 0x87,
	0x6c, 0x30, 0x46, 0x85, 0x16, 0x42, 0x7f, 0x44, 0x06, 0xab, 0x8a, 0x27, 0x64, 0x9e, 0xd0, 0x9c,
	0xaf, 0x92, 0xc4, 0xc8, 0x49, 0x93, 0x3d, 0x91, 0xcc, 0x58, 0xf9, 0x5c, 0x01, 0x24, 0xdd, 0x89,
	0x09, 0xad, 0xaf, 0x52, 0x79, 0x12, 0x22, 0xae, 0x3b, 0xe2, 0xe2, 0x64, 0x92, 0x7b, 0xf4, 0xc6,
	0x5a, 0x9e, 0x1b, 0x42, 0x61, 0x02, 0x4e, 0x9a, 0x27, 0x2a, 0x2e, 0xf6, 0x4a, 0x09, 0xd7, 0x54,
	0x83, 0xe3, 0x3d, 0x77, 0x76, 0x68, 0x39, 0xe2, 0xd5, 0xde, 0xdb, 0xbc, 0xe4, 0x54, 0xf6, 0xc9,
	0x0c, 0x2c, 0xf4, 0xb4, 0xae, 0xf9, 0x52, 0x6f, 0xc0, 0x5c, 0xc2, 0xdd, 0x47, 0x7c, 0xbd, 0x0b,
	0x5c, 0xd3, 0x1e, 0xba, 0x27, 0x30, 0x9f, 0x34, 0xdf, 0x13, 0x04, 0xf2, 0x80, 0xe1, 0x9f, 0xe2,
	0x4a, 0x1f, 0xa1, 0xa1, 0x0d, 0x1e, 0xc3, 0x42, 0x9f, 0x7b, 0x0e, 0x74, 0x56, 0x6c, 0x4b, 0x03,
	0x47, 0x31, 0x92, 0x3f, 0x96, 0xb7, 0xc5, 0x76, 0xd3, 0x23, 0x35, 0xba, 0xdd, 0xf4, 0x13, 0xda,
	0xd7, 0x1a, 0xef, 0xc1, 0x99, 0x11, 0x46, 0x6a, 0xe2, 0xc6, 0x3d, 0xdf, 0x47, 0x5c, 0x0f, 0xdf,
	0x7f, 0x2b, 0xb0, 0x3a, 0xca, 0xc8, 0x0e, 0xaa, 0xf4, 0xb7, 0x7e, 0xbf, 0xf9, 0x9e, 0xe2, 0xc6,
	0x88, 0x5a, 0x84, 0xde, 0xf9, 0x3f, 0x05, 0x2e, 0x1d, 0x61, 0x6a, 0x07, 0xbd, 0xce, 0xb5, 0x3a,
	0xfa, 0xa4, 0xcf, 0xe8, 0x26, 0xba, 0x0b, 0xe7, 0x92, 0xc7, 0x55, 0x86, 0x39, 0x81, 0x06, 0x0a,
	0xd3, 0x2c, 0x0c, 0x94, 0x7b, 0x70, 0x7e, 0xd8, 0x3d, 0xdb, 0x20, 0x71, 0xf1, 0xb8, 0x7b, 0x00,
	0x6b, 0x23, 0x8a, 0xf3, 0x46, 0xaa, 0x51, 0xd0, 0x07, 0x0a, 0x9c, 0x1b, 0xed, 0x66, 0x0a, 0x5d,
	0x1b, 0x18, 0xd9, 0x7d, 0x2e, 0xb2, 0x46, 0xb7, 0xfb, 0x63, 0x58, 0x1e, 0x72, 0x85, 0x1a, 0xb7,
	0xd0, 0x99, 0x61, 0xa2, 0x09, 0xcf, 0xbf, 0x29, 0xb0, 0x32, 0xec, 0x6a, 0x16, 0x95, 0x47, 0x88,
	0x76, 0xe9, 0x0e, 0xb7, 0xf8, 0xf2, 0x08, 0x6f, 0x0e, 0xa3, 0xfc, 0x1f, 0x41, 0x65, 0xa5, 0xef,
	0x40, 0x45, 0xe3, 0xee, 0x1a, 0x69, 0x75, 0xff, 0x02, 0xea, 0xf0, 0x7b, 0x78, 0xb4, 0x31, 0x9a,
	0xe7, 0xc2, 0x0b, 0xdf, 0xd1, 0x5e, 0x7e, 0x07, 0xd4, 0x21, 0x5f, 0x4a, 0x82, 0xd3, 0x68, 0x14,
	0x32, 0xb6, 0x30, 0x0a, 0x5b, 0x70, 0x66, 0x84, 0xdb, 0x68, 0x74, 0x65, 0x70, 0xc6, 0x4e, 0x5a,
	0x48, 0xe2, 0x6e, 0xd6, 0x86, 0xdc, 0xce, 0xbe, 0xd3, 0x16, 0x1b, 0xd8, 0x2a, 0x64, 0xf8, 0xc4,
	0x57, 0x5c, 0x59, 0x69, 0x84, 0x0b, 0x5d, 0xa7, 0x75, 0x08, 0x9d, 0x0b, 0x43, 0x27, 0xc3, 0x78,
	0x91, 0xe7, 0xcb, 0x8a, 0x0b, 0x3d, 0x70, 0xfe, 0xc6, 0xdf, 0xa6, 0xe8, 0xa9, 0xcd, 0x30, 0x83,
	0x02, 0xa1, 0x42, 0xab, 0x15, 0x06, 0x93, 0xab, 0x95, 0xc8, 0xcc, 0x4f, 0x71, 0x9a, 0x1f, 0x78,
	0x18, 0xd9, 0x0d, 0x5a, 0xac, 0xf2, 0xa9, 0x2f, 0x54, 0x88, 0x33, 0x49, 0xa5, 0x8a, 0xc4, 0x15,
	0xc6, 0xe1, 0x6b, 0x30, 0x2d, 0xcf, 0x76, 0xa1, 0x62, 0xf4, 0x5c, 0x36, 0xe0, 0xc5, 0xaf, 0xc1,
	0xb4, 0x3c, 0x5e, 0x15, 0x70, 0x26, 0xcc, 0x5c, 0xc5, 0x38, 0xab, 0x30, 0x13, 0x19, 0x66, 0x0a,
	0x4f, 0xab, 0x09, 0x23, 0x4e, 0xc9, 0x29, 0xaa, 0x02, 0xd3, 0x2c, 0x5e, 0xb8, 0x84, 0x11, 0xd2,
	0x6e, 0xc5, 0x83, 0x39, 0xf9, 0x9a, 0x56, 0x18, 0xfd, 0x89, 0x98, 0x6e, 0x8b, 0xdc, 0xe1, 0xa2,
	0xd3, 0x11, 0x43, 0x24, 0xdd, 0x6e, 0x17, 0xd5, 0x41, 0x24, 0xec, 0xa5, 0x37, 0xcd, 0xff, 0xaf,
	0x2e, 0xa0, 0x13, 0x30, 0x8b, 0x1f, 0x39, 0xed, 0x95, 0xea, 0xc3, 0xda, 0xdf, 0xae, 0xd0, 0x2e,
	0x40, 0x25, 0x75, 0x70, 0xe5, 0xe3, 0xe7, 0xa5, 0xb1, 0x4f, 0x9f, 0x97, 0x94, 0xcf, 0x9e, 0x97,
	0xc6, 0xbe, 0x78, 0x5e, 0x1a, 0xfb, 0xf7, 0x17, 0xa5, 0xb1, 0x1f, 0xbe, 0x28, 0x8d, 0xfd, 0xfc,
	0x45, 0x69, 0xec, 0xe3, 0x17, 0xa5, 0xb1, 0x4f, 0x5f, 0x94, 0xc6, 0x3e, 0x7b, 0x51, 0x1a, 0xfb,
	0xdf, 0xcf, 0x4b, 0x63, 0xdf, 0xf9, 0xbc, 0x34, 0xf6, 0x2e, 0xfd, 0x2f, 0x46, 0xe5, 0x03, 0x7b,
	0x7d, 0x57, 0x6f, 0x3c, 0xc5, 0xb6, 0xb1, 0xde, 0xde, 0x5d, 0x0f, 0xff, 0x2f, 0xd5, 0x1f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x3b, 0x73, 0x29, 0x08, 0x58, 0x35, 0x00, 0x00,
}
