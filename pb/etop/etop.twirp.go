// Code generated by protoc-gen-twirp v5.7.0, DO NOT EDIT.
// source: etop/etop.proto

/*
Package etop is a generated twirp stub package.
This code was generated with github.com/twitchtv/twirp/protoc-gen-twirp v5.7.0.

It is generated from these files:
	etop/etop.proto
*/
package etop

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"
import strconv "strconv"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

import cm "etop.vn/backend/pb/common"

// Imports only used by utility functions:
import io "io"
import json "encoding/json"
import url "net/url"

// =====================
// MiscService Interface
// =====================

type MiscService interface {
	VersionInfo(context.Context, *cm.Empty) (*cm.VersionInfoResponse, error)
}

// ===========================
// MiscService Protobuf Client
// ===========================

type miscServiceProtobufClient struct {
	client HTTPClient
	urls   [1]string
}

// NewMiscServiceProtobufClient creates a Protobuf client that implements the MiscService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewMiscServiceProtobufClient(addr string, client HTTPClient) MiscService {
	prefix := urlBase(addr) + MiscServicePathPrefix
	urls := [1]string{
		prefix + "VersionInfo",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &miscServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &miscServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *miscServiceProtobufClient) VersionInfo(ctx context.Context, in *cm.Empty) (*cm.VersionInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Misc")
	ctx = ctxsetters.WithMethodName(ctx, "VersionInfo")
	out := new(cm.VersionInfoResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =======================
// MiscService JSON Client
// =======================

type miscServiceJSONClient struct {
	client HTTPClient
	urls   [1]string
}

// NewMiscServiceJSONClient creates a JSON client that implements the MiscService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewMiscServiceJSONClient(addr string, client HTTPClient) MiscService {
	prefix := urlBase(addr) + MiscServicePathPrefix
	urls := [1]string{
		prefix + "VersionInfo",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &miscServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &miscServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *miscServiceJSONClient) VersionInfo(ctx context.Context, in *cm.Empty) (*cm.VersionInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Misc")
	ctx = ctxsetters.WithMethodName(ctx, "VersionInfo")
	out := new(cm.VersionInfoResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// MiscService Server Handler
// ==========================

type miscServiceServer struct {
	MiscService
	hooks *twirp.ServerHooks
}

func NewMiscServiceServer(svc MiscService, hooks *twirp.ServerHooks) TwirpServer {
	return &miscServiceServer{
		MiscService: svc,
		hooks:       hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *miscServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// MiscServicePathPrefix is used for all URL paths on a twirp MiscService server.
// Requests are always: POST MiscServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const MiscServicePathPrefix = "/api/etop.Misc/"

func (s *miscServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Misc")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/etop.Misc/VersionInfo":
		s.serveVersionInfo(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *miscServiceServer) serveVersionInfo(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveVersionInfoJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveVersionInfoProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *miscServiceServer) serveVersionInfoJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "VersionInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.VersionInfoResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MiscService.VersionInfo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.VersionInfoResponse and nil error while calling VersionInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *miscServiceServer) serveVersionInfoProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "VersionInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.VersionInfoResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MiscService.VersionInfo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.VersionInfoResponse and nil error while calling VersionInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *miscServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 0
}

func (s *miscServiceServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *miscServiceServer) PathPrefix() string {
	return MiscServicePathPrefix
}

// =====================
// UserService Interface
// =====================

type UserService interface {
	// Register
	//
	// Register a new user or after a user has login using generated password.
	Register(context.Context, *CreateUserRequest) (*RegisterResponse, error)

	// Login
	//
	// Log the user in and generate access token.
	Login(context.Context, *LoginRequest) (*LoginResponse, error)

	// SessionInfo
	//
	// Return current session info.
	SessionInfo(context.Context, *cm.Empty) (*LoginResponse, error)

	// SwitchAccount
	//
	// Response error if the user does not have permission to the requested account.
	SwitchAccount(context.Context, *SwitchAccountRequest) (*AccessTokenResponse, error)

	SendSTokenEmail(context.Context, *SendSTokenEmailRequest) (*cm.MessageResponse, error)

	UpgradeAccessToken(context.Context, *UpgradeAccessTokenRequest) (*AccessTokenResponse, error)

	// ResetPassword
	//
	// Send email or sms to allow the user reset their password.
	ResetPassword(context.Context, *ResetPasswordRequest) (*cm.MessageResponse, error)

	// ChangePassword
	//
	// Change the user password
	ChangePassword(context.Context, *ChangePasswordRequest) (*cm.Empty, error)

	// ChangePasswordUsingToken
	//
	// Reset password by providing the token sent to email or phone
	ChangePasswordUsingToken(context.Context, *ChangePasswordUsingTokenRequest) (*cm.Empty, error)

	SendEmailVerification(context.Context, *SendEmailVerificationRequest) (*cm.MessageResponse, error)

	SendPhoneVerification(context.Context, *SendPhoneVerificationRequest) (*cm.MessageResponse, error)

	VerifyEmailUsingToken(context.Context, *VerifyEmailUsingTokenRequest) (*cm.MessageResponse, error)

	VerifyPhoneUsingToken(context.Context, *VerifyPhoneUsingTokenRequest) (*cm.MessageResponse, error)

	UpdatePermission(context.Context, *UpdatePermissionRequest) (*UpdatePermissionResponse, error)
}

// ===========================
// UserService Protobuf Client
// ===========================

type userServiceProtobufClient struct {
	client HTTPClient
	urls   [14]string
}

// NewUserServiceProtobufClient creates a Protobuf client that implements the UserService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewUserServiceProtobufClient(addr string, client HTTPClient) UserService {
	prefix := urlBase(addr) + UserServicePathPrefix
	urls := [14]string{
		prefix + "Register",
		prefix + "Login",
		prefix + "SessionInfo",
		prefix + "SwitchAccount",
		prefix + "SendSTokenEmail",
		prefix + "UpgradeAccessToken",
		prefix + "ResetPassword",
		prefix + "ChangePassword",
		prefix + "ChangePasswordUsingToken",
		prefix + "SendEmailVerification",
		prefix + "SendPhoneVerification",
		prefix + "VerifyEmailUsingToken",
		prefix + "VerifyPhoneUsingToken",
		prefix + "UpdatePermission",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &userServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &userServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *userServiceProtobufClient) Register(ctx context.Context, in *CreateUserRequest) (*RegisterResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	out := new(RegisterResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceProtobufClient) Login(ctx context.Context, in *LoginRequest) (*LoginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "Login")
	out := new(LoginResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceProtobufClient) SessionInfo(ctx context.Context, in *cm.Empty) (*LoginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "SessionInfo")
	out := new(LoginResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceProtobufClient) SwitchAccount(ctx context.Context, in *SwitchAccountRequest) (*AccessTokenResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "SwitchAccount")
	out := new(AccessTokenResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceProtobufClient) SendSTokenEmail(ctx context.Context, in *SendSTokenEmailRequest) (*cm.MessageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "SendSTokenEmail")
	out := new(cm.MessageResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceProtobufClient) UpgradeAccessToken(ctx context.Context, in *UpgradeAccessTokenRequest) (*AccessTokenResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "UpgradeAccessToken")
	out := new(AccessTokenResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceProtobufClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest) (*cm.MessageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "ResetPassword")
	out := new(cm.MessageResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceProtobufClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest) (*cm.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "ChangePassword")
	out := new(cm.Empty)
	err := doProtobufRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceProtobufClient) ChangePasswordUsingToken(ctx context.Context, in *ChangePasswordUsingTokenRequest) (*cm.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "ChangePasswordUsingToken")
	out := new(cm.Empty)
	err := doProtobufRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceProtobufClient) SendEmailVerification(ctx context.Context, in *SendEmailVerificationRequest) (*cm.MessageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "SendEmailVerification")
	out := new(cm.MessageResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceProtobufClient) SendPhoneVerification(ctx context.Context, in *SendPhoneVerificationRequest) (*cm.MessageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "SendPhoneVerification")
	out := new(cm.MessageResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[10], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceProtobufClient) VerifyEmailUsingToken(ctx context.Context, in *VerifyEmailUsingTokenRequest) (*cm.MessageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "VerifyEmailUsingToken")
	out := new(cm.MessageResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[11], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceProtobufClient) VerifyPhoneUsingToken(ctx context.Context, in *VerifyPhoneUsingTokenRequest) (*cm.MessageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "VerifyPhoneUsingToken")
	out := new(cm.MessageResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[12], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceProtobufClient) UpdatePermission(ctx context.Context, in *UpdatePermissionRequest) (*UpdatePermissionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePermission")
	out := new(UpdatePermissionResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[13], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =======================
// UserService JSON Client
// =======================

type userServiceJSONClient struct {
	client HTTPClient
	urls   [14]string
}

// NewUserServiceJSONClient creates a JSON client that implements the UserService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewUserServiceJSONClient(addr string, client HTTPClient) UserService {
	prefix := urlBase(addr) + UserServicePathPrefix
	urls := [14]string{
		prefix + "Register",
		prefix + "Login",
		prefix + "SessionInfo",
		prefix + "SwitchAccount",
		prefix + "SendSTokenEmail",
		prefix + "UpgradeAccessToken",
		prefix + "ResetPassword",
		prefix + "ChangePassword",
		prefix + "ChangePasswordUsingToken",
		prefix + "SendEmailVerification",
		prefix + "SendPhoneVerification",
		prefix + "VerifyEmailUsingToken",
		prefix + "VerifyPhoneUsingToken",
		prefix + "UpdatePermission",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &userServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &userServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *userServiceJSONClient) Register(ctx context.Context, in *CreateUserRequest) (*RegisterResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	out := new(RegisterResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceJSONClient) Login(ctx context.Context, in *LoginRequest) (*LoginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "Login")
	out := new(LoginResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceJSONClient) SessionInfo(ctx context.Context, in *cm.Empty) (*LoginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "SessionInfo")
	out := new(LoginResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceJSONClient) SwitchAccount(ctx context.Context, in *SwitchAccountRequest) (*AccessTokenResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "SwitchAccount")
	out := new(AccessTokenResponse)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceJSONClient) SendSTokenEmail(ctx context.Context, in *SendSTokenEmailRequest) (*cm.MessageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "SendSTokenEmail")
	out := new(cm.MessageResponse)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceJSONClient) UpgradeAccessToken(ctx context.Context, in *UpgradeAccessTokenRequest) (*AccessTokenResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "UpgradeAccessToken")
	out := new(AccessTokenResponse)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceJSONClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest) (*cm.MessageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "ResetPassword")
	out := new(cm.MessageResponse)
	err := doJSONRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceJSONClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest) (*cm.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "ChangePassword")
	out := new(cm.Empty)
	err := doJSONRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceJSONClient) ChangePasswordUsingToken(ctx context.Context, in *ChangePasswordUsingTokenRequest) (*cm.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "ChangePasswordUsingToken")
	out := new(cm.Empty)
	err := doJSONRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceJSONClient) SendEmailVerification(ctx context.Context, in *SendEmailVerificationRequest) (*cm.MessageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "SendEmailVerification")
	out := new(cm.MessageResponse)
	err := doJSONRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceJSONClient) SendPhoneVerification(ctx context.Context, in *SendPhoneVerificationRequest) (*cm.MessageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "SendPhoneVerification")
	out := new(cm.MessageResponse)
	err := doJSONRequest(ctx, c.client, c.urls[10], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceJSONClient) VerifyEmailUsingToken(ctx context.Context, in *VerifyEmailUsingTokenRequest) (*cm.MessageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "VerifyEmailUsingToken")
	out := new(cm.MessageResponse)
	err := doJSONRequest(ctx, c.client, c.urls[11], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceJSONClient) VerifyPhoneUsingToken(ctx context.Context, in *VerifyPhoneUsingTokenRequest) (*cm.MessageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "VerifyPhoneUsingToken")
	out := new(cm.MessageResponse)
	err := doJSONRequest(ctx, c.client, c.urls[12], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceJSONClient) UpdatePermission(ctx context.Context, in *UpdatePermissionRequest) (*UpdatePermissionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePermission")
	out := new(UpdatePermissionResponse)
	err := doJSONRequest(ctx, c.client, c.urls[13], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// UserService Server Handler
// ==========================

type userServiceServer struct {
	UserService
	hooks *twirp.ServerHooks
}

func NewUserServiceServer(svc UserService, hooks *twirp.ServerHooks) TwirpServer {
	return &userServiceServer{
		UserService: svc,
		hooks:       hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *userServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// UserServicePathPrefix is used for all URL paths on a twirp UserService server.
// Requests are always: POST UserServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const UserServicePathPrefix = "/api/etop.User/"

func (s *userServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "User")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/etop.User/Register":
		s.serveRegister(ctx, resp, req)
		return
	case "/api/etop.User/Login":
		s.serveLogin(ctx, resp, req)
		return
	case "/api/etop.User/SessionInfo":
		s.serveSessionInfo(ctx, resp, req)
		return
	case "/api/etop.User/SwitchAccount":
		s.serveSwitchAccount(ctx, resp, req)
		return
	case "/api/etop.User/SendSTokenEmail":
		s.serveSendSTokenEmail(ctx, resp, req)
		return
	case "/api/etop.User/UpgradeAccessToken":
		s.serveUpgradeAccessToken(ctx, resp, req)
		return
	case "/api/etop.User/ResetPassword":
		s.serveResetPassword(ctx, resp, req)
		return
	case "/api/etop.User/ChangePassword":
		s.serveChangePassword(ctx, resp, req)
		return
	case "/api/etop.User/ChangePasswordUsingToken":
		s.serveChangePasswordUsingToken(ctx, resp, req)
		return
	case "/api/etop.User/SendEmailVerification":
		s.serveSendEmailVerification(ctx, resp, req)
		return
	case "/api/etop.User/SendPhoneVerification":
		s.serveSendPhoneVerification(ctx, resp, req)
		return
	case "/api/etop.User/VerifyEmailUsingToken":
		s.serveVerifyEmailUsingToken(ctx, resp, req)
		return
	case "/api/etop.User/VerifyPhoneUsingToken":
		s.serveVerifyPhoneUsingToken(ctx, resp, req)
		return
	case "/api/etop.User/UpdatePermission":
		s.serveUpdatePermission(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *userServiceServer) serveRegister(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRegisterJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRegisterProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveRegisterJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CreateUserRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *RegisterResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.Register(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisterResponse and nil error while calling Register. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveRegisterProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CreateUserRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *RegisterResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.Register(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisterResponse and nil error while calling Register. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveLogin(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveLoginJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveLoginProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveLoginJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Login")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(LoginRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *LoginResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.Login(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LoginResponse and nil error while calling Login. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveLoginProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Login")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(LoginRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *LoginResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.Login(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LoginResponse and nil error while calling Login. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveSessionInfo(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSessionInfoJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSessionInfoProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveSessionInfoJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SessionInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *LoginResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.SessionInfo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LoginResponse and nil error while calling SessionInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveSessionInfoProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SessionInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *LoginResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.SessionInfo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LoginResponse and nil error while calling SessionInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveSwitchAccount(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSwitchAccountJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSwitchAccountProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveSwitchAccountJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SwitchAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(SwitchAccountRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *AccessTokenResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.SwitchAccount(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AccessTokenResponse and nil error while calling SwitchAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveSwitchAccountProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SwitchAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(SwitchAccountRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *AccessTokenResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.SwitchAccount(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AccessTokenResponse and nil error while calling SwitchAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveSendSTokenEmail(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSendSTokenEmailJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSendSTokenEmailProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveSendSTokenEmailJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SendSTokenEmail")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(SendSTokenEmailRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.MessageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.SendSTokenEmail(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.MessageResponse and nil error while calling SendSTokenEmail. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveSendSTokenEmailProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SendSTokenEmail")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(SendSTokenEmailRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.MessageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.SendSTokenEmail(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.MessageResponse and nil error while calling SendSTokenEmail. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveUpgradeAccessToken(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpgradeAccessTokenJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpgradeAccessTokenProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveUpgradeAccessTokenJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpgradeAccessToken")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpgradeAccessTokenRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *AccessTokenResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.UpgradeAccessToken(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AccessTokenResponse and nil error while calling UpgradeAccessToken. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveUpgradeAccessTokenProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpgradeAccessToken")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpgradeAccessTokenRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *AccessTokenResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.UpgradeAccessToken(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AccessTokenResponse and nil error while calling UpgradeAccessToken. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveResetPassword(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveResetPasswordJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveResetPasswordProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveResetPasswordJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ResetPassword")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ResetPasswordRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.MessageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.ResetPassword(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.MessageResponse and nil error while calling ResetPassword. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveResetPasswordProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ResetPassword")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(ResetPasswordRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.MessageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.ResetPassword(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.MessageResponse and nil error while calling ResetPassword. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveChangePassword(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveChangePasswordJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveChangePasswordProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveChangePasswordJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ChangePassword")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ChangePasswordRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.ChangePassword(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.Empty and nil error while calling ChangePassword. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveChangePasswordProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ChangePassword")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(ChangePasswordRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.ChangePassword(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.Empty and nil error while calling ChangePassword. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveChangePasswordUsingToken(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveChangePasswordUsingTokenJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveChangePasswordUsingTokenProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveChangePasswordUsingTokenJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ChangePasswordUsingToken")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ChangePasswordUsingTokenRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.ChangePasswordUsingToken(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.Empty and nil error while calling ChangePasswordUsingToken. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveChangePasswordUsingTokenProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ChangePasswordUsingToken")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(ChangePasswordUsingTokenRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.ChangePasswordUsingToken(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.Empty and nil error while calling ChangePasswordUsingToken. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveSendEmailVerification(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSendEmailVerificationJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSendEmailVerificationProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveSendEmailVerificationJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SendEmailVerification")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(SendEmailVerificationRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.MessageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.SendEmailVerification(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.MessageResponse and nil error while calling SendEmailVerification. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveSendEmailVerificationProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SendEmailVerification")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(SendEmailVerificationRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.MessageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.SendEmailVerification(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.MessageResponse and nil error while calling SendEmailVerification. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveSendPhoneVerification(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSendPhoneVerificationJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSendPhoneVerificationProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveSendPhoneVerificationJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SendPhoneVerification")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(SendPhoneVerificationRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.MessageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.SendPhoneVerification(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.MessageResponse and nil error while calling SendPhoneVerification. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveSendPhoneVerificationProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SendPhoneVerification")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(SendPhoneVerificationRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.MessageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.SendPhoneVerification(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.MessageResponse and nil error while calling SendPhoneVerification. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveVerifyEmailUsingToken(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveVerifyEmailUsingTokenJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveVerifyEmailUsingTokenProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveVerifyEmailUsingTokenJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "VerifyEmailUsingToken")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(VerifyEmailUsingTokenRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.MessageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.VerifyEmailUsingToken(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.MessageResponse and nil error while calling VerifyEmailUsingToken. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveVerifyEmailUsingTokenProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "VerifyEmailUsingToken")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(VerifyEmailUsingTokenRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.MessageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.VerifyEmailUsingToken(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.MessageResponse and nil error while calling VerifyEmailUsingToken. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveVerifyPhoneUsingToken(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveVerifyPhoneUsingTokenJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveVerifyPhoneUsingTokenProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveVerifyPhoneUsingTokenJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "VerifyPhoneUsingToken")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(VerifyPhoneUsingTokenRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.MessageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.VerifyPhoneUsingToken(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.MessageResponse and nil error while calling VerifyPhoneUsingToken. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveVerifyPhoneUsingTokenProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "VerifyPhoneUsingToken")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(VerifyPhoneUsingTokenRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.MessageResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.VerifyPhoneUsingToken(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.MessageResponse and nil error while calling VerifyPhoneUsingToken. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveUpdatePermission(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdatePermissionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdatePermissionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveUpdatePermissionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePermission")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdatePermissionRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *UpdatePermissionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.UpdatePermission(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdatePermissionResponse and nil error while calling UpdatePermission. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveUpdatePermissionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePermission")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdatePermissionRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *UpdatePermissionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.UserService.UpdatePermission(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdatePermissionResponse and nil error while calling UpdatePermission. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 1
}

func (s *userServiceServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *userServiceServer) PathPrefix() string {
	return UserServicePathPrefix
}

// ========================
// AccountService Interface
// ========================

type AccountService interface {
	UpdateURLSlug(context.Context, *UpdateURLSlugRequest) (*cm.Empty, error)

	GetPublicPartnerInfo(context.Context, *cm.IDRequest) (*PublicAccountInfo, error)

	// leave ids empty to get all connected partners
	GetPublicPartners(context.Context, *cm.IDsRequest) (*PublicAccountsResponse, error)
}

// ==============================
// AccountService Protobuf Client
// ==============================

type accountServiceProtobufClient struct {
	client HTTPClient
	urls   [3]string
}

// NewAccountServiceProtobufClient creates a Protobuf client that implements the AccountService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewAccountServiceProtobufClient(addr string, client HTTPClient) AccountService {
	prefix := urlBase(addr) + AccountServicePathPrefix
	urls := [3]string{
		prefix + "UpdateURLSlug",
		prefix + "GetPublicPartnerInfo",
		prefix + "GetPublicPartners",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &accountServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &accountServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *accountServiceProtobufClient) UpdateURLSlug(ctx context.Context, in *UpdateURLSlugRequest) (*cm.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateURLSlug")
	out := new(cm.Empty)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceProtobufClient) GetPublicPartnerInfo(ctx context.Context, in *cm.IDRequest) (*PublicAccountInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "GetPublicPartnerInfo")
	out := new(PublicAccountInfo)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceProtobufClient) GetPublicPartners(ctx context.Context, in *cm.IDsRequest) (*PublicAccountsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "GetPublicPartners")
	out := new(PublicAccountsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// AccountService JSON Client
// ==========================

type accountServiceJSONClient struct {
	client HTTPClient
	urls   [3]string
}

// NewAccountServiceJSONClient creates a JSON client that implements the AccountService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewAccountServiceJSONClient(addr string, client HTTPClient) AccountService {
	prefix := urlBase(addr) + AccountServicePathPrefix
	urls := [3]string{
		prefix + "UpdateURLSlug",
		prefix + "GetPublicPartnerInfo",
		prefix + "GetPublicPartners",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &accountServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &accountServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *accountServiceJSONClient) UpdateURLSlug(ctx context.Context, in *UpdateURLSlugRequest) (*cm.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateURLSlug")
	out := new(cm.Empty)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceJSONClient) GetPublicPartnerInfo(ctx context.Context, in *cm.IDRequest) (*PublicAccountInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "GetPublicPartnerInfo")
	out := new(PublicAccountInfo)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceJSONClient) GetPublicPartners(ctx context.Context, in *cm.IDsRequest) (*PublicAccountsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "GetPublicPartners")
	out := new(PublicAccountsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =============================
// AccountService Server Handler
// =============================

type accountServiceServer struct {
	AccountService
	hooks *twirp.ServerHooks
}

func NewAccountServiceServer(svc AccountService, hooks *twirp.ServerHooks) TwirpServer {
	return &accountServiceServer{
		AccountService: svc,
		hooks:          hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *accountServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// AccountServicePathPrefix is used for all URL paths on a twirp AccountService server.
// Requests are always: POST AccountServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const AccountServicePathPrefix = "/api/etop.Account/"

func (s *accountServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/etop.Account/UpdateURLSlug":
		s.serveUpdateURLSlug(ctx, resp, req)
		return
	case "/api/etop.Account/GetPublicPartnerInfo":
		s.serveGetPublicPartnerInfo(ctx, resp, req)
		return
	case "/api/etop.Account/GetPublicPartners":
		s.serveGetPublicPartners(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *accountServiceServer) serveUpdateURLSlug(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateURLSlugJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateURLSlugProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *accountServiceServer) serveUpdateURLSlugJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateURLSlug")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateURLSlugRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.UpdateURLSlug(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.Empty and nil error while calling UpdateURLSlug. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveUpdateURLSlugProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateURLSlug")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateURLSlugRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.UpdateURLSlug(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.Empty and nil error while calling UpdateURLSlug. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveGetPublicPartnerInfo(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetPublicPartnerInfoJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetPublicPartnerInfoProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *accountServiceServer) serveGetPublicPartnerInfoJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPublicPartnerInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *PublicAccountInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.GetPublicPartnerInfo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PublicAccountInfo and nil error while calling GetPublicPartnerInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveGetPublicPartnerInfoProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPublicPartnerInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *PublicAccountInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.GetPublicPartnerInfo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PublicAccountInfo and nil error while calling GetPublicPartnerInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveGetPublicPartners(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetPublicPartnersJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetPublicPartnersProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *accountServiceServer) serveGetPublicPartnersJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPublicPartners")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *PublicAccountsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.GetPublicPartners(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PublicAccountsResponse and nil error while calling GetPublicPartners. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveGetPublicPartnersProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPublicPartners")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *PublicAccountsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.GetPublicPartners(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PublicAccountsResponse and nil error while calling GetPublicPartners. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 2
}

func (s *accountServiceServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *accountServiceServer) PathPrefix() string {
	return AccountServicePathPrefix
}

// =============================
// RelationshipService Interface
// =============================

type RelationshipService interface {
	InviteUserToAccount(context.Context, *InviteUserToAccountRequest) (*UserAccountInfo, error)

	AnswerInvitation(context.Context, *AnswerInvitationRequest) (*UserAccountInfo, error)

	GetUsersInCurrentAccounts(context.Context, *GetUsersInCurrentAccountsRequest) (*ProtectedUsersResponse, error)

	LeaveAccount(context.Context, *LeaveAccountRequest) (*cm.Empty, error)

	RemoveUserFromCurrentAccount(context.Context, *RemoveUserFromCurrentAccountRequest) (*cm.Empty, error)
}

// ===================================
// RelationshipService Protobuf Client
// ===================================

type relationshipServiceProtobufClient struct {
	client HTTPClient
	urls   [5]string
}

// NewRelationshipServiceProtobufClient creates a Protobuf client that implements the RelationshipService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewRelationshipServiceProtobufClient(addr string, client HTTPClient) RelationshipService {
	prefix := urlBase(addr) + RelationshipServicePathPrefix
	urls := [5]string{
		prefix + "InviteUserToAccount",
		prefix + "AnswerInvitation",
		prefix + "GetUsersInCurrentAccounts",
		prefix + "LeaveAccount",
		prefix + "RemoveUserFromCurrentAccount",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &relationshipServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &relationshipServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *relationshipServiceProtobufClient) InviteUserToAccount(ctx context.Context, in *InviteUserToAccountRequest) (*UserAccountInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Relationship")
	ctx = ctxsetters.WithMethodName(ctx, "InviteUserToAccount")
	out := new(UserAccountInfo)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipServiceProtobufClient) AnswerInvitation(ctx context.Context, in *AnswerInvitationRequest) (*UserAccountInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Relationship")
	ctx = ctxsetters.WithMethodName(ctx, "AnswerInvitation")
	out := new(UserAccountInfo)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipServiceProtobufClient) GetUsersInCurrentAccounts(ctx context.Context, in *GetUsersInCurrentAccountsRequest) (*ProtectedUsersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Relationship")
	ctx = ctxsetters.WithMethodName(ctx, "GetUsersInCurrentAccounts")
	out := new(ProtectedUsersResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipServiceProtobufClient) LeaveAccount(ctx context.Context, in *LeaveAccountRequest) (*cm.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Relationship")
	ctx = ctxsetters.WithMethodName(ctx, "LeaveAccount")
	out := new(cm.Empty)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipServiceProtobufClient) RemoveUserFromCurrentAccount(ctx context.Context, in *RemoveUserFromCurrentAccountRequest) (*cm.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Relationship")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveUserFromCurrentAccount")
	out := new(cm.Empty)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===============================
// RelationshipService JSON Client
// ===============================

type relationshipServiceJSONClient struct {
	client HTTPClient
	urls   [5]string
}

// NewRelationshipServiceJSONClient creates a JSON client that implements the RelationshipService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewRelationshipServiceJSONClient(addr string, client HTTPClient) RelationshipService {
	prefix := urlBase(addr) + RelationshipServicePathPrefix
	urls := [5]string{
		prefix + "InviteUserToAccount",
		prefix + "AnswerInvitation",
		prefix + "GetUsersInCurrentAccounts",
		prefix + "LeaveAccount",
		prefix + "RemoveUserFromCurrentAccount",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &relationshipServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &relationshipServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *relationshipServiceJSONClient) InviteUserToAccount(ctx context.Context, in *InviteUserToAccountRequest) (*UserAccountInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Relationship")
	ctx = ctxsetters.WithMethodName(ctx, "InviteUserToAccount")
	out := new(UserAccountInfo)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipServiceJSONClient) AnswerInvitation(ctx context.Context, in *AnswerInvitationRequest) (*UserAccountInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Relationship")
	ctx = ctxsetters.WithMethodName(ctx, "AnswerInvitation")
	out := new(UserAccountInfo)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipServiceJSONClient) GetUsersInCurrentAccounts(ctx context.Context, in *GetUsersInCurrentAccountsRequest) (*ProtectedUsersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Relationship")
	ctx = ctxsetters.WithMethodName(ctx, "GetUsersInCurrentAccounts")
	out := new(ProtectedUsersResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipServiceJSONClient) LeaveAccount(ctx context.Context, in *LeaveAccountRequest) (*cm.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Relationship")
	ctx = ctxsetters.WithMethodName(ctx, "LeaveAccount")
	out := new(cm.Empty)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipServiceJSONClient) RemoveUserFromCurrentAccount(ctx context.Context, in *RemoveUserFromCurrentAccountRequest) (*cm.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Relationship")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveUserFromCurrentAccount")
	out := new(cm.Empty)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==================================
// RelationshipService Server Handler
// ==================================

type relationshipServiceServer struct {
	RelationshipService
	hooks *twirp.ServerHooks
}

func NewRelationshipServiceServer(svc RelationshipService, hooks *twirp.ServerHooks) TwirpServer {
	return &relationshipServiceServer{
		RelationshipService: svc,
		hooks:               hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *relationshipServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// RelationshipServicePathPrefix is used for all URL paths on a twirp RelationshipService server.
// Requests are always: POST RelationshipServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const RelationshipServicePathPrefix = "/api/etop.Relationship/"

func (s *relationshipServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Relationship")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/etop.Relationship/InviteUserToAccount":
		s.serveInviteUserToAccount(ctx, resp, req)
		return
	case "/api/etop.Relationship/AnswerInvitation":
		s.serveAnswerInvitation(ctx, resp, req)
		return
	case "/api/etop.Relationship/GetUsersInCurrentAccounts":
		s.serveGetUsersInCurrentAccounts(ctx, resp, req)
		return
	case "/api/etop.Relationship/LeaveAccount":
		s.serveLeaveAccount(ctx, resp, req)
		return
	case "/api/etop.Relationship/RemoveUserFromCurrentAccount":
		s.serveRemoveUserFromCurrentAccount(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *relationshipServiceServer) serveInviteUserToAccount(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveInviteUserToAccountJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveInviteUserToAccountProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *relationshipServiceServer) serveInviteUserToAccountJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "InviteUserToAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(InviteUserToAccountRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *UserAccountInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.RelationshipService.InviteUserToAccount(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserAccountInfo and nil error while calling InviteUserToAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *relationshipServiceServer) serveInviteUserToAccountProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "InviteUserToAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(InviteUserToAccountRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *UserAccountInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.RelationshipService.InviteUserToAccount(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserAccountInfo and nil error while calling InviteUserToAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *relationshipServiceServer) serveAnswerInvitation(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAnswerInvitationJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAnswerInvitationProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *relationshipServiceServer) serveAnswerInvitationJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AnswerInvitation")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(AnswerInvitationRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *UserAccountInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.RelationshipService.AnswerInvitation(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserAccountInfo and nil error while calling AnswerInvitation. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *relationshipServiceServer) serveAnswerInvitationProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AnswerInvitation")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(AnswerInvitationRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *UserAccountInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.RelationshipService.AnswerInvitation(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserAccountInfo and nil error while calling AnswerInvitation. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *relationshipServiceServer) serveGetUsersInCurrentAccounts(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetUsersInCurrentAccountsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetUsersInCurrentAccountsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *relationshipServiceServer) serveGetUsersInCurrentAccountsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUsersInCurrentAccounts")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetUsersInCurrentAccountsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *ProtectedUsersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.RelationshipService.GetUsersInCurrentAccounts(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ProtectedUsersResponse and nil error while calling GetUsersInCurrentAccounts. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *relationshipServiceServer) serveGetUsersInCurrentAccountsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUsersInCurrentAccounts")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetUsersInCurrentAccountsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *ProtectedUsersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.RelationshipService.GetUsersInCurrentAccounts(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ProtectedUsersResponse and nil error while calling GetUsersInCurrentAccounts. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *relationshipServiceServer) serveLeaveAccount(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveLeaveAccountJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveLeaveAccountProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *relationshipServiceServer) serveLeaveAccountJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "LeaveAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(LeaveAccountRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.RelationshipService.LeaveAccount(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.Empty and nil error while calling LeaveAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *relationshipServiceServer) serveLeaveAccountProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "LeaveAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(LeaveAccountRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.RelationshipService.LeaveAccount(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.Empty and nil error while calling LeaveAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *relationshipServiceServer) serveRemoveUserFromCurrentAccount(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoveUserFromCurrentAccountJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveUserFromCurrentAccountProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *relationshipServiceServer) serveRemoveUserFromCurrentAccountJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveUserFromCurrentAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(RemoveUserFromCurrentAccountRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.RelationshipService.RemoveUserFromCurrentAccount(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.Empty and nil error while calling RemoveUserFromCurrentAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *relationshipServiceServer) serveRemoveUserFromCurrentAccountProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveUserFromCurrentAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(RemoveUserFromCurrentAccountRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.RelationshipService.RemoveUserFromCurrentAccount(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.Empty and nil error while calling RemoveUserFromCurrentAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *relationshipServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 3
}

func (s *relationshipServiceServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *relationshipServiceServer) PathPrefix() string {
	return RelationshipServicePathPrefix
}

// =========================
// LocationService Interface
// =========================

type LocationService interface {
	GetProvinces(context.Context, *cm.Empty) (*GetProvincesResponse, error)

	GetDistricts(context.Context, *cm.Empty) (*GetDistrictsResponse, error)

	GetDistrictsByProvince(context.Context, *GetDistrictsByProvinceRequest) (*GetDistrictsResponse, error)

	GetWards(context.Context, *cm.Empty) (*GetWardsResponse, error)

	GetWardsByDistrict(context.Context, *GetWardsByDistrictRequest) (*GetWardsResponse, error)

	ParseLocation(context.Context, *ParseLocationRequest) (*ParseLocationResponse, error)
}

// ===============================
// LocationService Protobuf Client
// ===============================

type locationServiceProtobufClient struct {
	client HTTPClient
	urls   [6]string
}

// NewLocationServiceProtobufClient creates a Protobuf client that implements the LocationService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewLocationServiceProtobufClient(addr string, client HTTPClient) LocationService {
	prefix := urlBase(addr) + LocationServicePathPrefix
	urls := [6]string{
		prefix + "GetProvinces",
		prefix + "GetDistricts",
		prefix + "GetDistrictsByProvince",
		prefix + "GetWards",
		prefix + "GetWardsByDistrict",
		prefix + "ParseLocation",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &locationServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &locationServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *locationServiceProtobufClient) GetProvinces(ctx context.Context, in *cm.Empty) (*GetProvincesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Location")
	ctx = ctxsetters.WithMethodName(ctx, "GetProvinces")
	out := new(GetProvincesResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceProtobufClient) GetDistricts(ctx context.Context, in *cm.Empty) (*GetDistrictsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Location")
	ctx = ctxsetters.WithMethodName(ctx, "GetDistricts")
	out := new(GetDistrictsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceProtobufClient) GetDistrictsByProvince(ctx context.Context, in *GetDistrictsByProvinceRequest) (*GetDistrictsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Location")
	ctx = ctxsetters.WithMethodName(ctx, "GetDistrictsByProvince")
	out := new(GetDistrictsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceProtobufClient) GetWards(ctx context.Context, in *cm.Empty) (*GetWardsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Location")
	ctx = ctxsetters.WithMethodName(ctx, "GetWards")
	out := new(GetWardsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceProtobufClient) GetWardsByDistrict(ctx context.Context, in *GetWardsByDistrictRequest) (*GetWardsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Location")
	ctx = ctxsetters.WithMethodName(ctx, "GetWardsByDistrict")
	out := new(GetWardsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceProtobufClient) ParseLocation(ctx context.Context, in *ParseLocationRequest) (*ParseLocationResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Location")
	ctx = ctxsetters.WithMethodName(ctx, "ParseLocation")
	out := new(ParseLocationResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===========================
// LocationService JSON Client
// ===========================

type locationServiceJSONClient struct {
	client HTTPClient
	urls   [6]string
}

// NewLocationServiceJSONClient creates a JSON client that implements the LocationService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewLocationServiceJSONClient(addr string, client HTTPClient) LocationService {
	prefix := urlBase(addr) + LocationServicePathPrefix
	urls := [6]string{
		prefix + "GetProvinces",
		prefix + "GetDistricts",
		prefix + "GetDistrictsByProvince",
		prefix + "GetWards",
		prefix + "GetWardsByDistrict",
		prefix + "ParseLocation",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &locationServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &locationServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *locationServiceJSONClient) GetProvinces(ctx context.Context, in *cm.Empty) (*GetProvincesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Location")
	ctx = ctxsetters.WithMethodName(ctx, "GetProvinces")
	out := new(GetProvincesResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceJSONClient) GetDistricts(ctx context.Context, in *cm.Empty) (*GetDistrictsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Location")
	ctx = ctxsetters.WithMethodName(ctx, "GetDistricts")
	out := new(GetDistrictsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceJSONClient) GetDistrictsByProvince(ctx context.Context, in *GetDistrictsByProvinceRequest) (*GetDistrictsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Location")
	ctx = ctxsetters.WithMethodName(ctx, "GetDistrictsByProvince")
	out := new(GetDistrictsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceJSONClient) GetWards(ctx context.Context, in *cm.Empty) (*GetWardsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Location")
	ctx = ctxsetters.WithMethodName(ctx, "GetWards")
	out := new(GetWardsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceJSONClient) GetWardsByDistrict(ctx context.Context, in *GetWardsByDistrictRequest) (*GetWardsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Location")
	ctx = ctxsetters.WithMethodName(ctx, "GetWardsByDistrict")
	out := new(GetWardsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceJSONClient) ParseLocation(ctx context.Context, in *ParseLocationRequest) (*ParseLocationResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Location")
	ctx = ctxsetters.WithMethodName(ctx, "ParseLocation")
	out := new(ParseLocationResponse)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==============================
// LocationService Server Handler
// ==============================

type locationServiceServer struct {
	LocationService
	hooks *twirp.ServerHooks
}

func NewLocationServiceServer(svc LocationService, hooks *twirp.ServerHooks) TwirpServer {
	return &locationServiceServer{
		LocationService: svc,
		hooks:           hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *locationServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// LocationServicePathPrefix is used for all URL paths on a twirp LocationService server.
// Requests are always: POST LocationServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const LocationServicePathPrefix = "/api/etop.Location/"

func (s *locationServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Location")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/etop.Location/GetProvinces":
		s.serveGetProvinces(ctx, resp, req)
		return
	case "/api/etop.Location/GetDistricts":
		s.serveGetDistricts(ctx, resp, req)
		return
	case "/api/etop.Location/GetDistrictsByProvince":
		s.serveGetDistrictsByProvince(ctx, resp, req)
		return
	case "/api/etop.Location/GetWards":
		s.serveGetWards(ctx, resp, req)
		return
	case "/api/etop.Location/GetWardsByDistrict":
		s.serveGetWardsByDistrict(ctx, resp, req)
		return
	case "/api/etop.Location/ParseLocation":
		s.serveParseLocation(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *locationServiceServer) serveGetProvinces(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetProvincesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetProvincesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *locationServiceServer) serveGetProvincesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProvinces")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *GetProvincesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.LocationService.GetProvinces(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetProvincesResponse and nil error while calling GetProvinces. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *locationServiceServer) serveGetProvincesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProvinces")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *GetProvincesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.LocationService.GetProvinces(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetProvincesResponse and nil error while calling GetProvinces. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *locationServiceServer) serveGetDistricts(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetDistrictsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetDistrictsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *locationServiceServer) serveGetDistrictsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetDistricts")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *GetDistrictsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.LocationService.GetDistricts(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetDistrictsResponse and nil error while calling GetDistricts. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *locationServiceServer) serveGetDistrictsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetDistricts")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *GetDistrictsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.LocationService.GetDistricts(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetDistrictsResponse and nil error while calling GetDistricts. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *locationServiceServer) serveGetDistrictsByProvince(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetDistrictsByProvinceJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetDistrictsByProvinceProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *locationServiceServer) serveGetDistrictsByProvinceJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetDistrictsByProvince")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetDistrictsByProvinceRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *GetDistrictsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.LocationService.GetDistrictsByProvince(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetDistrictsResponse and nil error while calling GetDistrictsByProvince. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *locationServiceServer) serveGetDistrictsByProvinceProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetDistrictsByProvince")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetDistrictsByProvinceRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *GetDistrictsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.LocationService.GetDistrictsByProvince(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetDistrictsResponse and nil error while calling GetDistrictsByProvince. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *locationServiceServer) serveGetWards(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetWardsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetWardsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *locationServiceServer) serveGetWardsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetWards")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *GetWardsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.LocationService.GetWards(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetWardsResponse and nil error while calling GetWards. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *locationServiceServer) serveGetWardsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetWards")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *GetWardsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.LocationService.GetWards(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetWardsResponse and nil error while calling GetWards. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *locationServiceServer) serveGetWardsByDistrict(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetWardsByDistrictJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetWardsByDistrictProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *locationServiceServer) serveGetWardsByDistrictJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetWardsByDistrict")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetWardsByDistrictRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *GetWardsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.LocationService.GetWardsByDistrict(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetWardsResponse and nil error while calling GetWardsByDistrict. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *locationServiceServer) serveGetWardsByDistrictProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetWardsByDistrict")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetWardsByDistrictRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *GetWardsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.LocationService.GetWardsByDistrict(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetWardsResponse and nil error while calling GetWardsByDistrict. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *locationServiceServer) serveParseLocation(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveParseLocationJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveParseLocationProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *locationServiceServer) serveParseLocationJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ParseLocation")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ParseLocationRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *ParseLocationResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.LocationService.ParseLocation(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ParseLocationResponse and nil error while calling ParseLocation. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *locationServiceServer) serveParseLocationProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ParseLocation")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(ParseLocationRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *ParseLocationResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.LocationService.ParseLocation(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ParseLocationResponse and nil error while calling ParseLocation. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *locationServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 4
}

func (s *locationServiceServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *locationServiceServer) PathPrefix() string {
	return LocationServicePathPrefix
}

// =====================
// BankService Interface
// =====================

type BankService interface {
	GetBanks(context.Context, *cm.Empty) (*GetBanksResponse, error)

	GetProvincesByBank(context.Context, *GetProvincesByBankResquest) (*GetBankProvincesResponse, error)

	GetBranchesByBankProvince(context.Context, *GetBranchesByBankProvinceResquest) (*GetBranchesByBankProvinceResponse, error)
}

// ===========================
// BankService Protobuf Client
// ===========================

type bankServiceProtobufClient struct {
	client HTTPClient
	urls   [3]string
}

// NewBankServiceProtobufClient creates a Protobuf client that implements the BankService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewBankServiceProtobufClient(addr string, client HTTPClient) BankService {
	prefix := urlBase(addr) + BankServicePathPrefix
	urls := [3]string{
		prefix + "GetBanks",
		prefix + "GetProvincesByBank",
		prefix + "GetBranchesByBankProvince",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &bankServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &bankServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *bankServiceProtobufClient) GetBanks(ctx context.Context, in *cm.Empty) (*GetBanksResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Bank")
	ctx = ctxsetters.WithMethodName(ctx, "GetBanks")
	out := new(GetBanksResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceProtobufClient) GetProvincesByBank(ctx context.Context, in *GetProvincesByBankResquest) (*GetBankProvincesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Bank")
	ctx = ctxsetters.WithMethodName(ctx, "GetProvincesByBank")
	out := new(GetBankProvincesResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceProtobufClient) GetBranchesByBankProvince(ctx context.Context, in *GetBranchesByBankProvinceResquest) (*GetBranchesByBankProvinceResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Bank")
	ctx = ctxsetters.WithMethodName(ctx, "GetBranchesByBankProvince")
	out := new(GetBranchesByBankProvinceResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =======================
// BankService JSON Client
// =======================

type bankServiceJSONClient struct {
	client HTTPClient
	urls   [3]string
}

// NewBankServiceJSONClient creates a JSON client that implements the BankService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewBankServiceJSONClient(addr string, client HTTPClient) BankService {
	prefix := urlBase(addr) + BankServicePathPrefix
	urls := [3]string{
		prefix + "GetBanks",
		prefix + "GetProvincesByBank",
		prefix + "GetBranchesByBankProvince",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &bankServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &bankServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *bankServiceJSONClient) GetBanks(ctx context.Context, in *cm.Empty) (*GetBanksResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Bank")
	ctx = ctxsetters.WithMethodName(ctx, "GetBanks")
	out := new(GetBanksResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceJSONClient) GetProvincesByBank(ctx context.Context, in *GetProvincesByBankResquest) (*GetBankProvincesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Bank")
	ctx = ctxsetters.WithMethodName(ctx, "GetProvincesByBank")
	out := new(GetBankProvincesResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceJSONClient) GetBranchesByBankProvince(ctx context.Context, in *GetBranchesByBankProvinceResquest) (*GetBranchesByBankProvinceResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Bank")
	ctx = ctxsetters.WithMethodName(ctx, "GetBranchesByBankProvince")
	out := new(GetBranchesByBankProvinceResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// BankService Server Handler
// ==========================

type bankServiceServer struct {
	BankService
	hooks *twirp.ServerHooks
}

func NewBankServiceServer(svc BankService, hooks *twirp.ServerHooks) TwirpServer {
	return &bankServiceServer{
		BankService: svc,
		hooks:       hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *bankServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// BankServicePathPrefix is used for all URL paths on a twirp BankService server.
// Requests are always: POST BankServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const BankServicePathPrefix = "/api/etop.Bank/"

func (s *bankServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Bank")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/etop.Bank/GetBanks":
		s.serveGetBanks(ctx, resp, req)
		return
	case "/api/etop.Bank/GetProvincesByBank":
		s.serveGetProvincesByBank(ctx, resp, req)
		return
	case "/api/etop.Bank/GetBranchesByBankProvince":
		s.serveGetBranchesByBankProvince(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *bankServiceServer) serveGetBanks(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetBanksJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetBanksProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *bankServiceServer) serveGetBanksJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetBanks")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *GetBanksResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.BankService.GetBanks(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetBanksResponse and nil error while calling GetBanks. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *bankServiceServer) serveGetBanksProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetBanks")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *GetBanksResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.BankService.GetBanks(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetBanksResponse and nil error while calling GetBanks. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *bankServiceServer) serveGetProvincesByBank(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetProvincesByBankJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetProvincesByBankProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *bankServiceServer) serveGetProvincesByBankJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProvincesByBank")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetProvincesByBankResquest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *GetBankProvincesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.BankService.GetProvincesByBank(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetBankProvincesResponse and nil error while calling GetProvincesByBank. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *bankServiceServer) serveGetProvincesByBankProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProvincesByBank")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetProvincesByBankResquest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *GetBankProvincesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.BankService.GetProvincesByBank(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetBankProvincesResponse and nil error while calling GetProvincesByBank. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *bankServiceServer) serveGetBranchesByBankProvince(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetBranchesByBankProvinceJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetBranchesByBankProvinceProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *bankServiceServer) serveGetBranchesByBankProvinceJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetBranchesByBankProvince")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetBranchesByBankProvinceResquest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *GetBranchesByBankProvinceResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.BankService.GetBranchesByBankProvince(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetBranchesByBankProvinceResponse and nil error while calling GetBranchesByBankProvince. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *bankServiceServer) serveGetBranchesByBankProvinceProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetBranchesByBankProvince")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetBranchesByBankProvinceResquest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *GetBranchesByBankProvinceResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.BankService.GetBranchesByBankProvince(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetBranchesByBankProvinceResponse and nil error while calling GetBranchesByBankProvince. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *bankServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 5
}

func (s *bankServiceServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *bankServiceServer) PathPrefix() string {
	return BankServicePathPrefix
}

// ========================
// AddressService Interface
// ========================

type AddressService interface {
	CreateAddress(context.Context, *CreateAddressRequest) (*Address, error)

	GetAddresses(context.Context, *cm.Empty) (*GetAddressResponse, error)

	UpdateAddress(context.Context, *UpdateAddressRequest) (*Address, error)

	RemoveAddress(context.Context, *cm.IDRequest) (*cm.Empty, error)
}

// ==============================
// AddressService Protobuf Client
// ==============================

type addressServiceProtobufClient struct {
	client HTTPClient
	urls   [4]string
}

// NewAddressServiceProtobufClient creates a Protobuf client that implements the AddressService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewAddressServiceProtobufClient(addr string, client HTTPClient) AddressService {
	prefix := urlBase(addr) + AddressServicePathPrefix
	urls := [4]string{
		prefix + "CreateAddress",
		prefix + "GetAddresses",
		prefix + "UpdateAddress",
		prefix + "RemoveAddress",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &addressServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &addressServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *addressServiceProtobufClient) CreateAddress(ctx context.Context, in *CreateAddressRequest) (*Address, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Address")
	ctx = ctxsetters.WithMethodName(ctx, "CreateAddress")
	out := new(Address)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceProtobufClient) GetAddresses(ctx context.Context, in *cm.Empty) (*GetAddressResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Address")
	ctx = ctxsetters.WithMethodName(ctx, "GetAddresses")
	out := new(GetAddressResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceProtobufClient) UpdateAddress(ctx context.Context, in *UpdateAddressRequest) (*Address, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Address")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAddress")
	out := new(Address)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceProtobufClient) RemoveAddress(ctx context.Context, in *cm.IDRequest) (*cm.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Address")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveAddress")
	out := new(cm.Empty)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// AddressService JSON Client
// ==========================

type addressServiceJSONClient struct {
	client HTTPClient
	urls   [4]string
}

// NewAddressServiceJSONClient creates a JSON client that implements the AddressService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewAddressServiceJSONClient(addr string, client HTTPClient) AddressService {
	prefix := urlBase(addr) + AddressServicePathPrefix
	urls := [4]string{
		prefix + "CreateAddress",
		prefix + "GetAddresses",
		prefix + "UpdateAddress",
		prefix + "RemoveAddress",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &addressServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &addressServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *addressServiceJSONClient) CreateAddress(ctx context.Context, in *CreateAddressRequest) (*Address, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Address")
	ctx = ctxsetters.WithMethodName(ctx, "CreateAddress")
	out := new(Address)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceJSONClient) GetAddresses(ctx context.Context, in *cm.Empty) (*GetAddressResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Address")
	ctx = ctxsetters.WithMethodName(ctx, "GetAddresses")
	out := new(GetAddressResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceJSONClient) UpdateAddress(ctx context.Context, in *UpdateAddressRequest) (*Address, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Address")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAddress")
	out := new(Address)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceJSONClient) RemoveAddress(ctx context.Context, in *cm.IDRequest) (*cm.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Address")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveAddress")
	out := new(cm.Empty)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =============================
// AddressService Server Handler
// =============================

type addressServiceServer struct {
	AddressService
	hooks *twirp.ServerHooks
}

func NewAddressServiceServer(svc AddressService, hooks *twirp.ServerHooks) TwirpServer {
	return &addressServiceServer{
		AddressService: svc,
		hooks:          hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *addressServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// AddressServicePathPrefix is used for all URL paths on a twirp AddressService server.
// Requests are always: POST AddressServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const AddressServicePathPrefix = "/api/etop.Address/"

func (s *addressServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "etop")
	ctx = ctxsetters.WithServiceName(ctx, "Address")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/etop.Address/CreateAddress":
		s.serveCreateAddress(ctx, resp, req)
		return
	case "/api/etop.Address/GetAddresses":
		s.serveGetAddresses(ctx, resp, req)
		return
	case "/api/etop.Address/UpdateAddress":
		s.serveUpdateAddress(ctx, resp, req)
		return
	case "/api/etop.Address/RemoveAddress":
		s.serveRemoveAddress(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *addressServiceServer) serveCreateAddress(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateAddressJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateAddressProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *addressServiceServer) serveCreateAddressJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateAddress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CreateAddressRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *Address
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AddressService.CreateAddress(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Address and nil error while calling CreateAddress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *addressServiceServer) serveCreateAddressProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateAddress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CreateAddressRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *Address
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AddressService.CreateAddress(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Address and nil error while calling CreateAddress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *addressServiceServer) serveGetAddresses(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetAddressesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetAddressesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *addressServiceServer) serveGetAddressesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetAddresses")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *GetAddressResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AddressService.GetAddresses(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetAddressResponse and nil error while calling GetAddresses. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *addressServiceServer) serveGetAddressesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetAddresses")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *GetAddressResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AddressService.GetAddresses(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetAddressResponse and nil error while calling GetAddresses. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *addressServiceServer) serveUpdateAddress(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateAddressJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateAddressProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *addressServiceServer) serveUpdateAddressJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAddress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateAddressRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *Address
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AddressService.UpdateAddress(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Address and nil error while calling UpdateAddress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *addressServiceServer) serveUpdateAddressProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAddress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateAddressRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *Address
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AddressService.UpdateAddress(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Address and nil error while calling UpdateAddress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *addressServiceServer) serveRemoveAddress(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoveAddressJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveAddressProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *addressServiceServer) serveRemoveAddressJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveAddress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request json"))
		return
	}

	// Call service method
	var respContent *cm.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AddressService.RemoveAddress(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.Empty and nil error while calling RemoveAddress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *addressServiceServer) serveRemoveAddressProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveAddress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to parse request proto"))
		return
	}

	// Call service method
	var respContent *cm.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AddressService.RemoveAddress(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.Empty and nil error while calling RemoveAddress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *addressServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 6
}

func (s *addressServiceServer) ProtocGenTwirpVersion() string {
	return "v5.7.0"
}

func (s *addressServiceServer) PathPrefix() string {
	return AddressServicePathPrefix
}

// =====
// Utils
// =====

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
//
// HTTPClient implementations should not follow redirects. Redirects are
// automatically disabled if *(net/http).Client is passed to client
// constructors. See the withoutRedirects function in this file for more
// details.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// TwirpServer is the interface generated server structs will support: they're
// HTTP handlers with additional methods for accessing metadata about the
// service. Those accessors are a low-level API for building reflection tools.
// Most people can think of TwirpServers as just http.Handlers.
type TwirpServer interface {
	http.Handler
	// ServiceDescriptor returns gzipped bytes describing the .proto file that
	// this service was generated from. Once unzipped, the bytes can be
	// unmarshalled as a
	// github.com/golang/protobuf/protoc-gen-go/descriptor.FileDescriptorProto.
	//
	// The returned integer is the index of this particular service within that
	// FileDescriptorProto's 'Service' slice of ServiceDescriptorProtos. This is a
	// low-level field, expected to be used for reflection.
	ServiceDescriptor() ([]byte, int)
	// ProtocGenTwirpVersion is the semantic version string of the version of
	// twirp used to generate this file.
	ProtocGenTwirpVersion() string
	// PathPrefix returns the HTTP URL path prefix for all methods handled by this
	// service. This can be used with an HTTP mux to route twirp requests
	// alongside non-twirp requests on one HTTP listener.
	PathPrefix() string
}

// WriteError writes an HTTP response with a valid Twirp error format (code, msg, meta).
// Useful outside of the Twirp server (e.g. http middleware), but does not trigger hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func WriteError(resp http.ResponseWriter, err error) {
	writeError(context.Background(), resp, err, nil)
}

// writeError writes Twirp errors in the response and triggers hooks.
func writeError(ctx context.Context, resp http.ResponseWriter, err error, hooks *twirp.ServerHooks) {
	// Non-twirp errors are wrapped as Internal (default)
	twerr, ok := err.(twirp.Error)
	if !ok {
		twerr = twirp.InternalErrorWith(err)
	}

	statusCode := twirp.ServerHTTPStatusFromErrorCode(twerr.Code())
	ctx = ctxsetters.WithStatusCode(ctx, statusCode)
	ctx = callError(ctx, hooks, twerr)

	respBody := marshalErrorToJSON(twerr)

	resp.Header().Set("Content-Type", "application/json") // Error responses are always JSON
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBody)))
	resp.WriteHeader(statusCode) // set HTTP status code and send response

	_, writeErr := resp.Write(respBody)
	if writeErr != nil {
		// We have three options here. We could log the error, call the Error
		// hook, or just silently ignore the error.
		//
		// Logging is unacceptable because we don't have a user-controlled
		// logger; writing out to stderr without permission is too rude.
		//
		// Calling the Error hook would confuse users: it would mean the Error
		// hook got called twice for one request, which is likely to lead to
		// duplicated log messages and metrics, no matter how well we document
		// the behavior.
		//
		// Silently ignoring the error is our least-bad option. It's highly
		// likely that the connection is broken and the original 'err' says
		// so anyway.
		_ = writeErr
	}

	callResponseSent(ctx, hooks)
}

// urlBase helps ensure that addr specifies a scheme. If it is unparsable
// as a URL, it returns addr unchanged.
func urlBase(addr string) string {
	// If the addr specifies a scheme, use it. If not, default to
	// http. If url.Parse fails on it, return it unchanged.
	url, err := url.Parse(addr)
	if err != nil {
		return addr
	}
	if url.Scheme == "" {
		url.Scheme = "http"
	}
	return url.String()
}

// getCustomHTTPReqHeaders retrieves a copy of any headers that are set in
// a context through the twirp.WithHTTPRequestHeaders function.
// If there are no headers set, or if they have the wrong type, nil is returned.
func getCustomHTTPReqHeaders(ctx context.Context) http.Header {
	header, ok := twirp.HTTPRequestHeaders(ctx)
	if !ok || header == nil {
		return nil
	}
	copied := make(http.Header)
	for k, vv := range header {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}
	return copied
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequest("POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if customHeader := getCustomHTTPReqHeaders(ctx); customHeader != nil {
		req.Header = customHeader
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	req.Header.Set("Twirp-Version", "v5.7.0")
	return req, nil
}

// JSON serialization for errors
type twerrJSON struct {
	Code string            `json:"code"`
	Msg  string            `json:"msg"`
	Meta map[string]string `json:"meta,omitempty"`
}

// marshalErrorToJSON returns JSON from a twirp.Error, that can be used as HTTP error response body.
// If serialization fails, it will use a descriptive Internal error instead.
func marshalErrorToJSON(twerr twirp.Error) []byte {
	// make sure that msg is not too large
	msg := twerr.Msg()
	if len(msg) > 1e6 {
		msg = msg[:1e6]
	}

	tj := twerrJSON{
		Code: string(twerr.Code()),
		Msg:  msg,
		Meta: twerr.MetaMap(),
	}

	buf, err := json.Marshal(&tj)
	if err != nil {
		buf = []byte("{\"type\": \"" + twirp.Internal + "\", \"msg\": \"There was an error but it could not be serialized into JSON\"}") // fallback
	}

	return buf
}

// errorFromResponse builds a twirp.Error from a non-200 HTTP response.
// If the response has a valid serialized Twirp error, then it's returned.
// If not, the response status code is used to generate a similar twirp
// error. See twirpErrorFromIntermediary for more info on intermediary errors.
func errorFromResponse(resp *http.Response) twirp.Error {
	statusCode := resp.StatusCode
	statusText := http.StatusText(statusCode)

	if isHTTPRedirect(statusCode) {
		// Unexpected redirect: it must be an error from an intermediary.
		// Twirp clients don't follow redirects automatically, Twirp only handles
		// POST requests, redirects should only happen on GET and HEAD requests.
		location := resp.Header.Get("Location")
		msg := fmt.Sprintf("unexpected HTTP status code %d %q received, Location=%q", statusCode, statusText, location)
		return twirpErrorFromIntermediary(statusCode, msg, location)
	}

	respBodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return wrapInternal(err, "failed to read server error response body")
	}
	var tj twerrJSON
	if err := json.Unmarshal(respBodyBytes, &tj); err != nil {
		// Invalid JSON response; it must be an error from an intermediary.
		msg := fmt.Sprintf("Error from intermediary with HTTP status code %d %q", statusCode, statusText)
		return twirpErrorFromIntermediary(statusCode, msg, string(respBodyBytes))
	}

	errorCode := twirp.ErrorCode(tj.Code)
	if !twirp.IsValidErrorCode(errorCode) {
		msg := "invalid type returned from server error response: " + tj.Code
		return twirp.InternalError(msg)
	}

	twerr := twirp.NewError(errorCode, tj.Msg)
	for k, v := range tj.Meta {
		twerr = twerr.WithMeta(k, v)
	}
	return twerr
}

// twirpErrorFromIntermediary maps HTTP errors from non-twirp sources to twirp errors.
// The mapping is similar to gRPC: https://github.com/grpc/grpc/blob/master/doc/http-grpc-status-mapping.md.
// Returned twirp Errors have some additional metadata for inspection.
func twirpErrorFromIntermediary(status int, msg string, bodyOrLocation string) twirp.Error {
	var code twirp.ErrorCode
	if isHTTPRedirect(status) { // 3xx
		code = twirp.Internal
	} else {
		switch status {
		case 400: // Bad Request
			code = twirp.Internal
		case 401: // Unauthorized
			code = twirp.Unauthenticated
		case 403: // Forbidden
			code = twirp.PermissionDenied
		case 404: // Not Found
			code = twirp.BadRoute
		case 429, 502, 503, 504: // Too Many Requests, Bad Gateway, Service Unavailable, Gateway Timeout
			code = twirp.Unavailable
		default: // All other codes
			code = twirp.Unknown
		}
	}

	twerr := twirp.NewError(code, msg)
	twerr = twerr.WithMeta("http_error_from_intermediary", "true") // to easily know if this error was from intermediary
	twerr = twerr.WithMeta("status_code", strconv.Itoa(status))
	if isHTTPRedirect(status) {
		twerr = twerr.WithMeta("location", bodyOrLocation)
	} else {
		twerr = twerr.WithMeta("body", bodyOrLocation)
	}
	return twerr
}

func isHTTPRedirect(status int) bool {
	return status >= 300 && status <= 399
}

// wrapInternal wraps an error with a prefix as an Internal error.
// The original error cause is accessible by github.com/pkg/errors.Cause.
func wrapInternal(err error, prefix string) twirp.Error {
	return twirp.InternalErrorWith(&wrappedError{prefix: prefix, cause: err})
}

type wrappedError struct {
	prefix string
	cause  error
}

func (e *wrappedError) Cause() error  { return e.cause }
func (e *wrappedError) Error() string { return e.prefix + ": " + e.cause.Error() }

// ensurePanicResponses makes sure that rpc methods causing a panic still result in a Twirp Internal
// error response (status 500), and error hooks are properly called with the panic wrapped as an error.
// The panic is re-raised so it can be handled normally with middleware.
func ensurePanicResponses(ctx context.Context, resp http.ResponseWriter, hooks *twirp.ServerHooks) {
	if r := recover(); r != nil {
		// Wrap the panic as an error so it can be passed to error hooks.
		// The original error is accessible from error hooks, but not visible in the response.
		err := errFromPanic(r)
		twerr := &internalWithCause{msg: "Internal service panic", cause: err}
		// Actually write the error
		writeError(ctx, resp, twerr, hooks)
		// If possible, flush the error to the wire.
		f, ok := resp.(http.Flusher)
		if ok {
			f.Flush()
		}

		panic(r)
	}
}

// errFromPanic returns the typed error if the recovered panic is an error, otherwise formats as error.
func errFromPanic(p interface{}) error {
	if err, ok := p.(error); ok {
		return err
	}
	return fmt.Errorf("panic: %v", p)
}

// internalWithCause is a Twirp Internal error wrapping an original error cause, accessible
// by github.com/pkg/errors.Cause, but the original error message is not exposed on Msg().
type internalWithCause struct {
	msg   string
	cause error
}

func (e *internalWithCause) Cause() error                                { return e.cause }
func (e *internalWithCause) Error() string                               { return e.msg + ": " + e.cause.Error() }
func (e *internalWithCause) Code() twirp.ErrorCode                       { return twirp.Internal }
func (e *internalWithCause) Msg() string                                 { return e.msg }
func (e *internalWithCause) Meta(key string) string                      { return "" }
func (e *internalWithCause) MetaMap() map[string]string                  { return nil }
func (e *internalWithCause) WithMeta(key string, val string) twirp.Error { return e }

// badRouteError is used when the twirp server cannot route a request
func badRouteError(msg string, method, url string) twirp.Error {
	err := twirp.NewError(twirp.BadRoute, msg)
	err = err.WithMeta("twirp_invalid_route", method+" "+url)
	return err
}

// withoutRedirects makes sure that the POST request can not be redirected.
// The standard library will, by default, redirect requests (including POSTs) if it gets a 302 or
// 303 response, and also 301s in go1.8. It redirects by making a second request, changing the
// method to GET and removing the body. This produces very confusing error messages, so instead we
// set a redirect policy that always errors. This stops Go from executing the redirect.
//
// We have to be a little careful in case the user-provided http.Client has its own CheckRedirect
// policy - if so, we'll run through that policy first.
//
// Because this requires modifying the http.Client, we make a new copy of the client and return it.
func withoutRedirects(in *http.Client) *http.Client {
	copy := *in
	copy.CheckRedirect = func(req *http.Request, via []*http.Request) error {
		if in.CheckRedirect != nil {
			// Run the input's redirect if it exists, in case it has side effects, but ignore any error it
			// returns, since we want to use ErrUseLastResponse.
			err := in.CheckRedirect(req, via)
			_ = err // Silly, but this makes sure generated code passes errcheck -blank, which some people use.
		}
		return http.ErrUseLastResponse
	}
	return &copy
}

// doProtobufRequest makes a Protobuf request to the remote Twirp service.
func doProtobufRequest(ctx context.Context, client HTTPClient, url string, in, out proto.Message) (err error) {
	reqBodyBytes, err := proto.Marshal(in)
	if err != nil {
		return wrapInternal(err, "failed to marshal proto request")
	}
	reqBody := bytes.NewBuffer(reqBodyBytes)
	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	req, err := newRequest(ctx, url, reqBody, "application/protobuf")
	if err != nil {
		return wrapInternal(err, "could not build request")
	}
	resp, err := client.Do(req)
	if err != nil {
		return wrapInternal(err, "failed to do request")
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = wrapInternal(cerr, "failed to close response body")
		}
	}()

	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return errorFromResponse(resp)
	}

	respBodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return wrapInternal(err, "failed to read response body")
	}
	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	if err = proto.Unmarshal(respBodyBytes, out); err != nil {
		return wrapInternal(err, "failed to unmarshal proto response")
	}
	return nil
}

// doJSONRequest makes a JSON request to the remote Twirp service.
func doJSONRequest(ctx context.Context, client HTTPClient, url string, in, out proto.Message) (err error) {
	reqBody := bytes.NewBuffer(nil)
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(reqBody, in); err != nil {
		return wrapInternal(err, "failed to marshal json request")
	}
	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	req, err := newRequest(ctx, url, reqBody, "application/json")
	if err != nil {
		return wrapInternal(err, "could not build request")
	}
	resp, err := client.Do(req)
	if err != nil {
		return wrapInternal(err, "failed to do request")
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = wrapInternal(cerr, "failed to close response body")
		}
	}()

	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return errorFromResponse(resp)
	}

	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(resp.Body, out); err != nil {
		return wrapInternal(err, "failed to unmarshal json response")
	}
	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}
	return nil
}

// Call twirp.ServerHooks.RequestReceived if the hook is available
func callRequestReceived(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestReceived == nil {
		return ctx, nil
	}
	return h.RequestReceived(ctx)
}

// Call twirp.ServerHooks.RequestRouted if the hook is available
func callRequestRouted(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestRouted == nil {
		return ctx, nil
	}
	return h.RequestRouted(ctx)
}

// Call twirp.ServerHooks.ResponsePrepared if the hook is available
func callResponsePrepared(ctx context.Context, h *twirp.ServerHooks) context.Context {
	if h == nil || h.ResponsePrepared == nil {
		return ctx
	}
	return h.ResponsePrepared(ctx)
}

// Call twirp.ServerHooks.ResponseSent if the hook is available
func callResponseSent(ctx context.Context, h *twirp.ServerHooks) {
	if h == nil || h.ResponseSent == nil {
		return
	}
	h.ResponseSent(ctx)
}

// Call twirp.ServerHooks.Error if the hook is available
func callError(ctx context.Context, h *twirp.ServerHooks, err twirp.Error) context.Context {
	if h == nil || h.Error == nil {
		return ctx
	}
	return h.Error(ctx, err)
}

var twirpFileDescriptor0 = []byte{
	// 4831 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7c, 0x4d, 0x6c, 0x24, 0xc7,
	0x75, 0x30, 0x7b, 0x66, 0x38, 0x33, 0x7c, 0xc3, 0xdf, 0x22, 0x97, 0x3b, 0x3b, 0xe2, 0x72, 0x67,
	0x5b, 0x96, 0x77, 0xd7, 0xd2, 0x92, 0x5a, 0xae, 0x2c, 0xe8, 0x93, 0xfd, 0x19, 0x26, 0x97, 0xa2,
	0x34, 0xf1, 0xee, 0x8a, 0x9e, 0xe1, 0x4a, 0x70, 0x8c, 0x64, 0xd0, 0x9c, 0x2e, 0x0e, 0xdb, 0xec,
	0xe9, 0x6e, 0x57, 0xd7, 0x90, 0x3b, 0xba, 0x1a, 0x08, 0x82, 0xc0, 0x49, 0x8c, 0x04, 0x08, 0x72,
	0xca, 0x41, 0x87, 0xc0, 0x37, 0x1f, 0x72, 0x48, 0x0e, 0x49, 0x9c, 0xa3, 0x80, 0x5c, 0x74, 0xf0,
	0xd9, 0x90, 0xd6, 0x40, 0x10, 0x20, 0x08, 0x6c, 0xe4, 0x9a, 0x4b, 0x50, 0x7f, 0xdd, 0xd5, 0x3f,
	0x33, 0x24, 0x57, 0x92, 0xf3, 0x03, 0x5d, 0x96, 0xdd, 0xef, 0xaf, 0x5f, 0xbd, 0xaa, 0xf7, 0xea,
	0x55, 0xbd, 0x37, 0x0b, 0x0b, 0x98, 0xfa, 0xc1, 0x26, 0xfb, 0x67, 0x23, 0x20, 0x3e, 0xf5, 0x51,
	0x89, 0x3d, 0x37, 0x5e, 0xe1, 0x2f, 0xbd, 0xbb, 0x7d, 0xec, 0xdd, 0x0d, 0xcf, 0xac, 0x7e, 0x1f,
	0x93, 0x4d, 0x3f, 0xa0, 0x8e, 0xef, 0x85, 0x9b, 0x96, 0xe7, 0xf9, 0xd4, 0xe2, 0xcf, 0x82, 0xa7,
	0xb1, 0xd2, 0xf7, 0xfb, 0x3e, 0x7f, 0xdc, 0x64, 0x4f, 0x12, 0x7a, 0xa3, 0xef, 0xfb, 0x7d, 0x17,
	0x6f, 0xf2, 0xb7, 0xc3, 0xe1, 0xd1, 0x26, 0x75, 0x06, 0x38, 0xa4, 0xd6, 0x40, 0x7e, 0xaa, 0xb1,
	0xdc, 0xf3, 0x07, 0x03, 0xdf, 0xdb, 0x14, 0x7f, 0x24, 0xb0, 0x21, 0x15, 0xea, 0x6d, 0x52, 0x32,
	0xea, 0x72, 0xac, 0x8d, 0x25, 0xee, 0x7a, 0x84, 0x0b, 0xa9, 0x45, 0x87, 0xe1, 0x7d, 0xf9, 0x57,
	0xa2, 0x9b, 0x11, 0xda, 0xb2, 0x6d, 0x82, 0xc3, 0xb0, 0x4b, 0x47, 0x01, 0xde, 0x64, 0xff, 0x48,
	0x8a, 0x3b, 0xb1, 0x80, 0x63, 0x27, 0x08, 0x1c, 0xaf, 0xdf, 0x0d, 0x88, 0x7f, 0xea, 0xd8, 0x98,
	0x6c, 0xaa, 0x07, 0x41, 0x6a, 0xfe, 0xa2, 0x04, 0xa5, 0x27, 0x21, 0x26, 0x68, 0x05, 0x0a, 0x8e,
	0x5d, 0x37, 0x9a, 0xc6, 0xed, 0xe2, 0x4e, 0xe9, 0xa3, 0x5f, 0xde, 0x98, 0x6a, 0x17, 0x1c, 0x1b,
	0xdd, 0x84, 0x99, 0xa3, 0xa1, 0xeb, 0x76, 0x3d, 0x6b, 0x80, 0xeb, 0x85, 0xa6, 0x71, 0x7b, 0x46,
	0x22, 0xab, 0x0c, 0xfc, 0xd8, 0x1a, 0x60, 0xf4, 0x22, 0x40, 0x78, 0xec, 0x13, 0x2a, 0x68, 0x8a,
	0x1a, 0xcd, 0x0c, 0x87, 0x73, 0xa2, 0x06, 0x4c, 0x07, 0xc7, 0xbe, 0x87, 0xeb, 0x25, 0x0d, 0x2f,
	0x40, 0x0c, 0x87, 0x07, 0x96, 0xe3, 0xd6, 0xa7, 0x75, 0x1c, 0x07, 0xa1, 0xff, 0x07, 0xd0, 0x23,
	0xd8, 0xa2, 0xd8, 0xee, 0x5a, 0xb4, 0x5e, 0x6e, 0x1a, 0xb7, 0x6b, 0x5b, 0x8d, 0x0d, 0x61, 0xf1,
	0x0d, 0x65, 0xf1, 0x8d, 0x03, 0x65, 0xf1, 0xf6, 0x8c, 0xa4, 0xde, 0xa6, 0x8c, 0x75, 0x18, 0xd8,
	0x8a, 0xb5, 0x72, 0x3e, 0xab, 0xa4, 0xde, 0xa6, 0x68, 0x0f, 0x96, 0xf8, 0xe7, 0xbb, 0xa7, 0x98,
	0x38, 0x47, 0x8e, 0x90, 0x50, 0x3d, 0x57, 0xc2, 0x02, 0x67, 0x7a, 0x4f, 0xf2, 0x08, 0x39, 0x7c,
	0x88, 0x09, 0x39, 0x33, 0xe7, 0xcb, 0xe1, 0x4c, 0x9a, 0x9c, 0xf7, 0xa1, 0xa1, 0xeb, 0xd3, 0xe3,
	0xab, 0xb2, 0x1b, 0x62, 0x8f, 0x32, 0x81, 0x70, 0xae, 0xc0, 0xab, 0x9a, 0x62, 0x82, 0xb9, 0x83,
	0x3d, 0x2a, 0x04, 0xeb, 0x0a, 0xa6, 0x04, 0xd7, 0xce, 0x17, 0xac, 0x69, 0xaa, 0x0b, 0x36, 0xdf,
	0x01, 0x68, 0xed, 0x86, 0x6d, 0xfc, 0xc3, 0x21, 0x0e, 0x29, 0x5a, 0x84, 0xa2, 0x63, 0x87, 0x75,
	0xa3, 0x59, 0xbc, 0x5d, 0x6c, 0xb3, 0x47, 0x74, 0x1b, 0xa6, 0x07, 0xce, 0x53, 0x6c, 0xf3, 0x35,
	0x55, 0xdb, 0x42, 0x1b, 0xdc, 0x35, 0x1f, 0x31, 0xd0, 0x76, 0xaf, 0xe7, 0x0f, 0x3d, 0xda, 0x16,
	0x04, 0xe6, 0x1f, 0x18, 0x30, 0xab, 0xc3, 0x73, 0x84, 0xad, 0x42, 0xd1, 0x72, 0x5d, 0x2e, 0xaa,
	0x2a, 0x97, 0x0f, 0x03, 0xb0, 0xc5, 0x6b, 0xb9, 0x6e, 0x37, 0x3c, 0xf6, 0x83, 0x90, 0x2f, 0x4c,
	0x85, 0xad, 0x5a, 0xae, 0xdb, 0x61, 0x50, 0x74, 0x07, 0xe6, 0x38, 0xc9, 0x30, 0x08, 0x5c, 0x07,
	0x93, 0x90, 0xaf, 0x4f, 0x45, 0x36, 0xcb, 0xc8, 0x14, 0xc6, 0xfc, 0x59, 0x11, 0x2a, 0xfb, 0x16,
	0xa1, 0xde, 0x58, 0x67, 0xa9, 0x43, 0x29, 0xe3, 0x27, 0x1c, 0x82, 0x5e, 0x82, 0x5a, 0x30, 0x3c,
	0x74, 0x9d, 0x9e, 0x70, 0x92, 0xba, 0x46, 0x00, 0x02, 0xc1, 0xbd, 0xe4, 0x2e, 0x94, 0x85, 0xa7,
	0x73, 0x6d, 0xe7, 0xb7, 0x16, 0x36, 0x64, 0x00, 0xd8, 0xe8, 0xf0, 0xbf, 0x92, 0x45, 0x12, 0xa1,
	0xeb, 0x50, 0x71, 0xc2, 0x2e, 0xc5, 0x21, 0x4d, 0xa8, 0x5d, 0x76, 0xc2, 0x03, 0x66, 0xf5, 0x6f,
	0xc2, 0x42, 0xcf, 0xf7, 0xa8, 0xd5, 0xa3, 0xdd, 0x00, 0x93, 0xd0, 0xf7, 0xc2, 0x7a, 0xb5, 0x59,
	0xbc, 0x5d, 0xdb, 0x5a, 0x16, 0xd6, 0x7e, 0x20, 0x90, 0xfb, 0x1c, 0xd7, 0x9e, 0xef, 0xe9, 0xaf,
	0x61, 0xec, 0xb1, 0x33, 0x59, 0x8f, 0x7d, 0x09, 0x6a, 0x67, 0xf8, 0x30, 0x74, 0x28, 0xee, 0x0e,
	0x89, 0x5b, 0x9f, 0xd7, 0x87, 0x23, 0x11, 0x4f, 0x08, 0xb7, 0xbf, 0x33, 0xb0, 0xfa, 0x82, 0x68,
	0x41, 0x0f, 0x1e, 0x1c, 0xcc, 0x48, 0x22, 0xdf, 0x5f, 0xcc, 0xfa, 0xfe, 0x0d, 0xa8, 0xfa, 0x67,
	0x1e, 0x26, 0x5d, 0xc7, 0xae, 0xaf, 0x6a, 0xa6, 0xae, 0x70, 0x68, 0xcb, 0x46, 0xeb, 0x50, 0x1a,
	0x86, 0x98, 0xd4, 0xaf, 0xf2, 0x35, 0x04, 0x62, 0x54, 0x2c, 0x98, 0xb5, 0x39, 0xdc, 0xfc, 0x1b,
	0x03, 0x96, 0xf6, 0xb9, 0x75, 0xe5, 0xda, 0x69, 0x79, 0x47, 0xfe, 0xa5, 0xe7, 0xee, 0x65, 0x28,
	0xb1, 0xd0, 0x2a, 0xa7, 0x64, 0x49, 0x7c, 0x45, 0x0a, 0x3c, 0x18, 0x05, 0x58, 0x11, 0x33, 0xa2,
	0xe4, 0x90, 0x4b, 0xb9, 0x43, 0x5e, 0x87, 0x8a, 0xb4, 0x51, 0x22, 0xe0, 0x29, 0xa0, 0xf9, 0x2f,
	0x06, 0xbc, 0x20, 0xb5, 0x1e, 0xd2, 0x63, 0x9f, 0x38, 0x1f, 0x60, 0x5b, 0xae, 0xbb, 0xff, 0x0d,
	0xfa, 0xa3, 0x5b, 0x30, 0x4b, 0xb0, 0xed, 0x10, 0xdc, 0xa3, 0x5c, 0x4a, 0x59, 0x23, 0xaa, 0x29,
	0xcc, 0x13, 0xe2, 0x9a, 0x8f, 0x60, 0x35, 0x31, 0x3b, 0x61, 0x1b, 0x87, 0x81, 0xef, 0x85, 0x18,
	0xdd, 0x87, 0xaa, 0x25, 0x61, 0xdc, 0xcf, 0x6b, 0x5b, 0x57, 0x85, 0xda, 0x99, 0xd9, 0x6c, 0x47,
	0x84, 0xe6, 0x5f, 0x57, 0xa1, 0xc4, 0x9c, 0x1a, 0xdd, 0x82, 0x05, 0xfc, 0x34, 0xf0, 0x09, 0x8b,
	0xfc, 0x47, 0x0e, 0x76, 0xed, 0xb0, 0x6e, 0x37, 0x8b, 0xb7, 0x67, 0xda, 0xf3, 0x0a, 0xbc, 0xc7,
	0xa1, 0x97, 0xb6, 0xe4, 0xe7, 0xeb, 0x9e, 0xb7, 0xa0, 0x22, 0xf7, 0x6f, 0x6e, 0xc7, 0xda, 0xd6,
	0x9c, 0x9c, 0x1a, 0x01, 0x6c, 0x2b, 0xec, 0x44, 0x4f, 0x7c, 0x0d, 0x66, 0x0f, 0x2d, 0xef, 0xa4,
	0x2b, 0xad, 0x20, 0xf7, 0x02, 0x39, 0xc9, 0x3b, 0x96, 0x77, 0xa2, 0xa2, 0x69, 0xed, 0x30, 0x7e,
	0x41, 0xaf, 0xc0, 0x82, 0x35, 0xa4, 0x7e, 0x57, 0x6c, 0x96, 0xdd, 0xa3, 0xa3, 0x41, 0x7d, 0x45,
	0xd3, 0x70, 0x8e, 0x21, 0x1f, 0x70, 0xdc, 0xde, 0xd1, 0xe0, 0xb7, 0xe4, 0xed, 0xaf, 0xc2, 0x52,
	0x40, 0x7c, 0x7b, 0xd8, 0xa3, 0xdd, 0xd0, 0x1f, 0x92, 0x1e, 0x66, 0x6e, 0xbf, 0xa4, 0xcd, 0xcd,
	0x82, 0x44, 0x77, 0x38, 0xb6, 0x65, 0xa3, 0x7b, 0x80, 0x58, 0x7a, 0xd3, 0xa5, 0x7e, 0x57, 0x25,
	0x42, 0x8e, 0x5d, 0x47, 0x3a, 0x0b, 0xc3, 0x1f, 0xf8, 0xd2, 0xa2, 0x2d, 0x1b, 0x7d, 0x1d, 0x56,
	0x38, 0xcb, 0x11, 0xf1, 0x07, 0x3a, 0xd3, 0xb2, 0xc6, 0xb4, 0xc4, 0x28, 0xf6, 0x88, 0x3f, 0x88,
	0xd9, 0x6e, 0xc3, 0x5c, 0xff, 0xd8, 0xeb, 0x7a, 0x3e, 0xc5, 0x5d, 0x96, 0xa7, 0xd5, 0xaf, 0xe8,
	0x6b, 0xba, 0x7f, 0xec, 0x3d, 0xf6, 0x29, 0x7e, 0xe0, 0xdb, 0x18, 0x6d, 0x40, 0x59, 0xe4, 0x73,
	0x3c, 0xc6, 0x33, 0x77, 0x13, 0xaf, 0x1b, 0x07, 0x64, 0xf4, 0xae, 0xc7, 0x48, 0xd4, 0xa8, 0x29,
	0x03, 0x7c, 0xe6, 0x18, 0xc7, 0x16, 0x40, 0xcf, 0x1f, 0x04, 0x96, 0x37, 0xea, 0x3a, 0xde, 0x91,
	0x5f, 0xbf, 0xa6, 0x2f, 0x80, 0x07, 0x02, 0xc3, 0x1d, 0xa5, 0xd6, 0x8b, 0x5f, 0xd0, 0x37, 0xe1,
	0xea, 0xc0, 0xf7, 0xf0, 0xa8, 0x4b, 0x89, 0xe5, 0x85, 0x56, 0x8f, 0x6f, 0xfb, 0x84, 0x0c, 0x5d,
	0x5c, 0x6f, 0x68, 0x43, 0xbb, 0xc2, 0x89, 0x0e, 0x62, 0x9a, 0x36, 0x23, 0x41, 0xf7, 0xa0, 0x16,
	0x0e, 0xc9, 0x29, 0x96, 0x9f, 0x7c, 0x81, 0x7b, 0xe8, 0xa2, 0xf8, 0x64, 0x87, 0x23, 0xf8, 0x17,
	0x21, 0x8c, 0x9e, 0x51, 0x00, 0xcd, 0x28, 0x15, 0x0d, 0x31, 0x39, 0x75, 0x7a, 0xb8, 0x1b, 0x62,
	0x97, 0xc5, 0x88, 0x90, 0x12, 0x8b, 0xe2, 0xfe, 0xa8, 0xbe, 0xc6, 0xe5, 0xdc, 0x92, 0x72, 0x24,
	0x75, 0x47, 0x10, 0x77, 0x38, 0x6d, 0x47, 0x92, 0xb6, 0x28, 0x1e, 0xb4, 0xaf, 0x87, 0x93, 0x48,
	0x98, 0x1b, 0xf3, 0xa9, 0xba, 0xae, 0xbb, 0x31, 0x83, 0x98, 0xef, 0xc3, 0xcd, 0x73, 0xa5, 0xb3,
	0x9c, 0xe2, 0x04, 0x8f, 0x78, 0x70, 0x50, 0xdc, 0x0c, 0xc0, 0x96, 0xf0, 0xa9, 0xe5, 0x0e, 0x93,
	0xe1, 0x41, 0x80, 0x4c, 0x1b, 0x20, 0x1e, 0xfe, 0x58, 0x09, 0x4d, 0xa8, 0xf2, 0xac, 0xc8, 0xf1,
	0xbd, 0x64, 0x46, 0xad, 0xa0, 0x68, 0x0d, 0xca, 0x96, 0x17, 0x9e, 0x61, 0x92, 0xc8, 0xa6, 0x25,
	0xcc, 0xfc, 0x59, 0x01, 0x96, 0x84, 0x73, 0xf2, 0x65, 0x20, 0x53, 0xac, 0x44, 0xa2, 0x6e, 0x5c,
	0x20, 0x51, 0x2f, 0x9c, 0x93, 0xa8, 0x17, 0x27, 0x24, 0xea, 0xa5, 0xac, 0xfb, 0x36, 0xa1, 0x1a,
	0x58, 0x61, 0x78, 0xe6, 0x13, 0x3b, 0xb1, 0x2d, 0x44, 0x50, 0x9e, 0x8d, 0xf5, 0x09, 0xc6, 0x5d,
	0xea, 0x87, 0x7c, 0x53, 0x88, 0xb3, 0x31, 0x06, 0x3e, 0xf0, 0x59, 0x56, 0xb8, 0x28, 0x48, 0x44,
	0xb6, 0xcb, 0x57, 0x17, 0x4b, 0xdc, 0xab, 0xed, 0x79, 0x0e, 0x7f, 0x8b, 0x81, 0xb9, 0x71, 0x5f,
	0x86, 0x79, 0x82, 0xfb, 0x4e, 0x48, 0x31, 0xe9, 0x52, 0xff, 0x04, 0x7b, 0x3c, 0x3d, 0x57, 0x1f,
	0x9d, 0x53, 0xb8, 0x03, 0x86, 0x32, 0xb7, 0x60, 0xb1, 0x2d, 0x01, 0xd1, 0x16, 0xa3, 0xfc, 0xca,
	0x18, 0x93, 0x3b, 0x3c, 0x86, 0x95, 0x36, 0x0e, 0x31, 0xdd, 0x97, 0xea, 0x2b, 0x3b, 0x47, 0xf6,
	0x31, 0x26, 0xd8, 0xa7, 0x90, 0xb1, 0x8f, 0xf9, 0xa1, 0x01, 0x57, 0x1e, 0x1c, 0x5b, 0x5e, 0x1f,
	0xa7, 0x25, 0x6e, 0xc2, 0x62, 0x6f, 0x48, 0x08, 0xcb, 0xb9, 0x23, 0x0b, 0xea, 0x02, 0x16, 0x24,
	0x56, 0xf1, 0xb1, 0x0d, 0xd6, 0xc3, 0x67, 0x31, 0xb1, 0x3e, 0x53, 0x35, 0x0f, 0x9f, 0x45, 0x84,
	0x4c, 0xb2, 0xef, 0x1d, 0x39, 0x64, 0x10, 0x13, 0x97, 0x12, 0x92, 0x05, 0x56, 0x31, 0x98, 0xff,
	0x66, 0xc0, 0x8d, 0xa4, 0x92, 0x4f, 0x42, 0xc7, 0xeb, 0x73, 0x2b, 0x6a, 0x06, 0x10, 0x83, 0x34,
	0xb2, 0x8b, 0x20, 0x32, 0x4e, 0x21, 0x6b, 0x9c, 0xd7, 0x61, 0x85, 0x30, 0x83, 0x46, 0xaa, 0xc8,
	0x79, 0xd3, 0xb5, 0x47, 0x44, 0x37, 0x39, 0xff, 0x6c, 0x66, 0xb4, 0xa5, 0xcb, 0x8c, 0x76, 0x7a,
	0xd2, 0x68, 0x77, 0x01, 0xf6, 0x31, 0x19, 0x38, 0x61, 0xc8, 0x9c, 0x6e, 0x05, 0xa6, 0x89, 0xef,
	0xe2, 0xb0, 0x5e, 0xe0, 0xb9, 0x82, 0x78, 0x41, 0x4d, 0xa8, 0x05, 0x11, 0x0d, 0xdb, 0xf7, 0x19,
	0x4e, 0x07, 0x99, 0xbf, 0x30, 0x60, 0xf6, 0xa1, 0xdf, 0x77, 0x74, 0x03, 0xb9, 0xec, 0x3d, 0x69,
	0x20, 0x0e, 0x4a, 0x78, 0x49, 0x21, 0xd7, 0x4b, 0x5e, 0x04, 0x90, 0x7b, 0x39, 0xdb, 0x12, 0x8a,
	0xda, 0x96, 0x30, 0x23, 0xe1, 0x2d, 0x1b, 0xbd, 0x09, 0xb3, 0x8a, 0x88, 0xa7, 0x76, 0xa5, 0xc9,
	0xa9, 0x5d, 0xcd, 0x8a, 0x41, 0x6c, 0x37, 0x57, 0xbc, 0x2c, 0x3c, 0xe9, 0x16, 0x52, 0x5f, 0xfe,
	0x0e, 0x1e, 0x99, 0x9f, 0x14, 0xe4, 0xb0, 0x54, 0xce, 0xf0, 0x85, 0x65, 0x55, 0x97, 0xca, 0x4f,
	0x6f, 0xf1, 0x91, 0xf3, 0x3b, 0x0f, 0xbe, 0x7a, 0x74, 0xf5, 0x6b, 0x02, 0x23, 0x96, 0xcd, 0x8b,
	0x00, 0xf8, 0x69, 0xe0, 0x10, 0x1c, 0x76, 0x1d, 0x8f, 0x87, 0x9b, 0x69, 0x65, 0x47, 0x09, 0x6f,
	0x79, 0xc9, 0x94, 0xa5, 0x92, 0x9b, 0xb2, 0xdc, 0x80, 0xea, 0x90, 0xb8, 0xdd, 0xd0, 0x1d, 0xf6,
	0x13, 0x21, 0xa6, 0x32, 0x24, 0x6e, 0xc7, 0x1d, 0xf6, 0xd1, 0x1b, 0x30, 0xcb, 0x02, 0x46, 0x94,
	0x81, 0x89, 0xe3, 0xfd, 0x95, 0x38, 0xa0, 0xe8, 0xd9, 0x6a, 0x6d, 0x18, 0x03, 0xcc, 0xbf, 0x2f,
	0xc2, 0x9c, 0x5c, 0x39, 0x32, 0x28, 0xa5, 0x47, 0x67, 0x5c, 0x6c, 0x74, 0x85, 0xfc, 0xd1, 0xa9,
	0x10, 0x57, 0x1c, 0x93, 0x3a, 0xbc, 0x02, 0x15, 0xa5, 0x74, 0x49, 0x3f, 0x85, 0xeb, 0xd3, 0xde,
	0x56, 0x24, 0x4c, 0x1a, 0x3b, 0x48, 0xcb, 0x5c, 0x15, 0xd4, 0x2e, 0xed, 0x07, 0x6d, 0x0e, 0x47,
	0xdb, 0x80, 0xac, 0x53, 0xcb, 0x71, 0xad, 0x43, 0x17, 0x77, 0xa3, 0xec, 0xbd, 0xc2, 0xf7, 0xf4,
	0x3c, 0xc1, 0x4b, 0x11, 0xb5, 0x4a, 0xff, 0xd1, 0x1e, 0x2c, 0x3b, 0xde, 0xa9, 0x23, 0x2e, 0xdd,
	0x62, 0x19, 0xe2, 0xd0, 0x3a, 0xc6, 0xa2, 0x28, 0xe6, 0x88, 0xe4, 0xac, 0xb1, 0x3c, 0x9d, 0x1b,
	0x70, 0x46, 0xcf, 0xbb, 0x05, 0x0c, 0xed, 0xc1, 0x92, 0x78, 0xea, 0x2a, 0x13, 0x5e, 0xe8, 0x0e,
	0x65, 0x41, 0x30, 0xbd, 0x25, 0x78, 0xb6, 0xa9, 0xe9, 0xc1, 0x4a, 0xe7, 0xcc, 0xa1, 0xbd, 0x63,
	0x35, 0x22, 0xe9, 0xff, 0x49, 0x0f, 0x36, 0xf2, 0x3d, 0xf8, 0x1e, 0x2c, 0x11, 0xdc, 0xc7, 0x1e,
	0x66, 0x29, 0x87, 0x98, 0xed, 0x30, 0x71, 0x81, 0xb1, 0x18, 0xa3, 0xf9, 0x94, 0x87, 0xe6, 0xf7,
	0xe1, 0xda, 0x93, 0xa0, 0x4f, 0x2c, 0x9b, 0x19, 0x4c, 0xad, 0x04, 0xf5, 0xd1, 0x78, 0xc8, 0xfa,
	0x9a, 0x51, 0x43, 0x3e, 0x37, 0xec, 0x98, 0x7f, 0x5b, 0x80, 0xe5, 0x84, 0xd8, 0xff, 0x03, 0x2b,
	0x32, 0xb6, 0x49, 0xf5, 0xa2, 0xcb, 0x60, 0xe6, 0xf2, 0xcb, 0xe0, 0x7b, 0xb0, 0xda, 0xc1, 0x9e,
	0xdd, 0xe1, 0x66, 0xe0, 0x09, 0xca, 0x45, 0x76, 0xca, 0xe4, 0x22, 0x29, 0xe4, 0x2e, 0x12, 0xf3,
	0x4d, 0x58, 0x63, 0xa2, 0xdf, 0x4a, 0x5f, 0xde, 0x5d, 0xe0, 0x03, 0x8a, 0x77, 0x3f, 0x7d, 0x3f,
	0x77, 0x81, 0x3c, 0xc6, 0xec, 0xc0, 0x1a, 0x67, 0x19, 0xf1, 0x2f, 0x67, 0x53, 0x80, 0xfb, 0x80,
	0x12, 0xf7, 0x85, 0xd9, 0xa5, 0xb1, 0xa4, 0xe3, 0x45, 0x12, 0x16, 0x09, 0xe5, 0x2a, 0x7d, 0x4e,
	0x42, 0x7f, 0x6a, 0x40, 0xa3, 0xc5, 0x02, 0x00, 0xcf, 0x85, 0x0f, 0xfc, 0xe7, 0x71, 0xc5, 0xfb,
	0x20, 0x62, 0x08, 0x66, 0x27, 0x4e, 0xec, 0x51, 0xe7, 0xc8, 0xc1, 0x24, 0xe1, 0x26, 0x4b, 0x12,
	0xdf, 0x8a, 0xd0, 0xe8, 0x55, 0x80, 0x38, 0x09, 0x90, 0x8b, 0x55, 0x9e, 0x80, 0xe2, 0x9c, 0xa2,
	0xad, 0xd1, 0x98, 0x27, 0x70, 0x75, 0x9b, 0x27, 0xf0, 0xad, 0x28, 0x60, 0x5d, 0x4a, 0xcd, 0x97,
	0xa1, 0x4a, 0xa4, 0x57, 0x72, 0xe5, 0xb2, 0xd7, 0x0f, 0xed, 0x88, 0xc0, 0xfc, 0x0b, 0x03, 0x9a,
	0x6f, 0x63, 0xca, 0x8c, 0x12, 0xb6, 0xbc, 0x07, 0x22, 0x81, 0x8c, 0xaf, 0x59, 0xc4, 0x67, 0x4d,
	0x28, 0x07, 0x56, 0xdf, 0xf1, 0xfa, 0x51, 0x12, 0xdc, 0x1b, 0x6c, 0xec, 0x73, 0x48, 0x5b, 0x62,
	0xd0, 0x57, 0xa0, 0x72, 0xe4, 0xb8, 0x14, 0x13, 0x91, 0x17, 0x49, 0xa2, 0x3d, 0x0e, 0x6a, 0x2b,
	0x54, 0x7c, 0x9b, 0x5b, 0x3c, 0xef, 0x36, 0xd7, 0x83, 0x79, 0x71, 0x87, 0xc3, 0x54, 0x9b, 0x70,
	0x9d, 0xf5, 0x39, 0xd5, 0x1d, 0xcc, 0x3f, 0xaa, 0xc0, 0x42, 0x6a, 0xcb, 0x40, 0xd7, 0xa1, 0xc2,
	0x77, 0xec, 0xd4, 0x67, 0xcb, 0x0c, 0xd8, 0xb2, 0xd1, 0xd7, 0x60, 0x9e, 0xa3, 0xf3, 0xbf, 0xcf,
	0x37, 0xfb, 0x3d, 0xa5, 0xc3, 0x2b, 0xb0, 0xc0, 0x69, 0xc7, 0x28, 0x32, 0xc7, 0x90, 0x9d, 0xe8,
	0x6c, 0x95, 0x9c, 0xe7, 0x52, 0xfe, 0x3c, 0xdf, 0x8a, 0x73, 0x3b, 0x2e, 0x2f, 0x9d, 0xe1, 0x30,
	0x0c, 0x97, 0x96, 0x4e, 0x02, 0xcb, 0x97, 0x48, 0x02, 0xd9, 0x86, 0xe0, 0x87, 0x0e, 0x3f, 0x83,
	0x26, 0xf2, 0x1e, 0x05, 0x4d, 0x2d, 0xf0, 0xea, 0xf9, 0x0b, 0x5c, 0xbb, 0x1d, 0x9b, 0xb9, 0xc8,
	0xed, 0xd8, 0xb7, 0x60, 0x41, 0x2d, 0xd7, 0xae, 0xe4, 0x83, 0x49, 0x7c, 0xf3, 0x8a, 0x5a, 0x40,
	0xd1, 0x16, 0x68, 0x5b, 0xbf, 0x28, 0x59, 0x1c, 0x8e, 0x78, 0xc9, 0x42, 0x19, 0x75, 0x31, 0xc6,
	0x77, 0xb0, 0x47, 0x77, 0x46, 0xe8, 0x9d, 0x2c, 0x8f, 0x45, 0xeb, 0xb3, 0xe7, 0x06, 0xfd, 0x94,
	0xa4, 0x6d, 0x8a, 0xf6, 0x61, 0x35, 0x99, 0xaa, 0xe0, 0x40, 0x16, 0x9a, 0xe6, 0xce, 0x95, 0xb6,
	0x92, 0x48, 0x59, 0x38, 0x63, 0x46, 0x22, 0xc1, 0x3f, 0xc0, 0x3d, 0x29, 0x71, 0xfe, 0x32, 0x12,
	0xdb, 0x92, 0x71, 0x9b, 0xa2, 0x6f, 0x40, 0xcd, 0x76, 0x42, 0x96, 0x61, 0x71, 0x31, 0x0b, 0xe7,
	0x8a, 0x01, 0x45, 0xbe, 0x4d, 0xd9, 0x31, 0x21, 0x62, 0x3e, 0x1c, 0xf1, 0x0b, 0x3b, 0x65, 0xd7,
	0x88, 0x6c, 0x67, 0xc4, 0xce, 0xe1, 0xf2, 0xad, 0x4b, 0xb0, 0x15, 0xfa, 0x1e, 0xbf, 0xb2, 0x8b,
	0xd6, 0xbf, 0xc4, 0xb5, 0x39, 0xca, 0x3c, 0x81, 0xd5, 0x7d, 0xe2, 0x53, 0xae, 0x1f, 0x0f, 0x4d,
	0x51, 0x9a, 0xf1, 0x95, 0x54, 0x28, 0x9a, 0x95, 0xa1, 0x08, 0xf3, 0x1c, 0x4f, 0x05, 0xa3, 0x97,
	0x61, 0x9a, 0x39, 0x94, 0x0a, 0x45, 0x63, 0x32, 0x42, 0x41, 0x63, 0x5e, 0x81, 0xe5, 0x87, 0xd8,
	0x3a, 0xc5, 0xc9, 0x2d, 0xc1, 0x7c, 0x09, 0x5e, 0x6c, 0xe3, 0x81, 0x7f, 0xca, 0x37, 0x8c, 0x3d,
	0xe2, 0x0f, 0x92, 0xc1, 0x51, 0x91, 0xed, 0x02, 0x7a, 0x60, 0x51, 0xdc, 0xf7, 0x89, 0x83, 0x63,
	0x35, 0x37, 0x00, 0x7a, 0x11, 0x54, 0xde, 0x4c, 0xcf, 0xcb, 0xab, 0x36, 0x01, 0x1f, 0xb5, 0x35,
	0x0a, 0xf3, 0xc7, 0x06, 0x54, 0x15, 0xe2, 0x8b, 0xbe, 0x6d, 0xbe, 0x09, 0x33, 0x81, 0xc5, 0x6f,
	0x11, 0x52, 0xb1, 0xa5, 0x2a, 0xc0, 0x2d, 0xdb, 0xfc, 0x91, 0x01, 0xd5, 0x7d, 0xe2, 0x9f, 0x3a,
	0x5e, 0x0f, 0x47, 0xf7, 0x63, 0x46, 0xfa, 0x7e, 0x6c, 0x82, 0x4a, 0x6b, 0x50, 0x26, 0xb8, 0xcf,
	0x02, 0x42, 0xe2, 0x62, 0x4a, 0xc0, 0xd8, 0x92, 0x11, 0x4f, 0xe2, 0x8e, 0x54, 0xd7, 0x01, 0x04,
	0xe2, 0x81, 0x6f, 0x63, 0x73, 0x17, 0x56, 0xde, 0xc6, 0x54, 0xe9, 0x11, 0x1b, 0xf7, 0x15, 0x98,
	0x09, 0x14, 0x30, 0x69, 0x5b, 0x45, 0xdb, 0x8e, 0x09, 0xcc, 0x9f, 0x18, 0x50, 0xdd, 0x75, 0x42,
	0x4a, 0x9c, 0x1e, 0x9d, 0x30, 0x96, 0x3b, 0x30, 0xa7, 0x78, 0x84, 0x56, 0x89, 0x58, 0xae, 0x50,
	0x0f, 0xf4, 0x61, 0x17, 0xf3, 0xaa, 0x77, 0x4e, 0xd8, 0x3d, 0x22, 0x18, 0x87, 0xc7, 0x4e, 0x90,
	0xb8, 0xcc, 0x07, 0x27, 0xdc, 0x93, 0x70, 0x39, 0x30, 0xa5, 0x54, 0x62, 0x60, 0xb6, 0x02, 0x26,
	0x07, 0xa6, 0x68, 0xdb, 0x31, 0x81, 0x39, 0x84, 0xeb, 0xba, 0x94, 0x9d, 0x51, 0x34, 0x7a, 0xb9,
	0x6d, 0x67, 0x86, 0x64, 0x8c, 0x1d, 0x92, 0x4e, 0x9a, 0xdd, 0xc9, 0x14, 0x8a, 0x6f, 0x94, 0x18,
	0x4a, 0xef, 0x5b, 0xc4, 0x9e, 0x6c, 0x4a, 0xa5, 0x65, 0x8e, 0x29, 0x15, 0x6a, 0xb2, 0x29, 0xcd,
	0xd7, 0x60, 0xf1, 0x6d, 0x4c, 0xd9, 0x97, 0x62, 0xfb, 0x34, 0x61, 0xfa, 0x8c, 0x01, 0xa4, 0x6d,
	0x64, 0x22, 0xcf, 0x68, 0xda, 0x02, 0x61, 0xfe, 0x10, 0xae, 0x29, 0xae, 0x9d, 0x51, 0x64, 0xb4,
	0xd8, 0x1e, 0x49, 0xbd, 0x8c, 0xb1, 0x7a, 0xe9, 0xa4, 0x59, 0x7b, 0x28, 0x14, 0xb7, 0xc7, 0x9f,
	0x1a, 0xb0, 0xb2, 0x6f, 0x91, 0x10, 0x3f, 0xf4, 0x93, 0x89, 0x73, 0xc6, 0xa6, 0xc6, 0x38, 0x9b,
	0x5e, 0xe2, 0x73, 0xcc, 0x7b, 0xd9, 0x50, 0xb3, 0x29, 0x44, 0x95, 0x81, 0x95, 0x46, 0x57, 0x52,
	0x1a, 0x49, 0x03, 0x7e, 0x0d, 0xaa, 0xea, 0xbb, 0x32, 0x7e, 0xa6, 0x1d, 0x27, 0xc2, 0x33, 0x5a,
	0xf5, 0x61, 0x59, 0x7b, 0x4f, 0xaf, 0xc5, 0x08, 0xcf, 0x0e, 0x58, 0xec, 0xeb, 0xc9, 0xe3, 0x1a,
	0x9f, 0x17, 0x0e, 0x37, 0x0f, 0xa0, 0xb4, 0x63, 0x79, 0x27, 0xcf, 0x15, 0x4a, 0xea, 0xda, 0xad,
	0xcf, 0x8c, 0x7e, 0xc5, 0x23, 0x97, 0x08, 0x13, 0x9c, 0x58, 0x22, 0x87, 0x0c, 0x90, 0x5c, 0x22,
	0x8c, 0xa6, 0x2d, 0x10, 0x26, 0x86, 0x59, 0xf6, 0xfa, 0x99, 0xc2, 0xdb, 0x4d, 0x98, 0xe1, 0xc5,
	0x34, 0xce, 0x98, 0x98, 0x04, 0x06, 0xe6, 0xc1, 0xeb, 0x21, 0xd4, 0xa5, 0x72, 0xd9, 0x00, 0xf6,
	0x6a, 0x36, 0x80, 0xa1, 0x58, 0xd1, 0xbc, 0x20, 0x76, 0x08, 0x0d, 0x3d, 0x14, 0xee, 0x8c, 0xf8,
	0x88, 0x70, 0x18, 0x5d, 0xe9, 0xc7, 0xea, 0x18, 0x79, 0xea, 0x44, 0x24, 0xd9, 0x34, 0x99, 0x81,
	0xf9, 0xb2, 0xf9, 0x13, 0x03, 0x80, 0x89, 0xdd, 0x21, 0x96, 0xd7, 0x3b, 0xfe, 0x82, 0xec, 0x92,
	0x0d, 0x4a, 0xa5, 0x71, 0x41, 0xc9, 0xfc, 0x2e, 0xdc, 0x64, 0x26, 0xe4, 0xea, 0xa8, 0x31, 0xc7,
	0x31, 0x2e, 0x8a, 0x99, 0xd5, 0x43, 0x49, 0x21, 0x4d, 0xb9, 0x18, 0x9b, 0x52, 0xf0, 0xb6, 0x23,
	0x0a, 0xf3, 0xe7, 0xc6, 0x64, 0x99, 0x9f, 0xa3, 0x3d, 0xb3, 0x23, 0x2d, 0x5e, 0x3c, 0xfc, 0x96,
	0xc6, 0x86, 0xdf, 0x7f, 0x9c, 0x86, 0x8a, 0xac, 0x37, 0x7e, 0xd6, 0x9b, 0xd6, 0xa6, 0x16, 0x0d,
	0x92, 0x97, 0x3d, 0xca, 0x37, 0x32, 0x43, 0x28, 0x8f, 0x1d, 0x42, 0x53, 0x0b, 0x17, 0x89, 0x99,
	0x8f, 0x82, 0x44, 0x26, 0xfc, 0x56, 0x26, 0x6d, 0x0b, 0x3c, 0x9e, 0xe8, 0x66, 0xe0, 0x90, 0x28,
	0xfc, 0x71, 0x01, 0xd5, 0x74, 0xf8, 0x53, 0x9a, 0xc8, 0x82, 0xed, 0xbd, 0x64, 0x81, 0x49, 0x41,
	0x35, 0x8a, 0xad, 0x44, 0xa9, 0x3c, 0x82, 0xa2, 0x55, 0x28, 0x7e, 0xe0, 0x04, 0xfc, 0x9c, 0x11,
	0x95, 0xe4, 0x3e, 0x70, 0x02, 0xb4, 0x0e, 0x15, 0x9e, 0xfd, 0x11, 0x71, 0x80, 0x88, 0xee, 0x78,
	0x25, 0x30, 0x79, 0x1a, 0x9d, 0x1d, 0x77, 0x1a, 0x3d, 0x72, 0x48, 0x28, 0x03, 0xfd, 0x9c, 0x7e,
	0x1a, 0xe5, 0x70, 0x15, 0xe5, 0x5d, 0x4b, 0xd1, 0xe8, 0x75, 0xf4, 0x2a, 0x03, 0x27, 0xeb, 0x6f,
	0x0b, 0x13, 0xea, 0x4b, 0x8b, 0xf9, 0xf5, 0x37, 0x75, 0xa2, 0x5b, 0xca, 0x3d, 0xd1, 0xdd, 0x97,
	0x11, 0x17, 0xf1, 0x6c, 0xf2, 0xda, 0x86, 0xde, 0x3c, 0xa8, 0x9a, 0x0e, 0x72, 0xee, 0xdb, 0xa7,
	0x3d, 0x9f, 0xe2, 0x90, 0x57, 0xc8, 0xa3, 0xba, 0xb2, 0xa4, 0x7e, 0xec, 0x53, 0xdc, 0x16, 0x78,
	0xf3, 0x1f, 0x0c, 0xa8, 0x69, 0xfd, 0x06, 0x51, 0x34, 0x31, 0x32, 0xd1, 0xe4, 0xfc, 0xf5, 0xb9,
	0x06, 0x65, 0xe1, 0xda, 0xc9, 0x34, 0x53, 0xc0, 0xd8, 0x91, 0x23, 0x3a, 0x20, 0x0f, 0x07, 0x87,
	0x98, 0x24, 0xd6, 0xd3, 0x9c, 0x3a, 0x22, 0x73, 0xd4, 0x85, 0x4f, 0xd3, 0x2c, 0x37, 0x9e, 0x4b,
	0x34, 0x44, 0x9d, 0x33, 0x02, 0x65, 0xeb, 0x42, 0xae, 0xad, 0x9f, 0xb3, 0x8a, 0x6a, 0x7e, 0x6c,
	0x40, 0x4d, 0x2b, 0xda, 0x4f, 0xd0, 0xe1, 0x06, 0x54, 0xa9, 0xf5, 0x34, 0x9b, 0x88, 0x55, 0xa8,
	0xf5, 0x94, 0xfb, 0xcb, 0x7a, 0xdc, 0x5e, 0xa2, 0x2b, 0x11, 0x75, 0x95, 0x9c, 0xd7, 0xc6, 0xb3,
	0x07, 0x2b, 0x2e, 0xee, 0x5b, 0x6e, 0x97, 0xe0, 0x80, 0x60, 0x76, 0x56, 0xb6, 0xa8, 0x73, 0x8a,
	0xe5, 0x5d, 0x57, 0x6e, 0x0b, 0xd9, 0x32, 0x67, 0x68, 0x27, 0xe8, 0xcd, 0x1f, 0x4f, 0xc3, 0x8a,
	0x28, 0x57, 0xab, 0xc6, 0x16, 0x99, 0x48, 0x7d, 0x19, 0xa7, 0xbe, 0x8c, 0x53, 0xbf, 0xfd, 0x38,
	0xf5, 0xc7, 0x06, 0xd4, 0x34, 0x30, 0xf7, 0x30, 0x9f, 0xa6, 0x3d, 0x8c, 0x61, 0x6e, 0xc2, 0x8c,
	0x1f, 0x60, 0xaf, 0x4b, 0x9d, 0x74, 0x2e, 0xc0, 0xc0, 0x07, 0x8e, 0x38, 0x18, 0xba, 0x43, 0xaf,
	0x77, 0xdc, 0x3d, 0x24, 0xd8, 0x3a, 0x49, 0x2c, 0x3c, 0xe0, 0x88, 0x1d, 0x06, 0x67, 0xf6, 0xf0,
	0xe9, 0x71, 0x2a, 0x50, 0x09, 0x90, 0xb9, 0x0d, 0xe8, 0x6d, 0x4c, 0x23, 0xd7, 0x90, 0xe9, 0xcf,
	0xcb, 0x30, 0x23, 0x87, 0x1d, 0xe5, 0x3f, 0xa9, 0xee, 0xb0, 0x18, 0x6f, 0x7e, 0x38, 0x0d, 0x2b,
	0x4f, 0x78, 0xef, 0x72, 0xca, 0xc3, 0xbe, 0xcc, 0x0f, 0xbe, 0xf4, 0xbb, 0xff, 0x29, 0x7e, 0x87,
	0xa1, 0xde, 0xc1, 0x74, 0x17, 0x1f, 0x59, 0x43, 0x97, 0x5e, 0x68, 0x9d, 0x2a, 0x7d, 0x0a, 0x97,
	0xd0, 0xc7, 0x7c, 0x4f, 0xb9, 0xc2, 0x93, 0xf6, 0xc3, 0x8e, 0x3b, 0xec, 0x5f, 0xaa, 0xc4, 0x72,
	0x4d, 0xab, 0xf5, 0x73, 0xcf, 0x88, 0xaa, 0xfc, 0xe6, 0xef, 0xc3, 0xc2, 0x3b, 0x4e, 0x48, 0x7d,
	0x32, 0xba, 0xe4, 0x9d, 0xe5, 0x4b, 0x50, 0xb2, 0x2d, 0x6a, 0xc9, 0xb3, 0xf6, 0x12, 0xa3, 0x69,
	0x5b, 0x67, 0xbf, 0xd3, 0x79, 0xf7, 0xf1, 0xbb, 0x87, 0x3f, 0xc0, 0x3d, 0xda, 0xe6, 0x68, 0xf3,
	0xd7, 0x05, 0x28, 0x3f, 0x20, 0xd8, 0x76, 0xc6, 0x59, 0x63, 0x0d, 0xca, 0xd6, 0x80, 0x57, 0x46,
	0xf5, 0x62, 0xa1, 0x84, 0xa1, 0xeb, 0x50, 0x09, 0x8f, 0xfd, 0x20, 0xdd, 0x32, 0x52, 0x66, 0xc0,
	0x96, 0x1d, 0x1d, 0xb6, 0xa7, 0xd3, 0x87, 0xed, 0xa8, 0x86, 0x5a, 0x1e, 0x53, 0x43, 0x4d, 0xfe,
	0xfe, 0xa2, 0xf2, 0xfc, 0xbf, 0xbf, 0xa8, 0x5e, 0xe6, 0xf7, 0x17, 0xf7, 0xa1, 0x12, 0x58, 0xce,
	0x05, 0x7f, 0x2d, 0x51, 0x66, 0xa4, 0xdb, 0x54, 0xbb, 0x2f, 0x85, 0x0b, 0xdc, 0x97, 0x9a, 0x5d,
	0x58, 0x10, 0x06, 0xbf, 0xec, 0x2d, 0xf4, 0x57, 0xa1, 0xd2, 0x13, 0x8c, 0xf2, 0x1e, 0x7a, 0x56,
	0xe6, 0x42, 0x1c, 0xd8, 0x56, 0x48, 0xf3, 0x3b, 0x70, 0x55, 0x2c, 0x45, 0xad, 0x5e, 0x22, 0x57,
	0xe3, 0xab, 0x30, 0xed, 0x50, 0x3c, 0x50, 0xa1, 0xbd, 0x21, 0x2f, 0xb2, 0x53, 0xd4, 0xbc, 0xcb,
	0x51, 0x10, 0x9a, 0xff, 0x64, 0xa8, 0x85, 0x9d, 0xc4, 0x47, 0x53, 0x6b, 0x64, 0xa6, 0x56, 0xf6,
	0x1f, 0x16, 0xd2, 0xfd, 0x87, 0xab, 0x50, 0xee, 0x13, 0xcb, 0xa3, 0xaa, 0x9b, 0x49, 0xbe, 0xa1,
	0x3a, 0x54, 0x08, 0x3e, 0xf5, 0x4f, 0x70, 0x58, 0x2f, 0x71, 0x84, 0x7a, 0x45, 0x37, 0xa0, 0x46,
	0x70, 0xe0, 0x5a, 0x3d, 0xdc, 0xb5, 0x5c, 0xb7, 0x3e, 0xcd, 0xb1, 0x20, 0x41, 0xdb, 0x2e, 0xaf,
	0x66, 0x0b, 0x5a, 0x8e, 0xd7, 0x7b, 0xfb, 0x66, 0x04, 0x7c, 0xdb, 0x75, 0xcd, 0x2d, 0xa8, 0x67,
	0xed, 0x21, 0x2d, 0xbf, 0x0a, 0xc5, 0x41, 0xd8, 0x4f, 0xf6, 0x4a, 0x0e, 0xc2, 0xbe, 0xf9, 0xef,
	0x05, 0x28, 0xef, 0xe2, 0x53, 0xa7, 0x87, 0xc7, 0xd7, 0x09, 0x6d, 0x8e, 0x57, 0x65, 0xf4, 0x78,
	0x03, 0xe2, 0xe0, 0x96, 0xcd, 0x2b, 0x19, 0x82, 0x24, 0x73, 0xb9, 0x06, 0x02, 0xc1, 0x03, 0xeb,
	0x16, 0x20, 0xfc, 0x94, 0x62, 0xe2, 0x59, 0x6e, 0x37, 0x16, 0xa9, 0x6f, 0x45, 0x8b, 0x0a, 0xbf,
	0xab, 0x44, 0xbf, 0x06, 0xcb, 0x11, 0x8f, 0xea, 0x6a, 0x75, 0x6c, 0xbe, 0xd6, 0x55, 0xf7, 0xc3,
	0x92, 0x22, 0x90, 0xad, 0xa6, 0xad, 0x74, 0x8b, 0xd7, 0x74, 0x7e, 0x2c, 0xfa, 0x6f, 0xf9, 0xe1,
	0x93, 0xf9, 0x9f, 0x45, 0x98, 0x7d, 0xec, 0xd3, 0xa8, 0xca, 0x3e, 0xc6, 0xea, 0x0d, 0x98, 0xa6,
	0x0e, 0x75, 0x53, 0x7d, 0x7e, 0x1c, 0xc4, 0xf6, 0xca, 0x01, 0x0e, 0x43, 0xab, 0x9f, 0x34, 0xb5,
	0x02, 0xca, 0xae, 0x78, 0x82, 0x2d, 0x3b, 0xdd, 0x15, 0xdf, 0xc6, 0x16, 0x8f, 0x73, 0xd8, 0xa3,
	0x0e, 0x4d, 0x76, 0xa6, 0x49, 0x18, 0x9b, 0x6e, 0xf1, 0xc4, 0x2c, 0x57, 0xd6, 0x8b, 0x1c, 0x02,
	0x9c, 0xb1, 0x6e, 0x65, 0x6c, 0xfb, 0x4d, 0x88, 0x3d, 0xbb, 0xeb, 0x69, 0x63, 0xe5, 0x1b, 0x77,
	0xd4, 0x7e, 0xc3, 0xd0, 0x09, 0x4b, 0xdc, 0x87, 0x4a, 0x88, 0xb1, 0x77, 0xb1, 0x58, 0x56, 0x66,
	0xa4, 0x62, 0x2a, 0xb4, 0x59, 0x9c, 0x79, 0xfe, 0x59, 0x84, 0xcb, 0x84, 0xcf, 0xd7, 0xa1, 0x16,
	0x8e, 0xbc, 0x9e, 0x2a, 0xab, 0xd6, 0x26, 0x85, 0x43, 0x60, 0x94, 0x02, 0x62, 0xfe, 0xb9, 0x01,
	0xcb, 0xe2, 0xa8, 0x26, 0x56, 0xb8, 0xd6, 0x5b, 0x1c, 0x7b, 0x84, 0x71, 0x11, 0x27, 0x2b, 0x5c,
	0xca, 0xc9, 0x8a, 0x93, 0x9c, 0xcc, 0x74, 0x61, 0x79, 0x17, 0xbb, 0xf8, 0x39, 0x94, 0xca, 0xff,
	0x5a, 0x61, 0xe2, 0xd7, 0xfe, 0x3f, 0x5c, 0x7d, 0x1b, 0x53, 0x7d, 0xe6, 0x73, 0xfa, 0x25, 0x0a,
	0xe3, 0xfa, 0x25, 0xcc, 0x33, 0xb8, 0x92, 0xe2, 0xbd, 0xd4, 0xde, 0xf2, 0x06, 0xcc, 0xe9, 0x4b,
	0x52, 0xed, 0x30, 0xf2, 0x1a, 0x59, 0x97, 0xdc, 0x4e, 0x12, 0x9a, 0x8f, 0xa0, 0x21, 0xa2, 0x6b,
	0xae, 0xea, 0xd9, 0xdf, 0xcc, 0x69, 0x6e, 0x58, 0xc8, 0xba, 0xe1, 0xd7, 0x5a, 0x50, 0xd3, 0x5a,
	0x08, 0x50, 0x0d, 0x2a, 0x43, 0xef, 0xc4, 0xf3, 0xcf, 0xbc, 0xc5, 0x29, 0xf6, 0x12, 0x88, 0xdf,
	0x23, 0x2d, 0x5e, 0x41, 0x55, 0x91, 0x40, 0x2c, 0xde, 0x44, 0xb3, 0x50, 0x55, 0x3f, 0xa3, 0x5b,
	0xdc, 0x66, 0x70, 0xa6, 0xf3, 0x22, 0xde, 0xfa, 0x36, 0xd4, 0x1e, 0x39, 0x61, 0x4f, 0xc6, 0x3f,
	0x74, 0x0f, 0x6a, 0xef, 0x61, 0xc2, 0xf7, 0x2f, 0xef, 0xc8, 0x47, 0x33, 0xcc, 0x0e, 0x6f, 0x0d,
	0x02, 0x3a, 0x6a, 0x5c, 0x65, 0x8f, 0x1a, 0x4e, 0xd9, 0x6e, 0xeb, 0x37, 0x15, 0xa8, 0x3d, 0x09,
	0x31, 0x51, 0x22, 0xbe, 0x01, 0x55, 0xd5, 0xcf, 0x8d, 0xae, 0x46, 0x9b, 0x6f, 0xb2, 0x21, 0xbe,
	0xb1, 0x2a, 0x10, 0x99, 0xc6, 0xef, 0x57, 0x61, 0x9a, 0xb7, 0x93, 0x21, 0xbd, 0xb7, 0x4c, 0x31,
	0x2d, 0x27, 0x60, 0x92, 0xe3, 0x2e, 0xd4, 0x3a, 0x38, 0xcc, 0xd3, 0x38, 0x97, 0x7c, 0x0f, 0xe6,
	0x12, 0x7d, 0x81, 0x48, 0x6e, 0xef, 0x79, 0xcd, 0x82, 0x8d, 0x6b, 0x51, 0xbb, 0x46, 0xa6, 0xf5,
	0x6e, 0x17, 0x16, 0x52, 0x8d, 0x65, 0x68, 0x4d, 0x4a, 0xca, 0xed, 0x37, 0x6b, 0x2c, 0x33, 0xc5,
	0x1e, 0x89, 0x30, 0x1b, 0x49, 0xd9, 0x07, 0x94, 0xed, 0x1a, 0x44, 0x37, 0x54, 0xc6, 0x31, 0xa6,
	0x9f, 0x70, 0x92, 0x5e, 0xdf, 0x86, 0xb9, 0x44, 0x67, 0xbc, 0x1a, 0x5f, 0x5e, 0xbb, 0x7c, 0xbe,
	0x4e, 0x6f, 0xc0, 0x7c, 0xb2, 0xcb, 0x1c, 0xbd, 0x20, 0x67, 0x31, 0xaf, 0x41, 0xbe, 0x11, 0x1b,
	0x1c, 0x3d, 0x84, 0xfa, 0xb8, 0xfe, 0x74, 0xf4, 0x52, 0x9e, 0x8c, 0x4c, 0x9f, 0x99, 0x2e, 0x6d,
	0x1f, 0xae, 0xe4, 0xf6, 0xd7, 0x21, 0x33, 0xb6, 0xf3, 0xb8, 0xe6, 0xbb, 0x71, 0xd6, 0xbe, 0x92,
	0xdb, 0x75, 0xa7, 0x4b, 0x1c, 0xd7, 0x92, 0x37, 0x56, 0x62, 0x6e, 0x2f, 0x9e, 0x92, 0x38, 0xa9,
	0x51, 0xef, 0x1c, 0x89, 0xa9, 0x46, 0xbc, 0xa4, 0xc4, 0xfc, 0x2e, 0xbd, 0x7c, 0x89, 0xdf, 0x85,
	0xc5, 0x74, 0x66, 0x87, 0xae, 0xe7, 0xe7, 0xb4, 0x4a, 0xce, 0xfa, 0x38, 0xb4, 0x74, 0xf9, 0x7f,
	0x36, 0x60, 0x5e, 0xba, 0x8a, 0xf2, 0xfa, 0xd7, 0x61, 0x2e, 0x71, 0xb4, 0x43, 0x89, 0xb4, 0x39,
	0x79, 0xde, 0xd3, 0x67, 0xf9, 0x5b, 0xa2, 0xdf, 0x80, 0x77, 0x9d, 0xe9, 0xbf, 0xa3, 0x9c, 0x63,
	0x24, 0xad, 0x5d, 0xc5, 0x31, 0xee, 0x17, 0x86, 0x68, 0x1b, 0x96, 0xd2, 0xfc, 0x21, 0x9a, 0x17,
	0xcc, 0x2a, 0xc0, 0x36, 0xd6, 0x72, 0xb8, 0xa3, 0xe0, 0xbf, 0xf5, 0x57, 0x45, 0x58, 0x6e, 0x63,
	0x57, 0xc4, 0xe4, 0x63, 0x27, 0x50, 0x43, 0x7a, 0x0c, 0xcb, 0x39, 0xdd, 0x8b, 0xa8, 0x29, 0x84,
	0x8d, 0x6f, 0x6c, 0x6c, 0xe4, 0xb7, 0xbe, 0xa0, 0x77, 0x60, 0x31, 0xdd, 0x63, 0xa8, 0x26, 0x62,
	0x4c, 0xef, 0xe1, 0x38, 0x49, 0x16, 0xaf, 0xb8, 0xe7, 0xf7, 0x0f, 0xa2, 0xaf, 0x0a, 0x9e, 0xf3,
	0x1a, 0x0c, 0x23, 0xa3, 0xe4, 0xf7, 0xfc, 0xbc, 0x06, 0xb3, 0x7a, 0x83, 0x0e, 0x92, 0x21, 0x27,
	0xa7, 0x69, 0x47, 0x9f, 0xcd, 0x03, 0x58, 0x9b, 0xd4, 0xbf, 0x83, 0xee, 0xa8, 0x60, 0x74, 0x6e,
	0x8f, 0x8f, 0x26, 0x75, 0xeb, 0xc3, 0x22, 0x2c, 0xa8, 0xb2, 0xba, 0x9a, 0x9c, 0xaf, 0xc3, 0xac,
	0x5e, 0x9c, 0xd5, 0xe3, 0x7e, 0x23, 0x32, 0x40, 0xb6, 0x0a, 0x2c, 0xd8, 0xa2, 0xfe, 0x8d, 0x7c,
	0xb6, 0x6c, 0x93, 0xc8, 0xf7, 0x60, 0x35, 0xbf, 0xed, 0x03, 0xbd, 0x98, 0xe5, 0xca, 0x34, 0x85,
	0x4c, 0x14, 0x7d, 0x17, 0xaa, 0xaa, 0x7b, 0x42, 0xd7, 0x66, 0x35, 0x62, 0x49, 0xb6, 0x63, 0x3c,
	0xe2, 0x37, 0x92, 0xa9, 0x66, 0x0b, 0xb5, 0x63, 0x8c, 0x6d, 0xc3, 0x18, 0x2b, 0xee, 0x1d, 0x98,
	0x4b, 0x74, 0x2d, 0x28, 0xb7, 0xcd, 0x6b, 0xae, 0x68, 0xbc, 0x90, 0x8b, 0x93, 0x5e, 0xf4, 0xa3,
	0x82, 0x28, 0x31, 0xa9, 0x09, 0x12, 0xe3, 0xe2, 0x8d, 0x02, 0xf9, 0xe3, 0x4a, 0xf6, 0x10, 0xbc,
	0xc7, 0xc7, 0x95, 0x2a, 0xb6, 0x2b, 0x5f, 0x1b, 0x5f, 0x86, 0x57, 0xa1, 0x6a, 0x6c, 0xd9, 0x7f,
	0xc0, 0x5d, 0x25, 0xbf, 0xf6, 0x8c, 0x6e, 0xc5, 0xcc, 0x13, 0x8b, 0xd3, 0x8d, 0x0b, 0x10, 0x0a,
	0x2b, 0xfc, 0x2b, 0x8b, 0x8c, 0xe2, 0xf6, 0x4b, 0x19, 0xe2, 0x4d, 0x98, 0x4b, 0x54, 0x58, 0x94,
	0x89, 0xf3, 0xca, 0x2e, 0x8d, 0xe4, 0x3d, 0x32, 0xba, 0xcf, 0x97, 0xeb, 0xb6, 0xba, 0x4c, 0xd6,
	0x0d, 0x59, 0x8f, 0x54, 0x4a, 0x5f, 0x4f, 0xbf, 0xa9, 0x42, 0x71, 0xea, 0x83, 0x79, 0xb7, 0xd0,
	0xe9, 0x0f, 0xde, 0x61, 0xe9, 0x03, 0x73, 0x4e, 0x05, 0x48, 0xc5, 0xe1, 0x58, 0x81, 0x9d, 0x9f,
	0x17, 0xff, 0x6c, 0xfb, 0x3f, 0x0a, 0xe8, 0xd7, 0x05, 0xa8, 0xe2, 0x03, 0x3f, 0x68, 0x6e, 0xef,
	0xb7, 0xd0, 0x2f, 0x0b, 0xdb, 0xfb, 0xad, 0xe6, 0xae, 0xdf, 0x1b, 0x0e, 0x44, 0x89, 0xc9, 0xf7,
	0xde, 0x84, 0xbb, 0xcd, 0xef, 0x6f, 0xda, 0x7e, 0x8f, 0xff, 0xff, 0x2e, 0xbf, 0x77, 0x3b, 0x7a,
	0xbc, 0xd3, 0xec, 0x1c, 0x5b, 0x04, 0xdb, 0x8c, 0xb1, 0x79, 0xe4, 0x93, 0xe6, 0xc0, 0xf2, 0x78,
	0x9e, 0xdd, 0xe4, 0xbf, 0xc6, 0x6a, 0x5a, 0x9e, 0xdd, 0x94, 0x67, 0xc2, 0x48, 0x04, 0x4b, 0x66,
	0xa5, 0x08, 0xf6, 0x78, 0x27, 0xe2, 0xe5, 0xff, 0x8b, 0x44, 0x44, 0x66, 0xd9, 0x03, 0xc7, 0x93,
	0x74, 0xfc, 0x39, 0x26, 0xe4, 0xaa, 0x72, 0x58, 0x4c, 0x8e, 0x9f, 0x52, 0x5d, 0xb2, 0x7a, 0xbd,
	0xd3, 0x7c, 0x4b, 0x9e, 0x3f, 0xc6, 0x7c, 0x86, 0x11, 0xca, 0x5c, 0x5b, 0x63, 0x95, 0x90, 0x1c,
	0x6e, 0x89, 0x89, 0x05, 0x84, 0xba, 0xa2, 0xa1, 0xd4, 0xb4, 0x13, 0xe0, 0x9e, 0xa3, 0x7f, 0x73,
	0x18, 0x60, 0x22, 0x55, 0xde, 0x2a, 0x9c, 0xde, 0xfb, 0xe8, 0xd3, 0x75, 0xe3, 0xe3, 0x4f, 0xd7,
	0x8d, 0x4f, 0x3e, 0x5d, 0x9f, 0xfa, 0xcd, 0xa7, 0xeb, 0x53, 0x7f, 0xf8, 0x6c, 0x7d, 0xea, 0xa7,
	0xcf, 0xd6, 0xa7, 0xfe, 0xee, 0xd9, 0xfa, 0xd4, 0x47, 0xcf, 0xd6, 0xa7, 0x3e, 0x7e, 0xb6, 0x3e,
	0xf5, 0xc9, 0xb3, 0xf5, 0xa9, 0x9f, 0xfc, 0x6a, 0x7d, 0xea, 0x2f, 0x7f, 0xb5, 0x3e, 0xf5, 0xbb,
	0x57, 0xf9, 0x0c, 0x9f, 0x7a, 0x9b, 0x87, 0x56, 0xef, 0x04, 0x7b, 0xf6, 0x66, 0x70, 0xc8, 0x27,
	0xe0, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x68, 0x37, 0xa6, 0xdf, 0x77, 0x47, 0x00, 0x00,
}
