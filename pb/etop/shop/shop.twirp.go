// Code generated by protoc-gen-twirp v5.8.0, DO NOT EDIT.
// source: etop/shop/shop.proto

/*
Package shop is a generated twirp stub package.
This code was generated with github.com/twitchtv/twirp/protoc-gen-twirp v5.8.0.

It is generated from these files:
	etop/shop/shop.proto
*/
package shop

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	fmt "fmt"
	io "io"
	ioutil "io/ioutil"
	http "net/http"
	url "net/url"
	strconv "strconv"
	strings "strings"

	jsonpb "github.com/golang/protobuf/jsonpb"
	proto "github.com/golang/protobuf/proto"
	twirp "github.com/twitchtv/twirp"
	ctxsetters "github.com/twitchtv/twirp/ctxsetters"

	cm "etop.vn/backend/pb/common"
	etop "etop.vn/backend/pb/etop"
	order "etop.vn/backend/pb/etop/order"
)

// =====================
// MiscService Interface
// =====================

type MiscService interface {
	VersionInfo(context.Context, *cm.Empty) (*cm.VersionInfoResponse, error)
}

// ===========================
// MiscService Protobuf Client
// ===========================

type miscServiceProtobufClient struct {
	client HTTPClient
	urls   [1]string
}

// NewMiscServiceProtobufClient creates a Protobuf client that implements the MiscService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewMiscServiceProtobufClient(addr string, client HTTPClient) MiscService {
	prefix := urlBase(addr) + MiscServicePathPrefix
	urls := [1]string{
		prefix + "VersionInfo",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &miscServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &miscServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *miscServiceProtobufClient) VersionInfo(ctx context.Context, in *cm.Empty) (*cm.VersionInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Misc")
	ctx = ctxsetters.WithMethodName(ctx, "VersionInfo")
	out := new(cm.VersionInfoResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =======================
// MiscService JSON Client
// =======================

type miscServiceJSONClient struct {
	client HTTPClient
	urls   [1]string
}

// NewMiscServiceJSONClient creates a JSON client that implements the MiscService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewMiscServiceJSONClient(addr string, client HTTPClient) MiscService {
	prefix := urlBase(addr) + MiscServicePathPrefix
	urls := [1]string{
		prefix + "VersionInfo",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &miscServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &miscServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *miscServiceJSONClient) VersionInfo(ctx context.Context, in *cm.Empty) (*cm.VersionInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Misc")
	ctx = ctxsetters.WithMethodName(ctx, "VersionInfo")
	out := new(cm.VersionInfoResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// MiscService Server Handler
// ==========================

type miscServiceServer struct {
	MiscService
	hooks *twirp.ServerHooks
}

func NewMiscServiceServer(svc MiscService, hooks *twirp.ServerHooks) TwirpServer {
	return &miscServiceServer{
		MiscService: svc,
		hooks:       hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *miscServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// MiscServicePathPrefix is used for all URL paths on a twirp MiscService server.
// Requests are always: POST MiscServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const MiscServicePathPrefix = "/api/shop.Misc/"

func (s *miscServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Misc")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/shop.Misc/VersionInfo":
		s.serveVersionInfo(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *miscServiceServer) serveVersionInfo(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveVersionInfoJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveVersionInfoProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *miscServiceServer) serveVersionInfoJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "VersionInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.VersionInfoResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MiscService.VersionInfo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.VersionInfoResponse and nil error while calling VersionInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *miscServiceServer) serveVersionInfoProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "VersionInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.VersionInfoResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MiscService.VersionInfo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.VersionInfoResponse and nil error while calling VersionInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *miscServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 0
}

func (s *miscServiceServer) ProtocGenTwirpVersion() string {
	return "v5.8.0"
}

func (s *miscServiceServer) PathPrefix() string {
	return MiscServicePathPrefix
}

// ========================
// AccountService Interface
// ========================

type AccountService interface {
	RegisterShop(context.Context, *RegisterShopRequest) (*RegisterShopResponse, error)

	UpdateShop(context.Context, *UpdateShopRequest) (*UpdateShopResponse, error)

	DeleteShop(context.Context, *cm.IDRequest) (*cm.Empty, error)

	SetDefaultAddress(context.Context, *etop.SetDefaultAddressRequest) (*cm.UpdatedResponse, error)

	GetBalanceShop(context.Context, *cm.Empty) (*GetBalanceShopResponse, error)

	CreateExternalAccountAhamove(context.Context, *cm.Empty) (*ExternalAccountAhamove, error)

	GetExternalAccountAhamove(context.Context, *cm.Empty) (*ExternalAccountAhamove, error)

	RequestVerifyExternalAccountAhamove(context.Context, *cm.Empty) (*cm.UpdatedResponse, error)

	UpdateExternalAccountAhamoveVerification(context.Context, *UpdateXAccountAhamoveVerificationRequest) (*cm.UpdatedResponse, error)

	// deprecated: backward-compatible, will be removed later
	UpdateExternalAccountAhamoveVerificationImages(context.Context, *UpdateXAccountAhamoveVerificationRequest) (*cm.UpdatedResponse, error)
}

// ==============================
// AccountService Protobuf Client
// ==============================

type accountServiceProtobufClient struct {
	client HTTPClient
	urls   [10]string
}

// NewAccountServiceProtobufClient creates a Protobuf client that implements the AccountService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewAccountServiceProtobufClient(addr string, client HTTPClient) AccountService {
	prefix := urlBase(addr) + AccountServicePathPrefix
	urls := [10]string{
		prefix + "RegisterShop",
		prefix + "UpdateShop",
		prefix + "DeleteShop",
		prefix + "SetDefaultAddress",
		prefix + "GetBalanceShop",
		prefix + "CreateExternalAccountAhamove",
		prefix + "GetExternalAccountAhamove",
		prefix + "RequestVerifyExternalAccountAhamove",
		prefix + "UpdateExternalAccountAhamoveVerification",
		prefix + "UpdateExternalAccountAhamoveVerificationImages",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &accountServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &accountServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *accountServiceProtobufClient) RegisterShop(ctx context.Context, in *RegisterShopRequest) (*RegisterShopResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "RegisterShop")
	out := new(RegisterShopResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceProtobufClient) UpdateShop(ctx context.Context, in *UpdateShopRequest) (*UpdateShopResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateShop")
	out := new(UpdateShopResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceProtobufClient) DeleteShop(ctx context.Context, in *cm.IDRequest) (*cm.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteShop")
	out := new(cm.Empty)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceProtobufClient) SetDefaultAddress(ctx context.Context, in *etop.SetDefaultAddressRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "SetDefaultAddress")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceProtobufClient) GetBalanceShop(ctx context.Context, in *cm.Empty) (*GetBalanceShopResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "GetBalanceShop")
	out := new(GetBalanceShopResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceProtobufClient) CreateExternalAccountAhamove(ctx context.Context, in *cm.Empty) (*ExternalAccountAhamove, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "CreateExternalAccountAhamove")
	out := new(ExternalAccountAhamove)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceProtobufClient) GetExternalAccountAhamove(ctx context.Context, in *cm.Empty) (*ExternalAccountAhamove, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "GetExternalAccountAhamove")
	out := new(ExternalAccountAhamove)
	err := doProtobufRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceProtobufClient) RequestVerifyExternalAccountAhamove(ctx context.Context, in *cm.Empty) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "RequestVerifyExternalAccountAhamove")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceProtobufClient) UpdateExternalAccountAhamoveVerification(ctx context.Context, in *UpdateXAccountAhamoveVerificationRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateExternalAccountAhamoveVerification")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceProtobufClient) UpdateExternalAccountAhamoveVerificationImages(ctx context.Context, in *UpdateXAccountAhamoveVerificationRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateExternalAccountAhamoveVerificationImages")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// AccountService JSON Client
// ==========================

type accountServiceJSONClient struct {
	client HTTPClient
	urls   [10]string
}

// NewAccountServiceJSONClient creates a JSON client that implements the AccountService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewAccountServiceJSONClient(addr string, client HTTPClient) AccountService {
	prefix := urlBase(addr) + AccountServicePathPrefix
	urls := [10]string{
		prefix + "RegisterShop",
		prefix + "UpdateShop",
		prefix + "DeleteShop",
		prefix + "SetDefaultAddress",
		prefix + "GetBalanceShop",
		prefix + "CreateExternalAccountAhamove",
		prefix + "GetExternalAccountAhamove",
		prefix + "RequestVerifyExternalAccountAhamove",
		prefix + "UpdateExternalAccountAhamoveVerification",
		prefix + "UpdateExternalAccountAhamoveVerificationImages",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &accountServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &accountServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *accountServiceJSONClient) RegisterShop(ctx context.Context, in *RegisterShopRequest) (*RegisterShopResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "RegisterShop")
	out := new(RegisterShopResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceJSONClient) UpdateShop(ctx context.Context, in *UpdateShopRequest) (*UpdateShopResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateShop")
	out := new(UpdateShopResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceJSONClient) DeleteShop(ctx context.Context, in *cm.IDRequest) (*cm.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteShop")
	out := new(cm.Empty)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceJSONClient) SetDefaultAddress(ctx context.Context, in *etop.SetDefaultAddressRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "SetDefaultAddress")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceJSONClient) GetBalanceShop(ctx context.Context, in *cm.Empty) (*GetBalanceShopResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "GetBalanceShop")
	out := new(GetBalanceShopResponse)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceJSONClient) CreateExternalAccountAhamove(ctx context.Context, in *cm.Empty) (*ExternalAccountAhamove, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "CreateExternalAccountAhamove")
	out := new(ExternalAccountAhamove)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceJSONClient) GetExternalAccountAhamove(ctx context.Context, in *cm.Empty) (*ExternalAccountAhamove, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "GetExternalAccountAhamove")
	out := new(ExternalAccountAhamove)
	err := doJSONRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceJSONClient) RequestVerifyExternalAccountAhamove(ctx context.Context, in *cm.Empty) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "RequestVerifyExternalAccountAhamove")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceJSONClient) UpdateExternalAccountAhamoveVerification(ctx context.Context, in *UpdateXAccountAhamoveVerificationRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateExternalAccountAhamoveVerification")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceJSONClient) UpdateExternalAccountAhamoveVerificationImages(ctx context.Context, in *UpdateXAccountAhamoveVerificationRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateExternalAccountAhamoveVerificationImages")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =============================
// AccountService Server Handler
// =============================

type accountServiceServer struct {
	AccountService
	hooks *twirp.ServerHooks
}

func NewAccountServiceServer(svc AccountService, hooks *twirp.ServerHooks) TwirpServer {
	return &accountServiceServer{
		AccountService: svc,
		hooks:          hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *accountServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// AccountServicePathPrefix is used for all URL paths on a twirp AccountService server.
// Requests are always: POST AccountServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const AccountServicePathPrefix = "/api/shop.Account/"

func (s *accountServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Account")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/shop.Account/RegisterShop":
		s.serveRegisterShop(ctx, resp, req)
		return
	case "/api/shop.Account/UpdateShop":
		s.serveUpdateShop(ctx, resp, req)
		return
	case "/api/shop.Account/DeleteShop":
		s.serveDeleteShop(ctx, resp, req)
		return
	case "/api/shop.Account/SetDefaultAddress":
		s.serveSetDefaultAddress(ctx, resp, req)
		return
	case "/api/shop.Account/GetBalanceShop":
		s.serveGetBalanceShop(ctx, resp, req)
		return
	case "/api/shop.Account/CreateExternalAccountAhamove":
		s.serveCreateExternalAccountAhamove(ctx, resp, req)
		return
	case "/api/shop.Account/GetExternalAccountAhamove":
		s.serveGetExternalAccountAhamove(ctx, resp, req)
		return
	case "/api/shop.Account/RequestVerifyExternalAccountAhamove":
		s.serveRequestVerifyExternalAccountAhamove(ctx, resp, req)
		return
	case "/api/shop.Account/UpdateExternalAccountAhamoveVerification":
		s.serveUpdateExternalAccountAhamoveVerification(ctx, resp, req)
		return
	case "/api/shop.Account/UpdateExternalAccountAhamoveVerificationImages":
		s.serveUpdateExternalAccountAhamoveVerificationImages(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *accountServiceServer) serveRegisterShop(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRegisterShopJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRegisterShopProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *accountServiceServer) serveRegisterShopJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisterShop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(RegisterShopRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *RegisterShopResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.RegisterShop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisterShopResponse and nil error while calling RegisterShop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveRegisterShopProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisterShop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(RegisterShopRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *RegisterShopResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.RegisterShop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisterShopResponse and nil error while calling RegisterShop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveUpdateShop(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateShopJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateShopProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *accountServiceServer) serveUpdateShopJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateShop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateShopRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *UpdateShopResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.UpdateShop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateShopResponse and nil error while calling UpdateShop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveUpdateShopProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateShop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateShopRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *UpdateShopResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.UpdateShop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateShopResponse and nil error while calling UpdateShop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveDeleteShop(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteShopJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteShopProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *accountServiceServer) serveDeleteShopJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteShop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.DeleteShop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.Empty and nil error while calling DeleteShop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveDeleteShopProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteShop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.DeleteShop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.Empty and nil error while calling DeleteShop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveSetDefaultAddress(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetDefaultAddressJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetDefaultAddressProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *accountServiceServer) serveSetDefaultAddressJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetDefaultAddress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(etop.SetDefaultAddressRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.SetDefaultAddress(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling SetDefaultAddress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveSetDefaultAddressProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetDefaultAddress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(etop.SetDefaultAddressRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.SetDefaultAddress(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling SetDefaultAddress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveGetBalanceShop(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetBalanceShopJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetBalanceShopProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *accountServiceServer) serveGetBalanceShopJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetBalanceShop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *GetBalanceShopResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.GetBalanceShop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetBalanceShopResponse and nil error while calling GetBalanceShop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveGetBalanceShopProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetBalanceShop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *GetBalanceShopResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.GetBalanceShop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetBalanceShopResponse and nil error while calling GetBalanceShop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveCreateExternalAccountAhamove(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateExternalAccountAhamoveJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateExternalAccountAhamoveProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *accountServiceServer) serveCreateExternalAccountAhamoveJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateExternalAccountAhamove")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ExternalAccountAhamove
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.CreateExternalAccountAhamove(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ExternalAccountAhamove and nil error while calling CreateExternalAccountAhamove. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveCreateExternalAccountAhamoveProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateExternalAccountAhamove")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ExternalAccountAhamove
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.CreateExternalAccountAhamove(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ExternalAccountAhamove and nil error while calling CreateExternalAccountAhamove. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveGetExternalAccountAhamove(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetExternalAccountAhamoveJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetExternalAccountAhamoveProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *accountServiceServer) serveGetExternalAccountAhamoveJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetExternalAccountAhamove")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ExternalAccountAhamove
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.GetExternalAccountAhamove(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ExternalAccountAhamove and nil error while calling GetExternalAccountAhamove. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveGetExternalAccountAhamoveProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetExternalAccountAhamove")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ExternalAccountAhamove
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.GetExternalAccountAhamove(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ExternalAccountAhamove and nil error while calling GetExternalAccountAhamove. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveRequestVerifyExternalAccountAhamove(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRequestVerifyExternalAccountAhamoveJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRequestVerifyExternalAccountAhamoveProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *accountServiceServer) serveRequestVerifyExternalAccountAhamoveJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RequestVerifyExternalAccountAhamove")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.RequestVerifyExternalAccountAhamove(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling RequestVerifyExternalAccountAhamove. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveRequestVerifyExternalAccountAhamoveProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RequestVerifyExternalAccountAhamove")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.RequestVerifyExternalAccountAhamove(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling RequestVerifyExternalAccountAhamove. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveUpdateExternalAccountAhamoveVerification(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateExternalAccountAhamoveVerificationJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateExternalAccountAhamoveVerificationProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *accountServiceServer) serveUpdateExternalAccountAhamoveVerificationJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateExternalAccountAhamoveVerification")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateXAccountAhamoveVerificationRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.UpdateExternalAccountAhamoveVerification(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateExternalAccountAhamoveVerification. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveUpdateExternalAccountAhamoveVerificationProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateExternalAccountAhamoveVerification")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateXAccountAhamoveVerificationRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.UpdateExternalAccountAhamoveVerification(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateExternalAccountAhamoveVerification. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveUpdateExternalAccountAhamoveVerificationImages(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateExternalAccountAhamoveVerificationImagesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateExternalAccountAhamoveVerificationImagesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *accountServiceServer) serveUpdateExternalAccountAhamoveVerificationImagesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateExternalAccountAhamoveVerificationImages")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateXAccountAhamoveVerificationRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.UpdateExternalAccountAhamoveVerificationImages(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateExternalAccountAhamoveVerificationImages. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) serveUpdateExternalAccountAhamoveVerificationImagesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateExternalAccountAhamoveVerificationImages")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateXAccountAhamoveVerificationRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AccountService.UpdateExternalAccountAhamoveVerificationImages(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateExternalAccountAhamoveVerificationImages. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *accountServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 1
}

func (s *accountServiceServer) ProtocGenTwirpVersion() string {
	return "v5.8.0"
}

func (s *accountServiceServer) PathPrefix() string {
	return AccountServicePathPrefix
}

// ================================
// ExternalAccountService Interface
// ================================

type ExternalAccountService interface {
	GetExternalAccountHaravan(context.Context, *cm.Empty) (*ExternalAccountHaravan, error)

	CreateExternalAccountHaravan(context.Context, *ExternalAccountHaravanRequest) (*ExternalAccountHaravan, error)

	UpdateExternalAccountHaravanToken(context.Context, *ExternalAccountHaravanRequest) (*ExternalAccountHaravan, error)

	ConnectCarrierServiceExternalAccountHaravan(context.Context, *cm.Empty) (*cm.UpdatedResponse, error)

	DeleteConnectedCarrierServiceExternalAccountHaravan(context.Context, *cm.Empty) (*cm.DeletedResponse, error)
}

// ======================================
// ExternalAccountService Protobuf Client
// ======================================

type externalAccountServiceProtobufClient struct {
	client HTTPClient
	urls   [5]string
}

// NewExternalAccountServiceProtobufClient creates a Protobuf client that implements the ExternalAccountService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewExternalAccountServiceProtobufClient(addr string, client HTTPClient) ExternalAccountService {
	prefix := urlBase(addr) + ExternalAccountServicePathPrefix
	urls := [5]string{
		prefix + "GetExternalAccountHaravan",
		prefix + "CreateExternalAccountHaravan",
		prefix + "UpdateExternalAccountHaravanToken",
		prefix + "ConnectCarrierServiceExternalAccountHaravan",
		prefix + "DeleteConnectedCarrierServiceExternalAccountHaravan",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &externalAccountServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &externalAccountServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *externalAccountServiceProtobufClient) GetExternalAccountHaravan(ctx context.Context, in *cm.Empty) (*ExternalAccountHaravan, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ExternalAccount")
	ctx = ctxsetters.WithMethodName(ctx, "GetExternalAccountHaravan")
	out := new(ExternalAccountHaravan)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAccountServiceProtobufClient) CreateExternalAccountHaravan(ctx context.Context, in *ExternalAccountHaravanRequest) (*ExternalAccountHaravan, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ExternalAccount")
	ctx = ctxsetters.WithMethodName(ctx, "CreateExternalAccountHaravan")
	out := new(ExternalAccountHaravan)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAccountServiceProtobufClient) UpdateExternalAccountHaravanToken(ctx context.Context, in *ExternalAccountHaravanRequest) (*ExternalAccountHaravan, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ExternalAccount")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateExternalAccountHaravanToken")
	out := new(ExternalAccountHaravan)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAccountServiceProtobufClient) ConnectCarrierServiceExternalAccountHaravan(ctx context.Context, in *cm.Empty) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ExternalAccount")
	ctx = ctxsetters.WithMethodName(ctx, "ConnectCarrierServiceExternalAccountHaravan")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAccountServiceProtobufClient) DeleteConnectedCarrierServiceExternalAccountHaravan(ctx context.Context, in *cm.Empty) (*cm.DeletedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ExternalAccount")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteConnectedCarrierServiceExternalAccountHaravan")
	out := new(cm.DeletedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==================================
// ExternalAccountService JSON Client
// ==================================

type externalAccountServiceJSONClient struct {
	client HTTPClient
	urls   [5]string
}

// NewExternalAccountServiceJSONClient creates a JSON client that implements the ExternalAccountService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewExternalAccountServiceJSONClient(addr string, client HTTPClient) ExternalAccountService {
	prefix := urlBase(addr) + ExternalAccountServicePathPrefix
	urls := [5]string{
		prefix + "GetExternalAccountHaravan",
		prefix + "CreateExternalAccountHaravan",
		prefix + "UpdateExternalAccountHaravanToken",
		prefix + "ConnectCarrierServiceExternalAccountHaravan",
		prefix + "DeleteConnectedCarrierServiceExternalAccountHaravan",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &externalAccountServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &externalAccountServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *externalAccountServiceJSONClient) GetExternalAccountHaravan(ctx context.Context, in *cm.Empty) (*ExternalAccountHaravan, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ExternalAccount")
	ctx = ctxsetters.WithMethodName(ctx, "GetExternalAccountHaravan")
	out := new(ExternalAccountHaravan)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAccountServiceJSONClient) CreateExternalAccountHaravan(ctx context.Context, in *ExternalAccountHaravanRequest) (*ExternalAccountHaravan, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ExternalAccount")
	ctx = ctxsetters.WithMethodName(ctx, "CreateExternalAccountHaravan")
	out := new(ExternalAccountHaravan)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAccountServiceJSONClient) UpdateExternalAccountHaravanToken(ctx context.Context, in *ExternalAccountHaravanRequest) (*ExternalAccountHaravan, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ExternalAccount")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateExternalAccountHaravanToken")
	out := new(ExternalAccountHaravan)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAccountServiceJSONClient) ConnectCarrierServiceExternalAccountHaravan(ctx context.Context, in *cm.Empty) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ExternalAccount")
	ctx = ctxsetters.WithMethodName(ctx, "ConnectCarrierServiceExternalAccountHaravan")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalAccountServiceJSONClient) DeleteConnectedCarrierServiceExternalAccountHaravan(ctx context.Context, in *cm.Empty) (*cm.DeletedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ExternalAccount")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteConnectedCarrierServiceExternalAccountHaravan")
	out := new(cm.DeletedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =====================================
// ExternalAccountService Server Handler
// =====================================

type externalAccountServiceServer struct {
	ExternalAccountService
	hooks *twirp.ServerHooks
}

func NewExternalAccountServiceServer(svc ExternalAccountService, hooks *twirp.ServerHooks) TwirpServer {
	return &externalAccountServiceServer{
		ExternalAccountService: svc,
		hooks:                  hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *externalAccountServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// ExternalAccountServicePathPrefix is used for all URL paths on a twirp ExternalAccountService server.
// Requests are always: POST ExternalAccountServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const ExternalAccountServicePathPrefix = "/api/shop.ExternalAccount/"

func (s *externalAccountServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ExternalAccount")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/shop.ExternalAccount/GetExternalAccountHaravan":
		s.serveGetExternalAccountHaravan(ctx, resp, req)
		return
	case "/api/shop.ExternalAccount/CreateExternalAccountHaravan":
		s.serveCreateExternalAccountHaravan(ctx, resp, req)
		return
	case "/api/shop.ExternalAccount/UpdateExternalAccountHaravanToken":
		s.serveUpdateExternalAccountHaravanToken(ctx, resp, req)
		return
	case "/api/shop.ExternalAccount/ConnectCarrierServiceExternalAccountHaravan":
		s.serveConnectCarrierServiceExternalAccountHaravan(ctx, resp, req)
		return
	case "/api/shop.ExternalAccount/DeleteConnectedCarrierServiceExternalAccountHaravan":
		s.serveDeleteConnectedCarrierServiceExternalAccountHaravan(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *externalAccountServiceServer) serveGetExternalAccountHaravan(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetExternalAccountHaravanJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetExternalAccountHaravanProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *externalAccountServiceServer) serveGetExternalAccountHaravanJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetExternalAccountHaravan")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ExternalAccountHaravan
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ExternalAccountService.GetExternalAccountHaravan(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ExternalAccountHaravan and nil error while calling GetExternalAccountHaravan. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *externalAccountServiceServer) serveGetExternalAccountHaravanProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetExternalAccountHaravan")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ExternalAccountHaravan
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ExternalAccountService.GetExternalAccountHaravan(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ExternalAccountHaravan and nil error while calling GetExternalAccountHaravan. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *externalAccountServiceServer) serveCreateExternalAccountHaravan(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateExternalAccountHaravanJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateExternalAccountHaravanProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *externalAccountServiceServer) serveCreateExternalAccountHaravanJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateExternalAccountHaravan")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ExternalAccountHaravanRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ExternalAccountHaravan
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ExternalAccountService.CreateExternalAccountHaravan(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ExternalAccountHaravan and nil error while calling CreateExternalAccountHaravan. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *externalAccountServiceServer) serveCreateExternalAccountHaravanProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateExternalAccountHaravan")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(ExternalAccountHaravanRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ExternalAccountHaravan
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ExternalAccountService.CreateExternalAccountHaravan(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ExternalAccountHaravan and nil error while calling CreateExternalAccountHaravan. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *externalAccountServiceServer) serveUpdateExternalAccountHaravanToken(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateExternalAccountHaravanTokenJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateExternalAccountHaravanTokenProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *externalAccountServiceServer) serveUpdateExternalAccountHaravanTokenJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateExternalAccountHaravanToken")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ExternalAccountHaravanRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ExternalAccountHaravan
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ExternalAccountService.UpdateExternalAccountHaravanToken(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ExternalAccountHaravan and nil error while calling UpdateExternalAccountHaravanToken. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *externalAccountServiceServer) serveUpdateExternalAccountHaravanTokenProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateExternalAccountHaravanToken")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(ExternalAccountHaravanRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ExternalAccountHaravan
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ExternalAccountService.UpdateExternalAccountHaravanToken(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ExternalAccountHaravan and nil error while calling UpdateExternalAccountHaravanToken. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *externalAccountServiceServer) serveConnectCarrierServiceExternalAccountHaravan(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveConnectCarrierServiceExternalAccountHaravanJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveConnectCarrierServiceExternalAccountHaravanProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *externalAccountServiceServer) serveConnectCarrierServiceExternalAccountHaravanJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ConnectCarrierServiceExternalAccountHaravan")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ExternalAccountService.ConnectCarrierServiceExternalAccountHaravan(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling ConnectCarrierServiceExternalAccountHaravan. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *externalAccountServiceServer) serveConnectCarrierServiceExternalAccountHaravanProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ConnectCarrierServiceExternalAccountHaravan")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ExternalAccountService.ConnectCarrierServiceExternalAccountHaravan(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling ConnectCarrierServiceExternalAccountHaravan. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *externalAccountServiceServer) serveDeleteConnectedCarrierServiceExternalAccountHaravan(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteConnectedCarrierServiceExternalAccountHaravanJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteConnectedCarrierServiceExternalAccountHaravanProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *externalAccountServiceServer) serveDeleteConnectedCarrierServiceExternalAccountHaravanJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteConnectedCarrierServiceExternalAccountHaravan")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.DeletedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ExternalAccountService.DeleteConnectedCarrierServiceExternalAccountHaravan(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.DeletedResponse and nil error while calling DeleteConnectedCarrierServiceExternalAccountHaravan. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *externalAccountServiceServer) serveDeleteConnectedCarrierServiceExternalAccountHaravanProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteConnectedCarrierServiceExternalAccountHaravan")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.DeletedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ExternalAccountService.DeleteConnectedCarrierServiceExternalAccountHaravan(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.DeletedResponse and nil error while calling DeleteConnectedCarrierServiceExternalAccountHaravan. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *externalAccountServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 2
}

func (s *externalAccountServiceServer) ProtocGenTwirpVersion() string {
	return "v5.8.0"
}

func (s *externalAccountServiceServer) PathPrefix() string {
	return ExternalAccountServicePathPrefix
}

// ===========================
// CollectionService Interface
// ===========================

// deprecated
type CollectionService interface {
	CreateCollection(context.Context, *CreateCollectionRequest) (*Collection, error)

	DeleteCollection(context.Context, *cm.IDRequest) (*cm.RemovedResponse, error)

	GetCollection(context.Context, *cm.IDRequest) (*Collection, error)

	GetCollections(context.Context, *cm.Empty) (*CollectionsResponse, error)

	GetCollectionsByIDs(context.Context, *cm.IDsRequest) (*CollectionsResponse, error)

	UpdateCollection(context.Context, *UpdateCollectionRequest) (*Collection, error)

	UpdateProductsCollection(context.Context, *UpdateProductsCollectionRequest) (*UpdateProductsCollectionResponse, error)

	RemoveProductsCollection(context.Context, *RemoveProductsCollectionRequest) (*cm.UpdatedResponse, error)
}

// =================================
// CollectionService Protobuf Client
// =================================

type collectionServiceProtobufClient struct {
	client HTTPClient
	urls   [8]string
}

// NewCollectionServiceProtobufClient creates a Protobuf client that implements the CollectionService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewCollectionServiceProtobufClient(addr string, client HTTPClient) CollectionService {
	prefix := urlBase(addr) + CollectionServicePathPrefix
	urls := [8]string{
		prefix + "CreateCollection",
		prefix + "DeleteCollection",
		prefix + "GetCollection",
		prefix + "GetCollections",
		prefix + "GetCollectionsByIDs",
		prefix + "UpdateCollection",
		prefix + "UpdateProductsCollection",
		prefix + "RemoveProductsCollection",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &collectionServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &collectionServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *collectionServiceProtobufClient) CreateCollection(ctx context.Context, in *CreateCollectionRequest) (*Collection, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Collection")
	ctx = ctxsetters.WithMethodName(ctx, "CreateCollection")
	out := new(Collection)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceProtobufClient) DeleteCollection(ctx context.Context, in *cm.IDRequest) (*cm.RemovedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Collection")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCollection")
	out := new(cm.RemovedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceProtobufClient) GetCollection(ctx context.Context, in *cm.IDRequest) (*Collection, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Collection")
	ctx = ctxsetters.WithMethodName(ctx, "GetCollection")
	out := new(Collection)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceProtobufClient) GetCollections(ctx context.Context, in *cm.Empty) (*CollectionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Collection")
	ctx = ctxsetters.WithMethodName(ctx, "GetCollections")
	out := new(CollectionsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceProtobufClient) GetCollectionsByIDs(ctx context.Context, in *cm.IDsRequest) (*CollectionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Collection")
	ctx = ctxsetters.WithMethodName(ctx, "GetCollectionsByIDs")
	out := new(CollectionsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceProtobufClient) UpdateCollection(ctx context.Context, in *UpdateCollectionRequest) (*Collection, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Collection")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCollection")
	out := new(Collection)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceProtobufClient) UpdateProductsCollection(ctx context.Context, in *UpdateProductsCollectionRequest) (*UpdateProductsCollectionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Collection")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsCollection")
	out := new(UpdateProductsCollectionResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceProtobufClient) RemoveProductsCollection(ctx context.Context, in *RemoveProductsCollectionRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Collection")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveProductsCollection")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =============================
// CollectionService JSON Client
// =============================

type collectionServiceJSONClient struct {
	client HTTPClient
	urls   [8]string
}

// NewCollectionServiceJSONClient creates a JSON client that implements the CollectionService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewCollectionServiceJSONClient(addr string, client HTTPClient) CollectionService {
	prefix := urlBase(addr) + CollectionServicePathPrefix
	urls := [8]string{
		prefix + "CreateCollection",
		prefix + "DeleteCollection",
		prefix + "GetCollection",
		prefix + "GetCollections",
		prefix + "GetCollectionsByIDs",
		prefix + "UpdateCollection",
		prefix + "UpdateProductsCollection",
		prefix + "RemoveProductsCollection",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &collectionServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &collectionServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *collectionServiceJSONClient) CreateCollection(ctx context.Context, in *CreateCollectionRequest) (*Collection, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Collection")
	ctx = ctxsetters.WithMethodName(ctx, "CreateCollection")
	out := new(Collection)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceJSONClient) DeleteCollection(ctx context.Context, in *cm.IDRequest) (*cm.RemovedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Collection")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCollection")
	out := new(cm.RemovedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceJSONClient) GetCollection(ctx context.Context, in *cm.IDRequest) (*Collection, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Collection")
	ctx = ctxsetters.WithMethodName(ctx, "GetCollection")
	out := new(Collection)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceJSONClient) GetCollections(ctx context.Context, in *cm.Empty) (*CollectionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Collection")
	ctx = ctxsetters.WithMethodName(ctx, "GetCollections")
	out := new(CollectionsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceJSONClient) GetCollectionsByIDs(ctx context.Context, in *cm.IDsRequest) (*CollectionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Collection")
	ctx = ctxsetters.WithMethodName(ctx, "GetCollectionsByIDs")
	out := new(CollectionsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceJSONClient) UpdateCollection(ctx context.Context, in *UpdateCollectionRequest) (*Collection, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Collection")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCollection")
	out := new(Collection)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceJSONClient) UpdateProductsCollection(ctx context.Context, in *UpdateProductsCollectionRequest) (*UpdateProductsCollectionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Collection")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsCollection")
	out := new(UpdateProductsCollectionResponse)
	err := doJSONRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceJSONClient) RemoveProductsCollection(ctx context.Context, in *RemoveProductsCollectionRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Collection")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveProductsCollection")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ================================
// CollectionService Server Handler
// ================================

type collectionServiceServer struct {
	CollectionService
	hooks *twirp.ServerHooks
}

func NewCollectionServiceServer(svc CollectionService, hooks *twirp.ServerHooks) TwirpServer {
	return &collectionServiceServer{
		CollectionService: svc,
		hooks:             hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *collectionServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// CollectionServicePathPrefix is used for all URL paths on a twirp CollectionService server.
// Requests are always: POST CollectionServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const CollectionServicePathPrefix = "/api/shop.Collection/"

func (s *collectionServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Collection")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/shop.Collection/CreateCollection":
		s.serveCreateCollection(ctx, resp, req)
		return
	case "/api/shop.Collection/DeleteCollection":
		s.serveDeleteCollection(ctx, resp, req)
		return
	case "/api/shop.Collection/GetCollection":
		s.serveGetCollection(ctx, resp, req)
		return
	case "/api/shop.Collection/GetCollections":
		s.serveGetCollections(ctx, resp, req)
		return
	case "/api/shop.Collection/GetCollectionsByIDs":
		s.serveGetCollectionsByIDs(ctx, resp, req)
		return
	case "/api/shop.Collection/UpdateCollection":
		s.serveUpdateCollection(ctx, resp, req)
		return
	case "/api/shop.Collection/UpdateProductsCollection":
		s.serveUpdateProductsCollection(ctx, resp, req)
		return
	case "/api/shop.Collection/RemoveProductsCollection":
		s.serveRemoveProductsCollection(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *collectionServiceServer) serveCreateCollection(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateCollectionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateCollectionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *collectionServiceServer) serveCreateCollectionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateCollection")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CreateCollectionRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Collection
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CollectionService.CreateCollection(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Collection and nil error while calling CreateCollection. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *collectionServiceServer) serveCreateCollectionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateCollection")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CreateCollectionRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Collection
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CollectionService.CreateCollection(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Collection and nil error while calling CreateCollection. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *collectionServiceServer) serveDeleteCollection(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteCollectionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteCollectionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *collectionServiceServer) serveDeleteCollectionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCollection")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.RemovedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CollectionService.DeleteCollection(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.RemovedResponse and nil error while calling DeleteCollection. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *collectionServiceServer) serveDeleteCollectionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCollection")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.RemovedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CollectionService.DeleteCollection(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.RemovedResponse and nil error while calling DeleteCollection. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *collectionServiceServer) serveGetCollection(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetCollectionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetCollectionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *collectionServiceServer) serveGetCollectionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCollection")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Collection
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CollectionService.GetCollection(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Collection and nil error while calling GetCollection. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *collectionServiceServer) serveGetCollectionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCollection")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Collection
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CollectionService.GetCollection(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Collection and nil error while calling GetCollection. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *collectionServiceServer) serveGetCollections(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetCollectionsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetCollectionsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *collectionServiceServer) serveGetCollectionsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCollections")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CollectionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CollectionService.GetCollections(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CollectionsResponse and nil error while calling GetCollections. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *collectionServiceServer) serveGetCollectionsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCollections")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CollectionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CollectionService.GetCollections(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CollectionsResponse and nil error while calling GetCollections. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *collectionServiceServer) serveGetCollectionsByIDs(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetCollectionsByIDsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetCollectionsByIDsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *collectionServiceServer) serveGetCollectionsByIDsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCollectionsByIDs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CollectionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CollectionService.GetCollectionsByIDs(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CollectionsResponse and nil error while calling GetCollectionsByIDs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *collectionServiceServer) serveGetCollectionsByIDsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCollectionsByIDs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CollectionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CollectionService.GetCollectionsByIDs(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CollectionsResponse and nil error while calling GetCollectionsByIDs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *collectionServiceServer) serveUpdateCollection(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateCollectionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateCollectionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *collectionServiceServer) serveUpdateCollectionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCollection")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateCollectionRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Collection
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CollectionService.UpdateCollection(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Collection and nil error while calling UpdateCollection. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *collectionServiceServer) serveUpdateCollectionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCollection")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateCollectionRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Collection
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CollectionService.UpdateCollection(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Collection and nil error while calling UpdateCollection. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *collectionServiceServer) serveUpdateProductsCollection(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateProductsCollectionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateProductsCollectionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *collectionServiceServer) serveUpdateProductsCollectionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsCollection")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateProductsCollectionRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *UpdateProductsCollectionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CollectionService.UpdateProductsCollection(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateProductsCollectionResponse and nil error while calling UpdateProductsCollection. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *collectionServiceServer) serveUpdateProductsCollectionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsCollection")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateProductsCollectionRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *UpdateProductsCollectionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CollectionService.UpdateProductsCollection(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateProductsCollectionResponse and nil error while calling UpdateProductsCollection. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *collectionServiceServer) serveRemoveProductsCollection(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoveProductsCollectionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveProductsCollectionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *collectionServiceServer) serveRemoveProductsCollectionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveProductsCollection")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(RemoveProductsCollectionRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CollectionService.RemoveProductsCollection(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling RemoveProductsCollection. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *collectionServiceServer) serveRemoveProductsCollectionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveProductsCollection")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(RemoveProductsCollectionRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CollectionService.RemoveProductsCollection(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling RemoveProductsCollection. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *collectionServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 3
}

func (s *collectionServiceServer) ProtocGenTwirpVersion() string {
	return "v5.8.0"
}

func (s *collectionServiceServer) PathPrefix() string {
	return CollectionServicePathPrefix
}

// =========================
// CustomerService Interface
// =========================

type CustomerService interface {
	CreateCustomer(context.Context, *CreateCustomerRequest) (*Customer, error)

	UpdateCustomer(context.Context, *UpdateCustomerRequest) (*Customer, error)

	DeleteCustomer(context.Context, *cm.IDRequest) (*cm.DeletedResponse, error)

	GetCustomer(context.Context, *cm.IDRequest) (*Customer, error)

	GetCustomerDetails(context.Context, *cm.IDRequest) (*CustomerDetailsResponse, error)

	GetCustomers(context.Context, *GetCustomersRequest) (*CustomersResponse, error)

	GetCustomersByIDs(context.Context, *cm.IDsRequest) (*CustomersResponse, error)

	BatchSetCustomersStatus(context.Context, *SetCustomersStatusRequest) (*cm.UpdatedResponse, error)

	GetCustomerAddresses(context.Context, *GetCustomerAddressesRequest) (*CustomerAddressesResponse, error)

	CreateCustomerAddress(context.Context, *CreateCustomerAddressRequest) (*CustomerAddress, error)

	UpdateCustomerAddress(context.Context, *UpdateCustomerAddressRequest) (*CustomerAddress, error)

	DeleteCustomerAddress(context.Context, *cm.IDRequest) (*cm.DeletedResponse, error)
}

// ===============================
// CustomerService Protobuf Client
// ===============================

type customerServiceProtobufClient struct {
	client HTTPClient
	urls   [12]string
}

// NewCustomerServiceProtobufClient creates a Protobuf client that implements the CustomerService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewCustomerServiceProtobufClient(addr string, client HTTPClient) CustomerService {
	prefix := urlBase(addr) + CustomerServicePathPrefix
	urls := [12]string{
		prefix + "CreateCustomer",
		prefix + "UpdateCustomer",
		prefix + "DeleteCustomer",
		prefix + "GetCustomer",
		prefix + "GetCustomerDetails",
		prefix + "GetCustomers",
		prefix + "GetCustomersByIDs",
		prefix + "BatchSetCustomersStatus",
		prefix + "GetCustomerAddresses",
		prefix + "CreateCustomerAddress",
		prefix + "UpdateCustomerAddress",
		prefix + "DeleteCustomerAddress",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &customerServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &customerServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *customerServiceProtobufClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest) (*Customer, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "CreateCustomer")
	out := new(Customer)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceProtobufClient) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest) (*Customer, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCustomer")
	out := new(Customer)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceProtobufClient) DeleteCustomer(ctx context.Context, in *cm.IDRequest) (*cm.DeletedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCustomer")
	out := new(cm.DeletedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceProtobufClient) GetCustomer(ctx context.Context, in *cm.IDRequest) (*Customer, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomer")
	out := new(Customer)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceProtobufClient) GetCustomerDetails(ctx context.Context, in *cm.IDRequest) (*CustomerDetailsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomerDetails")
	out := new(CustomerDetailsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceProtobufClient) GetCustomers(ctx context.Context, in *GetCustomersRequest) (*CustomersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomers")
	out := new(CustomersResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceProtobufClient) GetCustomersByIDs(ctx context.Context, in *cm.IDsRequest) (*CustomersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomersByIDs")
	out := new(CustomersResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceProtobufClient) BatchSetCustomersStatus(ctx context.Context, in *SetCustomersStatusRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "BatchSetCustomersStatus")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceProtobufClient) GetCustomerAddresses(ctx context.Context, in *GetCustomerAddressesRequest) (*CustomerAddressesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomerAddresses")
	out := new(CustomerAddressesResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceProtobufClient) CreateCustomerAddress(ctx context.Context, in *CreateCustomerAddressRequest) (*CustomerAddress, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "CreateCustomerAddress")
	out := new(CustomerAddress)
	err := doProtobufRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceProtobufClient) UpdateCustomerAddress(ctx context.Context, in *UpdateCustomerAddressRequest) (*CustomerAddress, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCustomerAddress")
	out := new(CustomerAddress)
	err := doProtobufRequest(ctx, c.client, c.urls[10], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceProtobufClient) DeleteCustomerAddress(ctx context.Context, in *cm.IDRequest) (*cm.DeletedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCustomerAddress")
	out := new(cm.DeletedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[11], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===========================
// CustomerService JSON Client
// ===========================

type customerServiceJSONClient struct {
	client HTTPClient
	urls   [12]string
}

// NewCustomerServiceJSONClient creates a JSON client that implements the CustomerService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewCustomerServiceJSONClient(addr string, client HTTPClient) CustomerService {
	prefix := urlBase(addr) + CustomerServicePathPrefix
	urls := [12]string{
		prefix + "CreateCustomer",
		prefix + "UpdateCustomer",
		prefix + "DeleteCustomer",
		prefix + "GetCustomer",
		prefix + "GetCustomerDetails",
		prefix + "GetCustomers",
		prefix + "GetCustomersByIDs",
		prefix + "BatchSetCustomersStatus",
		prefix + "GetCustomerAddresses",
		prefix + "CreateCustomerAddress",
		prefix + "UpdateCustomerAddress",
		prefix + "DeleteCustomerAddress",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &customerServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &customerServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *customerServiceJSONClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest) (*Customer, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "CreateCustomer")
	out := new(Customer)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceJSONClient) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest) (*Customer, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCustomer")
	out := new(Customer)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceJSONClient) DeleteCustomer(ctx context.Context, in *cm.IDRequest) (*cm.DeletedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCustomer")
	out := new(cm.DeletedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceJSONClient) GetCustomer(ctx context.Context, in *cm.IDRequest) (*Customer, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomer")
	out := new(Customer)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceJSONClient) GetCustomerDetails(ctx context.Context, in *cm.IDRequest) (*CustomerDetailsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomerDetails")
	out := new(CustomerDetailsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceJSONClient) GetCustomers(ctx context.Context, in *GetCustomersRequest) (*CustomersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomers")
	out := new(CustomersResponse)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceJSONClient) GetCustomersByIDs(ctx context.Context, in *cm.IDsRequest) (*CustomersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomersByIDs")
	out := new(CustomersResponse)
	err := doJSONRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceJSONClient) BatchSetCustomersStatus(ctx context.Context, in *SetCustomersStatusRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "BatchSetCustomersStatus")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceJSONClient) GetCustomerAddresses(ctx context.Context, in *GetCustomerAddressesRequest) (*CustomerAddressesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomerAddresses")
	out := new(CustomerAddressesResponse)
	err := doJSONRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceJSONClient) CreateCustomerAddress(ctx context.Context, in *CreateCustomerAddressRequest) (*CustomerAddress, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "CreateCustomerAddress")
	out := new(CustomerAddress)
	err := doJSONRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceJSONClient) UpdateCustomerAddress(ctx context.Context, in *UpdateCustomerAddressRequest) (*CustomerAddress, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCustomerAddress")
	out := new(CustomerAddress)
	err := doJSONRequest(ctx, c.client, c.urls[10], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceJSONClient) DeleteCustomerAddress(ctx context.Context, in *cm.IDRequest) (*cm.DeletedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCustomerAddress")
	out := new(cm.DeletedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[11], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==============================
// CustomerService Server Handler
// ==============================

type customerServiceServer struct {
	CustomerService
	hooks *twirp.ServerHooks
}

func NewCustomerServiceServer(svc CustomerService, hooks *twirp.ServerHooks) TwirpServer {
	return &customerServiceServer{
		CustomerService: svc,
		hooks:           hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *customerServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// CustomerServicePathPrefix is used for all URL paths on a twirp CustomerService server.
// Requests are always: POST CustomerServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const CustomerServicePathPrefix = "/api/shop.Customer/"

func (s *customerServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Customer")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/shop.Customer/CreateCustomer":
		s.serveCreateCustomer(ctx, resp, req)
		return
	case "/api/shop.Customer/UpdateCustomer":
		s.serveUpdateCustomer(ctx, resp, req)
		return
	case "/api/shop.Customer/DeleteCustomer":
		s.serveDeleteCustomer(ctx, resp, req)
		return
	case "/api/shop.Customer/GetCustomer":
		s.serveGetCustomer(ctx, resp, req)
		return
	case "/api/shop.Customer/GetCustomerDetails":
		s.serveGetCustomerDetails(ctx, resp, req)
		return
	case "/api/shop.Customer/GetCustomers":
		s.serveGetCustomers(ctx, resp, req)
		return
	case "/api/shop.Customer/GetCustomersByIDs":
		s.serveGetCustomersByIDs(ctx, resp, req)
		return
	case "/api/shop.Customer/BatchSetCustomersStatus":
		s.serveBatchSetCustomersStatus(ctx, resp, req)
		return
	case "/api/shop.Customer/GetCustomerAddresses":
		s.serveGetCustomerAddresses(ctx, resp, req)
		return
	case "/api/shop.Customer/CreateCustomerAddress":
		s.serveCreateCustomerAddress(ctx, resp, req)
		return
	case "/api/shop.Customer/UpdateCustomerAddress":
		s.serveUpdateCustomerAddress(ctx, resp, req)
		return
	case "/api/shop.Customer/DeleteCustomerAddress":
		s.serveDeleteCustomerAddress(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *customerServiceServer) serveCreateCustomer(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateCustomerJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateCustomerProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *customerServiceServer) serveCreateCustomerJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateCustomer")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CreateCustomerRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Customer
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.CreateCustomer(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Customer and nil error while calling CreateCustomer. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveCreateCustomerProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateCustomer")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CreateCustomerRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Customer
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.CreateCustomer(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Customer and nil error while calling CreateCustomer. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveUpdateCustomer(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateCustomerJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateCustomerProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *customerServiceServer) serveUpdateCustomerJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCustomer")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateCustomerRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Customer
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.UpdateCustomer(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Customer and nil error while calling UpdateCustomer. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveUpdateCustomerProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCustomer")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateCustomerRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Customer
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.UpdateCustomer(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Customer and nil error while calling UpdateCustomer. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveDeleteCustomer(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteCustomerJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteCustomerProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *customerServiceServer) serveDeleteCustomerJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCustomer")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.DeletedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.DeleteCustomer(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.DeletedResponse and nil error while calling DeleteCustomer. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveDeleteCustomerProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCustomer")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.DeletedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.DeleteCustomer(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.DeletedResponse and nil error while calling DeleteCustomer. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveGetCustomer(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetCustomerJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetCustomerProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *customerServiceServer) serveGetCustomerJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomer")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Customer
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.GetCustomer(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Customer and nil error while calling GetCustomer. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveGetCustomerProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomer")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Customer
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.GetCustomer(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Customer and nil error while calling GetCustomer. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveGetCustomerDetails(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetCustomerDetailsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetCustomerDetailsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *customerServiceServer) serveGetCustomerDetailsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomerDetails")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CustomerDetailsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.GetCustomerDetails(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CustomerDetailsResponse and nil error while calling GetCustomerDetails. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveGetCustomerDetailsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomerDetails")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CustomerDetailsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.GetCustomerDetails(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CustomerDetailsResponse and nil error while calling GetCustomerDetails. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveGetCustomers(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetCustomersJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetCustomersProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *customerServiceServer) serveGetCustomersJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomers")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetCustomersRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CustomersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.GetCustomers(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CustomersResponse and nil error while calling GetCustomers. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveGetCustomersProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomers")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetCustomersRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CustomersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.GetCustomers(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CustomersResponse and nil error while calling GetCustomers. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveGetCustomersByIDs(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetCustomersByIDsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetCustomersByIDsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *customerServiceServer) serveGetCustomersByIDsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomersByIDs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CustomersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.GetCustomersByIDs(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CustomersResponse and nil error while calling GetCustomersByIDs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveGetCustomersByIDsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomersByIDs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CustomersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.GetCustomersByIDs(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CustomersResponse and nil error while calling GetCustomersByIDs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveBatchSetCustomersStatus(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveBatchSetCustomersStatusJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveBatchSetCustomersStatusProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *customerServiceServer) serveBatchSetCustomersStatusJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "BatchSetCustomersStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(SetCustomersStatusRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.BatchSetCustomersStatus(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling BatchSetCustomersStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveBatchSetCustomersStatusProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "BatchSetCustomersStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(SetCustomersStatusRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.BatchSetCustomersStatus(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling BatchSetCustomersStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveGetCustomerAddresses(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetCustomerAddressesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetCustomerAddressesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *customerServiceServer) serveGetCustomerAddressesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomerAddresses")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetCustomerAddressesRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CustomerAddressesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.GetCustomerAddresses(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CustomerAddressesResponse and nil error while calling GetCustomerAddresses. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveGetCustomerAddressesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCustomerAddresses")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetCustomerAddressesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CustomerAddressesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.GetCustomerAddresses(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CustomerAddressesResponse and nil error while calling GetCustomerAddresses. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveCreateCustomerAddress(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateCustomerAddressJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateCustomerAddressProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *customerServiceServer) serveCreateCustomerAddressJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateCustomerAddress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CreateCustomerAddressRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CustomerAddress
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.CreateCustomerAddress(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CustomerAddress and nil error while calling CreateCustomerAddress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveCreateCustomerAddressProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateCustomerAddress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CreateCustomerAddressRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CustomerAddress
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.CreateCustomerAddress(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CustomerAddress and nil error while calling CreateCustomerAddress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveUpdateCustomerAddress(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateCustomerAddressJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateCustomerAddressProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *customerServiceServer) serveUpdateCustomerAddressJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCustomerAddress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateCustomerAddressRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CustomerAddress
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.UpdateCustomerAddress(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CustomerAddress and nil error while calling UpdateCustomerAddress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveUpdateCustomerAddressProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCustomerAddress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateCustomerAddressRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CustomerAddress
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.UpdateCustomerAddress(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CustomerAddress and nil error while calling UpdateCustomerAddress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveDeleteCustomerAddress(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteCustomerAddressJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteCustomerAddressProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *customerServiceServer) serveDeleteCustomerAddressJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCustomerAddress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.DeletedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.DeleteCustomerAddress(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.DeletedResponse and nil error while calling DeleteCustomerAddress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) serveDeleteCustomerAddressProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteCustomerAddress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.DeletedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.CustomerService.DeleteCustomerAddress(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.DeletedResponse and nil error while calling DeleteCustomerAddress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *customerServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 4
}

func (s *customerServiceServer) ProtocGenTwirpVersion() string {
	return "v5.8.0"
}

func (s *customerServiceServer) PathPrefix() string {
	return CustomerServicePathPrefix
}

// ========================
// ProductService Interface
// ========================

type ProductService interface {
	GetProduct(context.Context, *cm.IDRequest) (*ShopProduct, error)

	GetProducts(context.Context, *GetVariantsRequest) (*ShopProductsResponse, error)

	GetProductsByIDs(context.Context, *cm.IDsRequest) (*ShopProductsResponse, error)

	CreateProduct(context.Context, *CreateProductRequest) (*ShopProduct, error)

	UpdateProduct(context.Context, *UpdateProductRequest) (*ShopProduct, error)

	UpdateProductsStatus(context.Context, *UpdateProductStatusRequest) (*UpdateProductStatusResponse, error)

	UpdateProductsTags(context.Context, *UpdateProductsTagsRequest) (*cm.UpdatedResponse, error)

	UpdateProductImages(context.Context, *UpdateVariantImagesRequest) (*ShopProduct, error)

	RemoveProducts(context.Context, *RemoveVariantsRequest) (*cm.RemovedResponse, error)

	GetVariant(context.Context, *cm.IDRequest) (*ShopVariant, error)

	GetVariantsByIDs(context.Context, *cm.IDsRequest) (*ShopVariantsResponse, error)

	CreateVariant(context.Context, *CreateVariantRequest) (*ShopVariant, error)

	UpdateVariant(context.Context, *UpdateVariantRequest) (*ShopVariant, error)

	UpdateVariantImages(context.Context, *UpdateVariantImagesRequest) (*ShopVariant, error)

	UpdateVariantsStatus(context.Context, *UpdateProductStatusRequest) (*UpdateProductStatusResponse, error)

	UpdateVariantAttributes(context.Context, *UpdateVariantAttributesRequest) (*ShopVariant, error)

	RemoveVariants(context.Context, *RemoveVariantsRequest) (*cm.RemovedResponse, error)

	// deprecated
	AddProducts(context.Context, *AddProductsRequest) (*AddProductsResponse, error)
}

// ==============================
// ProductService Protobuf Client
// ==============================

type productServiceProtobufClient struct {
	client HTTPClient
	urls   [18]string
}

// NewProductServiceProtobufClient creates a Protobuf client that implements the ProductService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewProductServiceProtobufClient(addr string, client HTTPClient) ProductService {
	prefix := urlBase(addr) + ProductServicePathPrefix
	urls := [18]string{
		prefix + "GetProduct",
		prefix + "GetProducts",
		prefix + "GetProductsByIDs",
		prefix + "CreateProduct",
		prefix + "UpdateProduct",
		prefix + "UpdateProductsStatus",
		prefix + "UpdateProductsTags",
		prefix + "UpdateProductImages",
		prefix + "RemoveProducts",
		prefix + "GetVariant",
		prefix + "GetVariantsByIDs",
		prefix + "CreateVariant",
		prefix + "UpdateVariant",
		prefix + "UpdateVariantImages",
		prefix + "UpdateVariantsStatus",
		prefix + "UpdateVariantAttributes",
		prefix + "RemoveVariants",
		prefix + "AddProducts",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &productServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &productServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *productServiceProtobufClient) GetProduct(ctx context.Context, in *cm.IDRequest) (*ShopProduct, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetProduct")
	out := new(ShopProduct)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) GetProducts(ctx context.Context, in *GetVariantsRequest) (*ShopProductsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetProducts")
	out := new(ShopProductsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) GetProductsByIDs(ctx context.Context, in *cm.IDsRequest) (*ShopProductsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetProductsByIDs")
	out := new(ShopProductsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) CreateProduct(ctx context.Context, in *CreateProductRequest) (*ShopProduct, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "CreateProduct")
	out := new(ShopProduct)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest) (*ShopProduct, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProduct")
	out := new(ShopProduct)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) UpdateProductsStatus(ctx context.Context, in *UpdateProductStatusRequest) (*UpdateProductStatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsStatus")
	out := new(UpdateProductStatusResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) UpdateProductsTags(ctx context.Context, in *UpdateProductsTagsRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsTags")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) UpdateProductImages(ctx context.Context, in *UpdateVariantImagesRequest) (*ShopProduct, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductImages")
	out := new(ShopProduct)
	err := doProtobufRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) RemoveProducts(ctx context.Context, in *RemoveVariantsRequest) (*cm.RemovedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveProducts")
	out := new(cm.RemovedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) GetVariant(ctx context.Context, in *cm.IDRequest) (*ShopVariant, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetVariant")
	out := new(ShopVariant)
	err := doProtobufRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) GetVariantsByIDs(ctx context.Context, in *cm.IDsRequest) (*ShopVariantsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetVariantsByIDs")
	out := new(ShopVariantsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[10], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) CreateVariant(ctx context.Context, in *CreateVariantRequest) (*ShopVariant, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "CreateVariant")
	out := new(ShopVariant)
	err := doProtobufRequest(ctx, c.client, c.urls[11], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) UpdateVariant(ctx context.Context, in *UpdateVariantRequest) (*ShopVariant, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariant")
	out := new(ShopVariant)
	err := doProtobufRequest(ctx, c.client, c.urls[12], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) UpdateVariantImages(ctx context.Context, in *UpdateVariantImagesRequest) (*ShopVariant, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantImages")
	out := new(ShopVariant)
	err := doProtobufRequest(ctx, c.client, c.urls[13], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) UpdateVariantsStatus(ctx context.Context, in *UpdateProductStatusRequest) (*UpdateProductStatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantsStatus")
	out := new(UpdateProductStatusResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[14], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) UpdateVariantAttributes(ctx context.Context, in *UpdateVariantAttributesRequest) (*ShopVariant, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantAttributes")
	out := new(ShopVariant)
	err := doProtobufRequest(ctx, c.client, c.urls[15], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) RemoveVariants(ctx context.Context, in *RemoveVariantsRequest) (*cm.RemovedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveVariants")
	out := new(cm.RemovedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[16], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceProtobufClient) AddProducts(ctx context.Context, in *AddProductsRequest) (*AddProductsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "AddProducts")
	out := new(AddProductsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[17], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// ProductService JSON Client
// ==========================

type productServiceJSONClient struct {
	client HTTPClient
	urls   [18]string
}

// NewProductServiceJSONClient creates a JSON client that implements the ProductService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewProductServiceJSONClient(addr string, client HTTPClient) ProductService {
	prefix := urlBase(addr) + ProductServicePathPrefix
	urls := [18]string{
		prefix + "GetProduct",
		prefix + "GetProducts",
		prefix + "GetProductsByIDs",
		prefix + "CreateProduct",
		prefix + "UpdateProduct",
		prefix + "UpdateProductsStatus",
		prefix + "UpdateProductsTags",
		prefix + "UpdateProductImages",
		prefix + "RemoveProducts",
		prefix + "GetVariant",
		prefix + "GetVariantsByIDs",
		prefix + "CreateVariant",
		prefix + "UpdateVariant",
		prefix + "UpdateVariantImages",
		prefix + "UpdateVariantsStatus",
		prefix + "UpdateVariantAttributes",
		prefix + "RemoveVariants",
		prefix + "AddProducts",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &productServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &productServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *productServiceJSONClient) GetProduct(ctx context.Context, in *cm.IDRequest) (*ShopProduct, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetProduct")
	out := new(ShopProduct)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) GetProducts(ctx context.Context, in *GetVariantsRequest) (*ShopProductsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetProducts")
	out := new(ShopProductsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) GetProductsByIDs(ctx context.Context, in *cm.IDsRequest) (*ShopProductsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetProductsByIDs")
	out := new(ShopProductsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) CreateProduct(ctx context.Context, in *CreateProductRequest) (*ShopProduct, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "CreateProduct")
	out := new(ShopProduct)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest) (*ShopProduct, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProduct")
	out := new(ShopProduct)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) UpdateProductsStatus(ctx context.Context, in *UpdateProductStatusRequest) (*UpdateProductStatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsStatus")
	out := new(UpdateProductStatusResponse)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) UpdateProductsTags(ctx context.Context, in *UpdateProductsTagsRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsTags")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) UpdateProductImages(ctx context.Context, in *UpdateVariantImagesRequest) (*ShopProduct, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductImages")
	out := new(ShopProduct)
	err := doJSONRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) RemoveProducts(ctx context.Context, in *RemoveVariantsRequest) (*cm.RemovedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveProducts")
	out := new(cm.RemovedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) GetVariant(ctx context.Context, in *cm.IDRequest) (*ShopVariant, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetVariant")
	out := new(ShopVariant)
	err := doJSONRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) GetVariantsByIDs(ctx context.Context, in *cm.IDsRequest) (*ShopVariantsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "GetVariantsByIDs")
	out := new(ShopVariantsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[10], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) CreateVariant(ctx context.Context, in *CreateVariantRequest) (*ShopVariant, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "CreateVariant")
	out := new(ShopVariant)
	err := doJSONRequest(ctx, c.client, c.urls[11], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) UpdateVariant(ctx context.Context, in *UpdateVariantRequest) (*ShopVariant, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariant")
	out := new(ShopVariant)
	err := doJSONRequest(ctx, c.client, c.urls[12], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) UpdateVariantImages(ctx context.Context, in *UpdateVariantImagesRequest) (*ShopVariant, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantImages")
	out := new(ShopVariant)
	err := doJSONRequest(ctx, c.client, c.urls[13], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) UpdateVariantsStatus(ctx context.Context, in *UpdateProductStatusRequest) (*UpdateProductStatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantsStatus")
	out := new(UpdateProductStatusResponse)
	err := doJSONRequest(ctx, c.client, c.urls[14], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) UpdateVariantAttributes(ctx context.Context, in *UpdateVariantAttributesRequest) (*ShopVariant, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantAttributes")
	out := new(ShopVariant)
	err := doJSONRequest(ctx, c.client, c.urls[15], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) RemoveVariants(ctx context.Context, in *RemoveVariantsRequest) (*cm.RemovedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveVariants")
	out := new(cm.RemovedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[16], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceJSONClient) AddProducts(ctx context.Context, in *AddProductsRequest) (*AddProductsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithMethodName(ctx, "AddProducts")
	out := new(AddProductsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[17], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =============================
// ProductService Server Handler
// =============================

type productServiceServer struct {
	ProductService
	hooks *twirp.ServerHooks
}

func NewProductServiceServer(svc ProductService, hooks *twirp.ServerHooks) TwirpServer {
	return &productServiceServer{
		ProductService: svc,
		hooks:          hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *productServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// ProductServicePathPrefix is used for all URL paths on a twirp ProductService server.
// Requests are always: POST ProductServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const ProductServicePathPrefix = "/api/shop.Product/"

func (s *productServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Product")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/shop.Product/GetProduct":
		s.serveGetProduct(ctx, resp, req)
		return
	case "/api/shop.Product/GetProducts":
		s.serveGetProducts(ctx, resp, req)
		return
	case "/api/shop.Product/GetProductsByIDs":
		s.serveGetProductsByIDs(ctx, resp, req)
		return
	case "/api/shop.Product/CreateProduct":
		s.serveCreateProduct(ctx, resp, req)
		return
	case "/api/shop.Product/UpdateProduct":
		s.serveUpdateProduct(ctx, resp, req)
		return
	case "/api/shop.Product/UpdateProductsStatus":
		s.serveUpdateProductsStatus(ctx, resp, req)
		return
	case "/api/shop.Product/UpdateProductsTags":
		s.serveUpdateProductsTags(ctx, resp, req)
		return
	case "/api/shop.Product/UpdateProductImages":
		s.serveUpdateProductImages(ctx, resp, req)
		return
	case "/api/shop.Product/RemoveProducts":
		s.serveRemoveProducts(ctx, resp, req)
		return
	case "/api/shop.Product/GetVariant":
		s.serveGetVariant(ctx, resp, req)
		return
	case "/api/shop.Product/GetVariantsByIDs":
		s.serveGetVariantsByIDs(ctx, resp, req)
		return
	case "/api/shop.Product/CreateVariant":
		s.serveCreateVariant(ctx, resp, req)
		return
	case "/api/shop.Product/UpdateVariant":
		s.serveUpdateVariant(ctx, resp, req)
		return
	case "/api/shop.Product/UpdateVariantImages":
		s.serveUpdateVariantImages(ctx, resp, req)
		return
	case "/api/shop.Product/UpdateVariantsStatus":
		s.serveUpdateVariantsStatus(ctx, resp, req)
		return
	case "/api/shop.Product/UpdateVariantAttributes":
		s.serveUpdateVariantAttributes(ctx, resp, req)
		return
	case "/api/shop.Product/RemoveVariants":
		s.serveRemoveVariants(ctx, resp, req)
		return
	case "/api/shop.Product/AddProducts":
		s.serveAddProducts(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *productServiceServer) serveGetProduct(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetProductJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetProductProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveGetProductJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProduct")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopProduct
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetProduct(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopProduct and nil error while calling GetProduct. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetProductProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProduct")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopProduct
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetProduct(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopProduct and nil error while calling GetProduct. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetProducts(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetProductsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetProductsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveGetProductsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProducts")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetVariantsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopProductsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetProducts(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopProductsResponse and nil error while calling GetProducts. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetProductsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProducts")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetVariantsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopProductsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetProducts(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopProductsResponse and nil error while calling GetProducts. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetProductsByIDs(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetProductsByIDsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetProductsByIDsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveGetProductsByIDsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProductsByIDs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopProductsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetProductsByIDs(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopProductsResponse and nil error while calling GetProductsByIDs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetProductsByIDsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProductsByIDs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopProductsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetProductsByIDs(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopProductsResponse and nil error while calling GetProductsByIDs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveCreateProduct(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateProductJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateProductProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveCreateProductJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateProduct")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CreateProductRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopProduct
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.CreateProduct(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopProduct and nil error while calling CreateProduct. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveCreateProductProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateProduct")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CreateProductRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopProduct
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.CreateProduct(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopProduct and nil error while calling CreateProduct. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateProduct(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateProductJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateProductProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveUpdateProductJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProduct")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateProductRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopProduct
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateProduct(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopProduct and nil error while calling UpdateProduct. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateProductProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProduct")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateProductRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopProduct
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateProduct(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopProduct and nil error while calling UpdateProduct. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateProductsStatus(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateProductsStatusJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateProductsStatusProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveUpdateProductsStatusJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateProductStatusRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *UpdateProductStatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateProductsStatus(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateProductStatusResponse and nil error while calling UpdateProductsStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateProductsStatusProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateProductStatusRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *UpdateProductStatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateProductsStatus(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateProductStatusResponse and nil error while calling UpdateProductsStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateProductsTags(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateProductsTagsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateProductsTagsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveUpdateProductsTagsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsTags")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateProductsTagsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateProductsTags(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateProductsTags. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateProductsTagsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsTags")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateProductsTagsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateProductsTags(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateProductsTags. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateProductImages(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateProductImagesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateProductImagesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveUpdateProductImagesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductImages")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateVariantImagesRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopProduct
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateProductImages(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopProduct and nil error while calling UpdateProductImages. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateProductImagesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductImages")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateVariantImagesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopProduct
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateProductImages(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopProduct and nil error while calling UpdateProductImages. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveRemoveProducts(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoveProductsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveProductsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveRemoveProductsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveProducts")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(RemoveVariantsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.RemovedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.RemoveProducts(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.RemovedResponse and nil error while calling RemoveProducts. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveRemoveProductsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveProducts")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(RemoveVariantsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.RemovedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.RemoveProducts(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.RemovedResponse and nil error while calling RemoveProducts. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetVariant(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetVariantJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetVariantProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveGetVariantJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetVariant")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopVariant
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetVariant(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopVariant and nil error while calling GetVariant. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetVariantProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetVariant")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopVariant
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetVariant(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopVariant and nil error while calling GetVariant. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetVariantsByIDs(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetVariantsByIDsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetVariantsByIDsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveGetVariantsByIDsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetVariantsByIDs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopVariantsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetVariantsByIDs(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopVariantsResponse and nil error while calling GetVariantsByIDs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveGetVariantsByIDsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetVariantsByIDs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopVariantsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.GetVariantsByIDs(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopVariantsResponse and nil error while calling GetVariantsByIDs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveCreateVariant(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateVariantJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateVariantProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveCreateVariantJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateVariant")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CreateVariantRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopVariant
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.CreateVariant(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopVariant and nil error while calling CreateVariant. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveCreateVariantProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateVariant")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CreateVariantRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopVariant
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.CreateVariant(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopVariant and nil error while calling CreateVariant. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateVariant(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateVariantJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateVariantProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveUpdateVariantJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariant")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateVariantRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopVariant
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateVariant(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopVariant and nil error while calling UpdateVariant. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateVariantProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariant")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateVariantRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopVariant
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateVariant(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopVariant and nil error while calling UpdateVariant. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateVariantImages(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateVariantImagesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateVariantImagesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveUpdateVariantImagesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantImages")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateVariantImagesRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopVariant
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateVariantImages(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopVariant and nil error while calling UpdateVariantImages. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateVariantImagesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantImages")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateVariantImagesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopVariant
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateVariantImages(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopVariant and nil error while calling UpdateVariantImages. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateVariantsStatus(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateVariantsStatusJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateVariantsStatusProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveUpdateVariantsStatusJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantsStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateProductStatusRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *UpdateProductStatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateVariantsStatus(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateProductStatusResponse and nil error while calling UpdateVariantsStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateVariantsStatusProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantsStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateProductStatusRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *UpdateProductStatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateVariantsStatus(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateProductStatusResponse and nil error while calling UpdateVariantsStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateVariantAttributes(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateVariantAttributesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateVariantAttributesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveUpdateVariantAttributesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantAttributes")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateVariantAttributesRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopVariant
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateVariantAttributes(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopVariant and nil error while calling UpdateVariantAttributes. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveUpdateVariantAttributesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateVariantAttributes")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateVariantAttributesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopVariant
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.UpdateVariantAttributes(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopVariant and nil error while calling UpdateVariantAttributes. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveRemoveVariants(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoveVariantsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveVariantsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveRemoveVariantsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveVariants")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(RemoveVariantsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.RemovedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.RemoveVariants(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.RemovedResponse and nil error while calling RemoveVariants. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveRemoveVariantsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveVariants")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(RemoveVariantsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.RemovedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.RemoveVariants(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.RemovedResponse and nil error while calling RemoveVariants. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveAddProducts(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAddProductsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAddProductsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productServiceServer) serveAddProductsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddProducts")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(AddProductsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *AddProductsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.AddProducts(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AddProductsResponse and nil error while calling AddProducts. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) serveAddProductsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddProducts")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(AddProductsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *AddProductsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductService.AddProducts(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AddProductsResponse and nil error while calling AddProducts. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 5
}

func (s *productServiceServer) ProtocGenTwirpVersion() string {
	return "v5.8.0"
}

func (s *productServiceServer) PathPrefix() string {
	return ProductServicePathPrefix
}

// ==============================
// ProductSourceService Interface
// ==============================

// deprecated: 2018.07.31+14
type ProductSourceService interface {
	CreateProductSource(context.Context, *CreateProductSourceRequest) (*ProductSource, error)

	GetShopProductSources(context.Context, *cm.Empty) (*ProductSourcesResponse, error)

	// deprecated: use shop.Product/CreateVariant instead
	CreateVariant(context.Context, *DeprecatedCreateVariantRequest) (*ShopProduct, error)

	CreateProductSourceCategory(context.Context, *CreatePSCategoryRequest) (*Category, error)

	UpdateProductsPSCategory(context.Context, *UpdateProductsPSCategoryRequest) (*cm.UpdatedResponse, error)

	GetProductSourceCategory(context.Context, *cm.IDRequest) (*Category, error)

	GetProductSourceCategories(context.Context, *GetProductSourceCategoriesRequest) (*CategoriesResponse, error)

	UpdateProductSourceCategory(context.Context, *UpdateProductSourceCategoryRequest) (*Category, error)

	RemoveProductSourceCategory(context.Context, *cm.IDRequest) (*cm.RemovedResponse, error)
}

// ====================================
// ProductSourceService Protobuf Client
// ====================================

type productSourceServiceProtobufClient struct {
	client HTTPClient
	urls   [9]string
}

// NewProductSourceServiceProtobufClient creates a Protobuf client that implements the ProductSourceService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewProductSourceServiceProtobufClient(addr string, client HTTPClient) ProductSourceService {
	prefix := urlBase(addr) + ProductSourceServicePathPrefix
	urls := [9]string{
		prefix + "CreateProductSource",
		prefix + "GetShopProductSources",
		prefix + "CreateVariant",
		prefix + "CreateProductSourceCategory",
		prefix + "UpdateProductsPSCategory",
		prefix + "GetProductSourceCategory",
		prefix + "GetProductSourceCategories",
		prefix + "UpdateProductSourceCategory",
		prefix + "RemoveProductSourceCategory",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &productSourceServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &productSourceServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *productSourceServiceProtobufClient) CreateProductSource(ctx context.Context, in *CreateProductSourceRequest) (*ProductSource, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ProductSource")
	ctx = ctxsetters.WithMethodName(ctx, "CreateProductSource")
	out := new(ProductSource)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSourceServiceProtobufClient) GetShopProductSources(ctx context.Context, in *cm.Empty) (*ProductSourcesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ProductSource")
	ctx = ctxsetters.WithMethodName(ctx, "GetShopProductSources")
	out := new(ProductSourcesResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSourceServiceProtobufClient) CreateVariant(ctx context.Context, in *DeprecatedCreateVariantRequest) (*ShopProduct, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ProductSource")
	ctx = ctxsetters.WithMethodName(ctx, "CreateVariant")
	out := new(ShopProduct)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSourceServiceProtobufClient) CreateProductSourceCategory(ctx context.Context, in *CreatePSCategoryRequest) (*Category, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ProductSource")
	ctx = ctxsetters.WithMethodName(ctx, "CreateProductSourceCategory")
	out := new(Category)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSourceServiceProtobufClient) UpdateProductsPSCategory(ctx context.Context, in *UpdateProductsPSCategoryRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ProductSource")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsPSCategory")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSourceServiceProtobufClient) GetProductSourceCategory(ctx context.Context, in *cm.IDRequest) (*Category, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ProductSource")
	ctx = ctxsetters.WithMethodName(ctx, "GetProductSourceCategory")
	out := new(Category)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSourceServiceProtobufClient) GetProductSourceCategories(ctx context.Context, in *GetProductSourceCategoriesRequest) (*CategoriesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ProductSource")
	ctx = ctxsetters.WithMethodName(ctx, "GetProductSourceCategories")
	out := new(CategoriesResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSourceServiceProtobufClient) UpdateProductSourceCategory(ctx context.Context, in *UpdateProductSourceCategoryRequest) (*Category, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ProductSource")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductSourceCategory")
	out := new(Category)
	err := doProtobufRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSourceServiceProtobufClient) RemoveProductSourceCategory(ctx context.Context, in *cm.IDRequest) (*cm.RemovedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ProductSource")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveProductSourceCategory")
	out := new(cm.RemovedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ================================
// ProductSourceService JSON Client
// ================================

type productSourceServiceJSONClient struct {
	client HTTPClient
	urls   [9]string
}

// NewProductSourceServiceJSONClient creates a JSON client that implements the ProductSourceService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewProductSourceServiceJSONClient(addr string, client HTTPClient) ProductSourceService {
	prefix := urlBase(addr) + ProductSourceServicePathPrefix
	urls := [9]string{
		prefix + "CreateProductSource",
		prefix + "GetShopProductSources",
		prefix + "CreateVariant",
		prefix + "CreateProductSourceCategory",
		prefix + "UpdateProductsPSCategory",
		prefix + "GetProductSourceCategory",
		prefix + "GetProductSourceCategories",
		prefix + "UpdateProductSourceCategory",
		prefix + "RemoveProductSourceCategory",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &productSourceServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &productSourceServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *productSourceServiceJSONClient) CreateProductSource(ctx context.Context, in *CreateProductSourceRequest) (*ProductSource, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ProductSource")
	ctx = ctxsetters.WithMethodName(ctx, "CreateProductSource")
	out := new(ProductSource)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSourceServiceJSONClient) GetShopProductSources(ctx context.Context, in *cm.Empty) (*ProductSourcesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ProductSource")
	ctx = ctxsetters.WithMethodName(ctx, "GetShopProductSources")
	out := new(ProductSourcesResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSourceServiceJSONClient) CreateVariant(ctx context.Context, in *DeprecatedCreateVariantRequest) (*ShopProduct, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ProductSource")
	ctx = ctxsetters.WithMethodName(ctx, "CreateVariant")
	out := new(ShopProduct)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSourceServiceJSONClient) CreateProductSourceCategory(ctx context.Context, in *CreatePSCategoryRequest) (*Category, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ProductSource")
	ctx = ctxsetters.WithMethodName(ctx, "CreateProductSourceCategory")
	out := new(Category)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSourceServiceJSONClient) UpdateProductsPSCategory(ctx context.Context, in *UpdateProductsPSCategoryRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ProductSource")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsPSCategory")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSourceServiceJSONClient) GetProductSourceCategory(ctx context.Context, in *cm.IDRequest) (*Category, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ProductSource")
	ctx = ctxsetters.WithMethodName(ctx, "GetProductSourceCategory")
	out := new(Category)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSourceServiceJSONClient) GetProductSourceCategories(ctx context.Context, in *GetProductSourceCategoriesRequest) (*CategoriesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ProductSource")
	ctx = ctxsetters.WithMethodName(ctx, "GetProductSourceCategories")
	out := new(CategoriesResponse)
	err := doJSONRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSourceServiceJSONClient) UpdateProductSourceCategory(ctx context.Context, in *UpdateProductSourceCategoryRequest) (*Category, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ProductSource")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductSourceCategory")
	out := new(Category)
	err := doJSONRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSourceServiceJSONClient) RemoveProductSourceCategory(ctx context.Context, in *cm.IDRequest) (*cm.RemovedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ProductSource")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveProductSourceCategory")
	out := new(cm.RemovedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===================================
// ProductSourceService Server Handler
// ===================================

type productSourceServiceServer struct {
	ProductSourceService
	hooks *twirp.ServerHooks
}

func NewProductSourceServiceServer(svc ProductSourceService, hooks *twirp.ServerHooks) TwirpServer {
	return &productSourceServiceServer{
		ProductSourceService: svc,
		hooks:                hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *productSourceServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// ProductSourceServicePathPrefix is used for all URL paths on a twirp ProductSourceService server.
// Requests are always: POST ProductSourceServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const ProductSourceServicePathPrefix = "/api/shop.ProductSource/"

func (s *productSourceServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "ProductSource")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/shop.ProductSource/CreateProductSource":
		s.serveCreateProductSource(ctx, resp, req)
		return
	case "/api/shop.ProductSource/GetShopProductSources":
		s.serveGetShopProductSources(ctx, resp, req)
		return
	case "/api/shop.ProductSource/CreateVariant":
		s.serveCreateVariant(ctx, resp, req)
		return
	case "/api/shop.ProductSource/CreateProductSourceCategory":
		s.serveCreateProductSourceCategory(ctx, resp, req)
		return
	case "/api/shop.ProductSource/UpdateProductsPSCategory":
		s.serveUpdateProductsPSCategory(ctx, resp, req)
		return
	case "/api/shop.ProductSource/GetProductSourceCategory":
		s.serveGetProductSourceCategory(ctx, resp, req)
		return
	case "/api/shop.ProductSource/GetProductSourceCategories":
		s.serveGetProductSourceCategories(ctx, resp, req)
		return
	case "/api/shop.ProductSource/UpdateProductSourceCategory":
		s.serveUpdateProductSourceCategory(ctx, resp, req)
		return
	case "/api/shop.ProductSource/RemoveProductSourceCategory":
		s.serveRemoveProductSourceCategory(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *productSourceServiceServer) serveCreateProductSource(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateProductSourceJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateProductSourceProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productSourceServiceServer) serveCreateProductSourceJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateProductSource")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CreateProductSourceRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ProductSource
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductSourceService.CreateProductSource(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ProductSource and nil error while calling CreateProductSource. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productSourceServiceServer) serveCreateProductSourceProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateProductSource")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CreateProductSourceRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ProductSource
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductSourceService.CreateProductSource(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ProductSource and nil error while calling CreateProductSource. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productSourceServiceServer) serveGetShopProductSources(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetShopProductSourcesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetShopProductSourcesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productSourceServiceServer) serveGetShopProductSourcesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetShopProductSources")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ProductSourcesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductSourceService.GetShopProductSources(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ProductSourcesResponse and nil error while calling GetShopProductSources. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productSourceServiceServer) serveGetShopProductSourcesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetShopProductSources")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ProductSourcesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductSourceService.GetShopProductSources(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ProductSourcesResponse and nil error while calling GetShopProductSources. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productSourceServiceServer) serveCreateVariant(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateVariantJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateVariantProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productSourceServiceServer) serveCreateVariantJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateVariant")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(DeprecatedCreateVariantRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopProduct
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductSourceService.CreateVariant(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopProduct and nil error while calling CreateVariant. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productSourceServiceServer) serveCreateVariantProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateVariant")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(DeprecatedCreateVariantRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopProduct
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductSourceService.CreateVariant(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopProduct and nil error while calling CreateVariant. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productSourceServiceServer) serveCreateProductSourceCategory(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateProductSourceCategoryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateProductSourceCategoryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productSourceServiceServer) serveCreateProductSourceCategoryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateProductSourceCategory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CreatePSCategoryRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Category
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductSourceService.CreateProductSourceCategory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Category and nil error while calling CreateProductSourceCategory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productSourceServiceServer) serveCreateProductSourceCategoryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateProductSourceCategory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CreatePSCategoryRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Category
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductSourceService.CreateProductSourceCategory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Category and nil error while calling CreateProductSourceCategory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productSourceServiceServer) serveUpdateProductsPSCategory(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateProductsPSCategoryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateProductsPSCategoryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productSourceServiceServer) serveUpdateProductsPSCategoryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsPSCategory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateProductsPSCategoryRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductSourceService.UpdateProductsPSCategory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateProductsPSCategory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productSourceServiceServer) serveUpdateProductsPSCategoryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductsPSCategory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateProductsPSCategoryRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductSourceService.UpdateProductsPSCategory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateProductsPSCategory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productSourceServiceServer) serveGetProductSourceCategory(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetProductSourceCategoryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetProductSourceCategoryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productSourceServiceServer) serveGetProductSourceCategoryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProductSourceCategory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Category
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductSourceService.GetProductSourceCategory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Category and nil error while calling GetProductSourceCategory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productSourceServiceServer) serveGetProductSourceCategoryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProductSourceCategory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Category
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductSourceService.GetProductSourceCategory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Category and nil error while calling GetProductSourceCategory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productSourceServiceServer) serveGetProductSourceCategories(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetProductSourceCategoriesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetProductSourceCategoriesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productSourceServiceServer) serveGetProductSourceCategoriesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProductSourceCategories")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetProductSourceCategoriesRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CategoriesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductSourceService.GetProductSourceCategories(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CategoriesResponse and nil error while calling GetProductSourceCategories. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productSourceServiceServer) serveGetProductSourceCategoriesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetProductSourceCategories")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetProductSourceCategoriesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CategoriesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductSourceService.GetProductSourceCategories(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CategoriesResponse and nil error while calling GetProductSourceCategories. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productSourceServiceServer) serveUpdateProductSourceCategory(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateProductSourceCategoryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateProductSourceCategoryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productSourceServiceServer) serveUpdateProductSourceCategoryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductSourceCategory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateProductSourceCategoryRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Category
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductSourceService.UpdateProductSourceCategory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Category and nil error while calling UpdateProductSourceCategory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productSourceServiceServer) serveUpdateProductSourceCategoryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProductSourceCategory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateProductSourceCategoryRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *Category
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductSourceService.UpdateProductSourceCategory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Category and nil error while calling UpdateProductSourceCategory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productSourceServiceServer) serveRemoveProductSourceCategory(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoveProductSourceCategoryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveProductSourceCategoryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *productSourceServiceServer) serveRemoveProductSourceCategoryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveProductSourceCategory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.RemovedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductSourceService.RemoveProductSourceCategory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.RemovedResponse and nil error while calling RemoveProductSourceCategory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productSourceServiceServer) serveRemoveProductSourceCategoryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveProductSourceCategory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.RemovedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ProductSourceService.RemoveProductSourceCategory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.RemovedResponse and nil error while calling RemoveProductSourceCategory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *productSourceServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 6
}

func (s *productSourceServiceServer) ProtocGenTwirpVersion() string {
	return "v5.8.0"
}

func (s *productSourceServiceServer) PathPrefix() string {
	return ProductSourceServicePathPrefix
}

// ======================
// OrderService Interface
// ======================

type OrderService interface {
	CreateOrder(context.Context, *order.CreateOrderRequest) (*order.Order, error)

	GetOrder(context.Context, *cm.IDRequest) (*order.Order, error)

	GetOrders(context.Context, *GetOrdersRequest) (*order.OrdersResponse, error)

	GetOrdersByIDs(context.Context, *etop.IDsRequest) (*order.OrdersResponse, error)

	UpdateOrder(context.Context, *order.UpdateOrderRequest) (*order.Order, error)

	// @deprecated
	UpdateOrdersStatus(context.Context, *UpdateOrdersStatusRequest) (*cm.UpdatedResponse, error)

	ConfirmOrderAndCreateFulfillments(context.Context, *OrderIDRequest) (*order.OrderWithErrorsResponse, error)

	ConfirmOrdersAndCreateFulfillments(context.Context, *OrderIDsRequest) (*cm.ErrorsResponse, error)

	CancelOrder(context.Context, *CancelOrderRequest) (*order.OrderWithErrorsResponse, error)

	UpdateOrderPaymentStatus(context.Context, *UpdateOrderPaymentStatusRequest) (*cm.UpdatedResponse, error)
}

// ============================
// OrderService Protobuf Client
// ============================

type orderServiceProtobufClient struct {
	client HTTPClient
	urls   [10]string
}

// NewOrderServiceProtobufClient creates a Protobuf client that implements the OrderService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewOrderServiceProtobufClient(addr string, client HTTPClient) OrderService {
	prefix := urlBase(addr) + OrderServicePathPrefix
	urls := [10]string{
		prefix + "CreateOrder",
		prefix + "GetOrder",
		prefix + "GetOrders",
		prefix + "GetOrdersByIDs",
		prefix + "UpdateOrder",
		prefix + "UpdateOrdersStatus",
		prefix + "ConfirmOrderAndCreateFulfillments",
		prefix + "ConfirmOrdersAndCreateFulfillments",
		prefix + "CancelOrder",
		prefix + "UpdateOrderPaymentStatus",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &orderServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &orderServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *orderServiceProtobufClient) CreateOrder(ctx context.Context, in *order.CreateOrderRequest) (*order.Order, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "CreateOrder")
	out := new(order.Order)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceProtobufClient) GetOrder(ctx context.Context, in *cm.IDRequest) (*order.Order, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "GetOrder")
	out := new(order.Order)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceProtobufClient) GetOrders(ctx context.Context, in *GetOrdersRequest) (*order.OrdersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "GetOrders")
	out := new(order.OrdersResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceProtobufClient) GetOrdersByIDs(ctx context.Context, in *etop.IDsRequest) (*order.OrdersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "GetOrdersByIDs")
	out := new(order.OrdersResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceProtobufClient) UpdateOrder(ctx context.Context, in *order.UpdateOrderRequest) (*order.Order, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateOrder")
	out := new(order.Order)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceProtobufClient) UpdateOrdersStatus(ctx context.Context, in *UpdateOrdersStatusRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateOrdersStatus")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceProtobufClient) ConfirmOrderAndCreateFulfillments(ctx context.Context, in *OrderIDRequest) (*order.OrderWithErrorsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmOrderAndCreateFulfillments")
	out := new(order.OrderWithErrorsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceProtobufClient) ConfirmOrdersAndCreateFulfillments(ctx context.Context, in *OrderIDsRequest) (*cm.ErrorsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmOrdersAndCreateFulfillments")
	out := new(cm.ErrorsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceProtobufClient) CancelOrder(ctx context.Context, in *CancelOrderRequest) (*order.OrderWithErrorsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "CancelOrder")
	out := new(order.OrderWithErrorsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceProtobufClient) UpdateOrderPaymentStatus(ctx context.Context, in *UpdateOrderPaymentStatusRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateOrderPaymentStatus")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ========================
// OrderService JSON Client
// ========================

type orderServiceJSONClient struct {
	client HTTPClient
	urls   [10]string
}

// NewOrderServiceJSONClient creates a JSON client that implements the OrderService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewOrderServiceJSONClient(addr string, client HTTPClient) OrderService {
	prefix := urlBase(addr) + OrderServicePathPrefix
	urls := [10]string{
		prefix + "CreateOrder",
		prefix + "GetOrder",
		prefix + "GetOrders",
		prefix + "GetOrdersByIDs",
		prefix + "UpdateOrder",
		prefix + "UpdateOrdersStatus",
		prefix + "ConfirmOrderAndCreateFulfillments",
		prefix + "ConfirmOrdersAndCreateFulfillments",
		prefix + "CancelOrder",
		prefix + "UpdateOrderPaymentStatus",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &orderServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &orderServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *orderServiceJSONClient) CreateOrder(ctx context.Context, in *order.CreateOrderRequest) (*order.Order, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "CreateOrder")
	out := new(order.Order)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceJSONClient) GetOrder(ctx context.Context, in *cm.IDRequest) (*order.Order, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "GetOrder")
	out := new(order.Order)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceJSONClient) GetOrders(ctx context.Context, in *GetOrdersRequest) (*order.OrdersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "GetOrders")
	out := new(order.OrdersResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceJSONClient) GetOrdersByIDs(ctx context.Context, in *etop.IDsRequest) (*order.OrdersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "GetOrdersByIDs")
	out := new(order.OrdersResponse)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceJSONClient) UpdateOrder(ctx context.Context, in *order.UpdateOrderRequest) (*order.Order, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateOrder")
	out := new(order.Order)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceJSONClient) UpdateOrdersStatus(ctx context.Context, in *UpdateOrdersStatusRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateOrdersStatus")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceJSONClient) ConfirmOrderAndCreateFulfillments(ctx context.Context, in *OrderIDRequest) (*order.OrderWithErrorsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmOrderAndCreateFulfillments")
	out := new(order.OrderWithErrorsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceJSONClient) ConfirmOrdersAndCreateFulfillments(ctx context.Context, in *OrderIDsRequest) (*cm.ErrorsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmOrdersAndCreateFulfillments")
	out := new(cm.ErrorsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceJSONClient) CancelOrder(ctx context.Context, in *CancelOrderRequest) (*order.OrderWithErrorsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "CancelOrder")
	out := new(order.OrderWithErrorsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceJSONClient) UpdateOrderPaymentStatus(ctx context.Context, in *UpdateOrderPaymentStatusRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateOrderPaymentStatus")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===========================
// OrderService Server Handler
// ===========================

type orderServiceServer struct {
	OrderService
	hooks *twirp.ServerHooks
}

func NewOrderServiceServer(svc OrderService, hooks *twirp.ServerHooks) TwirpServer {
	return &orderServiceServer{
		OrderService: svc,
		hooks:        hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *orderServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// OrderServicePathPrefix is used for all URL paths on a twirp OrderService server.
// Requests are always: POST OrderServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const OrderServicePathPrefix = "/api/shop.Order/"

func (s *orderServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Order")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/shop.Order/CreateOrder":
		s.serveCreateOrder(ctx, resp, req)
		return
	case "/api/shop.Order/GetOrder":
		s.serveGetOrder(ctx, resp, req)
		return
	case "/api/shop.Order/GetOrders":
		s.serveGetOrders(ctx, resp, req)
		return
	case "/api/shop.Order/GetOrdersByIDs":
		s.serveGetOrdersByIDs(ctx, resp, req)
		return
	case "/api/shop.Order/UpdateOrder":
		s.serveUpdateOrder(ctx, resp, req)
		return
	case "/api/shop.Order/UpdateOrdersStatus":
		s.serveUpdateOrdersStatus(ctx, resp, req)
		return
	case "/api/shop.Order/ConfirmOrderAndCreateFulfillments":
		s.serveConfirmOrderAndCreateFulfillments(ctx, resp, req)
		return
	case "/api/shop.Order/ConfirmOrdersAndCreateFulfillments":
		s.serveConfirmOrdersAndCreateFulfillments(ctx, resp, req)
		return
	case "/api/shop.Order/CancelOrder":
		s.serveCancelOrder(ctx, resp, req)
		return
	case "/api/shop.Order/UpdateOrderPaymentStatus":
		s.serveUpdateOrderPaymentStatus(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *orderServiceServer) serveCreateOrder(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateOrderJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateOrderProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orderServiceServer) serveCreateOrderJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(order.CreateOrderRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.Order
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.CreateOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.Order and nil error while calling CreateOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveCreateOrderProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(order.CreateOrderRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.Order
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.CreateOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.Order and nil error while calling CreateOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveGetOrder(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetOrderJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetOrderProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orderServiceServer) serveGetOrderJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.Order
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.GetOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.Order and nil error while calling GetOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveGetOrderProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.Order
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.GetOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.Order and nil error while calling GetOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveGetOrders(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetOrdersJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetOrdersProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orderServiceServer) serveGetOrdersJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetOrders")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetOrdersRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.OrdersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.GetOrders(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.OrdersResponse and nil error while calling GetOrders. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveGetOrdersProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetOrders")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetOrdersRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.OrdersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.GetOrders(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.OrdersResponse and nil error while calling GetOrders. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveGetOrdersByIDs(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetOrdersByIDsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetOrdersByIDsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orderServiceServer) serveGetOrdersByIDsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetOrdersByIDs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(etop.IDsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.OrdersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.GetOrdersByIDs(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.OrdersResponse and nil error while calling GetOrdersByIDs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveGetOrdersByIDsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetOrdersByIDs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(etop.IDsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.OrdersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.GetOrdersByIDs(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.OrdersResponse and nil error while calling GetOrdersByIDs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveUpdateOrder(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateOrderJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateOrderProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orderServiceServer) serveUpdateOrderJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(order.UpdateOrderRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.Order
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.UpdateOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.Order and nil error while calling UpdateOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveUpdateOrderProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(order.UpdateOrderRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.Order
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.UpdateOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.Order and nil error while calling UpdateOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveUpdateOrdersStatus(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateOrdersStatusJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateOrdersStatusProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orderServiceServer) serveUpdateOrdersStatusJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateOrdersStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateOrdersStatusRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.UpdateOrdersStatus(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateOrdersStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveUpdateOrdersStatusProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateOrdersStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateOrdersStatusRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.UpdateOrdersStatus(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateOrdersStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveConfirmOrderAndCreateFulfillments(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveConfirmOrderAndCreateFulfillmentsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveConfirmOrderAndCreateFulfillmentsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orderServiceServer) serveConfirmOrderAndCreateFulfillmentsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmOrderAndCreateFulfillments")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(OrderIDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.OrderWithErrorsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.ConfirmOrderAndCreateFulfillments(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.OrderWithErrorsResponse and nil error while calling ConfirmOrderAndCreateFulfillments. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveConfirmOrderAndCreateFulfillmentsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmOrderAndCreateFulfillments")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(OrderIDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.OrderWithErrorsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.ConfirmOrderAndCreateFulfillments(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.OrderWithErrorsResponse and nil error while calling ConfirmOrderAndCreateFulfillments. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveConfirmOrdersAndCreateFulfillments(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveConfirmOrdersAndCreateFulfillmentsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveConfirmOrdersAndCreateFulfillmentsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orderServiceServer) serveConfirmOrdersAndCreateFulfillmentsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmOrdersAndCreateFulfillments")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(OrderIDsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.ErrorsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.ConfirmOrdersAndCreateFulfillments(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.ErrorsResponse and nil error while calling ConfirmOrdersAndCreateFulfillments. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveConfirmOrdersAndCreateFulfillmentsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmOrdersAndCreateFulfillments")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(OrderIDsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.ErrorsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.ConfirmOrdersAndCreateFulfillments(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.ErrorsResponse and nil error while calling ConfirmOrdersAndCreateFulfillments. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveCancelOrder(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCancelOrderJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCancelOrderProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orderServiceServer) serveCancelOrderJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CancelOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CancelOrderRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.OrderWithErrorsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.CancelOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.OrderWithErrorsResponse and nil error while calling CancelOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveCancelOrderProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CancelOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CancelOrderRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.OrderWithErrorsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.CancelOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.OrderWithErrorsResponse and nil error while calling CancelOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveUpdateOrderPaymentStatus(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateOrderPaymentStatusJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateOrderPaymentStatusProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orderServiceServer) serveUpdateOrderPaymentStatusJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateOrderPaymentStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateOrderPaymentStatusRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.UpdateOrderPaymentStatus(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateOrderPaymentStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) serveUpdateOrderPaymentStatusProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateOrderPaymentStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateOrderPaymentStatusRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.OrderService.UpdateOrderPaymentStatus(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateOrderPaymentStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orderServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 7
}

func (s *orderServiceServer) ProtocGenTwirpVersion() string {
	return "v5.8.0"
}

func (s *orderServiceServer) PathPrefix() string {
	return OrderServicePathPrefix
}

// ============================
// FulfillmentService Interface
// ============================

type FulfillmentService interface {
	GetFulfillment(context.Context, *cm.IDRequest) (*order.Fulfillment, error)

	GetFulfillments(context.Context, *GetFulfillmentsRequest) (*order.FulfillmentsResponse, error)

	CreateFulfillmentsForOrder(context.Context, *CreateFulfillmentsForOrderRequest) (*order.Order, error)

	CancelFulfillment(context.Context, *cm.IDRequest) (*cm.UpdatedResponse, error)

	GetPublicExternalShippingServices(context.Context, *order.GetExternalShippingServicesRequest) (*order.GetExternalShippingServicesResponse, error)

	GetExternalShippingServices(context.Context, *order.GetExternalShippingServicesRequest) (*order.GetExternalShippingServicesResponse, error)

	GetPublicFulfillment(context.Context, *GetPublicFulfillmentRequest) (*order.PublicFulfillment, error)

	UpdateFulfillmentsShippingState(context.Context, *UpdateFulfillmentsShippingStateRequest) (*cm.UpdatedResponse, error)
}

// ==================================
// FulfillmentService Protobuf Client
// ==================================

type fulfillmentServiceProtobufClient struct {
	client HTTPClient
	urls   [8]string
}

// NewFulfillmentServiceProtobufClient creates a Protobuf client that implements the FulfillmentService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewFulfillmentServiceProtobufClient(addr string, client HTTPClient) FulfillmentService {
	prefix := urlBase(addr) + FulfillmentServicePathPrefix
	urls := [8]string{
		prefix + "GetFulfillment",
		prefix + "GetFulfillments",
		prefix + "CreateFulfillmentsForOrder",
		prefix + "CancelFulfillment",
		prefix + "GetPublicExternalShippingServices",
		prefix + "GetExternalShippingServices",
		prefix + "GetPublicFulfillment",
		prefix + "UpdateFulfillmentsShippingState",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &fulfillmentServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &fulfillmentServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *fulfillmentServiceProtobufClient) GetFulfillment(ctx context.Context, in *cm.IDRequest) (*order.Fulfillment, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillment")
	out := new(order.Fulfillment)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceProtobufClient) GetFulfillments(ctx context.Context, in *GetFulfillmentsRequest) (*order.FulfillmentsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillments")
	out := new(order.FulfillmentsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceProtobufClient) CreateFulfillmentsForOrder(ctx context.Context, in *CreateFulfillmentsForOrderRequest) (*order.Order, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "CreateFulfillmentsForOrder")
	out := new(order.Order)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceProtobufClient) CancelFulfillment(ctx context.Context, in *cm.IDRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "CancelFulfillment")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceProtobufClient) GetPublicExternalShippingServices(ctx context.Context, in *order.GetExternalShippingServicesRequest) (*order.GetExternalShippingServicesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "GetPublicExternalShippingServices")
	out := new(order.GetExternalShippingServicesResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceProtobufClient) GetExternalShippingServices(ctx context.Context, in *order.GetExternalShippingServicesRequest) (*order.GetExternalShippingServicesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "GetExternalShippingServices")
	out := new(order.GetExternalShippingServicesResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceProtobufClient) GetPublicFulfillment(ctx context.Context, in *GetPublicFulfillmentRequest) (*order.PublicFulfillment, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "GetPublicFulfillment")
	out := new(order.PublicFulfillment)
	err := doProtobufRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceProtobufClient) UpdateFulfillmentsShippingState(ctx context.Context, in *UpdateFulfillmentsShippingStateRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateFulfillmentsShippingState")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==============================
// FulfillmentService JSON Client
// ==============================

type fulfillmentServiceJSONClient struct {
	client HTTPClient
	urls   [8]string
}

// NewFulfillmentServiceJSONClient creates a JSON client that implements the FulfillmentService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewFulfillmentServiceJSONClient(addr string, client HTTPClient) FulfillmentService {
	prefix := urlBase(addr) + FulfillmentServicePathPrefix
	urls := [8]string{
		prefix + "GetFulfillment",
		prefix + "GetFulfillments",
		prefix + "CreateFulfillmentsForOrder",
		prefix + "CancelFulfillment",
		prefix + "GetPublicExternalShippingServices",
		prefix + "GetExternalShippingServices",
		prefix + "GetPublicFulfillment",
		prefix + "UpdateFulfillmentsShippingState",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &fulfillmentServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &fulfillmentServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *fulfillmentServiceJSONClient) GetFulfillment(ctx context.Context, in *cm.IDRequest) (*order.Fulfillment, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillment")
	out := new(order.Fulfillment)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceJSONClient) GetFulfillments(ctx context.Context, in *GetFulfillmentsRequest) (*order.FulfillmentsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillments")
	out := new(order.FulfillmentsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceJSONClient) CreateFulfillmentsForOrder(ctx context.Context, in *CreateFulfillmentsForOrderRequest) (*order.Order, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "CreateFulfillmentsForOrder")
	out := new(order.Order)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceJSONClient) CancelFulfillment(ctx context.Context, in *cm.IDRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "CancelFulfillment")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceJSONClient) GetPublicExternalShippingServices(ctx context.Context, in *order.GetExternalShippingServicesRequest) (*order.GetExternalShippingServicesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "GetPublicExternalShippingServices")
	out := new(order.GetExternalShippingServicesResponse)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceJSONClient) GetExternalShippingServices(ctx context.Context, in *order.GetExternalShippingServicesRequest) (*order.GetExternalShippingServicesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "GetExternalShippingServices")
	out := new(order.GetExternalShippingServicesResponse)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceJSONClient) GetPublicFulfillment(ctx context.Context, in *GetPublicFulfillmentRequest) (*order.PublicFulfillment, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "GetPublicFulfillment")
	out := new(order.PublicFulfillment)
	err := doJSONRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceJSONClient) UpdateFulfillmentsShippingState(ctx context.Context, in *UpdateFulfillmentsShippingStateRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateFulfillmentsShippingState")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =================================
// FulfillmentService Server Handler
// =================================

type fulfillmentServiceServer struct {
	FulfillmentService
	hooks *twirp.ServerHooks
}

func NewFulfillmentServiceServer(svc FulfillmentService, hooks *twirp.ServerHooks) TwirpServer {
	return &fulfillmentServiceServer{
		FulfillmentService: svc,
		hooks:              hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *fulfillmentServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// FulfillmentServicePathPrefix is used for all URL paths on a twirp FulfillmentService server.
// Requests are always: POST FulfillmentServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const FulfillmentServicePathPrefix = "/api/shop.Fulfillment/"

func (s *fulfillmentServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Fulfillment")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/shop.Fulfillment/GetFulfillment":
		s.serveGetFulfillment(ctx, resp, req)
		return
	case "/api/shop.Fulfillment/GetFulfillments":
		s.serveGetFulfillments(ctx, resp, req)
		return
	case "/api/shop.Fulfillment/CreateFulfillmentsForOrder":
		s.serveCreateFulfillmentsForOrder(ctx, resp, req)
		return
	case "/api/shop.Fulfillment/CancelFulfillment":
		s.serveCancelFulfillment(ctx, resp, req)
		return
	case "/api/shop.Fulfillment/GetPublicExternalShippingServices":
		s.serveGetPublicExternalShippingServices(ctx, resp, req)
		return
	case "/api/shop.Fulfillment/GetExternalShippingServices":
		s.serveGetExternalShippingServices(ctx, resp, req)
		return
	case "/api/shop.Fulfillment/GetPublicFulfillment":
		s.serveGetPublicFulfillment(ctx, resp, req)
		return
	case "/api/shop.Fulfillment/UpdateFulfillmentsShippingState":
		s.serveUpdateFulfillmentsShippingState(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *fulfillmentServiceServer) serveGetFulfillment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetFulfillmentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetFulfillmentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *fulfillmentServiceServer) serveGetFulfillmentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.Fulfillment
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.GetFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.Fulfillment and nil error while calling GetFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveGetFulfillmentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.Fulfillment
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.GetFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.Fulfillment and nil error while calling GetFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveGetFulfillments(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetFulfillmentsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetFulfillmentsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *fulfillmentServiceServer) serveGetFulfillmentsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillments")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetFulfillmentsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.FulfillmentsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.GetFulfillments(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.FulfillmentsResponse and nil error while calling GetFulfillments. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveGetFulfillmentsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillments")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetFulfillmentsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.FulfillmentsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.GetFulfillments(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.FulfillmentsResponse and nil error while calling GetFulfillments. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveCreateFulfillmentsForOrder(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateFulfillmentsForOrderJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateFulfillmentsForOrderProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *fulfillmentServiceServer) serveCreateFulfillmentsForOrderJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateFulfillmentsForOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CreateFulfillmentsForOrderRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.Order
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.CreateFulfillmentsForOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.Order and nil error while calling CreateFulfillmentsForOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveCreateFulfillmentsForOrderProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateFulfillmentsForOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CreateFulfillmentsForOrderRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.Order
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.CreateFulfillmentsForOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.Order and nil error while calling CreateFulfillmentsForOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveCancelFulfillment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCancelFulfillmentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCancelFulfillmentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *fulfillmentServiceServer) serveCancelFulfillmentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CancelFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.CancelFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling CancelFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveCancelFulfillmentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CancelFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.CancelFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling CancelFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveGetPublicExternalShippingServices(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetPublicExternalShippingServicesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetPublicExternalShippingServicesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *fulfillmentServiceServer) serveGetPublicExternalShippingServicesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPublicExternalShippingServices")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(order.GetExternalShippingServicesRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.GetExternalShippingServicesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.GetPublicExternalShippingServices(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.GetExternalShippingServicesResponse and nil error while calling GetPublicExternalShippingServices. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveGetPublicExternalShippingServicesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPublicExternalShippingServices")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(order.GetExternalShippingServicesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.GetExternalShippingServicesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.GetPublicExternalShippingServices(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.GetExternalShippingServicesResponse and nil error while calling GetPublicExternalShippingServices. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveGetExternalShippingServices(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetExternalShippingServicesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetExternalShippingServicesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *fulfillmentServiceServer) serveGetExternalShippingServicesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetExternalShippingServices")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(order.GetExternalShippingServicesRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.GetExternalShippingServicesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.GetExternalShippingServices(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.GetExternalShippingServicesResponse and nil error while calling GetExternalShippingServices. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveGetExternalShippingServicesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetExternalShippingServices")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(order.GetExternalShippingServicesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.GetExternalShippingServicesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.GetExternalShippingServices(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.GetExternalShippingServicesResponse and nil error while calling GetExternalShippingServices. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveGetPublicFulfillment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetPublicFulfillmentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetPublicFulfillmentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *fulfillmentServiceServer) serveGetPublicFulfillmentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPublicFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetPublicFulfillmentRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.PublicFulfillment
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.GetPublicFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.PublicFulfillment and nil error while calling GetPublicFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveGetPublicFulfillmentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPublicFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetPublicFulfillmentRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.PublicFulfillment
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.GetPublicFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.PublicFulfillment and nil error while calling GetPublicFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveUpdateFulfillmentsShippingState(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateFulfillmentsShippingStateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateFulfillmentsShippingStateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *fulfillmentServiceServer) serveUpdateFulfillmentsShippingStateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateFulfillmentsShippingState")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateFulfillmentsShippingStateRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.UpdateFulfillmentsShippingState(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateFulfillmentsShippingState. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) serveUpdateFulfillmentsShippingStateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateFulfillmentsShippingState")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateFulfillmentsShippingStateRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.FulfillmentService.UpdateFulfillmentsShippingState(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateFulfillmentsShippingState. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *fulfillmentServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 8
}

func (s *fulfillmentServiceServer) ProtocGenTwirpVersion() string {
	return "v5.8.0"
}

func (s *fulfillmentServiceServer) PathPrefix() string {
	return FulfillmentServicePathPrefix
}

// ========================
// ShipnowService Interface
// ========================

type ShipnowService interface {
	GetShipnowFulfillment(context.Context, *cm.IDRequest) (*order.ShipnowFulfillment, error)

	GetShipnowFulfillments(context.Context, *order.GetShipnowFulfillmentsRequest) (*order.ShipnowFulfillments, error)

	CreateShipnowFulfillment(context.Context, *order.CreateShipnowFulfillmentRequest) (*order.ShipnowFulfillment, error)

	ConfirmShipnowFulfillment(context.Context, *cm.IDRequest) (*order.ShipnowFulfillment, error)

	UpdateShipnowFulfillment(context.Context, *order.UpdateShipnowFulfillmentRequest) (*order.ShipnowFulfillment, error)

	CancelShipnowFulfillment(context.Context, *order.CancelShipnowFulfillmentRequest) (*cm.UpdatedResponse, error)

	GetShipnowServices(context.Context, *order.GetShipnowServicesRequest) (*order.GetShipnowServicesResponse, error)
}

// ==============================
// ShipnowService Protobuf Client
// ==============================

type shipnowServiceProtobufClient struct {
	client HTTPClient
	urls   [7]string
}

// NewShipnowServiceProtobufClient creates a Protobuf client that implements the ShipnowService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewShipnowServiceProtobufClient(addr string, client HTTPClient) ShipnowService {
	prefix := urlBase(addr) + ShipnowServicePathPrefix
	urls := [7]string{
		prefix + "GetShipnowFulfillment",
		prefix + "GetShipnowFulfillments",
		prefix + "CreateShipnowFulfillment",
		prefix + "ConfirmShipnowFulfillment",
		prefix + "UpdateShipnowFulfillment",
		prefix + "CancelShipnowFulfillment",
		prefix + "GetShipnowServices",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &shipnowServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &shipnowServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *shipnowServiceProtobufClient) GetShipnowFulfillment(ctx context.Context, in *cm.IDRequest) (*order.ShipnowFulfillment, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Shipnow")
	ctx = ctxsetters.WithMethodName(ctx, "GetShipnowFulfillment")
	out := new(order.ShipnowFulfillment)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipnowServiceProtobufClient) GetShipnowFulfillments(ctx context.Context, in *order.GetShipnowFulfillmentsRequest) (*order.ShipnowFulfillments, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Shipnow")
	ctx = ctxsetters.WithMethodName(ctx, "GetShipnowFulfillments")
	out := new(order.ShipnowFulfillments)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipnowServiceProtobufClient) CreateShipnowFulfillment(ctx context.Context, in *order.CreateShipnowFulfillmentRequest) (*order.ShipnowFulfillment, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Shipnow")
	ctx = ctxsetters.WithMethodName(ctx, "CreateShipnowFulfillment")
	out := new(order.ShipnowFulfillment)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipnowServiceProtobufClient) ConfirmShipnowFulfillment(ctx context.Context, in *cm.IDRequest) (*order.ShipnowFulfillment, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Shipnow")
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmShipnowFulfillment")
	out := new(order.ShipnowFulfillment)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipnowServiceProtobufClient) UpdateShipnowFulfillment(ctx context.Context, in *order.UpdateShipnowFulfillmentRequest) (*order.ShipnowFulfillment, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Shipnow")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateShipnowFulfillment")
	out := new(order.ShipnowFulfillment)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipnowServiceProtobufClient) CancelShipnowFulfillment(ctx context.Context, in *order.CancelShipnowFulfillmentRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Shipnow")
	ctx = ctxsetters.WithMethodName(ctx, "CancelShipnowFulfillment")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipnowServiceProtobufClient) GetShipnowServices(ctx context.Context, in *order.GetShipnowServicesRequest) (*order.GetShipnowServicesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Shipnow")
	ctx = ctxsetters.WithMethodName(ctx, "GetShipnowServices")
	out := new(order.GetShipnowServicesResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// ShipnowService JSON Client
// ==========================

type shipnowServiceJSONClient struct {
	client HTTPClient
	urls   [7]string
}

// NewShipnowServiceJSONClient creates a JSON client that implements the ShipnowService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewShipnowServiceJSONClient(addr string, client HTTPClient) ShipnowService {
	prefix := urlBase(addr) + ShipnowServicePathPrefix
	urls := [7]string{
		prefix + "GetShipnowFulfillment",
		prefix + "GetShipnowFulfillments",
		prefix + "CreateShipnowFulfillment",
		prefix + "ConfirmShipnowFulfillment",
		prefix + "UpdateShipnowFulfillment",
		prefix + "CancelShipnowFulfillment",
		prefix + "GetShipnowServices",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &shipnowServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &shipnowServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *shipnowServiceJSONClient) GetShipnowFulfillment(ctx context.Context, in *cm.IDRequest) (*order.ShipnowFulfillment, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Shipnow")
	ctx = ctxsetters.WithMethodName(ctx, "GetShipnowFulfillment")
	out := new(order.ShipnowFulfillment)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipnowServiceJSONClient) GetShipnowFulfillments(ctx context.Context, in *order.GetShipnowFulfillmentsRequest) (*order.ShipnowFulfillments, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Shipnow")
	ctx = ctxsetters.WithMethodName(ctx, "GetShipnowFulfillments")
	out := new(order.ShipnowFulfillments)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipnowServiceJSONClient) CreateShipnowFulfillment(ctx context.Context, in *order.CreateShipnowFulfillmentRequest) (*order.ShipnowFulfillment, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Shipnow")
	ctx = ctxsetters.WithMethodName(ctx, "CreateShipnowFulfillment")
	out := new(order.ShipnowFulfillment)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipnowServiceJSONClient) ConfirmShipnowFulfillment(ctx context.Context, in *cm.IDRequest) (*order.ShipnowFulfillment, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Shipnow")
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmShipnowFulfillment")
	out := new(order.ShipnowFulfillment)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipnowServiceJSONClient) UpdateShipnowFulfillment(ctx context.Context, in *order.UpdateShipnowFulfillmentRequest) (*order.ShipnowFulfillment, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Shipnow")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateShipnowFulfillment")
	out := new(order.ShipnowFulfillment)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipnowServiceJSONClient) CancelShipnowFulfillment(ctx context.Context, in *order.CancelShipnowFulfillmentRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Shipnow")
	ctx = ctxsetters.WithMethodName(ctx, "CancelShipnowFulfillment")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipnowServiceJSONClient) GetShipnowServices(ctx context.Context, in *order.GetShipnowServicesRequest) (*order.GetShipnowServicesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Shipnow")
	ctx = ctxsetters.WithMethodName(ctx, "GetShipnowServices")
	out := new(order.GetShipnowServicesResponse)
	err := doJSONRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =============================
// ShipnowService Server Handler
// =============================

type shipnowServiceServer struct {
	ShipnowService
	hooks *twirp.ServerHooks
}

func NewShipnowServiceServer(svc ShipnowService, hooks *twirp.ServerHooks) TwirpServer {
	return &shipnowServiceServer{
		ShipnowService: svc,
		hooks:          hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *shipnowServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// ShipnowServicePathPrefix is used for all URL paths on a twirp ShipnowService server.
// Requests are always: POST ShipnowServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const ShipnowServicePathPrefix = "/api/shop.Shipnow/"

func (s *shipnowServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Shipnow")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/shop.Shipnow/GetShipnowFulfillment":
		s.serveGetShipnowFulfillment(ctx, resp, req)
		return
	case "/api/shop.Shipnow/GetShipnowFulfillments":
		s.serveGetShipnowFulfillments(ctx, resp, req)
		return
	case "/api/shop.Shipnow/CreateShipnowFulfillment":
		s.serveCreateShipnowFulfillment(ctx, resp, req)
		return
	case "/api/shop.Shipnow/ConfirmShipnowFulfillment":
		s.serveConfirmShipnowFulfillment(ctx, resp, req)
		return
	case "/api/shop.Shipnow/UpdateShipnowFulfillment":
		s.serveUpdateShipnowFulfillment(ctx, resp, req)
		return
	case "/api/shop.Shipnow/CancelShipnowFulfillment":
		s.serveCancelShipnowFulfillment(ctx, resp, req)
		return
	case "/api/shop.Shipnow/GetShipnowServices":
		s.serveGetShipnowServices(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *shipnowServiceServer) serveGetShipnowFulfillment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetShipnowFulfillmentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetShipnowFulfillmentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *shipnowServiceServer) serveGetShipnowFulfillmentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetShipnowFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.ShipnowFulfillment
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShipnowService.GetShipnowFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.ShipnowFulfillment and nil error while calling GetShipnowFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shipnowServiceServer) serveGetShipnowFulfillmentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetShipnowFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.ShipnowFulfillment
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShipnowService.GetShipnowFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.ShipnowFulfillment and nil error while calling GetShipnowFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shipnowServiceServer) serveGetShipnowFulfillments(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetShipnowFulfillmentsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetShipnowFulfillmentsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *shipnowServiceServer) serveGetShipnowFulfillmentsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetShipnowFulfillments")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(order.GetShipnowFulfillmentsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.ShipnowFulfillments
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShipnowService.GetShipnowFulfillments(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.ShipnowFulfillments and nil error while calling GetShipnowFulfillments. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shipnowServiceServer) serveGetShipnowFulfillmentsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetShipnowFulfillments")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(order.GetShipnowFulfillmentsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.ShipnowFulfillments
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShipnowService.GetShipnowFulfillments(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.ShipnowFulfillments and nil error while calling GetShipnowFulfillments. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shipnowServiceServer) serveCreateShipnowFulfillment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateShipnowFulfillmentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateShipnowFulfillmentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *shipnowServiceServer) serveCreateShipnowFulfillmentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateShipnowFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(order.CreateShipnowFulfillmentRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.ShipnowFulfillment
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShipnowService.CreateShipnowFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.ShipnowFulfillment and nil error while calling CreateShipnowFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shipnowServiceServer) serveCreateShipnowFulfillmentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateShipnowFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(order.CreateShipnowFulfillmentRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.ShipnowFulfillment
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShipnowService.CreateShipnowFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.ShipnowFulfillment and nil error while calling CreateShipnowFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shipnowServiceServer) serveConfirmShipnowFulfillment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveConfirmShipnowFulfillmentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveConfirmShipnowFulfillmentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *shipnowServiceServer) serveConfirmShipnowFulfillmentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmShipnowFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.ShipnowFulfillment
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShipnowService.ConfirmShipnowFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.ShipnowFulfillment and nil error while calling ConfirmShipnowFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shipnowServiceServer) serveConfirmShipnowFulfillmentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ConfirmShipnowFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.ShipnowFulfillment
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShipnowService.ConfirmShipnowFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.ShipnowFulfillment and nil error while calling ConfirmShipnowFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shipnowServiceServer) serveUpdateShipnowFulfillment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateShipnowFulfillmentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateShipnowFulfillmentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *shipnowServiceServer) serveUpdateShipnowFulfillmentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateShipnowFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(order.UpdateShipnowFulfillmentRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.ShipnowFulfillment
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShipnowService.UpdateShipnowFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.ShipnowFulfillment and nil error while calling UpdateShipnowFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shipnowServiceServer) serveUpdateShipnowFulfillmentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateShipnowFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(order.UpdateShipnowFulfillmentRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.ShipnowFulfillment
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShipnowService.UpdateShipnowFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.ShipnowFulfillment and nil error while calling UpdateShipnowFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shipnowServiceServer) serveCancelShipnowFulfillment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCancelShipnowFulfillmentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCancelShipnowFulfillmentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *shipnowServiceServer) serveCancelShipnowFulfillmentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CancelShipnowFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(order.CancelShipnowFulfillmentRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShipnowService.CancelShipnowFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling CancelShipnowFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shipnowServiceServer) serveCancelShipnowFulfillmentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CancelShipnowFulfillment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(order.CancelShipnowFulfillmentRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShipnowService.CancelShipnowFulfillment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling CancelShipnowFulfillment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shipnowServiceServer) serveGetShipnowServices(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetShipnowServicesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetShipnowServicesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *shipnowServiceServer) serveGetShipnowServicesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetShipnowServices")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(order.GetShipnowServicesRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.GetShipnowServicesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShipnowService.GetShipnowServices(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.GetShipnowServicesResponse and nil error while calling GetShipnowServices. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shipnowServiceServer) serveGetShipnowServicesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetShipnowServices")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(order.GetShipnowServicesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.GetShipnowServicesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ShipnowService.GetShipnowServices(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.GetShipnowServicesResponse and nil error while calling GetShipnowServices. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shipnowServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 9
}

func (s *shipnowServiceServer) ProtocGenTwirpVersion() string {
	return "v5.8.0"
}

func (s *shipnowServiceServer) PathPrefix() string {
	return ShipnowServicePathPrefix
}

// ========================
// HistoryService Interface
// ========================

type HistoryService interface {
	GetFulfillmentHistory(context.Context, *GetFulfillmentHistoryRequest) (*etop.HistoryResponse, error)
}

// ==============================
// HistoryService Protobuf Client
// ==============================

type historyServiceProtobufClient struct {
	client HTTPClient
	urls   [1]string
}

// NewHistoryServiceProtobufClient creates a Protobuf client that implements the HistoryService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewHistoryServiceProtobufClient(addr string, client HTTPClient) HistoryService {
	prefix := urlBase(addr) + HistoryServicePathPrefix
	urls := [1]string{
		prefix + "GetFulfillmentHistory",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &historyServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &historyServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *historyServiceProtobufClient) GetFulfillmentHistory(ctx context.Context, in *GetFulfillmentHistoryRequest) (*etop.HistoryResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "History")
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillmentHistory")
	out := new(etop.HistoryResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// HistoryService JSON Client
// ==========================

type historyServiceJSONClient struct {
	client HTTPClient
	urls   [1]string
}

// NewHistoryServiceJSONClient creates a JSON client that implements the HistoryService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewHistoryServiceJSONClient(addr string, client HTTPClient) HistoryService {
	prefix := urlBase(addr) + HistoryServicePathPrefix
	urls := [1]string{
		prefix + "GetFulfillmentHistory",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &historyServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &historyServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *historyServiceJSONClient) GetFulfillmentHistory(ctx context.Context, in *GetFulfillmentHistoryRequest) (*etop.HistoryResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "History")
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillmentHistory")
	out := new(etop.HistoryResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =============================
// HistoryService Server Handler
// =============================

type historyServiceServer struct {
	HistoryService
	hooks *twirp.ServerHooks
}

func NewHistoryServiceServer(svc HistoryService, hooks *twirp.ServerHooks) TwirpServer {
	return &historyServiceServer{
		HistoryService: svc,
		hooks:          hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *historyServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// HistoryServicePathPrefix is used for all URL paths on a twirp HistoryService server.
// Requests are always: POST HistoryServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const HistoryServicePathPrefix = "/api/shop.History/"

func (s *historyServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "History")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/shop.History/GetFulfillmentHistory":
		s.serveGetFulfillmentHistory(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *historyServiceServer) serveGetFulfillmentHistory(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetFulfillmentHistoryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetFulfillmentHistoryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *historyServiceServer) serveGetFulfillmentHistoryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillmentHistory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetFulfillmentHistoryRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *etop.HistoryResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.HistoryService.GetFulfillmentHistory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.HistoryResponse and nil error while calling GetFulfillmentHistory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *historyServiceServer) serveGetFulfillmentHistoryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetFulfillmentHistory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetFulfillmentHistoryRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *etop.HistoryResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.HistoryService.GetFulfillmentHistory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.HistoryResponse and nil error while calling GetFulfillmentHistory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *historyServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 10
}

func (s *historyServiceServer) ProtocGenTwirpVersion() string {
	return "v5.8.0"
}

func (s *historyServiceServer) PathPrefix() string {
	return HistoryServicePathPrefix
}

// =================================
// MoneyTransactionService Interface
// =================================

type MoneyTransactionService interface {
	GetMoneyTransaction(context.Context, *cm.IDRequest) (*order.MoneyTransaction, error)

	GetMoneyTransactions(context.Context, *GetMoneyTransactionsRequest) (*order.MoneyTransactionsResponse, error)
}

// =======================================
// MoneyTransactionService Protobuf Client
// =======================================

type moneyTransactionServiceProtobufClient struct {
	client HTTPClient
	urls   [2]string
}

// NewMoneyTransactionServiceProtobufClient creates a Protobuf client that implements the MoneyTransactionService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewMoneyTransactionServiceProtobufClient(addr string, client HTTPClient) MoneyTransactionService {
	prefix := urlBase(addr) + MoneyTransactionServicePathPrefix
	urls := [2]string{
		prefix + "GetMoneyTransaction",
		prefix + "GetMoneyTransactions",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &moneyTransactionServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &moneyTransactionServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *moneyTransactionServiceProtobufClient) GetMoneyTransaction(ctx context.Context, in *cm.IDRequest) (*order.MoneyTransaction, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransaction")
	out := new(order.MoneyTransaction)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceProtobufClient) GetMoneyTransactions(ctx context.Context, in *GetMoneyTransactionsRequest) (*order.MoneyTransactionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactions")
	out := new(order.MoneyTransactionsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===================================
// MoneyTransactionService JSON Client
// ===================================

type moneyTransactionServiceJSONClient struct {
	client HTTPClient
	urls   [2]string
}

// NewMoneyTransactionServiceJSONClient creates a JSON client that implements the MoneyTransactionService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewMoneyTransactionServiceJSONClient(addr string, client HTTPClient) MoneyTransactionService {
	prefix := urlBase(addr) + MoneyTransactionServicePathPrefix
	urls := [2]string{
		prefix + "GetMoneyTransaction",
		prefix + "GetMoneyTransactions",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &moneyTransactionServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &moneyTransactionServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *moneyTransactionServiceJSONClient) GetMoneyTransaction(ctx context.Context, in *cm.IDRequest) (*order.MoneyTransaction, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransaction")
	out := new(order.MoneyTransaction)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransactionServiceJSONClient) GetMoneyTransactions(ctx context.Context, in *GetMoneyTransactionsRequest) (*order.MoneyTransactionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactions")
	out := new(order.MoneyTransactionsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ======================================
// MoneyTransactionService Server Handler
// ======================================

type moneyTransactionServiceServer struct {
	MoneyTransactionService
	hooks *twirp.ServerHooks
}

func NewMoneyTransactionServiceServer(svc MoneyTransactionService, hooks *twirp.ServerHooks) TwirpServer {
	return &moneyTransactionServiceServer{
		MoneyTransactionService: svc,
		hooks:                   hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *moneyTransactionServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// MoneyTransactionServicePathPrefix is used for all URL paths on a twirp MoneyTransactionService server.
// Requests are always: POST MoneyTransactionServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const MoneyTransactionServicePathPrefix = "/api/shop.MoneyTransaction/"

func (s *moneyTransactionServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransaction")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/shop.MoneyTransaction/GetMoneyTransaction":
		s.serveGetMoneyTransaction(ctx, resp, req)
		return
	case "/api/shop.MoneyTransaction/GetMoneyTransactions":
		s.serveGetMoneyTransactions(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransaction(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetMoneyTransactionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetMoneyTransactionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransaction")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransaction
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.GetMoneyTransaction(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransaction and nil error while calling GetMoneyTransaction. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransaction")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransaction
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.GetMoneyTransaction(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransaction and nil error while calling GetMoneyTransaction. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactions(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetMoneyTransactionsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetMoneyTransactionsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetMoneyTransactionsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.GetMoneyTransactions(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionsResponse and nil error while calling GetMoneyTransactions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) serveGetMoneyTransactionsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetMoneyTransactions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetMoneyTransactionsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.MoneyTransactionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.MoneyTransactionService.GetMoneyTransactions(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.MoneyTransactionsResponse and nil error while calling GetMoneyTransactions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransactionServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 11
}

func (s *moneyTransactionServiceServer) ProtocGenTwirpVersion() string {
	return "v5.8.0"
}

func (s *moneyTransactionServiceServer) PathPrefix() string {
	return MoneyTransactionServicePathPrefix
}

// ========================
// SummaryService Interface
// ========================

type SummaryService interface {
	SummarizeFulfillments(context.Context, *SummarizeFulfillmentsRequest) (*SummarizeFulfillmentsResponse, error)

	CalcBalanceShop(context.Context, *cm.Empty) (*CalcBalanceShopResponse, error)
}

// ==============================
// SummaryService Protobuf Client
// ==============================

type summaryServiceProtobufClient struct {
	client HTTPClient
	urls   [2]string
}

// NewSummaryServiceProtobufClient creates a Protobuf client that implements the SummaryService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewSummaryServiceProtobufClient(addr string, client HTTPClient) SummaryService {
	prefix := urlBase(addr) + SummaryServicePathPrefix
	urls := [2]string{
		prefix + "SummarizeFulfillments",
		prefix + "CalcBalanceShop",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &summaryServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &summaryServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *summaryServiceProtobufClient) SummarizeFulfillments(ctx context.Context, in *SummarizeFulfillmentsRequest) (*SummarizeFulfillmentsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Summary")
	ctx = ctxsetters.WithMethodName(ctx, "SummarizeFulfillments")
	out := new(SummarizeFulfillmentsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceProtobufClient) CalcBalanceShop(ctx context.Context, in *cm.Empty) (*CalcBalanceShopResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Summary")
	ctx = ctxsetters.WithMethodName(ctx, "CalcBalanceShop")
	out := new(CalcBalanceShopResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// SummaryService JSON Client
// ==========================

type summaryServiceJSONClient struct {
	client HTTPClient
	urls   [2]string
}

// NewSummaryServiceJSONClient creates a JSON client that implements the SummaryService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewSummaryServiceJSONClient(addr string, client HTTPClient) SummaryService {
	prefix := urlBase(addr) + SummaryServicePathPrefix
	urls := [2]string{
		prefix + "SummarizeFulfillments",
		prefix + "CalcBalanceShop",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &summaryServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &summaryServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *summaryServiceJSONClient) SummarizeFulfillments(ctx context.Context, in *SummarizeFulfillmentsRequest) (*SummarizeFulfillmentsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Summary")
	ctx = ctxsetters.WithMethodName(ctx, "SummarizeFulfillments")
	out := new(SummarizeFulfillmentsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceJSONClient) CalcBalanceShop(ctx context.Context, in *cm.Empty) (*CalcBalanceShopResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Summary")
	ctx = ctxsetters.WithMethodName(ctx, "CalcBalanceShop")
	out := new(CalcBalanceShopResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =============================
// SummaryService Server Handler
// =============================

type summaryServiceServer struct {
	SummaryService
	hooks *twirp.ServerHooks
}

func NewSummaryServiceServer(svc SummaryService, hooks *twirp.ServerHooks) TwirpServer {
	return &summaryServiceServer{
		SummaryService: svc,
		hooks:          hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *summaryServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// SummaryServicePathPrefix is used for all URL paths on a twirp SummaryService server.
// Requests are always: POST SummaryServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const SummaryServicePathPrefix = "/api/shop.Summary/"

func (s *summaryServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Summary")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/shop.Summary/SummarizeFulfillments":
		s.serveSummarizeFulfillments(ctx, resp, req)
		return
	case "/api/shop.Summary/CalcBalanceShop":
		s.serveCalcBalanceShop(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *summaryServiceServer) serveSummarizeFulfillments(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSummarizeFulfillmentsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSummarizeFulfillmentsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *summaryServiceServer) serveSummarizeFulfillmentsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SummarizeFulfillments")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(SummarizeFulfillmentsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *SummarizeFulfillmentsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.SummaryService.SummarizeFulfillments(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SummarizeFulfillmentsResponse and nil error while calling SummarizeFulfillments. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *summaryServiceServer) serveSummarizeFulfillmentsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SummarizeFulfillments")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(SummarizeFulfillmentsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *SummarizeFulfillmentsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.SummaryService.SummarizeFulfillments(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SummarizeFulfillmentsResponse and nil error while calling SummarizeFulfillments. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *summaryServiceServer) serveCalcBalanceShop(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCalcBalanceShopJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCalcBalanceShopProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *summaryServiceServer) serveCalcBalanceShopJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CalcBalanceShop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CalcBalanceShopResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.SummaryService.CalcBalanceShop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CalcBalanceShopResponse and nil error while calling CalcBalanceShop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *summaryServiceServer) serveCalcBalanceShopProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CalcBalanceShop")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *CalcBalanceShopResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.SummaryService.CalcBalanceShop(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CalcBalanceShopResponse and nil error while calling CalcBalanceShop. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *summaryServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 12
}

func (s *summaryServiceServer) ProtocGenTwirpVersion() string {
	return "v5.8.0"
}

func (s *summaryServiceServer) PathPrefix() string {
	return SummaryServicePathPrefix
}

// =======================
// ExportService Interface
// =======================

type ExportService interface {
	GetExports(context.Context, *GetExportsRequest) (*GetExportsResponse, error)

	RequestExport(context.Context, *RequestExportRequest) (*RequestExportResponse, error)
}

// =============================
// ExportService Protobuf Client
// =============================

type exportServiceProtobufClient struct {
	client HTTPClient
	urls   [2]string
}

// NewExportServiceProtobufClient creates a Protobuf client that implements the ExportService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewExportServiceProtobufClient(addr string, client HTTPClient) ExportService {
	prefix := urlBase(addr) + ExportServicePathPrefix
	urls := [2]string{
		prefix + "GetExports",
		prefix + "RequestExport",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &exportServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &exportServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *exportServiceProtobufClient) GetExports(ctx context.Context, in *GetExportsRequest) (*GetExportsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Export")
	ctx = ctxsetters.WithMethodName(ctx, "GetExports")
	out := new(GetExportsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportServiceProtobufClient) RequestExport(ctx context.Context, in *RequestExportRequest) (*RequestExportResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Export")
	ctx = ctxsetters.WithMethodName(ctx, "RequestExport")
	out := new(RequestExportResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =========================
// ExportService JSON Client
// =========================

type exportServiceJSONClient struct {
	client HTTPClient
	urls   [2]string
}

// NewExportServiceJSONClient creates a JSON client that implements the ExportService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewExportServiceJSONClient(addr string, client HTTPClient) ExportService {
	prefix := urlBase(addr) + ExportServicePathPrefix
	urls := [2]string{
		prefix + "GetExports",
		prefix + "RequestExport",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &exportServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &exportServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *exportServiceJSONClient) GetExports(ctx context.Context, in *GetExportsRequest) (*GetExportsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Export")
	ctx = ctxsetters.WithMethodName(ctx, "GetExports")
	out := new(GetExportsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportServiceJSONClient) RequestExport(ctx context.Context, in *RequestExportRequest) (*RequestExportResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Export")
	ctx = ctxsetters.WithMethodName(ctx, "RequestExport")
	out := new(RequestExportResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ============================
// ExportService Server Handler
// ============================

type exportServiceServer struct {
	ExportService
	hooks *twirp.ServerHooks
}

func NewExportServiceServer(svc ExportService, hooks *twirp.ServerHooks) TwirpServer {
	return &exportServiceServer{
		ExportService: svc,
		hooks:         hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *exportServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// ExportServicePathPrefix is used for all URL paths on a twirp ExportService server.
// Requests are always: POST ExportServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const ExportServicePathPrefix = "/api/shop.Export/"

func (s *exportServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Export")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/shop.Export/GetExports":
		s.serveGetExports(ctx, resp, req)
		return
	case "/api/shop.Export/RequestExport":
		s.serveRequestExport(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *exportServiceServer) serveGetExports(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetExportsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetExportsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *exportServiceServer) serveGetExportsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetExports")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetExportsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *GetExportsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ExportService.GetExports(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetExportsResponse and nil error while calling GetExports. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *exportServiceServer) serveGetExportsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetExports")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetExportsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *GetExportsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ExportService.GetExports(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetExportsResponse and nil error while calling GetExports. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *exportServiceServer) serveRequestExport(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRequestExportJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRequestExportProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *exportServiceServer) serveRequestExportJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RequestExport")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(RequestExportRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *RequestExportResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ExportService.RequestExport(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RequestExportResponse and nil error while calling RequestExport. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *exportServiceServer) serveRequestExportProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RequestExport")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(RequestExportRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *RequestExportResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.ExportService.RequestExport(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RequestExportResponse and nil error while calling RequestExport. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *exportServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 13
}

func (s *exportServiceServer) ProtocGenTwirpVersion() string {
	return "v5.8.0"
}

func (s *exportServiceServer) PathPrefix() string {
	return ExportServicePathPrefix
}

// =============================
// NotificationService Interface
// =============================

type NotificationService interface {
	CreateDevice(context.Context, *etop.CreateDeviceRequest) (*etop.Device, error)

	DeleteDevice(context.Context, *etop.DeleteDeviceRequest) (*cm.DeletedResponse, error)

	GetNotification(context.Context, *cm.IDRequest) (*etop.Notification, error)

	GetNotifications(context.Context, *etop.GetNotificationsRequest) (*etop.NotificationsResponse, error)

	UpdateNotifications(context.Context, *etop.UpdateNotificationsRequest) (*cm.UpdatedResponse, error)
}

// ===================================
// NotificationService Protobuf Client
// ===================================

type notificationServiceProtobufClient struct {
	client HTTPClient
	urls   [5]string
}

// NewNotificationServiceProtobufClient creates a Protobuf client that implements the NotificationService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewNotificationServiceProtobufClient(addr string, client HTTPClient) NotificationService {
	prefix := urlBase(addr) + NotificationServicePathPrefix
	urls := [5]string{
		prefix + "CreateDevice",
		prefix + "DeleteDevice",
		prefix + "GetNotification",
		prefix + "GetNotifications",
		prefix + "UpdateNotifications",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &notificationServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &notificationServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *notificationServiceProtobufClient) CreateDevice(ctx context.Context, in *etop.CreateDeviceRequest) (*etop.Device, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Notification")
	ctx = ctxsetters.WithMethodName(ctx, "CreateDevice")
	out := new(etop.Device)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceProtobufClient) DeleteDevice(ctx context.Context, in *etop.DeleteDeviceRequest) (*cm.DeletedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Notification")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteDevice")
	out := new(cm.DeletedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceProtobufClient) GetNotification(ctx context.Context, in *cm.IDRequest) (*etop.Notification, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Notification")
	ctx = ctxsetters.WithMethodName(ctx, "GetNotification")
	out := new(etop.Notification)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceProtobufClient) GetNotifications(ctx context.Context, in *etop.GetNotificationsRequest) (*etop.NotificationsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Notification")
	ctx = ctxsetters.WithMethodName(ctx, "GetNotifications")
	out := new(etop.NotificationsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceProtobufClient) UpdateNotifications(ctx context.Context, in *etop.UpdateNotificationsRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Notification")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateNotifications")
	out := new(cm.UpdatedResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===============================
// NotificationService JSON Client
// ===============================

type notificationServiceJSONClient struct {
	client HTTPClient
	urls   [5]string
}

// NewNotificationServiceJSONClient creates a JSON client that implements the NotificationService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewNotificationServiceJSONClient(addr string, client HTTPClient) NotificationService {
	prefix := urlBase(addr) + NotificationServicePathPrefix
	urls := [5]string{
		prefix + "CreateDevice",
		prefix + "DeleteDevice",
		prefix + "GetNotification",
		prefix + "GetNotifications",
		prefix + "UpdateNotifications",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &notificationServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &notificationServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *notificationServiceJSONClient) CreateDevice(ctx context.Context, in *etop.CreateDeviceRequest) (*etop.Device, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Notification")
	ctx = ctxsetters.WithMethodName(ctx, "CreateDevice")
	out := new(etop.Device)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceJSONClient) DeleteDevice(ctx context.Context, in *etop.DeleteDeviceRequest) (*cm.DeletedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Notification")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteDevice")
	out := new(cm.DeletedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceJSONClient) GetNotification(ctx context.Context, in *cm.IDRequest) (*etop.Notification, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Notification")
	ctx = ctxsetters.WithMethodName(ctx, "GetNotification")
	out := new(etop.Notification)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceJSONClient) GetNotifications(ctx context.Context, in *etop.GetNotificationsRequest) (*etop.NotificationsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Notification")
	ctx = ctxsetters.WithMethodName(ctx, "GetNotifications")
	out := new(etop.NotificationsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceJSONClient) UpdateNotifications(ctx context.Context, in *etop.UpdateNotificationsRequest) (*cm.UpdatedResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Notification")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateNotifications")
	out := new(cm.UpdatedResponse)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==================================
// NotificationService Server Handler
// ==================================

type notificationServiceServer struct {
	NotificationService
	hooks *twirp.ServerHooks
}

func NewNotificationServiceServer(svc NotificationService, hooks *twirp.ServerHooks) TwirpServer {
	return &notificationServiceServer{
		NotificationService: svc,
		hooks:               hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *notificationServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// NotificationServicePathPrefix is used for all URL paths on a twirp NotificationService server.
// Requests are always: POST NotificationServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const NotificationServicePathPrefix = "/api/shop.Notification/"

func (s *notificationServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Notification")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/shop.Notification/CreateDevice":
		s.serveCreateDevice(ctx, resp, req)
		return
	case "/api/shop.Notification/DeleteDevice":
		s.serveDeleteDevice(ctx, resp, req)
		return
	case "/api/shop.Notification/GetNotification":
		s.serveGetNotification(ctx, resp, req)
		return
	case "/api/shop.Notification/GetNotifications":
		s.serveGetNotifications(ctx, resp, req)
		return
	case "/api/shop.Notification/UpdateNotifications":
		s.serveUpdateNotifications(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *notificationServiceServer) serveCreateDevice(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateDeviceJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateDeviceProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *notificationServiceServer) serveCreateDeviceJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateDevice")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(etop.CreateDeviceRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *etop.Device
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.NotificationService.CreateDevice(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.Device and nil error while calling CreateDevice. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *notificationServiceServer) serveCreateDeviceProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateDevice")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(etop.CreateDeviceRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *etop.Device
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.NotificationService.CreateDevice(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.Device and nil error while calling CreateDevice. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *notificationServiceServer) serveDeleteDevice(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteDeviceJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteDeviceProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *notificationServiceServer) serveDeleteDeviceJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteDevice")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(etop.DeleteDeviceRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.DeletedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.NotificationService.DeleteDevice(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.DeletedResponse and nil error while calling DeleteDevice. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *notificationServiceServer) serveDeleteDeviceProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteDevice")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(etop.DeleteDeviceRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.DeletedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.NotificationService.DeleteDevice(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.DeletedResponse and nil error while calling DeleteDevice. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *notificationServiceServer) serveGetNotification(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetNotificationJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetNotificationProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *notificationServiceServer) serveGetNotificationJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetNotification")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *etop.Notification
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.NotificationService.GetNotification(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.Notification and nil error while calling GetNotification. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *notificationServiceServer) serveGetNotificationProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetNotification")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *etop.Notification
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.NotificationService.GetNotification(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.Notification and nil error while calling GetNotification. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *notificationServiceServer) serveGetNotifications(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetNotificationsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetNotificationsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *notificationServiceServer) serveGetNotificationsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetNotifications")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(etop.GetNotificationsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *etop.NotificationsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.NotificationService.GetNotifications(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.NotificationsResponse and nil error while calling GetNotifications. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *notificationServiceServer) serveGetNotificationsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetNotifications")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(etop.GetNotificationsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *etop.NotificationsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.NotificationService.GetNotifications(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *etop.NotificationsResponse and nil error while calling GetNotifications. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *notificationServiceServer) serveUpdateNotifications(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateNotificationsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateNotificationsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *notificationServiceServer) serveUpdateNotificationsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateNotifications")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(etop.UpdateNotificationsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.NotificationService.UpdateNotifications(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateNotifications. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *notificationServiceServer) serveUpdateNotificationsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateNotifications")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(etop.UpdateNotificationsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *cm.UpdatedResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.NotificationService.UpdateNotifications(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *cm.UpdatedResponse and nil error while calling UpdateNotifications. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *notificationServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 14
}

func (s *notificationServiceServer) ProtocGenTwirpVersion() string {
	return "v5.8.0"
}

func (s *notificationServiceServer) PathPrefix() string {
	return NotificationServicePathPrefix
}

// ==========================
// AuthorizeService Interface
// ==========================

type AuthorizeService interface {
	GetAuthorizedPartners(context.Context, *cm.Empty) (*GetAuthorizedPartnersResponse, error)

	GetAvailablePartners(context.Context, *cm.Empty) (*GetPartnersResponse, error)

	AuthorizePartner(context.Context, *AuthorizePartnerRequest) (*AuthorizedPartnerResponse, error)
}

// ================================
// AuthorizeService Protobuf Client
// ================================

type authorizeServiceProtobufClient struct {
	client HTTPClient
	urls   [3]string
}

// NewAuthorizeServiceProtobufClient creates a Protobuf client that implements the AuthorizeService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewAuthorizeServiceProtobufClient(addr string, client HTTPClient) AuthorizeService {
	prefix := urlBase(addr) + AuthorizeServicePathPrefix
	urls := [3]string{
		prefix + "GetAuthorizedPartners",
		prefix + "GetAvailablePartners",
		prefix + "AuthorizePartner",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &authorizeServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &authorizeServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *authorizeServiceProtobufClient) GetAuthorizedPartners(ctx context.Context, in *cm.Empty) (*GetAuthorizedPartnersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Authorize")
	ctx = ctxsetters.WithMethodName(ctx, "GetAuthorizedPartners")
	out := new(GetAuthorizedPartnersResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeServiceProtobufClient) GetAvailablePartners(ctx context.Context, in *cm.Empty) (*GetPartnersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Authorize")
	ctx = ctxsetters.WithMethodName(ctx, "GetAvailablePartners")
	out := new(GetPartnersResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeServiceProtobufClient) AuthorizePartner(ctx context.Context, in *AuthorizePartnerRequest) (*AuthorizedPartnerResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Authorize")
	ctx = ctxsetters.WithMethodName(ctx, "AuthorizePartner")
	out := new(AuthorizedPartnerResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ============================
// AuthorizeService JSON Client
// ============================

type authorizeServiceJSONClient struct {
	client HTTPClient
	urls   [3]string
}

// NewAuthorizeServiceJSONClient creates a JSON client that implements the AuthorizeService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewAuthorizeServiceJSONClient(addr string, client HTTPClient) AuthorizeService {
	prefix := urlBase(addr) + AuthorizeServicePathPrefix
	urls := [3]string{
		prefix + "GetAuthorizedPartners",
		prefix + "GetAvailablePartners",
		prefix + "AuthorizePartner",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &authorizeServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &authorizeServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *authorizeServiceJSONClient) GetAuthorizedPartners(ctx context.Context, in *cm.Empty) (*GetAuthorizedPartnersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Authorize")
	ctx = ctxsetters.WithMethodName(ctx, "GetAuthorizedPartners")
	out := new(GetAuthorizedPartnersResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeServiceJSONClient) GetAvailablePartners(ctx context.Context, in *cm.Empty) (*GetPartnersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Authorize")
	ctx = ctxsetters.WithMethodName(ctx, "GetAvailablePartners")
	out := new(GetPartnersResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeServiceJSONClient) AuthorizePartner(ctx context.Context, in *AuthorizePartnerRequest) (*AuthorizedPartnerResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Authorize")
	ctx = ctxsetters.WithMethodName(ctx, "AuthorizePartner")
	out := new(AuthorizedPartnerResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===============================
// AuthorizeService Server Handler
// ===============================

type authorizeServiceServer struct {
	AuthorizeService
	hooks *twirp.ServerHooks
}

func NewAuthorizeServiceServer(svc AuthorizeService, hooks *twirp.ServerHooks) TwirpServer {
	return &authorizeServiceServer{
		AuthorizeService: svc,
		hooks:            hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *authorizeServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// AuthorizeServicePathPrefix is used for all URL paths on a twirp AuthorizeService server.
// Requests are always: POST AuthorizeServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const AuthorizeServicePathPrefix = "/api/shop.Authorize/"

func (s *authorizeServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Authorize")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/shop.Authorize/GetAuthorizedPartners":
		s.serveGetAuthorizedPartners(ctx, resp, req)
		return
	case "/api/shop.Authorize/GetAvailablePartners":
		s.serveGetAvailablePartners(ctx, resp, req)
		return
	case "/api/shop.Authorize/AuthorizePartner":
		s.serveAuthorizePartner(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *authorizeServiceServer) serveGetAuthorizedPartners(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetAuthorizedPartnersJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetAuthorizedPartnersProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authorizeServiceServer) serveGetAuthorizedPartnersJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetAuthorizedPartners")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *GetAuthorizedPartnersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AuthorizeService.GetAuthorizedPartners(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetAuthorizedPartnersResponse and nil error while calling GetAuthorizedPartners. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authorizeServiceServer) serveGetAuthorizedPartnersProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetAuthorizedPartners")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *GetAuthorizedPartnersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AuthorizeService.GetAuthorizedPartners(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetAuthorizedPartnersResponse and nil error while calling GetAuthorizedPartners. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authorizeServiceServer) serveGetAvailablePartners(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetAvailablePartnersJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetAvailablePartnersProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authorizeServiceServer) serveGetAvailablePartnersJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetAvailablePartners")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *GetPartnersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AuthorizeService.GetAvailablePartners(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetPartnersResponse and nil error while calling GetAvailablePartners. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authorizeServiceServer) serveGetAvailablePartnersProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetAvailablePartners")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *GetPartnersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AuthorizeService.GetAvailablePartners(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetPartnersResponse and nil error while calling GetAvailablePartners. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authorizeServiceServer) serveAuthorizePartner(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAuthorizePartnerJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAuthorizePartnerProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *authorizeServiceServer) serveAuthorizePartnerJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AuthorizePartner")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(AuthorizePartnerRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *AuthorizedPartnerResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AuthorizeService.AuthorizePartner(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AuthorizedPartnerResponse and nil error while calling AuthorizePartner. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authorizeServiceServer) serveAuthorizePartnerProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AuthorizePartner")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(AuthorizePartnerRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *AuthorizedPartnerResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.AuthorizeService.AuthorizePartner(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AuthorizedPartnerResponse and nil error while calling AuthorizePartner. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *authorizeServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 15
}

func (s *authorizeServiceServer) ProtocGenTwirpVersion() string {
	return "v5.8.0"
}

func (s *authorizeServiceServer) PathPrefix() string {
	return AuthorizeServicePathPrefix
}

// ========================
// TradingService Interface
// ========================

type TradingService interface {
	TradingGetProduct(context.Context, *cm.IDRequest) (*ShopProduct, error)

	TradingGetProducts(context.Context, *cm.CommonListRequest) (*ShopProductsResponse, error)

	TradingCreateOrder(context.Context, *order.TradingCreateOrderRequest) (*order.Order, error)

	TradingGetOrder(context.Context, *cm.IDRequest) (*order.Order, error)

	TradingGetOrders(context.Context, *GetOrdersRequest) (*order.OrdersResponse, error)

	TradingPaymentOrder(context.Context, *TradingPaymentOrderRequest) (*TradingPaymentOrderResponse, error)
}

// ==============================
// TradingService Protobuf Client
// ==============================

type tradingServiceProtobufClient struct {
	client HTTPClient
	urls   [6]string
}

// NewTradingServiceProtobufClient creates a Protobuf client that implements the TradingService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewTradingServiceProtobufClient(addr string, client HTTPClient) TradingService {
	prefix := urlBase(addr) + TradingServicePathPrefix
	urls := [6]string{
		prefix + "TradingGetProduct",
		prefix + "TradingGetProducts",
		prefix + "TradingCreateOrder",
		prefix + "TradingGetOrder",
		prefix + "TradingGetOrders",
		prefix + "TradingPaymentOrder",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &tradingServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &tradingServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *tradingServiceProtobufClient) TradingGetProduct(ctx context.Context, in *cm.IDRequest) (*ShopProduct, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Trading")
	ctx = ctxsetters.WithMethodName(ctx, "TradingGetProduct")
	out := new(ShopProduct)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceProtobufClient) TradingGetProducts(ctx context.Context, in *cm.CommonListRequest) (*ShopProductsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Trading")
	ctx = ctxsetters.WithMethodName(ctx, "TradingGetProducts")
	out := new(ShopProductsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceProtobufClient) TradingCreateOrder(ctx context.Context, in *order.TradingCreateOrderRequest) (*order.Order, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Trading")
	ctx = ctxsetters.WithMethodName(ctx, "TradingCreateOrder")
	out := new(order.Order)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceProtobufClient) TradingGetOrder(ctx context.Context, in *cm.IDRequest) (*order.Order, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Trading")
	ctx = ctxsetters.WithMethodName(ctx, "TradingGetOrder")
	out := new(order.Order)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceProtobufClient) TradingGetOrders(ctx context.Context, in *GetOrdersRequest) (*order.OrdersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Trading")
	ctx = ctxsetters.WithMethodName(ctx, "TradingGetOrders")
	out := new(order.OrdersResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceProtobufClient) TradingPaymentOrder(ctx context.Context, in *TradingPaymentOrderRequest) (*TradingPaymentOrderResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Trading")
	ctx = ctxsetters.WithMethodName(ctx, "TradingPaymentOrder")
	out := new(TradingPaymentOrderResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// TradingService JSON Client
// ==========================

type tradingServiceJSONClient struct {
	client HTTPClient
	urls   [6]string
}

// NewTradingServiceJSONClient creates a JSON client that implements the TradingService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewTradingServiceJSONClient(addr string, client HTTPClient) TradingService {
	prefix := urlBase(addr) + TradingServicePathPrefix
	urls := [6]string{
		prefix + "TradingGetProduct",
		prefix + "TradingGetProducts",
		prefix + "TradingCreateOrder",
		prefix + "TradingGetOrder",
		prefix + "TradingGetOrders",
		prefix + "TradingPaymentOrder",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &tradingServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &tradingServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *tradingServiceJSONClient) TradingGetProduct(ctx context.Context, in *cm.IDRequest) (*ShopProduct, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Trading")
	ctx = ctxsetters.WithMethodName(ctx, "TradingGetProduct")
	out := new(ShopProduct)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceJSONClient) TradingGetProducts(ctx context.Context, in *cm.CommonListRequest) (*ShopProductsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Trading")
	ctx = ctxsetters.WithMethodName(ctx, "TradingGetProducts")
	out := new(ShopProductsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceJSONClient) TradingCreateOrder(ctx context.Context, in *order.TradingCreateOrderRequest) (*order.Order, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Trading")
	ctx = ctxsetters.WithMethodName(ctx, "TradingCreateOrder")
	out := new(order.Order)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceJSONClient) TradingGetOrder(ctx context.Context, in *cm.IDRequest) (*order.Order, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Trading")
	ctx = ctxsetters.WithMethodName(ctx, "TradingGetOrder")
	out := new(order.Order)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceJSONClient) TradingGetOrders(ctx context.Context, in *GetOrdersRequest) (*order.OrdersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Trading")
	ctx = ctxsetters.WithMethodName(ctx, "TradingGetOrders")
	out := new(order.OrdersResponse)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingServiceJSONClient) TradingPaymentOrder(ctx context.Context, in *TradingPaymentOrderRequest) (*TradingPaymentOrderResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Trading")
	ctx = ctxsetters.WithMethodName(ctx, "TradingPaymentOrder")
	out := new(TradingPaymentOrderResponse)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =============================
// TradingService Server Handler
// =============================

type tradingServiceServer struct {
	TradingService
	hooks *twirp.ServerHooks
}

func NewTradingServiceServer(svc TradingService, hooks *twirp.ServerHooks) TwirpServer {
	return &tradingServiceServer{
		TradingService: svc,
		hooks:          hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *tradingServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// TradingServicePathPrefix is used for all URL paths on a twirp TradingService server.
// Requests are always: POST TradingServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const TradingServicePathPrefix = "/api/shop.Trading/"

func (s *tradingServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "shop")
	ctx = ctxsetters.WithServiceName(ctx, "Trading")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api/shop.Trading/TradingGetProduct":
		s.serveTradingGetProduct(ctx, resp, req)
		return
	case "/api/shop.Trading/TradingGetProducts":
		s.serveTradingGetProducts(ctx, resp, req)
		return
	case "/api/shop.Trading/TradingCreateOrder":
		s.serveTradingCreateOrder(ctx, resp, req)
		return
	case "/api/shop.Trading/TradingGetOrder":
		s.serveTradingGetOrder(ctx, resp, req)
		return
	case "/api/shop.Trading/TradingGetOrders":
		s.serveTradingGetOrders(ctx, resp, req)
		return
	case "/api/shop.Trading/TradingPaymentOrder":
		s.serveTradingPaymentOrder(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *tradingServiceServer) serveTradingGetProduct(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveTradingGetProductJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveTradingGetProductProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tradingServiceServer) serveTradingGetProductJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TradingGetProduct")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopProduct
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.TradingService.TradingGetProduct(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopProduct and nil error while calling TradingGetProduct. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tradingServiceServer) serveTradingGetProductProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TradingGetProduct")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopProduct
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.TradingService.TradingGetProduct(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopProduct and nil error while calling TradingGetProduct. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tradingServiceServer) serveTradingGetProducts(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveTradingGetProductsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveTradingGetProductsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tradingServiceServer) serveTradingGetProductsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TradingGetProducts")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.CommonListRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopProductsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.TradingService.TradingGetProducts(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopProductsResponse and nil error while calling TradingGetProducts. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tradingServiceServer) serveTradingGetProductsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TradingGetProducts")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.CommonListRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *ShopProductsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.TradingService.TradingGetProducts(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShopProductsResponse and nil error while calling TradingGetProducts. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tradingServiceServer) serveTradingCreateOrder(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveTradingCreateOrderJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveTradingCreateOrderProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tradingServiceServer) serveTradingCreateOrderJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TradingCreateOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(order.TradingCreateOrderRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.Order
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.TradingService.TradingCreateOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.Order and nil error while calling TradingCreateOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tradingServiceServer) serveTradingCreateOrderProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TradingCreateOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(order.TradingCreateOrderRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.Order
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.TradingService.TradingCreateOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.Order and nil error while calling TradingCreateOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tradingServiceServer) serveTradingGetOrder(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveTradingGetOrderJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveTradingGetOrderProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tradingServiceServer) serveTradingGetOrderJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TradingGetOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(cm.IDRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.Order
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.TradingService.TradingGetOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.Order and nil error while calling TradingGetOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tradingServiceServer) serveTradingGetOrderProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TradingGetOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(cm.IDRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.Order
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.TradingService.TradingGetOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.Order and nil error while calling TradingGetOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tradingServiceServer) serveTradingGetOrders(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveTradingGetOrdersJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveTradingGetOrdersProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tradingServiceServer) serveTradingGetOrdersJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TradingGetOrders")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetOrdersRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.OrdersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.TradingService.TradingGetOrders(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.OrdersResponse and nil error while calling TradingGetOrders. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tradingServiceServer) serveTradingGetOrdersProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TradingGetOrders")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetOrdersRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *order.OrdersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.TradingService.TradingGetOrders(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *order.OrdersResponse and nil error while calling TradingGetOrders. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tradingServiceServer) serveTradingPaymentOrder(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveTradingPaymentOrderJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveTradingPaymentOrderProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tradingServiceServer) serveTradingPaymentOrderJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TradingPaymentOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(TradingPaymentOrderRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	// Call service method
	var respContent *TradingPaymentOrderResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.TradingService.TradingPaymentOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TradingPaymentOrderResponse and nil error while calling TradingPaymentOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tradingServiceServer) serveTradingPaymentOrderProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TradingPaymentOrder")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(TradingPaymentOrderRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	// Call service method
	var respContent *TradingPaymentOrderResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = s.TradingService.TradingPaymentOrder(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TradingPaymentOrderResponse and nil error while calling TradingPaymentOrder. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tradingServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 16
}

func (s *tradingServiceServer) ProtocGenTwirpVersion() string {
	return "v5.8.0"
}

func (s *tradingServiceServer) PathPrefix() string {
	return TradingServicePathPrefix
}

// =====
// Utils
// =====

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
//
// HTTPClient implementations should not follow redirects. Redirects are
// automatically disabled if *(net/http).Client is passed to client
// constructors. See the withoutRedirects function in this file for more
// details.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// TwirpServer is the interface generated server structs will support: they're
// HTTP handlers with additional methods for accessing metadata about the
// service. Those accessors are a low-level API for building reflection tools.
// Most people can think of TwirpServers as just http.Handlers.
type TwirpServer interface {
	http.Handler
	// ServiceDescriptor returns gzipped bytes describing the .proto file that
	// this service was generated from. Once unzipped, the bytes can be
	// unmarshalled as a
	// github.com/golang/protobuf/protoc-gen-go/descriptor.FileDescriptorProto.
	//
	// The returned integer is the index of this particular service within that
	// FileDescriptorProto's 'Service' slice of ServiceDescriptorProtos. This is a
	// low-level field, expected to be used for reflection.
	ServiceDescriptor() ([]byte, int)
	// ProtocGenTwirpVersion is the semantic version string of the version of
	// twirp used to generate this file.
	ProtocGenTwirpVersion() string
	// PathPrefix returns the HTTP URL path prefix for all methods handled by this
	// service. This can be used with an HTTP mux to route twirp requests
	// alongside non-twirp requests on one HTTP listener.
	PathPrefix() string
}

// WriteError writes an HTTP response with a valid Twirp error format (code, msg, meta).
// Useful outside of the Twirp server (e.g. http middleware), but does not trigger hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func WriteError(resp http.ResponseWriter, err error) {
	writeError(context.Background(), resp, err, nil)
}

// writeError writes Twirp errors in the response and triggers hooks.
func writeError(ctx context.Context, resp http.ResponseWriter, err error, hooks *twirp.ServerHooks) {
	// Non-twirp errors are wrapped as Internal (default)
	twerr, ok := err.(twirp.Error)
	if !ok {
		twerr = twirp.InternalErrorWith(err)
	}

	statusCode := twirp.ServerHTTPStatusFromErrorCode(twerr.Code())
	ctx = ctxsetters.WithStatusCode(ctx, statusCode)
	ctx = callError(ctx, hooks, twerr)

	respBody := marshalErrorToJSON(twerr)

	resp.Header().Set("Content-Type", "application/json") // Error responses are always JSON
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBody)))
	resp.WriteHeader(statusCode) // set HTTP status code and send response

	_, writeErr := resp.Write(respBody)
	if writeErr != nil {
		// We have three options here. We could log the error, call the Error
		// hook, or just silently ignore the error.
		//
		// Logging is unacceptable because we don't have a user-controlled
		// logger; writing out to stderr without permission is too rude.
		//
		// Calling the Error hook would confuse users: it would mean the Error
		// hook got called twice for one request, which is likely to lead to
		// duplicated log messages and metrics, no matter how well we document
		// the behavior.
		//
		// Silently ignoring the error is our least-bad option. It's highly
		// likely that the connection is broken and the original 'err' says
		// so anyway.
		_ = writeErr
	}

	callResponseSent(ctx, hooks)
}

// urlBase helps ensure that addr specifies a scheme. If it is unparsable
// as a URL, it returns addr unchanged.
func urlBase(addr string) string {
	// If the addr specifies a scheme, use it. If not, default to
	// http. If url.Parse fails on it, return it unchanged.
	url, err := url.Parse(addr)
	if err != nil {
		return addr
	}
	if url.Scheme == "" {
		url.Scheme = "http"
	}
	return url.String()
}

// getCustomHTTPReqHeaders retrieves a copy of any headers that are set in
// a context through the twirp.WithHTTPRequestHeaders function.
// If there are no headers set, or if they have the wrong type, nil is returned.
func getCustomHTTPReqHeaders(ctx context.Context) http.Header {
	header, ok := twirp.HTTPRequestHeaders(ctx)
	if !ok || header == nil {
		return nil
	}
	copied := make(http.Header)
	for k, vv := range header {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}
	return copied
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequest("POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if customHeader := getCustomHTTPReqHeaders(ctx); customHeader != nil {
		req.Header = customHeader
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	req.Header.Set("Twirp-Version", "v5.8.0")
	return req, nil
}

// JSON serialization for errors
type twerrJSON struct {
	Code string            `json:"code"`
	Msg  string            `json:"msg"`
	Meta map[string]string `json:"meta,omitempty"`
}

// marshalErrorToJSON returns JSON from a twirp.Error, that can be used as HTTP error response body.
// If serialization fails, it will use a descriptive Internal error instead.
func marshalErrorToJSON(twerr twirp.Error) []byte {
	// make sure that msg is not too large
	msg := twerr.Msg()
	if len(msg) > 1e6 {
		msg = msg[:1e6]
	}

	tj := twerrJSON{
		Code: string(twerr.Code()),
		Msg:  msg,
		Meta: twerr.MetaMap(),
	}

	buf, err := json.Marshal(&tj)
	if err != nil {
		buf = []byte("{\"type\": \"" + twirp.Internal + "\", \"msg\": \"There was an error but it could not be serialized into JSON\"}") // fallback
	}

	return buf
}

// errorFromResponse builds a twirp.Error from a non-200 HTTP response.
// If the response has a valid serialized Twirp error, then it's returned.
// If not, the response status code is used to generate a similar twirp
// error. See twirpErrorFromIntermediary for more info on intermediary errors.
func errorFromResponse(resp *http.Response) twirp.Error {
	statusCode := resp.StatusCode
	statusText := http.StatusText(statusCode)

	if isHTTPRedirect(statusCode) {
		// Unexpected redirect: it must be an error from an intermediary.
		// Twirp clients don't follow redirects automatically, Twirp only handles
		// POST requests, redirects should only happen on GET and HEAD requests.
		location := resp.Header.Get("Location")
		msg := fmt.Sprintf("unexpected HTTP status code %d %q received, Location=%q", statusCode, statusText, location)
		return twirpErrorFromIntermediary(statusCode, msg, location)
	}

	respBodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return wrapInternal(err, "failed to read server error response body")
	}
	var tj twerrJSON
	if err := json.Unmarshal(respBodyBytes, &tj); err != nil {
		// Invalid JSON response; it must be an error from an intermediary.
		msg := fmt.Sprintf("Error from intermediary with HTTP status code %d %q", statusCode, statusText)
		return twirpErrorFromIntermediary(statusCode, msg, string(respBodyBytes))
	}

	errorCode := twirp.ErrorCode(tj.Code)
	if !twirp.IsValidErrorCode(errorCode) {
		msg := "invalid type returned from server error response: " + tj.Code
		return twirp.InternalError(msg)
	}

	twerr := twirp.NewError(errorCode, tj.Msg)
	for k, v := range tj.Meta {
		twerr = twerr.WithMeta(k, v)
	}
	return twerr
}

// twirpErrorFromIntermediary maps HTTP errors from non-twirp sources to twirp errors.
// The mapping is similar to gRPC: https://github.com/grpc/grpc/blob/master/doc/http-grpc-status-mapping.md.
// Returned twirp Errors have some additional metadata for inspection.
func twirpErrorFromIntermediary(status int, msg string, bodyOrLocation string) twirp.Error {
	var code twirp.ErrorCode
	if isHTTPRedirect(status) { // 3xx
		code = twirp.Internal
	} else {
		switch status {
		case 400: // Bad Request
			code = twirp.Internal
		case 401: // Unauthorized
			code = twirp.Unauthenticated
		case 403: // Forbidden
			code = twirp.PermissionDenied
		case 404: // Not Found
			code = twirp.BadRoute
		case 429, 502, 503, 504: // Too Many Requests, Bad Gateway, Service Unavailable, Gateway Timeout
			code = twirp.Unavailable
		default: // All other codes
			code = twirp.Unknown
		}
	}

	twerr := twirp.NewError(code, msg)
	twerr = twerr.WithMeta("http_error_from_intermediary", "true") // to easily know if this error was from intermediary
	twerr = twerr.WithMeta("status_code", strconv.Itoa(status))
	if isHTTPRedirect(status) {
		twerr = twerr.WithMeta("location", bodyOrLocation)
	} else {
		twerr = twerr.WithMeta("body", bodyOrLocation)
	}
	return twerr
}

func isHTTPRedirect(status int) bool {
	return status >= 300 && status <= 399
}

// wrapInternal wraps an error with a prefix as an Internal error.
// The original error cause is accessible by github.com/pkg/errors.Cause.
func wrapInternal(err error, prefix string) twirp.Error {
	return twirp.InternalErrorWith(&wrappedError{prefix: prefix, cause: err})
}

type wrappedError struct {
	prefix string
	cause  error
}

func (e *wrappedError) Cause() error  { return e.cause }
func (e *wrappedError) Error() string { return e.prefix + ": " + e.cause.Error() }

// ensurePanicResponses makes sure that rpc methods causing a panic still result in a Twirp Internal
// error response (status 500), and error hooks are properly called with the panic wrapped as an error.
// The panic is re-raised so it can be handled normally with middleware.
func ensurePanicResponses(ctx context.Context, resp http.ResponseWriter, hooks *twirp.ServerHooks) {
	if r := recover(); r != nil {
		// Wrap the panic as an error so it can be passed to error hooks.
		// The original error is accessible from error hooks, but not visible in the response.
		err := errFromPanic(r)
		twerr := &internalWithCause{msg: "Internal service panic", cause: err}
		// Actually write the error
		writeError(ctx, resp, twerr, hooks)
		// If possible, flush the error to the wire.
		f, ok := resp.(http.Flusher)
		if ok {
			f.Flush()
		}

		panic(r)
	}
}

// errFromPanic returns the typed error if the recovered panic is an error, otherwise formats as error.
func errFromPanic(p interface{}) error {
	if err, ok := p.(error); ok {
		return err
	}
	return fmt.Errorf("panic: %v", p)
}

// internalWithCause is a Twirp Internal error wrapping an original error cause, accessible
// by github.com/pkg/errors.Cause, but the original error message is not exposed on Msg().
type internalWithCause struct {
	msg   string
	cause error
}

func (e *internalWithCause) Cause() error                                { return e.cause }
func (e *internalWithCause) Error() string                               { return e.msg + ": " + e.cause.Error() }
func (e *internalWithCause) Code() twirp.ErrorCode                       { return twirp.Internal }
func (e *internalWithCause) Msg() string                                 { return e.msg }
func (e *internalWithCause) Meta(key string) string                      { return "" }
func (e *internalWithCause) MetaMap() map[string]string                  { return nil }
func (e *internalWithCause) WithMeta(key string, val string) twirp.Error { return e }

// malformedRequestError is used when the twirp server cannot unmarshal a request
func malformedRequestError(msg string) twirp.Error {
	return twirp.NewError(twirp.Malformed, msg)
}

// badRouteError is used when the twirp server cannot route a request
func badRouteError(msg string, method, url string) twirp.Error {
	err := twirp.NewError(twirp.BadRoute, msg)
	err = err.WithMeta("twirp_invalid_route", method+" "+url)
	return err
}

// withoutRedirects makes sure that the POST request can not be redirected.
// The standard library will, by default, redirect requests (including POSTs) if it gets a 302 or
// 303 response, and also 301s in go1.8. It redirects by making a second request, changing the
// method to GET and removing the body. This produces very confusing error messages, so instead we
// set a redirect policy that always errors. This stops Go from executing the redirect.
//
// We have to be a little careful in case the user-provided http.Client has its own CheckRedirect
// policy - if so, we'll run through that policy first.
//
// Because this requires modifying the http.Client, we make a new copy of the client and return it.
func withoutRedirects(in *http.Client) *http.Client {
	copy := *in
	copy.CheckRedirect = func(req *http.Request, via []*http.Request) error {
		if in.CheckRedirect != nil {
			// Run the input's redirect if it exists, in case it has side effects, but ignore any error it
			// returns, since we want to use ErrUseLastResponse.
			err := in.CheckRedirect(req, via)
			_ = err // Silly, but this makes sure generated code passes errcheck -blank, which some people use.
		}
		return http.ErrUseLastResponse
	}
	return &copy
}

// doProtobufRequest makes a Protobuf request to the remote Twirp service.
func doProtobufRequest(ctx context.Context, client HTTPClient, url string, in, out proto.Message) (err error) {
	reqBodyBytes, err := proto.Marshal(in)
	if err != nil {
		return wrapInternal(err, "failed to marshal proto request")
	}
	reqBody := bytes.NewBuffer(reqBodyBytes)
	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	req, err := newRequest(ctx, url, reqBody, "application/protobuf")
	if err != nil {
		return wrapInternal(err, "could not build request")
	}
	resp, err := client.Do(req)
	if err != nil {
		return wrapInternal(err, "failed to do request")
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = wrapInternal(cerr, "failed to close response body")
		}
	}()

	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return errorFromResponse(resp)
	}

	respBodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return wrapInternal(err, "failed to read response body")
	}
	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	if err = proto.Unmarshal(respBodyBytes, out); err != nil {
		return wrapInternal(err, "failed to unmarshal proto response")
	}
	return nil
}

// doJSONRequest makes a JSON request to the remote Twirp service.
func doJSONRequest(ctx context.Context, client HTTPClient, url string, in, out proto.Message) (err error) {
	reqBody := bytes.NewBuffer(nil)
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: true}
	if err = marshaler.Marshal(reqBody, in); err != nil {
		return wrapInternal(err, "failed to marshal json request")
	}
	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	req, err := newRequest(ctx, url, reqBody, "application/json")
	if err != nil {
		return wrapInternal(err, "could not build request")
	}
	resp, err := client.Do(req)
	if err != nil {
		return wrapInternal(err, "failed to do request")
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = wrapInternal(cerr, "failed to close response body")
		}
	}()

	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return errorFromResponse(resp)
	}

	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(resp.Body, out); err != nil {
		return wrapInternal(err, "failed to unmarshal json response")
	}
	if err = ctx.Err(); err != nil {
		return wrapInternal(err, "aborted because context was done")
	}
	return nil
}

// Call twirp.ServerHooks.RequestReceived if the hook is available
func callRequestReceived(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestReceived == nil {
		return ctx, nil
	}
	return h.RequestReceived(ctx)
}

// Call twirp.ServerHooks.RequestRouted if the hook is available
func callRequestRouted(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestRouted == nil {
		return ctx, nil
	}
	return h.RequestRouted(ctx)
}

// Call twirp.ServerHooks.ResponsePrepared if the hook is available
func callResponsePrepared(ctx context.Context, h *twirp.ServerHooks) context.Context {
	if h == nil || h.ResponsePrepared == nil {
		return ctx
	}
	return h.ResponsePrepared(ctx)
}

// Call twirp.ServerHooks.ResponseSent if the hook is available
func callResponseSent(ctx context.Context, h *twirp.ServerHooks) {
	if h == nil || h.ResponseSent == nil {
		return
	}
	h.ResponseSent(ctx)
}

// Call twirp.ServerHooks.Error if the hook is available
func callError(ctx context.Context, h *twirp.ServerHooks, err twirp.Error) context.Context {
	if h == nil || h.Error == nil {
		return ctx
	}
	return h.Error(ctx, err)
}

var twirpFileDescriptor0 = []byte{
	// 6444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x3d, 0x5b, 0x6c, 0x1c, 0xc9,
	0x71, 0xda, 0x27, 0xb9, 0xb5, 0xe4, 0x8a, 0x6c, 0xbe, 0x56, 0x2b, 0x91, 0x22, 0x47, 0x77, 0x27,
	0x9d, 0x7d, 0x22, 0x2d, 0x4a, 0xbe, 0x8b, 0xed, 0xf3, 0xd9, 0x14, 0xa5, 0x93, 0xf6, 0x72, 0xba,
	0x53, 0x96, 0x3a, 0x39, 0x39, 0xfb, 0xb2, 0x1e, 0xee, 0x34, 0x97, 0x13, 0xcd, 0xce, 0xac, 0x67,
	0x66, 0x29, 0xd1, 0x40, 0x00, 0x03, 0x06, 0x0c, 0x7f, 0x26, 0x41, 0x3e, 0x82, 0x20, 0x08, 0x90,
	0x04, 0x0e, 0xf2, 0x95, 0x00, 0x81, 0x83, 0x24, 0x48, 0x80, 0x7c, 0xc4, 0x1f, 0xce, 0xd3, 0x46,
	0x80, 0xe4, 0x33, 0xf0, 0xe9, 0x80, 0x20, 0x3f, 0x09, 0x0c, 0x24, 0x40, 0xfe, 0x82, 0xa0, 0x5f,
	0x33, 0xdd, 0x33, 0x3d, 0xb3, 0x4b, 0x49, 0x77, 0xb6, 0xe1, 0xfc, 0x88, 0xb3, 0xd5, 0xd5, 0xaf,
	0xaa, 0xea, 0xea, 0xaa, 0xea, 0xae, 0x16, 0x2c, 0xe2, 0xd0, 0x1b, 0x6e, 0x05, 0x87, 0xfc, 0x9f,
	0xcd, 0xa1, 0xef, 0x85, 0x1e, 0x2a, 0x93, 0xef, 0xd6, 0x4b, 0xf4, 0x47, 0xef, 0x72, 0x1f, 0xbb,
	0x97, 0x83, 0x87, 0x66, 0xbf, 0x8f, 0xfd, 0x2d, 0x6f, 0x18, 0xda, 0x9e, 0x1b, 0x6c, 0x99, 0xae,
	0xeb, 0x85, 0x26, 0xfd, 0x66, 0x75, 0x5a, 0x8b, 0x7d, 0xaf, 0xef, 0xd1, 0xcf, 0x2d, 0xf2, 0xc5,
	0xa1, 0xe7, 0xfb, 0x9e, 0xd7, 0x77, 0xf0, 0x16, 0xfd, 0xb5, 0x3f, 0x3a, 0xd8, 0x0a, 0xed, 0x01,
	0x0e, 0x42, 0x73, 0xc0, 0xbb, 0x6a, 0x2d, 0xf4, 0xbc, 0xc1, 0xc0, 0x73, 0xb7, 0xd8, 0x1f, 0x0e,
	0x7c, 0x8e, 0x03, 0x83, 0xa1, 0x8f, 0x4d, 0x2b, 0x38, 0xc4, 0x38, 0x94, 0xbf, 0x39, 0xd6, 0x06,
	0x1d, 0x3b, 0x0e, 0x7b, 0x5b, 0xfd, 0x43, 0xb7, 0xeb, 0x7a, 0x21, 0xee, 0xf6, 0x3c, 0x0b, 0x6f,
	0x91, 0x7f, 0x38, 0x4a, 0x2b, 0x42, 0x09, 0xfd, 0xe3, 0x2e, 0xed, 0x26, 0x2a, 0x5b, 0x8d, 0xca,
	0x82, 0x43, 0x7b, 0x38, 0xb4, 0xdd, 0xfe, 0x56, 0x10, 0x9a, 0xa1, 0xa6, 0x38, 0x34, 0xc3, 0x51,
	0x70, 0x95, 0xff, 0xcd, 0x28, 0xbe, 0xa6, 0x16, 0x9f, 0xe6, 0xc5, 0x82, 0xa4, 0xad, 0x65, 0x0a,
	0xf0, 0x7c, 0x8b, 0x10, 0x91, 0xfc, 0xcb, 0xe1, 0x9f, 0x88, 0xda, 0x19, 0x9a, 0xc7, 0x03, 0xec,
	0x86, 0xdd, 0xa1, 0xef, 0x1d, 0xd9, 0x04, 0x2d, 0x09, 0x60, 0x35, 0x8c, 0xbf, 0x2d, 0xc3, 0x42,
	0x07, 0xf7, 0xed, 0x20, 0xc4, 0xfe, 0xde, 0xa1, 0x37, 0xec, 0xe0, 0xaf, 0x8c, 0x70, 0x10, 0xa2,
	0x26, 0x94, 0x5d, 0x73, 0x80, 0x9b, 0x85, 0xf5, 0xc2, 0xa5, 0xda, 0xf5, 0xf2, 0x77, 0xff, 0xf5,
	0xfc, 0xa9, 0x0e, 0x85, 0xa0, 0x8b, 0x30, 0x65, 0x5a, 0x96, 0x8f, 0x83, 0xa0, 0x59, 0x5c, 0x2f,
	0x5c, 0xaa, 0x6f, 0xcf, 0x6e, 0xd2, 0x91, 0xed, 0x30, 0x60, 0x47, 0x94, 0xa2, 0x16, 0x54, 0x86,
	0x87, 0x9e, 0x8b, 0x9b, 0x53, 0x52, 0x1b, 0x0c, 0x84, 0xae, 0xc1, 0xcc, 0xbe, 0xe9, 0x3e, 0xe8,
	0x9a, 0xbd, 0x9e, 0x37, 0x72, 0xc3, 0xe6, 0x34, 0x6d, 0x69, 0x9e, 0xb5, 0x74, 0xdd, 0x74, 0x1f,
	0xec, 0xb0, 0x82, 0x4e, 0x7d, 0x3f, 0xfe, 0x81, 0x9e, 0x87, 0xfa, 0x43, 0xbc, 0x1f, 0xd8, 0x21,
	0xee, 0x8e, 0x7c, 0xa7, 0x39, 0x23, 0xb5, 0x0b, 0xbc, 0xe0, 0x1d, 0xdf, 0x41, 0x1b, 0x50, 0xb3,
	0x07, 0x66, 0x9f, 0x21, 0xcd, 0x4a, 0x48, 0xd3, 0x14, 0x4c, 0x50, 0x5a, 0x50, 0xc1, 0x03, 0xd3,
	0x76, 0x9a, 0x0d, 0x79, 0x6c, 0x14, 0x84, 0xce, 0xc3, 0xf4, 0xc8, 0x77, 0xba, 0x81, 0x33, 0xea,
	0x37, 0xe7, 0xa4, 0xe2, 0xa9, 0x91, 0xef, 0xec, 0x39, 0xa3, 0x3e, 0x19, 0x7c, 0xcf, 0x1b, 0x0c,
	0x4d, 0xf7, 0xb8, 0x6b, 0xbb, 0x07, 0x5e, 0x73, 0x5e, 0x1e, 0xfc, 0x2e, 0x2b, 0x69, 0xbb, 0x07,
	0x5e, 0xa7, 0xde, 0x8b, 0x7f, 0xa0, 0x57, 0x61, 0x65, 0xe0, 0xb9, 0xf8, 0xb8, 0x1b, 0xfa, 0xa6,
	0x1b, 0x98, 0x3d, 0x22, 0xee, 0x5d, 0xdf, 0x1f, 0x39, 0xb8, 0x89, 0xa4, 0x5e, 0x96, 0x28, 0xd2,
	0xbd, 0x18, 0xa7, 0x43, 0x50, 0xd0, 0x15, 0xa8, 0x07, 0x23, 0xff, 0x08, 0xf3, 0x2e, 0x17, 0xd6,
	0x4b, 0x97, 0xea, 0xdb, 0x73, 0xac, 0xcb, 0x3d, 0x5a, 0x40, 0x7b, 0x84, 0x20, 0xfa, 0x46, 0x43,
	0x58, 0x17, 0xb2, 0xd8, 0x0d, 0xb0, 0x7f, 0x64, 0xf7, 0x70, 0x37, 0xc0, 0x0e, 0xee, 0x85, 0xdd,
	0x20, 0xf4, 0xcd, 0x10, 0xf7, 0x8f, 0x9b, 0x8b, 0xb4, 0x9d, 0x8b, 0xbc, 0x1d, 0x8e, 0xbd, 0xc7,
	0x90, 0xf7, 0x28, 0xee, 0x1e, 0x47, 0x6d, 0x87, 0x78, 0xd0, 0x59, 0x0d, 0xf2, 0x50, 0x8c, 0x97,
	0x61, 0x51, 0x95, 0xa5, 0x60, 0xe8, 0xb9, 0x01, 0x46, 0x6b, 0x40, 0x75, 0x00, 0x15, 0xa6, 0xfa,
	0x36, 0x88, 0xde, 0xbc, 0x61, 0x87, 0xc2, 0x8d, 0xbf, 0xaa, 0xc0, 0xfc, 0x3b, 0x43, 0xcb, 0x0c,
	0xf1, 0xff, 0x8b, 0x20, 0x15, 0xc1, 0x97, 0xe0, 0xb4, 0x39, 0x0a, 0xbd, 0x6e, 0xcf, 0xc7, 0x66,
	0x88, 0xbb, 0x07, 0x07, 0x83, 0xe6, 0xe9, 0xf5, 0xc2, 0xa5, 0x69, 0x8e, 0x35, 0x4b, 0x0a, 0x77,
	0x69, 0xd9, 0xeb, 0x07, 0x03, 0xf4, 0x1a, 0xcc, 0x2a, 0x3a, 0x8b, 0x4a, 0x6d, 0x63, 0xbb, 0xb5,
	0xa9, 0x40, 0x37, 0x6f, 0xdd, 0x7e, 0xeb, 0x2d, 0x2f, 0xc4, 0xbb, 0x9e, 0x85, 0x3b, 0xf5, 0xfe,
	0xa1, 0x2b, 0x7e, 0xa0, 0x4b, 0x50, 0x65, 0x0a, 0x8d, 0x4a, 0x72, 0x63, 0x7b, 0x7e, 0x93, 0xfd,
	0xdc, 0xbc, 0xe7, 0x1f, 0xbf, 0xed, 0x52, 0xfc, 0x4a, 0x48, 0x3e, 0x53, 0x92, 0x8f, 0x9e, 0x56,
	0xf2, 0x17, 0x4e, 0x2c, 0xf9, 0x8b, 0xcf, 0x48, 0xf2, 0x97, 0x9e, 0xa9, 0xe4, 0x5f, 0x03, 0x24,
	0x0b, 0xf0, 0x84, 0x72, 0xff, 0xbb, 0x45, 0x80, 0x5d, 0xcf, 0x21, 0x2d, 0xd9, 0x9e, 0x8b, 0x16,
	0xa1, 0x68, 0x5b, 0x14, 0xb9, 0xc4, 0x49, 0x52, 0xb4, 0xad, 0x68, 0x19, 0x14, 0x53, 0xcb, 0xe0,
	0x05, 0xa8, 0x5b, 0x38, 0xe8, 0xf9, 0x36, 0xdd, 0x46, 0x9b, 0x25, 0x09, 0x41, 0x2e, 0x40, 0x17,
	0x00, 0x82, 0x43, 0xcf, 0x0f, 0xbb, 0x04, 0xd8, 0x2c, 0x4b, 0x68, 0x35, 0x0a, 0xbf, 0x81, 0x83,
	0x1e, 0x91, 0x58, 0x52, 0xdc, 0x3d, 0x0c, 0x07, 0x4e, 0xb3, 0x22, 0x4b, 0x2c, 0x01, 0xdf, 0x0e,
	0x07, 0x0e, 0xfa, 0x14, 0x00, 0x13, 0x48, 0xab, 0x6b, 0x86, 0xcd, 0x2a, 0x9d, 0x54, 0x6b, 0x93,
	0xed, 0xc9, 0x9b, 0x62, 0x4f, 0xde, 0xbc, 0x27, 0xf6, 0xe4, 0x4e, 0x8d, 0x63, 0xef, 0x84, 0xa4,
	0xea, 0x88, 0xd2, 0x87, 0x56, 0x9d, 0x1a, 0x5f, 0x95, 0x63, 0xef, 0x84, 0xc6, 0xef, 0x15, 0x60,
	0x85, 0xc9, 0x7a, 0x4c, 0xaa, 0xa4, 0x8a, 0xf8, 0x91, 0xd3, 0xc6, 0x68, 0xc3, 0x42, 0x3c, 0xbc,
	0x20, 0x92, 0x80, 0x6d, 0xa8, 0xf7, 0x62, 0x70, 0xb3, 0xc0, 0x85, 0x97, 0x5a, 0x47, 0xd2, 0x74,
	0x64, 0x24, 0xe3, 0xcf, 0x0b, 0xb0, 0xc2, 0x84, 0x29, 0x3d, 0xe1, 0x1f, 0x73, 0x11, 0x31, 0x06,
	0x70, 0x9e, 0x0d, 0xfd, 0xae, 0xef, 0x59, 0xa3, 0x5e, 0x18, 0xa4, 0xa7, 0xf0, 0x22, 0xcc, 0xc6,
	0xb3, 0xed, 0x26, 0x66, 0x33, 0x13, 0x17, 0xb5, 0x2d, 0x74, 0x1e, 0xea, 0x43, 0xd6, 0x4e, 0xd7,
	0xb6, 0x88, 0xae, 0x2f, 0x5d, 0x2a, 0x75, 0x80, 0x83, 0xda, 0x56, 0x40, 0xba, 0xeb, 0xe0, 0x81,
	0x77, 0xf4, 0x11, 0x75, 0xf7, 0x7e, 0x11, 0xea, 0x37, 0x43, 0x6f, 0x78, 0xdf, 0xf4, 0x6d, 0xd3,
	0xcd, 0xe1, 0x06, 0xd5, 0xc2, 0x0a, 0x37, 0x08, 0x24, 0xe2, 0x53, 0x79, 0x1c, 0x9f, 0xaa, 0x93,
	0xf1, 0x69, 0x6a, 0x02, 0x3e, 0x4d, 0x6b, 0x97, 0xf2, 0x2a, 0x40, 0xb4, 0x3f, 0x05, 0xcd, 0xda,
	0x7a, 0xe9, 0x52, 0xad, 0x53, 0x13, 0x5b, 0x53, 0x40, 0xba, 0x71, 0xec, 0x80, 0x18, 0x8b, 0x76,
	0x0f, 0xd3, 0xad, 0xa7, 0x22, 0xba, 0x21, 0xf0, 0xbb, 0x04, 0x4c, 0x90, 0x7a, 0x5e, 0x84, 0x34,
	0x27, 0x23, 0x11, 0x38, 0x43, 0xda, 0x02, 0x30, 0xc3, 0xd0, 0xb7, 0xf7, 0x47, 0x21, 0x0e, 0x9a,
	0x88, 0xca, 0xff, 0x69, 0x26, 0xff, 0x3b, 0x02, 0xde, 0x91, 0x50, 0x8c, 0x6f, 0x97, 0x18, 0x8d,
	0x39, 0x47, 0x7f, 0x82, 0x69, 0xdc, 0x84, 0xf2, 0xc8, 0xb5, 0x43, 0xc5, 0x46, 0xa0, 0x90, 0x8f,
	0x8e, 0xfa, 0xcf, 0x43, 0xbd, 0x47, 0x36, 0x28, 0xcf, 0x3f, 0x26, 0xa2, 0x0f, 0x12, 0x15, 0x41,
	0x14, 0xb4, 0x2d, 0xb4, 0x03, 0x2d, 0x21, 0xf8, 0x81, 0x37, 0xf2, 0x7b, 0xb8, 0x2b, 0xd7, 0xaa,
	0x4b, 0xb5, 0x56, 0x38, 0xde, 0x1e, 0x45, 0xdb, 0x8d, 0x9a, 0x30, 0xfe, 0xa7, 0x0c, 0x75, 0xb2,
	0xb3, 0xe5, 0x2f, 0x8d, 0xe7, 0xa1, 0x4c, 0x37, 0x71, 0x61, 0x6b, 0x51, 0x39, 0x90, 0x56, 0x54,
	0x87, 0x16, 0xe7, 0x70, 0x77, 0x15, 0xa6, 0xb0, 0xc5, 0x8c, 0x1c, 0x59, 0x97, 0x55, 0xb1, 0xb5,
	0x7b, 0x22, 0xe6, 0x57, 0x26, 0x63, 0x7e, 0x75, 0x02, 0xe6, 0x4f, 0x3d, 0xfd, 0x02, 0x6b, 0xe8,
	0x59, 0x7c, 0x11, 0x66, 0x7c, 0x1c, 0x9a, 0xb6, 0xa3, 0x91, 0x84, 0x3a, 0x2b, 0x39, 0x81, 0x2c,
	0x10, 0xda, 0x78, 0x21, 0xa6, 0xec, 0x8c, 0x69, 0xe3, 0x85, 0x18, 0x5d, 0x86, 0x2a, 0x73, 0x37,
	0xa9, 0xa8, 0x36, 0xc8, 0xfa, 0x64, 0x4e, 0xea, 0xe6, 0x1e, 0xfd, 0x2b, 0x88, 0xcc, 0xa0, 0x64,
	0x58, 0x76, 0xd0, 0x35, 0x8f, 0x4c, 0xdb, 0x31, 0xf7, 0x1d, 0x4c, 0xcd, 0x5b, 0x61, 0x99, 0xd6,
	0xed, 0x60, 0x47, 0x14, 0x20, 0x04, 0xe5, 0xd0, 0xec, 0x07, 0x4d, 0xa0, 0xb3, 0xa7, 0xdf, 0xe8,
	0x3c, 0x54, 0x02, 0x0a, 0x5c, 0xa6, 0xaa, 0xa0, 0xc6, 0x44, 0xe0, 0x9e, 0xd9, 0xef, 0x30, 0xf8,
	0xc9, 0x15, 0xc6, 0x77, 0xaa, 0x4c, 0xf2, 0xf2, 0x15, 0x46, 0xa6, 0xe4, 0xf1, 0x6a, 0x3f, 0x35,
	0x92, 0xf7, 0x44, 0x4c, 0xf9, 0xe8, 0x65, 0xe7, 0x47, 0xb0, 0x40, 0x9e, 0x87, 0x86, 0x62, 0x29,
	0x04, 0xcd, 0x79, 0x6a, 0x01, 0xcc, 0xca, 0x46, 0x42, 0x80, 0x2e, 0xc3, 0xf4, 0x11, 0xd3, 0x56,
	0x42, 0x3c, 0xb9, 0x34, 0x49, 0xea, 0xaf, 0x13, 0xa1, 0xa0, 0x4f, 0xc0, 0x7c, 0x42, 0xb7, 0xda,
	0x16, 0x75, 0x7b, 0x84, 0x74, 0x9e, 0x56, 0x54, 0x6a, 0xdb, 0x4a, 0x98, 0xd9, 0x4b, 0x4f, 0x6e,
	0x66, 0x2f, 0x9e, 0xc4, 0xcc, 0xfe, 0x45, 0x40, 0xb7, 0x70, 0xc8, 0xc7, 0x1f, 0x08, 0xeb, 0xc9,
	0x80, 0xea, 0xd0, 0xec, 0xdb, 0x6e, 0x3f, 0xf2, 0x61, 0x7a, 0x83, 0xcd, 0xbb, 0x14, 0xd2, 0xe1,
	0x25, 0xe8, 0x39, 0x98, 0x3a, 0xb0, 0x9d, 0x10, 0xfb, 0x41, 0xb3, 0x4c, 0xe9, 0x41, 0x91, 0x5e,
	0xa7, 0xa0, 0x8e, 0x28, 0x32, 0x1e, 0xc0, 0xa2, 0x44, 0xa0, 0xd8, 0x42, 0x7e, 0x2e, 0xd1, 0xc3,
	0x0c, 0xef, 0x01, 0x53, 0xaf, 0x4e, 0xf4, 0x21, 0x13, 0xbd, 0x38, 0x96, 0xe8, 0xa2, 0x33, 0x61,
	0x15, 0x9e, 0xbc, 0x33, 0xce, 0x13, 0x4d, 0x67, 0x42, 0x5f, 0x44, 0x28, 0xc6, 0x0f, 0x8b, 0xb0,
	0xc8, 0x8c, 0x5e, 0x31, 0x90, 0x5c, 0x63, 0x1d, 0xc9, 0xc6, 0x3a, 0xd7, 0x11, 0x88, 0xaf, 0xaf,
	0x12, 0x87, 0x91, 0x95, 0x85, 0xb8, 0x2a, 0xaa, 0x33, 0x18, 0x57, 0x42, 0xb2, 0x1c, 0x13, 0x5d,
	0x53, 0x91, 0x25, 0x78, 0x55, 0x59, 0x34, 0x15, 0x56, 0x1c, 0x2f, 0x97, 0x8d, 0xc4, 0x72, 0xa9,
	0x52, 0x04, 0x65, 0xa1, 0xac, 0xab, 0xca, 0x8a, 0x6a, 0x18, 0x55, 0x4d, 0xad, 0x2a, 0x6a, 0x8a,
	0x5a, 0x3e, 0xb2, 0x82, 0x3a, 0x2b, 0x2b, 0xa8, 0x1a, 0x2d, 0x8d, 0x55, 0x93, 0xaa, 0xdb, 0x61,
	0xac, 0x6e, 0x47, 0xcb, 0x50, 0x0a, 0x1e, 0x8c, 0x94, 0x28, 0x1c, 0x01, 0x18, 0x7f, 0x11, 0x91,
	0x5c, 0xb0, 0xe3, 0x49, 0x48, 0x1e, 0x2b, 0x73, 0x4e, 0x5e, 0xc1, 0x86, 0xb2, 0xca, 0x06, 0x6a,
	0xc5, 0x55, 0x18, 0x8c, 0xda, 0x6f, 0xeb, 0x1a, 0x4b, 0x32, 0x8f, 0x4a, 0x53, 0xb9, 0x54, 0x9a,
	0x4e, 0x50, 0x49, 0x65, 0x72, 0x2d, 0x9f, 0xc9, 0x30, 0x8e, 0xc9, 0xf5, 0x14, 0x93, 0x8d, 0x3b,
	0xb0, 0xa4, 0xc8, 0x6b, 0xb4, 0xda, 0xaf, 0xc1, 0x14, 0x53, 0x08, 0xc2, 0x53, 0x6d, 0x31, 0xe6,
	0xe8, 0xa4, 0xbb, 0x23, 0x50, 0x8d, 0xdf, 0x29, 0xc0, 0x19, 0xd5, 0xe9, 0xbb, 0x67, 0xf6, 0xa3,
	0x36, 0xe7, 0xa0, 0x44, 0x54, 0x69, 0x81, 0xaa, 0x52, 0xf2, 0x49, 0x28, 0x6a, 0x5a, 0xdc, 0xbf,
	0xaa, 0x75, 0xe8, 0x37, 0x6a, 0xc2, 0x94, 0x85, 0x1d, 0x4c, 0x7a, 0x2e, 0x51, 0xb0, 0xf8, 0x49,
	0x9c, 0x32, 0x1f, 0x0f, 0x1d, 0xb3, 0x87, 0xbb, 0xa6, 0xe3, 0x50, 0x0d, 0x53, 0xeb, 0x00, 0x07,
	0xed, 0x38, 0x0e, 0xd1, 0xed, 0x0c, 0x97, 0x96, 0x57, 0xa4, 0x0d, 0xa5, 0xc6, 0xe0, 0x3b, 0x8e,
	0x63, 0xfc, 0x12, 0x2c, 0x27, 0xa7, 0xcc, 0x55, 0xc2, 0xc9, 0x34, 0x0b, 0xda, 0x80, 0x2a, 0xf6,
	0x7d, 0xcf, 0x67, 0xe3, 0x24, 0x7b, 0x65, 0x6f, 0xb0, 0x79, 0x93, 0x40, 0x3a, 0xbc, 0xc0, 0xc0,
	0x80, 0x76, 0x2c, 0x2b, 0x49, 0x5b, 0x2d, 0x1d, 0xe8, 0xa6, 0x5b, 0x94, 0x76, 0xe2, 0x94, 0xb7,
	0x5a, 0xca, 0xf2, 0x56, 0x8d, 0x3e, 0x2c, 0x28, 0xdd, 0x68, 0xe6, 0x53, 0x38, 0xc9, 0x7c, 0x8a,
	0xf9, 0xf3, 0x89, 0x75, 0xe9, 0x87, 0x3a, 0x9f, 0x94, 0xca, 0x96, 0x95, 0x71, 0x61, 0xac, 0x32,
	0x9e, 0x64, 0x3e, 0x2f, 0xc2, 0x12, 0x0b, 0x1a, 0x8c, 0x65, 0x91, 0xf1, 0x8d, 0x02, 0xcc, 0xdd,
	0xc2, 0xe1, 0xdb, 0xbe, 0x85, 0xfd, 0x67, 0xbf, 0x27, 0xa2, 0x4b, 0x50, 0x19, 0xd8, 0x8f, 0xb0,
	0x45, 0xa5, 0xb6, 0xbe, 0x8d, 0x58, 0x80, 0xf0, 0x0e, 0x01, 0x89, 0xe0, 0x33, 0x43, 0x30, 0xfe,
	0x38, 0x5a, 0x63, 0x6c, 0x2c, 0xcc, 0xb8, 0xca, 0xe6, 0xc5, 0x8b, 0x30, 0xd5, 0xf3, 0xdc, 0x03,
	0xdb, 0x1f, 0x50, 0xa5, 0x97, 0xb6, 0xcb, 0x3a, 0xa2, 0x9c, 0xb2, 0xc8, 0x74, 0x7b, 0xd8, 0xe9,
	0xfa, 0xd8, 0x0c, 0x12, 0x41, 0xa2, 0x19, 0x56, 0xd4, 0xa1, 0x25, 0x92, 0xb1, 0x57, 0x56, 0x1a,
	0xbd, 0xa6, 0x35, 0xf6, 0x8c, 0x2b, 0xd0, 0xa0, 0xa3, 0x6d, 0xdf, 0x10, 0x03, 0x3d, 0x0f, 0xd3,
	0xf4, 0xb8, 0x2a, 0x19, 0x87, 0x99, 0xa2, 0xd0, 0xb6, 0x65, 0x6c, 0xc2, 0x69, 0x5e, 0x25, 0x9a,
	0xdc, 0x59, 0xa8, 0x89, 0x3a, 0x62, 0x8a, 0xd3, 0x1c, 0x9d, 0xc8, 0xe6, 0x06, 0x8f, 0x83, 0x8f,
	0x9c, 0x03, 0xdb, 0x71, 0x06, 0xd8, 0x0d, 0x83, 0xd7, 0x3d, 0x9f, 0x36, 0x32, 0x69, 0xaf, 0x44,
	0xc7, 0xf0, 0x05, 0x41, 0x3b, 0x29, 0xb1, 0xc0, 0x0f, 0x07, 0x91, 0x6e, 0xbe, 0x0c, 0x68, 0x97,
	0x12, 0xe2, 0x64, 0xed, 0xa6, 0x48, 0x5b, 0xcc, 0x22, 0xad, 0x71, 0x13, 0x16, 0xa4, 0x1e, 0x72,
	0x38, 0x7b, 0x0e, 0xaa, 0x9a, 0xc6, 0x38, 0xcc, 0xf8, 0xdf, 0x02, 0xcc, 0xde, 0x95, 0xed, 0xc9,
	0xec, 0xf8, 0x49, 0x78, 0x3c, 0x4c, 0xf8, 0x39, 0x04, 0x12, 0x39, 0x32, 0xa5, 0x94, 0x23, 0x93,
	0xc5, 0xfd, 0x0c, 0x53, 0x5f, 0xb5, 0x45, 0x2b, 0x27, 0xb0, 0x45, 0x9f, 0x22, 0xd0, 0x6c, 0x9c,
	0x83, 0x16, 0x13, 0x08, 0x85, 0x0a, 0x9c, 0x9c, 0xc6, 0x7d, 0x58, 0x56, 0xe0, 0xb1, 0x9a, 0x79,
	0x15, 0x4e, 0xab, 0x66, 0xba, 0xd0, 0x36, 0x0b, 0x4c, 0xdb, 0xa8, 0xcd, 0x35, 0x14, 0x9b, 0x3d,
	0x30, 0xbe, 0x56, 0x82, 0x45, 0xa5, 0x5b, 0x29, 0x40, 0x4d, 0xad, 0x8c, 0x42, 0x66, 0x9c, 0x2a,
	0x1d, 0xb3, 0x15, 0x71, 0xa3, 0x52, 0x2a, 0x6e, 0xd4, 0x94, 0xed, 0x13, 0xc5, 0x0d, 0xfb, 0xf1,
	0x0b, 0x6f, 0x8c, 0xf7, 0xb7, 0x26, 0x0a, 0x73, 0x25, 0x5d, 0xbc, 0x56, 0x86, 0x8b, 0x67, 0xfc,
	0x65, 0xc4, 0x82, 0x84, 0x15, 0xfe, 0x24, 0x2c, 0xb8, 0x00, 0x10, 0x47, 0x82, 0x95, 0x3d, 0xab,
	0x16, 0x85, 0x83, 0x7f, 0x72, 0xb8, 0xa1, 0x9a, 0xdd, 0x8d, 0xf1, 0x66, 0xf7, 0x8f, 0x80, 0x7d,
	0xbf, 0x5e, 0x85, 0xb5, 0x1b, 0x78, 0xe8, 0xe3, 0x1e, 0x59, 0xc8, 0x5a, 0x46, 0x6a, 0x3d, 0xe9,
	0x95, 0x3c, 0x4f, 0x5a, 0x65, 0x63, 0x41, 0xcf, 0xc6, 0x8b, 0x30, 0x23, 0x90, 0x52, 0xd2, 0x20,
	0xce, 0x03, 0xde, 0xe2, 0xeb, 0x32, 0x43, 0x33, 0xfe, 0x04, 0x84, 0x78, 0x4e, 0x18, 0xa7, 0xf9,
	0xe8, 0x25, 0x20, 0x5a, 0xa7, 0x0b, 0xa9, 0x75, 0x7a, 0x15, 0xd0, 0x57, 0x46, 0xa6, 0x1b, 0xda,
	0xe1, 0xb1, 0x14, 0x3a, 0x5a, 0x94, 0x1a, 0x9a, 0x17, 0xe5, 0x71, 0x00, 0x69, 0x13, 0xe6, 0xa2,
	0x4a, 0x9e, 0xdb, 0x3d, 0x34, 0x5d, 0x8b, 0xc6, 0x52, 0x44, 0x95, 0x86, 0x28, 0x7d, 0xdb, 0xbd,
	0x6d, 0xba, 0x16, 0xba, 0x02, 0x51, 0x23, 0x5d, 0x1f, 0x07, 0xd8, 0x3f, 0xc2, 0x56, 0x73, 0x59,
	0xaa, 0x10, 0x35, 0xd7, 0xe1, 0xa5, 0x89, 0x75, 0xd5, 0x1c, 0xbf, 0xae, 0x84, 0x66, 0x3f, 0x93,
	0xd2, 0xec, 0xdc, 0xd1, 0x45, 0x49, 0x47, 0xf7, 0x2e, 0x9c, 0xdb, 0xf5, 0x5c, 0x17, 0xf7, 0xc2,
	0xc4, 0x7e, 0x16, 0xe4, 0xac, 0x89, 0x42, 0xce, 0x9a, 0x30, 0xee, 0x8b, 0xd3, 0xd4, 0xbb, 0x7b,
	0x22, 0x7c, 0x3f, 0xfe, 0xc2, 0xc5, 0x06, 0xd4, 0x86, 0xa6, 0x8f, 0xa9, 0x7d, 0x44, 0x17, 0x88,
	0x68, 0x7e, 0x9a, 0x81, 0xdb, 0x96, 0x61, 0x27, 0x4f, 0xfe, 0xd2, 0xed, 0x27, 0x4e, 0x23, 0x0a,
	0x19, 0xa7, 0x11, 0x63, 0x8f, 0xe1, 0x30, 0xac, 0x67, 0x1f, 0x32, 0x46, 0x47, 0xef, 0xdc, 0x3f,
	0x65, 0xfd, 0x54, 0xa2, 0x3b, 0x3c, 0x0c, 0x38, 0x89, 0x9f, 0xf0, 0x10, 0x0c, 0xa5, 0x1b, 0xf5,
	0xcc, 0x23, 0x3f, 0xe2, 0x30, 0x9e, 0x60, 0xd9, 0xea, 0xc4, 0xb8, 0x00, 0x1b, 0xb7, 0x70, 0xa8,
	0xeb, 0xd5, 0xc6, 0xc2, 0x32, 0x34, 0xfe, 0xa5, 0x00, 0xcb, 0xb7, 0x70, 0x28, 0xdb, 0xbd, 0x4f,
	0xe8, 0xa0, 0x14, 0x27, 0x70, 0x50, 0x4a, 0x63, 0x1c, 0x14, 0xc5, 0x16, 0x2e, 0xeb, 0x6c, 0xe1,
	0x8b, 0x91, 0x02, 0xaa, 0xe8, 0x1d, 0x12, 0xe1, 0x35, 0xfc, 0x6a, 0x01, 0xce, 0xa9, 0x13, 0xbb,
	0x6d, 0x07, 0xa1, 0x44, 0xf1, 0x49, 0xa6, 0xb7, 0x0c, 0x25, 0xd3, 0x71, 0x28, 0xe5, 0x45, 0x34,
	0x80, 0x00, 0x38, 0xb7, 0x4a, 0x09, 0x6e, 0x8d, 0x1b, 0xbc, 0xf1, 0x32, 0xa5, 0xf5, 0x75, 0xd3,
	0x21, 0x26, 0xba, 0x72, 0xc5, 0xe3, 0x1c, 0x54, 0xcd, 0x01, 0xbd, 0x3f, 0x24, 0x8b, 0x19, 0x87,
	0x19, 0x7d, 0x38, 0x7b, 0x0b, 0x87, 0x77, 0x12, 0xf7, 0x5a, 0x9e, 0x3d, 0xa3, 0x8c, 0x57, 0x68,
	0x47, 0x77, 0x47, 0xfb, 0x8e, 0xdd, 0x93, 0x28, 0x37, 0xd6, 0x06, 0x32, 0x1e, 0xc1, 0x0b, 0x4c,
	0xc8, 0x65, 0x41, 0x8a, 0xae, 0xc3, 0x84, 0x66, 0x88, 0xb3, 0x5d, 0x91, 0x57, 0xa1, 0x11, 0x5f,
	0xb3, 0x21, 0xa8, 0x94, 0xb0, 0x94, 0xb5, 0x1c, 0x4c, 0x79, 0x8b, 0xc5, 0xad, 0xa5, 0x40, 0x6e,
	0xd6, 0x78, 0x20, 0x14, 0x06, 0xf5, 0x78, 0xee, 0xb2, 0xeb, 0x89, 0xaa, 0x5f, 0x3b, 0xd6, 0xc1,
	0x8a, 0x85, 0xaa, 0x98, 0x2f, 0x54, 0x5f, 0x86, 0x73, 0x7b, 0xa3, 0xc1, 0xc0, 0xf4, 0xed, 0xaf,
	0x62, 0xdd, 0x92, 0x21, 0x9b, 0x2e, 0xbd, 0x69, 0xe5, 0x7b, 0x03, 0x85, 0x4a, 0xd3, 0x94, 0x36,
	0xbe, 0x37, 0x40, 0xab, 0x30, 0x45, 0x51, 0x42, 0x4f, 0xf5, 0xbc, 0x08, 0xf0, 0x9e, 0x67, 0xfc,
	0x2c, 0xac, 0x66, 0xf4, 0xc0, 0x25, 0xe5, 0x63, 0x50, 0x0d, 0xc9, 0xce, 0x24, 0x1c, 0x0b, 0xc4,
	0xc3, 0x18, 0xb4, 0xd2, 0xf1, 0x3d, 0x52, 0xd4, 0xe1, 0x18, 0xc6, 0xf7, 0x0a, 0x30, 0x23, 0x17,
	0xa0, 0x16, 0x54, 0x1c, 0x73, 0x1f, 0x3b, 0xca, 0xd8, 0x18, 0x48, 0x1b, 0x77, 0xb9, 0x4a, 0xfc,
	0x7f, 0x67, 0x34, 0x70, 0x45, 0x9c, 0x6a, 0x41, 0xe9, 0x6d, 0xd7, 0x73, 0x3a, 0xde, 0x43, 0x41,
	0x4d, 0x8e, 0x89, 0x2e, 0x43, 0xd9, 0xf7, 0x1e, 0x8a, 0x88, 0x45, 0x4e, 0x0d, 0x8a, 0x86, 0x3e,
	0x0e, 0x65, 0xcb, 0x0c, 0xcd, 0x66, 0x45, 0x89, 0xca, 0x30, 0xf4, 0x76, 0x88, 0x07, 0x02, 0x99,
	0x20, 0x19, 0xbf, 0x0c, 0xb3, 0x4a, 0x4b, 0xb9, 0x33, 0x6a, 0x42, 0x39, 0x18, 0xe2, 0x9e, 0x6a,
	0x98, 0x13, 0x48, 0x8e, 0x6f, 0x74, 0x0e, 0xaa, 0xb6, 0x6b, 0x61, 0x37, 0x64, 0x61, 0x71, 0xc1,
	0x1d, 0x06, 0x33, 0xde, 0x83, 0xba, 0x34, 0xb2, 0x9c, 0x0e, 0x5a, 0x50, 0x39, 0x32, 0x9d, 0x11,
	0x13, 0x65, 0xd1, 0x0a, 0x03, 0x45, 0x9d, 0x97, 0x93, 0x9d, 0x1b, 0x7f, 0x53, 0x80, 0xe5, 0xf6,
	0x60, 0xe8, 0xf9, 0x61, 0x2a, 0x7e, 0xf5, 0x09, 0x4e, 0x25, 0xb6, 0xc2, 0xcf, 0x6d, 0xca, 0x37,
	0x8f, 0xf7, 0xe2, 0xef, 0x1b, 0x66, 0x68, 0x32, 0x52, 0xa1, 0x4d, 0x98, 0xb5, 0x69, 0x5b, 0xdd,
	0xac, 0x48, 0xe3, 0x0c, 0x2b, 0xa7, 0x3f, 0x02, 0xf4, 0x31, 0xa8, 0xf7, 0xb0, 0xe3, 0x08, 0xec,
	0x72, 0x12, 0x1b, 0x48, 0x29, 0xc7, 0xa5, 0xf7, 0x12, 0x69, 0xdb, 0x36, 0x8b, 0x3a, 0x95, 0xe2,
	0x7b, 0x89, 0x04, 0xdc, 0xb6, 0x8c, 0x4f, 0xc1, 0xca, 0xae, 0xe9, 0xf4, 0x74, 0xca, 0x6e, 0x0d,
	0xa6, 0xf6, 0x19, 0x58, 0xdd, 0x54, 0x39, 0xd0, 0xf8, 0x7a, 0x11, 0x16, 0xf9, 0x8a, 0xba, 0xf9,
	0x88, 0x34, 0x27, 0xed, 0xfc, 0x98, 0x02, 0xba, 0x34, 0xea, 0x20, 0xb3, 0x1c, 0x58, 0xc1, 0xbd,
	0xe3, 0x21, 0x9e, 0x70, 0x53, 0x52, 0xd6, 0x6a, 0x69, 0xdc, 0x5a, 0x2d, 0xa7, 0xd7, 0x2a, 0x32,
	0x88, 0x89, 0xed, 0xd8, 0x03, 0x3b, 0xc4, 0xbe, 0x62, 0xad, 0xc7, 0x60, 0xf4, 0x33, 0xb0, 0x84,
	0x1f, 0xf5, 0xb0, 0xd3, 0xa5, 0x37, 0x19, 0x43, 0x7b, 0xdf, 0xc1, 0xdd, 0x01, 0xd1, 0xa1, 0x55,
	0x69, 0x4f, 0x59, 0xa0, 0x28, 0xbb, 0x11, 0xc6, 0x1d, 0xa2, 0x52, 0xbf, 0x55, 0x80, 0xa5, 0x04,
	0x15, 0x38, 0xfd, 0x62, 0x5b, 0xa1, 0x26, 0xed, 0x3e, 0xeb, 0x30, 0x7d, 0x60, 0x3b, 0x38, 0xe5,
	0x7c, 0x44, 0xd0, 0x24, 0xf9, 0x4a, 0x19, 0xe4, 0x3b, 0x61, 0x78, 0x6e, 0x01, 0xe6, 0x6f, 0x61,
	0x3e, 0xc4, 0xc8, 0xac, 0x68, 0xd3, 0x63, 0xc0, 0x08, 0xc8, 0x07, 0x7e, 0x15, 0x66, 0xf8, 0x00,
	0xec, 0x10, 0x0f, 0x12, 0xf7, 0xd8, 0x18, 0x32, 0xbd, 0x25, 0xc9, 0x87, 0x49, 0xbe, 0x03, 0xe3,
	0xb7, 0xca, 0x00, 0x71, 0xd9, 0x87, 0x3d, 0xf9, 0x8b, 0x30, 0x63, 0x79, 0x0f, 0x5d, 0xc7, 0x33,
	0x2d, 0x7a, 0xe9, 0xb6, 0xac, 0x38, 0x61, 0xbc, 0xe4, 0x1d, 0x9f, 0x9e, 0x17, 0xf0, 0x2b, 0xbf,
	0xc9, 0x35, 0x50, 0xe3, 0xf0, 0xb6, 0x45, 0x04, 0x68, 0x14, 0xb0, 0x8d, 0xa7, 0x2a, 0x61, 0x54,
	0x09, 0x30, 0x75, 0x44, 0x3b, 0x75, 0xc2, 0x23, 0x5a, 0x76, 0x2c, 0x41, 0xab, 0x4e, 0x8f, 0xaf,
	0xca, 0xb1, 0x77, 0xe8, 0x55, 0x36, 0x9f, 0xb1, 0xa9, 0xfb, 0x95, 0x11, 0xf6, 0x8f, 0xd9, 0xf9,
	0x9a, 0x08, 0x27, 0xf2, 0xa2, 0x9f, 0x23, 0x25, 0x64, 0x8d, 0x0c, 0xec, 0x01, 0x66, 0x24, 0x03,
	0x99, 0xae, 0x04, 0x9c, 0x90, 0x96, 0xfa, 0x04, 0xd2, 0x42, 0xb4, 0x12, 0x67, 0x03, 0xd7, 0x33,
	0x33, 0x29, 0xad, 0xc4, 0xca, 0xb9, 0xa6, 0x39, 0x0f, 0x15, 0x8a, 0x48, 0x8f, 0xf8, 0x15, 0x3c,
	0x06, 0x37, 0xce, 0xc0, 0x4a, 0x2c, 0x69, 0xca, 0xbe, 0x6f, 0xfc, 0x7d, 0x01, 0xe6, 0x58, 0x01,
	0x83, 0xe7, 0xc8, 0x0f, 0xf3, 0xde, 0xfb, 0x3e, 0x0e, 0x82, 0xee, 0xc0, 0x7c, 0x44, 0x65, 0xa8,
	0x22, 0x79, 0xef, 0xb4, 0xe4, 0x8e, 0xf9, 0x08, 0x7d, 0x1c, 0x1a, 0x11, 0x62, 0x5a, 0xc3, 0xcf,
	0x8a, 0xb2, 0xfb, 0x54, 0xd3, 0xcb, 0xc8, 0x6c, 0x16, 0x65, 0x1d, 0x32, 0x9d, 0x4f, 0x3c, 0xd3,
	0x4a, 0xc6, 0x4c, 0x5f, 0x83, 0x95, 0x9d, 0x51, 0x78, 0xe8, 0x11, 0xd3, 0xe0, 0xae, 0xe9, 0x87,
	0x6e, 0x1c, 0x42, 0xbe, 0x00, 0x30, 0x64, 0x90, 0x74, 0x84, 0x82, 0xc1, 0xdb, 0x96, 0xf1, 0x06,
	0x2c, 0x10, 0xe3, 0x8e, 0xfd, 0x96, 0x17, 0xe5, 0x34, 0xc7, 0x11, 0x0b, 0x72, 0x85, 0xd9, 0xe7,
	0xcc, 0x0c, 0xe4, 0x06, 0x3a, 0x3d, 0xd9, 0x8e, 0x10, 0x8d, 0x87, 0x70, 0x26, 0x1a, 0x8b, 0x15,
	0x0d, 0x86, 0xb7, 0x78, 0x05, 0xa6, 0x38, 0x22, 0xdf, 0xae, 0x32, 0x1b, 0x14, 0x78, 0xcc, 0xbd,
	0xb7, 0x6c, 0x1f, 0xf7, 0x42, 0xba, 0xec, 0x94, 0xe8, 0x89, 0x28, 0x79, 0xc7, 0x77, 0x8c, 0x2f,
	0xc1, 0xea, 0x2d, 0x1c, 0xa6, 0xfa, 0x8e, 0xa7, 0xf3, 0x99, 0xd4, 0x74, 0xce, 0x73, 0x5f, 0x3a,
	0x6b, 0xbc, 0xd2, 0xb4, 0x76, 0xa0, 0x16, 0xb9, 0xdc, 0x39, 0x7e, 0x6c, 0xb4, 0xbb, 0xcb, 0xc3,
	0x64, 0x20, 0xe3, 0xf7, 0x0b, 0xd0, 0x52, 0xce, 0x08, 0xdb, 0x03, 0xb3, 0x1f, 0xf9, 0x5b, 0xd9,
	0x27, 0xcb, 0x1f, 0xf9, 0x59, 0xe6, 0x0d, 0x40, 0xb2, 0x3b, 0xc8, 0xc9, 0xb7, 0x09, 0xc2, 0x87,
	0xb6, 0x23, 0x13, 0xb3, 0xc1, 0x2f, 0x1a, 0x0b, 0x97, 0x55, 0xc2, 0x30, 0xfe, 0xb0, 0x00, 0xd3,
	0xa2, 0xe0, 0xc4, 0xd7, 0x8a, 0xb5, 0x61, 0x87, 0x52, 0x5e, 0x28, 0x4e, 0x71, 0x88, 0xab, 0x5a,
	0x87, 0x78, 0x15, 0xa6, 0xc8, 0x70, 0x09, 0xc2, 0x94, 0xac, 0x73, 0x09, 0xb0, 0x6d, 0x19, 0xaf,
	0x40, 0xe9, 0x9e, 0xd9, 0xcf, 0x18, 0x6a, 0x64, 0x4d, 0x16, 0x53, 0xd6, 0xa4, 0xf1, 0xd7, 0x55,
	0x58, 0xbe, 0xf9, 0x28, 0xc4, 0xbe, 0x6b, 0x3a, 0x5c, 0x86, 0x77, 0x0e, 0xcd, 0x81, 0x77, 0x84,
	0xb3, 0x1b, 0x63, 0x59, 0x23, 0xc5, 0x74, 0xd6, 0x48, 0x76, 0x10, 0xf0, 0x0a, 0xcc, 0x63, 0xde,
	0x4b, 0xf7, 0x08, 0xfb, 0xf6, 0x81, 0x8d, 0x99, 0x37, 0x29, 0x58, 0x38, 0x27, 0x8a, 0xef, 0xf3,
	0x52, 0xf4, 0x06, 0x2c, 0x44, 0x55, 0x4e, 0x74, 0xe0, 0x11, 0xf5, 0xb4, 0x2b, 0xef, 0x2b, 0x4f,
	0xb1, 0x25, 0x49, 0x27, 0x35, 0xd3, 0x27, 0x39, 0xa9, 0x69, 0xc3, 0x82, 0x63, 0x06, 0x61, 0x37,
	0xc0, 0xae, 0xc5, 0x66, 0x7d, 0x4c, 0xda, 0xa8, 0x8d, 0x6d, 0x63, 0x8e, 0x54, 0xdb, 0xc3, 0xae,
	0x45, 0x89, 0x71, 0xbc, 0x13, 0xa2, 0x6d, 0x40, 0x11, 0x31, 0x42, 0xbb, 0xf7, 0x00, 0x87, 0xe2,
	0xca, 0x6a, 0x2d, 0x49, 0xc0, 0x7b, 0xb4, 0xb8, 0x6d, 0xa1, 0x2d, 0x98, 0xb7, 0xad, 0x6e, 0xcf,
	0xf4, 0x2d, 0x62, 0x0d, 0x12, 0xe1, 0x1a, 0xf4, 0x95, 0x4b, 0x6a, 0x0d, 0xdb, 0xda, 0x35, 0x7d,
	0xeb, 0x75, 0x52, 0xd8, 0x1e, 0xf4, 0xd1, 0x65, 0x98, 0x13, 0x15, 0xf6, 0xcd, 0xde, 0x03, 0x8a,
	0x2f, 0xdf, 0xcf, 0x9d, 0x65, 0xf8, 0xd7, 0xcd, 0xde, 0x03, 0x82, 0x4e, 0x76, 0x17, 0xcf, 0x0f,
	0x7d, 0xd3, 0x66, 0x4d, 0xcf, 0x2a, 0xb1, 0x61, 0x5e, 0x42, 0x10, 0x3f, 0x03, 0xf5, 0xd1, 0x90,
	0x58, 0x18, 0x8c, 0x86, 0x8d, 0xb1, 0xf3, 0x07, 0x81, 0xbe, 0x43, 0xad, 0xe3, 0x03, 0xd3, 0x1d,
	0x8a, 0x74, 0xa1, 0xd3, 0xb2, 0x85, 0xc3, 0x0b, 0x88, 0xe1, 0x92, 0x48, 0x3d, 0x9a, 0xcb, 0x4c,
	0x3d, 0x8a, 0x73, 0x74, 0x06, 0x7d, 0x76, 0x89, 0xad, 0x16, 0x27, 0xe4, 0x0c, 0xfa, 0x01, 0xda,
	0x86, 0xa5, 0xfd, 0x51, 0x60, 0xbb, 0x64, 0x7b, 0x73, 0xec, 0x1e, 0x76, 0x03, 0xcc, 0x70, 0x11,
	0xc5, 0x5d, 0x10, 0x85, 0x6f, 0xb2, 0x32, 0x52, 0xc7, 0xf8, 0xcf, 0x22, 0x5c, 0x62, 0xea, 0xf1,
	0xe7, 0xd5, 0x45, 0xc4, 0xa4, 0xb9, 0x67, 0x8e, 0x4f, 0x53, 0xd0, 0x72, 0xab, 0x78, 0x42, 0x6e,
	0x95, 0x26, 0xe7, 0x56, 0x39, 0x8b, 0x5b, 0x09, 0x82, 0x57, 0x26, 0x23, 0x78, 0x75, 0x42, 0x82,
	0x4f, 0x9d, 0x80, 0xe0, 0xd3, 0xd9, 0x04, 0xff, 0xe7, 0x52, 0x4a, 0x6d, 0xdd, 0x36, 0x7d, 0xf3,
	0xc8, 0xcc, 0x4a, 0x14, 0x92, 0xf4, 0x67, 0x31, 0xad, 0x3f, 0x89, 0xd3, 0x13, 0x8c, 0xf6, 0x2d,
	0x6f, 0x60, 0xda, 0xea, 0x19, 0x7f, 0x0c, 0x46, 0xbb, 0x70, 0x36, 0x56, 0x48, 0xa6, 0xef, 0xdb,
	0xd8, 0x8f, 0x12, 0xa8, 0x6c, 0x8b, 0xaa, 0x06, 0x61, 0x04, 0x35, 0x23, 0x15, 0xc4, 0xf0, 0x78,
	0x5e, 0x54, 0xdb, 0x42, 0x0e, 0x3c, 0x1f, 0x37, 0xc2, 0x82, 0xd7, 0xd8, 0x4a, 0x35, 0x37, 0x91,
	0x96, 0xd8, 0x88, 0x3a, 0x11, 0xed, 0xa8, 0xbd, 0x31, 0xe5, 0x85, 0x1f, 0x0d, 0x6d, 0x1f, 0x07,
	0x13, 0x1e, 0x33, 0x73, 0xec, 0xa7, 0x3a, 0x66, 0x7e, 0x9a, 0x7c, 0xa6, 0x6f, 0x14, 0x60, 0x55,
	0xcf, 0xd7, 0x38, 0x2c, 0x28, 0x71, 0xaa, 0xa0, 0xe7, 0x54, 0xf6, 0x45, 0x65, 0xd5, 0x22, 0xb3,
	0xd5, 0x9c, 0x9f, 0xd8, 0x22, 0xb3, 0x8d, 0x7f, 0x28, 0xc1, 0xf4, 0xee, 0x28, 0x08, 0xbd, 0x01,
	0xf6, 0x9f, 0x4c, 0xa4, 0x36, 0xa0, 0x76, 0x30, 0x72, 0x9c, 0x6e, 0x6a, 0x47, 0x9c, 0x26, 0x60,
	0x71, 0x68, 0x46, 0xc7, 0x39, 0xab, 0x3d, 0x7d, 0xd5, 0x1f, 0x9f, 0x46, 0xfb, 0x6f, 0x25, 0xbd,
	0xff, 0x46, 0x59, 0x93, 0xd5, 0x74, 0xd6, 0xe4, 0x39, 0xa8, 0xf6, 0xb1, 0x6b, 0x61, 0x5f, 0x39,
	0x36, 0xe3, 0xb0, 0xe8, 0xca, 0xc3, 0x74, 0xea, 0xca, 0xc3, 0x3a, 0x4c, 0xef, 0xdb, 0x7e, 0x78,
	0x68, 0x99, 0xc7, 0xca, 0x66, 0x10, 0x41, 0x13, 0x92, 0x52, 0x7b, 0x72, 0x49, 0x81, 0x93, 0x6c,
	0xae, 0x59, 0x1e, 0x9a, 0xfe, 0xcc, 0xce, 0xf8, 0x5a, 0x11, 0x96, 0x78, 0xa2, 0x1c, 0xe7, 0xaa,
	0x14, 0xdd, 0x8c, 0xf9, 0x54, 0xc8, 0xe5, 0x53, 0x25, 0xc5, 0xa7, 0x98, 0xaa, 0x33, 0x1a, 0xaa,
	0xca, 0xb4, 0x9b, 0xd5, 0xd2, 0x4e, 0xd0, 0xbd, 0xa1, 0xbd, 0x6a, 0x42, 0x24, 0xa0, 0x98, 0x2d,
	0x01, 0xa5, 0x1c, 0x09, 0x28, 0xa7, 0x24, 0xc0, 0xf8, 0xb7, 0x82, 0xb8, 0xda, 0x98, 0x24, 0x01,
	0x93, 0xef, 0x4a, 0xda, 0x7c, 0xef, 0x89, 0x98, 0x8e, 0xb8, 0x04, 0x7a, 0x36, 0x45, 0x2c, 0x89,
	0x4c, 0xcb, 0x2a, 0x31, 0x22, 0x32, 0xb4, 0x92, 0x64, 0x90, 0x08, 0x80, 0x64, 0x02, 0xf0, 0xa9,
	0x23, 0x79, 0xea, 0x7c, 0xd2, 0x8b, 0xca, 0xa4, 0xc5, 0x74, 0x17, 0x95, 0xe9, 0x8a, 0x89, 0x76,
	0xa9, 0x4b, 0x28, 0x26, 0xf9, 0x21, 0x1c, 0x28, 0xf4, 0x61, 0x5e, 0x6a, 0x9d, 0xfb, 0x18, 0x2f,
	0x41, 0xad, 0x27, 0x80, 0x09, 0x17, 0x43, 0x90, 0x3b, 0x46, 0x90, 0x2e, 0x5b, 0x17, 0xb3, 0x2f,
	0x5b, 0x1b, 0x5f, 0x82, 0x33, 0x7b, 0xd2, 0x4c, 0xc6, 0x5d, 0x6c, 0xbb, 0x3c, 0x26, 0xe2, 0x9f,
	0x58, 0x13, 0xdf, 0x2c, 0xc0, 0x8a, 0x68, 0xfb, 0x06, 0x3d, 0x6c, 0x96, 0x03, 0xf2, 0xd3, 0x62,
	0xb0, 0x9c, 0x5c, 0xc9, 0xc9, 0x44, 0xe5, 0x68, 0x07, 0x66, 0x03, 0x16, 0x3f, 0xe6, 0x11, 0x30,
	0x46, 0xba, 0x73, 0xac, 0x42, 0xdb, 0xb5, 0xf0, 0x10, 0xd3, 0x48, 0xb3, 0x14, 0x65, 0xee, 0xcc,
	0x04, 0xf1, 0x8f, 0xc0, 0xf8, 0xed, 0x02, 0x2c, 0xeb, 0x11, 0xf3, 0x1d, 0xd6, 0x2c, 0xbf, 0x26,
	0x0a, 0x62, 0x97, 0xb2, 0x83, 0xd8, 0xe5, 0xec, 0x20, 0x76, 0x25, 0x15, 0xc4, 0xbe, 0x41, 0xcf,
	0x90, 0xc4, 0xe4, 0x79, 0x2e, 0x7d, 0xec, 0x00, 0x3f, 0x0f, 0x75, 0x41, 0x8e, 0xf4, 0xe9, 0x2d,
	0x2f, 0x68, 0x5b, 0xc6, 0xb7, 0xcb, 0x70, 0x3a, 0xd1, 0x46, 0xc6, 0xe6, 0xb2, 0x4e, 0x6f, 0x76,
	0x1e, 0xd9, 0x6e, 0x2f, 0x11, 0xfa, 0x13, 0x50, 0xf4, 0x22, 0xcc, 0x8a, 0xef, 0x6e, 0xbc, 0x4e,
	0x45, 0xc0, 0x4b, 0x14, 0xd1, 0xfc, 0x9b, 0x75, 0x98, 0xb6, 0xec, 0x20, 0xf4, 0xed, 0x5e, 0x98,
	0x88, 0x09, 0x73, 0x28, 0x69, 0x4c, 0x7c, 0xb3, 0xc6, 0xe4, 0x4d, 0x62, 0x46, 0x14, 0x89, 0x64,
	0x9e, 0x87, 0xa6, 0x6f, 0xa9, 0x5b, 0x13, 0x81, 0x10, 0x4d, 0x4a, 0xfe, 0xb2, 0x06, 0x94, 0xb4,
	0x3f, 0x02, 0x16, 0x23, 0xe1, 0xcf, 0x0f, 0x5c, 0x51, 0x93, 0x64, 0x05, 0x54, 0xc2, 0xd8, 0x56,
	0x42, 0x78, 0x11, 0x14, 0xad, 0xc1, 0x14, 0x35, 0x0c, 0xfc, 0x63, 0xc5, 0x9b, 0x11, 0x40, 0x55,
	0xa1, 0xcf, 0x68, 0x15, 0x3a, 0x6d, 0x82, 0x5a, 0xa0, 0x8a, 0x0f, 0x25, 0x80, 0xb1, 0x8a, 0x3d,
	0x9d, 0xa3, 0x62, 0xe7, 0xd2, 0x9b, 0x2c, 0xe1, 0x9a, 0x17, 0xd8, 0xf4, 0xa2, 0xcb, 0xbc, 0xc2,
	0x35, 0x0e, 0x45, 0x57, 0xa1, 0xde, 0xf3, 0x3c, 0xdf, 0xb2, 0x5d, 0x7a, 0x93, 0x7c, 0x51, 0x7d,
	0x23, 0x20, 0x2a, 0xe8, 0xc8, 0x58, 0xc6, 0x7f, 0x97, 0xe0, 0x9c, 0xba, 0x79, 0x89, 0xc7, 0x1c,
	0x4e, 0x24, 0x7e, 0x69, 0x91, 0x29, 0x66, 0x8a, 0x4c, 0x4a, 0x20, 0x4a, 0x99, 0x02, 0xa1, 0xb0,
	0xbd, 0xfc, 0x0c, 0xd8, 0x5e, 0x1d, 0xc7, 0xf6, 0xa9, 0xb1, 0x6c, 0x9f, 0x1e, 0xc7, 0xf6, 0x99,
	0x5c, 0xb6, 0xd7, 0x72, 0xd8, 0x0e, 0xf9, 0x6c, 0xaf, 0x4f, 0xc2, 0x76, 0x34, 0x11, 0xdb, 0x3f,
	0x28, 0xc1, 0x39, 0x75, 0xc3, 0x4e, 0xb0, 0x5d, 0xaf, 0x3a, 0x7e, 0xda, 0xb9, 0xfc, 0xe1, 0x71,
	0x71, 0x9c, 0xfc, 0x3c, 0x11, 0x97, 0xef, 0xc2, 0x19, 0xcd, 0xb6, 0x12, 0x85, 0xb1, 0x6b, 0xa6,
	0x00, 0x72, 0xa3, 0x62, 0x49, 0xdd, 0x87, 0x85, 0x48, 0xc4, 0x78, 0xc6, 0x7b, 0x22, 0x56, 0x2b,
	0x6e, 0xc9, 0x4c, 0x6c, 0x36, 0x94, 0x26, 0x31, 0x1b, 0x3e, 0x0b, 0x67, 0xb5, 0xcd, 0xa7, 0x2f,
	0x17, 0x15, 0x35, 0x97, 0x8b, 0x8c, 0x0f, 0x0a, 0xd0, 0xba, 0xe7, 0x9b, 0x96, 0xed, 0xf6, 0xf9,
	0xbd, 0x06, 0xe5, 0xde, 0x78, 0x66, 0xb4, 0x95, 0x5e, 0x0b, 0x54, 0xac, 0x61, 0x02, 0x41, 0x17,
	0x00, 0x7c, 0x1c, 0x8e, 0x7c, 0x97, 0x86, 0x21, 0x14, 0xd7, 0x9d, 0xc1, 0xdf, 0xf1, 0x1d, 0xe9,
	0x22, 0x4a, 0x39, 0x7d, 0x11, 0x05, 0x75, 0x60, 0x2e, 0xf9, 0x00, 0x14, 0xbf, 0x87, 0xb3, 0xb1,
	0x99, 0x7a, 0x19, 0x8a, 0x8f, 0xf9, 0x2e, 0xff, 0x1d, 0x85, 0x74, 0x55, 0xb0, 0xf1, 0x49, 0x38,
	0xab, 0x9d, 0x24, 0x27, 0xd2, 0x32, 0x94, 0xc8, 0x70, 0x65, 0x9b, 0x86, 0x00, 0x8c, 0x23, 0x58,
	0x53, 0xc2, 0xec, 0x51, 0xdc, 0x3e, 0x90, 0x0e, 0x45, 0xe2, 0xeb, 0xf8, 0xea, 0xa1, 0x48, 0x74,
	0x27, 0x3f, 0x71, 0xf9, 0xae, 0x38, 0xf6, 0xf2, 0xdd, 0xf6, 0xe7, 0xa1, 0x7e, 0xc7, 0x0e, 0x7a,
	0x3c, 0x72, 0x80, 0xae, 0x40, 0xfd, 0x3e, 0xf6, 0x03, 0xdb, 0x73, 0xe9, 0x93, 0x31, 0xec, 0xd4,
	0x66, 0x30, 0x0c, 0x8f, 0x5b, 0x2b, 0xe4, 0x53, 0x2a, 0x13, 0x33, 0xda, 0xfe, 0x7a, 0x15, 0x1a,
	0xdc, 0x63, 0x17, 0xad, 0xdc, 0x84, 0x19, 0xf9, 0xc5, 0x23, 0x74, 0x86, 0x8d, 0x40, 0xf3, 0xa2,
	0x56, 0xab, 0xa5, 0x2b, 0xe2, 0xb4, 0xfa, 0x1c, 0x40, 0xfc, 0x7c, 0x0c, 0x5a, 0x91, 0xb3, 0xae,
	0xe4, 0x26, 0x9a, 0xe9, 0x02, 0xde, 0xc0, 0x0b, 0x00, 0x37, 0xe8, 0x01, 0x01, 0x6d, 0x60, 0x96,
	0xcc, 0x20, 0xca, 0xba, 0x68, 0xc5, 0x73, 0x43, 0xb7, 0x61, 0x7e, 0x0f, 0x87, 0x37, 0xf0, 0x81,
	0x39, 0x72, 0x42, 0x61, 0x9e, 0xad, 0xf1, 0x87, 0x69, 0x92, 0x05, 0xa2, 0xfe, 0x02, 0xa9, 0xcf,
	0x3a, 0xb5, 0xa2, 0x1e, 0x3f, 0x05, 0x0d, 0xf5, 0x4a, 0x94, 0x4c, 0x42, 0x6e, 0x17, 0x67, 0xdc,
	0x99, 0xba, 0x25, 0xb6, 0xfa, 0x8c, 0xa8, 0x7c, 0xba, 0xa1, 0x0c, 0xc4, 0x1b, 0x70, 0x86, 0x1e,
	0x21, 0x3e, 0x5d, 0x2b, 0x37, 0xe1, 0x02, 0x9f, 0x29, 0x8b, 0x45, 0x8f, 0x6f, 0x4f, 0x4b, 0x10,
	0x4f, 0xc4, 0x47, 0xf5, 0xf5, 0xe5, 0x30, 0x29, 0xda, 0x94, 0x19, 0x39, 0x3e, 0x9e, 0xaa, 0xef,
	0x70, 0x04, 0x9b, 0x93, 0x76, 0xc8, 0x8e, 0xb2, 0x9e, 0x49, 0xb7, 0xdb, 0xdf, 0x4b, 0xc7, 0x25,
	0xc5, 0x6a, 0xd0, 0xf2, 0x43, 0x04, 0x2d, 0xc7, 0xf2, 0x43, 0x20, 0x9a, 0x19, 0xe2, 0x21, 0xca,
	0x2f, 0xe4, 0xd5, 0x16, 0x43, 0xcf, 0xef, 0xe2, 0x00, 0x36, 0xb4, 0xa4, 0xe3, 0xe5, 0xf7, 0xbc,
	0x07, 0xf8, 0x99, 0xf4, 0x73, 0x07, 0x3e, 0xce, 0x23, 0x97, 0x6a, 0xdc, 0x72, 0x3c, 0x89, 0xb4,
	0x1c, 0x7f, 0x07, 0xae, 0xb2, 0x55, 0x9e, 0x11, 0x0e, 0x9d, 0xb0, 0x59, 0xd6, 0x46, 0xcc, 0xd1,
	0xef, 0x94, 0x61, 0x3e, 0xbe, 0x42, 0x2b, 0x98, 0xb9, 0x0b, 0x73, 0xc9, 0x67, 0x97, 0xd0, 0x2a,
	0xdf, 0x98, 0xf5, 0xcf, 0x31, 0xb5, 0x52, 0x0f, 0x1b, 0xa1, 0x97, 0x61, 0x4e, 0x8c, 0x38, 0x82,
	0x25, 0xb4, 0x13, 0x1d, 0x12, 0x4b, 0xc8, 0xb3, 0xa4, 0x5b, 0x53, 0xb3, 0xc4, 0x17, 0xcd, 0xac,
	0xa4, 0xeb, 0xa9, 0xa1, 0xd4, 0x08, 0xe4, 0x69, 0x9f, 0x49, 0xa2, 0xc7, 0x7b, 0xf9, 0xe7, 0x59,
	0x24, 0x25, 0x2e, 0xb9, 0x7e, 0xdc, 0xbe, 0x11, 0xa0, 0x06, 0xeb, 0x2f, 0xd2, 0x81, 0x39, 0x2d,
	0xec, 0xc2, 0x5c, 0xf2, 0xb9, 0x26, 0x41, 0xa8, 0x8c, 0x67, 0x9c, 0x34, 0xc3, 0xb7, 0xa1, 0x99,
	0x75, 0xa7, 0x19, 0x3d, 0x2f, 0x37, 0x96, 0xf9, 0xd2, 0x51, 0xeb, 0x85, 0x71, 0x68, 0x7c, 0xbc,
	0xf7, 0xa1, 0x99, 0xf5, 0x68, 0x92, 0xe8, 0x6a, 0xcc, 0xa3, 0x4a, 0x7a, 0xc5, 0xf0, 0x77, 0xd5,
	0xd8, 0xf3, 0x17, 0x42, 0xf4, 0x59, 0x68, 0xa8, 0x5e, 0x1d, 0x3a, 0xab, 0x88, 0x90, 0x1a, 0xa5,
	0x6b, 0x25, 0x02, 0x30, 0xa4, 0xba, 0xea, 0x1d, 0x88, 0xea, 0xda, 0x20, 0x5f, 0xaa, 0xfa, 0x35,
	0x68, 0x70, 0xe9, 0x13, 0x10, 0x9d, 0xec, 0x25, 0x96, 0x03, 0x7a, 0x09, 0xea, 0x52, 0x1c, 0x24,
	0x59, 0x25, 0xd9, 0xc7, 0x75, 0x7a, 0x61, 0x2a, 0x11, 0x63, 0x4a, 0x56, 0x5a, 0x55, 0x2b, 0x25,
	0x23, 0x51, 0xd7, 0x61, 0x46, 0x8e, 0xe6, 0x09, 0x2b, 0x42, 0x13, 0xe1, 0x6b, 0xad, 0xa8, 0x2d,
	0xc9, 0x09, 0x6c, 0xf3, 0x32, 0xbe, 0x5e, 0x8a, 0x33, 0x6b, 0xbf, 0x0d, 0x2b, 0xd7, 0xcd, 0xb0,
	0x77, 0x98, 0x0e, 0xc5, 0x21, 0x7e, 0x0b, 0x23, 0x33, 0x48, 0xa7, 0x57, 0x55, 0xef, 0xc2, 0xa2,
	0x2e, 0x98, 0x84, 0x36, 0x52, 0x53, 0x4b, 0x06, 0x9a, 0x5a, 0xe7, 0xb5, 0xd6, 0xbf, 0xe4, 0x31,
	0x74, 0x92, 0x71, 0x6e, 0x61, 0xc8, 0x18, 0x3a, 0xd9, 0x4a, 0x18, 0x33, 0x7a, 0xdf, 0x82, 0xb4,
	0xa9, 0xf5, 0x43, 0x45, 0x9b, 0x79, 0x4e, 0x6a, 0x56, 0x9b, 0x9f, 0x81, 0x25, 0x55, 0xfc, 0x44,
	0xc1, 0x04, 0x52, 0xb8, 0xfd, 0x5f, 0x35, 0x68, 0x08, 0xef, 0x83, 0x2f, 0xa6, 0x4d, 0x80, 0x38,
	0x2f, 0x20, 0xd9, 0x48, 0x3a, 0x2b, 0x1a, 0xed, 0x52, 0x41, 0x16, 0xab, 0x18, 0x35, 0x23, 0xd2,
	0x27, 0x12, 0x9f, 0x85, 0x69, 0xaa, 0x7d, 0x32, 0xe3, 0x35, 0x9a, 0x01, 0x2d, 0xc0, 0x7a, 0xb1,
	0xca, 0xaf, 0x3f, 0xab, 0x64, 0x46, 0xa2, 0x96, 0xcc, 0x24, 0x35, 0x5d, 0x52, 0x37, 0x89, 0xd7,
	0x60, 0x56, 0xd1, 0x68, 0xa8, 0xa5, 0x51, 0x73, 0x39, 0xf5, 0xbf, 0x98, 0x78, 0x29, 0x42, 0x88,
	0xf5, 0xba, 0xa6, 0x19, 0x55, 0xae, 0x37, 0x72, 0x30, 0xf8, 0xe4, 0xde, 0x10, 0xcf, 0x3e, 0xca,
	0x2f, 0x1f, 0x88, 0x15, 0x93, 0xf9, 0x26, 0x82, 0x7e, 0xc5, 0xbc, 0x01, 0x0b, 0x4a, 0x0d, 0x6e,
	0xb3, 0xad, 0x6b, 0x9e, 0x60, 0x50, 0x6e, 0x26, 0xe9, 0x26, 0x7d, 0x1d, 0x1a, 0xaa, 0x0a, 0x17,
	0x7a, 0x53, 0x9b, 0xf8, 0xae, 0xdf, 0x82, 0x99, 0xb4, 0x89, 0xf7, 0xbc, 0xb2, 0xa5, 0x4d, 0x60,
	0x30, 0x41, 0x11, 0x4d, 0x8f, 0x15, 0x94, 0xd4, 0xc3, 0x05, 0x91, 0xa0, 0x88, 0x06, 0x15, 0x41,
	0x51, 0x73, 0x01, 0xf5, 0xfd, 0xcf, 0x2a, 0x44, 0x42, 0x39, 0x8f, 0x57, 0xe8, 0xea, 0x47, 0xf4,
	0x57, 0x88, 0x7c, 0x32, 0xfa, 0x8b, 0xb6, 0xbe, 0x98, 0x78, 0x11, 0xe6, 0x99, 0x0a, 0x5d, 0x47,
	0x3c, 0x0f, 0x99, 0x72, 0xa0, 0xd1, 0x73, 0x9a, 0xc1, 0xa6, 0xfc, 0x6b, 0xdd, 0x80, 0x23, 0x81,
	0x11, 0x03, 0x7e, 0x02, 0x81, 0xb9, 0x0e, 0x75, 0xe9, 0x01, 0x07, 0xa1, 0x6e, 0xd2, 0x4f, 0x47,
	0x08, 0x5b, 0x4a, 0xf3, 0xda, 0xc3, 0xf6, 0x3f, 0x56, 0x60, 0x51, 0x49, 0x7c, 0x12, 0xba, 0xef,
	0x4d, 0x58, 0xd0, 0xe4, 0x75, 0x0b, 0x82, 0x66, 0xa7, 0x7c, 0xb7, 0x74, 0xf9, 0xdb, 0xe8, 0xf3,
	0xb0, 0x74, 0x0b, 0x87, 0xd2, 0x8a, 0xe1, 0x89, 0xdc, 0x1a, 0x27, 0x25, 0x23, 0x5f, 0xfc, 0x76,
	0x52, 0x5a, 0x39, 0xe9, 0xf3, 0x73, 0x58, 0x75, 0x6b, 0xf5, 0x4d, 0x38, 0xab, 0x19, 0x7e, 0x74,
	0x35, 0x4f, 0x31, 0xb9, 0x53, 0x39, 0x75, 0xad, 0xc4, 0x15, 0x3f, 0x62, 0xdc, 0x65, 0xa5, 0xe1,
	0xe9, 0xed, 0xc8, 0x74, 0x93, 0x19, 0xee, 0x7e, 0x33, 0x23, 0x27, 0xed, 0x38, 0xcb, 0x42, 0x12,
	0xc5, 0x5d, 0x68, 0x65, 0xa7, 0xb3, 0xa1, 0x8b, 0xd1, 0xae, 0x94, 0x9f, 0xf0, 0x26, 0x82, 0x1f,
	0x9a, 0xab, 0x8f, 0x5f, 0x48, 0x46, 0xeb, 0xd4, 0xe1, 0x5d, 0xd2, 0x2d, 0x29, 0x5d, 0x2e, 0x5f,
	0x6a, 0xe4, 0x3b, 0x70, 0x56, 0x51, 0xa3, 0xf9, 0xf3, 0xd6, 0x2d, 0x8a, 0xed, 0x3f, 0xad, 0xc0,
	0x0c, 0x8d, 0x8b, 0x09, 0x41, 0x7e, 0x19, 0xea, 0x8c, 0x97, 0x14, 0x8a, 0xce, 0x6c, 0xb2, 0xf7,
	0xdb, 0x25, 0x98, 0x68, 0x6f, 0x86, 0x17, 0x31, 0xc4, 0x8b, 0x30, 0x2d, 0x5e, 0x22, 0x49, 0x76,
	0xac, 0x22, 0x7e, 0x1a, 0x6a, 0xd1, 0x93, 0x25, 0x68, 0x39, 0xa2, 0xae, 0xf2, 0xae, 0x44, 0x6b,
	0x49, 0xae, 0x12, 0x24, 0x82, 0x3a, 0x0c, 0xc8, 0x34, 0x38, 0x7f, 0x68, 0x59, 0xd2, 0xe1, 0x19,
	0x55, 0x5f, 0x86, 0xba, 0x94, 0xce, 0x15, 0xcd, 0x4b, 0x82, 0xe9, 0x87, 0x1b, 0x6d, 0xa1, 0xf2,
	0xc3, 0x26, 0xea, 0x16, 0xaa, 0x79, 0xf2, 0x44, 0x2f, 0xa4, 0xbf, 0x00, 0x1b, 0xbb, 0xec, 0x55,
	0x13, 0x5a, 0x65, 0xc7, 0xb5, 0xd2, 0x8f, 0x83, 0xa0, 0x45, 0xd6, 0xb4, 0xfa, 0x32, 0x49, 0x6b,
	0x4d, 0x1e, 0xd4, 0x17, 0xec, 0xf0, 0x90, 0x5d, 0x63, 0x97, 0x0c, 0x64, 0x43, 0x6e, 0x3a, 0xd0,
	0xb7, 0xbd, 0xa4, 0xb4, 0x1d, 0x0d, 0x16, 0x45, 0x57, 0xc2, 0x03, 0x29, 0x08, 0x56, 0x97, 0x1e,
	0xfc, 0x40, 0x91, 0x74, 0x27, 0x5f, 0x19, 0x19, 0x3b, 0xb2, 0x68, 0xc5, 0xa7, 0xf3, 0xe8, 0xd4,
	0x15, 0x9f, 0x99, 0x67, 0xa7, 0x77, 0xe7, 0xfe, 0xa9, 0x02, 0x48, 0x9a, 0x9c, 0x90, 0xdf, 0xab,
	0x54, 0x44, 0xa4, 0x82, 0xa4, 0x34, 0x22, 0x3e, 0x5e, 0x19, 0xe5, 0x4d, 0x38, 0x9d, 0xc8, 0x55,
	0x45, 0x71, 0x88, 0x50, 0x93, 0x8f, 0xd7, 0x3a, 0x9b, 0x6e, 0x24, 0x9e, 0xf1, 0x9e, 0x78, 0xe3,
	0x43, 0xf7, 0xe8, 0x8b, 0x50, 0x28, 0x63, 0x9f, 0x85, 0x49, 0xc8, 0xe1, 0x2b, 0x30, 0xcf, 0x88,
	0x9f, 0x33, 0x35, 0xad, 0xd0, 0x7d, 0x95, 0x65, 0xeb, 0xd2, 0x2b, 0xf2, 0x22, 0x00, 0x93, 0x78,
	0x4f, 0x3c, 0x40, 0x2f, 0xf2, 0xbe, 0xa4, 0xf0, 0x58, 0x12, 0x47, 0x74, 0xf2, 0xb1, 0x49, 0x50,
	0x79, 0xdf, 0x21, 0x3d, 0xb2, 0xff, 0xa8, 0x7b, 0xdd, 0xa3, 0xbe, 0x5d, 0x2a, 0xd9, 0x54, 0xf2,
	0xed, 0xb2, 0x12, 0x51, 0x5b, 0x4d, 0xde, 0x4d, 0xba, 0xb2, 0x25, 0xd2, 0x41, 0x33, 0x13, 0x51,
	0xd1, 0x4b, 0xb2, 0x34, 0x8f, 0xcb, 0x57, 0xd5, 0x0b, 0xf5, 0xbf, 0x97, 0xa1, 0x41, 0xb0, 0x5d,
	0xef, 0xa1, 0x10, 0xe8, 0x1d, 0x6e, 0x0b, 0x50, 0x60, 0x0e, 0xf3, 0x85, 0x46, 0xd3, 0x60, 0xbe,
	0x4b, 0xd3, 0x83, 0xd3, 0x05, 0xc4, 0x20, 0x8b, 0xc8, 0xaa, 0x29, 0x8e, 0xcd, 0xe2, 0xac, 0xa6,
	0x03, 0xf4, 0x1e, 0x34, 0x99, 0x28, 0x6b, 0xfa, 0x7d, 0x41, 0xd9, 0x3c, 0xd2, 0x08, 0x13, 0x0c,
	0xfd, 0x26, 0x9c, 0xe1, 0x7a, 0xed, 0xa9, 0x28, 0xf0, 0x9e, 0x50, 0x42, 0x39, 0xa3, 0xcc, 0x42,
	0x98, 0xa0, 0xf9, 0x2f, 0x40, 0x93, 0x2d, 0xce, 0x3c, 0x22, 0x64, 0x20, 0x8c, 0xd9, 0x31, 0x50,
	0xcc, 0x9a, 0x68, 0xdd, 0xac, 0xa7, 0xb8, 0x96, 0x5c, 0x2e, 0x1b, 0x39, 0x18, 0x5c, 0xd4, 0x2c,
	0x68, 0xf0, 0xc4, 0x75, 0x21, 0x69, 0x1d, 0x2a, 0x69, 0xe9, 0xc4, 0x76, 0x11, 0x63, 0xc8, 0xcb,
	0x7a, 0x6f, 0x2d, 0xb1, 0x8d, 0x38, 0x82, 0xf2, 0x5e, 0xfe, 0xa4, 0x00, 0x2b, 0xc9, 0xfc, 0xf2,
	0x38, 0xf8, 0xb6, 0xa0, 0xc9, 0x3e, 0x4f, 0x72, 0x75, 0x85, 0x4f, 0x25, 0x85, 0xf7, 0x45, 0xba,
	0xcc, 0x53, 0xc9, 0xeb, 0xd2, 0x32, 0xcf, 0x4a, 0x6c, 0x6f, 0xad, 0x67, 0xb4, 0x19, 0x53, 0xe7,
	0x8f, 0x0a, 0xd0, 0xe0, 0x57, 0xa0, 0xc4, 0x70, 0xbf, 0x0c, 0x4b, 0xda, 0x0c, 0x6a, 0x41, 0x9e,
	0xbc, 0x04, 0xee, 0xd6, 0x85, 0x5c, 0x9c, 0x28, 0xc5, 0xe8, 0x74, 0x22, 0xb5, 0x55, 0x36, 0xf8,
	0x85, 0xa5, 0xad, 0x4f, 0x7e, 0xdd, 0xfe, 0xcd, 0x02, 0xcc, 0xf2, 0xa4, 0x34, 0x3e, 0xe0, 0xcf,
	0x51, 0x0f, 0x99, 0x67, 0xb0, 0x89, 0x53, 0xbb, 0x54, 0x4a, 0x65, 0xab, 0x99, 0x2e, 0x88, 0x9d,
	0x08, 0x25, 0x51, 0x14, 0x45, 0x67, 0x84, 0xe9, 0x1c, 0xda, 0xd6, 0x59, 0x6d, 0x19, 0x1f, 0xdc,
	0xe3, 0x22, 0x2c, 0xbc, 0xe5, 0x85, 0xd1, 0x09, 0x8e, 0x18, 0xe2, 0x2b, 0x30, 0xc3, 0x94, 0xc3,
	0x0d, 0x4c, 0x7f, 0x9f, 0xe1, 0x27, 0xf5, 0x12, 0x2c, 0xde, 0x0e, 0x69, 0x11, 0x47, 0x7c, 0x0d,
	0x66, 0x58, 0x44, 0x4a, 0xad, 0x28, 0xc3, 0x72, 0x83, 0xa8, 0xd7, 0xe8, 0x8e, 0x2f, 0x0f, 0x29,
	0x6d, 0x27, 0xd0, 0x16, 0x15, 0x94, 0xb7, 0x68, 0x0c, 0x41, 0x06, 0x05, 0x68, 0x95, 0xe1, 0x25,
	0xe1, 0x31, 0x59, 0x52, 0xcd, 0xc4, 0x04, 0x7e, 0x53, 0xf8, 0xf4, 0x6a, 0x93, 0xeb, 0xac, 0x8e,
	0xa6, 0x28, 0x77, 0xf3, 0xf8, 0x8f, 0x02, 0xcc, 0x45, 0xc9, 0x68, 0x82, 0xc2, 0xb7, 0xe8, 0xa2,
	0x4e, 0xe7, 0xb5, 0xc9, 0x92, 0x75, 0x21, 0x92, 0x80, 0x9c, 0xfc, 0xb7, 0x57, 0xe9, 0x72, 0x8b,
	0x1e, 0xb0, 0xd1, 0xb5, 0x13, 0xc7, 0x85, 0x53, 0xb5, 0x3b, 0xd2, 0xd0, 0x78, 0xa1, 0x70, 0x1d,
	0x33, 0x72, 0x0f, 0x5b, 0xe3, 0xd2, 0xeb, 0xb6, 0xbf, 0x55, 0x82, 0x06, 0x3f, 0xe1, 0x17, 0xb3,
	0xfd, 0x24, 0xcc, 0x73, 0xc8, 0x89, 0x22, 0x91, 0xb7, 0x00, 0xa5, 0xaa, 0x11, 0x6b, 0xb9, 0x37,
	0xd8, 0xdc, 0xa5, 0xff, 0x39, 0xd7, 0x9b, 0x76, 0x10, 0x4e, 0x12, 0x4d, 0xbc, 0x11, 0x35, 0x24,
	0x3b, 0x51, 0x42, 0xdd, 0xa4, 0x8b, 0xf4, 0xb6, 0xde, 0x26, 0x9c, 0x8e, 0x87, 0x33, 0x81, 0x4b,
	0xb5, 0x03, 0x73, 0x09, 0xfc, 0x13, 0x7b, 0x56, 0xef, 0xc2, 0x82, 0xe6, 0xb2, 0x84, 0x88, 0x5f,
	0x64, 0x5f, 0x16, 0x11, 0x01, 0xa1, 0x9c, 0x9b, 0x16, 0xd7, 0xfb, 0xbf, 0xb6, 0xb3, 0x8c, 0x16,
	0xa1, 0x81, 0xef, 0x79, 0xc3, 0xf5, 0x9d, 0xbb, 0xed, 0x4f, 0xaf, 0x13, 0xda, 0x6d, 0x17, 0x8f,
	0xae, 0x7c, 0xf7, 0xfd, 0xb5, 0xc2, 0xf7, 0xdf, 0x5f, 0x2b, 0xfc, 0xe0, 0xfd, 0xb5, 0x53, 0x3f,
	0x7c, 0x7f, 0xed, 0xd4, 0x37, 0x1f, 0xaf, 0x9d, 0xfa, 0x83, 0xc7, 0x6b, 0xa7, 0xfe, 0xec, 0xf1,
	0xda, 0xa9, 0xef, 0x3e, 0x5e, 0x3b, 0xf5, 0xfd, 0xc7, 0x6b, 0xa7, 0x7e, 0xf0, 0x78, 0xed, 0xd4,
	0xaf, 0x7c, 0xb0, 0x76, 0xea, 0x37, 0x3e, 0x58, 0x3b, 0xf5, 0xee, 0x39, 0xba, 0x30, 0x8e, 0xdc,
	0xad, 0x7d, 0xb3, 0xf7, 0x00, 0xbb, 0xd6, 0xd6, 0x70, 0x7f, 0x2b, 0xfa, 0x4f, 0xdd, 0xfe, 0x2f,
	0x00, 0x00, 0xff, 0xff, 0x68, 0x50, 0xa5, 0x40, 0xe0, 0x6d, 0x00, 0x00,
}
