// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package build

import (
	"context"
	"o.o/backend/cmd/etop-server/config"
	"o.o/backend/cogs/base/producer"
	"o.o/backend/cogs/config/_server"
	"o.o/backend/cogs/database/_all"
	"o.o/backend/cogs/payment/_all"
	"o.o/backend/cogs/server/admin"
	"o.o/backend/cogs/server/main/_max"
	"o.o/backend/cogs/server/shop"
	"o.o/backend/cogs/server/vtpay"
	"o.o/backend/cogs/shipment/_all"
	"o.o/backend/cogs/shipment/ghtk"
	"o.o/backend/cogs/shipment/vtpost"
	_all2 "o.o/backend/cogs/shipment/webhook/_all"
	"o.o/backend/cogs/shipnow/_all"
	"o.o/backend/cogs/sms/_all"
	"o.o/backend/cogs/storage/_all"
	"o.o/backend/cogs/telecom/_all"
	"o.o/backend/cogs/ticket/_all"
	"o.o/backend/cogs/uploader"
	aggregate26 "o.o/backend/com/etc/logging/payment/aggregate"
	"o.o/backend/com/etc/logging/shippingwebhook"
	aggregate3 "o.o/backend/com/etc/logging/smslog/aggregate"
	aggregate22 "o.o/backend/com/etelecom/aggregate"
	pm19 "o.o/backend/com/etelecom/pm"
	provider2 "o.o/backend/com/etelecom/provider"
	query24 "o.o/backend/com/etelecom/query"
	"o.o/backend/com/eventhandler/notifier"
	sqlstore2 "o.o/backend/com/eventhandler/notifier/sqlstore"
	manager2 "o.o/backend/com/external/payment/manager"
	aggregate24 "o.o/backend/com/external/payment/payment/aggregate"
	vtpay2 "o.o/backend/com/external/payment/vtpay"
	aggregate25 "o.o/backend/com/external/payment/vtpay/gateway/aggregate"
	"o.o/backend/com/external/payment/vtpay/gateway/server"
	aggregate2 "o.o/backend/com/main/accountshipnow/aggregate"
	query3 "o.o/backend/com/main/accountshipnow/query"
	"o.o/backend/com/main/address"
	aggregate5 "o.o/backend/com/main/authorization/aggregate"
	aggregate6 "o.o/backend/com/main/catalog/aggregate"
	pm4 "o.o/backend/com/main/catalog/pm"
	query6 "o.o/backend/com/main/catalog/query"
	"o.o/backend/com/main/connectioning/aggregate"
	"o.o/backend/com/main/connectioning/manager"
	pm16 "o.o/backend/com/main/connectioning/pm"
	query2 "o.o/backend/com/main/connectioning/query"
	aggregate20 "o.o/backend/com/main/contact/aggregate"
	query22 "o.o/backend/com/main/contact/query"
	"o.o/backend/com/main/credit"
	"o.o/backend/com/main/identity"
	"o.o/backend/com/main/identity/pm"
	aggregate7 "o.o/backend/com/main/inventory/aggregate"
	pm2 "o.o/backend/com/main/inventory/pm"
	query11 "o.o/backend/com/main/inventory/query"
	aggregate4 "o.o/backend/com/main/invitation/aggregate"
	pm3 "o.o/backend/com/main/invitation/pm"
	"o.o/backend/com/main/invitation/query"
	aggregate12 "o.o/backend/com/main/ledgering/aggregate"
	pm5 "o.o/backend/com/main/ledgering/pm"
	query20 "o.o/backend/com/main/ledgering/query"
	"o.o/backend/com/main/location"
	aggregate23 "o.o/backend/com/main/moneytx/aggregate"
	pm6 "o.o/backend/com/main/moneytx/pm"
	query18 "o.o/backend/com/main/moneytx/query"
	"o.o/backend/com/main/ordering"
	pm7 "o.o/backend/com/main/ordering/pm"
	aggregate13 "o.o/backend/com/main/purchaseorder/aggregate"
	pm8 "o.o/backend/com/main/purchaseorder/pm"
	query13 "o.o/backend/com/main/purchaseorder/query"
	aggregate17 "o.o/backend/com/main/purchaserefund/aggregate"
	pm9 "o.o/backend/com/main/purchaserefund/pm"
	query15 "o.o/backend/com/main/purchaserefund/query"
	aggregate9 "o.o/backend/com/main/receipting/aggregate"
	pm10 "o.o/backend/com/main/receipting/pm"
	query12 "o.o/backend/com/main/receipting/query"
	aggregate16 "o.o/backend/com/main/refund/aggregate"
	pm11 "o.o/backend/com/main/refund/pm"
	query14 "o.o/backend/com/main/refund/query"
	query26 "o.o/backend/com/main/reporting/query"
	"o.o/backend/com/main/shipmentpricing/pricelist"
	pm17 "o.o/backend/com/main/shipmentpricing/pricelist/pm"
	"o.o/backend/com/main/shipmentpricing/pricelistpromotion"
	"o.o/backend/com/main/shipmentpricing/shipmentprice"
	"o.o/backend/com/main/shipmentpricing/shipmentservice"
	"o.o/backend/com/main/shipmentpricing/shopshipmentpricelist"
	"o.o/backend/com/main/shipnow"
	"o.o/backend/com/main/shipnow/carrier"
	pm12 "o.o/backend/com/main/shipnow/pm"
	aggregate15 "o.o/backend/com/main/shipping/aggregate"
	carrier2 "o.o/backend/com/main/shipping/carrier"
	pm13 "o.o/backend/com/main/shipping/pm"
	query17 "o.o/backend/com/main/shipping/query"
	query16 "o.o/backend/com/main/shippingcode/query"
	aggregate14 "o.o/backend/com/main/stocktaking/aggregate"
	query10 "o.o/backend/com/main/stocktaking/query"
	"o.o/backend/com/report/reportserver"
	affiliate2 "o.o/backend/com/services/affiliate"
	pm14 "o.o/backend/com/services/affiliate/pm"
	aggregate11 "o.o/backend/com/shopping/carrying/aggregate"
	query7 "o.o/backend/com/shopping/carrying/query"
	aggregate8 "o.o/backend/com/shopping/customering/aggregate"
	pm18 "o.o/backend/com/shopping/customering/pm"
	query4 "o.o/backend/com/shopping/customering/query"
	aggregate21 "o.o/backend/com/shopping/setting/aggregate"
	query23 "o.o/backend/com/shopping/setting/query"
	aggregate10 "o.o/backend/com/shopping/suppliering/aggregate"
	query8 "o.o/backend/com/shopping/suppliering/query"
	aggregate27 "o.o/backend/com/shopping/tradering/aggregate"
	pm15 "o.o/backend/com/shopping/tradering/pm"
	query9 "o.o/backend/com/shopping/tradering/query"
	"o.o/backend/com/subscripting/subscription"
	"o.o/backend/com/subscripting/subscriptionbill"
	"o.o/backend/com/subscripting/subscriptionplan"
	"o.o/backend/com/subscripting/subscriptionproduct"
	query25 "o.o/backend/com/summary/etelecom/query"
	query19 "o.o/backend/com/summary/etop/query"
	aggregate19 "o.o/backend/com/supporting/ticket/aggregate"
	"o.o/backend/com/supporting/ticket/provider"
	query5 "o.o/backend/com/supporting/ticket/query"
	aggregate18 "o.o/backend/com/web/webserver/aggregate"
	query21 "o.o/backend/com/web/webserver/query"
	"o.o/backend/pkg/common/apifw/captcha"
	"o.o/backend/pkg/common/apifw/health"
	auth2 "o.o/backend/pkg/common/authorization/auth"
	"o.o/backend/pkg/common/bus"
	"o.o/backend/pkg/common/redis"
	"o.o/backend/pkg/etop/api"
	"o.o/backend/pkg/etop/api/admin"
	"o.o/backend/pkg/etop/api/admin/_all"
	"o.o/backend/pkg/etop/api/affiliate"
	"o.o/backend/pkg/etop/api/export"
	"o.o/backend/pkg/etop/api/integration"
	"o.o/backend/pkg/etop/api/sadmin"
	"o.o/backend/pkg/etop/api/shop"
	"o.o/backend/pkg/etop/api/shop/_all"
	"o.o/backend/pkg/etop/api/shop/account"
	"o.o/backend/pkg/etop/api/shop/accountshipnow"
	"o.o/backend/pkg/etop/api/shop/authorize"
	"o.o/backend/pkg/etop/api/shop/brand"
	carrier3 "o.o/backend/pkg/etop/api/shop/carrier"
	"o.o/backend/pkg/etop/api/shop/category"
	"o.o/backend/pkg/etop/api/shop/collection"
	"o.o/backend/pkg/etop/api/shop/connection"
	"o.o/backend/pkg/etop/api/shop/contact"
	"o.o/backend/pkg/etop/api/shop/customer"
	"o.o/backend/pkg/etop/api/shop/customergroup"
	"o.o/backend/pkg/etop/api/shop/etelecom"
	export2 "o.o/backend/pkg/etop/api/shop/export"
	"o.o/backend/pkg/etop/api/shop/fulfillment"
	"o.o/backend/pkg/etop/api/shop/history"
	"o.o/backend/pkg/etop/api/shop/inventory"
	"o.o/backend/pkg/etop/api/shop/ledger"
	"o.o/backend/pkg/etop/api/shop/money_transaction"
	"o.o/backend/pkg/etop/api/shop/notification"
	"o.o/backend/pkg/etop/api/shop/order"
	"o.o/backend/pkg/etop/api/shop/payment"
	"o.o/backend/pkg/etop/api/shop/product"
	"o.o/backend/pkg/etop/api/shop/product_source"
	"o.o/backend/pkg/etop/api/shop/purchase_order"
	"o.o/backend/pkg/etop/api/shop/purchase_refund"
	"o.o/backend/pkg/etop/api/shop/receipt"
	"o.o/backend/pkg/etop/api/shop/refund"
	"o.o/backend/pkg/etop/api/shop/setting"
	"o.o/backend/pkg/etop/api/shop/shipment"
	shipnow2 "o.o/backend/pkg/etop/api/shop/shipnow"
	"o.o/backend/pkg/etop/api/shop/stocktake"
	subscription2 "o.o/backend/pkg/etop/api/shop/subscription"
	summary2 "o.o/backend/pkg/etop/api/shop/summary"
	"o.o/backend/pkg/etop/api/shop/supplier"
	"o.o/backend/pkg/etop/api/shop/ticket"
	"o.o/backend/pkg/etop/api/shop/trading"
	"o.o/backend/pkg/etop/api/shop/ws"
	"o.o/backend/pkg/etop/apix/mc/vht"
	"o.o/backend/pkg/etop/apix/mc/vnp"
	"o.o/backend/pkg/etop/apix/partner"
	"o.o/backend/pkg/etop/apix/partnercarrier"
	"o.o/backend/pkg/etop/apix/partnerimport"
	"o.o/backend/pkg/etop/apix/shipping"
	"o.o/backend/pkg/etop/apix/shop"
	"o.o/backend/pkg/etop/apix/shopping"
	"o.o/backend/pkg/etop/apix/webhook"
	"o.o/backend/pkg/etop/authorize/auth"
	"o.o/backend/pkg/etop/authorize/middleware"
	"o.o/backend/pkg/etop/authorize/tokens"
	"o.o/backend/pkg/etop/eventstream"
	imcsv3 "o.o/backend/pkg/etop/logic/fulfillments/imcsv"
	"o.o/backend/pkg/etop/logic/hotfix"
	"o.o/backend/pkg/etop/logic/money-transaction/dhlimport"
	"o.o/backend/pkg/etop/logic/money-transaction/ghnimport"
	"o.o/backend/pkg/etop/logic/money-transaction/ghtkimport"
	"o.o/backend/pkg/etop/logic/money-transaction/handlers"
	"o.o/backend/pkg/etop/logic/money-transaction/jtexpressimport"
	"o.o/backend/pkg/etop/logic/money-transaction/njvimport"
	"o.o/backend/pkg/etop/logic/money-transaction/vtpostimport"
	"o.o/backend/pkg/etop/logic/orders"
	"o.o/backend/pkg/etop/logic/orders/imcsv"
	imcsv2 "o.o/backend/pkg/etop/logic/products/imcsv"
	"o.o/backend/pkg/etop/logic/summary"
	"o.o/backend/pkg/etop/sqlstore"
	"o.o/backend/pkg/integration/email"
	"o.o/backend/pkg/integration/payment/vtpay"
	"o.o/backend/pkg/integration/payment/vtpay/client"
	"o.o/backend/pkg/integration/shipnow/ahamove"
	client2 "o.o/backend/pkg/integration/shipnow/ahamove/client"
	server2 "o.o/backend/pkg/integration/shipnow/ahamove/server"
	webhook6 "o.o/backend/pkg/integration/shipnow/ahamove/webhook"
	webhook2 "o.o/backend/pkg/integration/shipping/direct/webhook"
	"o.o/backend/pkg/integration/shipping/ghn/webhook/v1"
	"o.o/backend/pkg/integration/shipping/ghn/webhook/v2"
	webhook4 "o.o/backend/pkg/integration/shipping/ghtk/webhook"
	webhook3 "o.o/backend/pkg/integration/shipping/ninjavan/webhook"
	webhook5 "o.o/backend/pkg/integration/shipping/vtpost/webhook"
	"o.o/backend/pkg/integration/sms"
	api2 "o.o/backend/pkg/services/affiliate/api"
)

// Injectors from wire.go:

func Build(ctx context.Context, cfg config.Config, partnerAuthURL partner.AuthURL) (Output, func(), error) {
	redisRedis := cfg.Redis
	store := redis.Connect(redisRedis)
	service := health.New(store)
	miscService := &api.MiscService{}
	policy := ProvidePolicy()
	authorizer := auth.New(policy)
	sharedConfig := cfg.SharedConfig
	sAdminToken := config_server.WireSAdminToken(sharedConfig)
	database_allConfig := cfg.Databases
	databases, err := database_all.BuildDatabases(database_allConfig)
	if err != nil {
		return Output{}, nil, err
	}
	mainDB := databases.Main
	queryService := identity.NewQueryService(mainDB)
	queryBus := identity.QueryServiceMessageBus(queryService)
	tokenStore := tokens.NewTokenStore(store)
	busBus := bus.New()
	addressStore := &sqlstore.AddressStore{
		DB: mainDB,
	}
	userStore := sqlstore.BuildUserStore(mainDB)
	userStoreInterface := sqlstore.BindUserStore(userStore)
	accountStore := &sqlstore.AccountStore{
		DB:           mainDB,
		EventBus:     busBus,
		AddressStore: addressStore,
		UserStore:    userStoreInterface,
	}
	accountStoreInterface := sqlstore.BindAccountStore(accountStore)
	partnerStore := sqlstore.BuildPartnerStore(mainDB)
	partnerStoreInterface := sqlstore.BindPartnerStore(partnerStore)
	accountUserStore := &sqlstore.AccountUserStore{
		DB: mainDB,
	}
	accountUserStoreInterface := sqlstore.BindAccountUserStore(accountUserStore)
	shopStore := &sqlstore.ShopStore{
		DB: mainDB,
	}
	shopStoreInterface := sqlstore.BindShopStore(shopStore)
	sessionStarter := &middleware.SessionStarter{
		SAdminToken:      sAdminToken,
		IdentityQuery:    queryBus,
		TokenStore:       tokenStore,
		AccountStore:     accountStoreInterface,
		UserStore:        userStoreInterface,
		PartnerStore:     partnerStoreInterface,
		AccountUserStore: accountUserStoreInterface,
		ShopStore:        shopStoreInterface,
	}
	session := config_server.NewSession(authorizer, sessionStarter, userStoreInterface, accountUserStoreInterface, sharedConfig, store)
	identityAggregate := identity.NewAggregate(mainDB, busBus)
	commandBus := identity.AggregateMessageBus(identityAggregate)
	flagEnableNewLinkInvitation := cfg.FlagEnableNewLinkInvitation
	invitationQuery := query.NewInvitationQuery(mainDB, flagEnableNewLinkInvitation)
	invitationQueryBus := query.InvitationQueryMessageBus(invitationQuery)
	notifierQueryService := notifier.NewQueryService(mainDB)
	notifyQueryBus := notifier.QueryServiceNotifyBus(notifierQueryService)
	locationQuery := location.New(mainDB)
	locationQueryBus := location.QueryMessageBus(locationQuery)
	mapShipmentServices := shipment_all.SupportedShipmentServices()
	connectionQuery := query2.NewConnectionQuery(mainDB, mapShipmentServices)
	connectioningQueryBus := query2.ConnectionQueryMessageBus(connectionQuery)
	connectionAggregate := aggregate.NewConnectionAggregate(mainDB, busBus)
	connectioningCommandBus := aggregate.ConnectionAggregateMessageBus(connectionAggregate)
	connectionManager := manager.NewConnectionManager(store, connectioningQueryBus)
	shipnowQueryService := shipnow.NewQueryService(mainDB)
	shipnowQueryBus := shipnow.QueryServiceMessageBus(shipnowQueryService)
	queryQueryService := query3.NewQueryService(mainDB, busBus)
	accountshipnowQueryBus := query3.QueryServiceMessageBus(queryQueryService)
	aggregateAggregate := aggregate2.NewAggregate(mainDB, busBus)
	accountshipnowCommandBus := aggregate2.AggregateMessageBus(aggregateAggregate)
	typesConfig := shipnow_all.SupportedShipnowCarrierConfig(cfg)
	driver := shipnow_all.SupportedShipnowCarrierDriver()
	shipnowManager := carrier.NewShipnowManager(locationQueryBus, connectioningQueryBus, connectioningCommandBus, store, connectionManager, queryBus, shipnowQueryBus, accountshipnowQueryBus, accountshipnowCommandBus, typesConfig, driver)
	notifierAggregate := notifier.NewNotifyAggregate(mainDB, shipnowManager)
	notifyCommandBus := notifier.NewNotifyAggregateMessageBus(notifierAggregate)
	generator := auth2.NewGenerator(store)
	smsConfig := cfg.SMS
	whiteLabel := cfg.WhiteLabel
	v := sms_all.SupportedSMSDrivers(whiteLabel, smsConfig)
	logDB := databases.Log
	smsLogAggregate := aggregate3.NewSmsLogAggregate(busBus, logDB)
	smslogCommandBus := aggregate3.SmsLogAggregateMessageBus(smsLogAggregate)
	smsClient := sms.New(smsConfig, v, smslogCommandBus)
	smtpConfig := cfg.SMTP
	emailClient := email.New(smtpConfig)
	userStoreFactory := sqlstore.NewUserStore(mainDB)
	login := &sqlstore.Login{
		UserStore: userStoreInterface,
	}
	loginInterface := sqlstore.BindLogin(login)
	webphonePublicKey := cfg.WebphonePublicKey
	userService := &api.UserService{
		Session:           session,
		IdentityAggr:      commandBus,
		IdentityQuery:     queryBus,
		InvitationQuery:   invitationQueryBus,
		NotifyQuery:       notifyQueryBus,
		NotifyAggr:        notifyCommandBus,
		EventBus:          busBus,
		AuthStore:         generator,
		TokenStore:        tokenStore,
		RedisStore:        store,
		SMSClient:         smsClient,
		EmailClient:       emailClient,
		UserStore:         userStoreFactory,
		UserStoreIface:    userStoreInterface,
		ShopStore:         shopStoreInterface,
		AccountUserStore:  accountUserStoreInterface,
		LoginIface:        loginInterface,
		WebphonePublicKey: webphonePublicKey,
	}
	partnerStoreFactory := sqlstore.NewPartnerStore(mainDB)
	accountService := &api.AccountService{
		Session:           session,
		PartnerStore:      partnerStoreFactory,
		AccountStore:      accountStoreInterface,
		AccountUserStore:  accountUserStoreInterface,
		PartnerStoreIface: partnerStoreInterface,
	}
	locationService := &api.LocationService{
		Session:       session,
		LocationQuery: locationQueryBus,
	}
	bankService := &api.BankService{
		Session: session,
	}
	addressAggregate := address.NewAggregateAddress(busBus, mainDB, locationQueryBus)
	addressCommandBus := address.AddressAggregateMessageBus(addressAggregate)
	addressQueryService := address.NewQueryAddress(mainDB, busBus)
	addressQueryBus := address.QueryServiceMessageBus(addressQueryService)
	addressService := &api.AddressService{
		Session:     session,
		AddressAggr: addressCommandBus,
		AddressQS:   addressQueryBus,
	}
	invitationConfig := cfg.Invitation
	customerQuery := query4.NewCustomerQuery(mainDB)
	customeringQueryBus := query4.CustomerQueryMessageBus(customerQuery)
	invitationAggregate := aggregate4.NewInvitationAggregate(mainDB, invitationConfig, customeringQueryBus, queryBus, busBus, smsClient, emailClient, flagEnableNewLinkInvitation, accountUserStoreInterface, shopStoreInterface, userStoreInterface, store)
	invitationCommandBus := aggregate4.InvitationAggregateMessageBus(invitationAggregate)
	authorizationAggregate := &aggregate5.AuthorizationAggregate{
		Auth:             authorizer,
		AccountUserStore: accountUserStoreInterface,
		ShopStore:        shopStoreInterface,
	}
	authorizationCommandBus := aggregate5.AuthorizationAggregateMessageBus(authorizationAggregate)
	accountRelationshipService := &api.AccountRelationshipService{
		Session:           session,
		InvitationAggr:    invitationCommandBus,
		InvitationQuery:   invitationQueryBus,
		AuthorizationAggr: authorizationCommandBus,
		UserStore:         userStoreFactory,
		AccountUserStore:  accountUserStoreInterface,
	}
	userRelationshipService := &api.UserRelationshipService{
		Session:                session,
		InvitationAggr:         invitationCommandBus,
		InvitationQuery:        invitationQueryBus,
		AuthorizationAggregate: authorizationCommandBus,
		ShopStore:              shopStoreInterface,
		UserStore:              userStoreInterface,
	}
	ticketQuery := query5.NewTicketQuery(store, busBus, mainDB)
	ticketQueryBus := query5.TicketQueryMessageBus(ticketQuery)
	ticketService := &api.TicketService{
		Session:     session,
		TicketQuery: ticketQueryBus,
	}
	ecomService := &api.EcomService{
		Session:        session,
		SessionStarter: sessionStarter,
	}
	emailConfig := cfg.Email
	servers, cleanup := api.NewServers(miscService, userService, accountService, locationService, bankService, addressService, accountRelationshipService, userRelationshipService, ticketService, ecomService, store, emailConfig, smsConfig)
	shopMiscService := &shop.MiscService{
		Session: session,
	}
	queryService2 := query6.New(mainDB)
	catalogQueryBus := query6.QueryServiceMessageBus(queryService2)
	aggregate28 := aggregate6.New(busBus, mainDB)
	catalogCommandBus := aggregate6.AggregateMessageBus(aggregate28)
	brandService := &brand.BrandService{
		Session:      session,
		CatalogQuery: catalogQueryBus,
		CatalogAggr:  catalogCommandBus,
	}
	carrierQuery := query7.NewCarrierQuery(mainDB)
	carryingQueryBus := query7.CarrierQueryMessageBus(carrierQuery)
	supplierQuery := query8.NewSupplierQuery(mainDB)
	supplieringQueryBus := query8.SupplierQueryMessageBus(supplierQuery)
	traderQuery := query9.NewTraderQuery(mainDB, customeringQueryBus, carryingQueryBus, supplieringQueryBus)
	traderingQueryBus := query9.TraderQueryMessageBus(traderQuery)
	stocktakeQuery := query10.NewQueryStocktake(mainDB)
	stocktakingQueryBus := query10.StocktakeQueryMessageBus(stocktakeQuery)
	inventoryQueryService := query11.NewQueryInventory(stocktakingQueryBus, busBus, mainDB)
	inventoryQueryBus := query11.InventoryQueryServiceMessageBus(inventoryQueryService)
	orderingQueryService := ordering.NewQueryService(mainDB)
	orderingQueryBus := ordering.QueryServiceMessageBus(orderingQueryService)
	receiptQuery := query12.NewReceiptQuery(mainDB, orderingQueryBus)
	receiptingQueryBus := query12.ReceiptQueryMessageBus(receiptQuery)
	purchaseOrderQuery := query13.NewPurchaseOrderQuery(mainDB, busBus, supplieringQueryBus, inventoryQueryBus, receiptingQueryBus)
	purchaseorderQueryBus := query13.PurchaseOrderQueryMessageBus(purchaseOrderQuery)
	refundQueryService := query14.NewQueryRefund(busBus, mainDB)
	refundQueryBus := query14.RefundQueryServiceMessageBus(refundQueryService)
	purchaseRefundQueryService := query15.NewQueryPurchasePurchaseRefund(busBus, mainDB)
	purchaserefundQueryBus := query15.PurchaseRefundQueryServiceMessageBus(purchaseRefundQueryService)
	orderStore := &sqlstore.OrderStore{
		DB:           mainDB,
		LocationBus:  locationQueryBus,
		AccountStore: accountStoreInterface,
		ShopStore:    shopStoreInterface,
	}
	orderStoreInterface := sqlstore.BindOrderStore(orderStore)
	inventoryAggregate := aggregate7.NewAggregateInventory(busBus, mainDB, traderingQueryBus, purchaseorderQueryBus, stocktakingQueryBus, refundQueryBus, purchaserefundQueryBus, catalogQueryBus, orderStoreInterface)
	inventoryCommandBus := aggregate7.InventoryAggregateMessageBus(inventoryAggregate)
	inventoryService := &inventory.InventoryService{
		Session:        session,
		TraderQuery:    traderingQueryBus,
		InventoryAggr:  inventoryCommandBus,
		InventoryQuery: inventoryQueryBus,
	}
	accountAccountService := &account.AccountService{
		Session:             session,
		IdentityAggr:        commandBus,
		IdentityQuery:       queryBus,
		AddressQuery:        addressQueryBus,
		AddressAggr:         addressCommandBus,
		UserStore:           userStoreFactory,
		AccountStore:        accountStoreInterface,
		UserStoreIface:      userStoreInterface,
		AccountshipnowQuery: accountshipnowQueryBus,
		AccountshipnowAggr:  accountshipnowCommandBus,
	}
	collectionService := &collection.CollectionService{
		Session:      session,
		CatalogQuery: catalogQueryBus,
		CatalogAggr:  catalogCommandBus,
	}
	customerAggregate := aggregate8.NewCustomerAggregate(busBus, mainDB)
	customeringCommandBus := aggregate8.CustomerAggregateMessageBus(customerAggregate)
	aggregateAddressAggregate := aggregate8.NewAddressAggregate(mainDB, locationQueryBus)
	addressingCommandBus := aggregate8.AddressAggregateMessageBus(aggregateAddressAggregate)
	addressQuery := query4.NewAddressQuery(mainDB)
	addressingQueryBus := query4.AddressQueryMessageBus(addressQuery)
	customerService := &customer.CustomerService{
		Session:       session,
		LocationQuery: locationQueryBus,
		CustomerQuery: customeringQueryBus,
		CustomerAggr:  customeringCommandBus,
		AddressAggr:   addressingCommandBus,
		AddressQuery:  addressingQueryBus,
		OrderQuery:    orderingQueryBus,
		ReceiptQuery:  receiptingQueryBus,
	}
	customerGroupService := &customergroup.CustomerGroupService{
		Session:       session,
		CustomerAggr:  customeringCommandBus,
		CustomerQuery: customeringQueryBus,
	}
	shopVariantStore := &sqlstore.ShopVariantStore{
		DB: mainDB,
	}
	shopVariantStoreInterface := sqlstore.BindShopVariantStore(shopVariantStore)
	productService := &product.ProductService{
		Session:          session,
		CatalogQuery:     catalogQueryBus,
		CatalogAggr:      catalogCommandBus,
		InventoryQuery:   inventoryQueryBus,
		ShopVariantStore: shopVariantStoreInterface,
	}
	categoryService := &category.CategoryService{
		Session:      session,
		CatalogQuery: catalogQueryBus,
		CatalogAggr:  catalogCommandBus,
	}
	categoryStore := &sqlstore.CategoryStore{
		DB: mainDB,
	}
	categoryStoreInterface := sqlstore.BindCategoryStore(categoryStore)
	productSourceService := &product_source.ProductSourceService{
		Session:       session,
		ShopStore:     shopStoreInterface,
		CategoryStore: categoryStoreInterface,
	}
	orderingAggregate := ordering.NewAggregate(busBus, mainDB)
	orderingCommandBus := ordering.AggregateMessageBus(orderingAggregate)
	queryService3 := query16.NewQueryService(mainDB)
	shippingcodeQueryBus := query16.QueryServiceMessageBus(queryService3)
	shipmentserviceQueryService := shipmentservice.NewQueryService(mainDB, store)
	shipmentserviceQueryBus := shipmentservice.QueryServiceMessageBus(shipmentserviceQueryService)
	pricelistQueryService := pricelist.NewQueryService(mainDB, store)
	pricelistQueryBus := pricelist.QueryServiceMessageBus(pricelistQueryService)
	shopshipmentpricelistQueryService := shopshipmentpricelist.NewQueryService(mainDB, store)
	shopshipmentpricelistQueryBus := shopshipmentpricelist.QueryServiceMessageBus(shopshipmentpricelistQueryService)
	shipmentpriceQueryService := shipmentprice.NewQueryService(mainDB, store, locationQueryBus, pricelistQueryBus, shopshipmentpricelistQueryBus)
	shipmentpriceQueryBus := shipmentprice.QueryServiceMessageBus(shipmentpriceQueryService)
	pricelistpromotionQueryService := pricelistpromotion.NewQueryService(mainDB, store, locationQueryBus, queryBus, shopshipmentpricelistQueryBus, pricelistQueryBus)
	pricelistpromotionQueryBus := pricelistpromotion.QueryServiceMessageBus(pricelistpromotionQueryService)
	typesDriver := shipment_all.SupportedCarrierDriver(busBus)
	shipmentManager, err := carrier2.NewShipmentManager(busBus, locationQueryBus, queryBus, connectioningQueryBus, connectioningCommandBus, shippingcodeQueryBus, shipmentserviceQueryBus, shipmentpriceQueryBus, pricelistpromotionQueryBus, typesDriver, connectionManager, orderStoreInterface)
	if err != nil {
		cleanup()
		return Output{}, nil, err
	}
	addressStoreInterface := sqlstore.BindAddressStore(addressStore)
	flagFaboOrderAutoConfirmPaymentStatus := cfg.FlagFaboOrderAutoConfirmPaymentStatus
	orderLogic := &orderS.OrderLogic{
		CatalogQuery:                          catalogQueryBus,
		OrderAggr:                             orderingCommandBus,
		CustomerAggr:                          customeringCommandBus,
		CustomerQuery:                         customeringQueryBus,
		TraderAddressAggr:                     addressingCommandBus,
		TraderAddressQuery:                    addressingQueryBus,
		LocationQuery:                         locationQueryBus,
		EventBus:                              busBus,
		ShipmentManager:                       shipmentManager,
		AddressStore:                          addressStoreInterface,
		OrderStore:                            orderStoreInterface,
		FlagFaboOrderUpdatePaymentSatusConfig: flagFaboOrderAutoConfirmPaymentStatus,
	}
	orderService := &order.OrderService{
		Session:       session,
		OrderAggr:     orderingCommandBus,
		CustomerQuery: customeringQueryBus,
		OrderQuery:    orderingQueryBus,
		ReceiptQuery:  receiptingQueryBus,
		OrderLogic:    orderLogic,
		OrderStore:    orderStoreInterface,
	}
	queryService4 := query17.NewQueryService(mainDB, shipmentManager, connectioningQueryBus)
	shippingQueryBus := query17.QueryServiceMessageBus(queryService4)
	fulfillmentService := &fulfillment.FulfillmentService{
		Session:         session,
		ShipmentManager: shipmentManager,
		ShippingQuery:   shippingQueryBus,
		OrderStore:      orderStoreInterface,
	}
	shipnowAggregate := shipnow.NewAggregate(busBus, mainDB, locationQueryBus, queryBus, addressQueryBus, connectioningQueryBus, orderingQueryBus, shipnowManager)
	shipnowCommandBus := shipnow.AggregateMessageBus(shipnowAggregate)
	shipnowService := &shipnow2.ShipnowService{
		Session:      session,
		ShipnowAggr:  shipnowCommandBus,
		ShipnowQuery: shipnowQueryBus,
	}
	historyStore := &sqlstore.HistoryStore{
		DB: mainDB,
	}
	historyStoreInterface := sqlstore.BindHistoryStore(historyStore)
	historyService := &history.HistoryService{
		Session:      session,
		HistoryStore: historyStoreInterface,
	}
	moneyTxQuery := query18.NewMoneyTxQuery(mainDB, shippingQueryBus)
	moneytxQueryBus := query18.MoneyTxQueryMessageBus(moneyTxQuery)
	moneyTransactionService := &money_transaction.MoneyTransactionService{
		Session:      session,
		MoneyTxQuery: moneytxQueryBus,
	}
	dashboardQuery := query19.NewDashboardQuery(mainDB, store, locationQueryBus)
	summaryQueryBus := query19.DashboardQueryMessageBus(dashboardQuery)
	summarySummary := summary.New(mainDB)
	etelecomDB := databases.Etelecom
	creditQueryService := credit.NewQueryCredit(busBus, mainDB, etelecomDB, queryBus)
	creditQueryBus := credit.CreditQueryServiceMessageBus(creditQueryService)
	moneyTxStore := &sqlstore.MoneyTxStore{
		DB:               mainDB,
		EventBus:         busBus,
		AccountUserStore: accountUserStoreInterface,
		ShopStore:        shopStoreInterface,
		OrderStore:       orderStoreInterface,
	}
	moneyTxStoreInterface := sqlstore.BindMoneyTxStore(moneyTxStore)
	summaryService := &summary2.SummaryService{
		Session:      session,
		SummaryQuery: summaryQueryBus,
		SummaryOld:   summarySummary,
		CreditQuery:  creditQueryBus,
		MoneyTxStore: moneyTxStoreInterface,
	}
	eventStream := eventstream.New(ctx)
	configDirs := cfg.ExportDirs
	driverConfig := cfg.StorageDriver
	bucket, err := storage_all.Build(ctx, driverConfig)
	if err != nil {
		cleanup()
		return Output{}, nil, err
	}
	exportAttemptStoreFactory := sqlstore.NewExportAttemptStore(mainDB)
	exportService, cleanup2 := export.New(store, eventStream, configDirs, bucket, exportAttemptStoreFactory, orderStoreInterface)
	exportExportService := &export2.ExportService{
		Session:     session,
		Auth:        authorizer,
		ExportInner: exportService,
	}
	notifierDB := databases.Notifier
	notificationStore := sqlstore2.NewNotificationStore(notifierDB, accountUserStoreInterface)
	deviceStore := sqlstore2.NewDeviceStore(notifierDB)
	notificationService := &notification.NotificationService{
		Session:           session,
		NotificationStore: notificationStore,
		DeviceStore:       deviceStore,
	}
	authorizeService := &authorize.AuthorizeService{
		Session:      session,
		PartnerStore: partnerStoreInterface,
	}
	tradingService := &trading.TradingService{
		Session:        session,
		EventBus:       busBus,
		IdentityQuery:  queryBus,
		CatalogQuery:   catalogQueryBus,
		OrderQuery:     orderingQueryBus,
		InventoryQuery: inventoryQueryBus,
		OrderLogic:     orderLogic,
		OrderStore:     orderStoreInterface,
	}
	clientConfig := cfg.VTPay
	vtpayProvider := vtpay.New(clientConfig)
	v3 := payment_all.AllSupportedPaymentProviders(vtpayProvider)
	paymentManager := manager2.NewManager(v3, orderingQueryBus)
	managerCommandBus := manager2.ManagerMesssageBus(paymentManager)
	paymentService := &payment.PaymentService{
		Session:     session,
		PaymentAggr: managerCommandBus,
	}
	ledgerQuery := query20.NewLedgerQuery(mainDB)
	ledgeringQueryBus := query20.LedgerQueryMessageBus(ledgerQuery)
	receiptAggregate := aggregate9.NewReceiptAggregate(mainDB, busBus, traderingQueryBus, ledgeringQueryBus, orderingQueryBus, customeringQueryBus, carryingQueryBus, supplieringQueryBus, purchaseorderQueryBus)
	receiptingCommandBus := aggregate9.ReceiptAggregateMessageBus(receiptAggregate)
	receiptService := &receipt.ReceiptService{
		Session:          session,
		CarrierQuery:     carryingQueryBus,
		CustomerQuery:    customeringQueryBus,
		LedgerQuery:      ledgeringQueryBus,
		ReceiptAggr:      receiptingCommandBus,
		ReceiptQuery:     receiptingQueryBus,
		SupplierQuery:    supplieringQueryBus,
		TraderQuery:      traderingQueryBus,
		AccountUserStore: accountUserStoreInterface,
	}
	supplierAggregate := aggregate10.NewSupplierAggregate(busBus, mainDB)
	supplieringCommandBus := aggregate10.SupplierAggregateMessageBus(supplierAggregate)
	supplierService := &supplier.SupplierService{
		Session:            session,
		CatalogQuery:       catalogQueryBus,
		PurchaseOrderQuery: purchaseorderQueryBus,
		ReceiptQuery:       receiptingQueryBus,
		SupplierAggr:       supplieringCommandBus,
		SupplierQuery:      supplieringQueryBus,
	}
	carrierAggregate := aggregate11.NewCarrierAggregate(busBus, mainDB)
	carryingCommandBus := aggregate11.CarrierAggregateMessageBus(carrierAggregate)
	carrierService := &carrier3.CarrierService{
		Session:      session,
		CarrierAggr:  carryingCommandBus,
		CarrierQuery: carryingQueryBus,
	}
	ledgerAggregate := aggregate12.NewLedgerAggregate(mainDB, receiptingQueryBus)
	ledgeringCommandBus := aggregate12.LedgerAggregateMessageBus(ledgerAggregate)
	ledgerService := &ledger.LedgerService{
		Session:     session,
		LedgerAggr:  ledgeringCommandBus,
		LedgerQuery: ledgeringQueryBus,
	}
	purchaseOrderAggregate := aggregate13.NewPurchaseOrderAggregate(mainDB, busBus, catalogQueryBus, supplieringQueryBus, inventoryQueryBus)
	purchaseorderCommandBus := aggregate13.PurchaseOrderAggregateMessageBus(purchaseOrderAggregate)
	purchaseOrderService := &purchase_order.PurchaseOrderService{
		Session:            session,
		PurchaseOrderAggr:  purchaseorderCommandBus,
		PurchaseOrderQuery: purchaseorderQueryBus,
	}
	stocktakeAggregate := aggregate14.NewAggregateStocktake(mainDB, busBus, store)
	stocktakingCommandBus := aggregate14.StocktakeAggregateMessageBus(stocktakeAggregate)
	stocktakeService := &stocktake.StocktakeService{
		Session:        session,
		CatalogQuery:   catalogQueryBus,
		StocktakeAggr:  stocktakingCommandBus,
		StocktakeQuery: stocktakingQueryBus,
		InventoryQuery: inventoryQueryBus,
	}
	aggregate29 := aggregate15.NewAggregate(mainDB, busBus, locationQueryBus, orderingQueryBus, shipmentManager, connectioningQueryBus, queryBus, addressQueryBus)
	shippingCommandBus := aggregate15.AggregateMessageBus(aggregate29)
	shipmentService := &shipment.ShipmentService{
		Session:           session,
		ShipmentManager:   shipmentManager,
		ShippingAggregate: shippingCommandBus,
		OrderStore:        orderStoreInterface,
	}
	connectionService := &connection.ConnectionService{
		Session:            session,
		ShipmentManager:    shipmentManager,
		ConnectionQuery:    connectioningQueryBus,
		ConnectionAggr:     connectioningCommandBus,
		IdentityQuery:      queryBus,
		AccountshipnowAggr: accountshipnowCommandBus,
	}
	refundAggregate := aggregate16.NewRefundAggregate(mainDB, busBus, orderStoreInterface)
	refundCommandBus := aggregate16.RefundAggregateMessageBus(refundAggregate)
	refundService := &refund.RefundService{
		Session:        session,
		CustomerQuery:  customeringQueryBus,
		InventoryQuery: inventoryQueryBus,
		ReceiptQuery:   receiptingQueryBus,
		RefundAggr:     refundCommandBus,
		RefundQuery:    refundQueryBus,
		OrderStore:     orderStoreInterface,
	}
	purchaseRefundAggregate := aggregate17.NewPurchaseRefundAggregate(mainDB, busBus, purchaseorderQueryBus)
	purchaserefundCommandBus := aggregate17.PurchaseRefundAggregateMessageBus(purchaseRefundAggregate)
	purchaseRefundService := &purchase_refund.PurchaseRefundService{
		Session:             session,
		PurchaseRefundAggr:  purchaserefundCommandBus,
		PurchaseRefundQuery: purchaserefundQueryBus,
		SupplierQuery:       supplieringQueryBus,
		PurchaseOrderQuery:  purchaseorderQueryBus,
		InventoryQuery:      inventoryQueryBus,
	}
	webServerDB := databases.WebServer
	webserverAggregate := aggregate18.New(busBus, webServerDB, catalogQueryBus)
	webserverCommandBus := aggregate18.WebserverAggregateMessageBus(webserverAggregate)
	webserverQueryService := query21.New(busBus, webServerDB, catalogQueryBus)
	webserverQueryBus := query21.WebserverQueryServiceMessageBus(webserverQueryService)
	webServerService := &ws.WebServerService{
		Session:        session,
		CatalogQuery:   catalogQueryBus,
		WebserverAggr:  webserverCommandBus,
		WebserverQuery: webserverQueryBus,
		InventoryQuery: inventoryQueryBus,
	}
	subrProductQuery := subscriptionproduct.NewSubrProductQuery(mainDB)
	subscriptionproductQueryBus := subscriptionproduct.SubrProductQueryMessageBus(subrProductQuery)
	subrPlanQuery := subscriptionplan.NewSubrPlanQuery(mainDB, subscriptionproductQueryBus)
	subscriptionplanQueryBus := subscriptionplan.SubrPlanQueryMessageBus(subrPlanQuery)
	subscriptionQuery := subscription.NewSubscriptionQuery(mainDB, subscriptionplanQueryBus, subscriptionproductQueryBus)
	subscriptionQueryBus := subscription.SubscriptionQueryMessageBus(subscriptionQuery)
	subscriptionService := &subscription2.SubscriptionService{
		Session:           session,
		SubscriptionQuery: subscriptionQueryBus,
	}
	contactQuery := query22.NewContactQuery(mainDB)
	contactQueryBus := query22.ContactQueryMessageBus(contactQuery)
	driver2 := ticket_all.SupportedTicketDriver(busBus, shippingQueryBus, contactQueryBus)
	ticketManager, err := provider.NewTicketManager(connectionManager, busBus, driver2, connectioningQueryBus)
	if err != nil {
		cleanup2()
		cleanup()
		return Output{}, nil, err
	}
	ticketAggregate := aggregate19.NewTicketAggregate(busBus, mainDB, moneytxQueryBus, shippingQueryBus, orderingQueryBus, queryBus, ticketManager, connectioningQueryBus, contactQueryBus, store)
	ticketCommandBus := aggregate19.TicketAggregateMessageBus(ticketAggregate)
	ticketTicketService := &ticket.TicketService{
		Session:     session,
		TicketQuery: ticketQueryBus,
		TicketAggr:  ticketCommandBus,
	}
	accountShipnowService := &accountshipnow.AccountShipnowService{
		Session:             session,
		AccountshipnowQuery: accountshipnowQueryBus,
	}
	contactAggregate := aggregate20.NewContactAggregate(mainDB)
	contactCommandBus := aggregate20.ContactAggregateMessageBus(contactAggregate)
	contactService := &contact.ContactService{
		Session:      session,
		ContactQuery: contactQueryBus,
		ContactAggr:  contactCommandBus,
	}
	shopSettingQuery := query23.NewShopSettingQuery(mainDB)
	settingQueryBus := query23.ShopSettingQueryMessageBus(shopSettingQuery)
	shopSettingAggregate := aggregate21.NewShopSettingAggregate(mainDB, addressCommandBus)
	settingCommandBus := aggregate21.ShopSettingAggregateMessageBus(shopSettingAggregate)
	settingService := &setting.SettingService{
		Session:      session,
		SettingQuery: settingQueryBus,
		SettingAggr:  settingCommandBus,
		AddressQ:     addressQueryBus,
	}
	driver3 := _all.SupportedTelecomDriver(busBus)
	queryService5 := query24.NewQueryService(etelecomDB, connectioningQueryBus)
	etelecomQueryBus := query24.QueryServiceMessageBus(queryService5)
	telecomManager, err := provider2.NewTelecomManager(busBus, connectionManager, driver3, connectioningQueryBus, connectioningCommandBus, queryBus, etelecomQueryBus)
	if err != nil {
		cleanup2()
		cleanup()
		return Output{}, nil, err
	}
	etelecomAggregate := aggregate22.NewEtelecomAggregate(etelecomDB, busBus, contactQueryBus, telecomManager, connectioningQueryBus, queryBus)
	etelecomCommandBus := aggregate22.AggregateMessageBus(etelecomAggregate)
	summaryQuery := query25.NewSummaryQuery(etelecomDB, store)
	queryBus2 := query25.SummaryQueryMessageBus(summaryQuery)
	etelecomService := &etelecom.EtelecomService{
		Session:       session,
		EtelecomAggr:  etelecomCommandBus,
		EtelecomQuery: etelecomQueryBus,
		SummaryQuery:  queryBus2,
		IdentityAggr:  commandBus,
		IdentityQuery: queryBus,
	}
	shopServers := shop_all.NewServers(store, shopMiscService, brandService, inventoryService, accountAccountService, collectionService, customerService, customerGroupService, productService, categoryService, productSourceService, orderService, fulfillmentService, shipnowService, historyService, moneyTransactionService, summaryService, exportExportService, notificationService, authorizeService, tradingService, paymentService, receiptService, supplierService, carrierService, ledgerService, purchaseOrderService, stocktakeService, shipmentService, connectionService, refundService, purchaseRefundService, webServerService, subscriptionService, ticketTicketService, accountShipnowService, contactService, settingService, etelecomService)
	adminMiscService := admin.MiscService{
		Session: session,
		Login:   loginInterface,
	}
	accountAuthStoreFactory := sqlstore.NewAccountAuthStore(mainDB)
	adminAccountService := admin.AccountService{
		Session:          session,
		AccountAuthStore: accountAuthStoreFactory,
		UserStore:        userStoreFactory,
		PartnerStore:     partnerStoreInterface,
		AccountUserStore: accountUserStoreInterface,
	}
	adminOrderService := admin.OrderService{
		Session:    session,
		OrderStore: orderStoreInterface,
	}
	adminFulfillmentService := admin.FulfillmentService{
		Session:       session,
		EventBus:      busBus,
		IdentityQuery: queryBus,
		RedisStore:    store,
		ShippingAggr:  shippingCommandBus,
		ShippingQuery: shippingQueryBus,
		OrderStore:    orderStoreInterface,
	}
	moneyTxAggregate := aggregate23.NewMoneyTxAggregate(mainDB, shippingQueryBus, queryBus, busBus)
	moneytxCommandBus := aggregate23.MoneyTxAggregateMessageBus(moneyTxAggregate)
	adminMoneyTransactionService := admin.MoneyTransactionService{
		Session:      session,
		MoneyTxQuery: moneytxQueryBus,
		MoneyTxAggr:  moneytxCommandBus,
	}
	shopService := admin.ShopService{
		Session:       session,
		IdentityQuery: queryBus,
		IdentityAggr:  commandBus,
		ShopStore:     shopStoreInterface,
		MoneyTxQuery:  moneytxQueryBus,
	}
	creditAggregate := credit.NewAggregateCredit(busBus, mainDB, queryBus)
	creditCommandBus := credit.CreditAggregateMessageBus(creditAggregate)
	creditService := admin.CreditService{
		Session:     session,
		CreditAggr:  creditCommandBus,
		CreditQuery: creditQueryBus,
	}
	adminNotificationService := admin.NotificationService{
		Session:           session,
		NotificationStore: notificationStore,
	}
	adminConnectionService := admin.ConnectionService{
		Session:         session,
		ConnectionAggr:  connectioningCommandBus,
		ConnectionQuery: connectioningQueryBus,
	}
	shipmentpriceAggregate := shipmentprice.NewAggregate(mainDB, store, pricelistQueryBus, shipmentserviceQueryBus)
	shipmentpriceCommandBus := shipmentprice.AggregateMessageBus(shipmentpriceAggregate)
	shipmentserviceAggregate := shipmentservice.NewAggregate(mainDB, store)
	shipmentserviceCommandBus := shipmentservice.AggregateMessageBus(shipmentserviceAggregate)
	pricelistAggregate := pricelist.NewAggregate(mainDB, busBus, shopshipmentpricelistQueryBus)
	pricelistCommandBus := pricelist.AggregateMessageBus(pricelistAggregate)
	shopshipmentpricelistAggregate := shopshipmentpricelist.NewAggregate(mainDB, pricelistQueryBus)
	shopshipmentpricelistCommandBus := shopshipmentpricelist.AggregateMessageBus(shopshipmentpricelistAggregate)
	pricelistpromotionAggregate := pricelistpromotion.NewAggregate(mainDB, pricelistQueryBus)
	pricelistpromotionCommandBus := pricelistpromotion.AggregateMessageBus(pricelistpromotionAggregate)
	shipmentPriceService := admin.ShipmentPriceService{
		Session:                    session,
		ShipmentManager:            shipmentManager,
		ShipmentPriceAggr:          shipmentpriceCommandBus,
		ShipmentPriceQuery:         shipmentpriceQueryBus,
		ShipmentServiceQuery:       shipmentserviceQueryBus,
		ShipmentServiceAggr:        shipmentserviceCommandBus,
		ShipmentPriceListAggr:      pricelistCommandBus,
		ShipmentPriceListQuery:     pricelistQueryBus,
		ShopShipmentPriceListQuery: shopshipmentpricelistQueryBus,
		ShopShipmentPriceListAggr:  shopshipmentpricelistCommandBus,
		PriceListPromotionQuery:    pricelistpromotionQueryBus,
		PriceListPromotionAggr:     pricelistpromotionCommandBus,
	}
	locationAggregate := location.NewAggregate(mainDB)
	locationCommandBus := location.AggregateMessageBus(locationAggregate)
	adminLocationService := admin.LocationService{
		Session:       session,
		LocationAggr:  locationCommandBus,
		LocationQuery: locationQueryBus,
	}
	subrProductAggregate := subscriptionproduct.NewSubrProductAggregate(mainDB)
	subscriptionproductCommandBus := subscriptionproduct.SubrProductAggregateMessageBus(subrProductAggregate)
	subrPlanAggregate := subscriptionplan.NewSubrPlanAggregate(mainDB)
	subscriptionplanCommandBus := subscriptionplan.SubrPlanAggregateMessageBus(subrPlanAggregate)
	subscriptionAggregate := subscription.NewSubscriptionAggregate(mainDB)
	subscriptionCommandBus := subscription.SubscriptionAggregateMessageBus(subscriptionAggregate)
	aggregate30 := aggregate24.NewAggregate(mainDB)
	paymentCommandBus := aggregate24.AggregateMessageBus(aggregate30)
	subrBillAggregate := subscriptionbill.NewSubrBillAggregate(mainDB, busBus, paymentCommandBus, subscriptionQueryBus, subscriptionplanQueryBus)
	subscriptionbillCommandBus := subscriptionbill.SubrBillAggregateMessageBus(subrBillAggregate)
	subrBillQuery := subscriptionbill.NewSubrBillQuery(mainDB)
	subscriptionbillQueryBus := subscriptionbill.SubrBillQueryMessageBus(subrBillQuery)
	adminSubscriptionService := admin.SubscriptionService{
		Session:           session,
		SubrProductAggr:   subscriptionproductCommandBus,
		SubrProductQuery:  subscriptionproductQueryBus,
		SubrPlanAggr:      subscriptionplanCommandBus,
		SubrPlanQuery:     subscriptionplanQueryBus,
		SubscriptionQuery: subscriptionQueryBus,
		SubscriptionAggr:  subscriptionCommandBus,
		SubrBillAggr:      subscriptionbillCommandBus,
		SubrBillQuery:     subscriptionbillQueryBus,
	}
	adminUserService := admin.UserService{
		Session:       session,
		IdentityQuery: queryBus,
		IdentityAggr:  commandBus,
	}
	adminTicketService := admin.TicketService{
		Session:        session,
		TicketQuery:    ticketQueryBus,
		TicketAggr:     ticketCommandBus,
		IndentityQuery: queryBus,
	}
	adminEtelecomService := admin.EtelecomService{
		Session:       session,
		EtelecomAggr:  etelecomCommandBus,
		EtelecomQuery: etelecomQueryBus,
	}
	adminServers := admin_all.NewServers(store, adminMiscService, adminAccountService, adminOrderService, adminFulfillmentService, adminMoneyTransactionService, shopService, creditService, adminNotificationService, adminConnectionService, shipmentPriceService, adminLocationService, adminSubscriptionService, adminUserService, adminTicketService, adminEtelecomService)
	sadminMiscService := &sadmin.MiscService{
		Session: session,
	}
	sadminUserService := &sadmin.UserService{
		Session:          session,
		AccountUserStore: accountUserStore,
		UserStore:        userStoreInterface,
	}
	webhookCallbackService := sadmin.NewWebhookCallbackService(store)
	webhookService := &sadmin.WebhookService{
		Session:                session,
		WebhookCallbackService: webhookCallbackService,
	}
	sadminServers := sadmin.NewServers(sadminMiscService, sadminUserService, webhookService)
	integrationMiscService := &integration.MiscService{}
	integrationService := &integration.IntegrationService{
		Session:          session,
		AuthStore:        generator,
		TokenStore:       tokenStore,
		SMSClient:        smsClient,
		EmailClient:      emailClient,
		UserStore:        userStoreInterface,
		AccountStore:     accountStoreInterface,
		AccountUserStore: accountUserStoreInterface,
		PartnerStore:     partnerStoreInterface,
		ShopStore:        shopStoreInterface,
		IdentityAggr:     commandBus,
	}
	integrationServers, cleanup3 := integration.NewIntegrationServer(store, integrationMiscService, integrationService)
	affiliateMiscService := affiliate.MiscService{}
	affiliateAccountService := affiliate.AccountService{
		Session:      session,
		IdentityAggr: commandBus,
	}
	affiliateServers := affiliate.NewServers(affiliateMiscService, affiliateAccountService)
	affiliateDB := databases.Affiliate
	affiliateAggregate := affiliate2.NewAggregate(affiliateDB, queryBus, catalogQueryBus, orderingQueryBus)
	affiliateCommandBus := affiliate2.AggregateMessageBus(affiliateAggregate)
	apiUserService := &api2.UserService{
		Session:       session,
		AffiliateAggr: affiliateCommandBus,
	}
	affiliateQueryService := affiliate2.NewQuery(affiliateDB)
	affiliateQueryBus := affiliate2.QueryServiceMessageBus(affiliateQueryService)
	apiTradingService := &api2.TradingService{
		Session:        session,
		AffiliateAggr:  affiliateCommandBus,
		AffiliateQuery: affiliateQueryBus,
		CatalogQuery:   catalogQueryBus,
		InventoryQuery: inventoryQueryBus,
	}
	apiShopService := &api2.ShopService{
		Session:        session,
		CatalogQuery:   catalogQueryBus,
		InventoryQuery: inventoryQueryBus,
		AffiliateQuery: affiliateQueryBus,
	}
	affiliateService := &api2.AffiliateService{
		Session:        session,
		AffiliateAggr:  affiliateCommandBus,
		CatalogQuery:   catalogQueryBus,
		AffiliateQuery: affiliateQueryBus,
		IdentityQuery:  queryBus,
		OrderStore:     orderStoreInterface,
	}
	apiServers := api2.NewServers(apiUserService, apiTradingService, apiShopService, affiliateService)
	captchaConfig := cfg.Captcha
	captchaCaptcha := captcha.New(captchaConfig)
	intHandlers, err := server_max.BuildIntHandlers(servers, shopServers, adminServers, sadminServers, integrationServers, affiliateServers, apiServers, captchaCaptcha)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return Output{}, nil, err
	}
	shippingShipping := shipping.New(locationQueryBus, mainDB, shipmentManager, shippingCommandBus, shippingQueryBus, orderLogic, shipnowCommandBus, shipnowQueryBus, orderStoreInterface)
	partnerMiscService := &partner.MiscService{
		Session:  session,
		Shipping: shippingShipping,
	}
	partnerShopService := &partner.ShopService{
		Session:      session,
		PartnerStore: partnerStoreInterface,
	}
	kafka := cfg.Kafka
	producer, err := _producer.SupportedProducers(ctx, kafka)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return Output{}, nil, err
	}
	service2 := webhook.New(mainDB, producer, store)
	partnerWebhookService := &partner.WebhookService{
		Session:      session,
		WebhookInner: service2,
	}
	partnerHistoryService := &partner.HistoryService{}
	shippingService := &partner.ShippingService{
		Session:  session,
		Shipping: shippingShipping,
	}
	partnerOrderService := &partner.OrderService{
		Session:  session,
		Shipping: shippingShipping,
	}
	partnerFulfillmentService := &partner.FulfillmentService{
		Session:  session,
		Shipping: shippingShipping,
	}
	shoppingShopping := &shopping.Shopping{
		LocationQuery:     locationQueryBus,
		CustomerQuery:     customeringQueryBus,
		CustomerAggregate: customeringCommandBus,
		AddressQuery:      addressingQueryBus,
		AddressAggregate:  addressingCommandBus,
		InventoryQuery:    inventoryQueryBus,
		CatalogQuery:      catalogQueryBus,
		CatalogAggregate:  catalogCommandBus,
	}
	partnerCustomerService := &partner.CustomerService{
		Session:  session,
		Shopping: shoppingShopping,
	}
	customerAddressService := &partner.CustomerAddressService{
		Session:  session,
		Shopping: shoppingShopping,
	}
	partnerCustomerGroupService := &partner.CustomerGroupService{
		Session:  session,
		Shopping: shoppingShopping,
	}
	customerGroupRelationshipService := &partner.CustomerGroupRelationshipService{
		Session:  session,
		Shopping: shoppingShopping,
	}
	partnerInventoryService := &partner.InventoryService{
		Session:  session,
		Shopping: shoppingShopping,
	}
	variantService := &partner.VariantService{
		Session:  session,
		Shopping: shoppingShopping,
	}
	partnerProductService := &partner.ProductService{
		Session:  session,
		Shopping: shoppingShopping,
	}
	productCollectionService := &partner.ProductCollectionService{
		Session:  session,
		Shopping: shoppingShopping,
	}
	productCollectionRelationshipService := &partner.ProductCollectionRelationshipService{
		Session:  session,
		Shopping: shoppingShopping,
	}
	partnerServers, cleanup4 := partner.NewServers(store, generator, partnerAuthURL, partnerMiscService, partnerShopService, partnerWebhookService, partnerHistoryService, shippingService, partnerOrderService, partnerFulfillmentService, partnerCustomerService, customerAddressService, partnerCustomerGroupService, customerGroupRelationshipService, partnerInventoryService, variantService, partnerProductService, productCollectionService, productCollectionRelationshipService)
	xshopMiscService := &xshop.MiscService{
		Session:  session,
		Shipping: shippingShipping,
	}
	xshopWebhookService := &xshop.WebhookService{
		Session:      session,
		WebhookInner: service2,
	}
	xshopHistoryService := &xshop.HistoryService{}
	xshopShippingService := &xshop.ShippingService{
		Session:  session,
		Shipping: shippingShipping,
	}
	xshopOrderService := &xshop.OrderService{
		Session:  session,
		Shipping: shippingShipping,
	}
	xshopFulfillmentService := &xshop.FulfillmentService{
		Session:  session,
		Shipping: shippingShipping,
	}
	xshopCustomerService := &xshop.CustomerService{
		Session:  session,
		Shopping: shoppingShopping,
	}
	xshopCustomerAddressService := &xshop.CustomerAddressService{
		Session:  session,
		Shopping: shoppingShopping,
	}
	xshopCustomerGroupService := &xshop.CustomerGroupService{
		Session:  session,
		Shopping: shoppingShopping,
	}
	xshopCustomerGroupRelationshipService := &xshop.CustomerGroupRelationshipService{
		Session:  session,
		Shopping: shoppingShopping,
	}
	xshopInventoryService := &xshop.InventoryService{
		Session:  session,
		Shopping: shoppingShopping,
	}
	xshopVariantService := &xshop.VariantService{
		Session:  session,
		Shopping: shoppingShopping,
	}
	xshopProductService := &xshop.ProductService{
		Session:  session,
		Shopping: shoppingShopping,
	}
	xshopProductCollectionService := &xshop.ProductCollectionService{
		Session:  session,
		Shopping: shoppingShopping,
	}
	xshopProductCollectionRelationshipService := &xshop.ProductCollectionRelationshipService{
		Session:  session,
		Shopping: shoppingShopping,
	}
	xshopShipnowService := &xshop.ShipnowService{
		Session:  session,
		Shipping: shippingShipping,
	}
	xshopServers, cleanup5 := xshop.NewServers(store, shippingShipping, xshopMiscService, xshopWebhookService, xshopHistoryService, xshopShippingService, xshopOrderService, xshopFulfillmentService, xshopCustomerService, xshopCustomerAddressService, xshopCustomerGroupService, xshopCustomerGroupRelationshipService, xshopInventoryService, xshopVariantService, xshopProductService, xshopProductCollectionService, xshopProductCollectionRelationshipService, xshopShipnowService)
	partnercarrierMiscService := &partnercarrier.MiscService{
		Session:  session,
		Shipping: shippingShipping,
	}
	shipmentConnectionService := &partnercarrier.ShipmentConnectionService{
		Session:         session,
		ConnectionQuery: connectioningQueryBus,
		ConnectionAggr:  connectioningCommandBus,
	}
	shippingwebhookAggregate := shippingwebhook.NewAggregate(logDB)
	webhookWebhook := webhook2.New(mainDB, shippingQueryBus, shippingCommandBus, connectioningQueryBus, shippingwebhookAggregate)
	partnercarrierShipmentService := &partnercarrier.ShipmentService{
		Session:                session,
		ConnectionQuery:        connectioningQueryBus,
		ShippingAggr:           shippingCommandBus,
		ShippingQuery:          shippingQueryBus,
		ShipmentWebhookLogAggr: shippingwebhookAggregate,
		DirectWebhook:          webhookWebhook,
	}
	partnercarrierServers, cleanup6 := partnercarrier.NewServers(store, partnercarrierMiscService, shipmentConnectionService, partnercarrierShipmentService)
	importService := partnerimport.New(session, mainDB)
	partnerimportServers := partnerimport.NewServers(importService)
	shipnowService2 := xshop.ShipnowService{
		Session:  session,
		Shipping: shippingShipping,
	}
	vnPostService := &vnp.VNPostService{
		Session:        session,
		ShipnowService: shipnowService2,
	}
	vnPostWebhookService := &vnp.VNPostWebhookService{
		Session:      session,
		WebhookInner: service2,
	}
	vnpServers := vnp.NewServers(vnPostService, vnPostWebhookService)
	vhtUserService := &vht.VHTUserService{
		Session:       session,
		IdentityAggr:  commandBus,
		IdentityQuery: queryBus,
	}
	vhtServers := vht.NewServers(vhtUserService)
	extHandlers, err := server_max.BuildExtHandlers(partnerServers, xshopServers, partnercarrierServers, partnerimportServers, vnpServers, vhtServers)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Output{}, nil, err
	}
	ghnimportImport := ghnimport.Import{
		MoneyTxAggr: moneytxCommandBus,
	}
	ghtkimportImport := ghtkimport.Import{
		MoneyTxAggr:   moneytxCommandBus,
		ShippingAggr:  shippingCommandBus,
		ShippingQuery: shippingQueryBus,
	}
	vtpostimportImport := vtpostimport.Import{
		MoneyTxAggr: moneytxCommandBus,
	}
	vtPostImporter := &vtpostimport.VTPostImporter{}
	ghtkImporter := &ghtkimport.GHTKImporter{
		ShippingAggr:  shippingCommandBus,
		ShippingQuery: shippingQueryBus,
	}
	ghnImporter := &ghnimport.GHNImporter{}
	jtImporter := &jtexpressimport.JTImporter{}
	dhlImporter := &dhlimport.DHLImporter{
		ShippingQuery: shippingQueryBus,
	}
	njvImporter := &njvimport.NJVImporter{
		ShippingAggr:  shippingCommandBus,
		ShippingQuery: shippingQueryBus,
	}
	handlersImportService := handlers.ImportService{
		MoneyTxAggr:       moneytxCommandBus,
		ConnectionQuery:   connectioningQueryBus,
		VTPostImporter:    vtPostImporter,
		GHTKImporter:      ghtkImporter,
		GHNImporter:       ghnImporter,
		JTExpressImporter: jtImporter,
		DHLImporter:       dhlImporter,
		NJVImporter:       njvImporter,
	}
	hotFixMoneyTxService := hotfix.New(mainDB)
	importServer := server_admin.BuildImportHandlers(ghnimportImport, ghtkimportImport, vtpostimportImport, handlersImportService, hotFixMoneyTxService, session)
	dirConfigs := cfg.UploadDirs
	uploader, err := _uploader.NewUploader(ctx, dirConfigs, bucket)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Output{}, nil, err
	}
	exportAttemptStore := sqlstore.BuildExportAttemptStore(mainDB)
	exportAttemptStoreInterface := sqlstore.BindExportAttemptStore(exportAttemptStore)
	imcsvImport, cleanup7 := imcsv.New(authorizer, locationQueryBus, store, uploader, mainDB, orderStoreInterface, exportAttemptStoreInterface)
	import2, cleanup8 := imcsv2.New(store, uploader, mainDB, exportAttemptStoreInterface, categoryStoreInterface, shopStoreInterface)
	import3, cleanup9 := imcsv3.New(store, uploader, exportAttemptStoreInterface)
	importHandler := server_shop.BuildImportHandler(imcsvImport, import2, import3, session)
	eventStreamHandler := server_shop.BuildEventStreamHandler(eventStream, session)
	downloadHandler := server_shop.BuildDownloadHandler()
	clientClient := client.New(clientConfig)
	vtpayAggregate := vtpay2.NewAggregate(mainDB, orderingQueryBus, orderingCommandBus, paymentCommandBus, clientClient)
	vtpayCommandBus := vtpay2.AggregateMessageBus(vtpayAggregate)
	aggregate31 := aggregate25.NewAggregate(orderingQueryBus, orderingCommandBus, vtpayCommandBus, clientClient)
	gatewayCommandBus := aggregate25.AggregateMessageBus(aggregate31)
	aggregate32 := aggregate26.New(logDB)
	serverServer := server.New(gatewayCommandBus, aggregate32)
	vtPayHandler := server_vtpay.BuildVTPayHandler(serverServer)
	reportQuery := query26.NewReportQuery(orderingQueryBus, queryBus, receiptingQueryBus, catalogQueryBus, stocktakingQueryBus)
	reportingQueryBus := query26.ReportQueryMessageBus(reportQuery)
	reportService := reportserver.ReportService{
		ReportQuery:   reportingQueryBus,
		IdentityQuery: queryBus,
	}
	reportServer := reportserver.BuildReportServer(reportService, session)
	mainServer := BuildMainServer(service, intHandlers, extHandlers, sharedConfig, importServer, importHandler, eventStreamHandler, downloadHandler, vtPayHandler, reportServer)
	webServer := BuildWebServer(cfg, webserverQueryBus, catalogQueryBus, subscriptionQueryBus, store, locationQueryBus)
	shipment_allConfig := cfg.Shipment
	webhookConfig := shipment_allConfig.GHNWebhook
	v1Webhook := v1.New(mainDB, shipmentManager, queryBus, shippingCommandBus, shippingwebhookAggregate, orderStoreInterface)
	v2Webhook := v2.New(mainDB, shipmentManager, queryBus, shippingCommandBus, shippingwebhookAggregate, orderStoreInterface)
	webhook7 := webhook3.New(mainDB, shipmentManager, queryBus, shippingCommandBus, shippingwebhookAggregate, orderStoreInterface)
	shipmentWebhookServer := _all2.NewShipmentWebhookServer(webhookConfig, v1Webhook, v2Webhook, webhook7)
	_ghtkWebhookConfig := shipment_allConfig.GHTKWebhook
	webhook8 := webhook4.New(mainDB, shipmentManager, queryBus, shippingCommandBus, shippingwebhookAggregate, orderStoreInterface)
	ghtkWebhookServer := _ghtk.NewGHTKWebhookServer(_ghtkWebhookConfig, shipmentManager, queryBus, shippingCommandBus, webhook8)
	_vtpostWebhookConfig := shipment_allConfig.VTPostWebhook
	webhook9 := webhook5.New(mainDB, shipmentManager, queryBus, shippingCommandBus, shippingwebhookAggregate, orderStoreInterface)
	vtPostWebhookServer := _vtpost.NewVTPostWebhookServer(_vtpostWebhookConfig, shipmentManager, queryBus, shippingCommandBus, webhook9)
	serverWebhookConfig := cfg.AhamoveWebhook
	config2 := cfg.Ahamove
	client3 := client2.New(config2)
	urlConfig := shipnow_all.AhamoveConfig(cfg)
	ahamoveCarrier := ahamove.New(client3, urlConfig, locationQueryBus, queryBus, accountshipnowQueryBus)
	ahamoveVerificationFileServer := server2.NewAhamoveVerificationFileServer(ctx, accountshipnowQueryBus)
	webhook10 := webhook6.New(mainDB, ahamoveCarrier, shipnowQueryBus, shipnowCommandBus, orderingCommandBus, orderingQueryBus, shippingwebhookAggregate)
	ahamoveWebhookServer := server2.NewAhamoveWebhookServer(serverWebhookConfig, shipmentManager, ahamoveCarrier, queryBus, shipnowQueryBus, shipnowCommandBus, orderingCommandBus, orderingQueryBus, ahamoveVerificationFileServer, webhook10)
	v4 := BuildServers(mainServer, webServer, shipmentWebhookServer, ghtkWebhookServer, vtPostWebhookServer, ahamoveWebhookServer)
	processManager := pm.New(busBus, queryBus, commandBus, invitationQueryBus, addressQueryBus, addressCommandBus, accountUserStoreInterface)
	pmProcessManager := pm2.New(busBus, catalogQueryBus, orderingQueryBus, inventoryCommandBus)
	processManager2 := pm3.New(busBus, invitationQueryBus, invitationCommandBus)
	processManager3 := pm4.New(busBus, catalogQueryBus, catalogCommandBus)
	processManager4 := pm5.New(busBus, ledgeringCommandBus)
	processManager5 := pm6.New(busBus, moneytxQueryBus, moneytxCommandBus, shippingQueryBus)
	processManager6 := pm7.New(busBus, orderingCommandBus, affiliateCommandBus, receiptingQueryBus, inventoryCommandBus, orderingQueryBus, customeringQueryBus, shipnowQueryBus)
	processManager7 := pm8.New(busBus, purchaseorderQueryBus, receiptingQueryBus)
	processManager8 := pm9.New(busBus, purchaserefundCommandBus, purchaserefundQueryBus, receiptingQueryBus)
	processManager9 := pm10.New(busBus, receiptingQueryBus, receiptingCommandBus, ledgeringQueryBus, ledgeringCommandBus, queryBus, moneyTxStoreInterface, orderStoreInterface)
	processManager10 := pm11.New(busBus, refundQueryBus, receiptingQueryBus, refundCommandBus)
	processManager11 := pm12.New(busBus, shipnowQueryBus, shipnowCommandBus, orderingCommandBus, shipnowManager, queryBus, addressQueryBus, accountshipnowQueryBus, accountshipnowCommandBus, connectioningCommandBus)
	processManager12 := pm13.New(busBus, shippingQueryBus, shippingCommandBus, store, connectioningQueryBus, shopStoreInterface, creditQueryBus)
	processManager13 := pm14.New(busBus, affiliateCommandBus)
	traderAgg := aggregate27.NewTraderAgg(mainDB)
	traderingCommandBus := aggregate27.TraderAggMessageBus(traderAgg)
	processManager14 := pm15.New(busBus, traderingCommandBus)
	processManager15 := pm16.New(busBus, connectioningCommandBus, connectioningQueryBus)
	processManager16 := pm17.New(store, busBus, pricelistQueryBus, shopshipmentpricelistQueryBus)
	processManager17 := pm18.New(busBus, customeringQueryBus, customeringCommandBus, shippingQueryBus)
	processManager18 := pm19.New(busBus, etelecomCommandBus, etelecomQueryBus)
	output := Output{
		Servers:           v4,
		Health:            service,
		_identityPM:       processManager,
		_inventoryPM:      pmProcessManager,
		_invitationPM:     processManager2,
		_catalogPM:        processManager3,
		_ledgerPM:         processManager4,
		_moneytxPM:        processManager5,
		_orderPM:          processManager6,
		_purchaseOrderPM:  processManager7,
		_purchaseRefundPM: processManager8,
		_receiptPM:        processManager9,
		_refundPM:         processManager10,
		_shipnowPM:        processManager11,
		_shippingPM:       processManager12,
		_affiliatePM:      processManager13,
		_traderPM:         processManager14,
		_connectionPM:     processManager15,
		_pricelistPM:      processManager16,
		_customerPM:       processManager17,
		_etelecomPM:       processManager18,
	}
	return output, func() {
		cleanup9()
		cleanup8()
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
