// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package build

import (
	"context"
	"o.o/backend/cmd/etop-server/config"
	"o.o/backend/cogs/base/producer"
	"o.o/backend/cogs/config/_server"
	"o.o/backend/cogs/database/_all"
	"o.o/backend/cogs/payment/_all"
	"o.o/backend/cogs/server/admin"
	"o.o/backend/cogs/server/main/_max"
	"o.o/backend/cogs/server/shop"
	"o.o/backend/cogs/server/vtpay"
	"o.o/backend/cogs/shipment/_all"
	"o.o/backend/cogs/shipment/ghn/_all"
	"o.o/backend/cogs/shipment/ghtk"
	"o.o/backend/cogs/shipment/vtpost"
	"o.o/backend/cogs/shipnow/_all"
	"o.o/backend/cogs/sms/_all"
	"o.o/backend/cogs/storage/_all"
	"o.o/backend/cogs/uploader"
	aggregate21 "o.o/backend/com/etc/logging/payment/aggregate"
	"o.o/backend/com/etc/logging/shippingwebhook"
	"o.o/backend/com/etc/logging/smslog/aggregate"
	manager2 "o.o/backend/com/external/payment/manager"
	aggregate19 "o.o/backend/com/external/payment/payment/aggregate"
	vtpay2 "o.o/backend/com/external/payment/vtpay"
	aggregate20 "o.o/backend/com/external/payment/vtpay/gateway/aggregate"
	"o.o/backend/com/external/payment/vtpay/gateway/server"
	"o.o/backend/com/main/address"
	aggregate3 "o.o/backend/com/main/authorization/aggregate"
	aggregate4 "o.o/backend/com/main/catalog/aggregate"
	pm4 "o.o/backend/com/main/catalog/pm"
	query3 "o.o/backend/com/main/catalog/query"
	aggregate7 "o.o/backend/com/main/connectioning/aggregate"
	"o.o/backend/com/main/connectioning/manager"
	pm16 "o.o/backend/com/main/connectioning/pm"
	query13 "o.o/backend/com/main/connectioning/query"
	"o.o/backend/com/main/credit"
	"o.o/backend/com/main/identity"
	"o.o/backend/com/main/identity/pm"
	aggregate5 "o.o/backend/com/main/inventory/aggregate"
	pm2 "o.o/backend/com/main/inventory/pm"
	query8 "o.o/backend/com/main/inventory/query"
	aggregate2 "o.o/backend/com/main/invitation/aggregate"
	pm3 "o.o/backend/com/main/invitation/pm"
	"o.o/backend/com/main/invitation/query"
	aggregate11 "o.o/backend/com/main/ledgering/aggregate"
	pm5 "o.o/backend/com/main/ledgering/pm"
	query17 "o.o/backend/com/main/ledgering/query"
	"o.o/backend/com/main/location"
	aggregate18 "o.o/backend/com/main/moneytx/aggregate"
	pm6 "o.o/backend/com/main/moneytx/pm"
	query15 "o.o/backend/com/main/moneytx/query"
	"o.o/backend/com/main/ordering"
	pm7 "o.o/backend/com/main/ordering/pm"
	aggregate12 "o.o/backend/com/main/purchaseorder/aggregate"
	pm8 "o.o/backend/com/main/purchaseorder/pm"
	query10 "o.o/backend/com/main/purchaseorder/query"
	aggregate16 "o.o/backend/com/main/purchaserefund/aggregate"
	pm9 "o.o/backend/com/main/purchaserefund/pm"
	query12 "o.o/backend/com/main/purchaserefund/query"
	aggregate8 "o.o/backend/com/main/receipting/aggregate"
	pm10 "o.o/backend/com/main/receipting/pm"
	query9 "o.o/backend/com/main/receipting/query"
	aggregate15 "o.o/backend/com/main/refund/aggregate"
	pm11 "o.o/backend/com/main/refund/pm"
	query11 "o.o/backend/com/main/refund/query"
	"o.o/backend/com/main/shipmentpricing/pricelist"
	pm17 "o.o/backend/com/main/shipmentpricing/pricelist/pm"
	"o.o/backend/com/main/shipmentpricing/pricelistpromotion"
	"o.o/backend/com/main/shipmentpricing/shipmentprice"
	"o.o/backend/com/main/shipmentpricing/shipmentservice"
	"o.o/backend/com/main/shipmentpricing/shopshipmentpricelist"
	"o.o/backend/com/main/shipnow"
	carrier2 "o.o/backend/com/main/shipnow/carrier"
	pm12 "o.o/backend/com/main/shipnow/pm"
	"o.o/backend/com/main/shipnowcarrier"
	aggregate14 "o.o/backend/com/main/shipping/aggregate"
	"o.o/backend/com/main/shipping/carrier"
	pm13 "o.o/backend/com/main/shipping/pm"
	query14 "o.o/backend/com/main/shipping/query"
	aggregate13 "o.o/backend/com/main/stocktaking/aggregate"
	query7 "o.o/backend/com/main/stocktaking/query"
	affiliate2 "o.o/backend/com/services/affiliate"
	pm14 "o.o/backend/com/services/affiliate/pm"
	aggregate10 "o.o/backend/com/shopping/carrying/aggregate"
	query4 "o.o/backend/com/shopping/carrying/query"
	aggregate6 "o.o/backend/com/shopping/customering/aggregate"
	query2 "o.o/backend/com/shopping/customering/query"
	aggregate9 "o.o/backend/com/shopping/suppliering/aggregate"
	query5 "o.o/backend/com/shopping/suppliering/query"
	aggregate22 "o.o/backend/com/shopping/tradering/aggregate"
	pm15 "o.o/backend/com/shopping/tradering/pm"
	query6 "o.o/backend/com/shopping/tradering/query"
	"o.o/backend/com/subscripting/subscription"
	"o.o/backend/com/subscripting/subscriptionbill"
	"o.o/backend/com/subscripting/subscriptionplan"
	"o.o/backend/com/subscripting/subscriptionproduct"
	query16 "o.o/backend/com/summary/query"
	aggregate17 "o.o/backend/com/web/webserver/aggregate"
	query18 "o.o/backend/com/web/webserver/query"
	"o.o/backend/pkg/common/apifw/captcha"
	"o.o/backend/pkg/common/apifw/health"
	"o.o/backend/pkg/common/authorization/auth"
	"o.o/backend/pkg/common/bus"
	"o.o/backend/pkg/common/redis"
	"o.o/backend/pkg/etop/api"
	"o.o/backend/pkg/etop/api/admin"
	"o.o/backend/pkg/etop/api/admin/_all"
	"o.o/backend/pkg/etop/api/affiliate"
	"o.o/backend/pkg/etop/api/export"
	"o.o/backend/pkg/etop/api/integration"
	"o.o/backend/pkg/etop/api/sadmin"
	"o.o/backend/pkg/etop/api/shop"
	"o.o/backend/pkg/etop/api/shop/_all"
	"o.o/backend/pkg/etop/api/shop/account"
	"o.o/backend/pkg/etop/api/shop/authorize"
	"o.o/backend/pkg/etop/api/shop/brand"
	carrier3 "o.o/backend/pkg/etop/api/shop/carrier"
	"o.o/backend/pkg/etop/api/shop/category"
	"o.o/backend/pkg/etop/api/shop/collection"
	"o.o/backend/pkg/etop/api/shop/connection"
	"o.o/backend/pkg/etop/api/shop/customer"
	"o.o/backend/pkg/etop/api/shop/customergroup"
	export2 "o.o/backend/pkg/etop/api/shop/export"
	"o.o/backend/pkg/etop/api/shop/fulfillment"
	"o.o/backend/pkg/etop/api/shop/history"
	"o.o/backend/pkg/etop/api/shop/inventory"
	"o.o/backend/pkg/etop/api/shop/ledger"
	"o.o/backend/pkg/etop/api/shop/money_transaction"
	"o.o/backend/pkg/etop/api/shop/notification"
	"o.o/backend/pkg/etop/api/shop/order"
	"o.o/backend/pkg/etop/api/shop/payment"
	"o.o/backend/pkg/etop/api/shop/product"
	"o.o/backend/pkg/etop/api/shop/product_source"
	"o.o/backend/pkg/etop/api/shop/purchase_order"
	"o.o/backend/pkg/etop/api/shop/purchase_refund"
	"o.o/backend/pkg/etop/api/shop/receipt"
	"o.o/backend/pkg/etop/api/shop/refund"
	"o.o/backend/pkg/etop/api/shop/shipment"
	shipnow2 "o.o/backend/pkg/etop/api/shop/shipnow"
	"o.o/backend/pkg/etop/api/shop/stocktake"
	subscription2 "o.o/backend/pkg/etop/api/shop/subscription"
	summary2 "o.o/backend/pkg/etop/api/shop/summary"
	"o.o/backend/pkg/etop/api/shop/supplier"
	"o.o/backend/pkg/etop/api/shop/trading"
	"o.o/backend/pkg/etop/api/shop/ws"
	"o.o/backend/pkg/etop/apix/partner"
	"o.o/backend/pkg/etop/apix/partnercarrier"
	"o.o/backend/pkg/etop/apix/partnerimport"
	"o.o/backend/pkg/etop/apix/shipping"
	"o.o/backend/pkg/etop/apix/shop"
	"o.o/backend/pkg/etop/apix/shopping"
	"o.o/backend/pkg/etop/apix/webhook"
	"o.o/backend/pkg/etop/authorize/middleware"
	"o.o/backend/pkg/etop/authorize/tokens"
	"o.o/backend/pkg/etop/eventstream"
	"o.o/backend/pkg/etop/logic/hotfix"
	"o.o/backend/pkg/etop/logic/money-transaction/ghnimport"
	"o.o/backend/pkg/etop/logic/money-transaction/ghtkimport"
	"o.o/backend/pkg/etop/logic/money-transaction/handlers"
	"o.o/backend/pkg/etop/logic/money-transaction/jtexpressimport"
	"o.o/backend/pkg/etop/logic/money-transaction/vtpostimport"
	"o.o/backend/pkg/etop/logic/orders"
	"o.o/backend/pkg/etop/logic/orders/imcsv"
	imcsv2 "o.o/backend/pkg/etop/logic/products/imcsv"
	"o.o/backend/pkg/etop/logic/shipping_provider"
	"o.o/backend/pkg/etop/logic/summary"
	"o.o/backend/pkg/etop/sqlstore"
	"o.o/backend/pkg/integration/email"
	"o.o/backend/pkg/integration/payment/vtpay"
	client2 "o.o/backend/pkg/integration/payment/vtpay/client"
	"o.o/backend/pkg/integration/shipnow/ahamove"
	"o.o/backend/pkg/integration/shipnow/ahamove/client"
	server2 "o.o/backend/pkg/integration/shipnow/ahamove/server"
	webhook5 "o.o/backend/pkg/integration/shipnow/ahamove/webhook"
	webhook2 "o.o/backend/pkg/integration/shipping/direct/webhook"
	"o.o/backend/pkg/integration/shipping/ghn"
	"o.o/backend/pkg/integration/shipping/ghn/webhook/v1"
	"o.o/backend/pkg/integration/shipping/ghn/webhook/v2"
	"o.o/backend/pkg/integration/shipping/ghtk"
	webhook3 "o.o/backend/pkg/integration/shipping/ghtk/webhook"
	"o.o/backend/pkg/integration/shipping/vtpost"
	webhook4 "o.o/backend/pkg/integration/shipping/vtpost/webhook"
	"o.o/backend/pkg/integration/sms"
	api2 "o.o/backend/pkg/services/affiliate/api"
)

// Injectors from wire.go:

func Build(ctx context.Context, cfg config.Config, partnerAuthURL partner.AuthURL) (Output, func(), error) {
	redisRedis := cfg.Redis
	store := redis.Connect(redisRedis)
	service := health.New(store)
	miscService := &api.MiscService{}
	sharedConfig := cfg.SharedConfig
	session := config_server.NewSession(sharedConfig, store)
	database_allConfig := cfg.Databases
	databases, err := database_all.BuildDatabases(database_allConfig)
	if err != nil {
		return Output{}, nil, err
	}
	mainDB := databases.Main
	locationQuery := location.New(mainDB)
	queryBus := location.QueryMessageBus(locationQuery)
	queryService := shipnow.NewQueryService(mainDB)
	shipnowQueryBus := shipnow.QueryServiceMessageBus(queryService)
	clientConfig := cfg.Ahamove
	clientClient := client.New(clientConfig)
	identityQueryService := identity.NewQueryService(mainDB)
	identityQueryBus := identity.QueryServiceMessageBus(identityQueryService)
	ahamoveCarrier := ahamove.New(clientClient, queryBus, identityQueryBus)
	urlConfig := shipnow_all.AhamoveConfig(cfg)
	carrierAccount := ahamove.NewCarrierAccount(clientClient, urlConfig, identityQueryBus)
	v := shipnow_all.AllSupportedShipnowCarriers(ahamoveCarrier, carrierAccount)
	shipnowManager := shipnowcarrier.NewManager(mainDB, queryBus, shipnowQueryBus, v)
	identityAggregate := identity.NewAggregate(mainDB, shipnowManager)
	commandBus := identity.AggregateMessageBus(identityAggregate)
	flagEnableNewLinkInvitation := cfg.FlagEnableNewLinkInvitation
	invitationQuery := query.NewInvitationQuery(mainDB, flagEnableNewLinkInvitation)
	invitationQueryBus := query.InvitationQueryMessageBus(invitationQuery)
	busBus := bus.New()
	generator := auth.NewGenerator(store)
	tokenStore := tokens.NewTokenStore(store)
	smsConfig := cfg.SMS
	whiteLabel := cfg.WhiteLabel
	v3 := sms_all.SupportedSMSDrivers(whiteLabel, smsConfig)
	logDB := databases.Log
	smsLogAggregate := aggregate.NewSmsLogAggregate(busBus, logDB)
	smslogCommandBus := aggregate.SmsLogAggregateMessageBus(smsLogAggregate)
	smsClient := sms.New(smsConfig, v3, smslogCommandBus)
	smtpConfig := cfg.SMTP
	emailClient := email.New(smtpConfig)
	userService := &api.UserService{
		Session:         session,
		IdentityAggr:    commandBus,
		IdentityQuery:   identityQueryBus,
		InvitationQuery: invitationQueryBus,
		EventBus:        busBus,
		AuthStore:       generator,
		TokenStore:      tokenStore,
		RedisStore:      store,
		SMSClient:       smsClient,
		EmailClient:     emailClient,
	}
	accountService := &api.AccountService{
		Session: session,
	}
	locationService := &api.LocationService{
		Session:       session,
		LocationQuery: queryBus,
	}
	bankService := &api.BankService{
		Session: session,
	}
	addressAggregate := address.NewAggregateAddress(busBus, mainDB, queryBus)
	addressCommandBus := address.AddressAggregateMessageBus(addressAggregate)
	addressQueryService := address.NewQueryAddress(mainDB, busBus)
	addressQueryBus := address.QueryServiceMessageBus(addressQueryService)
	addressService := &api.AddressService{
		Session:     session,
		AddressAggr: addressCommandBus,
		AddressQS:   addressQueryBus,
	}
	invitationConfig := cfg.Invitation
	customerQuery := query2.NewCustomerQuery(mainDB)
	customeringQueryBus := query2.CustomerQueryMessageBus(customerQuery)
	secretToken := cfg.Secret
	invitationAggregate := aggregate2.NewInvitationAggregate(mainDB, invitationConfig, customeringQueryBus, identityQueryBus, busBus, smsClient, emailClient, secretToken, flagEnableNewLinkInvitation)
	invitationCommandBus := aggregate2.InvitationAggregateMessageBus(invitationAggregate)
	authorizationAggregate := aggregate3.NewAuthorizationAggregate()
	authorizationCommandBus := aggregate3.AuthorizationAggregateMessageBus(authorizationAggregate)
	accountRelationshipService := &api.AccountRelationshipService{
		Session:           session,
		InvitationAggr:    invitationCommandBus,
		InvitationQuery:   invitationQueryBus,
		AuthorizationAggr: authorizationCommandBus,
	}
	userRelationshipService := &api.UserRelationshipService{
		Session:                session,
		InvitationAggr:         invitationCommandBus,
		InvitationQuery:        invitationQueryBus,
		AuthorizationAggregate: authorizationCommandBus,
	}
	ecomService := &api.EcomService{
		Session: session,
	}
	emailConfig := cfg.Email
	servers, cleanup := api.NewServers(miscService, userService, accountService, locationService, bankService, addressService, accountRelationshipService, userRelationshipService, ecomService, store, emailConfig, smsConfig)
	shopMiscService := &shop.MiscService{
		Session: session,
	}
	queryQueryService := query3.New(mainDB)
	catalogQueryBus := query3.QueryServiceMessageBus(queryQueryService)
	aggregateAggregate := aggregate4.New(busBus, mainDB)
	catalogCommandBus := aggregate4.AggregateMessageBus(aggregateAggregate)
	brandService := &brand.BrandService{
		Session:      session,
		CatalogQuery: catalogQueryBus,
		CatalogAggr:  catalogCommandBus,
	}
	carrierQuery := query4.NewCarrierQuery(mainDB)
	carryingQueryBus := query4.CarrierQueryMessageBus(carrierQuery)
	supplierQuery := query5.NewSupplierQuery(mainDB)
	supplieringQueryBus := query5.SupplierQueryMessageBus(supplierQuery)
	traderQuery := query6.NewTraderQuery(mainDB, customeringQueryBus, carryingQueryBus, supplieringQueryBus)
	traderingQueryBus := query6.TraderQueryMessageBus(traderQuery)
	stocktakeQuery := query7.NewQueryStocktake(mainDB)
	stocktakingQueryBus := query7.StocktakeQueryMessageBus(stocktakeQuery)
	inventoryQueryService := query8.NewQueryInventory(stocktakingQueryBus, busBus, mainDB)
	inventoryQueryBus := query8.InventoryQueryServiceMessageBus(inventoryQueryService)
	receiptQuery := query9.NewReceiptQuery(mainDB)
	receiptingQueryBus := query9.ReceiptQueryMessageBus(receiptQuery)
	purchaseOrderQuery := query10.NewPurchaseOrderQuery(mainDB, busBus, supplieringQueryBus, inventoryQueryBus, receiptingQueryBus)
	purchaseorderQueryBus := query10.PurchaseOrderQueryMessageBus(purchaseOrderQuery)
	refundQueryService := query11.NewQueryRefund(busBus, mainDB)
	refundQueryBus := query11.RefundQueryServiceMessageBus(refundQueryService)
	purchaseRefundQueryService := query12.NewQueryPurchasePurchaseRefund(busBus, mainDB)
	purchaserefundQueryBus := query12.PurchaseRefundQueryServiceMessageBus(purchaseRefundQueryService)
	inventoryAggregate := aggregate5.NewAggregateInventory(busBus, mainDB, traderingQueryBus, purchaseorderQueryBus, stocktakingQueryBus, refundQueryBus, purchaserefundQueryBus, catalogQueryBus)
	inventoryCommandBus := aggregate5.InventoryAggregateMessageBus(inventoryAggregate)
	inventoryService := &inventory.InventoryService{
		Session:        session,
		TraderQuery:    traderingQueryBus,
		InventoryAggr:  inventoryCommandBus,
		InventoryQuery: inventoryQueryBus,
	}
	accountAccountService := &account.AccountService{
		Session:       session,
		IdentityAggr:  commandBus,
		IdentityQuery: identityQueryBus,
		AddressQuery:  addressQueryBus,
	}
	collectionService := &collection.CollectionService{
		Session:      session,
		CatalogQuery: catalogQueryBus,
		CatalogAggr:  catalogCommandBus,
	}
	customerAggregate := aggregate6.NewCustomerAggregate(busBus, mainDB)
	customeringCommandBus := aggregate6.CustomerAggregateMessageBus(customerAggregate)
	aggregateAddressAggregate := aggregate6.NewAddressAggregate(mainDB)
	addressingCommandBus := aggregate6.AddressAggregateMessageBus(aggregateAddressAggregate)
	addressQuery := query2.NewAddressQuery(mainDB)
	addressingQueryBus := query2.AddressQueryMessageBus(addressQuery)
	orderingQueryService := ordering.NewQueryService(mainDB)
	orderingQueryBus := ordering.QueryServiceMessageBus(orderingQueryService)
	customerService := &customer.CustomerService{
		Session:       session,
		LocationQuery: queryBus,
		CustomerQuery: customeringQueryBus,
		CustomerAggr:  customeringCommandBus,
		AddressAggr:   addressingCommandBus,
		AddressQuery:  addressingQueryBus,
		OrderQuery:    orderingQueryBus,
		ReceiptQuery:  receiptingQueryBus,
	}
	customerGroupService := &customergroup.CustomerGroupService{
		Session:       session,
		CustomerAggr:  customeringCommandBus,
		CustomerQuery: customeringQueryBus,
	}
	productService := &product.ProductService{
		Session:        session,
		CatalogQuery:   catalogQueryBus,
		CatalogAggr:    catalogCommandBus,
		InventoryQuery: inventoryQueryBus,
	}
	categoryService := &category.CategoryService{
		Session:      session,
		CatalogQuery: catalogQueryBus,
		CatalogAggr:  catalogCommandBus,
	}
	productSourceService := &product_source.ProductSourceService{
		Session: session,
	}
	orderingAggregate := ordering.NewAggregate(busBus, mainDB)
	orderingCommandBus := ordering.AggregateMessageBus(orderingAggregate)
	notifierDB := databases.Notifier
	sqlstoreStore := sqlstore.New(mainDB, notifierDB, queryBus, busBus)
	shipment_allConfig := cfg.Shipment
	v4 := shipment_all.SupportedCarrierDrivers(ctx, sqlstoreStore, shipment_allConfig, queryBus)
	carrierManager := shipping_provider.NewCtrl(busBus, queryBus, v4)
	flagFaboOrderAutoConfirmPaymentStatus := cfg.FlagFaboOrderAutoConfirmPaymentStatus
	mapShipmentServices := shipment_all.SupportedShipmentServices()
	connectionQuery := query13.NewConnectionQuery(mainDB, mapShipmentServices)
	connectioningQueryBus := query13.ConnectionQueryMessageBus(connectionQuery)
	connectionAggregate := aggregate7.NewConnectionAggregate(mainDB, busBus)
	connectioningCommandBus := aggregate7.ConnectionAggregateMessageBus(connectionAggregate)
	shipmentserviceQueryService := shipmentservice.NewQueryService(mainDB, store)
	shipmentserviceQueryBus := shipmentservice.QueryServiceMessageBus(shipmentserviceQueryService)
	pricelistQueryService := pricelist.NewQueryService(mainDB, store)
	pricelistQueryBus := pricelist.QueryServiceMessageBus(pricelistQueryService)
	shopshipmentpricelistQueryService := shopshipmentpricelist.NewQueryService(mainDB, store)
	shopshipmentpricelistQueryBus := shopshipmentpricelist.QueryServiceMessageBus(shopshipmentpricelistQueryService)
	shipmentpriceQueryService := shipmentprice.NewQueryService(mainDB, store, queryBus, pricelistQueryBus, shopshipmentpricelistQueryBus)
	shipmentpriceQueryBus := shipmentprice.QueryServiceMessageBus(shipmentpriceQueryService)
	pricelistpromotionQueryService := pricelistpromotion.NewQueryService(mainDB, store, queryBus, identityQueryBus, shopshipmentpricelistQueryBus, pricelistQueryBus)
	pricelistpromotionQueryBus := pricelistpromotion.QueryServiceMessageBus(pricelistpromotionQueryService)
	typesConfig := shipment_all.SupportedShippingCarrierConfig(shipment_allConfig)
	driver := shipment_all.SupportedCarrierDriver()
	connectionManager := manager.NewConnectionManager(store, connectioningQueryBus)
	shipmentManager, err := carrier.NewShipmentManager(busBus, queryBus, connectioningQueryBus, connectioningCommandBus, shipmentserviceQueryBus, shipmentpriceQueryBus, pricelistpromotionQueryBus, typesConfig, driver, connectionManager)
	if err != nil {
		cleanup()
		return Output{}, nil, err
	}
	orderLogic := orderS.New(carrierManager, catalogQueryBus, orderingCommandBus, customeringCommandBus, customeringQueryBus, addressingCommandBus, addressingQueryBus, queryBus, busBus, flagFaboOrderAutoConfirmPaymentStatus, shipmentManager)
	orderService := &order.OrderService{
		Session:       session,
		OrderAggr:     orderingCommandBus,
		CustomerQuery: customeringQueryBus,
		OrderQuery:    orderingQueryBus,
		ReceiptQuery:  receiptingQueryBus,
		OrderLogic:    orderLogic,
	}
	queryService2 := query14.NewQueryService(mainDB)
	shippingQueryBus := query14.QueryServiceMessageBus(queryService2)
	fulfillmentService := &fulfillment.FulfillmentService{
		Session:         session,
		ShipmentManager: shipmentManager,
		ShippingQuery:   shippingQueryBus,
		ShippingCtrl:    carrierManager,
	}
	carrierShipnowManager := carrier2.NewShipnowManager(queryBus, connectioningQueryBus, store, connectionManager, identityQueryBus, shipnowQueryBus)
	shipnowAggregate := shipnow.NewAggregate(busBus, mainDB, queryBus, identityQueryBus, addressQueryBus, connectioningQueryBus, orderingQueryBus, carrierShipnowManager)
	shipnowCommandBus := shipnow.AggregateMessageBus(shipnowAggregate)
	shipnowService := &shipnow2.ShipnowService{
		Session:      session,
		ShipnowAggr:  shipnowCommandBus,
		ShipnowQuery: shipnowQueryBus,
	}
	historyService := &history.HistoryService{
		Session: session,
	}
	moneyTxQuery := query15.NewMoneyTxQuery(mainDB, shippingQueryBus)
	moneytxQueryBus := query15.MoneyTxQueryMessageBus(moneyTxQuery)
	moneyTransactionService := &money_transaction.MoneyTransactionService{
		Session:      session,
		MoneyTxQuery: moneytxQueryBus,
	}
	dashboardQuery := query16.NewDashboardQuery(mainDB, store, queryBus)
	summaryQueryBus := query16.DashboardQueryMessageBus(dashboardQuery)
	summarySummary := summary.New(mainDB)
	summaryService := &summary2.SummaryService{
		Session:      session,
		SummaryQuery: summaryQueryBus,
		SummaryOld:   summarySummary,
	}
	eventStream := eventstream.New(ctx)
	configDirs := cfg.ExportDirs
	driverConfig := cfg.StorageDriver
	bucket, err := storage_all.Build(ctx, driverConfig)
	if err != nil {
		cleanup()
		return Output{}, nil, err
	}
	exportService, cleanup2 := export.New(store, eventStream, configDirs, bucket)
	exportExportService := &export2.ExportService{
		Session:     session,
		ExportInner: exportService,
	}
	notificationService := &notification.NotificationService{
		Session: session,
	}
	authorizeService := &authorize.AuthorizeService{
		Session: session,
	}
	tradingService := &trading.TradingService{
		Session:        session,
		EventBus:       busBus,
		IdentityQuery:  identityQueryBus,
		CatalogQuery:   catalogQueryBus,
		OrderQuery:     orderingQueryBus,
		InventoryQuery: inventoryQueryBus,
		OrderLogic:     orderLogic,
	}
	config2 := cfg.VTPay
	provider := vtpay.New(config2)
	v5 := payment_all.AllSupportedPaymentProviders(provider)
	paymentManager := manager2.NewManager(v5, orderingQueryBus)
	managerCommandBus := manager2.ManagerMesssageBus(paymentManager)
	paymentService := &payment.PaymentService{
		Session:     session,
		PaymentAggr: managerCommandBus,
	}
	ledgerQuery := query17.NewLedgerQuery(mainDB)
	ledgeringQueryBus := query17.LedgerQueryMessageBus(ledgerQuery)
	receiptAggregate := aggregate8.NewReceiptAggregate(mainDB, busBus, traderingQueryBus, ledgeringQueryBus, orderingQueryBus, customeringQueryBus, carryingQueryBus, supplieringQueryBus, purchaseorderQueryBus)
	receiptingCommandBus := aggregate8.ReceiptAggregateMessageBus(receiptAggregate)
	receiptService := &receipt.ReceiptService{
		Session:       session,
		CarrierQuery:  carryingQueryBus,
		CustomerQuery: customeringQueryBus,
		LedgerQuery:   ledgeringQueryBus,
		ReceiptAggr:   receiptingCommandBus,
		ReceiptQuery:  receiptingQueryBus,
		SupplierQuery: supplieringQueryBus,
		TraderQuery:   traderingQueryBus,
	}
	supplierAggregate := aggregate9.NewSupplierAggregate(busBus, mainDB)
	supplieringCommandBus := aggregate9.SupplierAggregateMessageBus(supplierAggregate)
	supplierService := &supplier.SupplierService{
		Session:            session,
		CatalogQuery:       catalogQueryBus,
		PurchaseOrderQuery: purchaseorderQueryBus,
		ReceiptQuery:       receiptingQueryBus,
		SupplierAggr:       supplieringCommandBus,
		SupplierQuery:      supplieringQueryBus,
	}
	carrierAggregate := aggregate10.NewCarrierAggregate(busBus, mainDB)
	carryingCommandBus := aggregate10.CarrierAggregateMessageBus(carrierAggregate)
	carrierService := &carrier3.CarrierService{
		Session:      session,
		CarrierAggr:  carryingCommandBus,
		CarrierQuery: carryingQueryBus,
	}
	ledgerAggregate := aggregate11.NewLedgerAggregate(mainDB, receiptingQueryBus)
	ledgeringCommandBus := aggregate11.LedgerAggregateMessageBus(ledgerAggregate)
	ledgerService := &ledger.LedgerService{
		Session:     session,
		LedgerAggr:  ledgeringCommandBus,
		LedgerQuery: ledgeringQueryBus,
	}
	purchaseOrderAggregate := aggregate12.NewPurchaseOrderAggregate(mainDB, busBus, catalogQueryBus, supplieringQueryBus, inventoryQueryBus)
	purchaseorderCommandBus := aggregate12.PurchaseOrderAggregateMessageBus(purchaseOrderAggregate)
	purchaseOrderService := &purchase_order.PurchaseOrderService{
		Session:            session,
		PurchaseOrderAggr:  purchaseorderCommandBus,
		PurchaseOrderQuery: purchaseorderQueryBus,
	}
	stocktakeAggregate := aggregate13.NewAggregateStocktake(mainDB, busBus, store)
	stocktakingCommandBus := aggregate13.StocktakeAggregateMessageBus(stocktakeAggregate)
	stocktakeService := &stocktake.StocktakeService{
		Session:        session,
		CatalogQuery:   catalogQueryBus,
		StocktakeAggr:  stocktakingCommandBus,
		StocktakeQuery: stocktakingQueryBus,
		InventoryQuery: inventoryQueryBus,
	}
	aggregate23 := aggregate14.NewAggregate(mainDB, busBus, queryBus, orderingQueryBus, shipmentManager, connectioningQueryBus)
	shippingCommandBus := aggregate14.AggregateMessageBus(aggregate23)
	shipmentService := &shipment.ShipmentService{
		Session:           session,
		ShipmentManager:   shipmentManager,
		ShippingAggregate: shippingCommandBus,
	}
	connectionService := &connection.ConnectionService{
		Session:         session,
		ShipmentManager: shipmentManager,
		ConnectionQuery: connectioningQueryBus,
		ConnectionAggr:  connectioningCommandBus,
	}
	refundAggregate := aggregate15.NewRefundAggregate(mainDB, busBus)
	refundCommandBus := aggregate15.RefundAggregateMessageBus(refundAggregate)
	refundService := &refund.RefundService{
		Session:        session,
		CustomerQuery:  customeringQueryBus,
		InventoryQuery: inventoryQueryBus,
		ReceiptQuery:   receiptingQueryBus,
		RefundAggr:     refundCommandBus,
		RefundQuery:    refundQueryBus,
	}
	purchaseRefundAggregate := aggregate16.NewPurchaseRefundAggregate(mainDB, busBus, purchaseorderQueryBus)
	purchaserefundCommandBus := aggregate16.PurchaseRefundAggregateMessageBus(purchaseRefundAggregate)
	purchaseRefundService := &purchase_refund.PurchaseRefundService{
		Session:             session,
		PurchaseRefundAggr:  purchaserefundCommandBus,
		PurchaseRefundQuery: purchaserefundQueryBus,
		SupplierQuery:       supplieringQueryBus,
		PurchaseOrderQuery:  purchaseorderQueryBus,
		InventoryQuery:      inventoryQueryBus,
	}
	webServerDB := databases.WebServer
	webserverAggregate := aggregate17.New(busBus, webServerDB, catalogQueryBus)
	webserverCommandBus := aggregate17.WebserverAggregateMessageBus(webserverAggregate)
	webserverQueryService := query18.New(busBus, webServerDB, catalogQueryBus)
	webserverQueryBus := query18.WebserverQueryServiceMessageBus(webserverQueryService)
	webServerService := &ws.WebServerService{
		Session:        session,
		CatalogQuery:   catalogQueryBus,
		WebserverAggr:  webserverCommandBus,
		WebserverQuery: webserverQueryBus,
		InventoryQuery: inventoryQueryBus,
	}
	subrProductQuery := subscriptionproduct.NewSubrProductQuery(mainDB)
	subscriptionproductQueryBus := subscriptionproduct.SubrProductQueryMessageBus(subrProductQuery)
	subrPlanQuery := subscriptionplan.NewSubrPlanQuery(mainDB, subscriptionproductQueryBus)
	subscriptionplanQueryBus := subscriptionplan.SubrPlanQueryMessageBus(subrPlanQuery)
	subscriptionQuery := subscription.NewSubscriptionQuery(mainDB, subscriptionplanQueryBus, subscriptionproductQueryBus)
	subscriptionQueryBus := subscription.SubscriptionQueryMessageBus(subscriptionQuery)
	subscriptionService := &subscription2.SubscriptionService{
		Session:           session,
		SubscriptionQuery: subscriptionQueryBus,
	}
	shopServers := shop_all.NewServers(store, shopMiscService, brandService, inventoryService, accountAccountService, collectionService, customerService, customerGroupService, productService, categoryService, productSourceService, orderService, fulfillmentService, shipnowService, historyService, moneyTransactionService, summaryService, exportExportService, notificationService, authorizeService, tradingService, paymentService, receiptService, supplierService, carrierService, ledgerService, purchaseOrderService, stocktakeService, shipmentService, connectionService, refundService, purchaseRefundService, webServerService, subscriptionService)
	adminMiscService := admin.MiscService{
		Session: session,
	}
	adminAccountService := admin.AccountService{
		Session: session,
	}
	adminOrderService := admin.OrderService{
		Session: session,
	}
	adminFulfillmentService := admin.FulfillmentService{
		Session:       session,
		EventBus:      busBus,
		IdentityQuery: identityQueryBus,
		RedisStore:    store,
		ShippingAggr:  shippingCommandBus,
		ShippingQuery: shippingQueryBus,
	}
	moneyTxAggregate := aggregate18.NewMoneyTxAggregate(mainDB, shippingQueryBus, identityQueryBus, busBus)
	moneytxCommandBus := aggregate18.MoneyTxAggregateMessageBus(moneyTxAggregate)
	adminMoneyTransactionService := admin.MoneyTransactionService{
		Session:      session,
		MoneyTxQuery: moneytxQueryBus,
		MoneyTxAggr:  moneytxCommandBus,
	}
	shopService := admin.ShopService{
		Session:       session,
		IdentityQuery: identityQueryBus,
	}
	creditAggregate := credit.NewAggregateCredit(busBus, mainDB, identityQueryBus)
	creditCommandBus := credit.CreditAggregateMessageBus(creditAggregate)
	creditQueryService := credit.NewQueryCredit(busBus, mainDB, identityQueryBus)
	creditQueryBus := credit.CreditQueryServiceMessageBus(creditQueryService)
	creditService := admin.CreditService{
		Session:     session,
		CreditAggr:  creditCommandBus,
		CreditQuery: creditQueryBus,
	}
	adminNotificationService := admin.NotificationService{
		Session: session,
	}
	adminConnectionService := admin.ConnectionService{
		Session:         session,
		ConnectionAggr:  connectioningCommandBus,
		ConnectionQuery: connectioningQueryBus,
	}
	shipmentpriceAggregate := shipmentprice.NewAggregate(mainDB, store, pricelistQueryBus, shipmentserviceQueryBus)
	shipmentpriceCommandBus := shipmentprice.AggregateMessageBus(shipmentpriceAggregate)
	shipmentserviceAggregate := shipmentservice.NewAggregate(mainDB, store)
	shipmentserviceCommandBus := shipmentservice.AggregateMessageBus(shipmentserviceAggregate)
	pricelistAggregate := pricelist.NewAggregate(mainDB, busBus, shopshipmentpricelistQueryBus)
	pricelistCommandBus := pricelist.AggregateMessageBus(pricelistAggregate)
	shopshipmentpricelistAggregate := shopshipmentpricelist.NewAggregate(mainDB, pricelistQueryBus)
	shopshipmentpricelistCommandBus := shopshipmentpricelist.AggregateMessageBus(shopshipmentpricelistAggregate)
	pricelistpromotionAggregate := pricelistpromotion.NewAggregate(mainDB, pricelistQueryBus)
	pricelistpromotionCommandBus := pricelistpromotion.AggregateMessageBus(pricelistpromotionAggregate)
	shipmentPriceService := admin.ShipmentPriceService{
		Session:                    session,
		ShipmentManager:            shipmentManager,
		ShipmentPriceAggr:          shipmentpriceCommandBus,
		ShipmentPriceQuery:         shipmentpriceQueryBus,
		ShipmentServiceQuery:       shipmentserviceQueryBus,
		ShipmentServiceAggr:        shipmentserviceCommandBus,
		ShipmentPriceListAggr:      pricelistCommandBus,
		ShipmentPriceListQuery:     pricelistQueryBus,
		ShopShipmentPriceListQuery: shopshipmentpricelistQueryBus,
		ShopShipmentPriceListAggr:  shopshipmentpricelistCommandBus,
		PriceListPromotionQuery:    pricelistpromotionQueryBus,
		PriceListPromotionAggr:     pricelistpromotionCommandBus,
	}
	locationAggregate := location.NewAggregate(mainDB)
	locationCommandBus := location.AggregateMessageBus(locationAggregate)
	adminLocationService := admin.LocationService{
		Session:       session,
		LocationAggr:  locationCommandBus,
		LocationQuery: queryBus,
	}
	subrProductAggregate := subscriptionproduct.NewSubrProductAggregate(mainDB)
	subscriptionproductCommandBus := subscriptionproduct.SubrProductAggregateMessageBus(subrProductAggregate)
	subrPlanAggregate := subscriptionplan.NewSubrPlanAggregate(mainDB)
	subscriptionplanCommandBus := subscriptionplan.SubrPlanAggregateMessageBus(subrPlanAggregate)
	subscriptionAggregate := subscription.NewSubscriptionAggregate(mainDB)
	subscriptionCommandBus := subscription.SubscriptionAggregateMessageBus(subscriptionAggregate)
	aggregate24 := aggregate19.NewAggregate(mainDB)
	paymentCommandBus := aggregate19.AggregateMessageBus(aggregate24)
	subrBillAggregate := subscriptionbill.NewSubrBillAggregate(mainDB, busBus, paymentCommandBus, subscriptionQueryBus, subscriptionplanQueryBus)
	subscriptionbillCommandBus := subscriptionbill.SubrBillAggregateMessageBus(subrBillAggregate)
	subrBillQuery := subscriptionbill.NewSubrBillQuery(mainDB)
	subscriptionbillQueryBus := subscriptionbill.SubrBillQueryMessageBus(subrBillQuery)
	adminSubscriptionService := admin.SubscriptionService{
		Session:           session,
		SubrProductAggr:   subscriptionproductCommandBus,
		SubrProductQuery:  subscriptionproductQueryBus,
		SubrPlanAggr:      subscriptionplanCommandBus,
		SubrPlanQuery:     subscriptionplanQueryBus,
		SubscriptionQuery: subscriptionQueryBus,
		SubscriptionAggr:  subscriptionCommandBus,
		SubrBillAggr:      subscriptionbillCommandBus,
		SubrBillQuery:     subscriptionbillQueryBus,
	}
	adminUserService := admin.UserService{
		Session:       session,
		IdentityQuery: identityQueryBus,
		IdentityAggr:  commandBus,
	}
	adminServers := admin_all.NewServers(store, adminMiscService, adminAccountService, adminOrderService, adminFulfillmentService, adminMoneyTransactionService, shopService, creditService, adminNotificationService, adminConnectionService, shipmentPriceService, adminLocationService, adminSubscriptionService, adminUserService)
	sadminMiscService := &sadmin.MiscService{
		Session: session,
	}
	sadminUserService := &sadmin.UserService{
		Session: session,
	}
	webhookCallbackService := sadmin.NewWebhookCallbackService(store)
	webhookService := &sadmin.WebhookService{
		Session:                session,
		WebhookCallbackService: webhookCallbackService,
	}
	sadminServers := sadmin.NewServers(sadminMiscService, sadminUserService, webhookService)
	integrationMiscService := &integration.MiscService{}
	integrationService := &integration.IntegrationService{
		Session:     session,
		AuthStore:   generator,
		TokenStore:  tokenStore,
		SMSClient:   smsClient,
		EmailClient: emailClient,
	}
	integrationServers, cleanup3 := integration.NewIntegrationServer(store, integrationMiscService, integrationService)
	affiliateMiscService := affiliate.MiscService{}
	affiliateAccountService := affiliate.AccountService{
		IdentityAggr: commandBus,
	}
	affiliateServers := affiliate.NewServers(affiliateMiscService, affiliateAccountService)
	affiliateDB := databases.Affiliate
	affiliateAggregate := affiliate2.NewAggregate(affiliateDB, identityQueryBus, catalogQueryBus, orderingQueryBus)
	affiliateCommandBus := affiliate2.AggregateMessageBus(affiliateAggregate)
	apiUserService := &api2.UserService{
		AffiliateAggr: affiliateCommandBus,
	}
	affiliateQueryService := affiliate2.NewQuery(affiliateDB)
	affiliateQueryBus := affiliate2.QueryServiceMessageBus(affiliateQueryService)
	apiTradingService := &api2.TradingService{
		AffiliateAggr:  affiliateCommandBus,
		AffiliateQuery: affiliateQueryBus,
		CatalogQuery:   catalogQueryBus,
		InventoryQuery: inventoryQueryBus,
	}
	apiShopService := &api2.ShopService{
		CatalogQuery:   catalogQueryBus,
		InventoryQuery: inventoryQueryBus,
		AffiliateQuery: affiliateQueryBus,
	}
	affiliateService := &api2.AffiliateService{
		AffiliateAggr:  affiliateCommandBus,
		CatalogQuery:   catalogQueryBus,
		AffiliateQuery: affiliateQueryBus,
		IdentityQuery:  identityQueryBus,
	}
	apiServers := api2.NewServers(secretToken, apiUserService, apiTradingService, apiShopService, affiliateService)
	intHandlers := server_max.BuildIntHandlers(servers, shopServers, adminServers, sadminServers, integrationServers, affiliateServers, apiServers)
	shippingShipping := shipping.New(queryBus, mainDB, shipmentManager, shippingCommandBus, shippingQueryBus, orderLogic, shipnowCommandBus, shipnowQueryBus)
	partnerMiscService := &partner.MiscService{
		Shipping: shippingShipping,
	}
	partnerShopService := &partner.ShopService{}
	kafka := cfg.Kafka
	producer, err := _producer.SupportedProducers(ctx, kafka)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return Output{}, nil, err
	}
	service2 := webhook.New(mainDB, producer, store)
	partnerWebhookService := &partner.WebhookService{
		WebhookInner: service2,
	}
	partnerHistoryService := &partner.HistoryService{}
	shippingService := &partner.ShippingService{
		Shipping: shippingShipping,
	}
	partnerOrderService := &partner.OrderService{
		Shipping: shippingShipping,
	}
	partnerFulfillmentService := &partner.FulfillmentService{
		Shipping: shippingShipping,
	}
	shoppingShopping := &shopping.Shopping{
		LocationQuery:     queryBus,
		CustomerQuery:     customeringQueryBus,
		CustomerAggregate: customeringCommandBus,
		AddressQuery:      addressingQueryBus,
		AddressAggregate:  addressingCommandBus,
		InventoryQuery:    inventoryQueryBus,
		CatalogQuery:      catalogQueryBus,
		CatalogAggregate:  catalogCommandBus,
	}
	partnerCustomerService := &partner.CustomerService{
		Shopping: shoppingShopping,
	}
	customerAddressService := &partner.CustomerAddressService{
		Shopping: shoppingShopping,
	}
	partnerCustomerGroupService := &partner.CustomerGroupService{
		Shopping: shoppingShopping,
	}
	customerGroupRelationshipService := &partner.CustomerGroupRelationshipService{
		Shopping: shoppingShopping,
	}
	partnerInventoryService := &partner.InventoryService{
		Shopping: shoppingShopping,
	}
	variantService := &partner.VariantService{
		Shopping: shoppingShopping,
	}
	partnerProductService := &partner.ProductService{
		Shopping: shoppingShopping,
	}
	productCollectionService := &partner.ProductCollectionService{
		Shopping: shoppingShopping,
	}
	productCollectionRelationshipService := &partner.ProductCollectionRelationshipService{
		Shopping: shoppingShopping,
	}
	partnerServers, cleanup4 := partner.NewServers(store, generator, partnerAuthURL, partnerMiscService, partnerShopService, partnerWebhookService, partnerHistoryService, shippingService, partnerOrderService, partnerFulfillmentService, partnerCustomerService, customerAddressService, partnerCustomerGroupService, customerGroupRelationshipService, partnerInventoryService, variantService, partnerProductService, productCollectionService, productCollectionRelationshipService)
	xshopMiscService := &xshop.MiscService{
		Shipping: shippingShipping,
	}
	xshopWebhookService := &xshop.WebhookService{
		WebhookInner: service2,
	}
	xshopHistoryService := &xshop.HistoryService{}
	xshopShippingService := &xshop.ShippingService{
		Shipping: shippingShipping,
	}
	xshopOrderService := &xshop.OrderService{
		Shipping: shippingShipping,
	}
	xshopFulfillmentService := &xshop.FulfillmentService{
		Shipping: shippingShipping,
	}
	xshopCustomerService := &xshop.CustomerService{
		Shopping: shoppingShopping,
	}
	xshopCustomerAddressService := &xshop.CustomerAddressService{
		Shopping: shoppingShopping,
	}
	xshopCustomerGroupService := &xshop.CustomerGroupService{
		Shopping: shoppingShopping,
	}
	xshopCustomerGroupRelationshipService := &xshop.CustomerGroupRelationshipService{
		Shopping: shoppingShopping,
	}
	xshopInventoryService := &xshop.InventoryService{
		Shopping: shoppingShopping,
	}
	xshopVariantService := &xshop.VariantService{
		Shopping: shoppingShopping,
	}
	xshopProductService := &xshop.ProductService{
		Shopping: shoppingShopping,
	}
	xshopProductCollectionService := &xshop.ProductCollectionService{
		Shopping: shoppingShopping,
	}
	xshopProductCollectionRelationshipService := &xshop.ProductCollectionRelationshipService{
		Shopping: shoppingShopping,
	}
	xshopShipnowService := &xshop.ShipnowService{
		Shipping: shippingShipping,
	}
	xshopServers, cleanup5 := xshop.NewServers(store, shippingShipping, xshopMiscService, xshopWebhookService, xshopHistoryService, xshopShippingService, xshopOrderService, xshopFulfillmentService, xshopCustomerService, xshopCustomerAddressService, xshopCustomerGroupService, xshopCustomerGroupRelationshipService, xshopInventoryService, xshopVariantService, xshopProductService, xshopProductCollectionService, xshopProductCollectionRelationshipService, xshopShipnowService)
	partnercarrierMiscService := &partnercarrier.MiscService{
		Session:  session,
		Shipping: shippingShipping,
	}
	shipmentConnectionService := &partnercarrier.ShipmentConnectionService{
		Session:         session,
		ConnectionQuery: connectioningQueryBus,
		ConnectionAggr:  connectioningCommandBus,
	}
	shippingwebhookAggregate := shippingwebhook.NewAggregate(logDB)
	webhookWebhook := webhook2.New(mainDB, shippingQueryBus, shippingCommandBus, connectioningQueryBus, shippingwebhookAggregate)
	partnercarrierShipmentService := &partnercarrier.ShipmentService{
		Session:                session,
		ConnectionQuery:        connectioningQueryBus,
		ShippingAggr:           shippingCommandBus,
		ShippingQuery:          shippingQueryBus,
		ShipmentWebhookLogAggr: shippingwebhookAggregate,
		DirectWebhook:          webhookWebhook,
	}
	partnercarrierServers, cleanup6 := partnercarrier.NewServers(store, partnercarrierMiscService, shipmentConnectionService, partnercarrierShipmentService)
	importService := partnerimport.New(mainDB, catalogCommandBus)
	partnerimportServers := partnerimport.NewServers(importService)
	extHandlers := server_max.BuildExtHandlers(partnerServers, xshopServers, partnercarrierServers, partnerimportServers)
	ghnimportImport := ghnimport.Import{
		MoneyTxAggr: moneytxCommandBus,
	}
	ghtkimportImport := ghtkimport.Import{
		MoneyTxAggr:   moneytxCommandBus,
		ShippingAggr:  shippingCommandBus,
		ShippingQuery: shippingQueryBus,
	}
	vtpostimportImport := vtpostimport.Import{
		MoneyTxAggr: moneytxCommandBus,
	}
	vtPostImporter := &vtpostimport.VTPostImporter{}
	ghtkImporter := &ghtkimport.GHTKImporter{
		ShippingAggr:  shippingCommandBus,
		ShippingQuery: shippingQueryBus,
	}
	ghnImporter := &ghnimport.GHNImporter{}
	jtImporter := &jtexpressimport.JTImporter{}
	handlersImportService := handlers.ImportService{
		MoneyTxAggr:       moneytxCommandBus,
		ConnectionQuery:   connectioningQueryBus,
		VTPostImporter:    vtPostImporter,
		GHTKImporter:      ghtkImporter,
		GHNImporter:       ghnImporter,
		JTExpressImporter: jtImporter,
	}
	hotFixMoneyTxService := hotfix.New(mainDB)
	importServer := server_admin.BuildImportHandlers(ghnimportImport, ghtkimportImport, vtpostimportImport, handlersImportService, hotFixMoneyTxService, session)
	dirConfigs := cfg.UploadDirs
	uploader, err := _uploader.NewUploader(ctx, dirConfigs, bucket)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return Output{}, nil, err
	}
	imcsvImport, cleanup7 := imcsv.New(queryBus, store, uploader, mainDB)
	import2, cleanup8 := imcsv2.New(store, uploader, mainDB)
	importHandler := server_shop.BuildImportHandler(imcsvImport, import2, session)
	eventStreamHandler := server_shop.BuildEventStreamHandler(eventStream, session)
	downloadHandler := server_shop.BuildDownloadHandler()
	client3 := client2.New(config2)
	vtpayAggregate := vtpay2.NewAggregate(mainDB, orderingQueryBus, orderingCommandBus, paymentCommandBus, client3)
	vtpayCommandBus := vtpay2.AggregateMessageBus(vtpayAggregate)
	aggregate25 := aggregate20.NewAggregate(orderingQueryBus, orderingCommandBus, vtpayCommandBus, client3)
	gatewayCommandBus := aggregate20.AggregateMessageBus(aggregate25)
	aggregate26 := aggregate21.New(logDB)
	serverServer := server.New(gatewayCommandBus, aggregate26)
	vtPayHandler := server_vtpay.BuildVTPayHandler(serverServer)
	mainServer := BuildMainServer(service, intHandlers, extHandlers, sharedConfig, importServer, importHandler, eventStreamHandler, downloadHandler, vtPayHandler)
	webServer := BuildWebServer(cfg, webserverQueryBus, catalogQueryBus, subscriptionQueryBus, store, queryBus)
	webhookConfig := shipment_allConfig.GHNWebhook
	ghnConfig := shipment_allConfig.GHN
	ghnCarrier := ghn.New(ghnConfig, queryBus)
	v1Webhook := v1.New(mainDB, ghnCarrier, shipmentManager, identityQueryBus, shippingCommandBus, shippingwebhookAggregate)
	v2Webhook := v2.New(mainDB, ghnCarrier, shipmentManager, identityQueryBus, shippingCommandBus, shippingwebhookAggregate)
	ghnWebhookServer := _all.NewGHNWebhookServer(webhookConfig, shipmentManager, ghnCarrier, identityQueryBus, shippingCommandBus, v1Webhook, v2Webhook)
	_ghtkWebhookConfig := shipment_allConfig.GHTKWebhook
	ghtkConfig := shipment_allConfig.GHTK
	ghtkCarrier := ghtk.New(ghtkConfig, queryBus)
	webhook6 := webhook3.New(mainDB, ghtkCarrier, shipmentManager, identityQueryBus, shippingCommandBus, shippingwebhookAggregate)
	ghtkWebhookServer := _ghtk.NewGHTKWebhookServer(_ghtkWebhookConfig, shipmentManager, ghtkCarrier, identityQueryBus, shippingCommandBus, webhook6)
	_vtpostWebhookConfig := shipment_allConfig.VTPostWebhook
	vtpostConfig := shipment_allConfig.VTPost
	vtpostCarrier := vtpost.New(vtpostConfig, queryBus)
	webhook7 := webhook4.New(mainDB, vtpostCarrier, shipmentManager, identityQueryBus, shippingCommandBus, shippingwebhookAggregate)
	vtPostWebhookServer := _vtpost.NewVTPostWebhookServer(_vtpostWebhookConfig, shipmentManager, vtpostCarrier, identityQueryBus, shippingCommandBus, webhook7)
	serverWebhookConfig := cfg.AhamoveWebhook
	ahamoveVerificationFileServer := server2.NewAhamoveVerificationFileServer(ctx, identityQueryBus)
	webhook8 := webhook5.New(mainDB, ahamoveCarrier, shipnowQueryBus, shipnowCommandBus, orderingCommandBus, orderingQueryBus, shippingwebhookAggregate)
	ahamoveWebhookServer := server2.NewAhamoveWebhookServer(serverWebhookConfig, shipmentManager, ahamoveCarrier, identityQueryBus, shipnowQueryBus, shipnowCommandBus, orderingCommandBus, orderingQueryBus, ahamoveVerificationFileServer, webhook8)
	v6 := BuildServers(mainServer, webServer, ghnWebhookServer, ghtkWebhookServer, vtPostWebhookServer, ahamoveWebhookServer)
	processManager := pm.New(busBus, identityQueryBus, invitationQueryBus)
	pmProcessManager := pm2.New(busBus, catalogQueryBus, orderingQueryBus, inventoryCommandBus)
	processManager2 := pm3.New(busBus, invitationQueryBus, invitationCommandBus)
	processManager3 := pm4.New(busBus, catalogQueryBus, catalogCommandBus)
	processManager4 := pm5.New(busBus, ledgeringCommandBus)
	processManager5 := pm6.New(busBus, moneytxQueryBus, moneytxCommandBus, shippingQueryBus)
	processManager6 := pm7.New(busBus, orderingCommandBus, affiliateCommandBus, receiptingQueryBus, inventoryCommandBus, orderingQueryBus, customeringQueryBus)
	processManager7 := pm8.New(busBus, purchaseorderQueryBus, receiptingQueryBus)
	processManager8 := pm9.New(busBus, purchaserefundCommandBus, purchaserefundQueryBus, receiptingQueryBus)
	processManager9 := pm10.New(busBus, receiptingQueryBus, receiptingCommandBus, ledgeringQueryBus, ledgeringCommandBus, identityQueryBus)
	processManager10 := pm11.New(busBus, refundQueryBus, receiptingQueryBus, refundCommandBus)
	processManager11 := pm12.New(busBus, shipnowQueryBus, shipnowCommandBus, orderingCommandBus, shipnowManager, carrierShipnowManager)
	processManager12 := pm13.New(busBus, shippingQueryBus, shippingCommandBus, store, connectioningQueryBus)
	processManager13 := pm14.New(busBus, affiliateCommandBus)
	traderAgg := aggregate22.NewTraderAgg(mainDB)
	traderingCommandBus := aggregate22.TraderAggMessageBus(traderAgg)
	processManager14 := pm15.New(busBus, traderingCommandBus)
	processManager15 := pm16.New(busBus, connectioningCommandBus, connectioningQueryBus)
	processManager16 := pm17.New(store, busBus, pricelistQueryBus, shopshipmentpricelistQueryBus)
	sAdminToken := config_server.WireSAdminToken(sharedConfig)
	middlewareMiddleware := middleware.New(sAdminToken, tokenStore, identityQueryBus)
	captchaConfig := cfg.Captcha
	captchaCaptcha := captcha.New(captchaConfig)
	output := Output{
		Servers:           v6,
		Health:            service,
		_identityPM:       processManager,
		_inventoryPM:      pmProcessManager,
		_invitationPM:     processManager2,
		_catalogPM:        processManager3,
		_ledgerPM:         processManager4,
		_moneytxPM:        processManager5,
		_orderPM:          processManager6,
		_purchaseOrderPM:  processManager7,
		_purchaseRefundPM: processManager8,
		_receiptPM:        processManager9,
		_refundPM:         processManager10,
		_shipnowPM:        processManager11,
		_shippingPM:       processManager12,
		_affiliatePM:      processManager13,
		_traderPM:         processManager14,
		_connectionPM:     processManager15,
		_pricelistPM:      processManager16,
		_s:                sqlstoreStore,
		_m:                middlewareMiddleware,
		_c:                captchaCaptcha,
	}
	return output, func() {
		cleanup8()
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
