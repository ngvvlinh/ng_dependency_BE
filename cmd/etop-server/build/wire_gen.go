// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package build

import (
	"context"
	"o.o/backend/cmd/etop-server/config"
	aggregate21 "o.o/backend/com/etc/logging/payment/aggregate"
	"o.o/backend/com/etc/logging/smslog/aggregate"
	"o.o/backend/com/external/payment/manager"
	aggregate19 "o.o/backend/com/external/payment/payment/aggregate"
	vtpay2 "o.o/backend/com/external/payment/vtpay"
	aggregate20 "o.o/backend/com/external/payment/vtpay/gateway/aggregate"
	"o.o/backend/com/external/payment/vtpay/gateway/server"
	"o.o/backend/com/main/address"
	aggregate3 "o.o/backend/com/main/authorization/aggregate"
	aggregate4 "o.o/backend/com/main/catalog/aggregate"
	query3 "o.o/backend/com/main/catalog/query"
	aggregate7 "o.o/backend/com/main/connectioning/aggregate"
	query13 "o.o/backend/com/main/connectioning/query"
	"o.o/backend/com/main/identity"
	aggregate5 "o.o/backend/com/main/inventory/aggregate"
	query8 "o.o/backend/com/main/inventory/query"
	aggregate2 "o.o/backend/com/main/invitation/aggregate"
	"o.o/backend/com/main/invitation/query"
	aggregate11 "o.o/backend/com/main/ledgering/aggregate"
	query17 "o.o/backend/com/main/ledgering/query"
	"o.o/backend/com/main/location"
	aggregate18 "o.o/backend/com/main/moneytx/aggregate"
	query15 "o.o/backend/com/main/moneytx/query"
	"o.o/backend/com/main/ordering"
	aggregate12 "o.o/backend/com/main/purchaseorder/aggregate"
	query10 "o.o/backend/com/main/purchaseorder/query"
	aggregate16 "o.o/backend/com/main/purchaserefund/aggregate"
	query12 "o.o/backend/com/main/purchaserefund/query"
	aggregate8 "o.o/backend/com/main/receipting/aggregate"
	query9 "o.o/backend/com/main/receipting/query"
	aggregate15 "o.o/backend/com/main/refund/aggregate"
	query11 "o.o/backend/com/main/refund/query"
	"o.o/backend/com/main/shipmentpricing/pricelist"
	"o.o/backend/com/main/shipmentpricing/shipmentprice"
	"o.o/backend/com/main/shipmentpricing/shipmentservice"
	"o.o/backend/com/main/shipmentpricing/shopshipmentpricelist"
	"o.o/backend/com/main/shipmentpricing/subpricelist"
	"o.o/backend/com/main/shipnow"
	"o.o/backend/com/main/shipnow-carrier"
	aggregate14 "o.o/backend/com/main/shipping/aggregate"
	"o.o/backend/com/main/shipping/carrier"
	query14 "o.o/backend/com/main/shipping/query"
	aggregate13 "o.o/backend/com/main/stocktaking/aggregate"
	query7 "o.o/backend/com/main/stocktaking/query"
	affiliate2 "o.o/backend/com/services/affiliate"
	aggregate10 "o.o/backend/com/shopping/carrying/aggregate"
	query4 "o.o/backend/com/shopping/carrying/query"
	aggregate6 "o.o/backend/com/shopping/customering/aggregate"
	query2 "o.o/backend/com/shopping/customering/query"
	aggregate9 "o.o/backend/com/shopping/suppliering/aggregate"
	query5 "o.o/backend/com/shopping/suppliering/query"
	query6 "o.o/backend/com/shopping/tradering/query"
	"o.o/backend/com/subscripting/subscription"
	"o.o/backend/com/subscripting/subscriptionbill"
	"o.o/backend/com/subscripting/subscriptionplan"
	"o.o/backend/com/subscripting/subscriptionproduct"
	query16 "o.o/backend/com/summary/query"
	aggregate17 "o.o/backend/com/web/webserver/aggregate"
	query18 "o.o/backend/com/web/webserver/query"
	"o.o/backend/pkg/common/apifw/captcha"
	"o.o/backend/pkg/common/apifw/health"
	"o.o/backend/pkg/common/authorization/auth"
	"o.o/backend/pkg/common/lifecycle"
	"o.o/backend/pkg/common/redis"
	"o.o/backend/pkg/etop/api"
	"o.o/backend/pkg/etop/api/admin"
	"o.o/backend/pkg/etop/api/affiliate"
	"o.o/backend/pkg/etop/api/export"
	"o.o/backend/pkg/etop/api/integration"
	"o.o/backend/pkg/etop/api/sadmin"
	"o.o/backend/pkg/etop/api/shop"
	"o.o/backend/pkg/etop/api/shop/imports"
	"o.o/backend/pkg/etop/apix/partner"
	"o.o/backend/pkg/etop/apix/partnercarrier"
	"o.o/backend/pkg/etop/apix/partnerimport"
	"o.o/backend/pkg/etop/apix/shipping"
	"o.o/backend/pkg/etop/apix/shop"
	"o.o/backend/pkg/etop/apix/shopping"
	"o.o/backend/pkg/etop/apix/webhook"
	"o.o/backend/pkg/etop/authorize/middleware"
	"o.o/backend/pkg/etop/authorize/tokens"
	"o.o/backend/pkg/etop/eventstream"
	"o.o/backend/pkg/etop/logic/money-transaction/ghtk-imcsv"
	"o.o/backend/pkg/etop/logic/money-transaction/imcsv"
	"o.o/backend/pkg/etop/logic/money-transaction/vtpost-imxlsx"
	"o.o/backend/pkg/etop/logic/orders"
	imcsv2 "o.o/backend/pkg/etop/logic/orders/imcsv"
	imcsv3 "o.o/backend/pkg/etop/logic/products/imcsv"
	"o.o/backend/pkg/etop/logic/shipping_provider"
	"o.o/backend/pkg/etop/logic/summary"
	"o.o/backend/pkg/etop/sqlstore"
	"o.o/backend/pkg/integration/payment/vtpay"
	client2 "o.o/backend/pkg/integration/payment/vtpay/client"
	"o.o/backend/pkg/integration/shipnow/ahamove"
	"o.o/backend/pkg/integration/shipnow/ahamove/client"
	"o.o/backend/pkg/integration/shipnow/ahamove/webhook"
	"o.o/backend/pkg/integration/shipping/ghn"
	webhook2 "o.o/backend/pkg/integration/shipping/ghn/webhook"
	"o.o/backend/pkg/integration/shipping/ghtk"
	webhook3 "o.o/backend/pkg/integration/shipping/ghtk/webhook"
	"o.o/backend/pkg/integration/shipping/vtpost"
	webhook4 "o.o/backend/pkg/integration/shipping/vtpost/webhook"
	"o.o/backend/pkg/integration/sms"
	api2 "o.o/backend/pkg/services/affiliate/api"
	"o.o/capi"
)

// Injectors from wire.go:

func Servers(ctx context.Context, cfg config.Config, eventBus capi.EventBus, healthServer *health.Service, partnerAuthURL partner.AuthURL) ([]lifecycle.HTTPServer, func(), error) {
	databases, err := BindDatabases(cfg)
	if err != nil {
		return nil, nil, err
	}
	mainDB := databases.Main
	notifierDB := databases.Notifier
	locationQuery := location.New(mainDB)
	queryBus := location.QueryMessageBus(locationQuery)
	store := sqlstore.New(mainDB, notifierDB, queryBus, eventBus)
	sAdminToken := WireSAdminToken(cfg)
	redisRedis := cfg.Redis
	redisStore := redis.Connect(redisRedis)
	tokenStore := tokens.NewTokenStore(redisStore)
	queryService := identity.NewQueryService(mainDB)
	identityQueryBus := identity.QueryServiceMessageBus(queryService)
	middlewareMiddleware := middleware.New(sAdminToken, tokenStore, identityQueryBus)
	captchaConfig := cfg.Captcha
	captchaCaptcha := captcha.New(captchaConfig)
	miscService := &api.MiscService{}
	shipnowQueryService := shipnow.NewQueryService(mainDB)
	shipnowQueryBus := shipnow.QueryServiceMessageBus(shipnowQueryService)
	clientConfig := cfg.Ahamove
	clientClient := client.New(clientConfig)
	ahamoveCarrier := ahamove.New(clientClient, queryBus, identityQueryBus)
	urlConfig := AhamoveConfig(cfg)
	carrierAccount := ahamove.NewCarrierAccount(clientClient, urlConfig, identityQueryBus)
	v := SupportedShipnowCarriers(ahamoveCarrier, carrierAccount)
	shipnowManager := shipnow_carrier.NewManager(mainDB, queryBus, shipnowQueryBus, v)
	identityAggregate := identity.NewAggregate(mainDB, shipnowManager)
	commandBus := identity.AggregateMessageBus(identityAggregate)
	invitationQuery := query.NewInvitationQuery(mainDB)
	invitationQueryBus := query.InvitationQueryMessageBus(invitationQuery)
	generator := auth.NewGenerator(redisStore)
	smsConfig := cfg.SMS
	v2 := SupportedSMSDrivers(cfg, smsConfig)
	logDB := databases.Log
	smsLogAggregate := aggregate.NewSmsLogAggregate(eventBus, logDB)
	smslogCommandBus := aggregate.SmsLogAggregateMessageBus(smsLogAggregate)
	smsClient := sms.New(smsConfig, v2, smslogCommandBus)
	userService := &api.UserService{
		IdentityAggr:    commandBus,
		IdentityQuery:   identityQueryBus,
		InvitationQuery: invitationQueryBus,
		EventBus:        eventBus,
		AuthStore:       generator,
		TokenStore:      tokenStore,
		RedisStore:      redisStore,
		SMSClient:       smsClient,
	}
	accountService := &api.AccountService{}
	locationService := &api.LocationService{
		LocationQuery: queryBus,
	}
	bankService := &api.BankService{}
	addressService := &api.AddressService{}
	invitationConfig := cfg.Invitation
	customerQuery := query2.NewCustomerQuery(mainDB)
	customeringQueryBus := query2.CustomerQueryMessageBus(customerQuery)
	invitationAggregate := aggregate2.NewInvitationAggregate(mainDB, invitationConfig, customeringQueryBus, identityQueryBus, eventBus, cfg, smsClient)
	invitationCommandBus := aggregate2.InvitationAggregateMessageBus(invitationAggregate)
	authorizationAggregate := aggregate3.NewAuthorizationAggregate()
	authorizationCommandBus := aggregate3.AuthorizationAggregateMessageBus(authorizationAggregate)
	accountRelationshipService := &api.AccountRelationshipService{
		InvitationAggr:    invitationCommandBus,
		InvitationQuery:   invitationQueryBus,
		AuthorizationAggr: authorizationCommandBus,
	}
	userRelationshipService := &api.UserRelationshipService{
		InvitationAggr:         invitationCommandBus,
		InvitationQuery:        invitationQueryBus,
		AuthorizationAggregate: authorizationCommandBus,
	}
	ecomService := &api.EcomService{}
	emailConfig := cfg.Email
	servers, cleanup := api.NewServers(miscService, userService, accountService, locationService, bankService, addressService, accountRelationshipService, userRelationshipService, ecomService, redisStore, emailConfig, smsConfig)
	shopMiscService := &shop.MiscService{}
	queryQueryService := query3.New(mainDB)
	catalogQueryBus := query3.QueryServiceMessageBus(queryQueryService)
	aggregateAggregate := aggregate4.New(eventBus, mainDB)
	catalogCommandBus := aggregate4.AggregateMessageBus(aggregateAggregate)
	brandService := &shop.BrandService{
		CatalogQuery: catalogQueryBus,
		CatalogAggr:  catalogCommandBus,
	}
	carrierQuery := query4.NewCarrierQuery(mainDB)
	carryingQueryBus := query4.CarrierQueryMessageBus(carrierQuery)
	supplierQuery := query5.NewSupplierQuery(mainDB)
	supplieringQueryBus := query5.SupplierQueryMessageBus(supplierQuery)
	traderQuery := query6.NewTraderQuery(mainDB, customeringQueryBus, carryingQueryBus, supplieringQueryBus)
	traderingQueryBus := query6.TraderQueryMessageBus(traderQuery)
	stocktakeQuery := query7.NewQueryStocktake(mainDB)
	stocktakingQueryBus := query7.StocktakeQueryMessageBus(stocktakeQuery)
	inventoryQueryService := query8.NewQueryInventory(stocktakingQueryBus, eventBus, mainDB)
	inventoryQueryBus := query8.InventoryQueryServiceMessageBus(inventoryQueryService)
	receiptQuery := query9.NewReceiptQuery(mainDB)
	receiptingQueryBus := query9.ReceiptQueryMessageBus(receiptQuery)
	purchaseOrderQuery := query10.NewPurchaseOrderQuery(mainDB, eventBus, supplieringQueryBus, inventoryQueryBus, receiptingQueryBus)
	purchaseorderQueryBus := query10.PurchaseOrderQueryMessageBus(purchaseOrderQuery)
	refundQueryService := query11.NewQueryRefund(eventBus, mainDB)
	refundQueryBus := query11.RefundQueryServiceMessageBus(refundQueryService)
	purchaseRefundQueryService := query12.NewQueryPurchasePurchaseRefund(eventBus, mainDB)
	purchaserefundQueryBus := query12.PurchaseRefundQueryServiceMessageBus(purchaseRefundQueryService)
	inventoryAggregate := aggregate5.NewAggregateInventory(eventBus, mainDB, traderingQueryBus, purchaseorderQueryBus, stocktakingQueryBus, refundQueryBus, purchaserefundQueryBus)
	inventoryCommandBus := aggregate5.InventoryAggregateMessageBus(inventoryAggregate)
	inventoryService := &shop.InventoryService{
		TraderQuery:    traderingQueryBus,
		InventoryAggr:  inventoryCommandBus,
		InventoryQuery: inventoryQueryBus,
	}
	addressQueryService := address.NewQueryService(mainDB)
	addressQueryBus := address.QueryServiceMessageBus(addressQueryService)
	shopAccountService := &shop.AccountService{
		IdentityAggr:  commandBus,
		IdentityQuery: identityQueryBus,
		AddressQuery:  addressQueryBus,
	}
	collectionService := &shop.CollectionService{
		CatalogQuery: catalogQueryBus,
		CatalogAggr:  catalogCommandBus,
	}
	customerAggregate := aggregate6.NewCustomerAggregate(eventBus, mainDB)
	customeringCommandBus := aggregate6.CustomerAggregateMessageBus(customerAggregate)
	addressAggregate := aggregate6.NewAddressAggregate(mainDB)
	addressingCommandBus := aggregate6.AddressAggregateMessageBus(addressAggregate)
	addressQuery := query2.NewAddressQuery(mainDB)
	addressingQueryBus := query2.AddressQueryMessageBus(addressQuery)
	orderingQueryService := ordering.NewQueryService(mainDB)
	orderingQueryBus := ordering.QueryServiceMessageBus(orderingQueryService)
	customerService := &shop.CustomerService{
		LocationQuery: queryBus,
		CustomerQuery: customeringQueryBus,
		CustomerAggr:  customeringCommandBus,
		AddressAggr:   addressingCommandBus,
		AddressQuery:  addressingQueryBus,
		OrderQuery:    orderingQueryBus,
		ReceiptQuery:  receiptingQueryBus,
	}
	customerGroupService := &shop.CustomerGroupService{
		CustomerAggr:  customeringCommandBus,
		CustomerQuery: customeringQueryBus,
	}
	productService := &shop.ProductService{
		CatalogQuery:   catalogQueryBus,
		CatalogAggr:    catalogCommandBus,
		InventoryQuery: inventoryQueryBus,
	}
	categoryService := &shop.CategoryService{
		CatalogQuery: catalogQueryBus,
		CatalogAggr:  catalogCommandBus,
	}
	productSourceService := &shop.ProductSourceService{}
	orderingAggregate := ordering.NewAggregate(eventBus, mainDB)
	orderingCommandBus := ordering.AggregateMessageBus(orderingAggregate)
	v3 := SupportedCarrierDrivers(ctx, cfg, queryBus)
	carrierManager := shipping_provider.NewCtrl(eventBus, queryBus, v3)
	connectionQuery := query13.NewConnectionQuery(mainDB)
	connectioningQueryBus := query13.ConnectionQueryMessageBus(connectionQuery)
	connectionAggregate := aggregate7.NewConnectionAggregate(mainDB, eventBus)
	connectioningCommandBus := aggregate7.ConnectionAggregateMessageBus(connectionAggregate)
	shipmentserviceQueryService := shipmentservice.NewQueryService(mainDB, redisStore)
	shipmentserviceQueryBus := shipmentservice.QueryServiceMessageBus(shipmentserviceQueryService)
	pricelistQueryService := pricelist.NewQueryService(mainDB, redisStore)
	pricelistQueryBus := pricelist.QueryServiceMessageBus(pricelistQueryService)
	subpricelistQueryService := subpricelist.NewQueryService(mainDB)
	subpricelistQueryBus := subpricelist.QueryServiceMessageBus(subpricelistQueryService)
	shopshipmentpricelistQueryService := shopshipmentpricelist.NewQueryService(mainDB, redisStore)
	shopshipmentpricelistQueryBus := shopshipmentpricelist.QueryServiceMessageBus(shopshipmentpricelistQueryService)
	shipmentpriceQueryService := shipmentprice.NewQueryService(mainDB, redisStore, queryBus, pricelistQueryBus, subpricelistQueryBus, shopshipmentpricelistQueryBus)
	shipmentpriceQueryBus := shipmentprice.QueryServiceMessageBus(shipmentpriceQueryService)
	flagApplyShipmentPrice := cfg.FlagApplyShipmentPrice
	carrierConfig := SupportedShippingCarrierConfig(cfg)
	shipmentManager, err := carrier.NewShipmentManager(eventBus, queryBus, connectioningQueryBus, connectioningCommandBus, redisStore, shipmentserviceQueryBus, shipmentpriceQueryBus, flagApplyShipmentPrice, carrierConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	orderLogic := orderS.New(carrierManager, catalogQueryBus, orderingCommandBus, customeringCommandBus, customeringQueryBus, addressingCommandBus, addressingQueryBus, queryBus, eventBus, shipmentManager)
	orderService := &shop.OrderService{
		OrderAggr:     orderingCommandBus,
		CustomerQuery: customeringQueryBus,
		OrderQuery:    orderingQueryBus,
		ReceiptQuery:  receiptingQueryBus,
		OrderLogic:    orderLogic,
	}
	queryService2 := query14.NewQueryService(mainDB)
	shippingQueryBus := query14.QueryServiceMessageBus(queryService2)
	fulfillmentService := &shop.FulfillmentService{
		ShippingQuery: shippingQueryBus,
		ShippingCtrl:  carrierManager,
	}
	shipnowAggregate := shipnow.NewAggregate(eventBus, mainDB, queryBus, identityQueryBus, addressQueryBus, orderingQueryBus, shipnowManager)
	shipnowCommandBus := shipnow.AggregateMessageBus(shipnowAggregate)
	shipnowService := &shop.ShipnowService{
		ShipnowAggr:  shipnowCommandBus,
		ShipnowQuery: shipnowQueryBus,
	}
	historyService := &shop.HistoryService{}
	moneyTxQuery := query15.NewMoneyTxQuery(mainDB, shippingQueryBus)
	moneytxQueryBus := query15.MoneyTxQueryMessageBus(moneyTxQuery)
	moneyTransactionService := &shop.MoneyTransactionService{
		MoneyTxQuery: moneytxQueryBus,
	}
	dashboardQuery := query16.NewDashboardQuery(mainDB, redisStore, queryBus)
	summaryQueryBus := query16.DashboardQueryMessageBus(dashboardQuery)
	summarySummary := summary.New(mainDB)
	summaryService := &shop.SummaryService{
		SummaryQuery: summaryQueryBus,
		SummaryOld:   summarySummary,
	}
	publisher := _wireEventStreamValue
	exportConfig := cfg.Export
	service, cleanup2 := export.New(redisStore, publisher, exportConfig)
	exportService := &shop.ExportService{
		ExportInner: service,
	}
	notificationService := &shop.NotificationService{}
	authorizeService := &shop.AuthorizeService{}
	tradingService := &shop.TradingService{
		EventBus:       eventBus,
		IdentityQuery:  identityQueryBus,
		CatalogQuery:   catalogQueryBus,
		OrderQuery:     orderingQueryBus,
		InventoryQuery: inventoryQueryBus,
		OrderLogic:     orderLogic,
	}
	config2 := cfg.VTPay
	provider := vtpay.New(config2)
	v4 := SupportedPaymentProvider(provider)
	paymentManager := manager.NewManager(v4, orderingQueryBus)
	managerCommandBus := manager.ManagerMesssageBus(paymentManager)
	paymentService := &shop.PaymentService{
		PaymentAggr: managerCommandBus,
	}
	ledgerQuery := query17.NewLedgerQuery(mainDB)
	ledgeringQueryBus := query17.LedgerQueryMessageBus(ledgerQuery)
	receiptAggregate := aggregate8.NewReceiptAggregate(mainDB, eventBus, traderingQueryBus, ledgeringQueryBus, orderingQueryBus, customeringQueryBus, carryingQueryBus, supplieringQueryBus, purchaseorderQueryBus)
	receiptingCommandBus := aggregate8.ReceiptAggregateMessageBus(receiptAggregate)
	receiptService := &shop.ReceiptService{
		CarrierQuery:  carryingQueryBus,
		CustomerQuery: customeringQueryBus,
		LedgerQuery:   ledgeringQueryBus,
		ReceiptAggr:   receiptingCommandBus,
		ReceiptQuery:  receiptingQueryBus,
		SupplierQuery: supplieringQueryBus,
		TraderQuery:   traderingQueryBus,
	}
	supplierAggregate := aggregate9.NewSupplierAggregate(eventBus, mainDB)
	supplieringCommandBus := aggregate9.SupplierAggregateMessageBus(supplierAggregate)
	supplierService := &shop.SupplierService{
		CatalogQuery:       catalogQueryBus,
		PurchaseOrderQuery: purchaseorderQueryBus,
		ReceiptQuery:       receiptingQueryBus,
		SupplierAggr:       supplieringCommandBus,
		SupplierQuery:      supplieringQueryBus,
	}
	carrierAggregate := aggregate10.NewCarrierAggregate(eventBus, mainDB)
	carryingCommandBus := aggregate10.CarrierAggregateMessageBus(carrierAggregate)
	carrierService := &shop.CarrierService{
		CarrierAggr:  carryingCommandBus,
		CarrierQuery: carryingQueryBus,
	}
	ledgerAggregate := aggregate11.NewLedgerAggregate(mainDB, receiptingQueryBus)
	ledgeringCommandBus := aggregate11.LedgerAggregateMessageBus(ledgerAggregate)
	ledgerService := &shop.LedgerService{
		LedgerAggr:  ledgeringCommandBus,
		LedgerQuery: ledgeringQueryBus,
	}
	purchaseOrderAggregate := aggregate12.NewPurchaseOrderAggregate(mainDB, eventBus, catalogQueryBus, supplieringQueryBus, inventoryQueryBus)
	purchaseorderCommandBus := aggregate12.PurchaseOrderAggregateMessageBus(purchaseOrderAggregate)
	purchaseOrderService := &shop.PurchaseOrderService{
		PurchaseOrderAggr:  purchaseorderCommandBus,
		PurchaseOrderQuery: purchaseorderQueryBus,
	}
	stocktakeAggregate := aggregate13.NewAggregateStocktake(mainDB, eventBus)
	stocktakingCommandBus := aggregate13.StocktakeAggregateMessageBus(stocktakeAggregate)
	stocktakeService := &shop.StocktakeService{
		CatalogQuery:   catalogQueryBus,
		StocktakeAggr:  stocktakingCommandBus,
		StocktakeQuery: stocktakingQueryBus,
		InventoryQuery: inventoryQueryBus,
	}
	aggregate22 := aggregate14.NewAggregate(mainDB, eventBus, queryBus, orderingQueryBus, shipmentManager, connectioningQueryBus)
	shippingCommandBus := aggregate14.AggregateMessageBus(aggregate22)
	shipmentService := &shop.ShipmentService{
		ShipmentManager:   shipmentManager,
		ShippingAggregate: shippingCommandBus,
	}
	connectionService := &shop.ConnectionService{
		ShipmentManager: shipmentManager,
		ConnectionQuery: connectioningQueryBus,
		ConnectionAggr:  connectioningCommandBus,
	}
	refundAggregate := aggregate15.NewRefundAggregate(mainDB, eventBus)
	refundCommandBus := aggregate15.RefundAggregateMessageBus(refundAggregate)
	refundService := &shop.RefundService{
		CustomerQuery:  customeringQueryBus,
		InventoryQuery: inventoryQueryBus,
		ReceiptQuery:   receiptingQueryBus,
		RefundAggr:     refundCommandBus,
		RefundQuery:    refundQueryBus,
	}
	purchaseRefundAggregate := aggregate16.NewPurchaseRefundAggregate(mainDB, eventBus, purchaseorderQueryBus)
	purchaserefundCommandBus := aggregate16.PurchaseRefundAggregateMessageBus(purchaseRefundAggregate)
	purchaseRefundService := &shop.PurchaseRefundService{
		PurchaseRefundAggr:  purchaserefundCommandBus,
		PurchaseRefundQuery: purchaserefundQueryBus,
		SupplierQuery:       supplieringQueryBus,
		PurchaseOrderQuery:  purchaseorderQueryBus,
		InventoryQuery:      inventoryQueryBus,
	}
	webserverAggregate := aggregate17.New(eventBus, mainDB, catalogQueryBus)
	webserverCommandBus := aggregate17.WebserverAggregateMessageBus(webserverAggregate)
	webserverQueryService := query18.New(eventBus, mainDB, catalogQueryBus)
	webserverQueryBus := query18.WebserverQueryServiceMessageBus(webserverQueryService)
	webServerService := &shop.WebServerService{
		CatalogQuery:   catalogQueryBus,
		WebserverAggr:  webserverCommandBus,
		WebserverQuery: webserverQueryBus,
		InventoryQuery: inventoryQueryBus,
	}
	subrProductQuery := subscriptionproduct.NewSubrProductQuery(mainDB)
	subscriptionproductQueryBus := subscriptionproduct.SubrProductQueryMessageBus(subrProductQuery)
	subrPlanQuery := subscriptionplan.NewSubrPlanQuery(mainDB, subscriptionproductQueryBus)
	subscriptionplanQueryBus := subscriptionplan.SubrPlanQueryMessageBus(subrPlanQuery)
	subscriptionQuery := subscription.NewSubscriptionQuery(mainDB, subscriptionplanQueryBus, subscriptionproductQueryBus)
	subscriptionQueryBus := subscription.SubscriptionQueryMessageBus(subscriptionQuery)
	subscriptionService := &shop.SubscriptionService{
		SubscriptionQuery: subscriptionQueryBus,
	}
	shopServers := shop.NewServers(redisStore, shopMiscService, brandService, inventoryService, shopAccountService, collectionService, customerService, customerGroupService, productService, categoryService, productSourceService, orderService, fulfillmentService, shipnowService, historyService, moneyTransactionService, summaryService, exportService, notificationService, authorizeService, tradingService, paymentService, receiptService, supplierService, carrierService, ledgerService, purchaseOrderService, stocktakeService, shipmentService, connectionService, refundService, purchaseRefundService, webServerService, subscriptionService)
	adminMiscService := &admin.MiscService{}
	adminAccountService := &admin.AccountService{}
	adminOrderService := &admin.OrderService{}
	adminFulfillmentService := &admin.FulfillmentService{
		RedisStore: redisStore,
	}
	moneyTxAggregate := aggregate18.NewMoneyTxAggregate(mainDB, shippingQueryBus, identityQueryBus, eventBus)
	moneytxCommandBus := aggregate18.MoneyTxAggregateMessageBus(moneyTxAggregate)
	adminMoneyTransactionService := &admin.MoneyTransactionService{
		MoneyTxQuery: moneytxQueryBus,
		MoneyTxAggr:  moneytxCommandBus,
	}
	shopService := &admin.ShopService{
		IdentityQuery: identityQueryBus,
	}
	creditService := &admin.CreditService{}
	adminNotificationService := &admin.NotificationService{}
	adminConnectionService := &admin.ConnectionService{
		ConnectionAggr:  connectioningCommandBus,
		ConnectionQuery: connectioningQueryBus,
	}
	shipmentpriceAggregate := shipmentprice.NewAggregate(mainDB, redisStore, subpricelistQueryBus, pricelistQueryBus)
	shipmentpriceCommandBus := shipmentprice.AggregateMessageBus(shipmentpriceAggregate)
	shipmentserviceAggregate := shipmentservice.NewAggregate(mainDB, redisStore)
	shipmentserviceCommandBus := shipmentservice.AggregateMessageBus(shipmentserviceAggregate)
	pricelistAggregate := pricelist.NewAggregate(mainDB, eventBus, shopshipmentpricelistQueryBus)
	pricelistCommandBus := pricelist.AggregateMessageBus(pricelistAggregate)
	subpricelistAggregate := subpricelist.NewAggregate(mainDB, eventBus)
	subpricelistCommandBus := subpricelist.AggregateMessageBus(subpricelistAggregate)
	shopshipmentpricelistAggregate := shopshipmentpricelist.NewAggregate(mainDB)
	shopshipmentpricelistCommandBus := shopshipmentpricelist.AggregateMessageBus(shopshipmentpricelistAggregate)
	shipmentPriceService := &admin.ShipmentPriceService{
		ShipmentManager:            shipmentManager,
		ShipmentPriceAggr:          shipmentpriceCommandBus,
		ShipmentPriceQuery:         shipmentpriceQueryBus,
		ShipmentServiceQuery:       shipmentserviceQueryBus,
		ShipmentServiceAggr:        shipmentserviceCommandBus,
		ShipmentPriceListAggr:      pricelistCommandBus,
		ShipmentPriceListQuery:     pricelistQueryBus,
		ShipmentSubPriceListQuery:  subpricelistQueryBus,
		ShipmentSubPriceListAggr:   subpricelistCommandBus,
		ShopShipmentPriceListQuery: shopshipmentpricelistQueryBus,
		ShopShipmentPriceListAggr:  shopshipmentpricelistCommandBus,
	}
	locationAggregate := location.NewAggregate(mainDB)
	locationCommandBus := location.AggregateMessageBus(locationAggregate)
	adminLocationService := &admin.LocationService{
		LocationAggr:  locationCommandBus,
		LocationQuery: queryBus,
	}
	subrProductAggregate := subscriptionproduct.NewSubrProductAggregate(mainDB)
	subscriptionproductCommandBus := subscriptionproduct.SubrProductAggregateMessageBus(subrProductAggregate)
	subrPlanAggregate := subscriptionplan.NewSubrPlanAggregate(mainDB)
	subscriptionplanCommandBus := subscriptionplan.SubrPlanAggregateMessageBus(subrPlanAggregate)
	subscriptionAggregate := subscription.NewSubscriptionAggregate(mainDB)
	subscriptionCommandBus := subscription.SubscriptionAggregateMessageBus(subscriptionAggregate)
	aggregate23 := aggregate19.NewAggregate(mainDB)
	paymentCommandBus := aggregate19.AggregateMessageBus(aggregate23)
	subrBillAggregate := subscriptionbill.NewSubrBillAggregate(mainDB, eventBus, paymentCommandBus, subscriptionQueryBus, subscriptionplanQueryBus)
	subscriptionbillCommandBus := subscriptionbill.SubrBillAggregateMessageBus(subrBillAggregate)
	subrBillQuery := subscriptionbill.NewSubrBillQuery(mainDB)
	subscriptionbillQueryBus := subscriptionbill.SubrBillQueryMessageBus(subrBillQuery)
	adminSubscriptionService := &admin.SubscriptionService{
		SubrProductAggr:   subscriptionproductCommandBus,
		SubrProductQuery:  subscriptionproductQueryBus,
		SubrPlanAggr:      subscriptionplanCommandBus,
		SubrPlanQuery:     subscriptionplanQueryBus,
		SubscriptionQuery: subscriptionQueryBus,
		SubscriptionAggr:  subscriptionCommandBus,
		SubrBillAggr:      subscriptionbillCommandBus,
		SubrBillQuery:     subscriptionbillQueryBus,
	}
	adminServers := admin.NewServers(adminMiscService, adminAccountService, adminOrderService, adminFulfillmentService, adminMoneyTransactionService, shopService, creditService, adminNotificationService, adminConnectionService, shipmentPriceService, adminLocationService, adminSubscriptionService)
	session := NewSession(cfg, redisStore)
	sadminMiscService := &sadmin.MiscService{
		Session: session,
	}
	sadminUserService := &sadmin.UserService{
		Session: session,
	}
	sadminServers := sadmin.NewServers(sadminMiscService, sadminUserService)
	integrationMiscService := &integration.MiscService{}
	integrationService := &integration.IntegrationService{
		AuthStore:  generator,
		TokenStore: tokenStore,
		SMSClient:  smsClient,
	}
	integrationServers, cleanup3 := integration.NewIntegrationServer(redisStore, integrationMiscService, integrationService)
	affiliateMiscService := affiliate.MiscService{}
	affiliateAccountService := affiliate.AccountService{
		IdentityAggr: commandBus,
	}
	affiliateServers := affiliate.NewServers(affiliateMiscService, affiliateAccountService)
	secretToken := cfg.Secret
	affiliateAggregate := affiliate2.NewAggregate(mainDB, identityQueryBus, catalogQueryBus, orderingQueryBus)
	affiliateCommandBus := affiliate2.AggregateMessageBus(affiliateAggregate)
	apiUserService := &api2.UserService{
		AffiliateAggr: affiliateCommandBus,
	}
	affiliateQueryService := affiliate2.NewQuery(mainDB)
	affiliateQueryBus := affiliate2.QueryServiceMessageBus(affiliateQueryService)
	apiTradingService := &api2.TradingService{
		AffiliateAggr:  affiliateCommandBus,
		AffiliateQuery: affiliateQueryBus,
		CatalogQuery:   catalogQueryBus,
		InventoryQuery: inventoryQueryBus,
	}
	apiShopService := &api2.ShopService{
		CatalogQuery:   catalogQueryBus,
		InventoryQuery: inventoryQueryBus,
		AffiliateQuery: affiliateQueryBus,
	}
	affiliateService := &api2.AffiliateService{
		AffiliateAggr:  affiliateCommandBus,
		CatalogQuery:   catalogQueryBus,
		AffiliateQuery: affiliateQueryBus,
		IdentityQuery:  identityQueryBus,
	}
	apiServers := api2.NewServers(secretToken, apiUserService, apiTradingService, apiShopService, affiliateService)
	shippingShipping := shipping.New(queryBus, mainDB, shipmentManager, shippingCommandBus, shippingQueryBus, orderLogic)
	partnerMiscService := &partner.MiscService{
		Shipping: shippingShipping,
	}
	partnerShopService := &partner.ShopService{}
	producer, err := BindProducer(ctx, cfg)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	webhookService := webhook.New(producer, redisStore)
	partnerWebhookService := &partner.WebhookService{
		WebhookInner: webhookService,
	}
	partnerHistoryService := &partner.HistoryService{}
	shippingService := &partner.ShippingService{
		Shipping: shippingShipping,
	}
	partnerOrderService := &partner.OrderService{
		Shipping: shippingShipping,
	}
	partnerFulfillmentService := &partner.FulfillmentService{
		Shipping: shippingShipping,
	}
	shoppingShopping := &shopping.Shopping{
		LocationQuery:     queryBus,
		CustomerQuery:     customeringQueryBus,
		CustomerAggregate: customeringCommandBus,
		AddressQuery:      addressingQueryBus,
		AddressAggregate:  addressingCommandBus,
		InventoryQuery:    inventoryQueryBus,
		CatalogQuery:      catalogQueryBus,
		CatalogAggregate:  catalogCommandBus,
	}
	partnerCustomerService := &partner.CustomerService{
		Shopping: shoppingShopping,
	}
	customerAddressService := &partner.CustomerAddressService{
		Shopping: shoppingShopping,
	}
	partnerCustomerGroupService := &partner.CustomerGroupService{
		Shopping: shoppingShopping,
	}
	customerGroupRelationshipService := &partner.CustomerGroupRelationshipService{
		Shopping: shoppingShopping,
	}
	partnerInventoryService := &partner.InventoryService{
		Shopping: shoppingShopping,
	}
	variantService := &partner.VariantService{
		Shopping: shoppingShopping,
	}
	partnerProductService := &partner.ProductService{
		Shopping: shoppingShopping,
	}
	productCollectionService := &partner.ProductCollectionService{
		Shopping: shoppingShopping,
	}
	productCollectionRelationshipService := &partner.ProductCollectionRelationshipService{
		Shopping: shoppingShopping,
	}
	partnerServers, cleanup4 := partner.NewServers(redisStore, generator, partnerAuthURL, partnerMiscService, partnerShopService, partnerWebhookService, partnerHistoryService, shippingService, partnerOrderService, partnerFulfillmentService, partnerCustomerService, customerAddressService, partnerCustomerGroupService, customerGroupRelationshipService, partnerInventoryService, variantService, partnerProductService, productCollectionService, productCollectionRelationshipService)
	xshopMiscService := &xshop.MiscService{
		Shipping: shippingShipping,
	}
	xshopWebhookService := &xshop.WebhookService{
		WebhookInner: webhookService,
	}
	xshopHistoryService := &xshop.HistoryService{}
	xshopShippingService := &xshop.ShippingService{
		Shipping: shippingShipping,
	}
	xshopOrderService := &xshop.OrderService{
		Shipping: shippingShipping,
	}
	xshopFulfillmentService := &xshop.FulfillmentService{
		Shipping: shippingShipping,
	}
	xshopCustomerService := &xshop.CustomerService{
		Shopping: shoppingShopping,
	}
	xshopCustomerAddressService := &xshop.CustomerAddressService{
		Shopping: shoppingShopping,
	}
	xshopCustomerGroupService := &xshop.CustomerGroupService{
		Shopping: shoppingShopping,
	}
	xshopCustomerGroupRelationshipService := &xshop.CustomerGroupRelationshipService{
		Shopping: shoppingShopping,
	}
	xshopInventoryService := &xshop.InventoryService{
		Shopping: shoppingShopping,
	}
	xshopVariantService := &xshop.VariantService{
		Shopping: shoppingShopping,
	}
	xshopProductService := &xshop.ProductService{
		Shopping: shoppingShopping,
	}
	xshopProductCollectionService := &xshop.ProductCollectionService{
		Shopping: shoppingShopping,
	}
	xshopProductCollectionRelationshipService := &xshop.ProductCollectionRelationshipService{
		Shopping: shoppingShopping,
	}
	xshopServers, cleanup5 := xshop.NewServers(redisStore, shippingShipping, xshopMiscService, xshopWebhookService, xshopHistoryService, xshopShippingService, xshopOrderService, xshopFulfillmentService, xshopCustomerService, xshopCustomerAddressService, xshopCustomerGroupService, xshopCustomerGroupRelationshipService, xshopInventoryService, xshopVariantService, xshopProductService, xshopProductCollectionService, xshopProductCollectionRelationshipService)
	partnercarrierMiscService := &partnercarrier.MiscService{
		Session:  session,
		Shipping: shippingShipping,
	}
	shipmentConnectionService := &partnercarrier.ShipmentConnectionService{
		Session:         session,
		ConnectionQuery: connectioningQueryBus,
		ConnectionAggr:  connectioningCommandBus,
	}
	partnercarrierShipmentService := &partnercarrier.ShipmentService{
		Session:         session,
		ConnectionQuery: connectioningQueryBus,
		ShippingAggr:    shippingCommandBus,
		ShippingQuery:   shippingQueryBus,
	}
	partnercarrierServers, cleanup6 := partnercarrier.NewServers(redisStore, partnercarrierMiscService, shipmentConnectionService, partnercarrierShipmentService)
	importService := partnerimport.New(mainDB, catalogCommandBus)
	partnerimportServers := partnerimport.NewServers(importService)
	etopHandlers := NewEtopHandlers(servers, shopServers, adminServers, sadminServers, integrationServers, affiliateServers, apiServers, partnerServers, xshopServers, partnercarrierServers, partnerimportServers)
	eventStream := eventstream.New(ctx)
	client3 := client2.New(config2)
	vtpayAggregate := vtpay2.NewAggregate(mainDB, orderingQueryBus, orderingCommandBus, paymentCommandBus, client3)
	vtpayCommandBus := vtpay2.AggregateMessageBus(vtpayAggregate)
	aggregate24 := aggregate20.NewAggregate(orderingQueryBus, orderingCommandBus, vtpayCommandBus, client3)
	gatewayCommandBus := aggregate20.AggregateMessageBus(aggregate24)
	aggregate25 := aggregate21.New(logDB)
	serverServer := server.New(gatewayCommandBus, aggregate25)
	imcsvImport := imcsv.Import{
		MoneyTxAggr: moneytxCommandBus,
	}
	ghtkimcsvImport := ghtkimcsv.Import{
		MoneyTxAggr: moneytxCommandBus,
	}
	vtpostimxlsxImport := vtpostimxlsx.Import{
		MoneyTxAggr: moneytxCommandBus,
	}
	uploader, err := NewUploader(cfg)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	import2, cleanup7 := imcsv2.New(queryBus, redisStore, uploader, mainDB)
	import3, cleanup8 := imcsv3.New(redisStore, uploader, mainDB)
	shopImport := imports.New(import2, import3)
	etopServer := NewEtopServer(etopHandlers, cfg, eventStream, serverServer, imcsvImport, ghtkimcsvImport, vtpostimxlsxImport, shopImport, healthServer)
	webServer := NewWebServer(cfg, webserverQueryBus, catalogQueryBus, subscriptionQueryBus, redisStore, queryBus)
	ghnConfig := cfg.GHN
	ghnCarrier := ghn.New(ghnConfig, queryBus)
	webhookWebhook := webhook2.New(mainDB, logDB, ghnCarrier, shipmentManager, identityQueryBus, shippingCommandBus)
	ghnWebhookServer := NewGHNWebhookServer(cfg, shipmentManager, ghnCarrier, identityQueryBus, shippingCommandBus, webhookWebhook)
	ghtkConfig := cfg.GHTK
	ghtkCarrier := ghtk.New(ghtkConfig, queryBus)
	webhook5 := webhook3.New(mainDB, logDB, ghtkCarrier, shipmentManager, identityQueryBus, shippingCommandBus)
	ghtkWebhookServer := NewGHTKWebhookServer(cfg, shipmentManager, ghtkCarrier, identityQueryBus, shippingCommandBus, webhook5)
	vtpostConfig := cfg.VTPost
	vtpostCarrier := vtpost.New(vtpostConfig, queryBus)
	webhook6 := webhook4.New(mainDB, logDB, vtpostCarrier, shipmentManager, identityQueryBus, shippingCommandBus)
	vtPostWebhookServer := NewVTPostWebhookServer(cfg, shipmentManager, vtpostCarrier, identityQueryBus, shippingCommandBus, webhook6)
	ahamoveVerificationFileServer := NewAhamoveVerificationFileServer(ctx, identityQueryBus)
	ahamovewebhookWebhook := ahamovewebhook.New(mainDB, logDB, ahamoveCarrier, shipnowQueryBus, shipnowCommandBus, orderingCommandBus, orderingQueryBus)
	ahamoveWebhookServer := NewAhamoveWebhookServer(cfg, shipmentManager, ahamoveCarrier, identityQueryBus, shipnowQueryBus, shipnowCommandBus, orderingCommandBus, orderingQueryBus, ahamoveVerificationFileServer, ahamovewebhookWebhook)
	v5 := NewServers(store, middlewareMiddleware, captchaCaptcha, etopServer, webServer, ghnWebhookServer, ghtkWebhookServer, vtPostWebhookServer, ahamoveWebhookServer)
	return v5, func() {
		cleanup8()
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireEventStreamValue = new(eventstream.EventStream)
)
