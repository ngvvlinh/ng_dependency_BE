// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package table_name

import (
	driver "database/sql/driver"
	fmt "fmt"

	dot "etop.vn/capi/dot"
	mix "etop.vn/capi/mix"
)

var __jsonNull = []byte("null")

var enumTableNameName = map[int]string{
	0: "user",
	1: "account",
	2: "shop_customer",
	3: "order",
	4: "shop",
	5: "fulfillment",
	6: "shop_brand",
	7: "shop_product",
}

var enumTableNameValue = map[string]int{
	"user":          0,
	"account":       1,
	"shop_customer": 2,
	"order":         3,
	"shop":          4,
	"fulfillment":   5,
	"shop_brand":    6,
	"shop_product":  7,
}

func ParseTableName(s string) (TableName, bool) {
	val, ok := enumTableNameValue[s]
	return TableName(val), ok
}

func ParseTableNameWithDefault(s string, d TableName) TableName {
	val, ok := enumTableNameValue[s]
	if !ok {
		return d
	}
	return TableName(val)
}

func (e TableName) Apply(d TableName) TableName {
	if e == 0 {
		return d
	}
	return e
}

func (e TableName) Enum() int {
	return int(e)
}

func (e TableName) Name() string {
	return enumTableNameName[e.Enum()]
}

func (e TableName) String() string {
	s, ok := enumTableNameName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("TableName(%v)", e.Enum())
}

func (e TableName) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumTableNameName[e.Enum()] + "\""), nil
}

func (e *TableName) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumTableNameValue, data, "TableName")
	if err != nil {
		return err
	}
	*e = TableName(value)
	return nil
}

func (e TableName) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *TableName) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumTableNameValue, src, "TableName")
	*e = (TableName)(value)
	return err
}

func (e TableName) Wrap() NullTableName {
	return WrapTableName(e)
}

func ParseTableNameWithNull(s dot.NullString, d TableName) NullTableName {
	if !s.Valid {
		return NullTableName{}
	}
	val, ok := enumTableNameValue[s.String]
	if !ok {
		return d.Wrap()
	}
	return TableName(val).Wrap()
}

func WrapTableName(enum TableName) NullTableName {
	return NullTableName{Enum: enum, Valid: true}
}

func (n NullTableName) Apply(s TableName) TableName {
	if n.Valid {
		return n.Enum
	}
	return s
}

func (n NullTableName) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Enum.Value()
}

func (n *NullTableName) Scan(src interface{}) error {
	if src == nil {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.Scan(src)
}

func (n NullTableName) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return n.Enum.MarshalJSON()
	}
	return __jsonNull, nil
}

func (n *NullTableName) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.Enum, n.Valid = 0, false
		return nil
	}
	n.Valid = true
	return n.Enum.UnmarshalJSON(data)
}
