// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package build

import (
	"context"
	"o.o/backend/cmd/telecom-sync-service/config"
	"o.o/backend/cogs/shipment/_all"
	"o.o/backend/cogs/telecom/_all"
	aggregate2 "o.o/backend/com/etelecom/aggregate"
	"o.o/backend/com/etelecom/provider"
	query2 "o.o/backend/com/etelecom/query"
	"o.o/backend/com/main"
	"o.o/backend/com/main/connectioning/aggregate"
	"o.o/backend/com/main/connectioning/manager"
	"o.o/backend/com/main/connectioning/pm"
	"o.o/backend/com/main/connectioning/query"
	query3 "o.o/backend/com/main/contact/query"
	"o.o/backend/com/main/identity"
	"o.o/backend/pkg/common/apifw/health"
	"o.o/backend/pkg/common/bus"
	"o.o/backend/pkg/common/redis"
)

// Injectors from wire.go:

func Build(ctx context.Context, cfg config.Config) (Output, func(), error) {
	redisRedis := cfg.Redis
	store := redis.Connect(redisRedis)
	service := health.New(store)
	v := BuildServers(cfg, service)
	databases := cfg.Databases
	mainDB, err := com.BuildDatabaseMain(databases)
	if err != nil {
		return Output{}, nil, err
	}
	busBus := bus.New()
	mapShipmentServices := shipment_all.SupportedShipmentServices()
	connectionQuery := query.NewConnectionQuery(mainDB, mapShipmentServices)
	queryBus := query.ConnectionQueryMessageBus(connectionQuery)
	connectionManager := manager.NewConnectionManager(store, queryBus)
	driver := _all.SupportedTelecomDriver(busBus)
	connectionAggregate := aggregate.NewConnectionAggregate(mainDB, busBus)
	commandBus := aggregate.ConnectionAggregateMessageBus(connectionAggregate)
	queryService := identity.NewQueryService(mainDB)
	identityQueryBus := identity.QueryServiceMessageBus(queryService)
	etelecomDB, err := com.BuildDatabaseEtelecomDB(databases)
	if err != nil {
		return Output{}, nil, err
	}
	queryQueryService := query2.NewQueryService(etelecomDB, queryBus)
	etelecomQueryBus := query2.QueryServiceMessageBus(queryQueryService)
	telecomManager, err := provider.NewTelecomManager(busBus, connectionManager, driver, queryBus, commandBus, identityQueryBus, etelecomQueryBus)
	if err != nil {
		return Output{}, nil, err
	}
	contactQuery := query3.NewContactQuery(mainDB)
	contactQueryBus := query3.ContactQueryMessageBus(contactQuery)
	etelecomAggregate := aggregate2.NewEtelecomAggregate(etelecomDB, busBus, contactQueryBus, telecomManager)
	etelecomCommandBus := aggregate2.AggregateMessageBus(etelecomAggregate)
	v2 := BuildSyncs(ctx, mainDB, telecomManager, etelecomQueryBus, etelecomCommandBus, commandBus)
	processManager := pm.New(busBus, commandBus, queryBus)
	output := Output{
		Servers:       v,
		Health:        service,
		TelecomSyncs:  v2,
		_connectionPM: processManager,
	}
	return output, func() {
	}, nil
}
