// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package build

import (
	"context"
	"o.o/backend/cmd/shipment-sync-service/config"
	"o.o/backend/cogs/shipment/_all"
	"o.o/backend/com/main"
	"o.o/backend/com/main/address"
	"o.o/backend/com/main/connectioning/aggregate"
	"o.o/backend/com/main/connectioning/manager"
	"o.o/backend/com/main/connectioning/query"
	"o.o/backend/com/main/identity"
	"o.o/backend/com/main/location"
	"o.o/backend/com/main/ordering"
	"o.o/backend/com/main/shipmentpricing/pricelist"
	"o.o/backend/com/main/shipmentpricing/pricelistpromotion"
	"o.o/backend/com/main/shipmentpricing/shipmentprice"
	"o.o/backend/com/main/shipmentpricing/shipmentservice"
	"o.o/backend/com/main/shipmentpricing/shopshipmentpricelist"
	aggregate2 "o.o/backend/com/main/shipping/aggregate"
	"o.o/backend/com/main/shipping/carrier"
	"o.o/backend/com/main/shipping/pm"
	query3 "o.o/backend/com/main/shipping/query"
	query2 "o.o/backend/com/main/shippingcode/query"
	"o.o/backend/pkg/common/apifw/health"
	"o.o/backend/pkg/common/bus"
	"o.o/backend/pkg/common/redis"
	"o.o/backend/pkg/etop/sqlstore"
)

// Injectors from wire.go:

func Build(ctx context.Context, cfg config.Config) (Output, func(), error) {
	redisRedis := cfg.Redis
	store := redis.Connect(redisRedis)
	service := health.New(store)
	v := BuildServers(cfg, service)
	databases := cfg.Databases
	mainDB, err := com.BuildDatabaseMain(databases)
	if err != nil {
		return Output{}, nil, err
	}
	busBus := bus.New()
	locationQuery := location.New(mainDB)
	queryBus := location.QueryMessageBus(locationQuery)
	queryService := identity.NewQueryService(mainDB)
	identityQueryBus := identity.QueryServiceMessageBus(queryService)
	mapShipmentServices := shipment_all.SupportedShipmentServices()
	connectionQuery := query.NewConnectionQuery(mainDB, mapShipmentServices)
	connectioningQueryBus := query.ConnectionQueryMessageBus(connectionQuery)
	connectionAggregate := aggregate.NewConnectionAggregate(mainDB, busBus)
	commandBus := aggregate.ConnectionAggregateMessageBus(connectionAggregate)
	queryQueryService := query2.NewQueryService(mainDB)
	shippingcodeQueryBus := query2.QueryServiceMessageBus(queryQueryService)
	shipmentserviceQueryService := shipmentservice.NewQueryService(mainDB, store)
	shipmentserviceQueryBus := shipmentservice.QueryServiceMessageBus(shipmentserviceQueryService)
	pricelistQueryService := pricelist.NewQueryService(mainDB, store)
	pricelistQueryBus := pricelist.QueryServiceMessageBus(pricelistQueryService)
	shopshipmentpricelistQueryService := shopshipmentpricelist.NewQueryService(mainDB, store)
	shopshipmentpricelistQueryBus := shopshipmentpricelist.QueryServiceMessageBus(shopshipmentpricelistQueryService)
	shipmentpriceQueryService := shipmentprice.NewQueryService(mainDB, store, queryBus, pricelistQueryBus, shopshipmentpricelistQueryBus)
	shipmentpriceQueryBus := shipmentprice.QueryServiceMessageBus(shipmentpriceQueryService)
	pricelistpromotionQueryService := pricelistpromotion.NewQueryService(mainDB, store, queryBus, identityQueryBus, shopshipmentpricelistQueryBus, pricelistQueryBus)
	pricelistpromotionQueryBus := pricelistpromotion.QueryServiceMessageBus(pricelistpromotionQueryService)
	driver := shipment_all.SupportedCarrierDriver()
	connectionManager := manager.NewConnectionManager(store, connectioningQueryBus)
	addressStore := &sqlstore.AddressStore{
		DB: mainDB,
	}
	userStore := sqlstore.BuildUserStore(mainDB)
	userStoreInterface := sqlstore.BindUserStore(userStore)
	accountStore := &sqlstore.AccountStore{
		DB:           mainDB,
		EventBus:     busBus,
		AddressStore: addressStore,
		UserStore:    userStoreInterface,
	}
	accountStoreInterface := sqlstore.BindAccountStore(accountStore)
	shopStore := &sqlstore.ShopStore{
		DB: mainDB,
	}
	shopStoreInterface := sqlstore.BindShopStore(shopStore)
	orderStore := &sqlstore.OrderStore{
		DB:           mainDB,
		LocationBus:  queryBus,
		AccountStore: accountStoreInterface,
		ShopStore:    shopStoreInterface,
	}
	orderStoreInterface := sqlstore.BindOrderStore(orderStore)
	shipmentManager, err := carrier.NewShipmentManager(busBus, queryBus, identityQueryBus, connectioningQueryBus, commandBus, shippingcodeQueryBus, shipmentserviceQueryBus, shipmentpriceQueryBus, pricelistpromotionQueryBus, driver, connectionManager, orderStoreInterface)
	if err != nil {
		return Output{}, nil, err
	}
	queryService2 := query3.NewQueryService(mainDB, shipmentManager, connectioningQueryBus)
	shippingQueryBus := query3.QueryServiceMessageBus(queryService2)
	orderingQueryService := ordering.NewQueryService(mainDB)
	orderingQueryBus := ordering.QueryServiceMessageBus(orderingQueryService)
	addressQueryService := address.NewQueryAddress(mainDB, busBus)
	addressQueryBus := address.QueryServiceMessageBus(addressQueryService)
	aggregateAggregate := aggregate2.NewAggregate(mainDB, busBus, queryBus, orderingQueryBus, shipmentManager, connectioningQueryBus, identityQueryBus, addressQueryBus)
	shippingCommandBus := aggregate2.AggregateMessageBus(aggregateAggregate)
	dhlSync := BuildSyncs(ctx, mainDB, shipmentManager, shippingQueryBus, shippingCommandBus)
	accountUserStore := &sqlstore.AccountUserStore{
		DB: mainDB,
	}
	accountUserStoreInterface := sqlstore.BindAccountUserStore(accountUserStore)
	moneyTxStore := &sqlstore.MoneyTxStore{
		DB:               mainDB,
		EventBus:         busBus,
		AccountUserStore: accountUserStoreInterface,
		ShopStore:        shopStoreInterface,
		OrderStore:       orderStoreInterface,
	}
	moneyTxStoreInterface := sqlstore.BindMoneyTxStore(moneyTxStore)
	processManager := pm.New(busBus, shippingQueryBus, shippingCommandBus, store, connectioningQueryBus, shopStoreInterface, moneyTxStoreInterface)
	output := Output{
		Servers:     v,
		Health:      service,
		DHLSync:     dhlSync,
		_shippingPM: processManager,
	}
	return output, func() {
	}, nil
}
