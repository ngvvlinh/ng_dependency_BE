package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	lc "o.o/api/main/location"
	"o.o/backend/cmd/etop-server/config"
	"o.o/backend/com/main/location"
	locationlist "o.o/backend/com/main/location/list"
	"o.o/common/l"
	"os"
	"path/filepath"
)

type NTXProvince struct {
	ID           int    `json:"id"`
	CountryID    int    `json:"country_id"`
	ZoneID       int    `json:"zone_id"`
	ProvinceName string `json:"province_name"`
}

type NTXDistrict struct {
	ID           int    `json:"id"`
	ProvinceID   int    `json:"province_id"`
	DistrictName string `json:"district_name"`
}

type NTXWard struct {
	ID         int    `json:"id"`
	DistrictID int    `json:"district_id"`
	WardName   string `json:"ward_name"`
}

var (
	cfg             config.Config
	ll              = l.New()
	ntxProvincesMap = make(map[int]*NTXProvince)
	ntxDistrictsMap = make(map[int]*NTXDistrict)
	ntxWardsMap     = make(map[int]*NTXWard)
)

func main() {
	gopath := os.Getenv("GOPATH")
	if gopath == "" {
		panic("No GOPATH")
	}

	{
		fileNTXProvince, err := os.Open(filepath.Join(gopath, "src/gitlab.com/eb2b.vn/backend/scripts/once/ntx_location/list_ntx_provinces.json"))
		if err != nil {
			panic(err)
		}

		var NTXProvines []*NTXProvince
		rawProvinces, err := ioutil.ReadAll(fileNTXProvince)
		if err != nil {
			panic(err)
		}

		_ = json.Unmarshal(rawProvinces, &NTXProvines)
		for _, p := range NTXProvines {
			ntxProvincesMap[p.ID] = p
		}

		//buildProvinces(NTXProvines)
	}

	{
		fileNTXDistrict, err := os.Open(filepath.Join(gopath, "src/gitlab.com/eb2b.vn/backend/scripts/once/ntx_location/list_ntx_districts.json"))
		if err != nil {
			panic(err)
		}

		var NTXDistricts []*NTXDistrict
		rawDistricts, err := ioutil.ReadAll(fileNTXDistrict)
		if err != nil {
			panic(err)
		}

		_ = json.Unmarshal(rawDistricts, &NTXDistricts)
		for _, d := range NTXDistricts {
			ntxDistrictsMap[d.ID] = d
		}

		//buildDistricts(NTXDistricts)
	}

	{
		fileNTXWard, err := os.Open(filepath.Join(gopath, "src/gitlab.com/eb2b.vn/backend/scripts/once/ntx_location/list_ntx_wards.json"))
		if err != nil {
			panic(err)
		}

		var NTXWards []*NTXWard
		rawWards, err := ioutil.ReadAll(fileNTXWard)
		if err != nil {
			panic(err)
		}

		_ = json.Unmarshal(rawWards, &NTXWards)
		for _, w := range NTXWards {
			ntxWardsMap[w.ID] = w
		}

		buildWards(NTXWards)
	}
}

func buildProvinces(ntxProvinces []*NTXProvince) {
	fmt.Printf("// Code generated by `go run ./scripts/ntx_location/main.go` DO NOT EDIT.\n\n")
	{
		count := 0
		for _, p := range ntxProvinces {
			loc := location.FindLocation(p.ProvinceName, "", "")
			if loc.Province == nil {
				fmt.Printf("// NTX Province not found: %v | %v\n", p.ID, p.ProvinceName)
				count++
				continue
			}

			loc.Province.NTXID = p.ID
		}

		fmt.Printf("// Total NTX Province not found: %v/%v\n", count, len(ntxProvinces))
	}

	{
		countNTX := 0
		for _, p := range locationlist.Provinces {
			if p.NTXID == 0 {
				fmt.Printf("// Province without NTX: %v | %v\n", p.Code, p.Name)
				countNTX++
			}
		}
		fmt.Printf("// Total NTX: %v/%v\n\n", countNTX, len(locationlist.Provinces))
	}

	fmt.Printf("package location\n\nvar Countries = []*Country{{Name: CountryVietnam}}\n\nvar Provinces = []*Province{\n")
	for _, p := range locationlist.Provinces {
		fmt.Printf(`{
	Code: "%v",
	Region: %v,
	Name: "%v",
	VTPostID: %v,
	HaravanCode: "%v",
	NTXID: %v,
`, p.Code, ProvinceRegionName[p.Region], p.Name, p.VTPostID, p.HaravanCode, p.NTXID)
		if p.Special {
			fmt.Printf("\tSpecial: %v,\n", p.Special)
		}
		if len(p.Alias) > 0 {
			fmt.Printf("\tAlias: %#v,\n", p.Alias)
		}
		fmt.Print("},\n")
	}
	fmt.Printf("}\n")
}

func buildDistricts(ntxDistricts []*NTXDistrict) {
	{
		count := 0
		for _, d := range ntxDistricts {
			province := ntxProvincesMap[d.ProvinceID]
			loc := location.FindLocation(province.ProvinceName, d.DistrictName, "")
			if loc.District == nil {
				fmt.Printf("// NTX District not found: %v %v | %v\n", d.ID, d.DistrictName, province.ProvinceName)
				count++
				continue
			}

			loc.District.NTXID = d.ID
		}

		fmt.Printf("// Total NTX District not found: %v/%v\n", count, len(ntxDistricts))
	}

	{
		countNTX := 0
		for _, d := range locationlist.Districts {
			if d.NTXID == 0 {
				fmt.Printf("// District without ntx: %v %v | %v\n", d.Code, d.Name, d.ProvinceCode)
				countNTX++
			}
		}

		fmt.Printf("// Total NTX: %v/%v\n\n", countNTX, len(locationlist.Districts))
	}

	fmt.Printf("package location\n\nvar Districts = []*District{\n")
	for _, d := range locationlist.Districts {
		fmt.Printf(`{
	Code: "%v",
	ProvinceCode: "%v",
	Name: "%v",
`, d.Code, d.ProvinceCode, d.Name)
		if d.GhnID != 0 {
			fmt.Printf("\tGhnID: %#v,\n", d.GhnID)
		}

		if d.VTPostID != 0 {
			fmt.Printf("\tVTPostID: %#v,\n", d.VTPostID)
		}

		if d.NTXID != 0 {
			fmt.Printf("\tNTXID: %#v,\n", d.NTXID)
		}

		if d.HaravanCode != "" {
			fmt.Printf("\tHaravanCode: %#v,\n", fmt.Sprintf("%v", d.HaravanCode))
		}

		if d.UrbanType != 0 {
			fmt.Printf("\tUrbanType: %#v,\n", d.UrbanType)
		}

		if len(d.Alias) > 0 {
			fmt.Printf("\tAlias: %#v,\n", d.Alias)
		}
		fmt.Print("},\n")
	}
	fmt.Printf("}\n")
}

func buildWards(ntxWards []*NTXWard) {
	{
		count := 0
		for _, w := range ntxWards {
			district := ntxDistrictsMap[w.DistrictID]
			if district == nil {
				//fmt.Printf("// NTX District not found: %v \n", w.DistrictID)
				//count++
				continue
			}
			province := ntxProvincesMap[district.ProvinceID]
			if province == nil {
				//fmt.Printf("// NTX Province not found: %v \n", district.ProvinceID)
				//count++
				continue
			}

			loc := location.FindLocation(province.ProvinceName, district.DistrictName, w.WardName)
			if loc.Ward == nil {
				fmt.Printf("// NTX Ward not found: %v %v | %v\n", province.ProvinceName, district.DistrictName, w.WardName)
				count++
				continue
			}

			loc.Ward.NTXID = w.ID
		}

		fmt.Printf("// Total NTX Ward not found: %v/%v\n", count, len(ntxWards))
	}

	{
		countNTX := 0
		for _, w := range locationlist.Wards {
			if w.NTXID == 0 {
				fmt.Printf("// Ward without ntx: %v | %v\n", w.Code, w.Name)
				countNTX++
			}
		}
		fmt.Printf("// Total Ward not found NTXID: %v/%v\n\n", countNTX, len(locationlist.Wards))
	}

	fmt.Printf("package location\n\nvar Wards = []*Ward{\n")
	for _, w := range locationlist.Wards {
		fmt.Printf(`{
		Code: "%v",
		DistrictCode: "%v",
		Name: "%v",
	`, w.Code, w.DistrictCode, w.Name)
		if w.GhnCode != "" {
			fmt.Printf("\tGhnCode: %#v,\n", fmt.Sprintf("%v", w.GhnCode))
		}

		if w.HaravanCode != "" {
			fmt.Printf("\tHaravanCode: %#v,\n", fmt.Sprintf("%v", w.HaravanCode))
		}

		if w.VTPostID != 0 {
			fmt.Printf("\tVTPostID: %#v,\n", w.VTPostID)
		}

		if w.NTXID != 0 {
			fmt.Printf("\tNTXID: %#v,\n", w.NTXID)
		}

		if len(w.Alias) > 0 {
			fmt.Printf("\tAlias: %#v,\n", w.Alias)
		}

		fmt.Printf("},")
	}
	fmt.Printf("}\n")
}

var ProvinceRegionName = map[lc.VietnamRegion]string{
	1: "location.North",
	2: "location.Middle",
	3: "location.South",
}
