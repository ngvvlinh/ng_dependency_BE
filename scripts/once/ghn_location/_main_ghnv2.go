package main

import (
	"context"
	"flag"
	"fmt"
	"os"

	"o.o/backend/cmd/etop-server/config"
	"o.o/backend/com/main/location"
	locationlist "o.o/backend/com/main/location/list"
	"o.o/backend/com/main/location/types"
	"o.o/backend/pkg/common/apifw/whitelabel/wl"
	"o.o/backend/pkg/common/cmenv"
	cc "o.o/backend/pkg/common/config"
	ghnclient "o.o/backend/pkg/integration/shipping/ghn/clientv2"
	vtpostClient "o.o/backend/pkg/integration/shipping/vtpost/client"
	"o.o/common/l"
)

var (
	cfg                config.Config
	ll                 = l.New()
	vtpostProvincesMap = make(map[int]*vtpostClient.Province)
	vtpostDistrictsMap = make(map[int]*vtpostClient.District)
)

type District struct {
	Code             string
	DistrictID       int
	DistrictName     string
	ProvinceName     string
	IsRepresentative bool
}

func main() {
	gopath := os.Getenv("GOPATH")
	if gopath == "" {
		panic("No GOPATH")
	}
	cc.InitFlags()
	flag.Parse()

	var err error
	cfg, err = config.Load(true)
	if err != nil {
		ll.Fatal("Unable to load config", l.Error(err))
	}

	ctx := context.Background()
	_ = wl.Init(cmenv.EnvDev, wl.FaboServer)
	ghnAccountCfg := ghnclient.GHNAccountCfg{
		ClientID: 0,
		ShopID:   0,
		Token:    "{ghnToken}",
	}
	ghnClient := ghnclient.New(cfg.SharedConfig.Env, ghnAccountCfg)
	buildWards(ctx, ghnClient)
}

func buildWards(ctx context.Context, ghnClient *ghnclient.Client) {
	// TODO(ngoc): check missing district GHN

	// key: districtCode
	mapDistrict := make(map[string]*types.District)
	{
		for _, district := range locationlist.Districts {
			mapDistrict[district.Code] = district
		}
	}

	mapDistrictAndWard := make(map[string]map[string]*types.Ward)
	{
		for _, ward := range locationlist.Wards {
			if mapDistrictAndWard[ward.DistrictCode] == nil {
				mapDistrictAndWard[ward.DistrictCode] = make(map[string]*types.Ward)
			}
			mapDistrictAndWard[ward.DistrictCode][ward.Code] = ward
		}
	}
	{
		for _, district := range mapDistrict {
			districtID := district.GhnID
			getWardRequest := &ghnclient.GetWardsRequest{
				DistrictID: districtID,
			}
			resp, err := ghnClient.GetWards(ctx, getWardRequest)
			if err != nil {
				panic(err)
			}

			wardInfos := *resp

			for _, ward := range wardInfos {
				currWard := location.FindWardByDistrictCode(ward.WardName.String(), district.Code)
				if currWard != nil {
					mapDistrictAndWard[currWard.DistrictCode][currWard.Code].GHNCode = ward.WardCode.String()
				} else {
				}
			}
		}
	}

	fmt.Printf("// Code generated by `go run ./scripts/ghn_location/main.go` DO NOT EDIT.\n\n")
	{
		count := 0
		for _, vtWard := range locationlist.VTPostWards {
			ward := location.FindWardByDistrictCode(vtWard.WardsName, vtWard.EtopDistrictCode)
			if ward == nil {
				// fmt.Printf("// VTPost Ward not found: %v | %v\n", vtWard.WardsID, vtWard.WardsName)
				count++
				continue
			}
			ward.VTPostID = vtWard.WardsID
		}
		// fmt.Printf("// -- Total VTPost Ward not found: %v/%v\n", count, len(location.VTPostWards))
	}
	{
		countVTPost := 0
		for _, w := range locationlist.Wards {
			if w.VTPostID == 0 {
				fmt.Printf("// Ward without vtpost: %v | %v\n", w.Code, w.Name)
				countVTPost++
			}
		}
		fmt.Printf("// Total Ward not found VTPostID: %v/%v\n\n", countVTPost, len(locationlist.Wards))
	}
	{
		countGHN := 0
		for _, w := range locationlist.Wards {
			if w.GHNCode == "" {
				fmt.Printf("// Ward without GHN: %v | %v\n", w.Code, w.Name)
				countGHN++
			}
		}
		fmt.Printf("// Total Ward not found GHN: %v/%v\n\n", countGHN, len(locationlist.Wards))
	}

	fmt.Printf("package location\n\nvar Wards = []*Ward{\n")
	for _, w := range locationlist.Wards {
		GHNCode := mapDistrictAndWard[w.DistrictCode][w.Code].GHNCode
		fmt.Printf(`{
		Code: "%v",
		DistrictCode: "%v",
		Name: "%v",
		VTPostID: %v,
	    HaravanCode: "%v",
		GHNCode: %v,
	`, w.Code, w.DistrictCode, w.Name, w.VTPostID, w.HaravanCode, GHNCode)
		if len(w.Alias) > 0 {
			fmt.Printf("\tAlias: %#v,\n", w.Alias)
		}
		fmt.Printf("},")
	}
	fmt.Printf("}\n")
}

func must(err error) {
	if err != nil {
		panic(err)
	}
}
