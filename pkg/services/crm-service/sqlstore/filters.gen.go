// Generated by common/sq. DO NOT EDIT.

package sqlstore

import (
	"time"

	"etop.vn/backend/pkg/common/sq"
)

type EtopAcountFilters struct{ prefix string }

func NewEtopAcountFilters(prefix string) EtopAcountFilters {
	return EtopAcountFilters{prefix}
}

func (ft *EtopAcountFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(&ft.prefix, pred, args...)
}

func (ft EtopAcountFilters) Prefix() string {
	return ft.prefix
}

func (ft *EtopAcountFilters) ByID(ID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == "",
	}
}

func (ft *EtopAcountFilters) ByIDPtr(ID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == "",
	}
}

func (ft *EtopAcountFilters) ByFullName(FullName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "full_name",
		Value:  FullName,
		IsNil:  FullName == "",
	}
}

func (ft *EtopAcountFilters) ByFullNamePtr(FullName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "full_name",
		Value:  FullName,
		IsNil:  FullName == nil,
		IsZero: FullName != nil && (*FullName) == "",
	}
}

func (ft *EtopAcountFilters) ByPhone(Phone string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "phone",
		Value:  Phone,
		IsNil:  Phone == "",
	}
}

func (ft *EtopAcountFilters) ByPhonePtr(Phone *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "phone",
		Value:  Phone,
		IsNil:  Phone == nil,
		IsZero: Phone != nil && (*Phone) == "",
	}
}

func (ft *EtopAcountFilters) ByEmail(Email string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "email",
		Value:  Email,
		IsNil:  Email == "",
	}
}

func (ft *EtopAcountFilters) ByEmailPtr(Email *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "email",
		Value:  Email,
		IsNil:  Email == nil,
		IsZero: Email != nil && (*Email) == "",
	}
}

func (ft *EtopAcountFilters) ByAccountID(AccountID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == "",
	}
}

func (ft *EtopAcountFilters) ByAccountIDPtr(AccountID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == nil,
		IsZero: AccountID != nil && (*AccountID) == "",
	}
}

func (ft *EtopAcountFilters) ByAcountName(AcountName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "acount_name",
		Value:  AcountName,
		IsNil:  AcountName == "",
	}
}

func (ft *EtopAcountFilters) ByAcountNamePtr(AcountName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "acount_name",
		Value:  AcountName,
		IsNil:  AcountName == nil,
		IsZero: AcountName != nil && (*AcountName) == "",
	}
}

func (ft *EtopAcountFilters) ByAccountType(AccountType string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "account_type",
		Value:  AccountType,
		IsNil:  AccountType == "",
	}
}

func (ft *EtopAcountFilters) ByAccountTypePtr(AccountType *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "account_type",
		Value:  AccountType,
		IsNil:  AccountType == nil,
		IsZero: AccountType != nil && (*AccountType) == "",
	}
}

func (ft *EtopAcountFilters) ByIsOperator(IsOperator bool) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "is_operator",
		Value:  IsOperator,
		IsNil:  bool(!IsOperator),
	}
}

func (ft *EtopAcountFilters) ByIsOperatorPtr(IsOperator *bool) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "is_operator",
		Value:  IsOperator,
		IsNil:  IsOperator == nil,
		IsZero: IsOperator != nil && bool(!(*IsOperator)),
	}
}

func (ft *EtopAcountFilters) ByVtigerAccount(VtigerAccount string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "vtiger_account",
		Value:  VtigerAccount,
		IsNil:  VtigerAccount == "",
	}
}

func (ft *EtopAcountFilters) ByVtigerAccountPtr(VtigerAccount *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "vtiger_account",
		Value:  VtigerAccount,
		IsNil:  VtigerAccount == nil,
		IsZero: VtigerAccount != nil && (*VtigerAccount) == "",
	}
}

type VtigerContactFilters struct{ prefix string }

func NewVtigerContactFilters(prefix string) VtigerContactFilters {
	return VtigerContactFilters{prefix}
}

func (ft *VtigerContactFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(&ft.prefix, pred, args...)
}

func (ft VtigerContactFilters) Prefix() string {
	return ft.prefix
}

func (ft *VtigerContactFilters) ByID(ID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == "",
	}
}

func (ft *VtigerContactFilters) ByIDPtr(ID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == "",
	}
}

func (ft *VtigerContactFilters) ByFirstname(Firstname string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "firstname",
		Value:  Firstname,
		IsNil:  Firstname == "",
	}
}

func (ft *VtigerContactFilters) ByFirstnamePtr(Firstname *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "firstname",
		Value:  Firstname,
		IsNil:  Firstname == nil,
		IsZero: Firstname != nil && (*Firstname) == "",
	}
}

func (ft *VtigerContactFilters) ByContactNo(ContactNo string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "contact_no",
		Value:  ContactNo,
		IsNil:  ContactNo == "",
	}
}

func (ft *VtigerContactFilters) ByContactNoPtr(ContactNo *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "contact_no",
		Value:  ContactNo,
		IsNil:  ContactNo == nil,
		IsZero: ContactNo != nil && (*ContactNo) == "",
	}
}

func (ft *VtigerContactFilters) ByPhone(Phone string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "phone",
		Value:  Phone,
		IsNil:  Phone == "",
	}
}

func (ft *VtigerContactFilters) ByPhonePtr(Phone *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "phone",
		Value:  Phone,
		IsNil:  Phone == nil,
		IsZero: Phone != nil && (*Phone) == "",
	}
}

func (ft *VtigerContactFilters) ByLastname(Lastname string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "lastname",
		Value:  Lastname,
		IsNil:  Lastname == "",
	}
}

func (ft *VtigerContactFilters) ByLastnamePtr(Lastname *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "lastname",
		Value:  Lastname,
		IsNil:  Lastname == nil,
		IsZero: Lastname != nil && (*Lastname) == "",
	}
}

func (ft *VtigerContactFilters) ByMobile(Mobile string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "mobile",
		Value:  Mobile,
		IsNil:  Mobile == "",
	}
}

func (ft *VtigerContactFilters) ByMobilePtr(Mobile *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "mobile",
		Value:  Mobile,
		IsNil:  Mobile == nil,
		IsZero: Mobile != nil && (*Mobile) == "",
	}
}

func (ft *VtigerContactFilters) ByEmail(Email string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "email",
		Value:  Email,
		IsNil:  Email == "",
	}
}

func (ft *VtigerContactFilters) ByEmailPtr(Email *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "email",
		Value:  Email,
		IsNil:  Email == nil,
		IsZero: Email != nil && (*Email) == "",
	}
}

func (ft *VtigerContactFilters) ByLeadsource(Leadsource string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "leadsource",
		Value:  Leadsource,
		IsNil:  Leadsource == "",
	}
}

func (ft *VtigerContactFilters) ByLeadsourcePtr(Leadsource *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "leadsource",
		Value:  Leadsource,
		IsNil:  Leadsource == nil,
		IsZero: Leadsource != nil && (*Leadsource) == "",
	}
}

func (ft *VtigerContactFilters) BySecondaryemail(Secondaryemail string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "secondaryemail",
		Value:  Secondaryemail,
		IsNil:  Secondaryemail == "",
	}
}

func (ft *VtigerContactFilters) BySecondaryemailPtr(Secondaryemail *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "secondaryemail",
		Value:  Secondaryemail,
		IsNil:  Secondaryemail == nil,
		IsZero: Secondaryemail != nil && (*Secondaryemail) == "",
	}
}

func (ft *VtigerContactFilters) ByAssignedUserID(AssignedUserID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "assigned_user_id",
		Value:  AssignedUserID,
		IsNil:  AssignedUserID == "",
	}
}

func (ft *VtigerContactFilters) ByAssignedUserIDPtr(AssignedUserID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "assigned_user_id",
		Value:  AssignedUserID,
		IsNil:  AssignedUserID == nil,
		IsZero: AssignedUserID != nil && (*AssignedUserID) == "",
	}
}

func (ft *VtigerContactFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft *VtigerContactFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft *VtigerContactFilters) ByEtopID(EtopID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "etop_id",
		Value:  EtopID,
		IsNil:  EtopID == 0,
	}
}

func (ft *VtigerContactFilters) ByEtopIDPtr(EtopID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "etop_id",
		Value:  EtopID,
		IsNil:  EtopID == nil,
		IsZero: EtopID != nil && (*EtopID) == 0,
	}
}

func (ft *VtigerContactFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft *VtigerContactFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft *VtigerContactFilters) ByDescription(Description string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == "",
	}
}

func (ft *VtigerContactFilters) ByDescriptionPtr(Description *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == nil,
		IsZero: Description != nil && (*Description) == "",
	}
}

func (ft *VtigerContactFilters) BySource(Source string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "source",
		Value:  Source,
		IsNil:  Source == "",
	}
}

func (ft *VtigerContactFilters) BySourcePtr(Source *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "source",
		Value:  Source,
		IsNil:  Source == nil,
		IsZero: Source != nil && (*Source) == "",
	}
}

func (ft *VtigerContactFilters) ByUsedShippingProvider(UsedShippingProvider string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "used_shipping_provider",
		Value:  UsedShippingProvider,
		IsNil:  UsedShippingProvider == "",
	}
}

func (ft *VtigerContactFilters) ByUsedShippingProviderPtr(UsedShippingProvider *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "used_shipping_provider",
		Value:  UsedShippingProvider,
		IsNil:  UsedShippingProvider == nil,
		IsZero: UsedShippingProvider != nil && (*UsedShippingProvider) == "",
	}
}

func (ft *VtigerContactFilters) ByOrdersPerDay(OrdersPerDay string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "orders_per_day",
		Value:  OrdersPerDay,
		IsNil:  OrdersPerDay == "",
	}
}

func (ft *VtigerContactFilters) ByOrdersPerDayPtr(OrdersPerDay *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "orders_per_day",
		Value:  OrdersPerDay,
		IsNil:  OrdersPerDay == nil,
		IsZero: OrdersPerDay != nil && (*OrdersPerDay) == "",
	}
}

func (ft *VtigerContactFilters) ByCompany(Company string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "company",
		Value:  Company,
		IsNil:  Company == "",
	}
}

func (ft *VtigerContactFilters) ByCompanyPtr(Company *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "company",
		Value:  Company,
		IsNil:  Company == nil,
		IsZero: Company != nil && (*Company) == "",
	}
}

func (ft *VtigerContactFilters) ByCity(City string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "city",
		Value:  City,
		IsNil:  City == "",
	}
}

func (ft *VtigerContactFilters) ByCityPtr(City *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "city",
		Value:  City,
		IsNil:  City == nil,
		IsZero: City != nil && (*City) == "",
	}
}

func (ft *VtigerContactFilters) ByState(State string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "state",
		Value:  State,
		IsNil:  State == "",
	}
}

func (ft *VtigerContactFilters) ByStatePtr(State *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "state",
		Value:  State,
		IsNil:  State == nil,
		IsZero: State != nil && (*State) == "",
	}
}

func (ft *VtigerContactFilters) ByWebsite(Website string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "website",
		Value:  Website,
		IsNil:  Website == "",
	}
}

func (ft *VtigerContactFilters) ByWebsitePtr(Website *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "website",
		Value:  Website,
		IsNil:  Website == nil,
		IsZero: Website != nil && (*Website) == "",
	}
}

func (ft *VtigerContactFilters) ByLane(Lane string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "lane",
		Value:  Lane,
		IsNil:  Lane == "",
	}
}

func (ft *VtigerContactFilters) ByLanePtr(Lane *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "lane",
		Value:  Lane,
		IsNil:  Lane == nil,
		IsZero: Lane != nil && (*Lane) == "",
	}
}

func (ft *VtigerContactFilters) ByCountry(Country string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "country",
		Value:  Country,
		IsNil:  Country == "",
	}
}

func (ft *VtigerContactFilters) ByCountryPtr(Country *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "country",
		Value:  Country,
		IsNil:  Country == nil,
		IsZero: Country != nil && (*Country) == "",
	}
}

func (ft *VtigerContactFilters) BySearchNorm(SearchNorm string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "search_norm",
		Value:  SearchNorm,
		IsNil:  SearchNorm == "",
	}
}

func (ft *VtigerContactFilters) BySearchNormPtr(SearchNorm *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "search_norm",
		Value:  SearchNorm,
		IsNil:  SearchNorm == nil,
		IsZero: SearchNorm != nil && (*SearchNorm) == "",
	}
}

type VtigerAccountFilters struct{ prefix string }

func NewVtigerAccountFilters(prefix string) VtigerAccountFilters {
	return VtigerAccountFilters{prefix}
}

func (ft *VtigerAccountFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(&ft.prefix, pred, args...)
}

func (ft VtigerAccountFilters) Prefix() string {
	return ft.prefix
}

func (ft *VtigerAccountFilters) ByID(ID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == "",
	}
}

func (ft *VtigerAccountFilters) ByIDPtr(ID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == "",
	}
}

func (ft *VtigerAccountFilters) ByUserName(UserName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "user_name",
		Value:  UserName,
		IsNil:  UserName == "",
	}
}

func (ft *VtigerAccountFilters) ByUserNamePtr(UserName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "user_name",
		Value:  UserName,
		IsNil:  UserName == nil,
		IsZero: UserName != nil && (*UserName) == "",
	}
}

func (ft *VtigerAccountFilters) ByFirstName(FirstName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "first_name",
		Value:  FirstName,
		IsNil:  FirstName == "",
	}
}

func (ft *VtigerAccountFilters) ByFirstNamePtr(FirstName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "first_name",
		Value:  FirstName,
		IsNil:  FirstName == nil,
		IsZero: FirstName != nil && (*FirstName) == "",
	}
}

func (ft *VtigerAccountFilters) ByRoleID(RoleID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "role_id",
		Value:  RoleID,
		IsNil:  RoleID == 0,
	}
}

func (ft *VtigerAccountFilters) ByRoleIDPtr(RoleID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "role_id",
		Value:  RoleID,
		IsNil:  RoleID == nil,
		IsZero: RoleID != nil && (*RoleID) == 0,
	}
}

func (ft *VtigerAccountFilters) ByEmail1(Email1 string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "email1",
		Value:  Email1,
		IsNil:  Email1 == "",
	}
}

func (ft *VtigerAccountFilters) ByEmail1Ptr(Email1 *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "email1",
		Value:  Email1,
		IsNil:  Email1 == nil,
		IsZero: Email1 != nil && (*Email1) == "",
	}
}

func (ft *VtigerAccountFilters) BySecondaryemail(Secondaryemail string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "secondaryemail",
		Value:  Secondaryemail,
		IsNil:  Secondaryemail == "",
	}
}

func (ft *VtigerAccountFilters) BySecondaryemailPtr(Secondaryemail *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "secondaryemail",
		Value:  Secondaryemail,
		IsNil:  Secondaryemail == nil,
		IsZero: Secondaryemail != nil && (*Secondaryemail) == "",
	}
}

func (ft *VtigerAccountFilters) ByStatus(Status string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == "",
	}
}

func (ft *VtigerAccountFilters) ByStatusPtr(Status *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == "",
	}
}

type VhtCallHistoryFilters struct{ prefix string }

func NewVhtCallHistoryFilters(prefix string) VhtCallHistoryFilters {
	return VhtCallHistoryFilters{prefix}
}

func (ft *VhtCallHistoryFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(&ft.prefix, pred, args...)
}

func (ft VhtCallHistoryFilters) Prefix() string {
	return ft.prefix
}

func (ft *VhtCallHistoryFilters) ByCdrID(CdrID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "cdr_id",
		Value:  CdrID,
		IsNil:  CdrID == "",
	}
}

func (ft *VhtCallHistoryFilters) ByCdrIDPtr(CdrID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "cdr_id",
		Value:  CdrID,
		IsNil:  CdrID == nil,
		IsZero: CdrID != nil && (*CdrID) == "",
	}
}

func (ft *VhtCallHistoryFilters) ByCallID(CallID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "call_id",
		Value:  CallID,
		IsNil:  CallID == "",
	}
}

func (ft *VhtCallHistoryFilters) ByCallIDPtr(CallID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "call_id",
		Value:  CallID,
		IsNil:  CallID == nil,
		IsZero: CallID != nil && (*CallID) == "",
	}
}

func (ft *VhtCallHistoryFilters) BySipCallID(SipCallID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "sip_call_id",
		Value:  SipCallID,
		IsNil:  SipCallID == "",
	}
}

func (ft *VhtCallHistoryFilters) BySipCallIDPtr(SipCallID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "sip_call_id",
		Value:  SipCallID,
		IsNil:  SipCallID == nil,
		IsZero: SipCallID != nil && (*SipCallID) == "",
	}
}

func (ft *VhtCallHistoryFilters) BySdkCallID(SdkCallID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "sdk_call_id",
		Value:  SdkCallID,
		IsNil:  SdkCallID == "",
	}
}

func (ft *VhtCallHistoryFilters) BySdkCallIDPtr(SdkCallID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "sdk_call_id",
		Value:  SdkCallID,
		IsNil:  SdkCallID == nil,
		IsZero: SdkCallID != nil && (*SdkCallID) == "",
	}
}

func (ft *VhtCallHistoryFilters) ByCause(Cause string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "cause",
		Value:  Cause,
		IsNil:  Cause == "",
	}
}

func (ft *VhtCallHistoryFilters) ByCausePtr(Cause *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "cause",
		Value:  Cause,
		IsNil:  Cause == nil,
		IsZero: Cause != nil && (*Cause) == "",
	}
}

func (ft *VhtCallHistoryFilters) ByQ850Cause(Q850Cause string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "q850_cause",
		Value:  Q850Cause,
		IsNil:  Q850Cause == "",
	}
}

func (ft *VhtCallHistoryFilters) ByQ850CausePtr(Q850Cause *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "q850_cause",
		Value:  Q850Cause,
		IsNil:  Q850Cause == nil,
		IsZero: Q850Cause != nil && (*Q850Cause) == "",
	}
}

func (ft *VhtCallHistoryFilters) ByFromExtension(FromExtension string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "from_extension",
		Value:  FromExtension,
		IsNil:  FromExtension == "",
	}
}

func (ft *VhtCallHistoryFilters) ByFromExtensionPtr(FromExtension *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "from_extension",
		Value:  FromExtension,
		IsNil:  FromExtension == nil,
		IsZero: FromExtension != nil && (*FromExtension) == "",
	}
}

func (ft *VhtCallHistoryFilters) ByToExtension(ToExtension string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "to_extension",
		Value:  ToExtension,
		IsNil:  ToExtension == "",
	}
}

func (ft *VhtCallHistoryFilters) ByToExtensionPtr(ToExtension *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "to_extension",
		Value:  ToExtension,
		IsNil:  ToExtension == nil,
		IsZero: ToExtension != nil && (*ToExtension) == "",
	}
}

func (ft *VhtCallHistoryFilters) ByFromNumber(FromNumber string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "from_number",
		Value:  FromNumber,
		IsNil:  FromNumber == "",
	}
}

func (ft *VhtCallHistoryFilters) ByFromNumberPtr(FromNumber *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "from_number",
		Value:  FromNumber,
		IsNil:  FromNumber == nil,
		IsZero: FromNumber != nil && (*FromNumber) == "",
	}
}

func (ft *VhtCallHistoryFilters) ByToNumber(ToNumber string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "to_number",
		Value:  ToNumber,
		IsNil:  ToNumber == "",
	}
}

func (ft *VhtCallHistoryFilters) ByToNumberPtr(ToNumber *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "to_number",
		Value:  ToNumber,
		IsNil:  ToNumber == nil,
		IsZero: ToNumber != nil && (*ToNumber) == "",
	}
}

func (ft *VhtCallHistoryFilters) ByDuration(Duration int32) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "duration",
		Value:  Duration,
		IsNil:  Duration == 0,
	}
}

func (ft *VhtCallHistoryFilters) ByDurationPtr(Duration *int32) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "duration",
		Value:  Duration,
		IsNil:  Duration == nil,
		IsZero: Duration != nil && (*Duration) == 0,
	}
}

func (ft *VhtCallHistoryFilters) ByDirection(Direction int32) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "direction",
		Value:  Direction,
		IsNil:  Direction == 0,
	}
}

func (ft *VhtCallHistoryFilters) ByDirectionPtr(Direction *int32) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "direction",
		Value:  Direction,
		IsNil:  Direction == nil,
		IsZero: Direction != nil && (*Direction) == 0,
	}
}

func (ft *VhtCallHistoryFilters) ByTimeStarted(TimeStarted time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "time_started",
		Value:  TimeStarted,
		IsNil:  TimeStarted.IsZero(),
	}
}

func (ft *VhtCallHistoryFilters) ByTimeStartedPtr(TimeStarted *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "time_started",
		Value:  TimeStarted,
		IsNil:  TimeStarted == nil,
		IsZero: TimeStarted != nil && (*TimeStarted).IsZero(),
	}
}

func (ft *VhtCallHistoryFilters) ByTimeConnected(TimeConnected time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "time_connected",
		Value:  TimeConnected,
		IsNil:  TimeConnected.IsZero(),
	}
}

func (ft *VhtCallHistoryFilters) ByTimeConnectedPtr(TimeConnected *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "time_connected",
		Value:  TimeConnected,
		IsNil:  TimeConnected == nil,
		IsZero: TimeConnected != nil && (*TimeConnected).IsZero(),
	}
}

func (ft *VhtCallHistoryFilters) ByTimeEnded(TimeEnded time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "time_ended",
		Value:  TimeEnded,
		IsNil:  TimeEnded.IsZero(),
	}
}

func (ft *VhtCallHistoryFilters) ByTimeEndedPtr(TimeEnded *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "time_ended",
		Value:  TimeEnded,
		IsNil:  TimeEnded == nil,
		IsZero: TimeEnded != nil && (*TimeEnded).IsZero(),
	}
}

func (ft *VhtCallHistoryFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft *VhtCallHistoryFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft *VhtCallHistoryFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft *VhtCallHistoryFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft *VhtCallHistoryFilters) ByRecordingPath(RecordingPath string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "recording_path",
		Value:  RecordingPath,
		IsNil:  RecordingPath == "",
	}
}

func (ft *VhtCallHistoryFilters) ByRecordingPathPtr(RecordingPath *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "recording_path",
		Value:  RecordingPath,
		IsNil:  RecordingPath == nil,
		IsZero: RecordingPath != nil && (*RecordingPath) == "",
	}
}

func (ft *VhtCallHistoryFilters) ByRecordingURL(RecordingURL string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "recording_url",
		Value:  RecordingURL,
		IsNil:  RecordingURL == "",
	}
}

func (ft *VhtCallHistoryFilters) ByRecordingURLPtr(RecordingURL *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "recording_url",
		Value:  RecordingURL,
		IsNil:  RecordingURL == nil,
		IsZero: RecordingURL != nil && (*RecordingURL) == "",
	}
}

func (ft *VhtCallHistoryFilters) ByRecordFileSize(RecordFileSize int32) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "record_file_size",
		Value:  RecordFileSize,
		IsNil:  RecordFileSize == 0,
	}
}

func (ft *VhtCallHistoryFilters) ByRecordFileSizePtr(RecordFileSize *int32) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "record_file_size",
		Value:  RecordFileSize,
		IsNil:  RecordFileSize == nil,
		IsZero: RecordFileSize != nil && (*RecordFileSize) == 0,
	}
}

func (ft *VhtCallHistoryFilters) ByEtopAccountID(EtopAccountID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "etop_account_id",
		Value:  EtopAccountID,
		IsNil:  EtopAccountID == 0,
	}
}

func (ft *VhtCallHistoryFilters) ByEtopAccountIDPtr(EtopAccountID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "etop_account_id",
		Value:  EtopAccountID,
		IsNil:  EtopAccountID == nil,
		IsZero: EtopAccountID != nil && (*EtopAccountID) == 0,
	}
}

func (ft *VhtCallHistoryFilters) ByVtigerAccountID(VtigerAccountID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "vtiger_account_id",
		Value:  VtigerAccountID,
		IsNil:  VtigerAccountID == "",
	}
}

func (ft *VhtCallHistoryFilters) ByVtigerAccountIDPtr(VtigerAccountID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "vtiger_account_id",
		Value:  VtigerAccountID,
		IsNil:  VtigerAccountID == nil,
		IsZero: VtigerAccountID != nil && (*VtigerAccountID) == "",
	}
}

func (ft *VhtCallHistoryFilters) BySyncStatus(SyncStatus string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "sync_status",
		Value:  SyncStatus,
		IsNil:  SyncStatus == "",
	}
}

func (ft *VhtCallHistoryFilters) BySyncStatusPtr(SyncStatus *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "sync_status",
		Value:  SyncStatus,
		IsNil:  SyncStatus == nil,
		IsZero: SyncStatus != nil && (*SyncStatus) == "",
	}
}

func (ft *VhtCallHistoryFilters) ByOData(OData string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "o_data",
		Value:  OData,
		IsNil:  OData == "",
	}
}

func (ft *VhtCallHistoryFilters) ByODataPtr(OData *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "o_data",
		Value:  OData,
		IsNil:  OData == nil,
		IsZero: OData != nil && (*OData) == "",
	}
}

func (ft *VhtCallHistoryFilters) BySearchNorm(SearchNorm string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "search_norm",
		Value:  SearchNorm,
		IsNil:  SearchNorm == "",
	}
}

func (ft *VhtCallHistoryFilters) BySearchNormPtr(SearchNorm *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "search_norm",
		Value:  SearchNorm,
		IsNil:  SearchNorm == nil,
		IsZero: SearchNorm != nil && (*SearchNorm) == "",
	}
}
