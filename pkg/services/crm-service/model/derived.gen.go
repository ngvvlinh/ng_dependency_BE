// Code generated by goderive DO NOT EDIT.

package model

import (
	"database/sql"
	"time"

	"etop.vn/backend/pkg/common/sq/core"
)

type SQLWriter = core.SQLWriter

// Type EtopAcount represents table etop_acount
func sqlgenEtopCount(_ *EtopAcount) bool { return true }

type EtopAcounts []*EtopAcount

const __sqlEtopAcount_Table = "etop_acount"
const __sqlEtopAcount_ListCols = "\"id\",\"full_name\",\"phone\",\"email\",\"account_id\",\"acount_name\",\"account_type\",\"is_operator\",\"vtiger_account\""
const __sqlEtopAcount_Insert = "INSERT INTO \"etop_acount\" (" + __sqlEtopAcount_ListCols + ") VALUES"
const __sqlEtopAcount_Select = "SELECT " + __sqlEtopAcount_ListCols + " FROM \"etop_acount\""
const __sqlEtopAcount_Select_history = "SELECT " + __sqlEtopAcount_ListCols + " FROM history.\"etop_acount\""
const __sqlEtopAcount_UpdateAll = "UPDATE \"etop_acount\" SET (" + __sqlEtopAcount_ListCols + ")"

func (m *EtopAcount) SQLTableName() string  { return "etop_acount" }
func (m *EtopAcounts) SQLTableName() string { return "etop_acount" }
func (m *EtopAcount) SQLListCols() string   { return __sqlEtopAcount_ListCols }

func (m *EtopAcount) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.String(m.ID),
		core.String(m.FullName),
		core.String(m.Phone),
		core.String(m.Email),
		core.String(m.AccountID),
		core.String(m.AcountName),
		core.String(m.AccountType),
		core.Bool(m.IsOperator),
		core.String(m.VtigerAccount),
	}
}

func (m *EtopAcount) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.String)(&m.ID),
		(*core.String)(&m.FullName),
		(*core.String)(&m.Phone),
		(*core.String)(&m.Email),
		(*core.String)(&m.AccountID),
		(*core.String)(&m.AcountName),
		(*core.String)(&m.AccountType),
		(*core.Bool)(&m.IsOperator),
		(*core.String)(&m.VtigerAccount),
	}
}

func (m *EtopAcount) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *EtopAcounts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(EtopAcounts, 0, 128)
	for rows.Next() {
		m := new(EtopAcount)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *EtopAcount) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlEtopAcount_Select)
	return nil
}

func (_ *EtopAcounts) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlEtopAcount_Select)
	return nil
}

func (m *EtopAcount) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlEtopAcount_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms EtopAcounts) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlEtopAcount_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(9)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *EtopAcount) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("etop_acount")
	w.WriteRawString(" SET ")
	if m.ID != "" {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.FullName != "" {
		flag = true
		w.WriteName("full_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FullName)
	}
	if m.Phone != "" {
		flag = true
		w.WriteName("phone")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Phone)
	}
	if m.Email != "" {
		flag = true
		w.WriteName("email")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Email)
	}
	if m.AccountID != "" {
		flag = true
		w.WriteName("account_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccountID)
	}
	if m.AcountName != "" {
		flag = true
		w.WriteName("acount_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AcountName)
	}
	if m.AccountType != "" {
		flag = true
		w.WriteName("account_type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccountType)
	}
	if m.IsOperator {
		flag = true
		w.WriteName("is_operator")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.IsOperator)
	}
	if m.VtigerAccount != "" {
		flag = true
		w.WriteName("vtiger_account")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.VtigerAccount)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *EtopAcount) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlEtopAcount_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type EtopAcountHistory map[string]interface{}
type EtopAcountHistories []map[string]interface{}

func (m *EtopAcountHistory) SQLTableName() string  { return "history.\"etop_acount\"" }
func (m EtopAcountHistories) SQLTableName() string { return "history.\"etop_acount\"" }

func (m *EtopAcountHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlEtopAcount_Select_history)
	return nil
}

func (m EtopAcountHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlEtopAcount_Select_history)
	return nil
}

func (m EtopAcountHistory) ID() core.Interface            { return core.Interface{m["id"]} }
func (m EtopAcountHistory) FullName() core.Interface      { return core.Interface{m["full_name"]} }
func (m EtopAcountHistory) Phone() core.Interface         { return core.Interface{m["phone"]} }
func (m EtopAcountHistory) Email() core.Interface         { return core.Interface{m["email"]} }
func (m EtopAcountHistory) AccountID() core.Interface     { return core.Interface{m["account_id"]} }
func (m EtopAcountHistory) AcountName() core.Interface    { return core.Interface{m["acount_name"]} }
func (m EtopAcountHistory) AccountType() core.Interface   { return core.Interface{m["account_type"]} }
func (m EtopAcountHistory) IsOperator() core.Interface    { return core.Interface{m["is_operator"]} }
func (m EtopAcountHistory) VtigerAccount() core.Interface { return core.Interface{m["vtiger_account"]} }

func (m *EtopAcountHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(EtopAcountHistory, 9)
	res["id"] = data[0]
	res["full_name"] = data[1]
	res["phone"] = data[2]
	res["email"] = data[3]
	res["account_id"] = data[4]
	res["acount_name"] = data[5]
	res["account_type"] = data[6]
	res["is_operator"] = data[7]
	res["vtiger_account"] = data[8]
	*m = res
	return nil
}

func (ms *EtopAcountHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	res := make(EtopAcountHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(EtopAcountHistory)
		m["id"] = data[0]
		m["full_name"] = data[1]
		m["phone"] = data[2]
		m["email"] = data[3]
		m["account_id"] = data[4]
		m["acount_name"] = data[5]
		m["account_type"] = data[6]
		m["is_operator"] = data[7]
		m["vtiger_account"] = data[8]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type VtigerContact represents table vtiger_contact
func sqlgenVtigerContact(_ *VtigerContact) bool { return true }

type VtigerContacts []*VtigerContact

const __sqlVtigerContact_Table = "vtiger_contact"
const __sqlVtigerContact_ListCols = "\"id\",\"firstname\",\"contact_no\",\"phone\",\"lastname\",\"mobile\",\"email\",\"leadsource\",\"secondaryemail\",\"assigned_user_id\",\"created_at\",\"etop_id\",\"updated_at\",\"description\",\"source\",\"used_shipping_provider\",\"orders_per_day\",\"company\",\"city\",\"state\",\"website\",\"lane\",\"country\",\"search_norm\""
const __sqlVtigerContact_Insert = "INSERT INTO \"vtiger_contact\" (" + __sqlVtigerContact_ListCols + ") VALUES"
const __sqlVtigerContact_Select = "SELECT " + __sqlVtigerContact_ListCols + " FROM \"vtiger_contact\""
const __sqlVtigerContact_Select_history = "SELECT " + __sqlVtigerContact_ListCols + " FROM history.\"vtiger_contact\""
const __sqlVtigerContact_UpdateAll = "UPDATE \"vtiger_contact\" SET (" + __sqlVtigerContact_ListCols + ")"

func (m *VtigerContact) SQLTableName() string  { return "vtiger_contact" }
func (m *VtigerContacts) SQLTableName() string { return "vtiger_contact" }
func (m *VtigerContact) SQLListCols() string   { return __sqlVtigerContact_ListCols }

func (m *VtigerContact) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.String(m.ID),
		core.String(m.Firstname),
		core.String(m.ContactNo),
		core.String(m.Phone),
		core.String(m.Lastname),
		core.String(m.Mobile),
		core.String(m.Email),
		core.String(m.Leadsource),
		core.String(m.Secondaryemail),
		core.String(m.AssignedUserID),
		core.Now(m.CreatedAt, now, create),
		core.Int64(m.EtopID),
		core.Now(m.UpdatedAt, now, true),
		core.String(m.Description),
		core.String(m.Source),
		core.String(m.UsedShippingProvider),
		core.String(m.OrdersPerDay),
		core.String(m.Company),
		core.String(m.City),
		core.String(m.State),
		core.String(m.Website),
		core.String(m.Lane),
		core.String(m.Country),
		core.String(m.SearchNorm),
	}
}

func (m *VtigerContact) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.String)(&m.ID),
		(*core.String)(&m.Firstname),
		(*core.String)(&m.ContactNo),
		(*core.String)(&m.Phone),
		(*core.String)(&m.Lastname),
		(*core.String)(&m.Mobile),
		(*core.String)(&m.Email),
		(*core.String)(&m.Leadsource),
		(*core.String)(&m.Secondaryemail),
		(*core.String)(&m.AssignedUserID),
		(*core.Time)(&m.CreatedAt),
		(*core.Int64)(&m.EtopID),
		(*core.Time)(&m.UpdatedAt),
		(*core.String)(&m.Description),
		(*core.String)(&m.Source),
		(*core.String)(&m.UsedShippingProvider),
		(*core.String)(&m.OrdersPerDay),
		(*core.String)(&m.Company),
		(*core.String)(&m.City),
		(*core.String)(&m.State),
		(*core.String)(&m.Website),
		(*core.String)(&m.Lane),
		(*core.String)(&m.Country),
		(*core.String)(&m.SearchNorm),
	}
}

func (m *VtigerContact) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *VtigerContacts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(VtigerContacts, 0, 128)
	for rows.Next() {
		m := new(VtigerContact)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *VtigerContact) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVtigerContact_Select)
	return nil
}

func (_ *VtigerContacts) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVtigerContact_Select)
	return nil
}

func (m *VtigerContact) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlVtigerContact_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(24)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms VtigerContacts) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlVtigerContact_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(24)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *VtigerContact) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("vtiger_contact")
	w.WriteRawString(" SET ")
	if m.ID != "" {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Firstname != "" {
		flag = true
		w.WriteName("firstname")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Firstname)
	}
	if m.ContactNo != "" {
		flag = true
		w.WriteName("contact_no")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ContactNo)
	}
	if m.Phone != "" {
		flag = true
		w.WriteName("phone")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Phone)
	}
	if m.Lastname != "" {
		flag = true
		w.WriteName("lastname")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Lastname)
	}
	if m.Mobile != "" {
		flag = true
		w.WriteName("mobile")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Mobile)
	}
	if m.Email != "" {
		flag = true
		w.WriteName("email")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Email)
	}
	if m.Leadsource != "" {
		flag = true
		w.WriteName("leadsource")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Leadsource)
	}
	if m.Secondaryemail != "" {
		flag = true
		w.WriteName("secondaryemail")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Secondaryemail)
	}
	if m.AssignedUserID != "" {
		flag = true
		w.WriteName("assigned_user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AssignedUserID)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if m.EtopID != 0 {
		flag = true
		w.WriteName("etop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EtopID)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.Source != "" {
		flag = true
		w.WriteName("source")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Source)
	}
	if m.UsedShippingProvider != "" {
		flag = true
		w.WriteName("used_shipping_provider")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UsedShippingProvider)
	}
	if m.OrdersPerDay != "" {
		flag = true
		w.WriteName("orders_per_day")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrdersPerDay)
	}
	if m.Company != "" {
		flag = true
		w.WriteName("company")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Company)
	}
	if m.City != "" {
		flag = true
		w.WriteName("city")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.City)
	}
	if m.State != "" {
		flag = true
		w.WriteName("state")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.State)
	}
	if m.Website != "" {
		flag = true
		w.WriteName("website")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Website)
	}
	if m.Lane != "" {
		flag = true
		w.WriteName("lane")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Lane)
	}
	if m.Country != "" {
		flag = true
		w.WriteName("country")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Country)
	}
	if m.SearchNorm != "" {
		flag = true
		w.WriteName("search_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SearchNorm)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *VtigerContact) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlVtigerContact_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(24)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type VtigerContactHistory map[string]interface{}
type VtigerContactHistories []map[string]interface{}

func (m *VtigerContactHistory) SQLTableName() string  { return "history.\"vtiger_contact\"" }
func (m VtigerContactHistories) SQLTableName() string { return "history.\"vtiger_contact\"" }

func (m *VtigerContactHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVtigerContact_Select_history)
	return nil
}

func (m VtigerContactHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVtigerContact_Select_history)
	return nil
}

func (m VtigerContactHistory) ID() core.Interface         { return core.Interface{m["id"]} }
func (m VtigerContactHistory) Firstname() core.Interface  { return core.Interface{m["firstname"]} }
func (m VtigerContactHistory) ContactNo() core.Interface  { return core.Interface{m["contact_no"]} }
func (m VtigerContactHistory) Phone() core.Interface      { return core.Interface{m["phone"]} }
func (m VtigerContactHistory) Lastname() core.Interface   { return core.Interface{m["lastname"]} }
func (m VtigerContactHistory) Mobile() core.Interface     { return core.Interface{m["mobile"]} }
func (m VtigerContactHistory) Email() core.Interface      { return core.Interface{m["email"]} }
func (m VtigerContactHistory) Leadsource() core.Interface { return core.Interface{m["leadsource"]} }
func (m VtigerContactHistory) Secondaryemail() core.Interface {
	return core.Interface{m["secondaryemail"]}
}
func (m VtigerContactHistory) AssignedUserID() core.Interface {
	return core.Interface{m["assigned_user_id"]}
}
func (m VtigerContactHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m VtigerContactHistory) EtopID() core.Interface      { return core.Interface{m["etop_id"]} }
func (m VtigerContactHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }
func (m VtigerContactHistory) Description() core.Interface { return core.Interface{m["description"]} }
func (m VtigerContactHistory) Source() core.Interface      { return core.Interface{m["source"]} }
func (m VtigerContactHistory) UsedShippingProvider() core.Interface {
	return core.Interface{m["used_shipping_provider"]}
}
func (m VtigerContactHistory) OrdersPerDay() core.Interface {
	return core.Interface{m["orders_per_day"]}
}
func (m VtigerContactHistory) Company() core.Interface    { return core.Interface{m["company"]} }
func (m VtigerContactHistory) City() core.Interface       { return core.Interface{m["city"]} }
func (m VtigerContactHistory) State() core.Interface      { return core.Interface{m["state"]} }
func (m VtigerContactHistory) Website() core.Interface    { return core.Interface{m["website"]} }
func (m VtigerContactHistory) Lane() core.Interface       { return core.Interface{m["lane"]} }
func (m VtigerContactHistory) Country() core.Interface    { return core.Interface{m["country"]} }
func (m VtigerContactHistory) SearchNorm() core.Interface { return core.Interface{m["search_norm"]} }

func (m *VtigerContactHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 24)
	args := make([]interface{}, 24)
	for i := 0; i < 24; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(VtigerContactHistory, 24)
	res["id"] = data[0]
	res["firstname"] = data[1]
	res["contact_no"] = data[2]
	res["phone"] = data[3]
	res["lastname"] = data[4]
	res["mobile"] = data[5]
	res["email"] = data[6]
	res["leadsource"] = data[7]
	res["secondaryemail"] = data[8]
	res["assigned_user_id"] = data[9]
	res["created_at"] = data[10]
	res["etop_id"] = data[11]
	res["updated_at"] = data[12]
	res["description"] = data[13]
	res["source"] = data[14]
	res["used_shipping_provider"] = data[15]
	res["orders_per_day"] = data[16]
	res["company"] = data[17]
	res["city"] = data[18]
	res["state"] = data[19]
	res["website"] = data[20]
	res["lane"] = data[21]
	res["country"] = data[22]
	res["search_norm"] = data[23]
	*m = res
	return nil
}

func (ms *VtigerContactHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 24)
	args := make([]interface{}, 24)
	for i := 0; i < 24; i++ {
		args[i] = &data[i]
	}
	res := make(VtigerContactHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(VtigerContactHistory)
		m["id"] = data[0]
		m["firstname"] = data[1]
		m["contact_no"] = data[2]
		m["phone"] = data[3]
		m["lastname"] = data[4]
		m["mobile"] = data[5]
		m["email"] = data[6]
		m["leadsource"] = data[7]
		m["secondaryemail"] = data[8]
		m["assigned_user_id"] = data[9]
		m["created_at"] = data[10]
		m["etop_id"] = data[11]
		m["updated_at"] = data[12]
		m["description"] = data[13]
		m["source"] = data[14]
		m["used_shipping_provider"] = data[15]
		m["orders_per_day"] = data[16]
		m["company"] = data[17]
		m["city"] = data[18]
		m["state"] = data[19]
		m["website"] = data[20]
		m["lane"] = data[21]
		m["country"] = data[22]
		m["search_norm"] = data[23]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type VtigerAccount represents table vtiger_account
func sqlgenVtigerAccount(_ *VtigerAccount) bool { return true }

type VtigerAccounts []*VtigerAccount

const __sqlVtigerAccount_Table = "vtiger_account"
const __sqlVtigerAccount_ListCols = "\"id\",\"user_name\",\"first_name\",\"role_id\",\"email1\",\"secondaryemail\",\"status\""
const __sqlVtigerAccount_Insert = "INSERT INTO \"vtiger_account\" (" + __sqlVtigerAccount_ListCols + ") VALUES"
const __sqlVtigerAccount_Select = "SELECT " + __sqlVtigerAccount_ListCols + " FROM \"vtiger_account\""
const __sqlVtigerAccount_Select_history = "SELECT " + __sqlVtigerAccount_ListCols + " FROM history.\"vtiger_account\""
const __sqlVtigerAccount_UpdateAll = "UPDATE \"vtiger_account\" SET (" + __sqlVtigerAccount_ListCols + ")"

func (m *VtigerAccount) SQLTableName() string  { return "vtiger_account" }
func (m *VtigerAccounts) SQLTableName() string { return "vtiger_account" }
func (m *VtigerAccount) SQLListCols() string   { return __sqlVtigerAccount_ListCols }

func (m *VtigerAccount) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.String(m.ID),
		core.String(m.UserName),
		core.String(m.FirstName),
		core.Int64(m.RoleID),
		core.String(m.Email1),
		core.String(m.Secondaryemail),
		core.String(m.Status),
	}
}

func (m *VtigerAccount) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.String)(&m.ID),
		(*core.String)(&m.UserName),
		(*core.String)(&m.FirstName),
		(*core.Int64)(&m.RoleID),
		(*core.String)(&m.Email1),
		(*core.String)(&m.Secondaryemail),
		(*core.String)(&m.Status),
	}
}

func (m *VtigerAccount) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *VtigerAccounts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(VtigerAccounts, 0, 128)
	for rows.Next() {
		m := new(VtigerAccount)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *VtigerAccount) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVtigerAccount_Select)
	return nil
}

func (_ *VtigerAccounts) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVtigerAccount_Select)
	return nil
}

func (m *VtigerAccount) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlVtigerAccount_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms VtigerAccounts) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlVtigerAccount_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(7)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *VtigerAccount) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("vtiger_account")
	w.WriteRawString(" SET ")
	if m.ID != "" {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.UserName != "" {
		flag = true
		w.WriteName("user_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UserName)
	}
	if m.FirstName != "" {
		flag = true
		w.WriteName("first_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FirstName)
	}
	if m.RoleID != 0 {
		flag = true
		w.WriteName("role_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RoleID)
	}
	if m.Email1 != "" {
		flag = true
		w.WriteName("email1")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Email1)
	}
	if m.Secondaryemail != "" {
		flag = true
		w.WriteName("secondaryemail")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Secondaryemail)
	}
	if m.Status != "" {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *VtigerAccount) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlVtigerAccount_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type VtigerAccountHistory map[string]interface{}
type VtigerAccountHistories []map[string]interface{}

func (m *VtigerAccountHistory) SQLTableName() string  { return "history.\"vtiger_account\"" }
func (m VtigerAccountHistories) SQLTableName() string { return "history.\"vtiger_account\"" }

func (m *VtigerAccountHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVtigerAccount_Select_history)
	return nil
}

func (m VtigerAccountHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVtigerAccount_Select_history)
	return nil
}

func (m VtigerAccountHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m VtigerAccountHistory) UserName() core.Interface  { return core.Interface{m["user_name"]} }
func (m VtigerAccountHistory) FirstName() core.Interface { return core.Interface{m["first_name"]} }
func (m VtigerAccountHistory) RoleID() core.Interface    { return core.Interface{m["role_id"]} }
func (m VtigerAccountHistory) Email1() core.Interface    { return core.Interface{m["email1"]} }
func (m VtigerAccountHistory) Secondaryemail() core.Interface {
	return core.Interface{m["secondaryemail"]}
}
func (m VtigerAccountHistory) Status() core.Interface { return core.Interface{m["status"]} }

func (m *VtigerAccountHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(VtigerAccountHistory, 7)
	res["id"] = data[0]
	res["user_name"] = data[1]
	res["first_name"] = data[2]
	res["role_id"] = data[3]
	res["email1"] = data[4]
	res["secondaryemail"] = data[5]
	res["status"] = data[6]
	*m = res
	return nil
}

func (ms *VtigerAccountHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	res := make(VtigerAccountHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(VtigerAccountHistory)
		m["id"] = data[0]
		m["user_name"] = data[1]
		m["first_name"] = data[2]
		m["role_id"] = data[3]
		m["email1"] = data[4]
		m["secondaryemail"] = data[5]
		m["status"] = data[6]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type VthCallHistory represents table vth_call_history
func sqlgenVthCallHistory(_ *VthCallHistory) bool { return true }

type VthCallHistories []*VthCallHistory

const __sqlVthCallHistory_Table = "vth_call_history"
const __sqlVthCallHistory_ListCols = "\"id\",\"cdr_id\",\"call_id\",\"sip_call_id\",\"sdk_call_id\",\"cause\",\"q850_call\",\"from_extension\",\"to_extension\",\"from_number\",\"to_number\",\"duration\",\"direction\",\"time_started\",\"time_connected\",\"recording_path\",\"recording_url\",\"etop_acount_id\",\"vtiger_account_id\",\"search_norm\""
const __sqlVthCallHistory_Insert = "INSERT INTO \"vth_call_history\" (" + __sqlVthCallHistory_ListCols + ") VALUES"
const __sqlVthCallHistory_Select = "SELECT " + __sqlVthCallHistory_ListCols + " FROM \"vth_call_history\""
const __sqlVthCallHistory_Select_history = "SELECT " + __sqlVthCallHistory_ListCols + " FROM history.\"vth_call_history\""
const __sqlVthCallHistory_UpdateAll = "UPDATE \"vth_call_history\" SET (" + __sqlVthCallHistory_ListCols + ")"

func (m *VthCallHistory) SQLTableName() string   { return "vth_call_history" }
func (m *VthCallHistories) SQLTableName() string { return "vth_call_history" }
func (m *VthCallHistory) SQLListCols() string    { return __sqlVthCallHistory_ListCols }

func (m *VthCallHistory) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.String(m.ID),
		core.String(m.CdrID),
		core.String(m.CallID),
		core.String(m.SipCallID),
		core.String(m.SdkCallID),
		core.String(m.Cause),
		core.String(m.Q850Call),
		core.String(m.FromExtension),
		core.String(m.ToExtension),
		core.String(m.FromNumber),
		core.String(m.ToNumber),
		core.String(m.Duration),
		core.String(m.Direction),
		core.String(m.TimeStarted),
		core.String(m.TimeConnected),
		core.String(m.RecordingPath),
		core.String(m.RecordingURL),
		core.Int64(m.EtopAcountID),
		core.String(m.VtigerAccountID),
		core.String(m.SearchNorm),
	}
}

func (m *VthCallHistory) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.String)(&m.ID),
		(*core.String)(&m.CdrID),
		(*core.String)(&m.CallID),
		(*core.String)(&m.SipCallID),
		(*core.String)(&m.SdkCallID),
		(*core.String)(&m.Cause),
		(*core.String)(&m.Q850Call),
		(*core.String)(&m.FromExtension),
		(*core.String)(&m.ToExtension),
		(*core.String)(&m.FromNumber),
		(*core.String)(&m.ToNumber),
		(*core.String)(&m.Duration),
		(*core.String)(&m.Direction),
		(*core.String)(&m.TimeStarted),
		(*core.String)(&m.TimeConnected),
		(*core.String)(&m.RecordingPath),
		(*core.String)(&m.RecordingURL),
		(*core.Int64)(&m.EtopAcountID),
		(*core.String)(&m.VtigerAccountID),
		(*core.String)(&m.SearchNorm),
	}
}

func (m *VthCallHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *VthCallHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(VthCallHistories, 0, 128)
	for rows.Next() {
		m := new(VthCallHistory)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *VthCallHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVthCallHistory_Select)
	return nil
}

func (_ *VthCallHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVthCallHistory_Select)
	return nil
}

func (m *VthCallHistory) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlVthCallHistory_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(20)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms VthCallHistories) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlVthCallHistory_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(20)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *VthCallHistory) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("vth_call_history")
	w.WriteRawString(" SET ")
	if m.ID != "" {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.CdrID != "" {
		flag = true
		w.WriteName("cdr_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CdrID)
	}
	if m.CallID != "" {
		flag = true
		w.WriteName("call_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CallID)
	}
	if m.SipCallID != "" {
		flag = true
		w.WriteName("sip_call_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SipCallID)
	}
	if m.SdkCallID != "" {
		flag = true
		w.WriteName("sdk_call_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SdkCallID)
	}
	if m.Cause != "" {
		flag = true
		w.WriteName("cause")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Cause)
	}
	if m.Q850Call != "" {
		flag = true
		w.WriteName("q850_call")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Q850Call)
	}
	if m.FromExtension != "" {
		flag = true
		w.WriteName("from_extension")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FromExtension)
	}
	if m.ToExtension != "" {
		flag = true
		w.WriteName("to_extension")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ToExtension)
	}
	if m.FromNumber != "" {
		flag = true
		w.WriteName("from_number")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FromNumber)
	}
	if m.ToNumber != "" {
		flag = true
		w.WriteName("to_number")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ToNumber)
	}
	if m.Duration != "" {
		flag = true
		w.WriteName("duration")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Duration)
	}
	if m.Direction != "" {
		flag = true
		w.WriteName("direction")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Direction)
	}
	if m.TimeStarted != "" {
		flag = true
		w.WriteName("time_started")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TimeStarted)
	}
	if m.TimeConnected != "" {
		flag = true
		w.WriteName("time_connected")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TimeConnected)
	}
	if m.RecordingPath != "" {
		flag = true
		w.WriteName("recording_path")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RecordingPath)
	}
	if m.RecordingURL != "" {
		flag = true
		w.WriteName("recording_url")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RecordingURL)
	}
	if m.EtopAcountID != 0 {
		flag = true
		w.WriteName("etop_acount_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EtopAcountID)
	}
	if m.VtigerAccountID != "" {
		flag = true
		w.WriteName("vtiger_account_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.VtigerAccountID)
	}
	if m.SearchNorm != "" {
		flag = true
		w.WriteName("search_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SearchNorm)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *VthCallHistory) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlVthCallHistory_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(20)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type VthCallHistoryHistory map[string]interface{}
type VthCallHistoryHistories []map[string]interface{}

func (m *VthCallHistoryHistory) SQLTableName() string  { return "history.\"vth_call_history\"" }
func (m VthCallHistoryHistories) SQLTableName() string { return "history.\"vth_call_history\"" }

func (m *VthCallHistoryHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVthCallHistory_Select_history)
	return nil
}

func (m VthCallHistoryHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVthCallHistory_Select_history)
	return nil
}

func (m VthCallHistoryHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m VthCallHistoryHistory) CdrID() core.Interface     { return core.Interface{m["cdr_id"]} }
func (m VthCallHistoryHistory) CallID() core.Interface    { return core.Interface{m["call_id"]} }
func (m VthCallHistoryHistory) SipCallID() core.Interface { return core.Interface{m["sip_call_id"]} }
func (m VthCallHistoryHistory) SdkCallID() core.Interface { return core.Interface{m["sdk_call_id"]} }
func (m VthCallHistoryHistory) Cause() core.Interface     { return core.Interface{m["cause"]} }
func (m VthCallHistoryHistory) Q850Call() core.Interface  { return core.Interface{m["q850_call"]} }
func (m VthCallHistoryHistory) FromExtension() core.Interface {
	return core.Interface{m["from_extension"]}
}
func (m VthCallHistoryHistory) ToExtension() core.Interface { return core.Interface{m["to_extension"]} }
func (m VthCallHistoryHistory) FromNumber() core.Interface  { return core.Interface{m["from_number"]} }
func (m VthCallHistoryHistory) ToNumber() core.Interface    { return core.Interface{m["to_number"]} }
func (m VthCallHistoryHistory) Duration() core.Interface    { return core.Interface{m["duration"]} }
func (m VthCallHistoryHistory) Direction() core.Interface   { return core.Interface{m["direction"]} }
func (m VthCallHistoryHistory) TimeStarted() core.Interface { return core.Interface{m["time_started"]} }
func (m VthCallHistoryHistory) TimeConnected() core.Interface {
	return core.Interface{m["time_connected"]}
}
func (m VthCallHistoryHistory) RecordingPath() core.Interface {
	return core.Interface{m["recording_path"]}
}
func (m VthCallHistoryHistory) RecordingURL() core.Interface {
	return core.Interface{m["recording_url"]}
}
func (m VthCallHistoryHistory) EtopAcountID() core.Interface {
	return core.Interface{m["etop_acount_id"]}
}
func (m VthCallHistoryHistory) VtigerAccountID() core.Interface {
	return core.Interface{m["vtiger_account_id"]}
}
func (m VthCallHistoryHistory) SearchNorm() core.Interface { return core.Interface{m["search_norm"]} }

func (m *VthCallHistoryHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 20)
	args := make([]interface{}, 20)
	for i := 0; i < 20; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(VthCallHistoryHistory, 20)
	res["id"] = data[0]
	res["cdr_id"] = data[1]
	res["call_id"] = data[2]
	res["sip_call_id"] = data[3]
	res["sdk_call_id"] = data[4]
	res["cause"] = data[5]
	res["q850_call"] = data[6]
	res["from_extension"] = data[7]
	res["to_extension"] = data[8]
	res["from_number"] = data[9]
	res["to_number"] = data[10]
	res["duration"] = data[11]
	res["direction"] = data[12]
	res["time_started"] = data[13]
	res["time_connected"] = data[14]
	res["recording_path"] = data[15]
	res["recording_url"] = data[16]
	res["etop_acount_id"] = data[17]
	res["vtiger_account_id"] = data[18]
	res["search_norm"] = data[19]
	*m = res
	return nil
}

func (ms *VthCallHistoryHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 20)
	args := make([]interface{}, 20)
	for i := 0; i < 20; i++ {
		args[i] = &data[i]
	}
	res := make(VthCallHistoryHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(VthCallHistoryHistory)
		m["id"] = data[0]
		m["cdr_id"] = data[1]
		m["call_id"] = data[2]
		m["sip_call_id"] = data[3]
		m["sdk_call_id"] = data[4]
		m["cause"] = data[5]
		m["q850_call"] = data[6]
		m["from_extension"] = data[7]
		m["to_extension"] = data[8]
		m["from_number"] = data[9]
		m["to_number"] = data[10]
		m["duration"] = data[11]
		m["direction"] = data[12]
		m["time_started"] = data[13]
		m["time_connected"] = data[14]
		m["recording_path"] = data[15]
		m["recording_url"] = data[16]
		m["etop_acount_id"] = data[17]
		m["vtiger_account_id"] = data[18]
		m["search_norm"] = data[19]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
