// Generated by common/sql. DO NOT EDIT.

package sqlstore

import (
	"time"

	sq "etop.vn/backend/pkg/common/sql"
	"etop.vn/backend/pkg/etop/model"
)

type ProductFilters struct{ prefix string }

func NewProductFilters(prefix string) ProductFilters {
	return ProductFilters{prefix}
}

func (ft ProductFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ProductFilters) Prefix() string {
	return ft.prefix
}

func (ft ProductFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft ProductFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft ProductFilters) ByProductSourceID(ProductSourceID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == 0,
	}
}

func (ft ProductFilters) ByProductSourceIDPtr(ProductSourceID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == nil,
		IsZero: ProductSourceID != nil && (*ProductSourceID) == 0,
	}
}

func (ft ProductFilters) BySupplierID(SupplierID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == 0,
	}
}

func (ft ProductFilters) BySupplierIDPtr(SupplierID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == nil,
		IsZero: SupplierID != nil && (*SupplierID) == 0,
	}
}

func (ft ProductFilters) ByProductSourceCategoryID(ProductSourceCategoryID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_category_id",
		Value:  ProductSourceCategoryID,
		IsNil:  ProductSourceCategoryID == "",
	}
}

func (ft ProductFilters) ByProductSourceCategoryIDPtr(ProductSourceCategoryID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_category_id",
		Value:  ProductSourceCategoryID,
		IsNil:  ProductSourceCategoryID == nil,
		IsZero: ProductSourceCategoryID != nil && (*ProductSourceCategoryID) == "",
	}
}

func (ft ProductFilters) ByEtopCategoryID(EtopCategoryID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "etop_category_id",
		Value:  EtopCategoryID,
		IsNil:  EtopCategoryID == 0,
	}
}

func (ft ProductFilters) ByEtopCategoryIDPtr(EtopCategoryID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "etop_category_id",
		Value:  EtopCategoryID,
		IsNil:  EtopCategoryID == nil,
		IsZero: EtopCategoryID != nil && (*EtopCategoryID) == 0,
	}
}

func (ft ProductFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft ProductFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft ProductFilters) ByShortDesc(ShortDesc string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == "",
	}
}

func (ft ProductFilters) ByShortDescPtr(ShortDesc *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == nil,
		IsZero: ShortDesc != nil && (*ShortDesc) == "",
	}
}

func (ft ProductFilters) ByDescription(Description string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == "",
	}
}

func (ft ProductFilters) ByDescriptionPtr(Description *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == nil,
		IsZero: Description != nil && (*Description) == "",
	}
}

func (ft ProductFilters) ByDescHTML(DescHTML string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == "",
	}
}

func (ft ProductFilters) ByDescHTMLPtr(DescHTML *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == nil,
		IsZero: DescHTML != nil && (*DescHTML) == "",
	}
}

func (ft ProductFilters) ByEdName(EdName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_name",
		Value:  EdName,
		IsNil:  EdName == "",
	}
}

func (ft ProductFilters) ByEdNamePtr(EdName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_name",
		Value:  EdName,
		IsNil:  EdName == nil,
		IsZero: EdName != nil && (*EdName) == "",
	}
}

func (ft ProductFilters) ByEdShortDesc(EdShortDesc string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_short_desc",
		Value:  EdShortDesc,
		IsNil:  EdShortDesc == "",
	}
}

func (ft ProductFilters) ByEdShortDescPtr(EdShortDesc *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_short_desc",
		Value:  EdShortDesc,
		IsNil:  EdShortDesc == nil,
		IsZero: EdShortDesc != nil && (*EdShortDesc) == "",
	}
}

func (ft ProductFilters) ByEdDescription(EdDescription string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_description",
		Value:  EdDescription,
		IsNil:  EdDescription == "",
	}
}

func (ft ProductFilters) ByEdDescriptionPtr(EdDescription *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_description",
		Value:  EdDescription,
		IsNil:  EdDescription == nil,
		IsZero: EdDescription != nil && (*EdDescription) == "",
	}
}

func (ft ProductFilters) ByEdDescHTML(EdDescHTML string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_desc_html",
		Value:  EdDescHTML,
		IsNil:  EdDescHTML == "",
	}
}

func (ft ProductFilters) ByEdDescHTMLPtr(EdDescHTML *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_desc_html",
		Value:  EdDescHTML,
		IsNil:  EdDescHTML == nil,
		IsZero: EdDescHTML != nil && (*EdDescHTML) == "",
	}
}

func (ft ProductFilters) ByUnit(Unit string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "unit",
		Value:  Unit,
		IsNil:  Unit == "",
	}
}

func (ft ProductFilters) ByUnitPtr(Unit *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "unit",
		Value:  Unit,
		IsNil:  Unit == nil,
		IsZero: Unit != nil && (*Unit) == "",
	}
}

func (ft ProductFilters) ByStatus(Status model.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft ProductFilters) ByStatusPtr(Status *model.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft ProductFilters) ByCode(Code string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "code",
		Value:  Code,
		IsNil:  Code == "",
	}
}

func (ft ProductFilters) ByCodePtr(Code *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "code",
		Value:  Code,
		IsNil:  Code == nil,
		IsZero: Code != nil && (*Code) == "",
	}
}

func (ft ProductFilters) ByEdCode(EdCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_code",
		Value:  EdCode,
		IsNil:  EdCode == "",
	}
}

func (ft ProductFilters) ByEdCodePtr(EdCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_code",
		Value:  EdCode,
		IsNil:  EdCode == nil,
		IsZero: EdCode != nil && (*EdCode) == "",
	}
}

func (ft ProductFilters) ByQuantityAvailable(QuantityAvailable int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "quantity_available",
		Value:  QuantityAvailable,
		IsNil:  QuantityAvailable == 0,
	}
}

func (ft ProductFilters) ByQuantityAvailablePtr(QuantityAvailable *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "quantity_available",
		Value:  QuantityAvailable,
		IsNil:  QuantityAvailable == nil,
		IsZero: QuantityAvailable != nil && (*QuantityAvailable) == 0,
	}
}

func (ft ProductFilters) ByQuantityOnHand(QuantityOnHand int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "quantity_on_hand",
		Value:  QuantityOnHand,
		IsNil:  QuantityOnHand == 0,
	}
}

func (ft ProductFilters) ByQuantityOnHandPtr(QuantityOnHand *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "quantity_on_hand",
		Value:  QuantityOnHand,
		IsNil:  QuantityOnHand == nil,
		IsZero: QuantityOnHand != nil && (*QuantityOnHand) == 0,
	}
}

func (ft ProductFilters) ByQuantityReserved(QuantityReserved int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "quantity_reserved",
		Value:  QuantityReserved,
		IsNil:  QuantityReserved == 0,
	}
}

func (ft ProductFilters) ByQuantityReservedPtr(QuantityReserved *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "quantity_reserved",
		Value:  QuantityReserved,
		IsNil:  QuantityReserved == nil,
		IsZero: QuantityReserved != nil && (*QuantityReserved) == 0,
	}
}

func (ft ProductFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ProductFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft ProductFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft ProductFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft ProductFilters) ByNameNorm(NameNorm string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name_norm",
		Value:  NameNorm,
		IsNil:  NameNorm == "",
	}
}

func (ft ProductFilters) ByNameNormPtr(NameNorm *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name_norm",
		Value:  NameNorm,
		IsNil:  NameNorm == nil,
		IsZero: NameNorm != nil && (*NameNorm) == "",
	}
}

func (ft ProductFilters) ByNameNormUa(NameNormUa string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name_norm_ua",
		Value:  NameNormUa,
		IsNil:  NameNormUa == "",
	}
}

func (ft ProductFilters) ByNameNormUaPtr(NameNormUa *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name_norm_ua",
		Value:  NameNormUa,
		IsNil:  NameNormUa == nil,
		IsZero: NameNormUa != nil && (*NameNormUa) == "",
	}
}

type ProductExternalFilters struct{ prefix string }

func NewProductExternalFilters(prefix string) ProductExternalFilters {
	return ProductExternalFilters{prefix}
}

func (ft ProductExternalFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ProductExternalFilters) Prefix() string {
	return ft.prefix
}

func (ft ProductExternalFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft ProductExternalFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft ProductExternalFilters) ByProductSourceID(ProductSourceID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == 0,
	}
}

func (ft ProductExternalFilters) ByProductSourceIDPtr(ProductSourceID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == nil,
		IsZero: ProductSourceID != nil && (*ProductSourceID) == 0,
	}
}

func (ft ProductExternalFilters) ByProductSourceType(ProductSourceType string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_type",
		Value:  ProductSourceType,
		IsNil:  ProductSourceType == "",
	}
}

func (ft ProductExternalFilters) ByProductSourceTypePtr(ProductSourceType *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_type",
		Value:  ProductSourceType,
		IsNil:  ProductSourceType == nil,
		IsZero: ProductSourceType != nil && (*ProductSourceType) == "",
	}
}

func (ft ProductExternalFilters) ByExternalID(ExternalID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_id",
		Value:  ExternalID,
		IsNil:  ExternalID == "",
	}
}

func (ft ProductExternalFilters) ByExternalIDPtr(ExternalID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_id",
		Value:  ExternalID,
		IsNil:  ExternalID == nil,
		IsZero: ExternalID != nil && (*ExternalID) == "",
	}
}

func (ft ProductExternalFilters) ByExternalName(ExternalName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_name",
		Value:  ExternalName,
		IsNil:  ExternalName == "",
	}
}

func (ft ProductExternalFilters) ByExternalNamePtr(ExternalName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_name",
		Value:  ExternalName,
		IsNil:  ExternalName == nil,
		IsZero: ExternalName != nil && (*ExternalName) == "",
	}
}

func (ft ProductExternalFilters) ByExternalCode(ExternalCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_code",
		Value:  ExternalCode,
		IsNil:  ExternalCode == "",
	}
}

func (ft ProductExternalFilters) ByExternalCodePtr(ExternalCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_code",
		Value:  ExternalCode,
		IsNil:  ExternalCode == nil,
		IsZero: ExternalCode != nil && (*ExternalCode) == "",
	}
}

func (ft ProductExternalFilters) ByExternalCategoryID(ExternalCategoryID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_category_id",
		Value:  ExternalCategoryID,
		IsNil:  ExternalCategoryID == "",
	}
}

func (ft ProductExternalFilters) ByExternalCategoryIDPtr(ExternalCategoryID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_category_id",
		Value:  ExternalCategoryID,
		IsNil:  ExternalCategoryID == nil,
		IsZero: ExternalCategoryID != nil && (*ExternalCategoryID) == "",
	}
}

func (ft ProductExternalFilters) ByExternalDescription(ExternalDescription string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_description",
		Value:  ExternalDescription,
		IsNil:  ExternalDescription == "",
	}
}

func (ft ProductExternalFilters) ByExternalDescriptionPtr(ExternalDescription *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_description",
		Value:  ExternalDescription,
		IsNil:  ExternalDescription == nil,
		IsZero: ExternalDescription != nil && (*ExternalDescription) == "",
	}
}

func (ft ProductExternalFilters) ByExternalUnit(ExternalUnit string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_unit",
		Value:  ExternalUnit,
		IsNil:  ExternalUnit == "",
	}
}

func (ft ProductExternalFilters) ByExternalUnitPtr(ExternalUnit *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_unit",
		Value:  ExternalUnit,
		IsNil:  ExternalUnit == nil,
		IsZero: ExternalUnit != nil && (*ExternalUnit) == "",
	}
}

func (ft ProductExternalFilters) ByExternalStatus(ExternalStatus model.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_status",
		Value:  ExternalStatus,
		IsNil:  ExternalStatus == 0,
	}
}

func (ft ProductExternalFilters) ByExternalStatusPtr(ExternalStatus *model.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_status",
		Value:  ExternalStatus,
		IsNil:  ExternalStatus == nil,
		IsZero: ExternalStatus != nil && (*ExternalStatus) == 0,
	}
}

func (ft ProductExternalFilters) ByExternalCreatedAt(ExternalCreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_created_at",
		Value:  ExternalCreatedAt,
		IsNil:  ExternalCreatedAt.IsZero(),
	}
}

func (ft ProductExternalFilters) ByExternalCreatedAtPtr(ExternalCreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_created_at",
		Value:  ExternalCreatedAt,
		IsNil:  ExternalCreatedAt == nil,
		IsZero: ExternalCreatedAt != nil && (*ExternalCreatedAt).IsZero(),
	}
}

func (ft ProductExternalFilters) ByExternalUpdatedAt(ExternalUpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_updated_at",
		Value:  ExternalUpdatedAt,
		IsNil:  ExternalUpdatedAt.IsZero(),
	}
}

func (ft ProductExternalFilters) ByExternalUpdatedAtPtr(ExternalUpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_updated_at",
		Value:  ExternalUpdatedAt,
		IsNil:  ExternalUpdatedAt == nil,
		IsZero: ExternalUpdatedAt != nil && (*ExternalUpdatedAt).IsZero(),
	}
}

func (ft ProductExternalFilters) ByExternalDeletedAt(ExternalDeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_deleted_at",
		Value:  ExternalDeletedAt,
		IsNil:  ExternalDeletedAt.IsZero(),
	}
}

func (ft ProductExternalFilters) ByExternalDeletedAtPtr(ExternalDeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_deleted_at",
		Value:  ExternalDeletedAt,
		IsNil:  ExternalDeletedAt == nil,
		IsZero: ExternalDeletedAt != nil && (*ExternalDeletedAt).IsZero(),
	}
}

func (ft ProductExternalFilters) ByLastSyncAt(LastSyncAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt.IsZero(),
	}
}

func (ft ProductExternalFilters) ByLastSyncAtPtr(LastSyncAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt == nil,
		IsZero: LastSyncAt != nil && (*LastSyncAt).IsZero(),
	}
}

type VariantFilters struct{ prefix string }

func NewVariantFilters(prefix string) VariantFilters {
	return VariantFilters{prefix}
}

func (ft VariantFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft VariantFilters) Prefix() string {
	return ft.prefix
}

func (ft VariantFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft VariantFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft VariantFilters) ByProductID(ProductID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == 0,
	}
}

func (ft VariantFilters) ByProductIDPtr(ProductID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == nil,
		IsZero: ProductID != nil && (*ProductID) == 0,
	}
}

func (ft VariantFilters) ByProductSourceID(ProductSourceID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == 0,
	}
}

func (ft VariantFilters) ByProductSourceIDPtr(ProductSourceID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == nil,
		IsZero: ProductSourceID != nil && (*ProductSourceID) == 0,
	}
}

func (ft VariantFilters) BySupplierID(SupplierID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == 0,
	}
}

func (ft VariantFilters) BySupplierIDPtr(SupplierID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == nil,
		IsZero: SupplierID != nil && (*SupplierID) == 0,
	}
}

func (ft VariantFilters) ByProductSourceCategoryID(ProductSourceCategoryID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_category_id",
		Value:  ProductSourceCategoryID,
		IsNil:  ProductSourceCategoryID == 0,
	}
}

func (ft VariantFilters) ByProductSourceCategoryIDPtr(ProductSourceCategoryID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_category_id",
		Value:  ProductSourceCategoryID,
		IsNil:  ProductSourceCategoryID == nil,
		IsZero: ProductSourceCategoryID != nil && (*ProductSourceCategoryID) == 0,
	}
}

func (ft VariantFilters) ByEtopCategoryID(EtopCategoryID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "etop_category_id",
		Value:  EtopCategoryID,
		IsNil:  EtopCategoryID == 0,
	}
}

func (ft VariantFilters) ByEtopCategoryIDPtr(EtopCategoryID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "etop_category_id",
		Value:  EtopCategoryID,
		IsNil:  EtopCategoryID == nil,
		IsZero: EtopCategoryID != nil && (*EtopCategoryID) == 0,
	}
}

func (ft VariantFilters) ByShortDesc(ShortDesc string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == "",
	}
}

func (ft VariantFilters) ByShortDescPtr(ShortDesc *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == nil,
		IsZero: ShortDesc != nil && (*ShortDesc) == "",
	}
}

func (ft VariantFilters) ByDescription(Description string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == "",
	}
}

func (ft VariantFilters) ByDescriptionPtr(Description *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == nil,
		IsZero: Description != nil && (*Description) == "",
	}
}

func (ft VariantFilters) ByDescHTML(DescHTML string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == "",
	}
}

func (ft VariantFilters) ByDescHTMLPtr(DescHTML *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == nil,
		IsZero: DescHTML != nil && (*DescHTML) == "",
	}
}

func (ft VariantFilters) ByEdName(EdName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_name",
		Value:  EdName,
		IsNil:  EdName == "",
	}
}

func (ft VariantFilters) ByEdNamePtr(EdName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_name",
		Value:  EdName,
		IsNil:  EdName == nil,
		IsZero: EdName != nil && (*EdName) == "",
	}
}

func (ft VariantFilters) ByEdShortDesc(EdShortDesc string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_short_desc",
		Value:  EdShortDesc,
		IsNil:  EdShortDesc == "",
	}
}

func (ft VariantFilters) ByEdShortDescPtr(EdShortDesc *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_short_desc",
		Value:  EdShortDesc,
		IsNil:  EdShortDesc == nil,
		IsZero: EdShortDesc != nil && (*EdShortDesc) == "",
	}
}

func (ft VariantFilters) ByEdDescription(EdDescription string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_description",
		Value:  EdDescription,
		IsNil:  EdDescription == "",
	}
}

func (ft VariantFilters) ByEdDescriptionPtr(EdDescription *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_description",
		Value:  EdDescription,
		IsNil:  EdDescription == nil,
		IsZero: EdDescription != nil && (*EdDescription) == "",
	}
}

func (ft VariantFilters) ByEdDescHTML(EdDescHTML string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_desc_html",
		Value:  EdDescHTML,
		IsNil:  EdDescHTML == "",
	}
}

func (ft VariantFilters) ByEdDescHTMLPtr(EdDescHTML *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_desc_html",
		Value:  EdDescHTML,
		IsNil:  EdDescHTML == nil,
		IsZero: EdDescHTML != nil && (*EdDescHTML) == "",
	}
}

func (ft VariantFilters) ByDescNorm(DescNorm string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "desc_norm",
		Value:  DescNorm,
		IsNil:  DescNorm == "",
	}
}

func (ft VariantFilters) ByDescNormPtr(DescNorm *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "desc_norm",
		Value:  DescNorm,
		IsNil:  DescNorm == nil,
		IsZero: DescNorm != nil && (*DescNorm) == "",
	}
}

func (ft VariantFilters) ByAttrNormKv(AttrNormKv string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "attr_norm_kv",
		Value:  AttrNormKv,
		IsNil:  AttrNormKv == "",
	}
}

func (ft VariantFilters) ByAttrNormKvPtr(AttrNormKv *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "attr_norm_kv",
		Value:  AttrNormKv,
		IsNil:  AttrNormKv == nil,
		IsZero: AttrNormKv != nil && (*AttrNormKv) == "",
	}
}

func (ft VariantFilters) ByStatus(Status model.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft VariantFilters) ByStatusPtr(Status *model.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft VariantFilters) ByEtopStatus(EtopStatus model.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "etop_status",
		Value:  EtopStatus,
		IsNil:  EtopStatus == 0,
	}
}

func (ft VariantFilters) ByEtopStatusPtr(EtopStatus *model.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "etop_status",
		Value:  EtopStatus,
		IsNil:  EtopStatus == nil,
		IsZero: EtopStatus != nil && (*EtopStatus) == 0,
	}
}

func (ft VariantFilters) ByEdStatus(EdStatus model.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_status",
		Value:  EdStatus,
		IsNil:  EdStatus == 0,
	}
}

func (ft VariantFilters) ByEdStatusPtr(EdStatus *model.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_status",
		Value:  EdStatus,
		IsNil:  EdStatus == nil,
		IsZero: EdStatus != nil && (*EdStatus) == 0,
	}
}

func (ft VariantFilters) ByCode(Code string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "code",
		Value:  Code,
		IsNil:  Code == "",
	}
}

func (ft VariantFilters) ByCodePtr(Code *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "code",
		Value:  Code,
		IsNil:  Code == nil,
		IsZero: Code != nil && (*Code) == "",
	}
}

func (ft VariantFilters) ByEdCode(EdCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_code",
		Value:  EdCode,
		IsNil:  EdCode == "",
	}
}

func (ft VariantFilters) ByEdCodePtr(EdCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_code",
		Value:  EdCode,
		IsNil:  EdCode == nil,
		IsZero: EdCode != nil && (*EdCode) == "",
	}
}

func (ft VariantFilters) ByWholesalePrice0(WholesalePrice0 int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "wholesale_price_0",
		Value:  WholesalePrice0,
		IsNil:  WholesalePrice0 == 0,
	}
}

func (ft VariantFilters) ByWholesalePrice0Ptr(WholesalePrice0 *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "wholesale_price_0",
		Value:  WholesalePrice0,
		IsNil:  WholesalePrice0 == nil,
		IsZero: WholesalePrice0 != nil && (*WholesalePrice0) == 0,
	}
}

func (ft VariantFilters) ByWholesalePrice(WholesalePrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "wholesale_price",
		Value:  WholesalePrice,
		IsNil:  WholesalePrice == 0,
	}
}

func (ft VariantFilters) ByWholesalePricePtr(WholesalePrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "wholesale_price",
		Value:  WholesalePrice,
		IsNil:  WholesalePrice == nil,
		IsZero: WholesalePrice != nil && (*WholesalePrice) == 0,
	}
}

func (ft VariantFilters) ByListPrice(ListPrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "list_price",
		Value:  ListPrice,
		IsNil:  ListPrice == 0,
	}
}

func (ft VariantFilters) ByListPricePtr(ListPrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "list_price",
		Value:  ListPrice,
		IsNil:  ListPrice == nil,
		IsZero: ListPrice != nil && (*ListPrice) == 0,
	}
}

func (ft VariantFilters) ByRetailPriceMin(RetailPriceMin int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "retail_price_min",
		Value:  RetailPriceMin,
		IsNil:  RetailPriceMin == 0,
	}
}

func (ft VariantFilters) ByRetailPriceMinPtr(RetailPriceMin *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "retail_price_min",
		Value:  RetailPriceMin,
		IsNil:  RetailPriceMin == nil,
		IsZero: RetailPriceMin != nil && (*RetailPriceMin) == 0,
	}
}

func (ft VariantFilters) ByRetailPriceMax(RetailPriceMax int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "retail_price_max",
		Value:  RetailPriceMax,
		IsNil:  RetailPriceMax == 0,
	}
}

func (ft VariantFilters) ByRetailPriceMaxPtr(RetailPriceMax *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "retail_price_max",
		Value:  RetailPriceMax,
		IsNil:  RetailPriceMax == nil,
		IsZero: RetailPriceMax != nil && (*RetailPriceMax) == 0,
	}
}

func (ft VariantFilters) ByEdWholesalePrice0(EdWholesalePrice0 int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_wholesale_price_0",
		Value:  EdWholesalePrice0,
		IsNil:  EdWholesalePrice0 == 0,
	}
}

func (ft VariantFilters) ByEdWholesalePrice0Ptr(EdWholesalePrice0 *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_wholesale_price_0",
		Value:  EdWholesalePrice0,
		IsNil:  EdWholesalePrice0 == nil,
		IsZero: EdWholesalePrice0 != nil && (*EdWholesalePrice0) == 0,
	}
}

func (ft VariantFilters) ByEdWholesalePrice(EdWholesalePrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_wholesale_price",
		Value:  EdWholesalePrice,
		IsNil:  EdWholesalePrice == 0,
	}
}

func (ft VariantFilters) ByEdWholesalePricePtr(EdWholesalePrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_wholesale_price",
		Value:  EdWholesalePrice,
		IsNil:  EdWholesalePrice == nil,
		IsZero: EdWholesalePrice != nil && (*EdWholesalePrice) == 0,
	}
}

func (ft VariantFilters) ByEdListPrice(EdListPrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_list_price",
		Value:  EdListPrice,
		IsNil:  EdListPrice == 0,
	}
}

func (ft VariantFilters) ByEdListPricePtr(EdListPrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_list_price",
		Value:  EdListPrice,
		IsNil:  EdListPrice == nil,
		IsZero: EdListPrice != nil && (*EdListPrice) == 0,
	}
}

func (ft VariantFilters) ByEdRetailPriceMin(EdRetailPriceMin int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_retail_price_min",
		Value:  EdRetailPriceMin,
		IsNil:  EdRetailPriceMin == 0,
	}
}

func (ft VariantFilters) ByEdRetailPriceMinPtr(EdRetailPriceMin *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_retail_price_min",
		Value:  EdRetailPriceMin,
		IsNil:  EdRetailPriceMin == nil,
		IsZero: EdRetailPriceMin != nil && (*EdRetailPriceMin) == 0,
	}
}

func (ft VariantFilters) ByEdRetailPriceMax(EdRetailPriceMax int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_retail_price_max",
		Value:  EdRetailPriceMax,
		IsNil:  EdRetailPriceMax == 0,
	}
}

func (ft VariantFilters) ByEdRetailPriceMaxPtr(EdRetailPriceMax *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_retail_price_max",
		Value:  EdRetailPriceMax,
		IsNil:  EdRetailPriceMax == nil,
		IsZero: EdRetailPriceMax != nil && (*EdRetailPriceMax) == 0,
	}
}

func (ft VariantFilters) ByQuantityAvailable(QuantityAvailable int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "quantity_available",
		Value:  QuantityAvailable,
		IsNil:  QuantityAvailable == 0,
	}
}

func (ft VariantFilters) ByQuantityAvailablePtr(QuantityAvailable *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "quantity_available",
		Value:  QuantityAvailable,
		IsNil:  QuantityAvailable == nil,
		IsZero: QuantityAvailable != nil && (*QuantityAvailable) == 0,
	}
}

func (ft VariantFilters) ByQuantityOnHand(QuantityOnHand int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "quantity_on_hand",
		Value:  QuantityOnHand,
		IsNil:  QuantityOnHand == 0,
	}
}

func (ft VariantFilters) ByQuantityOnHandPtr(QuantityOnHand *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "quantity_on_hand",
		Value:  QuantityOnHand,
		IsNil:  QuantityOnHand == nil,
		IsZero: QuantityOnHand != nil && (*QuantityOnHand) == 0,
	}
}

func (ft VariantFilters) ByQuantityReserved(QuantityReserved int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "quantity_reserved",
		Value:  QuantityReserved,
		IsNil:  QuantityReserved == 0,
	}
}

func (ft VariantFilters) ByQuantityReservedPtr(QuantityReserved *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "quantity_reserved",
		Value:  QuantityReserved,
		IsNil:  QuantityReserved == nil,
		IsZero: QuantityReserved != nil && (*QuantityReserved) == 0,
	}
}

func (ft VariantFilters) ByCostPrice(CostPrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "cost_price",
		Value:  CostPrice,
		IsNil:  CostPrice == 0,
	}
}

func (ft VariantFilters) ByCostPricePtr(CostPrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "cost_price",
		Value:  CostPrice,
		IsNil:  CostPrice == nil,
		IsZero: CostPrice != nil && (*CostPrice) == 0,
	}
}

func (ft VariantFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft VariantFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft VariantFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft VariantFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

type VariantExternalFilters struct{ prefix string }

func NewVariantExternalFilters(prefix string) VariantExternalFilters {
	return VariantExternalFilters{prefix}
}

func (ft VariantExternalFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft VariantExternalFilters) Prefix() string {
	return ft.prefix
}

func (ft VariantExternalFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft VariantExternalFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft VariantExternalFilters) ByProductSourceID(ProductSourceID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == 0,
	}
}

func (ft VariantExternalFilters) ByProductSourceIDPtr(ProductSourceID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == nil,
		IsZero: ProductSourceID != nil && (*ProductSourceID) == 0,
	}
}

func (ft VariantExternalFilters) ByProductSourceType(ProductSourceType string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_type",
		Value:  ProductSourceType,
		IsNil:  ProductSourceType == "",
	}
}

func (ft VariantExternalFilters) ByProductSourceTypePtr(ProductSourceType *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_type",
		Value:  ProductSourceType,
		IsNil:  ProductSourceType == nil,
		IsZero: ProductSourceType != nil && (*ProductSourceType) == "",
	}
}

func (ft VariantExternalFilters) ByExternalID(ExternalID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_id",
		Value:  ExternalID,
		IsNil:  ExternalID == "",
	}
}

func (ft VariantExternalFilters) ByExternalIDPtr(ExternalID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_id",
		Value:  ExternalID,
		IsNil:  ExternalID == nil,
		IsZero: ExternalID != nil && (*ExternalID) == "",
	}
}

func (ft VariantExternalFilters) ByExternalName(ExternalName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_name",
		Value:  ExternalName,
		IsNil:  ExternalName == "",
	}
}

func (ft VariantExternalFilters) ByExternalNamePtr(ExternalName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_name",
		Value:  ExternalName,
		IsNil:  ExternalName == nil,
		IsZero: ExternalName != nil && (*ExternalName) == "",
	}
}

func (ft VariantExternalFilters) ByExternalCode(ExternalCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_code",
		Value:  ExternalCode,
		IsNil:  ExternalCode == "",
	}
}

func (ft VariantExternalFilters) ByExternalCodePtr(ExternalCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_code",
		Value:  ExternalCode,
		IsNil:  ExternalCode == nil,
		IsZero: ExternalCode != nil && (*ExternalCode) == "",
	}
}

func (ft VariantExternalFilters) ByExternalCategoryID(ExternalCategoryID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_category_id",
		Value:  ExternalCategoryID,
		IsNil:  ExternalCategoryID == "",
	}
}

func (ft VariantExternalFilters) ByExternalCategoryIDPtr(ExternalCategoryID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_category_id",
		Value:  ExternalCategoryID,
		IsNil:  ExternalCategoryID == nil,
		IsZero: ExternalCategoryID != nil && (*ExternalCategoryID) == "",
	}
}

func (ft VariantExternalFilters) ByExternalDescription(ExternalDescription string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_description",
		Value:  ExternalDescription,
		IsNil:  ExternalDescription == "",
	}
}

func (ft VariantExternalFilters) ByExternalDescriptionPtr(ExternalDescription *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_description",
		Value:  ExternalDescription,
		IsNil:  ExternalDescription == nil,
		IsZero: ExternalDescription != nil && (*ExternalDescription) == "",
	}
}

func (ft VariantExternalFilters) ByExternalUnit(ExternalUnit string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_unit",
		Value:  ExternalUnit,
		IsNil:  ExternalUnit == "",
	}
}

func (ft VariantExternalFilters) ByExternalUnitPtr(ExternalUnit *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_unit",
		Value:  ExternalUnit,
		IsNil:  ExternalUnit == nil,
		IsZero: ExternalUnit != nil && (*ExternalUnit) == "",
	}
}

func (ft VariantExternalFilters) ByExternalStatus(ExternalStatus model.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_status",
		Value:  ExternalStatus,
		IsNil:  ExternalStatus == 0,
	}
}

func (ft VariantExternalFilters) ByExternalStatusPtr(ExternalStatus *model.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_status",
		Value:  ExternalStatus,
		IsNil:  ExternalStatus == nil,
		IsZero: ExternalStatus != nil && (*ExternalStatus) == 0,
	}
}

func (ft VariantExternalFilters) ByExternalCreatedAt(ExternalCreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_created_at",
		Value:  ExternalCreatedAt,
		IsNil:  ExternalCreatedAt.IsZero(),
	}
}

func (ft VariantExternalFilters) ByExternalCreatedAtPtr(ExternalCreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_created_at",
		Value:  ExternalCreatedAt,
		IsNil:  ExternalCreatedAt == nil,
		IsZero: ExternalCreatedAt != nil && (*ExternalCreatedAt).IsZero(),
	}
}

func (ft VariantExternalFilters) ByExternalUpdatedAt(ExternalUpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_updated_at",
		Value:  ExternalUpdatedAt,
		IsNil:  ExternalUpdatedAt.IsZero(),
	}
}

func (ft VariantExternalFilters) ByExternalUpdatedAtPtr(ExternalUpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_updated_at",
		Value:  ExternalUpdatedAt,
		IsNil:  ExternalUpdatedAt == nil,
		IsZero: ExternalUpdatedAt != nil && (*ExternalUpdatedAt).IsZero(),
	}
}

func (ft VariantExternalFilters) ByExternalDeletedAt(ExternalDeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_deleted_at",
		Value:  ExternalDeletedAt,
		IsNil:  ExternalDeletedAt.IsZero(),
	}
}

func (ft VariantExternalFilters) ByExternalDeletedAtPtr(ExternalDeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_deleted_at",
		Value:  ExternalDeletedAt,
		IsNil:  ExternalDeletedAt == nil,
		IsZero: ExternalDeletedAt != nil && (*ExternalDeletedAt).IsZero(),
	}
}

func (ft VariantExternalFilters) ByLastSyncAt(LastSyncAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt.IsZero(),
	}
}

func (ft VariantExternalFilters) ByLastSyncAtPtr(LastSyncAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt == nil,
		IsZero: LastSyncAt != nil && (*LastSyncAt).IsZero(),
	}
}

func (ft VariantExternalFilters) ByExternalProductID(ExternalProductID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_product_id",
		Value:  ExternalProductID,
		IsNil:  ExternalProductID == "",
	}
}

func (ft VariantExternalFilters) ByExternalProductIDPtr(ExternalProductID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_product_id",
		Value:  ExternalProductID,
		IsNil:  ExternalProductID == nil,
		IsZero: ExternalProductID != nil && (*ExternalProductID) == "",
	}
}

func (ft VariantExternalFilters) ByExternalPrice(ExternalPrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_price",
		Value:  ExternalPrice,
		IsNil:  ExternalPrice == 0,
	}
}

func (ft VariantExternalFilters) ByExternalPricePtr(ExternalPrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_price",
		Value:  ExternalPrice,
		IsNil:  ExternalPrice == nil,
		IsZero: ExternalPrice != nil && (*ExternalPrice) == 0,
	}
}

func (ft VariantExternalFilters) ByExternalBaseUnitID(ExternalBaseUnitID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_base_unit_id",
		Value:  ExternalBaseUnitID,
		IsNil:  ExternalBaseUnitID == "",
	}
}

func (ft VariantExternalFilters) ByExternalBaseUnitIDPtr(ExternalBaseUnitID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_base_unit_id",
		Value:  ExternalBaseUnitID,
		IsNil:  ExternalBaseUnitID == nil,
		IsZero: ExternalBaseUnitID != nil && (*ExternalBaseUnitID) == "",
	}
}

func (ft VariantExternalFilters) ByExternalUnitConv(ExternalUnitConv float64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_unit_conv",
		Value:  ExternalUnitConv,
		IsNil:  ExternalUnitConv == 0,
	}
}

func (ft VariantExternalFilters) ByExternalUnitConvPtr(ExternalUnitConv *float64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_unit_conv",
		Value:  ExternalUnitConv,
		IsNil:  ExternalUnitConv == nil,
		IsZero: ExternalUnitConv != nil && (*ExternalUnitConv) == 0,
	}
}

type PriceDefFilters struct{ prefix string }

func NewPriceDefFilters(prefix string) PriceDefFilters {
	return PriceDefFilters{prefix}
}

func (ft PriceDefFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft PriceDefFilters) Prefix() string {
	return ft.prefix
}

func (ft PriceDefFilters) ByWholesalePrice0(WholesalePrice0 int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "wholesale_price_0",
		Value:  WholesalePrice0,
		IsNil:  WholesalePrice0 == 0,
	}
}

func (ft PriceDefFilters) ByWholesalePrice0Ptr(WholesalePrice0 *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "wholesale_price_0",
		Value:  WholesalePrice0,
		IsNil:  WholesalePrice0 == nil,
		IsZero: WholesalePrice0 != nil && (*WholesalePrice0) == 0,
	}
}

func (ft PriceDefFilters) ByWholesalePrice(WholesalePrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "wholesale_price",
		Value:  WholesalePrice,
		IsNil:  WholesalePrice == 0,
	}
}

func (ft PriceDefFilters) ByWholesalePricePtr(WholesalePrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "wholesale_price",
		Value:  WholesalePrice,
		IsNil:  WholesalePrice == nil,
		IsZero: WholesalePrice != nil && (*WholesalePrice) == 0,
	}
}

func (ft PriceDefFilters) ByListPrice(ListPrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "list_price",
		Value:  ListPrice,
		IsNil:  ListPrice == 0,
	}
}

func (ft PriceDefFilters) ByListPricePtr(ListPrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "list_price",
		Value:  ListPrice,
		IsNil:  ListPrice == nil,
		IsZero: ListPrice != nil && (*ListPrice) == 0,
	}
}

func (ft PriceDefFilters) ByRetailPriceMin(RetailPriceMin int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "retail_price_min",
		Value:  RetailPriceMin,
		IsNil:  RetailPriceMin == 0,
	}
}

func (ft PriceDefFilters) ByRetailPriceMinPtr(RetailPriceMin *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "retail_price_min",
		Value:  RetailPriceMin,
		IsNil:  RetailPriceMin == nil,
		IsZero: RetailPriceMin != nil && (*RetailPriceMin) == 0,
	}
}

func (ft PriceDefFilters) ByRetailPriceMax(RetailPriceMax int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "retail_price_max",
		Value:  RetailPriceMax,
		IsNil:  RetailPriceMax == 0,
	}
}

func (ft PriceDefFilters) ByRetailPriceMaxPtr(RetailPriceMax *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "retail_price_max",
		Value:  RetailPriceMax,
		IsNil:  RetailPriceMax == nil,
		IsZero: RetailPriceMax != nil && (*RetailPriceMax) == 0,
	}
}

type VariantQuantityFilters struct{ prefix string }

func NewVariantQuantityFilters(prefix string) VariantQuantityFilters {
	return VariantQuantityFilters{prefix}
}

func (ft VariantQuantityFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft VariantQuantityFilters) Prefix() string {
	return ft.prefix
}

func (ft VariantQuantityFilters) ByQuantityAvailable(QuantityAvailable int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "quantity_available",
		Value:  QuantityAvailable,
		IsNil:  QuantityAvailable == 0,
	}
}

func (ft VariantQuantityFilters) ByQuantityAvailablePtr(QuantityAvailable *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "quantity_available",
		Value:  QuantityAvailable,
		IsNil:  QuantityAvailable == nil,
		IsZero: QuantityAvailable != nil && (*QuantityAvailable) == 0,
	}
}

func (ft VariantQuantityFilters) ByQuantityOnHand(QuantityOnHand int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "quantity_on_hand",
		Value:  QuantityOnHand,
		IsNil:  QuantityOnHand == 0,
	}
}

func (ft VariantQuantityFilters) ByQuantityOnHandPtr(QuantityOnHand *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "quantity_on_hand",
		Value:  QuantityOnHand,
		IsNil:  QuantityOnHand == nil,
		IsZero: QuantityOnHand != nil && (*QuantityOnHand) == 0,
	}
}

func (ft VariantQuantityFilters) ByQuantityReserved(QuantityReserved int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "quantity_reserved",
		Value:  QuantityReserved,
		IsNil:  QuantityReserved == 0,
	}
}

func (ft VariantQuantityFilters) ByQuantityReservedPtr(QuantityReserved *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "quantity_reserved",
		Value:  QuantityReserved,
		IsNil:  QuantityReserved == nil,
		IsZero: QuantityReserved != nil && (*QuantityReserved) == 0,
	}
}

type ShopVariantFilters struct{ prefix string }

func NewShopVariantFilters(prefix string) ShopVariantFilters {
	return ShopVariantFilters{prefix}
}

func (ft ShopVariantFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ShopVariantFilters) Prefix() string {
	return ft.prefix
}

func (ft ShopVariantFilters) ByShopID(ShopID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == 0,
	}
}

func (ft ShopVariantFilters) ByShopIDPtr(ShopID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == nil,
		IsZero: ShopID != nil && (*ShopID) == 0,
	}
}

func (ft ShopVariantFilters) ByVariantID(VariantID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "variant_id",
		Value:  VariantID,
		IsNil:  VariantID == 0,
	}
}

func (ft ShopVariantFilters) ByVariantIDPtr(VariantID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "variant_id",
		Value:  VariantID,
		IsNil:  VariantID == nil,
		IsZero: VariantID != nil && (*VariantID) == 0,
	}
}

func (ft ShopVariantFilters) ByCollectionID(CollectionID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "collection_id",
		Value:  CollectionID,
		IsNil:  CollectionID == 0,
	}
}

func (ft ShopVariantFilters) ByCollectionIDPtr(CollectionID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "collection_id",
		Value:  CollectionID,
		IsNil:  CollectionID == nil,
		IsZero: CollectionID != nil && (*CollectionID) == 0,
	}
}

func (ft ShopVariantFilters) ByProductID(ProductID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == 0,
	}
}

func (ft ShopVariantFilters) ByProductIDPtr(ProductID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == nil,
		IsZero: ProductID != nil && (*ProductID) == 0,
	}
}

func (ft ShopVariantFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft ShopVariantFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft ShopVariantFilters) ByDescription(Description string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == "",
	}
}

func (ft ShopVariantFilters) ByDescriptionPtr(Description *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == nil,
		IsZero: Description != nil && (*Description) == "",
	}
}

func (ft ShopVariantFilters) ByDescHTML(DescHTML string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == "",
	}
}

func (ft ShopVariantFilters) ByDescHTMLPtr(DescHTML *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == nil,
		IsZero: DescHTML != nil && (*DescHTML) == "",
	}
}

func (ft ShopVariantFilters) ByShortDesc(ShortDesc string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == "",
	}
}

func (ft ShopVariantFilters) ByShortDescPtr(ShortDesc *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == nil,
		IsZero: ShortDesc != nil && (*ShortDesc) == "",
	}
}

func (ft ShopVariantFilters) ByNote(Note string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "note",
		Value:  Note,
		IsNil:  Note == "",
	}
}

func (ft ShopVariantFilters) ByNotePtr(Note *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "note",
		Value:  Note,
		IsNil:  Note == nil,
		IsZero: Note != nil && (*Note) == "",
	}
}

func (ft ShopVariantFilters) ByRetailPrice(RetailPrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "retail_price",
		Value:  RetailPrice,
		IsNil:  RetailPrice == 0,
	}
}

func (ft ShopVariantFilters) ByRetailPricePtr(RetailPrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "retail_price",
		Value:  RetailPrice,
		IsNil:  RetailPrice == nil,
		IsZero: RetailPrice != nil && (*RetailPrice) == 0,
	}
}

func (ft ShopVariantFilters) ByStatus(Status model.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft ShopVariantFilters) ByStatusPtr(Status *model.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft ShopVariantFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ShopVariantFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft ShopVariantFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft ShopVariantFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft ShopVariantFilters) ByNameNorm(NameNorm string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name_norm",
		Value:  NameNorm,
		IsNil:  NameNorm == "",
	}
}

func (ft ShopVariantFilters) ByNameNormPtr(NameNorm *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name_norm",
		Value:  NameNorm,
		IsNil:  NameNorm == nil,
		IsZero: NameNorm != nil && (*NameNorm) == "",
	}
}

type ShopProductFilters struct{ prefix string }

func NewShopProductFilters(prefix string) ShopProductFilters {
	return ShopProductFilters{prefix}
}

func (ft ShopProductFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ShopProductFilters) Prefix() string {
	return ft.prefix
}

func (ft ShopProductFilters) ByShopID(ShopID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == 0,
	}
}

func (ft ShopProductFilters) ByShopIDPtr(ShopID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == nil,
		IsZero: ShopID != nil && (*ShopID) == 0,
	}
}

func (ft ShopProductFilters) ByProductID(ProductID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == 0,
	}
}

func (ft ShopProductFilters) ByProductIDPtr(ProductID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == nil,
		IsZero: ProductID != nil && (*ProductID) == 0,
	}
}

func (ft ShopProductFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft ShopProductFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft ShopProductFilters) ByDescription(Description string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == "",
	}
}

func (ft ShopProductFilters) ByDescriptionPtr(Description *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == nil,
		IsZero: Description != nil && (*Description) == "",
	}
}

func (ft ShopProductFilters) ByDescHTML(DescHTML string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == "",
	}
}

func (ft ShopProductFilters) ByDescHTMLPtr(DescHTML *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == nil,
		IsZero: DescHTML != nil && (*DescHTML) == "",
	}
}

func (ft ShopProductFilters) ByShortDesc(ShortDesc string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == "",
	}
}

func (ft ShopProductFilters) ByShortDescPtr(ShortDesc *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == nil,
		IsZero: ShortDesc != nil && (*ShortDesc) == "",
	}
}

func (ft ShopProductFilters) ByNote(Note string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "note",
		Value:  Note,
		IsNil:  Note == "",
	}
}

func (ft ShopProductFilters) ByNotePtr(Note *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "note",
		Value:  Note,
		IsNil:  Note == nil,
		IsZero: Note != nil && (*Note) == "",
	}
}

func (ft ShopProductFilters) ByRetailPrice(RetailPrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "retail_price",
		Value:  RetailPrice,
		IsNil:  RetailPrice == 0,
	}
}

func (ft ShopProductFilters) ByRetailPricePtr(RetailPrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "retail_price",
		Value:  RetailPrice,
		IsNil:  RetailPrice == nil,
		IsZero: RetailPrice != nil && (*RetailPrice) == 0,
	}
}

func (ft ShopProductFilters) ByStatus(Status model.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft ShopProductFilters) ByStatusPtr(Status *model.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft ShopProductFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ShopProductFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft ShopProductFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft ShopProductFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft ShopProductFilters) ByNameNorm(NameNorm string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name_norm",
		Value:  NameNorm,
		IsNil:  NameNorm == "",
	}
}

func (ft ShopProductFilters) ByNameNormPtr(NameNorm *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name_norm",
		Value:  NameNorm,
		IsNil:  NameNorm == nil,
		IsZero: NameNorm != nil && (*NameNorm) == "",
	}
}

type ShopCollectionFilters struct{ prefix string }

func NewShopCollectionFilters(prefix string) ShopCollectionFilters {
	return ShopCollectionFilters{prefix}
}

func (ft ShopCollectionFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ShopCollectionFilters) Prefix() string {
	return ft.prefix
}

func (ft ShopCollectionFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft ShopCollectionFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft ShopCollectionFilters) ByShopID(ShopID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == 0,
	}
}

func (ft ShopCollectionFilters) ByShopIDPtr(ShopID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == nil,
		IsZero: ShopID != nil && (*ShopID) == 0,
	}
}

func (ft ShopCollectionFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft ShopCollectionFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft ShopCollectionFilters) ByDescription(Description string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == "",
	}
}

func (ft ShopCollectionFilters) ByDescriptionPtr(Description *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == nil,
		IsZero: Description != nil && (*Description) == "",
	}
}

func (ft ShopCollectionFilters) ByDescHTML(DescHTML string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == "",
	}
}

func (ft ShopCollectionFilters) ByDescHTMLPtr(DescHTML *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == nil,
		IsZero: DescHTML != nil && (*DescHTML) == "",
	}
}

func (ft ShopCollectionFilters) ByShortDesc(ShortDesc string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == "",
	}
}

func (ft ShopCollectionFilters) ByShortDescPtr(ShortDesc *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == nil,
		IsZero: ShortDesc != nil && (*ShortDesc) == "",
	}
}

func (ft ShopCollectionFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ShopCollectionFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft ShopCollectionFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft ShopCollectionFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

type ProductShopCollectionFilters struct{ prefix string }

func NewProductShopCollectionFilters(prefix string) ProductShopCollectionFilters {
	return ProductShopCollectionFilters{prefix}
}

func (ft ProductShopCollectionFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ProductShopCollectionFilters) Prefix() string {
	return ft.prefix
}

func (ft ProductShopCollectionFilters) ByCollectionID(CollectionID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "collection_id",
		Value:  CollectionID,
		IsNil:  CollectionID == 0,
	}
}

func (ft ProductShopCollectionFilters) ByCollectionIDPtr(CollectionID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "collection_id",
		Value:  CollectionID,
		IsNil:  CollectionID == nil,
		IsZero: CollectionID != nil && (*CollectionID) == 0,
	}
}

func (ft ProductShopCollectionFilters) ByProductID(ProductID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == 0,
	}
}

func (ft ProductShopCollectionFilters) ByProductIDPtr(ProductID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == nil,
		IsZero: ProductID != nil && (*ProductID) == 0,
	}
}

func (ft ProductShopCollectionFilters) ByShopID(ShopID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == 0,
	}
}

func (ft ProductShopCollectionFilters) ByShopIDPtr(ShopID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == nil,
		IsZero: ShopID != nil && (*ShopID) == 0,
	}
}

func (ft ProductShopCollectionFilters) ByStatus(Status int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft ProductShopCollectionFilters) ByStatusPtr(Status *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft ProductShopCollectionFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ProductShopCollectionFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft ProductShopCollectionFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft ProductShopCollectionFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}
