// Code generated by goderive DO NOT EDIT.

package model

import (
	"database/sql"
	"time"

	sq "etop.vn/backend/pkg/common/sql"
	core "etop.vn/backend/pkg/common/sql/core"
	model "etop.vn/backend/pkg/etop/model"
)

// *EtopProduct is a substruct of *Product
func substructEtopProduct(_ *EtopProduct, _ *Product) bool { return true }

func EtopProductsFromProducts(ps []*Product) []*EtopProduct {
	ss := make([]*EtopProduct, len(ps))
	for i, p := range ps {
		ss[i] = NewEtopProductFromProduct(p)
	}
	return ss
}

func EtopProductsToProducts(ss []*EtopProduct) []*Product {
	ps := make([]*Product, len(ss))
	for i, s := range ss {
		ps[i] = s.ToProduct()
	}
	return ps
}

func NewEtopProductFromProduct(sp *Product) *EtopProduct {
	if sp == nil {
		return nil
	}
	s := new(EtopProduct)
	s.CopyFrom(sp)
	return s
}

func (s *EtopProduct) ToProduct() *Product {
	if s == nil {
		return nil
	}
	sp := new(Product)
	s.AssignTo(sp)
	return sp
}

func (s *EtopProduct) CopyFrom(sp *Product) {
	s.ID = sp.ID
	s.SupplierID = sp.SupplierID
	s.Name = sp.Name
	s.Description = sp.Description
	s.DescHTML = sp.DescHTML
	s.ShortDesc = sp.ShortDesc
	s.ImageURLs = sp.ImageURLs
	s.Status = sp.Status
	s.Code = sp.Code
	s.QuantityAvailable = sp.QuantityAvailable
	s.QuantityOnHand = sp.QuantityOnHand
	s.QuantityReserved = sp.QuantityReserved
}

func (s *EtopProduct) AssignTo(sp *Product) {
	sp.ID = s.ID
	sp.SupplierID = s.SupplierID
	sp.Name = s.Name
	sp.Description = s.Description
	sp.DescHTML = s.DescHTML
	sp.ShortDesc = s.ShortDesc
	sp.ImageURLs = s.ImageURLs
	sp.Status = s.Status
	sp.Code = s.Code
	sp.QuantityAvailable = s.QuantityAvailable
	sp.QuantityOnHand = s.QuantityOnHand
	sp.QuantityReserved = s.QuantityReserved
}

type SQLWriter = core.SQLWriter

// Type Product represents table product
func sqlgenProduct(_ *Product) bool { return true }

type Products []*Product

const __sqlProduct_Table = "product"
const __sqlProduct_ListCols = "\"id\",\"product_source_id\",\"supplier_id\",\"product_source_category_id\",\"etop_category_id\",\"name\",\"short_desc\",\"description\",\"desc_html\",\"ed_name\",\"ed_short_desc\",\"ed_description\",\"ed_desc_html\",\"ed_tags\",\"unit\",\"status\",\"code\",\"ed_code\",\"quantity_available\",\"quantity_on_hand\",\"quantity_reserved\",\"image_urls\",\"created_at\",\"updated_at\",\"name_norm\",\"name_norm_ua\""
const __sqlProduct_Insert = "INSERT INTO \"product\" (" + __sqlProduct_ListCols + ") VALUES"
const __sqlProduct_Select = "SELECT " + __sqlProduct_ListCols + " FROM \"product\""
const __sqlProduct_Select_history = "SELECT " + __sqlProduct_ListCols + " FROM history.\"product\""
const __sqlProduct_UpdateAll = "UPDATE \"product\" SET (" + __sqlProduct_ListCols + ")"

func (m *Product) SQLTableName() string  { return "product" }
func (m *Products) SQLTableName() string { return "product" }
func (m *Product) SQLListCols() string   { return __sqlProduct_ListCols }

func (m *Product) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ProductSourceID),
		core.Int64(m.SupplierID),
		core.String(m.ProductSourceCategoryID),
		core.Int64(m.EtopCategoryID),
		core.String(m.Name),
		core.String(m.ShortDesc),
		core.String(m.Description),
		core.String(m.DescHTML),
		core.String(m.EdName),
		core.String(m.EdShortDesc),
		core.String(m.EdDescription),
		core.String(m.EdDescHTML),
		core.Array{m.EdTags, opts},
		core.String(m.Unit),
		core.Int(m.Status),
		core.String(m.Code),
		core.String(m.EdCode),
		core.Int(m.QuantityAvailable),
		core.Int(m.QuantityOnHand),
		core.Int(m.QuantityReserved),
		core.Array{m.ImageURLs, opts},
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.String(m.NameNorm),
		core.String(m.NameNormUa),
	}
}

func (m *Product) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ProductSourceID),
		(*core.Int64)(&m.SupplierID),
		(*core.String)(&m.ProductSourceCategoryID),
		(*core.Int64)(&m.EtopCategoryID),
		(*core.String)(&m.Name),
		(*core.String)(&m.ShortDesc),
		(*core.String)(&m.Description),
		(*core.String)(&m.DescHTML),
		(*core.String)(&m.EdName),
		(*core.String)(&m.EdShortDesc),
		(*core.String)(&m.EdDescription),
		(*core.String)(&m.EdDescHTML),
		core.Array{&m.EdTags, opts},
		(*core.String)(&m.Unit),
		(*core.Int)(&m.Status),
		(*core.String)(&m.Code),
		(*core.String)(&m.EdCode),
		(*core.Int)(&m.QuantityAvailable),
		(*core.Int)(&m.QuantityOnHand),
		(*core.Int)(&m.QuantityReserved),
		core.Array{&m.ImageURLs, opts},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.String)(&m.NameNorm),
		(*core.String)(&m.NameNormUa),
	}
}

func (m *Product) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Products) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Products, 0, 128)
	for rows.Next() {
		m := new(Product)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Product) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProduct_Select)
	return nil
}

func (_ *Products) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProduct_Select)
	return nil
}

func (m *Product) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProduct_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(26)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Products) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProduct_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(26)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Product) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("product")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ProductSourceID != 0 {
		flag = true
		w.WriteName("product_source_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductSourceID)
	}
	if m.SupplierID != 0 {
		flag = true
		w.WriteName("supplier_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SupplierID)
	}
	if m.ProductSourceCategoryID != "" {
		flag = true
		w.WriteName("product_source_category_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductSourceCategoryID)
	}
	if m.EtopCategoryID != 0 {
		flag = true
		w.WriteName("etop_category_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EtopCategoryID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.ShortDesc != "" {
		flag = true
		w.WriteName("short_desc")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShortDesc)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.DescHTML != "" {
		flag = true
		w.WriteName("desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DescHTML)
	}
	if m.EdName != "" {
		flag = true
		w.WriteName("ed_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdName)
	}
	if m.EdShortDesc != "" {
		flag = true
		w.WriteName("ed_short_desc")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdShortDesc)
	}
	if m.EdDescription != "" {
		flag = true
		w.WriteName("ed_description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdDescription)
	}
	if m.EdDescHTML != "" {
		flag = true
		w.WriteName("ed_desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdDescHTML)
	}
	if m.EdTags != nil {
		flag = true
		w.WriteName("ed_tags")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.EdTags, opts})
	}
	if m.Unit != "" {
		flag = true
		w.WriteName("unit")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Unit)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.EdCode != "" {
		flag = true
		w.WriteName("ed_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdCode)
	}
	if m.QuantityAvailable != 0 {
		flag = true
		w.WriteName("quantity_available")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityAvailable)
	}
	if m.QuantityOnHand != 0 {
		flag = true
		w.WriteName("quantity_on_hand")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityOnHand)
	}
	if m.QuantityReserved != 0 {
		flag = true
		w.WriteName("quantity_reserved")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityReserved)
	}
	if m.ImageURLs != nil {
		flag = true
		w.WriteName("image_urls")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ImageURLs, opts})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if m.NameNorm != "" {
		flag = true
		w.WriteName("name_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.NameNorm)
	}
	if m.NameNormUa != "" {
		flag = true
		w.WriteName("name_norm_ua")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.NameNormUa)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Product) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlProduct_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(26)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ProductHistory map[string]interface{}
type ProductHistories []map[string]interface{}

func (m *ProductHistory) SQLTableName() string  { return "history.\"product\"" }
func (m ProductHistories) SQLTableName() string { return "history.\"product\"" }

func (m *ProductHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProduct_Select_history)
	return nil
}

func (m ProductHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProduct_Select_history)
	return nil
}

func (m ProductHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m ProductHistory) ProductSourceID() core.Interface {
	return core.Interface{m["product_source_id"]}
}
func (m ProductHistory) SupplierID() core.Interface { return core.Interface{m["supplier_id"]} }
func (m ProductHistory) ProductSourceCategoryID() core.Interface {
	return core.Interface{m["product_source_category_id"]}
}
func (m ProductHistory) EtopCategoryID() core.Interface { return core.Interface{m["etop_category_id"]} }
func (m ProductHistory) Name() core.Interface           { return core.Interface{m["name"]} }
func (m ProductHistory) ShortDesc() core.Interface      { return core.Interface{m["short_desc"]} }
func (m ProductHistory) Description() core.Interface    { return core.Interface{m["description"]} }
func (m ProductHistory) DescHTML() core.Interface       { return core.Interface{m["desc_html"]} }
func (m ProductHistory) EdName() core.Interface         { return core.Interface{m["ed_name"]} }
func (m ProductHistory) EdShortDesc() core.Interface    { return core.Interface{m["ed_short_desc"]} }
func (m ProductHistory) EdDescription() core.Interface  { return core.Interface{m["ed_description"]} }
func (m ProductHistory) EdDescHTML() core.Interface     { return core.Interface{m["ed_desc_html"]} }
func (m ProductHistory) EdTags() core.Interface         { return core.Interface{m["ed_tags"]} }
func (m ProductHistory) Unit() core.Interface           { return core.Interface{m["unit"]} }
func (m ProductHistory) Status() core.Interface         { return core.Interface{m["status"]} }
func (m ProductHistory) Code() core.Interface           { return core.Interface{m["code"]} }
func (m ProductHistory) EdCode() core.Interface         { return core.Interface{m["ed_code"]} }
func (m ProductHistory) QuantityAvailable() core.Interface {
	return core.Interface{m["quantity_available"]}
}
func (m ProductHistory) QuantityOnHand() core.Interface { return core.Interface{m["quantity_on_hand"]} }
func (m ProductHistory) QuantityReserved() core.Interface {
	return core.Interface{m["quantity_reserved"]}
}
func (m ProductHistory) ImageURLs() core.Interface  { return core.Interface{m["image_urls"]} }
func (m ProductHistory) CreatedAt() core.Interface  { return core.Interface{m["created_at"]} }
func (m ProductHistory) UpdatedAt() core.Interface  { return core.Interface{m["updated_at"]} }
func (m ProductHistory) NameNorm() core.Interface   { return core.Interface{m["name_norm"]} }
func (m ProductHistory) NameNormUa() core.Interface { return core.Interface{m["name_norm_ua"]} }

func (m *ProductHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 26)
	args := make([]interface{}, 26)
	for i := 0; i < 26; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ProductHistory, 26)
	res["id"] = data[0]
	res["product_source_id"] = data[1]
	res["supplier_id"] = data[2]
	res["product_source_category_id"] = data[3]
	res["etop_category_id"] = data[4]
	res["name"] = data[5]
	res["short_desc"] = data[6]
	res["description"] = data[7]
	res["desc_html"] = data[8]
	res["ed_name"] = data[9]
	res["ed_short_desc"] = data[10]
	res["ed_description"] = data[11]
	res["ed_desc_html"] = data[12]
	res["ed_tags"] = data[13]
	res["unit"] = data[14]
	res["status"] = data[15]
	res["code"] = data[16]
	res["ed_code"] = data[17]
	res["quantity_available"] = data[18]
	res["quantity_on_hand"] = data[19]
	res["quantity_reserved"] = data[20]
	res["image_urls"] = data[21]
	res["created_at"] = data[22]
	res["updated_at"] = data[23]
	res["name_norm"] = data[24]
	res["name_norm_ua"] = data[25]
	*m = res
	return nil
}

func (ms *ProductHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 26)
	args := make([]interface{}, 26)
	for i := 0; i < 26; i++ {
		args[i] = &data[i]
	}
	res := make(ProductHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ProductHistory)
		m["id"] = data[0]
		m["product_source_id"] = data[1]
		m["supplier_id"] = data[2]
		m["product_source_category_id"] = data[3]
		m["etop_category_id"] = data[4]
		m["name"] = data[5]
		m["short_desc"] = data[6]
		m["description"] = data[7]
		m["desc_html"] = data[8]
		m["ed_name"] = data[9]
		m["ed_short_desc"] = data[10]
		m["ed_description"] = data[11]
		m["ed_desc_html"] = data[12]
		m["ed_tags"] = data[13]
		m["unit"] = data[14]
		m["status"] = data[15]
		m["code"] = data[16]
		m["ed_code"] = data[17]
		m["quantity_available"] = data[18]
		m["quantity_on_hand"] = data[19]
		m["quantity_reserved"] = data[20]
		m["image_urls"] = data[21]
		m["created_at"] = data[22]
		m["updated_at"] = data[23]
		m["name_norm"] = data[24]
		m["name_norm_ua"] = data[25]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ProductExternal represents table product_external
func sqlgenProductExternal(_ *ProductExternal) bool { return true }

type ProductExternals []*ProductExternal

const __sqlProductExternal_Table = "product_external"
const __sqlProductExternal_ListCols = "\"id\",\"product_source_id\",\"product_source_type\",\"external_id\",\"external_name\",\"external_code\",\"external_category_id\",\"external_description\",\"external_image_urls\",\"external_unit\",\"external_data\",\"external_status\",\"external_created_at\",\"external_updated_at\",\"external_deleted_at\",\"last_sync_at\",\"external_units\""
const __sqlProductExternal_Insert = "INSERT INTO \"product_external\" (" + __sqlProductExternal_ListCols + ") VALUES"
const __sqlProductExternal_Select = "SELECT " + __sqlProductExternal_ListCols + " FROM \"product_external\""
const __sqlProductExternal_Select_history = "SELECT " + __sqlProductExternal_ListCols + " FROM history.\"product_external\""
const __sqlProductExternal_UpdateAll = "UPDATE \"product_external\" SET (" + __sqlProductExternal_ListCols + ")"

func (m *ProductExternal) SQLTableName() string  { return "product_external" }
func (m *ProductExternals) SQLTableName() string { return "product_external" }
func (m *ProductExternal) SQLListCols() string   { return __sqlProductExternal_ListCols }

func (m *ProductExternal) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ProductExternalCommon.ProductSourceID),
		core.String(m.ProductExternalCommon.ProductSourceType),
		core.String(m.ProductExternalCommon.ExternalID),
		core.String(m.ProductExternalCommon.ExternalName),
		core.String(m.ProductExternalCommon.ExternalCode),
		core.String(m.ProductExternalCommon.ExternalCategoryID),
		core.String(m.ProductExternalCommon.ExternalDescription),
		core.Array{m.ProductExternalCommon.ExternalImageURLs, opts},
		core.String(m.ProductExternalCommon.ExternalUnit),
		core.JSON{m.ProductExternalCommon.ExternalData},
		core.Int(m.ProductExternalCommon.ExternalStatus),
		core.Time(m.ProductExternalCommon.ExternalCreatedAt),
		core.Time(m.ProductExternalCommon.ExternalUpdatedAt),
		core.Time(m.ProductExternalCommon.ExternalDeletedAt),
		core.Time(m.ProductExternalCommon.LastSyncAt),
		core.JSON{m.ExternalUnits},
	}
}

func (m *ProductExternal) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ProductExternalCommon.ProductSourceID),
		(*core.String)(&m.ProductExternalCommon.ProductSourceType),
		(*core.String)(&m.ProductExternalCommon.ExternalID),
		(*core.String)(&m.ProductExternalCommon.ExternalName),
		(*core.String)(&m.ProductExternalCommon.ExternalCode),
		(*core.String)(&m.ProductExternalCommon.ExternalCategoryID),
		(*core.String)(&m.ProductExternalCommon.ExternalDescription),
		core.Array{&m.ProductExternalCommon.ExternalImageURLs, opts},
		(*core.String)(&m.ProductExternalCommon.ExternalUnit),
		core.JSON{&m.ProductExternalCommon.ExternalData},
		(*core.Int)(&m.ProductExternalCommon.ExternalStatus),
		(*core.Time)(&m.ProductExternalCommon.ExternalCreatedAt),
		(*core.Time)(&m.ProductExternalCommon.ExternalUpdatedAt),
		(*core.Time)(&m.ProductExternalCommon.ExternalDeletedAt),
		(*core.Time)(&m.ProductExternalCommon.LastSyncAt),
		core.JSON{&m.ExternalUnits},
	}
}

func (m *ProductExternal) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductExternals) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductExternals, 0, 128)
	for rows.Next() {
		m := new(ProductExternal)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ProductExternal) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductExternal_Select)
	return nil
}

func (_ *ProductExternals) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductExternal_Select)
	return nil
}

func (m *ProductExternal) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductExternal_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(17)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ProductExternals) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductExternal_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(17)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ProductExternal) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("product_external")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ProductExternalCommon.ProductSourceID != 0 {
		flag = true
		w.WriteName("product_source_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ProductSourceID)
	}
	if m.ProductExternalCommon.ProductSourceType != "" {
		flag = true
		w.WriteName("product_source_type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ProductSourceType)
	}
	if m.ProductExternalCommon.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalID)
	}
	if m.ProductExternalCommon.ExternalName != "" {
		flag = true
		w.WriteName("external_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalName)
	}
	if m.ProductExternalCommon.ExternalCode != "" {
		flag = true
		w.WriteName("external_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalCode)
	}
	if m.ProductExternalCommon.ExternalCategoryID != "" {
		flag = true
		w.WriteName("external_category_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalCategoryID)
	}
	if m.ProductExternalCommon.ExternalDescription != "" {
		flag = true
		w.WriteName("external_description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalDescription)
	}
	if m.ProductExternalCommon.ExternalImageURLs != nil {
		flag = true
		w.WriteName("external_image_urls")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ProductExternalCommon.ExternalImageURLs, opts})
	}
	if m.ProductExternalCommon.ExternalUnit != "" {
		flag = true
		w.WriteName("external_unit")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalUnit)
	}
	if m.ProductExternalCommon.ExternalData != nil {
		flag = true
		w.WriteName("external_data")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ProductExternalCommon.ExternalData})
	}
	if m.ProductExternalCommon.ExternalStatus != 0 {
		flag = true
		w.WriteName("external_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.ProductExternalCommon.ExternalStatus))
	}
	if !m.ProductExternalCommon.ExternalCreatedAt.IsZero() {
		flag = true
		w.WriteName("external_created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalCreatedAt)
	}
	if !m.ProductExternalCommon.ExternalUpdatedAt.IsZero() {
		flag = true
		w.WriteName("external_updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalUpdatedAt)
	}
	if !m.ProductExternalCommon.ExternalDeletedAt.IsZero() {
		flag = true
		w.WriteName("external_deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalDeletedAt)
	}
	if !m.ProductExternalCommon.LastSyncAt.IsZero() {
		flag = true
		w.WriteName("last_sync_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.LastSyncAt)
	}
	if m.ExternalUnits != nil {
		flag = true
		w.WriteName("external_units")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalUnits})
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ProductExternal) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlProductExternal_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(17)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ProductExternalHistory map[string]interface{}
type ProductExternalHistories []map[string]interface{}

func (m *ProductExternalHistory) SQLTableName() string  { return "history.\"product_external\"" }
func (m ProductExternalHistories) SQLTableName() string { return "history.\"product_external\"" }

func (m *ProductExternalHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductExternal_Select_history)
	return nil
}

func (m ProductExternalHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductExternal_Select_history)
	return nil
}

func (m ProductExternalHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m ProductExternalHistory) ProductSourceID() core.Interface {
	return core.Interface{m["product_source_id"]}
}
func (m ProductExternalHistory) ProductSourceType() core.Interface {
	return core.Interface{m["product_source_type"]}
}
func (m ProductExternalHistory) ExternalID() core.Interface { return core.Interface{m["external_id"]} }
func (m ProductExternalHistory) ExternalName() core.Interface {
	return core.Interface{m["external_name"]}
}
func (m ProductExternalHistory) ExternalCode() core.Interface {
	return core.Interface{m["external_code"]}
}
func (m ProductExternalHistory) ExternalCategoryID() core.Interface {
	return core.Interface{m["external_category_id"]}
}
func (m ProductExternalHistory) ExternalDescription() core.Interface {
	return core.Interface{m["external_description"]}
}
func (m ProductExternalHistory) ExternalImageURLs() core.Interface {
	return core.Interface{m["external_image_urls"]}
}
func (m ProductExternalHistory) ExternalUnit() core.Interface {
	return core.Interface{m["external_unit"]}
}
func (m ProductExternalHistory) ExternalData() core.Interface {
	return core.Interface{m["external_data"]}
}
func (m ProductExternalHistory) ExternalStatus() core.Interface {
	return core.Interface{m["external_status"]}
}
func (m ProductExternalHistory) ExternalCreatedAt() core.Interface {
	return core.Interface{m["external_created_at"]}
}
func (m ProductExternalHistory) ExternalUpdatedAt() core.Interface {
	return core.Interface{m["external_updated_at"]}
}
func (m ProductExternalHistory) ExternalDeletedAt() core.Interface {
	return core.Interface{m["external_deleted_at"]}
}
func (m ProductExternalHistory) LastSyncAt() core.Interface { return core.Interface{m["last_sync_at"]} }
func (m ProductExternalHistory) ExternalUnits() core.Interface {
	return core.Interface{m["external_units"]}
}

func (m *ProductExternalHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 17)
	args := make([]interface{}, 17)
	for i := 0; i < 17; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ProductExternalHistory, 17)
	res["id"] = data[0]
	res["product_source_id"] = data[1]
	res["product_source_type"] = data[2]
	res["external_id"] = data[3]
	res["external_name"] = data[4]
	res["external_code"] = data[5]
	res["external_category_id"] = data[6]
	res["external_description"] = data[7]
	res["external_image_urls"] = data[8]
	res["external_unit"] = data[9]
	res["external_data"] = data[10]
	res["external_status"] = data[11]
	res["external_created_at"] = data[12]
	res["external_updated_at"] = data[13]
	res["external_deleted_at"] = data[14]
	res["last_sync_at"] = data[15]
	res["external_units"] = data[16]
	*m = res
	return nil
}

func (ms *ProductExternalHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 17)
	args := make([]interface{}, 17)
	for i := 0; i < 17; i++ {
		args[i] = &data[i]
	}
	res := make(ProductExternalHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ProductExternalHistory)
		m["id"] = data[0]
		m["product_source_id"] = data[1]
		m["product_source_type"] = data[2]
		m["external_id"] = data[3]
		m["external_name"] = data[4]
		m["external_code"] = data[5]
		m["external_category_id"] = data[6]
		m["external_description"] = data[7]
		m["external_image_urls"] = data[8]
		m["external_unit"] = data[9]
		m["external_data"] = data[10]
		m["external_status"] = data[11]
		m["external_created_at"] = data[12]
		m["external_updated_at"] = data[13]
		m["external_deleted_at"] = data[14]
		m["last_sync_at"] = data[15]
		m["external_units"] = data[16]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ProductExtended represents a join
func sqlgenProductExtended(_ *ProductExtended, _ *Product, as sq.AS, t0 sq.JOIN_TYPE, _ *ProductExternal, a0 sq.AS, c0 string, t1 sq.JOIN_TYPE, _ *model.ProductSource, a1 sq.AS, c1 string) bool {
	__sqlProductExtended_JoinTypes = []sq.JOIN_TYPE{t0, t1}
	__sqlProductExtended_As = as
	__sqlProductExtended_JoinAs = []sq.AS{a0, a1}
	__sqlProductExtended_JoinConds = []string{c0, c1}
	return true
}

type ProductExtendeds []*ProductExtended

var __sqlProductExtended_JoinTypes []sq.JOIN_TYPE
var __sqlProductExtended_As sq.AS
var __sqlProductExtended_JoinAs []sq.AS
var __sqlProductExtended_JoinConds []string

func (m *ProductExtended) SQLTableName() string  { return "product" }
func (m *ProductExtendeds) SQLTableName() string { return "product" }

func (m *ProductExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductExtendeds, 0, 128)
	for rows.Next() {
		m := new(ProductExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ProductExtended) SQLSelect(w SQLWriter) error {
	(*ProductExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ProductExtended)(nil).__sqlJoin(w, __sqlProductExtended_JoinTypes)
	return nil
}

func (m *ProductExtendeds) SQLSelect(w SQLWriter) error {
	return (*ProductExtended)(nil).SQLSelect(w)
}

func (m *ProductExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlProductExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ProductExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ProductExtended)(nil).SQLJoin(w, types)
}

func (m *ProductExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlProductExtended_As), (*Product)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlProductExtended_JoinAs[0]), (*ProductExternal)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlProductExtended_JoinAs[1]), (*model.ProductSource)(nil).SQLListCols())
}

func (m *ProductExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 2 {
		panic("common/sql: expect 2 types to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("product")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*ProductExternal)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlProductExtended_JoinConds[0])
	w.WriteByte(' ')
	w.WriteRawString(string(types[1]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*model.ProductSource)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductExtended_JoinAs[1]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlProductExtended_JoinConds[1])
}

func (m *ProductExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.Product = new(Product)
	args = append(args, m.Product.SQLScanArgs(opts)...)
	m.ProductExternal = new(ProductExternal)
	args = append(args, m.ProductExternal.SQLScanArgs(opts)...)
	m.ProductSource = new(model.ProductSource)
	args = append(args, m.ProductSource.SQLScanArgs(opts)...)

	return args
}

// Type Variant represents table variant
func sqlgenVariant(_ *Variant) bool { return true }

type Variants []*Variant

const __sqlVariant_Table = "variant"
const __sqlVariant_ListCols = "\"id\",\"product_id\",\"product_source_id\",\"supplier_id\",\"product_source_category_id\",\"etop_category_id\",\"short_desc\",\"description\",\"desc_html\",\"ed_name\",\"ed_short_desc\",\"ed_description\",\"ed_desc_html\",\"desc_norm\",\"attr_norm_kv\",\"status\",\"etop_status\",\"ed_status\",\"code\",\"ed_code\",\"wholesale_price_0\",\"wholesale_price\",\"list_price\",\"retail_price_min\",\"retail_price_max\",\"ed_wholesale_price_0\",\"ed_wholesale_price\",\"ed_list_price\",\"ed_retail_price_min\",\"ed_retail_price_max\",\"quantity_available\",\"quantity_on_hand\",\"quantity_reserved\",\"image_urls\",\"supplier_meta\",\"cost_price\",\"attributes\",\"created_at\",\"updated_at\""
const __sqlVariant_Insert = "INSERT INTO \"variant\" (" + __sqlVariant_ListCols + ") VALUES"
const __sqlVariant_Select = "SELECT " + __sqlVariant_ListCols + " FROM \"variant\""
const __sqlVariant_Select_history = "SELECT " + __sqlVariant_ListCols + " FROM history.\"variant\""
const __sqlVariant_UpdateAll = "UPDATE \"variant\" SET (" + __sqlVariant_ListCols + ")"

func (m *Variant) SQLTableName() string  { return "variant" }
func (m *Variants) SQLTableName() string { return "variant" }
func (m *Variant) SQLListCols() string   { return __sqlVariant_ListCols }

func (m *Variant) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ProductID),
		core.Int64(m.ProductSourceID),
		core.Int64(m.SupplierID),
		core.Int64(m.ProductSourceCategoryID),
		core.Int64(m.EtopCategoryID),
		core.String(m.ShortDesc),
		core.String(m.Description),
		core.String(m.DescHTML),
		core.String(m.EdName),
		core.String(m.EdShortDesc),
		core.String(m.EdDescription),
		core.String(m.EdDescHTML),
		core.String(m.DescNorm),
		core.String(m.AttrNormKv),
		core.Int(m.Status),
		core.Int(m.EtopStatus),
		core.Int(m.EdStatus),
		core.String(m.Code),
		core.String(m.EdCode),
		core.Int(m.WholesalePrice0),
		core.Int(m.WholesalePrice),
		core.Int(m.ListPrice),
		core.Int(m.RetailPriceMin),
		core.Int(m.RetailPriceMax),
		core.Int(m.EdWholesalePrice0),
		core.Int(m.EdWholesalePrice),
		core.Int(m.EdListPrice),
		core.Int(m.EdRetailPriceMin),
		core.Int(m.EdRetailPriceMax),
		core.Int(m.QuantityAvailable),
		core.Int(m.QuantityOnHand),
		core.Int(m.QuantityReserved),
		core.Array{m.ImageURLs, opts},
		core.JSON{m.SupplierMeta},
		core.Int(m.CostPrice),
		core.JSON{m.Attributes},
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *Variant) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ProductID),
		(*core.Int64)(&m.ProductSourceID),
		(*core.Int64)(&m.SupplierID),
		(*core.Int64)(&m.ProductSourceCategoryID),
		(*core.Int64)(&m.EtopCategoryID),
		(*core.String)(&m.ShortDesc),
		(*core.String)(&m.Description),
		(*core.String)(&m.DescHTML),
		(*core.String)(&m.EdName),
		(*core.String)(&m.EdShortDesc),
		(*core.String)(&m.EdDescription),
		(*core.String)(&m.EdDescHTML),
		(*core.String)(&m.DescNorm),
		(*core.String)(&m.AttrNormKv),
		(*core.Int)(&m.Status),
		(*core.Int)(&m.EtopStatus),
		(*core.Int)(&m.EdStatus),
		(*core.String)(&m.Code),
		(*core.String)(&m.EdCode),
		(*core.Int)(&m.WholesalePrice0),
		(*core.Int)(&m.WholesalePrice),
		(*core.Int)(&m.ListPrice),
		(*core.Int)(&m.RetailPriceMin),
		(*core.Int)(&m.RetailPriceMax),
		(*core.Int)(&m.EdWholesalePrice0),
		(*core.Int)(&m.EdWholesalePrice),
		(*core.Int)(&m.EdListPrice),
		(*core.Int)(&m.EdRetailPriceMin),
		(*core.Int)(&m.EdRetailPriceMax),
		(*core.Int)(&m.QuantityAvailable),
		(*core.Int)(&m.QuantityOnHand),
		(*core.Int)(&m.QuantityReserved),
		core.Array{&m.ImageURLs, opts},
		core.JSON{&m.SupplierMeta},
		(*core.Int)(&m.CostPrice),
		core.JSON{&m.Attributes},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *Variant) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Variants) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Variants, 0, 128)
	for rows.Next() {
		m := new(Variant)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Variant) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariant_Select)
	return nil
}

func (_ *Variants) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariant_Select)
	return nil
}

func (m *Variant) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlVariant_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(39)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Variants) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlVariant_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(39)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Variant) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("variant")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.ProductSourceID != 0 {
		flag = true
		w.WriteName("product_source_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductSourceID)
	}
	if m.SupplierID != 0 {
		flag = true
		w.WriteName("supplier_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SupplierID)
	}
	if m.ProductSourceCategoryID != 0 {
		flag = true
		w.WriteName("product_source_category_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductSourceCategoryID)
	}
	if m.EtopCategoryID != 0 {
		flag = true
		w.WriteName("etop_category_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EtopCategoryID)
	}
	if m.ShortDesc != "" {
		flag = true
		w.WriteName("short_desc")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShortDesc)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.DescHTML != "" {
		flag = true
		w.WriteName("desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DescHTML)
	}
	if m.EdName != "" {
		flag = true
		w.WriteName("ed_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdName)
	}
	if m.EdShortDesc != "" {
		flag = true
		w.WriteName("ed_short_desc")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdShortDesc)
	}
	if m.EdDescription != "" {
		flag = true
		w.WriteName("ed_description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdDescription)
	}
	if m.EdDescHTML != "" {
		flag = true
		w.WriteName("ed_desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdDescHTML)
	}
	if m.DescNorm != "" {
		flag = true
		w.WriteName("desc_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DescNorm)
	}
	if m.AttrNormKv != "" {
		flag = true
		w.WriteName("attr_norm_kv")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AttrNormKv)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if m.EtopStatus != 0 {
		flag = true
		w.WriteName("etop_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.EtopStatus))
	}
	if m.EdStatus != 0 {
		flag = true
		w.WriteName("ed_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.EdStatus))
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.EdCode != "" {
		flag = true
		w.WriteName("ed_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdCode)
	}
	if m.WholesalePrice0 != 0 {
		flag = true
		w.WriteName("wholesale_price_0")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WholesalePrice0)
	}
	if m.WholesalePrice != 0 {
		flag = true
		w.WriteName("wholesale_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WholesalePrice)
	}
	if m.ListPrice != 0 {
		flag = true
		w.WriteName("list_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ListPrice)
	}
	if m.RetailPriceMin != 0 {
		flag = true
		w.WriteName("retail_price_min")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RetailPriceMin)
	}
	if m.RetailPriceMax != 0 {
		flag = true
		w.WriteName("retail_price_max")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RetailPriceMax)
	}
	if m.EdWholesalePrice0 != 0 {
		flag = true
		w.WriteName("ed_wholesale_price_0")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdWholesalePrice0)
	}
	if m.EdWholesalePrice != 0 {
		flag = true
		w.WriteName("ed_wholesale_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdWholesalePrice)
	}
	if m.EdListPrice != 0 {
		flag = true
		w.WriteName("ed_list_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdListPrice)
	}
	if m.EdRetailPriceMin != 0 {
		flag = true
		w.WriteName("ed_retail_price_min")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdRetailPriceMin)
	}
	if m.EdRetailPriceMax != 0 {
		flag = true
		w.WriteName("ed_retail_price_max")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdRetailPriceMax)
	}
	if m.QuantityAvailable != 0 {
		flag = true
		w.WriteName("quantity_available")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityAvailable)
	}
	if m.QuantityOnHand != 0 {
		flag = true
		w.WriteName("quantity_on_hand")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityOnHand)
	}
	if m.QuantityReserved != 0 {
		flag = true
		w.WriteName("quantity_reserved")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityReserved)
	}
	if m.ImageURLs != nil {
		flag = true
		w.WriteName("image_urls")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ImageURLs, opts})
	}
	if m.SupplierMeta != nil {
		flag = true
		w.WriteName("supplier_meta")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.SupplierMeta})
	}
	if m.CostPrice != 0 {
		flag = true
		w.WriteName("cost_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CostPrice)
	}
	if m.Attributes != nil {
		flag = true
		w.WriteName("attributes")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Attributes})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Variant) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlVariant_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(39)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type VariantHistory map[string]interface{}
type VariantHistories []map[string]interface{}

func (m *VariantHistory) SQLTableName() string  { return "history.\"variant\"" }
func (m VariantHistories) SQLTableName() string { return "history.\"variant\"" }

func (m *VariantHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariant_Select_history)
	return nil
}

func (m VariantHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariant_Select_history)
	return nil
}

func (m VariantHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m VariantHistory) ProductID() core.Interface { return core.Interface{m["product_id"]} }
func (m VariantHistory) ProductSourceID() core.Interface {
	return core.Interface{m["product_source_id"]}
}
func (m VariantHistory) SupplierID() core.Interface { return core.Interface{m["supplier_id"]} }
func (m VariantHistory) ProductSourceCategoryID() core.Interface {
	return core.Interface{m["product_source_category_id"]}
}
func (m VariantHistory) EtopCategoryID() core.Interface { return core.Interface{m["etop_category_id"]} }
func (m VariantHistory) ShortDesc() core.Interface      { return core.Interface{m["short_desc"]} }
func (m VariantHistory) Description() core.Interface    { return core.Interface{m["description"]} }
func (m VariantHistory) DescHTML() core.Interface       { return core.Interface{m["desc_html"]} }
func (m VariantHistory) EdName() core.Interface         { return core.Interface{m["ed_name"]} }
func (m VariantHistory) EdShortDesc() core.Interface    { return core.Interface{m["ed_short_desc"]} }
func (m VariantHistory) EdDescription() core.Interface  { return core.Interface{m["ed_description"]} }
func (m VariantHistory) EdDescHTML() core.Interface     { return core.Interface{m["ed_desc_html"]} }
func (m VariantHistory) DescNorm() core.Interface       { return core.Interface{m["desc_norm"]} }
func (m VariantHistory) AttrNormKv() core.Interface     { return core.Interface{m["attr_norm_kv"]} }
func (m VariantHistory) Status() core.Interface         { return core.Interface{m["status"]} }
func (m VariantHistory) EtopStatus() core.Interface     { return core.Interface{m["etop_status"]} }
func (m VariantHistory) EdStatus() core.Interface       { return core.Interface{m["ed_status"]} }
func (m VariantHistory) Code() core.Interface           { return core.Interface{m["code"]} }
func (m VariantHistory) EdCode() core.Interface         { return core.Interface{m["ed_code"]} }
func (m VariantHistory) WholesalePrice0() core.Interface {
	return core.Interface{m["wholesale_price_0"]}
}
func (m VariantHistory) WholesalePrice() core.Interface { return core.Interface{m["wholesale_price"]} }
func (m VariantHistory) ListPrice() core.Interface      { return core.Interface{m["list_price"]} }
func (m VariantHistory) RetailPriceMin() core.Interface { return core.Interface{m["retail_price_min"]} }
func (m VariantHistory) RetailPriceMax() core.Interface { return core.Interface{m["retail_price_max"]} }
func (m VariantHistory) EdWholesalePrice0() core.Interface {
	return core.Interface{m["ed_wholesale_price_0"]}
}
func (m VariantHistory) EdWholesalePrice() core.Interface {
	return core.Interface{m["ed_wholesale_price"]}
}
func (m VariantHistory) EdListPrice() core.Interface { return core.Interface{m["ed_list_price"]} }
func (m VariantHistory) EdRetailPriceMin() core.Interface {
	return core.Interface{m["ed_retail_price_min"]}
}
func (m VariantHistory) EdRetailPriceMax() core.Interface {
	return core.Interface{m["ed_retail_price_max"]}
}
func (m VariantHistory) QuantityAvailable() core.Interface {
	return core.Interface{m["quantity_available"]}
}
func (m VariantHistory) QuantityOnHand() core.Interface { return core.Interface{m["quantity_on_hand"]} }
func (m VariantHistory) QuantityReserved() core.Interface {
	return core.Interface{m["quantity_reserved"]}
}
func (m VariantHistory) ImageURLs() core.Interface    { return core.Interface{m["image_urls"]} }
func (m VariantHistory) SupplierMeta() core.Interface { return core.Interface{m["supplier_meta"]} }
func (m VariantHistory) CostPrice() core.Interface    { return core.Interface{m["cost_price"]} }
func (m VariantHistory) Attributes() core.Interface   { return core.Interface{m["attributes"]} }
func (m VariantHistory) CreatedAt() core.Interface    { return core.Interface{m["created_at"]} }
func (m VariantHistory) UpdatedAt() core.Interface    { return core.Interface{m["updated_at"]} }

func (m *VariantHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 39)
	args := make([]interface{}, 39)
	for i := 0; i < 39; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(VariantHistory, 39)
	res["id"] = data[0]
	res["product_id"] = data[1]
	res["product_source_id"] = data[2]
	res["supplier_id"] = data[3]
	res["product_source_category_id"] = data[4]
	res["etop_category_id"] = data[5]
	res["short_desc"] = data[6]
	res["description"] = data[7]
	res["desc_html"] = data[8]
	res["ed_name"] = data[9]
	res["ed_short_desc"] = data[10]
	res["ed_description"] = data[11]
	res["ed_desc_html"] = data[12]
	res["desc_norm"] = data[13]
	res["attr_norm_kv"] = data[14]
	res["status"] = data[15]
	res["etop_status"] = data[16]
	res["ed_status"] = data[17]
	res["code"] = data[18]
	res["ed_code"] = data[19]
	res["wholesale_price_0"] = data[20]
	res["wholesale_price"] = data[21]
	res["list_price"] = data[22]
	res["retail_price_min"] = data[23]
	res["retail_price_max"] = data[24]
	res["ed_wholesale_price_0"] = data[25]
	res["ed_wholesale_price"] = data[26]
	res["ed_list_price"] = data[27]
	res["ed_retail_price_min"] = data[28]
	res["ed_retail_price_max"] = data[29]
	res["quantity_available"] = data[30]
	res["quantity_on_hand"] = data[31]
	res["quantity_reserved"] = data[32]
	res["image_urls"] = data[33]
	res["supplier_meta"] = data[34]
	res["cost_price"] = data[35]
	res["attributes"] = data[36]
	res["created_at"] = data[37]
	res["updated_at"] = data[38]
	*m = res
	return nil
}

func (ms *VariantHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 39)
	args := make([]interface{}, 39)
	for i := 0; i < 39; i++ {
		args[i] = &data[i]
	}
	res := make(VariantHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(VariantHistory)
		m["id"] = data[0]
		m["product_id"] = data[1]
		m["product_source_id"] = data[2]
		m["supplier_id"] = data[3]
		m["product_source_category_id"] = data[4]
		m["etop_category_id"] = data[5]
		m["short_desc"] = data[6]
		m["description"] = data[7]
		m["desc_html"] = data[8]
		m["ed_name"] = data[9]
		m["ed_short_desc"] = data[10]
		m["ed_description"] = data[11]
		m["ed_desc_html"] = data[12]
		m["desc_norm"] = data[13]
		m["attr_norm_kv"] = data[14]
		m["status"] = data[15]
		m["etop_status"] = data[16]
		m["ed_status"] = data[17]
		m["code"] = data[18]
		m["ed_code"] = data[19]
		m["wholesale_price_0"] = data[20]
		m["wholesale_price"] = data[21]
		m["list_price"] = data[22]
		m["retail_price_min"] = data[23]
		m["retail_price_max"] = data[24]
		m["ed_wholesale_price_0"] = data[25]
		m["ed_wholesale_price"] = data[26]
		m["ed_list_price"] = data[27]
		m["ed_retail_price_min"] = data[28]
		m["ed_retail_price_max"] = data[29]
		m["quantity_available"] = data[30]
		m["quantity_on_hand"] = data[31]
		m["quantity_reserved"] = data[32]
		m["image_urls"] = data[33]
		m["supplier_meta"] = data[34]
		m["cost_price"] = data[35]
		m["attributes"] = data[36]
		m["created_at"] = data[37]
		m["updated_at"] = data[38]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type VariantExtended represents a join
func sqlgenVariantExtended(_ *VariantExtended, _ *Variant, as sq.AS, t0 sq.JOIN_TYPE, _ *Product, a0 sq.AS, c0 string, t1 sq.JOIN_TYPE, _ *VariantExternal, a1 sq.AS, c1 string) bool {
	__sqlVariantExtended_JoinTypes = []sq.JOIN_TYPE{t0, t1}
	__sqlVariantExtended_As = as
	__sqlVariantExtended_JoinAs = []sq.AS{a0, a1}
	__sqlVariantExtended_JoinConds = []string{c0, c1}
	return true
}

type VariantExtendeds []*VariantExtended

var __sqlVariantExtended_JoinTypes []sq.JOIN_TYPE
var __sqlVariantExtended_As sq.AS
var __sqlVariantExtended_JoinAs []sq.AS
var __sqlVariantExtended_JoinConds []string

func (m *VariantExtended) SQLTableName() string  { return "variant" }
func (m *VariantExtendeds) SQLTableName() string { return "variant" }

func (m *VariantExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *VariantExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(VariantExtendeds, 0, 128)
	for rows.Next() {
		m := new(VariantExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *VariantExtended) SQLSelect(w SQLWriter) error {
	(*VariantExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*VariantExtended)(nil).__sqlJoin(w, __sqlVariantExtended_JoinTypes)
	return nil
}

func (m *VariantExtendeds) SQLSelect(w SQLWriter) error {
	return (*VariantExtended)(nil).SQLSelect(w)
}

func (m *VariantExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlVariantExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *VariantExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*VariantExtended)(nil).SQLJoin(w, types)
}

func (m *VariantExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlVariantExtended_As), (*Variant)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlVariantExtended_JoinAs[0]), (*Product)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlVariantExtended_JoinAs[1]), (*VariantExternal)(nil).SQLListCols())
}

func (m *VariantExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 2 {
		panic("common/sql: expect 2 types to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("variant")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlVariantExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Product)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlVariantExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlVariantExtended_JoinConds[0])
	w.WriteByte(' ')
	w.WriteRawString(string(types[1]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*VariantExternal)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlVariantExtended_JoinAs[1]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlVariantExtended_JoinConds[1])
}

func (m *VariantExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.Variant = new(Variant)
	args = append(args, m.Variant.SQLScanArgs(opts)...)
	m.Product = new(Product)
	args = append(args, m.Product.SQLScanArgs(opts)...)
	m.VariantExternal = new(VariantExternal)
	args = append(args, m.VariantExternal.SQLScanArgs(opts)...)

	return args
}

// Type VariantExternal represents table variant_external
func sqlgenVariantExternal(_ *VariantExternal) bool { return true }

type VariantExternals []*VariantExternal

const __sqlVariantExternal_Table = "variant_external"
const __sqlVariantExternal_ListCols = "\"id\",\"product_source_id\",\"product_source_type\",\"external_id\",\"external_name\",\"external_code\",\"external_category_id\",\"external_description\",\"external_image_urls\",\"external_unit\",\"external_data\",\"external_status\",\"external_created_at\",\"external_updated_at\",\"external_deleted_at\",\"last_sync_at\",\"external_product_id\",\"external_price\",\"external_base_unit_id\",\"external_unit_conv\",\"external_attributes\""
const __sqlVariantExternal_Insert = "INSERT INTO \"variant_external\" (" + __sqlVariantExternal_ListCols + ") VALUES"
const __sqlVariantExternal_Select = "SELECT " + __sqlVariantExternal_ListCols + " FROM \"variant_external\""
const __sqlVariantExternal_Select_history = "SELECT " + __sqlVariantExternal_ListCols + " FROM history.\"variant_external\""
const __sqlVariantExternal_UpdateAll = "UPDATE \"variant_external\" SET (" + __sqlVariantExternal_ListCols + ")"

func (m *VariantExternal) SQLTableName() string  { return "variant_external" }
func (m *VariantExternals) SQLTableName() string { return "variant_external" }
func (m *VariantExternal) SQLListCols() string   { return __sqlVariantExternal_ListCols }

func (m *VariantExternal) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ProductExternalCommon.ProductSourceID),
		core.String(m.ProductExternalCommon.ProductSourceType),
		core.String(m.ProductExternalCommon.ExternalID),
		core.String(m.ProductExternalCommon.ExternalName),
		core.String(m.ProductExternalCommon.ExternalCode),
		core.String(m.ProductExternalCommon.ExternalCategoryID),
		core.String(m.ProductExternalCommon.ExternalDescription),
		core.Array{m.ProductExternalCommon.ExternalImageURLs, opts},
		core.String(m.ProductExternalCommon.ExternalUnit),
		core.JSON{m.ProductExternalCommon.ExternalData},
		core.Int(m.ProductExternalCommon.ExternalStatus),
		core.Time(m.ProductExternalCommon.ExternalCreatedAt),
		core.Time(m.ProductExternalCommon.ExternalUpdatedAt),
		core.Time(m.ProductExternalCommon.ExternalDeletedAt),
		core.Time(m.ProductExternalCommon.LastSyncAt),
		core.String(m.ExternalProductID),
		core.Int(m.ExternalPrice),
		core.String(m.ExternalBaseUnitID),
		core.Float64(m.ExternalUnitConv),
		core.JSON{m.ExternalAttributes},
	}
}

func (m *VariantExternal) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ProductExternalCommon.ProductSourceID),
		(*core.String)(&m.ProductExternalCommon.ProductSourceType),
		(*core.String)(&m.ProductExternalCommon.ExternalID),
		(*core.String)(&m.ProductExternalCommon.ExternalName),
		(*core.String)(&m.ProductExternalCommon.ExternalCode),
		(*core.String)(&m.ProductExternalCommon.ExternalCategoryID),
		(*core.String)(&m.ProductExternalCommon.ExternalDescription),
		core.Array{&m.ProductExternalCommon.ExternalImageURLs, opts},
		(*core.String)(&m.ProductExternalCommon.ExternalUnit),
		core.JSON{&m.ProductExternalCommon.ExternalData},
		(*core.Int)(&m.ProductExternalCommon.ExternalStatus),
		(*core.Time)(&m.ProductExternalCommon.ExternalCreatedAt),
		(*core.Time)(&m.ProductExternalCommon.ExternalUpdatedAt),
		(*core.Time)(&m.ProductExternalCommon.ExternalDeletedAt),
		(*core.Time)(&m.ProductExternalCommon.LastSyncAt),
		(*core.String)(&m.ExternalProductID),
		(*core.Int)(&m.ExternalPrice),
		(*core.String)(&m.ExternalBaseUnitID),
		(*core.Float64)(&m.ExternalUnitConv),
		core.JSON{&m.ExternalAttributes},
	}
}

func (m *VariantExternal) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *VariantExternals) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(VariantExternals, 0, 128)
	for rows.Next() {
		m := new(VariantExternal)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *VariantExternal) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantExternal_Select)
	return nil
}

func (_ *VariantExternals) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantExternal_Select)
	return nil
}

func (m *VariantExternal) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantExternal_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(21)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms VariantExternals) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantExternal_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(21)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *VariantExternal) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("variant_external")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ProductExternalCommon.ProductSourceID != 0 {
		flag = true
		w.WriteName("product_source_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ProductSourceID)
	}
	if m.ProductExternalCommon.ProductSourceType != "" {
		flag = true
		w.WriteName("product_source_type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ProductSourceType)
	}
	if m.ProductExternalCommon.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalID)
	}
	if m.ProductExternalCommon.ExternalName != "" {
		flag = true
		w.WriteName("external_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalName)
	}
	if m.ProductExternalCommon.ExternalCode != "" {
		flag = true
		w.WriteName("external_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalCode)
	}
	if m.ProductExternalCommon.ExternalCategoryID != "" {
		flag = true
		w.WriteName("external_category_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalCategoryID)
	}
	if m.ProductExternalCommon.ExternalDescription != "" {
		flag = true
		w.WriteName("external_description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalDescription)
	}
	if m.ProductExternalCommon.ExternalImageURLs != nil {
		flag = true
		w.WriteName("external_image_urls")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ProductExternalCommon.ExternalImageURLs, opts})
	}
	if m.ProductExternalCommon.ExternalUnit != "" {
		flag = true
		w.WriteName("external_unit")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalUnit)
	}
	if m.ProductExternalCommon.ExternalData != nil {
		flag = true
		w.WriteName("external_data")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ProductExternalCommon.ExternalData})
	}
	if m.ProductExternalCommon.ExternalStatus != 0 {
		flag = true
		w.WriteName("external_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.ProductExternalCommon.ExternalStatus))
	}
	if !m.ProductExternalCommon.ExternalCreatedAt.IsZero() {
		flag = true
		w.WriteName("external_created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalCreatedAt)
	}
	if !m.ProductExternalCommon.ExternalUpdatedAt.IsZero() {
		flag = true
		w.WriteName("external_updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalUpdatedAt)
	}
	if !m.ProductExternalCommon.ExternalDeletedAt.IsZero() {
		flag = true
		w.WriteName("external_deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalDeletedAt)
	}
	if !m.ProductExternalCommon.LastSyncAt.IsZero() {
		flag = true
		w.WriteName("last_sync_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.LastSyncAt)
	}
	if m.ExternalProductID != "" {
		flag = true
		w.WriteName("external_product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalProductID)
	}
	if m.ExternalPrice != 0 {
		flag = true
		w.WriteName("external_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalPrice)
	}
	if m.ExternalBaseUnitID != "" {
		flag = true
		w.WriteName("external_base_unit_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalBaseUnitID)
	}
	if m.ExternalUnitConv != 0 {
		flag = true
		w.WriteName("external_unit_conv")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalUnitConv)
	}
	if m.ExternalAttributes != nil {
		flag = true
		w.WriteName("external_attributes")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalAttributes})
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *VariantExternal) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantExternal_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(21)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type VariantExternalHistory map[string]interface{}
type VariantExternalHistories []map[string]interface{}

func (m *VariantExternalHistory) SQLTableName() string  { return "history.\"variant_external\"" }
func (m VariantExternalHistories) SQLTableName() string { return "history.\"variant_external\"" }

func (m *VariantExternalHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantExternal_Select_history)
	return nil
}

func (m VariantExternalHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantExternal_Select_history)
	return nil
}

func (m VariantExternalHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m VariantExternalHistory) ProductSourceID() core.Interface {
	return core.Interface{m["product_source_id"]}
}
func (m VariantExternalHistory) ProductSourceType() core.Interface {
	return core.Interface{m["product_source_type"]}
}
func (m VariantExternalHistory) ExternalID() core.Interface { return core.Interface{m["external_id"]} }
func (m VariantExternalHistory) ExternalName() core.Interface {
	return core.Interface{m["external_name"]}
}
func (m VariantExternalHistory) ExternalCode() core.Interface {
	return core.Interface{m["external_code"]}
}
func (m VariantExternalHistory) ExternalCategoryID() core.Interface {
	return core.Interface{m["external_category_id"]}
}
func (m VariantExternalHistory) ExternalDescription() core.Interface {
	return core.Interface{m["external_description"]}
}
func (m VariantExternalHistory) ExternalImageURLs() core.Interface {
	return core.Interface{m["external_image_urls"]}
}
func (m VariantExternalHistory) ExternalUnit() core.Interface {
	return core.Interface{m["external_unit"]}
}
func (m VariantExternalHistory) ExternalData() core.Interface {
	return core.Interface{m["external_data"]}
}
func (m VariantExternalHistory) ExternalStatus() core.Interface {
	return core.Interface{m["external_status"]}
}
func (m VariantExternalHistory) ExternalCreatedAt() core.Interface {
	return core.Interface{m["external_created_at"]}
}
func (m VariantExternalHistory) ExternalUpdatedAt() core.Interface {
	return core.Interface{m["external_updated_at"]}
}
func (m VariantExternalHistory) ExternalDeletedAt() core.Interface {
	return core.Interface{m["external_deleted_at"]}
}
func (m VariantExternalHistory) LastSyncAt() core.Interface { return core.Interface{m["last_sync_at"]} }
func (m VariantExternalHistory) ExternalProductID() core.Interface {
	return core.Interface{m["external_product_id"]}
}
func (m VariantExternalHistory) ExternalPrice() core.Interface {
	return core.Interface{m["external_price"]}
}
func (m VariantExternalHistory) ExternalBaseUnitID() core.Interface {
	return core.Interface{m["external_base_unit_id"]}
}
func (m VariantExternalHistory) ExternalUnitConv() core.Interface {
	return core.Interface{m["external_unit_conv"]}
}
func (m VariantExternalHistory) ExternalAttributes() core.Interface {
	return core.Interface{m["external_attributes"]}
}

func (m *VariantExternalHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 21)
	args := make([]interface{}, 21)
	for i := 0; i < 21; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(VariantExternalHistory, 21)
	res["id"] = data[0]
	res["product_source_id"] = data[1]
	res["product_source_type"] = data[2]
	res["external_id"] = data[3]
	res["external_name"] = data[4]
	res["external_code"] = data[5]
	res["external_category_id"] = data[6]
	res["external_description"] = data[7]
	res["external_image_urls"] = data[8]
	res["external_unit"] = data[9]
	res["external_data"] = data[10]
	res["external_status"] = data[11]
	res["external_created_at"] = data[12]
	res["external_updated_at"] = data[13]
	res["external_deleted_at"] = data[14]
	res["last_sync_at"] = data[15]
	res["external_product_id"] = data[16]
	res["external_price"] = data[17]
	res["external_base_unit_id"] = data[18]
	res["external_unit_conv"] = data[19]
	res["external_attributes"] = data[20]
	*m = res
	return nil
}

func (ms *VariantExternalHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 21)
	args := make([]interface{}, 21)
	for i := 0; i < 21; i++ {
		args[i] = &data[i]
	}
	res := make(VariantExternalHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(VariantExternalHistory)
		m["id"] = data[0]
		m["product_source_id"] = data[1]
		m["product_source_type"] = data[2]
		m["external_id"] = data[3]
		m["external_name"] = data[4]
		m["external_code"] = data[5]
		m["external_category_id"] = data[6]
		m["external_description"] = data[7]
		m["external_image_urls"] = data[8]
		m["external_unit"] = data[9]
		m["external_data"] = data[10]
		m["external_status"] = data[11]
		m["external_created_at"] = data[12]
		m["external_updated_at"] = data[13]
		m["external_deleted_at"] = data[14]
		m["last_sync_at"] = data[15]
		m["external_product_id"] = data[16]
		m["external_price"] = data[17]
		m["external_base_unit_id"] = data[18]
		m["external_unit_conv"] = data[19]
		m["external_attributes"] = data[20]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type VariantExternalExtended represents a join
func sqlgenVariantExternalExtended(_ *VariantExternalExtended, _ *Variant, as sq.AS, t0 sq.JOIN_TYPE, _ *VariantExternal, a0 sq.AS, c0 string) bool {
	__sqlVariantExternalExtended_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlVariantExternalExtended_As = as
	__sqlVariantExternalExtended_JoinAs = []sq.AS{a0}
	__sqlVariantExternalExtended_JoinConds = []string{c0}
	return true
}

type VariantExternalExtendeds []*VariantExternalExtended

var __sqlVariantExternalExtended_JoinTypes []sq.JOIN_TYPE
var __sqlVariantExternalExtended_As sq.AS
var __sqlVariantExternalExtended_JoinAs []sq.AS
var __sqlVariantExternalExtended_JoinConds []string

func (m *VariantExternalExtended) SQLTableName() string  { return "variant" }
func (m *VariantExternalExtendeds) SQLTableName() string { return "variant" }

func (m *VariantExternalExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *VariantExternalExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(VariantExternalExtendeds, 0, 128)
	for rows.Next() {
		m := new(VariantExternalExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *VariantExternalExtended) SQLSelect(w SQLWriter) error {
	(*VariantExternalExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*VariantExternalExtended)(nil).__sqlJoin(w, __sqlVariantExternalExtended_JoinTypes)
	return nil
}

func (m *VariantExternalExtendeds) SQLSelect(w SQLWriter) error {
	return (*VariantExternalExtended)(nil).SQLSelect(w)
}

func (m *VariantExternalExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlVariantExternalExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *VariantExternalExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*VariantExternalExtended)(nil).SQLJoin(w, types)
}

func (m *VariantExternalExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlVariantExternalExtended_As), (*Variant)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlVariantExternalExtended_JoinAs[0]), (*VariantExternal)(nil).SQLListCols())
}

func (m *VariantExternalExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("variant")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlVariantExternalExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*VariantExternal)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlVariantExternalExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlVariantExternalExtended_JoinConds[0])
}

func (m *VariantExternalExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.Variant = new(Variant)
	args = append(args, m.Variant.SQLScanArgs(opts)...)
	m.VariantExternal = new(VariantExternal)
	args = append(args, m.VariantExternal.SQLScanArgs(opts)...)

	return args
}

// *PriceDef is a substruct of *Variant
func substructPriceDef(_ *PriceDef, _ *Variant) bool { return true }

func PriceDefsFromVariants(ps []*Variant) []*PriceDef {
	ss := make([]*PriceDef, len(ps))
	for i, p := range ps {
		ss[i] = NewPriceDefFromVariant(p)
	}
	return ss
}

func PriceDefsToVariants(ss []*PriceDef) []*Variant {
	ps := make([]*Variant, len(ss))
	for i, s := range ss {
		ps[i] = s.ToVariant()
	}
	return ps
}

func NewPriceDefFromVariant(sp *Variant) *PriceDef {
	if sp == nil {
		return nil
	}
	s := new(PriceDef)
	s.CopyFrom(sp)
	return s
}

func (s *PriceDef) ToVariant() *Variant {
	if s == nil {
		return nil
	}
	sp := new(Variant)
	s.AssignTo(sp)
	return sp
}

func (s *PriceDef) CopyFrom(sp *Variant) {
	s.WholesalePrice0 = sp.WholesalePrice0
	s.WholesalePrice = sp.WholesalePrice
	s.ListPrice = sp.ListPrice
	s.RetailPriceMin = sp.RetailPriceMin
	s.RetailPriceMax = sp.RetailPriceMax
}

func (s *PriceDef) AssignTo(sp *Variant) {
	sp.WholesalePrice0 = s.WholesalePrice0
	sp.WholesalePrice = s.WholesalePrice
	sp.ListPrice = s.ListPrice
	sp.RetailPriceMin = s.RetailPriceMin
	sp.RetailPriceMax = s.RetailPriceMax
}

// Type PriceDef represents table variant
func sqlgenPriceDef(_ *PriceDef, _ *Variant) bool { return true }

type PriceDefs []*PriceDef

const __sqlPriceDef_Table = "variant"
const __sqlPriceDef_ListCols = "\"wholesale_price_0\",\"wholesale_price\",\"list_price\",\"retail_price_min\",\"retail_price_max\""
const __sqlPriceDef_Insert = "INSERT INTO \"variant\" (" + __sqlPriceDef_ListCols + ") VALUES"
const __sqlPriceDef_Select = "SELECT " + __sqlPriceDef_ListCols + " FROM \"variant\""
const __sqlPriceDef_Select_history = "SELECT " + __sqlPriceDef_ListCols + " FROM history.\"variant\""
const __sqlPriceDef_UpdateAll = "UPDATE \"variant\" SET (" + __sqlPriceDef_ListCols + ")"

func (m *PriceDef) SQLTableName() string  { return "variant" }
func (m *PriceDefs) SQLTableName() string { return "variant" }
func (m *PriceDef) SQLListCols() string   { return __sqlPriceDef_ListCols }

func (m *PriceDef) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.Int(m.WholesalePrice0),
		core.Int(m.WholesalePrice),
		core.Int(m.ListPrice),
		core.Int(m.RetailPriceMin),
		core.Int(m.RetailPriceMax),
	}
}

func (m *PriceDef) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int)(&m.WholesalePrice0),
		(*core.Int)(&m.WholesalePrice),
		(*core.Int)(&m.ListPrice),
		(*core.Int)(&m.RetailPriceMin),
		(*core.Int)(&m.RetailPriceMax),
	}
}

func (m *PriceDef) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *PriceDefs) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(PriceDefs, 0, 128)
	for rows.Next() {
		m := new(PriceDef)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *PriceDef) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPriceDef_Select)
	return nil
}

func (_ *PriceDefs) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPriceDef_Select)
	return nil
}

func (m *PriceDef) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlPriceDef_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(5)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms PriceDefs) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlPriceDef_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(5)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *PriceDef) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("variant")
	w.WriteRawString(" SET ")
	if m.WholesalePrice0 != 0 {
		flag = true
		w.WriteName("wholesale_price_0")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WholesalePrice0)
	}
	if m.WholesalePrice != 0 {
		flag = true
		w.WriteName("wholesale_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WholesalePrice)
	}
	if m.ListPrice != 0 {
		flag = true
		w.WriteName("list_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ListPrice)
	}
	if m.RetailPriceMin != 0 {
		flag = true
		w.WriteName("retail_price_min")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RetailPriceMin)
	}
	if m.RetailPriceMax != 0 {
		flag = true
		w.WriteName("retail_price_max")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RetailPriceMax)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *PriceDef) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlPriceDef_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(5)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type PriceDefHistory map[string]interface{}
type PriceDefHistories []map[string]interface{}

func (m *PriceDefHistory) SQLTableName() string  { return "history.\"variant\"" }
func (m PriceDefHistories) SQLTableName() string { return "history.\"variant\"" }

func (m *PriceDefHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPriceDef_Select_history)
	return nil
}

func (m PriceDefHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPriceDef_Select_history)
	return nil
}

func (m PriceDefHistory) WholesalePrice0() core.Interface {
	return core.Interface{m["wholesale_price_0"]}
}
func (m PriceDefHistory) WholesalePrice() core.Interface { return core.Interface{m["wholesale_price"]} }
func (m PriceDefHistory) ListPrice() core.Interface      { return core.Interface{m["list_price"]} }
func (m PriceDefHistory) RetailPriceMin() core.Interface { return core.Interface{m["retail_price_min"]} }
func (m PriceDefHistory) RetailPriceMax() core.Interface { return core.Interface{m["retail_price_max"]} }

func (m *PriceDefHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 5)
	args := make([]interface{}, 5)
	for i := 0; i < 5; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(PriceDefHistory, 5)
	res["wholesale_price_0"] = data[0]
	res["wholesale_price"] = data[1]
	res["list_price"] = data[2]
	res["retail_price_min"] = data[3]
	res["retail_price_max"] = data[4]
	*m = res
	return nil
}

func (ms *PriceDefHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 5)
	args := make([]interface{}, 5)
	for i := 0; i < 5; i++ {
		args[i] = &data[i]
	}
	res := make(PriceDefHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(PriceDefHistory)
		m["wholesale_price_0"] = data[0]
		m["wholesale_price"] = data[1]
		m["list_price"] = data[2]
		m["retail_price_min"] = data[3]
		m["retail_price_max"] = data[4]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// *VariantQuantity is a substruct of *Variant
func substructVariantQuantity(_ *VariantQuantity, _ *Variant) bool { return true }

func VariantQuantitiesFromVariants(ps []*Variant) []*VariantQuantity {
	ss := make([]*VariantQuantity, len(ps))
	for i, p := range ps {
		ss[i] = NewVariantQuantityFromVariant(p)
	}
	return ss
}

func VariantQuantitiesToVariants(ss []*VariantQuantity) []*Variant {
	ps := make([]*Variant, len(ss))
	for i, s := range ss {
		ps[i] = s.ToVariant()
	}
	return ps
}

func NewVariantQuantityFromVariant(sp *Variant) *VariantQuantity {
	if sp == nil {
		return nil
	}
	s := new(VariantQuantity)
	s.CopyFrom(sp)
	return s
}

func (s *VariantQuantity) ToVariant() *Variant {
	if s == nil {
		return nil
	}
	sp := new(Variant)
	s.AssignTo(sp)
	return sp
}

func (s *VariantQuantity) CopyFrom(sp *Variant) {
	s.QuantityAvailable = sp.QuantityAvailable
	s.QuantityOnHand = sp.QuantityOnHand
	s.QuantityReserved = sp.QuantityReserved
}

func (s *VariantQuantity) AssignTo(sp *Variant) {
	sp.QuantityAvailable = s.QuantityAvailable
	sp.QuantityOnHand = s.QuantityOnHand
	sp.QuantityReserved = s.QuantityReserved
}

// Type VariantQuantity represents table variant
func sqlgenVariantQuantity(_ *VariantQuantity, _ *Variant) bool { return true }

type VariantQuantities []*VariantQuantity

const __sqlVariantQuantity_Table = "variant"
const __sqlVariantQuantity_ListCols = "\"quantity_available\",\"quantity_on_hand\",\"quantity_reserved\""
const __sqlVariantQuantity_Insert = "INSERT INTO \"variant\" (" + __sqlVariantQuantity_ListCols + ") VALUES"
const __sqlVariantQuantity_Select = "SELECT " + __sqlVariantQuantity_ListCols + " FROM \"variant\""
const __sqlVariantQuantity_Select_history = "SELECT " + __sqlVariantQuantity_ListCols + " FROM history.\"variant\""
const __sqlVariantQuantity_UpdateAll = "UPDATE \"variant\" SET (" + __sqlVariantQuantity_ListCols + ")"

func (m *VariantQuantity) SQLTableName() string   { return "variant" }
func (m *VariantQuantities) SQLTableName() string { return "variant" }
func (m *VariantQuantity) SQLListCols() string    { return __sqlVariantQuantity_ListCols }

func (m *VariantQuantity) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.Int(m.QuantityAvailable),
		core.Int(m.QuantityOnHand),
		core.Int(m.QuantityReserved),
	}
}

func (m *VariantQuantity) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int)(&m.QuantityAvailable),
		(*core.Int)(&m.QuantityOnHand),
		(*core.Int)(&m.QuantityReserved),
	}
}

func (m *VariantQuantity) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *VariantQuantities) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(VariantQuantities, 0, 128)
	for rows.Next() {
		m := new(VariantQuantity)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *VariantQuantity) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantQuantity_Select)
	return nil
}

func (_ *VariantQuantities) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantQuantity_Select)
	return nil
}

func (m *VariantQuantity) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantQuantity_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(3)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms VariantQuantities) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantQuantity_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(3)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *VariantQuantity) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("variant")
	w.WriteRawString(" SET ")
	if m.QuantityAvailable != 0 {
		flag = true
		w.WriteName("quantity_available")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityAvailable)
	}
	if m.QuantityOnHand != 0 {
		flag = true
		w.WriteName("quantity_on_hand")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityOnHand)
	}
	if m.QuantityReserved != 0 {
		flag = true
		w.WriteName("quantity_reserved")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityReserved)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *VariantQuantity) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantQuantity_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(3)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type VariantQuantityHistory map[string]interface{}
type VariantQuantityHistories []map[string]interface{}

func (m *VariantQuantityHistory) SQLTableName() string  { return "history.\"variant\"" }
func (m VariantQuantityHistories) SQLTableName() string { return "history.\"variant\"" }

func (m *VariantQuantityHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantQuantity_Select_history)
	return nil
}

func (m VariantQuantityHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantQuantity_Select_history)
	return nil
}

func (m VariantQuantityHistory) QuantityAvailable() core.Interface {
	return core.Interface{m["quantity_available"]}
}
func (m VariantQuantityHistory) QuantityOnHand() core.Interface {
	return core.Interface{m["quantity_on_hand"]}
}
func (m VariantQuantityHistory) QuantityReserved() core.Interface {
	return core.Interface{m["quantity_reserved"]}
}

func (m *VariantQuantityHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 3)
	args := make([]interface{}, 3)
	for i := 0; i < 3; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(VariantQuantityHistory, 3)
	res["quantity_available"] = data[0]
	res["quantity_on_hand"] = data[1]
	res["quantity_reserved"] = data[2]
	*m = res
	return nil
}

func (ms *VariantQuantityHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 3)
	args := make([]interface{}, 3)
	for i := 0; i < 3; i++ {
		args[i] = &data[i]
	}
	res := make(VariantQuantityHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(VariantQuantityHistory)
		m["quantity_available"] = data[0]
		m["quantity_on_hand"] = data[1]
		m["quantity_reserved"] = data[2]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ShopVariantExtended represents a join
func sqlgenShopVariantExtended(_ *ShopVariantExtended, _ *ShopVariant, as sq.AS, t0 sq.JOIN_TYPE, _ *Variant, a0 sq.AS, c0 string, t1 sq.JOIN_TYPE, _ *Product, a1 sq.AS, c1 string, t2 sq.JOIN_TYPE, _ *ShopProduct, a2 sq.AS, c2 string) bool {
	__sqlShopVariantExtended_JoinTypes = []sq.JOIN_TYPE{t0, t1, t2}
	__sqlShopVariantExtended_As = as
	__sqlShopVariantExtended_JoinAs = []sq.AS{a0, a1, a2}
	__sqlShopVariantExtended_JoinConds = []string{c0, c1, c2}
	return true
}

type ShopVariantExtendeds []*ShopVariantExtended

var __sqlShopVariantExtended_JoinTypes []sq.JOIN_TYPE
var __sqlShopVariantExtended_As sq.AS
var __sqlShopVariantExtended_JoinAs []sq.AS
var __sqlShopVariantExtended_JoinConds []string

func (m *ShopVariantExtended) SQLTableName() string  { return "shop_variant" }
func (m *ShopVariantExtendeds) SQLTableName() string { return "shop_variant" }

func (m *ShopVariantExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopVariantExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopVariantExtendeds, 0, 128)
	for rows.Next() {
		m := new(ShopVariantExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ShopVariantExtended) SQLSelect(w SQLWriter) error {
	(*ShopVariantExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ShopVariantExtended)(nil).__sqlJoin(w, __sqlShopVariantExtended_JoinTypes)
	return nil
}

func (m *ShopVariantExtendeds) SQLSelect(w SQLWriter) error {
	return (*ShopVariantExtended)(nil).SQLSelect(w)
}

func (m *ShopVariantExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlShopVariantExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ShopVariantExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ShopVariantExtended)(nil).SQLJoin(w, types)
}

func (m *ShopVariantExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlShopVariantExtended_As), (*ShopVariant)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopVariantExtended_JoinAs[0]), (*Variant)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopVariantExtended_JoinAs[1]), (*Product)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopVariantExtended_JoinAs[2]), (*ShopProduct)(nil).SQLListCols())
}

func (m *ShopVariantExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 3 {
		panic("common/sql: expect 3 types to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("shop_variant")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopVariantExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Variant)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopVariantExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopVariantExtended_JoinConds[0])
	w.WriteByte(' ')
	w.WriteRawString(string(types[1]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Product)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopVariantExtended_JoinAs[1]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopVariantExtended_JoinConds[1])
	w.WriteByte(' ')
	w.WriteRawString(string(types[2]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*ShopProduct)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopVariantExtended_JoinAs[2]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopVariantExtended_JoinConds[2])
}

func (m *ShopVariantExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.ShopVariant = new(ShopVariant)
	args = append(args, m.ShopVariant.SQLScanArgs(opts)...)
	m.Variant = new(Variant)
	args = append(args, m.Variant.SQLScanArgs(opts)...)
	m.Product = new(Product)
	args = append(args, m.Product.SQLScanArgs(opts)...)
	m.ShopProduct = new(ShopProduct)
	args = append(args, m.ShopProduct.SQLScanArgs(opts)...)

	return args
}

// Type ShopVariant represents table shop_variant
func sqlgenShopVariant(_ *ShopVariant) bool { return true }

type ShopVariants []*ShopVariant

const __sqlShopVariant_Table = "shop_variant"
const __sqlShopVariant_ListCols = "\"shop_id\",\"variant_id\",\"collection_id\",\"product_id\",\"name\",\"description\",\"desc_html\",\"short_desc\",\"image_urls\",\"note\",\"tags\",\"retail_price\",\"status\",\"created_at\",\"updated_at\",\"name_norm\""
const __sqlShopVariant_Insert = "INSERT INTO \"shop_variant\" (" + __sqlShopVariant_ListCols + ") VALUES"
const __sqlShopVariant_Select = "SELECT " + __sqlShopVariant_ListCols + " FROM \"shop_variant\""
const __sqlShopVariant_Select_history = "SELECT " + __sqlShopVariant_ListCols + " FROM history.\"shop_variant\""
const __sqlShopVariant_UpdateAll = "UPDATE \"shop_variant\" SET (" + __sqlShopVariant_ListCols + ")"

func (m *ShopVariant) SQLTableName() string  { return "shop_variant" }
func (m *ShopVariants) SQLTableName() string { return "shop_variant" }
func (m *ShopVariant) SQLListCols() string   { return __sqlShopVariant_ListCols }

func (m *ShopVariant) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ShopID),
		core.Int64(m.VariantID),
		core.Int64(m.CollectionID),
		core.Int64(m.ProductID),
		core.String(m.Name),
		core.String(m.Description),
		core.String(m.DescHTML),
		core.String(m.ShortDesc),
		core.Array{m.ImageURLs, opts},
		core.String(m.Note),
		core.Array{m.Tags, opts},
		core.Int(m.RetailPrice),
		core.Int(m.Status),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.String(m.NameNorm),
	}
}

func (m *ShopVariant) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ShopID),
		(*core.Int64)(&m.VariantID),
		(*core.Int64)(&m.CollectionID),
		(*core.Int64)(&m.ProductID),
		(*core.String)(&m.Name),
		(*core.String)(&m.Description),
		(*core.String)(&m.DescHTML),
		(*core.String)(&m.ShortDesc),
		core.Array{&m.ImageURLs, opts},
		(*core.String)(&m.Note),
		core.Array{&m.Tags, opts},
		(*core.Int)(&m.RetailPrice),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.String)(&m.NameNorm),
	}
}

func (m *ShopVariant) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopVariants) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopVariants, 0, 128)
	for rows.Next() {
		m := new(ShopVariant)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopVariant) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Select)
	return nil
}

func (_ *ShopVariants) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Select)
	return nil
}

func (m *ShopVariant) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(16)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopVariants) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(16)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopVariant) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_variant")
	w.WriteRawString(" SET ")
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.VariantID != 0 {
		flag = true
		w.WriteName("variant_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.VariantID)
	}
	if m.CollectionID != 0 {
		flag = true
		w.WriteName("collection_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CollectionID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.DescHTML != "" {
		flag = true
		w.WriteName("desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DescHTML)
	}
	if m.ShortDesc != "" {
		flag = true
		w.WriteName("short_desc")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShortDesc)
	}
	if m.ImageURLs != nil {
		flag = true
		w.WriteName("image_urls")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ImageURLs, opts})
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if m.Tags != nil {
		flag = true
		w.WriteName("tags")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.Tags, opts})
	}
	if m.RetailPrice != 0 {
		flag = true
		w.WriteName("retail_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RetailPrice)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if m.NameNorm != "" {
		flag = true
		w.WriteName("name_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.NameNorm)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopVariant) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(16)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopVariantHistory map[string]interface{}
type ShopVariantHistories []map[string]interface{}

func (m *ShopVariantHistory) SQLTableName() string  { return "history.\"shop_variant\"" }
func (m ShopVariantHistories) SQLTableName() string { return "history.\"shop_variant\"" }

func (m *ShopVariantHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Select_history)
	return nil
}

func (m ShopVariantHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Select_history)
	return nil
}

func (m ShopVariantHistory) ShopID() core.Interface       { return core.Interface{m["shop_id"]} }
func (m ShopVariantHistory) VariantID() core.Interface    { return core.Interface{m["variant_id"]} }
func (m ShopVariantHistory) CollectionID() core.Interface { return core.Interface{m["collection_id"]} }
func (m ShopVariantHistory) ProductID() core.Interface    { return core.Interface{m["product_id"]} }
func (m ShopVariantHistory) Name() core.Interface         { return core.Interface{m["name"]} }
func (m ShopVariantHistory) Description() core.Interface  { return core.Interface{m["description"]} }
func (m ShopVariantHistory) DescHTML() core.Interface     { return core.Interface{m["desc_html"]} }
func (m ShopVariantHistory) ShortDesc() core.Interface    { return core.Interface{m["short_desc"]} }
func (m ShopVariantHistory) ImageURLs() core.Interface    { return core.Interface{m["image_urls"]} }
func (m ShopVariantHistory) Note() core.Interface         { return core.Interface{m["note"]} }
func (m ShopVariantHistory) Tags() core.Interface         { return core.Interface{m["tags"]} }
func (m ShopVariantHistory) RetailPrice() core.Interface  { return core.Interface{m["retail_price"]} }
func (m ShopVariantHistory) Status() core.Interface       { return core.Interface{m["status"]} }
func (m ShopVariantHistory) CreatedAt() core.Interface    { return core.Interface{m["created_at"]} }
func (m ShopVariantHistory) UpdatedAt() core.Interface    { return core.Interface{m["updated_at"]} }
func (m ShopVariantHistory) NameNorm() core.Interface     { return core.Interface{m["name_norm"]} }

func (m *ShopVariantHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 16)
	args := make([]interface{}, 16)
	for i := 0; i < 16; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopVariantHistory, 16)
	res["shop_id"] = data[0]
	res["variant_id"] = data[1]
	res["collection_id"] = data[2]
	res["product_id"] = data[3]
	res["name"] = data[4]
	res["description"] = data[5]
	res["desc_html"] = data[6]
	res["short_desc"] = data[7]
	res["image_urls"] = data[8]
	res["note"] = data[9]
	res["tags"] = data[10]
	res["retail_price"] = data[11]
	res["status"] = data[12]
	res["created_at"] = data[13]
	res["updated_at"] = data[14]
	res["name_norm"] = data[15]
	*m = res
	return nil
}

func (ms *ShopVariantHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 16)
	args := make([]interface{}, 16)
	for i := 0; i < 16; i++ {
		args[i] = &data[i]
	}
	res := make(ShopVariantHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopVariantHistory)
		m["shop_id"] = data[0]
		m["variant_id"] = data[1]
		m["collection_id"] = data[2]
		m["product_id"] = data[3]
		m["name"] = data[4]
		m["description"] = data[5]
		m["desc_html"] = data[6]
		m["short_desc"] = data[7]
		m["image_urls"] = data[8]
		m["note"] = data[9]
		m["tags"] = data[10]
		m["retail_price"] = data[11]
		m["status"] = data[12]
		m["created_at"] = data[13]
		m["updated_at"] = data[14]
		m["name_norm"] = data[15]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ShopProduct represents table shop_product
func sqlgenShopProduct(_ *ShopProduct) bool { return true }

type ShopProducts []*ShopProduct

const __sqlShopProduct_Table = "shop_product"
const __sqlShopProduct_ListCols = "\"shop_id\",\"product_id\",\"name\",\"description\",\"desc_html\",\"short_desc\",\"image_urls\",\"note\",\"tags\",\"retail_price\",\"status\",\"created_at\",\"updated_at\",\"name_norm\""
const __sqlShopProduct_Insert = "INSERT INTO \"shop_product\" (" + __sqlShopProduct_ListCols + ") VALUES"
const __sqlShopProduct_Select = "SELECT " + __sqlShopProduct_ListCols + " FROM \"shop_product\""
const __sqlShopProduct_Select_history = "SELECT " + __sqlShopProduct_ListCols + " FROM history.\"shop_product\""
const __sqlShopProduct_UpdateAll = "UPDATE \"shop_product\" SET (" + __sqlShopProduct_ListCols + ")"

func (m *ShopProduct) SQLTableName() string  { return "shop_product" }
func (m *ShopProducts) SQLTableName() string { return "shop_product" }
func (m *ShopProduct) SQLListCols() string   { return __sqlShopProduct_ListCols }

func (m *ShopProduct) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ShopID),
		core.Int64(m.ProductID),
		core.String(m.Name),
		core.String(m.Description),
		core.String(m.DescHTML),
		core.String(m.ShortDesc),
		core.Array{m.ImageURLs, opts},
		core.String(m.Note),
		core.Array{m.Tags, opts},
		core.Int(m.RetailPrice),
		core.Int(m.Status),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.String(m.NameNorm),
	}
}

func (m *ShopProduct) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ShopID),
		(*core.Int64)(&m.ProductID),
		(*core.String)(&m.Name),
		(*core.String)(&m.Description),
		(*core.String)(&m.DescHTML),
		(*core.String)(&m.ShortDesc),
		core.Array{&m.ImageURLs, opts},
		(*core.String)(&m.Note),
		core.Array{&m.Tags, opts},
		(*core.Int)(&m.RetailPrice),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.String)(&m.NameNorm),
	}
}

func (m *ShopProduct) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopProducts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopProducts, 0, 128)
	for rows.Next() {
		m := new(ShopProduct)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopProduct) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_Select)
	return nil
}

func (_ *ShopProducts) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_Select)
	return nil
}

func (m *ShopProduct) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopProducts) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(14)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopProduct) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_product")
	w.WriteRawString(" SET ")
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.DescHTML != "" {
		flag = true
		w.WriteName("desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DescHTML)
	}
	if m.ShortDesc != "" {
		flag = true
		w.WriteName("short_desc")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShortDesc)
	}
	if m.ImageURLs != nil {
		flag = true
		w.WriteName("image_urls")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ImageURLs, opts})
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if m.Tags != nil {
		flag = true
		w.WriteName("tags")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.Tags, opts})
	}
	if m.RetailPrice != 0 {
		flag = true
		w.WriteName("retail_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RetailPrice)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if m.NameNorm != "" {
		flag = true
		w.WriteName("name_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.NameNorm)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopProduct) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopProductHistory map[string]interface{}
type ShopProductHistories []map[string]interface{}

func (m *ShopProductHistory) SQLTableName() string  { return "history.\"shop_product\"" }
func (m ShopProductHistories) SQLTableName() string { return "history.\"shop_product\"" }

func (m *ShopProductHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_Select_history)
	return nil
}

func (m ShopProductHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_Select_history)
	return nil
}

func (m ShopProductHistory) ShopID() core.Interface      { return core.Interface{m["shop_id"]} }
func (m ShopProductHistory) ProductID() core.Interface   { return core.Interface{m["product_id"]} }
func (m ShopProductHistory) Name() core.Interface        { return core.Interface{m["name"]} }
func (m ShopProductHistory) Description() core.Interface { return core.Interface{m["description"]} }
func (m ShopProductHistory) DescHTML() core.Interface    { return core.Interface{m["desc_html"]} }
func (m ShopProductHistory) ShortDesc() core.Interface   { return core.Interface{m["short_desc"]} }
func (m ShopProductHistory) ImageURLs() core.Interface   { return core.Interface{m["image_urls"]} }
func (m ShopProductHistory) Note() core.Interface        { return core.Interface{m["note"]} }
func (m ShopProductHistory) Tags() core.Interface        { return core.Interface{m["tags"]} }
func (m ShopProductHistory) RetailPrice() core.Interface { return core.Interface{m["retail_price"]} }
func (m ShopProductHistory) Status() core.Interface      { return core.Interface{m["status"]} }
func (m ShopProductHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m ShopProductHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }
func (m ShopProductHistory) NameNorm() core.Interface    { return core.Interface{m["name_norm"]} }

func (m *ShopProductHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopProductHistory, 14)
	res["shop_id"] = data[0]
	res["product_id"] = data[1]
	res["name"] = data[2]
	res["description"] = data[3]
	res["desc_html"] = data[4]
	res["short_desc"] = data[5]
	res["image_urls"] = data[6]
	res["note"] = data[7]
	res["tags"] = data[8]
	res["retail_price"] = data[9]
	res["status"] = data[10]
	res["created_at"] = data[11]
	res["updated_at"] = data[12]
	res["name_norm"] = data[13]
	*m = res
	return nil
}

func (ms *ShopProductHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	res := make(ShopProductHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopProductHistory)
		m["shop_id"] = data[0]
		m["product_id"] = data[1]
		m["name"] = data[2]
		m["description"] = data[3]
		m["desc_html"] = data[4]
		m["short_desc"] = data[5]
		m["image_urls"] = data[6]
		m["note"] = data[7]
		m["tags"] = data[8]
		m["retail_price"] = data[9]
		m["status"] = data[10]
		m["created_at"] = data[11]
		m["updated_at"] = data[12]
		m["name_norm"] = data[13]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ShopProductFtProductFtVariantFtShopVariant represents a join
func sqlgenShopProductFtProductFtVariantFtShopVariant(_ *ShopProductFtProductFtVariantFtShopVariant, _ *ShopProduct, as sq.AS, t0 sq.JOIN_TYPE, _ *Product, a0 sq.AS, c0 string, t1 sq.JOIN_TYPE, _ *Variant, a1 sq.AS, c1 string, t2 sq.JOIN_TYPE, _ *VariantExternal, a2 sq.AS, c2 string, t3 sq.JOIN_TYPE, _ *ShopVariant, a3 sq.AS, c3 string) bool {
	__sqlShopProductFtProductFtVariantFtShopVariant_JoinTypes = []sq.JOIN_TYPE{t0, t1, t2, t3}
	__sqlShopProductFtProductFtVariantFtShopVariant_As = as
	__sqlShopProductFtProductFtVariantFtShopVariant_JoinAs = []sq.AS{a0, a1, a2, a3}
	__sqlShopProductFtProductFtVariantFtShopVariant_JoinConds = []string{c0, c1, c2, c3}
	return true
}

type ShopProductFtProductFtVariantFtShopVariants []*ShopProductFtProductFtVariantFtShopVariant

var __sqlShopProductFtProductFtVariantFtShopVariant_JoinTypes []sq.JOIN_TYPE
var __sqlShopProductFtProductFtVariantFtShopVariant_As sq.AS
var __sqlShopProductFtProductFtVariantFtShopVariant_JoinAs []sq.AS
var __sqlShopProductFtProductFtVariantFtShopVariant_JoinConds []string

func (m *ShopProductFtProductFtVariantFtShopVariant) SQLTableName() string  { return "shop_product" }
func (m *ShopProductFtProductFtVariantFtShopVariants) SQLTableName() string { return "shop_product" }

func (m *ShopProductFtProductFtVariantFtShopVariant) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopProductFtProductFtVariantFtShopVariants) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopProductFtProductFtVariantFtShopVariants, 0, 128)
	for rows.Next() {
		m := new(ShopProductFtProductFtVariantFtShopVariant)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ShopProductFtProductFtVariantFtShopVariant) SQLSelect(w SQLWriter) error {
	(*ShopProductFtProductFtVariantFtShopVariant)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ShopProductFtProductFtVariantFtShopVariant)(nil).__sqlJoin(w, __sqlShopProductFtProductFtVariantFtShopVariant_JoinTypes)
	return nil
}

func (m *ShopProductFtProductFtVariantFtShopVariants) SQLSelect(w SQLWriter) error {
	return (*ShopProductFtProductFtVariantFtShopVariant)(nil).SQLSelect(w)
}

func (m *ShopProductFtProductFtVariantFtShopVariant) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlShopProductFtProductFtVariantFtShopVariant_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ShopProductFtProductFtVariantFtShopVariants) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ShopProductFtProductFtVariantFtShopVariant)(nil).SQLJoin(w, types)
}

func (m *ShopProductFtProductFtVariantFtShopVariant) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlShopProductFtProductFtVariantFtShopVariant_As), (*ShopProduct)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopProductFtProductFtVariantFtShopVariant_JoinAs[0]), (*Product)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopProductFtProductFtVariantFtShopVariant_JoinAs[1]), (*Variant)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopProductFtProductFtVariantFtShopVariant_JoinAs[2]), (*VariantExternal)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopProductFtProductFtVariantFtShopVariant_JoinAs[3]), (*ShopVariant)(nil).SQLListCols())
}

func (m *ShopProductFtProductFtVariantFtShopVariant) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 4 {
		panic("common/sql: expect 4 types to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("shop_product")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopProductFtProductFtVariantFtShopVariant_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Product)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopProductFtProductFtVariantFtShopVariant_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopProductFtProductFtVariantFtShopVariant_JoinConds[0])
	w.WriteByte(' ')
	w.WriteRawString(string(types[1]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Variant)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopProductFtProductFtVariantFtShopVariant_JoinAs[1]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopProductFtProductFtVariantFtShopVariant_JoinConds[1])
	w.WriteByte(' ')
	w.WriteRawString(string(types[2]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*VariantExternal)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopProductFtProductFtVariantFtShopVariant_JoinAs[2]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopProductFtProductFtVariantFtShopVariant_JoinConds[2])
	w.WriteByte(' ')
	w.WriteRawString(string(types[3]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*ShopVariant)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopProductFtProductFtVariantFtShopVariant_JoinAs[3]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopProductFtProductFtVariantFtShopVariant_JoinConds[3])
}

func (m *ShopProductFtProductFtVariantFtShopVariant) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.ShopProduct = new(ShopProduct)
	args = append(args, m.ShopProduct.SQLScanArgs(opts)...)
	m.Product = new(Product)
	args = append(args, m.Product.SQLScanArgs(opts)...)
	m.Variant = new(Variant)
	args = append(args, m.Variant.SQLScanArgs(opts)...)
	m.VariantExternal = new(VariantExternal)
	args = append(args, m.VariantExternal.SQLScanArgs(opts)...)
	m.ShopVariant = new(ShopVariant)
	args = append(args, m.ShopVariant.SQLScanArgs(opts)...)

	return args
}

// Type ShopProductExtended represents a join
func sqlgenShopProductExtended(_ *ShopProductExtended, _ *ShopProduct, as sq.AS, t0 sq.JOIN_TYPE, _ *Product, a0 sq.AS, c0 string) bool {
	__sqlShopProductExtended_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlShopProductExtended_As = as
	__sqlShopProductExtended_JoinAs = []sq.AS{a0}
	__sqlShopProductExtended_JoinConds = []string{c0}
	return true
}

type ShopProductExtendeds []*ShopProductExtended

var __sqlShopProductExtended_JoinTypes []sq.JOIN_TYPE
var __sqlShopProductExtended_As sq.AS
var __sqlShopProductExtended_JoinAs []sq.AS
var __sqlShopProductExtended_JoinConds []string

func (m *ShopProductExtended) SQLTableName() string  { return "shop_product" }
func (m *ShopProductExtendeds) SQLTableName() string { return "shop_product" }

func (m *ShopProductExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopProductExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopProductExtendeds, 0, 128)
	for rows.Next() {
		m := new(ShopProductExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ShopProductExtended) SQLSelect(w SQLWriter) error {
	(*ShopProductExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ShopProductExtended)(nil).__sqlJoin(w, __sqlShopProductExtended_JoinTypes)
	return nil
}

func (m *ShopProductExtendeds) SQLSelect(w SQLWriter) error {
	return (*ShopProductExtended)(nil).SQLSelect(w)
}

func (m *ShopProductExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlShopProductExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ShopProductExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ShopProductExtended)(nil).SQLJoin(w, types)
}

func (m *ShopProductExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlShopProductExtended_As), (*ShopProduct)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopProductExtended_JoinAs[0]), (*Product)(nil).SQLListCols())
}

func (m *ShopProductExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("shop_product")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopProductExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Product)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopProductExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopProductExtended_JoinConds[0])
}

func (m *ShopProductExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.ShopProduct = new(ShopProduct)
	args = append(args, m.ShopProduct.SQLScanArgs(opts)...)
	m.Product = new(Product)
	args = append(args, m.Product.SQLScanArgs(opts)...)

	return args
}

// Type ShopVariantExt represents a join
func sqlgenShopVariantExt(_ *ShopVariantExt, _ *ShopVariant, as sq.AS, t0 sq.JOIN_TYPE, _ *Variant, a0 sq.AS, c0 string, t1 sq.JOIN_TYPE, _ *VariantExternal, a1 sq.AS, c1 string) bool {
	__sqlShopVariantExt_JoinTypes = []sq.JOIN_TYPE{t0, t1}
	__sqlShopVariantExt_As = as
	__sqlShopVariantExt_JoinAs = []sq.AS{a0, a1}
	__sqlShopVariantExt_JoinConds = []string{c0, c1}
	return true
}

type ShopVariantExts []*ShopVariantExt

var __sqlShopVariantExt_JoinTypes []sq.JOIN_TYPE
var __sqlShopVariantExt_As sq.AS
var __sqlShopVariantExt_JoinAs []sq.AS
var __sqlShopVariantExt_JoinConds []string

func (m *ShopVariantExt) SQLTableName() string  { return "shop_variant" }
func (m *ShopVariantExts) SQLTableName() string { return "shop_variant" }

func (m *ShopVariantExt) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopVariantExts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopVariantExts, 0, 128)
	for rows.Next() {
		m := new(ShopVariantExt)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ShopVariantExt) SQLSelect(w SQLWriter) error {
	(*ShopVariantExt)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ShopVariantExt)(nil).__sqlJoin(w, __sqlShopVariantExt_JoinTypes)
	return nil
}

func (m *ShopVariantExts) SQLSelect(w SQLWriter) error {
	return (*ShopVariantExt)(nil).SQLSelect(w)
}

func (m *ShopVariantExt) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlShopVariantExt_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ShopVariantExts) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ShopVariantExt)(nil).SQLJoin(w, types)
}

func (m *ShopVariantExt) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlShopVariantExt_As), (*ShopVariant)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopVariantExt_JoinAs[0]), (*Variant)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopVariantExt_JoinAs[1]), (*VariantExternal)(nil).SQLListCols())
}

func (m *ShopVariantExt) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 2 {
		panic("common/sql: expect 2 types to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("shop_variant")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopVariantExt_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Variant)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopVariantExt_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopVariantExt_JoinConds[0])
	w.WriteByte(' ')
	w.WriteRawString(string(types[1]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*VariantExternal)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopVariantExt_JoinAs[1]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopVariantExt_JoinConds[1])
}

func (m *ShopVariantExt) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.ShopVariant = new(ShopVariant)
	args = append(args, m.ShopVariant.SQLScanArgs(opts)...)
	m.Variant = new(Variant)
	args = append(args, m.Variant.SQLScanArgs(opts)...)
	m.VariantExternal = new(VariantExternal)
	args = append(args, m.VariantExternal.SQLScanArgs(opts)...)

	return args
}

// Type ProductFtVariantFtShopProduct represents a join
func sqlgenProductFtVariantFtShopProduct(_ *ProductFtVariantFtShopProduct, _ *Product, as sq.AS, t0 sq.JOIN_TYPE, _ *Variant, a0 sq.AS, c0 string, t1 sq.JOIN_TYPE, _ *VariantExternal, a1 sq.AS, c1 string, t2 sq.JOIN_TYPE, _ *ShopProduct, a2 sq.AS, c2 string) bool {
	__sqlProductFtVariantFtShopProduct_JoinTypes = []sq.JOIN_TYPE{t0, t1, t2}
	__sqlProductFtVariantFtShopProduct_As = as
	__sqlProductFtVariantFtShopProduct_JoinAs = []sq.AS{a0, a1, a2}
	__sqlProductFtVariantFtShopProduct_JoinConds = []string{c0, c1, c2}
	return true
}

type ProductFtVariantFtShopProducts []*ProductFtVariantFtShopProduct

var __sqlProductFtVariantFtShopProduct_JoinTypes []sq.JOIN_TYPE
var __sqlProductFtVariantFtShopProduct_As sq.AS
var __sqlProductFtVariantFtShopProduct_JoinAs []sq.AS
var __sqlProductFtVariantFtShopProduct_JoinConds []string

func (m *ProductFtVariantFtShopProduct) SQLTableName() string  { return "product" }
func (m *ProductFtVariantFtShopProducts) SQLTableName() string { return "product" }

func (m *ProductFtVariantFtShopProduct) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductFtVariantFtShopProducts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductFtVariantFtShopProducts, 0, 128)
	for rows.Next() {
		m := new(ProductFtVariantFtShopProduct)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ProductFtVariantFtShopProduct) SQLSelect(w SQLWriter) error {
	(*ProductFtVariantFtShopProduct)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ProductFtVariantFtShopProduct)(nil).__sqlJoin(w, __sqlProductFtVariantFtShopProduct_JoinTypes)
	return nil
}

func (m *ProductFtVariantFtShopProducts) SQLSelect(w SQLWriter) error {
	return (*ProductFtVariantFtShopProduct)(nil).SQLSelect(w)
}

func (m *ProductFtVariantFtShopProduct) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlProductFtVariantFtShopProduct_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ProductFtVariantFtShopProducts) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ProductFtVariantFtShopProduct)(nil).SQLJoin(w, types)
}

func (m *ProductFtVariantFtShopProduct) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlProductFtVariantFtShopProduct_As), (*Product)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlProductFtVariantFtShopProduct_JoinAs[0]), (*Variant)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlProductFtVariantFtShopProduct_JoinAs[1]), (*VariantExternal)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlProductFtVariantFtShopProduct_JoinAs[2]), (*ShopProduct)(nil).SQLListCols())
}

func (m *ProductFtVariantFtShopProduct) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 3 {
		panic("common/sql: expect 3 types to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("product")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductFtVariantFtShopProduct_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Variant)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductFtVariantFtShopProduct_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlProductFtVariantFtShopProduct_JoinConds[0])
	w.WriteByte(' ')
	w.WriteRawString(string(types[1]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*VariantExternal)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductFtVariantFtShopProduct_JoinAs[1]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlProductFtVariantFtShopProduct_JoinConds[1])
	w.WriteByte(' ')
	w.WriteRawString(string(types[2]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*ShopProduct)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductFtVariantFtShopProduct_JoinAs[2]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlProductFtVariantFtShopProduct_JoinConds[2])
}

func (m *ProductFtVariantFtShopProduct) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.Product = new(Product)
	args = append(args, m.Product.SQLScanArgs(opts)...)
	m.Variant = new(Variant)
	args = append(args, m.Variant.SQLScanArgs(opts)...)
	m.VariantExternal = new(VariantExternal)
	args = append(args, m.VariantExternal.SQLScanArgs(opts)...)
	m.ShopProduct = new(ShopProduct)
	args = append(args, m.ShopProduct.SQLScanArgs(opts)...)

	return args
}

// Type ProductFtShopProduct represents a join
func sqlgenProductFtShopProduct(_ *ProductFtShopProduct, _ *Product, as sq.AS, t0 sq.JOIN_TYPE, _ *ShopProduct, a0 sq.AS, c0 string) bool {
	__sqlProductFtShopProduct_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlProductFtShopProduct_As = as
	__sqlProductFtShopProduct_JoinAs = []sq.AS{a0}
	__sqlProductFtShopProduct_JoinConds = []string{c0}
	return true
}

type ProductFtShopProducts []*ProductFtShopProduct

var __sqlProductFtShopProduct_JoinTypes []sq.JOIN_TYPE
var __sqlProductFtShopProduct_As sq.AS
var __sqlProductFtShopProduct_JoinAs []sq.AS
var __sqlProductFtShopProduct_JoinConds []string

func (m *ProductFtShopProduct) SQLTableName() string  { return "product" }
func (m *ProductFtShopProducts) SQLTableName() string { return "product" }

func (m *ProductFtShopProduct) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductFtShopProducts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductFtShopProducts, 0, 128)
	for rows.Next() {
		m := new(ProductFtShopProduct)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ProductFtShopProduct) SQLSelect(w SQLWriter) error {
	(*ProductFtShopProduct)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ProductFtShopProduct)(nil).__sqlJoin(w, __sqlProductFtShopProduct_JoinTypes)
	return nil
}

func (m *ProductFtShopProducts) SQLSelect(w SQLWriter) error {
	return (*ProductFtShopProduct)(nil).SQLSelect(w)
}

func (m *ProductFtShopProduct) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlProductFtShopProduct_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ProductFtShopProducts) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ProductFtShopProduct)(nil).SQLJoin(w, types)
}

func (m *ProductFtShopProduct) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlProductFtShopProduct_As), (*Product)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlProductFtShopProduct_JoinAs[0]), (*ShopProduct)(nil).SQLListCols())
}

func (m *ProductFtShopProduct) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("product")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductFtShopProduct_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*ShopProduct)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductFtShopProduct_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlProductFtShopProduct_JoinConds[0])
}

func (m *ProductFtShopProduct) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.Product = new(Product)
	args = append(args, m.Product.SQLScanArgs(opts)...)
	m.ShopProduct = new(ShopProduct)
	args = append(args, m.ShopProduct.SQLScanArgs(opts)...)

	return args
}

// Type ShopCollection represents table shop_collection
func sqlgenShopCollection(_ *ShopCollection) bool { return true }

type ShopCollections []*ShopCollection

const __sqlShopCollection_Table = "shop_collection"
const __sqlShopCollection_ListCols = "\"id\",\"shop_id\",\"name\",\"description\",\"desc_html\",\"short_desc\",\"created_at\",\"updated_at\""
const __sqlShopCollection_Insert = "INSERT INTO \"shop_collection\" (" + __sqlShopCollection_ListCols + ") VALUES"
const __sqlShopCollection_Select = "SELECT " + __sqlShopCollection_ListCols + " FROM \"shop_collection\""
const __sqlShopCollection_Select_history = "SELECT " + __sqlShopCollection_ListCols + " FROM history.\"shop_collection\""
const __sqlShopCollection_UpdateAll = "UPDATE \"shop_collection\" SET (" + __sqlShopCollection_ListCols + ")"

func (m *ShopCollection) SQLTableName() string  { return "shop_collection" }
func (m *ShopCollections) SQLTableName() string { return "shop_collection" }
func (m *ShopCollection) SQLListCols() string   { return __sqlShopCollection_ListCols }

func (m *ShopCollection) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ShopID),
		core.String(m.Name),
		core.String(m.Description),
		core.String(m.DescHTML),
		core.String(m.ShortDesc),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *ShopCollection) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ShopID),
		(*core.String)(&m.Name),
		(*core.String)(&m.Description),
		(*core.String)(&m.DescHTML),
		(*core.String)(&m.ShortDesc),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *ShopCollection) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopCollections) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopCollections, 0, 128)
	for rows.Next() {
		m := new(ShopCollection)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopCollection) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_Select)
	return nil
}

func (_ *ShopCollections) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_Select)
	return nil
}

func (m *ShopCollection) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopCollections) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(8)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopCollection) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_collection")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.DescHTML != "" {
		flag = true
		w.WriteName("desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DescHTML)
	}
	if m.ShortDesc != "" {
		flag = true
		w.WriteName("short_desc")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShortDesc)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopCollection) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopCollectionHistory map[string]interface{}
type ShopCollectionHistories []map[string]interface{}

func (m *ShopCollectionHistory) SQLTableName() string  { return "history.\"shop_collection\"" }
func (m ShopCollectionHistories) SQLTableName() string { return "history.\"shop_collection\"" }

func (m *ShopCollectionHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_Select_history)
	return nil
}

func (m ShopCollectionHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_Select_history)
	return nil
}

func (m ShopCollectionHistory) ID() core.Interface          { return core.Interface{m["id"]} }
func (m ShopCollectionHistory) ShopID() core.Interface      { return core.Interface{m["shop_id"]} }
func (m ShopCollectionHistory) Name() core.Interface        { return core.Interface{m["name"]} }
func (m ShopCollectionHistory) Description() core.Interface { return core.Interface{m["description"]} }
func (m ShopCollectionHistory) DescHTML() core.Interface    { return core.Interface{m["desc_html"]} }
func (m ShopCollectionHistory) ShortDesc() core.Interface   { return core.Interface{m["short_desc"]} }
func (m ShopCollectionHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m ShopCollectionHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }

func (m *ShopCollectionHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopCollectionHistory, 8)
	res["id"] = data[0]
	res["shop_id"] = data[1]
	res["name"] = data[2]
	res["description"] = data[3]
	res["desc_html"] = data[4]
	res["short_desc"] = data[5]
	res["created_at"] = data[6]
	res["updated_at"] = data[7]
	*m = res
	return nil
}

func (ms *ShopCollectionHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	res := make(ShopCollectionHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopCollectionHistory)
		m["id"] = data[0]
		m["shop_id"] = data[1]
		m["name"] = data[2]
		m["description"] = data[3]
		m["desc_html"] = data[4]
		m["short_desc"] = data[5]
		m["created_at"] = data[6]
		m["updated_at"] = data[7]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ProductShopCollection represents table product_shop_collection
func sqlgenProductShopCollection(_ *ProductShopCollection) bool { return true }

type ProductShopCollections []*ProductShopCollection

const __sqlProductShopCollection_Table = "product_shop_collection"
const __sqlProductShopCollection_ListCols = "\"collection_id\",\"product_id\",\"shop_id\",\"status\",\"created_at\",\"updated_at\""
const __sqlProductShopCollection_Insert = "INSERT INTO \"product_shop_collection\" (" + __sqlProductShopCollection_ListCols + ") VALUES"
const __sqlProductShopCollection_Select = "SELECT " + __sqlProductShopCollection_ListCols + " FROM \"product_shop_collection\""
const __sqlProductShopCollection_Select_history = "SELECT " + __sqlProductShopCollection_ListCols + " FROM history.\"product_shop_collection\""
const __sqlProductShopCollection_UpdateAll = "UPDATE \"product_shop_collection\" SET (" + __sqlProductShopCollection_ListCols + ")"

func (m *ProductShopCollection) SQLTableName() string  { return "product_shop_collection" }
func (m *ProductShopCollections) SQLTableName() string { return "product_shop_collection" }
func (m *ProductShopCollection) SQLListCols() string   { return __sqlProductShopCollection_ListCols }

func (m *ProductShopCollection) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.CollectionID),
		core.Int64(m.ProductID),
		core.Int64(m.ShopID),
		core.Int(m.Status),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *ProductShopCollection) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.CollectionID),
		(*core.Int64)(&m.ProductID),
		(*core.Int64)(&m.ShopID),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *ProductShopCollection) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductShopCollections) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductShopCollections, 0, 128)
	for rows.Next() {
		m := new(ProductShopCollection)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ProductShopCollection) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_Select)
	return nil
}

func (_ *ProductShopCollections) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_Select)
	return nil
}

func (m *ProductShopCollection) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ProductShopCollections) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(6)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ProductShopCollection) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("product_shop_collection")
	w.WriteRawString(" SET ")
	if m.CollectionID != 0 {
		flag = true
		w.WriteName("collection_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CollectionID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ProductShopCollection) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ProductShopCollectionHistory map[string]interface{}
type ProductShopCollectionHistories []map[string]interface{}

func (m *ProductShopCollectionHistory) SQLTableName() string {
	return "history.\"product_shop_collection\""
}
func (m ProductShopCollectionHistories) SQLTableName() string {
	return "history.\"product_shop_collection\""
}

func (m *ProductShopCollectionHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_Select_history)
	return nil
}

func (m ProductShopCollectionHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_Select_history)
	return nil
}

func (m ProductShopCollectionHistory) CollectionID() core.Interface {
	return core.Interface{m["collection_id"]}
}
func (m ProductShopCollectionHistory) ProductID() core.Interface {
	return core.Interface{m["product_id"]}
}
func (m ProductShopCollectionHistory) ShopID() core.Interface { return core.Interface{m["shop_id"]} }
func (m ProductShopCollectionHistory) Status() core.Interface { return core.Interface{m["status"]} }
func (m ProductShopCollectionHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m ProductShopCollectionHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *ProductShopCollectionHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ProductShopCollectionHistory, 6)
	res["collection_id"] = data[0]
	res["product_id"] = data[1]
	res["shop_id"] = data[2]
	res["status"] = data[3]
	res["created_at"] = data[4]
	res["updated_at"] = data[5]
	*m = res
	return nil
}

func (ms *ProductShopCollectionHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	res := make(ProductShopCollectionHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ProductShopCollectionHistory)
		m["collection_id"] = data[0]
		m["product_id"] = data[1]
		m["shop_id"] = data[2]
		m["status"] = data[3]
		m["created_at"] = data[4]
		m["updated_at"] = data[5]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
