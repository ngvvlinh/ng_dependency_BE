// Code generated by goderive DO NOT EDIT.

package model

import (
	"database/sql"
	"time"

	core "etop.vn/backend/pkg/common/sql/core"
)

type SQLWriter = core.SQLWriter

// Type ShipnowFulfillment represents table shipnow_fulfillment
func sqlgenShipnowFulfillment(_ *ShipnowFulfillment) bool { return true }

type ShipnowFulfillments []*ShipnowFulfillment

const __sqlShipnowFulfillment_Table = "shipnow_fulfillment"
const __sqlShipnowFulfillment_ListCols = "\"id\",\"shop_id\",\"partner_id\",\"order_ids\",\"pickup_address\",\"carrier\",\"shipping_service_code\",\"shipping_service_fee\",\"chargeable_weight\",\"basket_value\",\"cod_amount\",\"shipping_note\",\"request_pickup_at\",\"delivery_points\""
const __sqlShipnowFulfillment_Insert = "INSERT INTO \"shipnow_fulfillment\" (" + __sqlShipnowFulfillment_ListCols + ") VALUES"
const __sqlShipnowFulfillment_Select = "SELECT " + __sqlShipnowFulfillment_ListCols + " FROM \"shipnow_fulfillment\""
const __sqlShipnowFulfillment_Select_history = "SELECT " + __sqlShipnowFulfillment_ListCols + " FROM history.\"shipnow_fulfillment\""
const __sqlShipnowFulfillment_UpdateAll = "UPDATE \"shipnow_fulfillment\" SET (" + __sqlShipnowFulfillment_ListCols + ")"

func (m *ShipnowFulfillment) SQLTableName() string  { return "shipnow_fulfillment" }
func (m *ShipnowFulfillments) SQLTableName() string { return "shipnow_fulfillment" }

func (m *ShipnowFulfillment) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ShopID),
		core.Int64(m.PartnerID),
		core.Array{m.OrderIDs, opts},
		core.JSON{m.PickupAddress},
		core.String(m.Carrier),
		core.String(m.ShippingServiceCode),
		core.Int32(m.ShippingServiceFee),
		core.Int32(m.ChargeableWeight),
		core.Int32(m.BasketValue),
		core.Int32(m.CODAmount),
		core.String(m.ShippingNote),
		core.Time(m.RequestPickupAt),
		core.JSON{m.DeliveryPoints},
	}
}

func (m *ShipnowFulfillment) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ShopID),
		(*core.Int64)(&m.PartnerID),
		core.Array{&m.OrderIDs, opts},
		core.JSON{&m.PickupAddress},
		(*core.String)(&m.Carrier),
		(*core.String)(&m.ShippingServiceCode),
		(*core.Int32)(&m.ShippingServiceFee),
		(*core.Int32)(&m.ChargeableWeight),
		(*core.Int32)(&m.BasketValue),
		(*core.Int32)(&m.CODAmount),
		(*core.String)(&m.ShippingNote),
		(*core.Time)(&m.RequestPickupAt),
		core.JSON{&m.DeliveryPoints},
	}
}

func (m *ShipnowFulfillment) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShipnowFulfillments) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShipnowFulfillments, 0, 128)
	for rows.Next() {
		m := new(ShipnowFulfillment)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShipnowFulfillment) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShipnowFulfillment_Select)
	return nil
}

func (_ *ShipnowFulfillments) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShipnowFulfillment_Select)
	return nil
}

func (m *ShipnowFulfillment) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShipnowFulfillment_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShipnowFulfillments) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShipnowFulfillment_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(14)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShipnowFulfillment) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shipnow_fulfillment")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.PartnerID != 0 {
		flag = true
		w.WriteName("partner_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PartnerID)
	}
	if m.OrderIDs != nil {
		flag = true
		w.WriteName("order_ids")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.OrderIDs, opts})
	}
	if m.PickupAddress != nil {
		flag = true
		w.WriteName("pickup_address")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.PickupAddress})
	}
	if m.Carrier != "" {
		flag = true
		w.WriteName("carrier")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(string(m.Carrier))
	}
	if m.ShippingServiceCode != "" {
		flag = true
		w.WriteName("shipping_service_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShippingServiceCode)
	}
	if m.ShippingServiceFee != 0 {
		flag = true
		w.WriteName("shipping_service_fee")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShippingServiceFee)
	}
	if m.ChargeableWeight != 0 {
		flag = true
		w.WriteName("chargeable_weight")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ChargeableWeight)
	}
	if m.BasketValue != 0 {
		flag = true
		w.WriteName("basket_value")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.BasketValue)
	}
	if m.CODAmount != 0 {
		flag = true
		w.WriteName("cod_amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CODAmount)
	}
	if m.ShippingNote != "" {
		flag = true
		w.WriteName("shipping_note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShippingNote)
	}
	if !m.RequestPickupAt.IsZero() {
		flag = true
		w.WriteName("request_pickup_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RequestPickupAt)
	}
	if m.DeliveryPoints != nil {
		flag = true
		w.WriteName("delivery_points")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.DeliveryPoints})
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShipnowFulfillment) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShipnowFulfillment_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShipnowFulfillmentHistory map[string]interface{}
type ShipnowFulfillmentHistories []map[string]interface{}

func (m *ShipnowFulfillmentHistory) SQLTableName() string  { return "history.\"shipnow_fulfillment\"" }
func (m ShipnowFulfillmentHistories) SQLTableName() string { return "history.\"shipnow_fulfillment\"" }

func (m *ShipnowFulfillmentHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShipnowFulfillment_Select_history)
	return nil
}

func (m ShipnowFulfillmentHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShipnowFulfillment_Select_history)
	return nil
}

func (m ShipnowFulfillmentHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m ShipnowFulfillmentHistory) ShopID() core.Interface    { return core.Interface{m["shop_id"]} }
func (m ShipnowFulfillmentHistory) PartnerID() core.Interface { return core.Interface{m["partner_id"]} }
func (m ShipnowFulfillmentHistory) OrderIDs() core.Interface  { return core.Interface{m["order_ids"]} }
func (m ShipnowFulfillmentHistory) PickupAddress() core.Interface {
	return core.Interface{m["pickup_address"]}
}
func (m ShipnowFulfillmentHistory) Carrier() core.Interface { return core.Interface{m["carrier"]} }
func (m ShipnowFulfillmentHistory) ShippingServiceCode() core.Interface {
	return core.Interface{m["shipping_service_code"]}
}
func (m ShipnowFulfillmentHistory) ShippingServiceFee() core.Interface {
	return core.Interface{m["shipping_service_fee"]}
}
func (m ShipnowFulfillmentHistory) ChargeableWeight() core.Interface {
	return core.Interface{m["chargeable_weight"]}
}
func (m ShipnowFulfillmentHistory) BasketValue() core.Interface {
	return core.Interface{m["basket_value"]}
}
func (m ShipnowFulfillmentHistory) CODAmount() core.Interface { return core.Interface{m["cod_amount"]} }
func (m ShipnowFulfillmentHistory) ShippingNote() core.Interface {
	return core.Interface{m["shipping_note"]}
}
func (m ShipnowFulfillmentHistory) RequestPickupAt() core.Interface {
	return core.Interface{m["request_pickup_at"]}
}
func (m ShipnowFulfillmentHistory) DeliveryPoints() core.Interface {
	return core.Interface{m["delivery_points"]}
}

func (m *ShipnowFulfillmentHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShipnowFulfillmentHistory, 14)
	res["id"] = data[0]
	res["shop_id"] = data[1]
	res["partner_id"] = data[2]
	res["order_ids"] = data[3]
	res["pickup_address"] = data[4]
	res["carrier"] = data[5]
	res["shipping_service_code"] = data[6]
	res["shipping_service_fee"] = data[7]
	res["chargeable_weight"] = data[8]
	res["basket_value"] = data[9]
	res["cod_amount"] = data[10]
	res["shipping_note"] = data[11]
	res["request_pickup_at"] = data[12]
	res["delivery_points"] = data[13]
	*m = res
	return nil
}

func (ms *ShipnowFulfillmentHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	res := make(ShipnowFulfillmentHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShipnowFulfillmentHistory)
		m["id"] = data[0]
		m["shop_id"] = data[1]
		m["partner_id"] = data[2]
		m["order_ids"] = data[3]
		m["pickup_address"] = data[4]
		m["carrier"] = data[5]
		m["shipping_service_code"] = data[6]
		m["shipping_service_fee"] = data[7]
		m["chargeable_weight"] = data[8]
		m["basket_value"] = data[9]
		m["cod_amount"] = data[10]
		m["shipping_note"] = data[11]
		m["request_pickup_at"] = data[12]
		m["delivery_points"] = data[13]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
