// Generated by common/sq. DO NOT EDIT.

package sqlstore

import (
	"time"

	"etop.vn/backend/pkg/common/sq"
	"etop.vn/backend/pkg/etop/model"
	m "etop.vn/backend/pkg/services/shipnow/model"
)

type ShipnowFulfillmentFilters struct{ prefix string }

func NewShipnowFulfillmentFilters(prefix string) ShipnowFulfillmentFilters {
	return ShipnowFulfillmentFilters{prefix}
}

func (ft ShipnowFulfillmentFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ShipnowFulfillmentFilters) Prefix() string {
	return ft.prefix
}

func (ft ShipnowFulfillmentFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByShopID(ShopID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByShopIDPtr(ShopID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == nil,
		IsZero: ShopID != nil && (*ShopID) == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByPartnerID(PartnerID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "partner_id",
		Value:  PartnerID,
		IsNil:  PartnerID == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByPartnerIDPtr(PartnerID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "partner_id",
		Value:  PartnerID,
		IsNil:  PartnerID == nil,
		IsZero: PartnerID != nil && (*PartnerID) == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByCarrier(Carrier m.Carrier) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "carrier",
		Value:  Carrier,
		IsNil:  Carrier == "",
	}
}

func (ft ShipnowFulfillmentFilters) ByCarrierPtr(Carrier *m.Carrier) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "carrier",
		Value:  Carrier,
		IsNil:  Carrier == nil,
		IsZero: Carrier != nil && (*Carrier) == "",
	}
}

func (ft ShipnowFulfillmentFilters) ByShippingServiceCode(ShippingServiceCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "shipping_service_code",
		Value:  ShippingServiceCode,
		IsNil:  ShippingServiceCode == "",
	}
}

func (ft ShipnowFulfillmentFilters) ByShippingServiceCodePtr(ShippingServiceCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "shipping_service_code",
		Value:  ShippingServiceCode,
		IsNil:  ShippingServiceCode == nil,
		IsZero: ShippingServiceCode != nil && (*ShippingServiceCode) == "",
	}
}

func (ft ShipnowFulfillmentFilters) ByShippingServiceFee(ShippingServiceFee int32) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "shipping_service_fee",
		Value:  ShippingServiceFee,
		IsNil:  ShippingServiceFee == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByShippingServiceFeePtr(ShippingServiceFee *int32) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "shipping_service_fee",
		Value:  ShippingServiceFee,
		IsNil:  ShippingServiceFee == nil,
		IsZero: ShippingServiceFee != nil && (*ShippingServiceFee) == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByChargeableWeight(ChargeableWeight int32) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "chargeable_weight",
		Value:  ChargeableWeight,
		IsNil:  ChargeableWeight == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByChargeableWeightPtr(ChargeableWeight *int32) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "chargeable_weight",
		Value:  ChargeableWeight,
		IsNil:  ChargeableWeight == nil,
		IsZero: ChargeableWeight != nil && (*ChargeableWeight) == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByGrossWeight(GrossWeight int32) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "gross_weight",
		Value:  GrossWeight,
		IsNil:  GrossWeight == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByGrossWeightPtr(GrossWeight *int32) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "gross_weight",
		Value:  GrossWeight,
		IsNil:  GrossWeight == nil,
		IsZero: GrossWeight != nil && (*GrossWeight) == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByBasketValue(BasketValue int32) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "basket_value",
		Value:  BasketValue,
		IsNil:  BasketValue == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByBasketValuePtr(BasketValue *int32) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "basket_value",
		Value:  BasketValue,
		IsNil:  BasketValue == nil,
		IsZero: BasketValue != nil && (*BasketValue) == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByCODAmount(CODAmount int32) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "cod_amount",
		Value:  CODAmount,
		IsNil:  CODAmount == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByCODAmountPtr(CODAmount *int32) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "cod_amount",
		Value:  CODAmount,
		IsNil:  CODAmount == nil,
		IsZero: CODAmount != nil && (*CODAmount) == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByShippingNote(ShippingNote string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "shipping_note",
		Value:  ShippingNote,
		IsNil:  ShippingNote == "",
	}
}

func (ft ShipnowFulfillmentFilters) ByShippingNotePtr(ShippingNote *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "shipping_note",
		Value:  ShippingNote,
		IsNil:  ShippingNote == nil,
		IsZero: ShippingNote != nil && (*ShippingNote) == "",
	}
}

func (ft ShipnowFulfillmentFilters) ByRequestPickupAt(RequestPickupAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "request_pickup_at",
		Value:  RequestPickupAt,
		IsNil:  RequestPickupAt.IsZero(),
	}
}

func (ft ShipnowFulfillmentFilters) ByRequestPickupAtPtr(RequestPickupAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "request_pickup_at",
		Value:  RequestPickupAt,
		IsNil:  RequestPickupAt == nil,
		IsZero: RequestPickupAt != nil && (*RequestPickupAt).IsZero(),
	}
}

func (ft ShipnowFulfillmentFilters) ByStatus(Status model.Status5) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByStatusPtr(Status *model.Status5) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByConfirmStatus(ConfirmStatus model.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "confirm_status",
		Value:  ConfirmStatus,
		IsNil:  ConfirmStatus == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByConfirmStatusPtr(ConfirmStatus *model.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "confirm_status",
		Value:  ConfirmStatus,
		IsNil:  ConfirmStatus == nil,
		IsZero: ConfirmStatus != nil && (*ConfirmStatus) == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByShippingStatus(ShippingStatus model.Status5) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "shipping_status",
		Value:  ShippingStatus,
		IsNil:  ShippingStatus == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByShippingStatusPtr(ShippingStatus *model.Status5) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "shipping_status",
		Value:  ShippingStatus,
		IsNil:  ShippingStatus == nil,
		IsZero: ShippingStatus != nil && (*ShippingStatus) == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByShippingState(ShippingState string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "shipping_state",
		Value:  ShippingState,
		IsNil:  ShippingState == "",
	}
}

func (ft ShipnowFulfillmentFilters) ByShippingStatePtr(ShippingState *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "shipping_state",
		Value:  ShippingState,
		IsNil:  ShippingState == nil,
		IsZero: ShippingState != nil && (*ShippingState) == "",
	}
}

func (ft ShipnowFulfillmentFilters) ByShippingCode(ShippingCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "shipping_code",
		Value:  ShippingCode,
		IsNil:  ShippingCode == "",
	}
}

func (ft ShipnowFulfillmentFilters) ByShippingCodePtr(ShippingCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "shipping_code",
		Value:  ShippingCode,
		IsNil:  ShippingCode == nil,
		IsZero: ShippingCode != nil && (*ShippingCode) == "",
	}
}

func (ft ShipnowFulfillmentFilters) BySyncStatus(SyncStatus model.Status4) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "sync_status",
		Value:  SyncStatus,
		IsNil:  SyncStatus == 0,
	}
}

func (ft ShipnowFulfillmentFilters) BySyncStatusPtr(SyncStatus *model.Status4) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "sync_status",
		Value:  SyncStatus,
		IsNil:  SyncStatus == nil,
		IsZero: SyncStatus != nil && (*SyncStatus) == 0,
	}
}

func (ft ShipnowFulfillmentFilters) ByLastSyncAt(LastSyncAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt.IsZero(),
	}
}

func (ft ShipnowFulfillmentFilters) ByLastSyncAtPtr(LastSyncAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt == nil,
		IsZero: LastSyncAt != nil && (*LastSyncAt).IsZero(),
	}
}

func (ft ShipnowFulfillmentFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ShipnowFulfillmentFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft ShipnowFulfillmentFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft ShipnowFulfillmentFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}
