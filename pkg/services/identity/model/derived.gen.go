// Code generated by goderive DO NOT EDIT.

package model

import (
	"database/sql"
	"time"

	core "etop.vn/backend/pkg/common/sq/core"
)

type SQLWriter = core.SQLWriter

// Type ExternalAccountAhamove represents table external_account_ahamove
func sqlgenExternalAccountAhamove(_ *ExternalAccountAhamove) bool { return true }

type ExternalAccountAhamoves []*ExternalAccountAhamove

const __sqlExternalAccountAhamove_Table = "external_account_ahamove"
const __sqlExternalAccountAhamove_ListCols = "\"id\",\"owner_id\",\"phone\",\"name\",\"external_verified\",\"external_created_at\",\"external_token\",\"created_at\",\"updated_at\""
const __sqlExternalAccountAhamove_Insert = "INSERT INTO \"external_account_ahamove\" (" + __sqlExternalAccountAhamove_ListCols + ") VALUES"
const __sqlExternalAccountAhamove_Select = "SELECT " + __sqlExternalAccountAhamove_ListCols + " FROM \"external_account_ahamove\""
const __sqlExternalAccountAhamove_Select_history = "SELECT " + __sqlExternalAccountAhamove_ListCols + " FROM history.\"external_account_ahamove\""
const __sqlExternalAccountAhamove_UpdateAll = "UPDATE \"external_account_ahamove\" SET (" + __sqlExternalAccountAhamove_ListCols + ")"

func (m *ExternalAccountAhamove) SQLTableName() string  { return "external_account_ahamove" }
func (m *ExternalAccountAhamoves) SQLTableName() string { return "external_account_ahamove" }
func (m *ExternalAccountAhamove) SQLListCols() string   { return __sqlExternalAccountAhamove_ListCols }

func (m *ExternalAccountAhamove) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.OwnerID),
		core.String(m.Phone),
		core.String(m.Name),
		core.Bool(m.ExternalVerified),
		core.Time(m.ExternalCreatedAt),
		core.String(m.ExternalToken),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *ExternalAccountAhamove) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.OwnerID),
		(*core.String)(&m.Phone),
		(*core.String)(&m.Name),
		(*core.Bool)(&m.ExternalVerified),
		(*core.Time)(&m.ExternalCreatedAt),
		(*core.String)(&m.ExternalToken),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *ExternalAccountAhamove) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ExternalAccountAhamoves) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ExternalAccountAhamoves, 0, 128)
	for rows.Next() {
		m := new(ExternalAccountAhamove)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ExternalAccountAhamove) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlExternalAccountAhamove_Select)
	return nil
}

func (_ *ExternalAccountAhamoves) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlExternalAccountAhamove_Select)
	return nil
}

func (m *ExternalAccountAhamove) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlExternalAccountAhamove_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ExternalAccountAhamoves) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlExternalAccountAhamove_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(9)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ExternalAccountAhamove) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("external_account_ahamove")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.OwnerID != 0 {
		flag = true
		w.WriteName("owner_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OwnerID)
	}
	if m.Phone != "" {
		flag = true
		w.WriteName("phone")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Phone)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.ExternalVerified {
		flag = true
		w.WriteName("external_verified")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalVerified)
	}
	if !m.ExternalCreatedAt.IsZero() {
		flag = true
		w.WriteName("external_created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCreatedAt)
	}
	if m.ExternalToken != "" {
		flag = true
		w.WriteName("external_token")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalToken)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ExternalAccountAhamove) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlExternalAccountAhamove_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ExternalAccountAhamoveHistory map[string]interface{}
type ExternalAccountAhamoveHistories []map[string]interface{}

func (m *ExternalAccountAhamoveHistory) SQLTableName() string {
	return "history.\"external_account_ahamove\""
}
func (m ExternalAccountAhamoveHistories) SQLTableName() string {
	return "history.\"external_account_ahamove\""
}

func (m *ExternalAccountAhamoveHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlExternalAccountAhamove_Select_history)
	return nil
}

func (m ExternalAccountAhamoveHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlExternalAccountAhamove_Select_history)
	return nil
}

func (m ExternalAccountAhamoveHistory) ID() core.Interface      { return core.Interface{m["id"]} }
func (m ExternalAccountAhamoveHistory) OwnerID() core.Interface { return core.Interface{m["owner_id"]} }
func (m ExternalAccountAhamoveHistory) Phone() core.Interface   { return core.Interface{m["phone"]} }
func (m ExternalAccountAhamoveHistory) Name() core.Interface    { return core.Interface{m["name"]} }
func (m ExternalAccountAhamoveHistory) ExternalVerified() core.Interface {
	return core.Interface{m["external_verified"]}
}
func (m ExternalAccountAhamoveHistory) ExternalCreatedAt() core.Interface {
	return core.Interface{m["external_created_at"]}
}
func (m ExternalAccountAhamoveHistory) ExternalToken() core.Interface {
	return core.Interface{m["external_token"]}
}
func (m ExternalAccountAhamoveHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m ExternalAccountAhamoveHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *ExternalAccountAhamoveHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ExternalAccountAhamoveHistory, 9)
	res["id"] = data[0]
	res["owner_id"] = data[1]
	res["phone"] = data[2]
	res["name"] = data[3]
	res["external_verified"] = data[4]
	res["external_created_at"] = data[5]
	res["external_token"] = data[6]
	res["created_at"] = data[7]
	res["updated_at"] = data[8]
	*m = res
	return nil
}

func (ms *ExternalAccountAhamoveHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	res := make(ExternalAccountAhamoveHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ExternalAccountAhamoveHistory)
		m["id"] = data[0]
		m["owner_id"] = data[1]
		m["phone"] = data[2]
		m["name"] = data[3]
		m["external_verified"] = data[4]
		m["external_created_at"] = data[5]
		m["external_token"] = data[6]
		m["created_at"] = data[7]
		m["updated_at"] = data[8]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
