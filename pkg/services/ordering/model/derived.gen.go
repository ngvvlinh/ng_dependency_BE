// Code generated by goderive DO NOT EDIT.

package model

import (
	"database/sql"
	"time"

	sq "etop.vn/backend/pkg/common/sql"
	core "etop.vn/backend/pkg/common/sql/core"
	etop_vn_backend_pkg_services_catalog_model "etop.vn/backend/pkg/services/catalog/model"
)

type SQLWriter = core.SQLWriter

// Type Order represents table order
func sqlgenOrder(_ *Order) bool { return true }

type Orders []*Order

const __sqlOrder_Table = "order"
const __sqlOrder_ListCols = "\"id\",\"shop_id\",\"code\",\"ed_code\",\"product_ids\",\"variant_ids\",\"supplier_ids\",\"partner_id\",\"currency\",\"payment_method\",\"customer\",\"customer_address\",\"billing_address\",\"shipping_address\",\"customer_name\",\"customer_phone\",\"customer_email\",\"created_at\",\"processed_at\",\"updated_at\",\"closed_at\",\"confirmed_at\",\"cancelled_at\",\"cancel_reason\",\"customer_confirm\",\"external_confirm\",\"shop_confirm\",\"confirm_status\",\"fulfillment_shipping_status\",\"customer_payment_status\",\"etop_payment_status\",\"status\",\"fulfillment_shipping_states\",\"fulfillment_payment_statuses\",\"lines\",\"discounts\",\"total_items\",\"basket_value\",\"total_weight\",\"total_tax\",\"order_discount\",\"total_discount\",\"shop_shipping_fee\",\"total_fee\",\"fee_lines\",\"shop_cod\",\"total_amount\",\"order_note\",\"shop_note\",\"shipping_note\",\"order_source_type\",\"order_source_id\",\"external_order_id\",\"reference_url\",\"external_url\",\"shop_shipping\",\"is_outside_etop\",\"ghn_note_code\",\"try_on\",\"customer_name_norm\",\"product_name_norm\""
const __sqlOrder_Insert = "INSERT INTO \"order\" (" + __sqlOrder_ListCols + ") VALUES"
const __sqlOrder_Select = "SELECT " + __sqlOrder_ListCols + " FROM \"order\""
const __sqlOrder_Select_history = "SELECT " + __sqlOrder_ListCols + " FROM history.\"order\""
const __sqlOrder_UpdateAll = "UPDATE \"order\" SET (" + __sqlOrder_ListCols + ")"

func (m *Order) SQLTableName() string  { return "order" }
func (m *Orders) SQLTableName() string { return "order" }
func (m *Order) SQLListCols() string   { return __sqlOrder_ListCols }

func (m *Order) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ShopID),
		core.String(m.Code),
		core.String(m.EdCode),
		core.Array{m.ProductIDs, opts},
		core.Array{m.VariantIDs, opts},
		core.Array{m.SupplierIDs, opts},
		core.Int64(m.PartnerID),
		core.String(m.Currency),
		core.String(m.PaymentMethod),
		core.JSON{m.Customer},
		core.JSON{m.CustomerAddress},
		core.JSON{m.BillingAddress},
		core.JSON{m.ShippingAddress},
		core.String(m.CustomerName),
		core.String(m.CustomerPhone),
		core.String(m.CustomerEmail),
		core.Time(m.CreatedAt),
		core.Now(m.ProcessedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.ClosedAt),
		core.Time(m.ConfirmedAt),
		core.Time(m.CancelledAt),
		core.String(m.CancelReason),
		core.Int(m.CustomerConfirm),
		core.Int(m.ExternalConfirm),
		core.Int(m.ShopConfirm),
		core.Int(m.ConfirmStatus),
		core.Int(m.FulfillmentShippingStatus),
		core.Int(m.CustomerPaymentStatus),
		core.Int(m.EtopPaymentStatus),
		core.Int(m.Status),
		core.Array{m.FulfillmentShippingStates, opts},
		core.Array{m.FulfillmentPaymentStatuses, opts},
		core.JSON{m.Lines},
		core.JSON{m.Discounts},
		core.Int(m.TotalItems),
		core.Int(m.BasketValue),
		core.Int(m.TotalWeight),
		core.Int(m.TotalTax),
		core.Int(m.OrderDiscount),
		core.Int(m.TotalDiscount),
		core.Int(m.ShopShippingFee),
		core.Int(m.TotalFee),
		core.JSON{m.FeeLines},
		core.Int(m.ShopCOD),
		core.Int(m.TotalAmount),
		core.String(m.OrderNote),
		core.String(m.ShopNote),
		core.String(m.ShippingNote),
		core.String(m.OrderSourceType),
		core.Int64(m.OrderSourceID),
		core.String(m.ExternalOrderID),
		core.String(m.ReferenceURL),
		core.String(m.ExternalURL),
		core.JSON{m.ShopShipping},
		core.Bool(m.IsOutsideEtop),
		core.String(m.GhnNoteCode),
		core.String(m.TryOn),
		core.String(m.CustomerNameNorm),
		core.String(m.ProductNameNorm),
	}
}

func (m *Order) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ShopID),
		(*core.String)(&m.Code),
		(*core.String)(&m.EdCode),
		core.Array{&m.ProductIDs, opts},
		core.Array{&m.VariantIDs, opts},
		core.Array{&m.SupplierIDs, opts},
		(*core.Int64)(&m.PartnerID),
		(*core.String)(&m.Currency),
		(*core.String)(&m.PaymentMethod),
		core.JSON{&m.Customer},
		core.JSON{&m.CustomerAddress},
		core.JSON{&m.BillingAddress},
		core.JSON{&m.ShippingAddress},
		(*core.String)(&m.CustomerName),
		(*core.String)(&m.CustomerPhone),
		(*core.String)(&m.CustomerEmail),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.ProcessedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.ClosedAt),
		(*core.Time)(&m.ConfirmedAt),
		(*core.Time)(&m.CancelledAt),
		(*core.String)(&m.CancelReason),
		(*core.Int)(&m.CustomerConfirm),
		(*core.Int)(&m.ExternalConfirm),
		(*core.Int)(&m.ShopConfirm),
		(*core.Int)(&m.ConfirmStatus),
		(*core.Int)(&m.FulfillmentShippingStatus),
		(*core.Int)(&m.CustomerPaymentStatus),
		(*core.Int)(&m.EtopPaymentStatus),
		(*core.Int)(&m.Status),
		core.Array{&m.FulfillmentShippingStates, opts},
		core.Array{&m.FulfillmentPaymentStatuses, opts},
		core.JSON{&m.Lines},
		core.JSON{&m.Discounts},
		(*core.Int)(&m.TotalItems),
		(*core.Int)(&m.BasketValue),
		(*core.Int)(&m.TotalWeight),
		(*core.Int)(&m.TotalTax),
		(*core.Int)(&m.OrderDiscount),
		(*core.Int)(&m.TotalDiscount),
		(*core.Int)(&m.ShopShippingFee),
		(*core.Int)(&m.TotalFee),
		core.JSON{&m.FeeLines},
		(*core.Int)(&m.ShopCOD),
		(*core.Int)(&m.TotalAmount),
		(*core.String)(&m.OrderNote),
		(*core.String)(&m.ShopNote),
		(*core.String)(&m.ShippingNote),
		(*core.String)(&m.OrderSourceType),
		(*core.Int64)(&m.OrderSourceID),
		(*core.String)(&m.ExternalOrderID),
		(*core.String)(&m.ReferenceURL),
		(*core.String)(&m.ExternalURL),
		core.JSON{&m.ShopShipping},
		(*core.Bool)(&m.IsOutsideEtop),
		(*core.String)(&m.GhnNoteCode),
		(*core.String)(&m.TryOn),
		(*core.String)(&m.CustomerNameNorm),
		(*core.String)(&m.ProductNameNorm),
	}
}

func (m *Order) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Orders) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Orders, 0, 128)
	for rows.Next() {
		m := new(Order)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Order) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrder_Select)
	return nil
}

func (_ *Orders) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrder_Select)
	return nil
}

func (m *Order) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrder_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(61)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Orders) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrder_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(61)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Order) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("order")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.EdCode != "" {
		flag = true
		w.WriteName("ed_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdCode)
	}
	if m.ProductIDs != nil {
		flag = true
		w.WriteName("product_ids")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ProductIDs, opts})
	}
	if m.VariantIDs != nil {
		flag = true
		w.WriteName("variant_ids")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.VariantIDs, opts})
	}
	if m.SupplierIDs != nil {
		flag = true
		w.WriteName("supplier_ids")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.SupplierIDs, opts})
	}
	if m.PartnerID != 0 {
		flag = true
		w.WriteName("partner_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PartnerID)
	}
	if m.Currency != "" {
		flag = true
		w.WriteName("currency")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Currency)
	}
	if m.PaymentMethod != "" {
		flag = true
		w.WriteName("payment_method")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PaymentMethod)
	}
	if m.Customer != nil {
		flag = true
		w.WriteName("customer")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Customer})
	}
	if m.CustomerAddress != nil {
		flag = true
		w.WriteName("customer_address")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.CustomerAddress})
	}
	if m.BillingAddress != nil {
		flag = true
		w.WriteName("billing_address")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.BillingAddress})
	}
	if m.ShippingAddress != nil {
		flag = true
		w.WriteName("shipping_address")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ShippingAddress})
	}
	if m.CustomerName != "" {
		flag = true
		w.WriteName("customer_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CustomerName)
	}
	if m.CustomerPhone != "" {
		flag = true
		w.WriteName("customer_phone")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CustomerPhone)
	}
	if m.CustomerEmail != "" {
		flag = true
		w.WriteName("customer_email")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CustomerEmail)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.ProcessedAt.IsZero() {
		flag = true
		w.WriteName("processed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProcessedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.ClosedAt.IsZero() {
		flag = true
		w.WriteName("closed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ClosedAt)
	}
	if !m.ConfirmedAt.IsZero() {
		flag = true
		w.WriteName("confirmed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ConfirmedAt)
	}
	if !m.CancelledAt.IsZero() {
		flag = true
		w.WriteName("cancelled_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CancelledAt)
	}
	if m.CancelReason != "" {
		flag = true
		w.WriteName("cancel_reason")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CancelReason)
	}
	if m.CustomerConfirm != 0 {
		flag = true
		w.WriteName("customer_confirm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.CustomerConfirm))
	}
	if m.ExternalConfirm != 0 {
		flag = true
		w.WriteName("external_confirm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.ExternalConfirm))
	}
	if m.ShopConfirm != 0 {
		flag = true
		w.WriteName("shop_confirm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.ShopConfirm))
	}
	if m.ConfirmStatus != 0 {
		flag = true
		w.WriteName("confirm_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.ConfirmStatus))
	}
	if m.FulfillmentShippingStatus != 0 {
		flag = true
		w.WriteName("fulfillment_shipping_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.FulfillmentShippingStatus))
	}
	if m.CustomerPaymentStatus != 0 {
		flag = true
		w.WriteName("customer_payment_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.CustomerPaymentStatus))
	}
	if m.EtopPaymentStatus != 0 {
		flag = true
		w.WriteName("etop_payment_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.EtopPaymentStatus))
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if m.FulfillmentShippingStates != nil {
		flag = true
		w.WriteName("fulfillment_shipping_states")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.FulfillmentShippingStates, opts})
	}
	if m.FulfillmentPaymentStatuses != nil {
		flag = true
		w.WriteName("fulfillment_payment_statuses")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.FulfillmentPaymentStatuses, opts})
	}
	if m.Lines != nil {
		flag = true
		w.WriteName("lines")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Lines})
	}
	if m.Discounts != nil {
		flag = true
		w.WriteName("discounts")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Discounts})
	}
	if m.TotalItems != 0 {
		flag = true
		w.WriteName("total_items")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalItems)
	}
	if m.BasketValue != 0 {
		flag = true
		w.WriteName("basket_value")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.BasketValue)
	}
	if m.TotalWeight != 0 {
		flag = true
		w.WriteName("total_weight")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalWeight)
	}
	if m.TotalTax != 0 {
		flag = true
		w.WriteName("total_tax")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalTax)
	}
	if m.OrderDiscount != 0 {
		flag = true
		w.WriteName("order_discount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderDiscount)
	}
	if m.TotalDiscount != 0 {
		flag = true
		w.WriteName("total_discount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalDiscount)
	}
	if m.ShopShippingFee != 0 {
		flag = true
		w.WriteName("shop_shipping_fee")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopShippingFee)
	}
	if m.TotalFee != 0 {
		flag = true
		w.WriteName("total_fee")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalFee)
	}
	if m.FeeLines != nil {
		flag = true
		w.WriteName("fee_lines")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.FeeLines})
	}
	if m.ShopCOD != 0 {
		flag = true
		w.WriteName("shop_cod")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopCOD)
	}
	if m.TotalAmount != 0 {
		flag = true
		w.WriteName("total_amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalAmount)
	}
	if m.OrderNote != "" {
		flag = true
		w.WriteName("order_note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderNote)
	}
	if m.ShopNote != "" {
		flag = true
		w.WriteName("shop_note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopNote)
	}
	if m.ShippingNote != "" {
		flag = true
		w.WriteName("shipping_note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShippingNote)
	}
	if m.OrderSourceType != "" {
		flag = true
		w.WriteName("order_source_type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(string(m.OrderSourceType))
	}
	if m.OrderSourceID != 0 {
		flag = true
		w.WriteName("order_source_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderSourceID)
	}
	if m.ExternalOrderID != "" {
		flag = true
		w.WriteName("external_order_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalOrderID)
	}
	if m.ReferenceURL != "" {
		flag = true
		w.WriteName("reference_url")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ReferenceURL)
	}
	if m.ExternalURL != "" {
		flag = true
		w.WriteName("external_url")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalURL)
	}
	if m.ShopShipping != nil {
		flag = true
		w.WriteName("shop_shipping")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ShopShipping})
	}
	if m.IsOutsideEtop {
		flag = true
		w.WriteName("is_outside_etop")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.IsOutsideEtop)
	}
	if m.GhnNoteCode != "" {
		flag = true
		w.WriteName("ghn_note_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.GhnNoteCode)
	}
	if m.TryOn != "" {
		flag = true
		w.WriteName("try_on")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(string(m.TryOn))
	}
	if m.CustomerNameNorm != "" {
		flag = true
		w.WriteName("customer_name_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CustomerNameNorm)
	}
	if m.ProductNameNorm != "" {
		flag = true
		w.WriteName("product_name_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductNameNorm)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Order) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlOrder_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(61)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type OrderHistory map[string]interface{}
type OrderHistories []map[string]interface{}

func (m *OrderHistory) SQLTableName() string  { return "history.\"order\"" }
func (m OrderHistories) SQLTableName() string { return "history.\"order\"" }

func (m *OrderHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrder_Select_history)
	return nil
}

func (m OrderHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrder_Select_history)
	return nil
}

func (m OrderHistory) ID() core.Interface              { return core.Interface{m["id"]} }
func (m OrderHistory) ShopID() core.Interface          { return core.Interface{m["shop_id"]} }
func (m OrderHistory) Code() core.Interface            { return core.Interface{m["code"]} }
func (m OrderHistory) EdCode() core.Interface          { return core.Interface{m["ed_code"]} }
func (m OrderHistory) ProductIDs() core.Interface      { return core.Interface{m["product_ids"]} }
func (m OrderHistory) VariantIDs() core.Interface      { return core.Interface{m["variant_ids"]} }
func (m OrderHistory) SupplierIDs() core.Interface     { return core.Interface{m["supplier_ids"]} }
func (m OrderHistory) PartnerID() core.Interface       { return core.Interface{m["partner_id"]} }
func (m OrderHistory) Currency() core.Interface        { return core.Interface{m["currency"]} }
func (m OrderHistory) PaymentMethod() core.Interface   { return core.Interface{m["payment_method"]} }
func (m OrderHistory) Customer() core.Interface        { return core.Interface{m["customer"]} }
func (m OrderHistory) CustomerAddress() core.Interface { return core.Interface{m["customer_address"]} }
func (m OrderHistory) BillingAddress() core.Interface  { return core.Interface{m["billing_address"]} }
func (m OrderHistory) ShippingAddress() core.Interface { return core.Interface{m["shipping_address"]} }
func (m OrderHistory) CustomerName() core.Interface    { return core.Interface{m["customer_name"]} }
func (m OrderHistory) CustomerPhone() core.Interface   { return core.Interface{m["customer_phone"]} }
func (m OrderHistory) CustomerEmail() core.Interface   { return core.Interface{m["customer_email"]} }
func (m OrderHistory) CreatedAt() core.Interface       { return core.Interface{m["created_at"]} }
func (m OrderHistory) ProcessedAt() core.Interface     { return core.Interface{m["processed_at"]} }
func (m OrderHistory) UpdatedAt() core.Interface       { return core.Interface{m["updated_at"]} }
func (m OrderHistory) ClosedAt() core.Interface        { return core.Interface{m["closed_at"]} }
func (m OrderHistory) ConfirmedAt() core.Interface     { return core.Interface{m["confirmed_at"]} }
func (m OrderHistory) CancelledAt() core.Interface     { return core.Interface{m["cancelled_at"]} }
func (m OrderHistory) CancelReason() core.Interface    { return core.Interface{m["cancel_reason"]} }
func (m OrderHistory) CustomerConfirm() core.Interface { return core.Interface{m["customer_confirm"]} }
func (m OrderHistory) ExternalConfirm() core.Interface { return core.Interface{m["external_confirm"]} }
func (m OrderHistory) ShopConfirm() core.Interface     { return core.Interface{m["shop_confirm"]} }
func (m OrderHistory) ConfirmStatus() core.Interface   { return core.Interface{m["confirm_status"]} }
func (m OrderHistory) FulfillmentShippingStatus() core.Interface {
	return core.Interface{m["fulfillment_shipping_status"]}
}
func (m OrderHistory) CustomerPaymentStatus() core.Interface {
	return core.Interface{m["customer_payment_status"]}
}
func (m OrderHistory) EtopPaymentStatus() core.Interface {
	return core.Interface{m["etop_payment_status"]}
}
func (m OrderHistory) Status() core.Interface { return core.Interface{m["status"]} }
func (m OrderHistory) FulfillmentShippingStates() core.Interface {
	return core.Interface{m["fulfillment_shipping_states"]}
}
func (m OrderHistory) FulfillmentPaymentStatuses() core.Interface {
	return core.Interface{m["fulfillment_payment_statuses"]}
}
func (m OrderHistory) Lines() core.Interface           { return core.Interface{m["lines"]} }
func (m OrderHistory) Discounts() core.Interface       { return core.Interface{m["discounts"]} }
func (m OrderHistory) TotalItems() core.Interface      { return core.Interface{m["total_items"]} }
func (m OrderHistory) BasketValue() core.Interface     { return core.Interface{m["basket_value"]} }
func (m OrderHistory) TotalWeight() core.Interface     { return core.Interface{m["total_weight"]} }
func (m OrderHistory) TotalTax() core.Interface        { return core.Interface{m["total_tax"]} }
func (m OrderHistory) OrderDiscount() core.Interface   { return core.Interface{m["order_discount"]} }
func (m OrderHistory) TotalDiscount() core.Interface   { return core.Interface{m["total_discount"]} }
func (m OrderHistory) ShopShippingFee() core.Interface { return core.Interface{m["shop_shipping_fee"]} }
func (m OrderHistory) TotalFee() core.Interface        { return core.Interface{m["total_fee"]} }
func (m OrderHistory) FeeLines() core.Interface        { return core.Interface{m["fee_lines"]} }
func (m OrderHistory) ShopCOD() core.Interface         { return core.Interface{m["shop_cod"]} }
func (m OrderHistory) TotalAmount() core.Interface     { return core.Interface{m["total_amount"]} }
func (m OrderHistory) OrderNote() core.Interface       { return core.Interface{m["order_note"]} }
func (m OrderHistory) ShopNote() core.Interface        { return core.Interface{m["shop_note"]} }
func (m OrderHistory) ShippingNote() core.Interface    { return core.Interface{m["shipping_note"]} }
func (m OrderHistory) OrderSourceType() core.Interface { return core.Interface{m["order_source_type"]} }
func (m OrderHistory) OrderSourceID() core.Interface   { return core.Interface{m["order_source_id"]} }
func (m OrderHistory) ExternalOrderID() core.Interface { return core.Interface{m["external_order_id"]} }
func (m OrderHistory) ReferenceURL() core.Interface    { return core.Interface{m["reference_url"]} }
func (m OrderHistory) ExternalURL() core.Interface     { return core.Interface{m["external_url"]} }
func (m OrderHistory) ShopShipping() core.Interface    { return core.Interface{m["shop_shipping"]} }
func (m OrderHistory) IsOutsideEtop() core.Interface   { return core.Interface{m["is_outside_etop"]} }
func (m OrderHistory) GhnNoteCode() core.Interface     { return core.Interface{m["ghn_note_code"]} }
func (m OrderHistory) TryOn() core.Interface           { return core.Interface{m["try_on"]} }
func (m OrderHistory) CustomerNameNorm() core.Interface {
	return core.Interface{m["customer_name_norm"]}
}
func (m OrderHistory) ProductNameNorm() core.Interface { return core.Interface{m["product_name_norm"]} }

func (m *OrderHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 61)
	args := make([]interface{}, 61)
	for i := 0; i < 61; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(OrderHistory, 61)
	res["id"] = data[0]
	res["shop_id"] = data[1]
	res["code"] = data[2]
	res["ed_code"] = data[3]
	res["product_ids"] = data[4]
	res["variant_ids"] = data[5]
	res["supplier_ids"] = data[6]
	res["partner_id"] = data[7]
	res["currency"] = data[8]
	res["payment_method"] = data[9]
	res["customer"] = data[10]
	res["customer_address"] = data[11]
	res["billing_address"] = data[12]
	res["shipping_address"] = data[13]
	res["customer_name"] = data[14]
	res["customer_phone"] = data[15]
	res["customer_email"] = data[16]
	res["created_at"] = data[17]
	res["processed_at"] = data[18]
	res["updated_at"] = data[19]
	res["closed_at"] = data[20]
	res["confirmed_at"] = data[21]
	res["cancelled_at"] = data[22]
	res["cancel_reason"] = data[23]
	res["customer_confirm"] = data[24]
	res["external_confirm"] = data[25]
	res["shop_confirm"] = data[26]
	res["confirm_status"] = data[27]
	res["fulfillment_shipping_status"] = data[28]
	res["customer_payment_status"] = data[29]
	res["etop_payment_status"] = data[30]
	res["status"] = data[31]
	res["fulfillment_shipping_states"] = data[32]
	res["fulfillment_payment_statuses"] = data[33]
	res["lines"] = data[34]
	res["discounts"] = data[35]
	res["total_items"] = data[36]
	res["basket_value"] = data[37]
	res["total_weight"] = data[38]
	res["total_tax"] = data[39]
	res["order_discount"] = data[40]
	res["total_discount"] = data[41]
	res["shop_shipping_fee"] = data[42]
	res["total_fee"] = data[43]
	res["fee_lines"] = data[44]
	res["shop_cod"] = data[45]
	res["total_amount"] = data[46]
	res["order_note"] = data[47]
	res["shop_note"] = data[48]
	res["shipping_note"] = data[49]
	res["order_source_type"] = data[50]
	res["order_source_id"] = data[51]
	res["external_order_id"] = data[52]
	res["reference_url"] = data[53]
	res["external_url"] = data[54]
	res["shop_shipping"] = data[55]
	res["is_outside_etop"] = data[56]
	res["ghn_note_code"] = data[57]
	res["try_on"] = data[58]
	res["customer_name_norm"] = data[59]
	res["product_name_norm"] = data[60]
	*m = res
	return nil
}

func (ms *OrderHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 61)
	args := make([]interface{}, 61)
	for i := 0; i < 61; i++ {
		args[i] = &data[i]
	}
	res := make(OrderHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(OrderHistory)
		m["id"] = data[0]
		m["shop_id"] = data[1]
		m["code"] = data[2]
		m["ed_code"] = data[3]
		m["product_ids"] = data[4]
		m["variant_ids"] = data[5]
		m["supplier_ids"] = data[6]
		m["partner_id"] = data[7]
		m["currency"] = data[8]
		m["payment_method"] = data[9]
		m["customer"] = data[10]
		m["customer_address"] = data[11]
		m["billing_address"] = data[12]
		m["shipping_address"] = data[13]
		m["customer_name"] = data[14]
		m["customer_phone"] = data[15]
		m["customer_email"] = data[16]
		m["created_at"] = data[17]
		m["processed_at"] = data[18]
		m["updated_at"] = data[19]
		m["closed_at"] = data[20]
		m["confirmed_at"] = data[21]
		m["cancelled_at"] = data[22]
		m["cancel_reason"] = data[23]
		m["customer_confirm"] = data[24]
		m["external_confirm"] = data[25]
		m["shop_confirm"] = data[26]
		m["confirm_status"] = data[27]
		m["fulfillment_shipping_status"] = data[28]
		m["customer_payment_status"] = data[29]
		m["etop_payment_status"] = data[30]
		m["status"] = data[31]
		m["fulfillment_shipping_states"] = data[32]
		m["fulfillment_payment_statuses"] = data[33]
		m["lines"] = data[34]
		m["discounts"] = data[35]
		m["total_items"] = data[36]
		m["basket_value"] = data[37]
		m["total_weight"] = data[38]
		m["total_tax"] = data[39]
		m["order_discount"] = data[40]
		m["total_discount"] = data[41]
		m["shop_shipping_fee"] = data[42]
		m["total_fee"] = data[43]
		m["fee_lines"] = data[44]
		m["shop_cod"] = data[45]
		m["total_amount"] = data[46]
		m["order_note"] = data[47]
		m["shop_note"] = data[48]
		m["shipping_note"] = data[49]
		m["order_source_type"] = data[50]
		m["order_source_id"] = data[51]
		m["external_order_id"] = data[52]
		m["reference_url"] = data[53]
		m["external_url"] = data[54]
		m["shop_shipping"] = data[55]
		m["is_outside_etop"] = data[56]
		m["ghn_note_code"] = data[57]
		m["try_on"] = data[58]
		m["customer_name_norm"] = data[59]
		m["product_name_norm"] = data[60]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type OrderExternal represents table order_external
func sqlgenOrderExternal(_ *OrderExternal) bool { return true }

type OrderExternals []*OrderExternal

const __sqlOrderExternal_Table = "order_external"
const __sqlOrderExternal_ListCols = "\"id\",\"order_source_id\",\"external_order_source\",\"external_provider\",\"external_order_id\",\"external_order_code\",\"external_user_id\",\"external_customer_id\",\"external_created_at\",\"external_processed_at\",\"external_updated_at\",\"external_closed_at\",\"external_cancelled_at\",\"external_cancel_reason\",\"external_lines\",\"external_data\""
const __sqlOrderExternal_Insert = "INSERT INTO \"order_external\" (" + __sqlOrderExternal_ListCols + ") VALUES"
const __sqlOrderExternal_Select = "SELECT " + __sqlOrderExternal_ListCols + " FROM \"order_external\""
const __sqlOrderExternal_Select_history = "SELECT " + __sqlOrderExternal_ListCols + " FROM history.\"order_external\""
const __sqlOrderExternal_UpdateAll = "UPDATE \"order_external\" SET (" + __sqlOrderExternal_ListCols + ")"

func (m *OrderExternal) SQLTableName() string  { return "order_external" }
func (m *OrderExternals) SQLTableName() string { return "order_external" }
func (m *OrderExternal) SQLListCols() string   { return __sqlOrderExternal_ListCols }

func (m *OrderExternal) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.OrderSourceID),
		core.String(m.ExternalOrderSource),
		core.String(m.ExternalProvider),
		core.String(m.ExternalOrderID),
		core.String(m.ExternalOrderCode),
		core.String(m.ExternalUserID),
		core.String(m.ExternalCustomerID),
		core.Time(m.ExternalCreatedAt),
		core.Time(m.ExternalProcessedAt),
		core.Time(m.ExternalUpdatedAt),
		core.Time(m.ExternalClosedAt),
		core.Time(m.ExternalCancelledAt),
		core.String(m.ExternalCancelReason),
		core.JSON{m.ExternalLines},
		core.JSON{m.ExternalData},
	}
}

func (m *OrderExternal) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.OrderSourceID),
		(*core.String)(&m.ExternalOrderSource),
		(*core.String)(&m.ExternalProvider),
		(*core.String)(&m.ExternalOrderID),
		(*core.String)(&m.ExternalOrderCode),
		(*core.String)(&m.ExternalUserID),
		(*core.String)(&m.ExternalCustomerID),
		(*core.Time)(&m.ExternalCreatedAt),
		(*core.Time)(&m.ExternalProcessedAt),
		(*core.Time)(&m.ExternalUpdatedAt),
		(*core.Time)(&m.ExternalClosedAt),
		(*core.Time)(&m.ExternalCancelledAt),
		(*core.String)(&m.ExternalCancelReason),
		core.JSON{&m.ExternalLines},
		core.JSON{&m.ExternalData},
	}
}

func (m *OrderExternal) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *OrderExternals) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(OrderExternals, 0, 128)
	for rows.Next() {
		m := new(OrderExternal)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *OrderExternal) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternal_Select)
	return nil
}

func (_ *OrderExternals) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternal_Select)
	return nil
}

func (m *OrderExternal) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternal_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(16)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms OrderExternals) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternal_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(16)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *OrderExternal) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("order_external")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.OrderSourceID != 0 {
		flag = true
		w.WriteName("order_source_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderSourceID)
	}
	if m.ExternalOrderSource != "" {
		flag = true
		w.WriteName("external_order_source")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalOrderSource)
	}
	if m.ExternalProvider != "" {
		flag = true
		w.WriteName("external_provider")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalProvider)
	}
	if m.ExternalOrderID != "" {
		flag = true
		w.WriteName("external_order_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalOrderID)
	}
	if m.ExternalOrderCode != "" {
		flag = true
		w.WriteName("external_order_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalOrderCode)
	}
	if m.ExternalUserID != "" {
		flag = true
		w.WriteName("external_user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalUserID)
	}
	if m.ExternalCustomerID != "" {
		flag = true
		w.WriteName("external_customer_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCustomerID)
	}
	if !m.ExternalCreatedAt.IsZero() {
		flag = true
		w.WriteName("external_created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCreatedAt)
	}
	if !m.ExternalProcessedAt.IsZero() {
		flag = true
		w.WriteName("external_processed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalProcessedAt)
	}
	if !m.ExternalUpdatedAt.IsZero() {
		flag = true
		w.WriteName("external_updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalUpdatedAt)
	}
	if !m.ExternalClosedAt.IsZero() {
		flag = true
		w.WriteName("external_closed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalClosedAt)
	}
	if !m.ExternalCancelledAt.IsZero() {
		flag = true
		w.WriteName("external_cancelled_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCancelledAt)
	}
	if m.ExternalCancelReason != "" {
		flag = true
		w.WriteName("external_cancel_reason")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCancelReason)
	}
	if m.ExternalLines != nil {
		flag = true
		w.WriteName("external_lines")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalLines})
	}
	if m.ExternalData != nil {
		flag = true
		w.WriteName("external_data")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalData})
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *OrderExternal) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternal_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(16)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type OrderExternalHistory map[string]interface{}
type OrderExternalHistories []map[string]interface{}

func (m *OrderExternalHistory) SQLTableName() string  { return "history.\"order_external\"" }
func (m OrderExternalHistories) SQLTableName() string { return "history.\"order_external\"" }

func (m *OrderExternalHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternal_Select_history)
	return nil
}

func (m OrderExternalHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternal_Select_history)
	return nil
}

func (m OrderExternalHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m OrderExternalHistory) OrderSourceID() core.Interface {
	return core.Interface{m["order_source_id"]}
}
func (m OrderExternalHistory) ExternalOrderSource() core.Interface {
	return core.Interface{m["external_order_source"]}
}
func (m OrderExternalHistory) ExternalProvider() core.Interface {
	return core.Interface{m["external_provider"]}
}
func (m OrderExternalHistory) ExternalOrderID() core.Interface {
	return core.Interface{m["external_order_id"]}
}
func (m OrderExternalHistory) ExternalOrderCode() core.Interface {
	return core.Interface{m["external_order_code"]}
}
func (m OrderExternalHistory) ExternalUserID() core.Interface {
	return core.Interface{m["external_user_id"]}
}
func (m OrderExternalHistory) ExternalCustomerID() core.Interface {
	return core.Interface{m["external_customer_id"]}
}
func (m OrderExternalHistory) ExternalCreatedAt() core.Interface {
	return core.Interface{m["external_created_at"]}
}
func (m OrderExternalHistory) ExternalProcessedAt() core.Interface {
	return core.Interface{m["external_processed_at"]}
}
func (m OrderExternalHistory) ExternalUpdatedAt() core.Interface {
	return core.Interface{m["external_updated_at"]}
}
func (m OrderExternalHistory) ExternalClosedAt() core.Interface {
	return core.Interface{m["external_closed_at"]}
}
func (m OrderExternalHistory) ExternalCancelledAt() core.Interface {
	return core.Interface{m["external_cancelled_at"]}
}
func (m OrderExternalHistory) ExternalCancelReason() core.Interface {
	return core.Interface{m["external_cancel_reason"]}
}
func (m OrderExternalHistory) ExternalLines() core.Interface {
	return core.Interface{m["external_lines"]}
}
func (m OrderExternalHistory) ExternalData() core.Interface { return core.Interface{m["external_data"]} }

func (m *OrderExternalHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 16)
	args := make([]interface{}, 16)
	for i := 0; i < 16; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(OrderExternalHistory, 16)
	res["id"] = data[0]
	res["order_source_id"] = data[1]
	res["external_order_source"] = data[2]
	res["external_provider"] = data[3]
	res["external_order_id"] = data[4]
	res["external_order_code"] = data[5]
	res["external_user_id"] = data[6]
	res["external_customer_id"] = data[7]
	res["external_created_at"] = data[8]
	res["external_processed_at"] = data[9]
	res["external_updated_at"] = data[10]
	res["external_closed_at"] = data[11]
	res["external_cancelled_at"] = data[12]
	res["external_cancel_reason"] = data[13]
	res["external_lines"] = data[14]
	res["external_data"] = data[15]
	*m = res
	return nil
}

func (ms *OrderExternalHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 16)
	args := make([]interface{}, 16)
	for i := 0; i < 16; i++ {
		args[i] = &data[i]
	}
	res := make(OrderExternalHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(OrderExternalHistory)
		m["id"] = data[0]
		m["order_source_id"] = data[1]
		m["external_order_source"] = data[2]
		m["external_provider"] = data[3]
		m["external_order_id"] = data[4]
		m["external_order_code"] = data[5]
		m["external_user_id"] = data[6]
		m["external_customer_id"] = data[7]
		m["external_created_at"] = data[8]
		m["external_processed_at"] = data[9]
		m["external_updated_at"] = data[10]
		m["external_closed_at"] = data[11]
		m["external_cancelled_at"] = data[12]
		m["external_cancel_reason"] = data[13]
		m["external_lines"] = data[14]
		m["external_data"] = data[15]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// *OrderExternalCreateOrder is a substruct of *Order
func substructOrderExternalCreateOrder(_ *OrderExternalCreateOrder, _ *Order) bool { return true }

func OrderExternalCreateOrdersFromOrders(ps []*Order) []*OrderExternalCreateOrder {
	ss := make([]*OrderExternalCreateOrder, len(ps))
	for i, p := range ps {
		ss[i] = NewOrderExternalCreateOrderFromOrder(p)
	}
	return ss
}

func OrderExternalCreateOrdersToOrders(ss []*OrderExternalCreateOrder) []*Order {
	ps := make([]*Order, len(ss))
	for i, s := range ss {
		ps[i] = s.ToOrder()
	}
	return ps
}

func NewOrderExternalCreateOrderFromOrder(sp *Order) *OrderExternalCreateOrder {
	if sp == nil {
		return nil
	}
	s := new(OrderExternalCreateOrder)
	s.CopyFrom(sp)
	return s
}

func (s *OrderExternalCreateOrder) ToOrder() *Order {
	if s == nil {
		return nil
	}
	sp := new(Order)
	s.AssignTo(sp)
	return sp
}

func (s *OrderExternalCreateOrder) CopyFrom(sp *Order) {
	s.ShopID = sp.ShopID
	s.Code = sp.Code
	s.SupplierIDs = sp.SupplierIDs
	s.Currency = sp.Currency
	s.PaymentMethod = sp.PaymentMethod
	s.Customer = sp.Customer
	s.CustomerAddress = sp.CustomerAddress
	s.BillingAddress = sp.BillingAddress
	s.ShippingAddress = sp.ShippingAddress
	s.CustomerPhone = sp.CustomerPhone
	s.CustomerEmail = sp.CustomerEmail
	s.CreatedAt = sp.CreatedAt
	s.ProcessedAt = sp.ProcessedAt
	s.UpdatedAt = sp.UpdatedAt
	s.ClosedAt = sp.ClosedAt
	s.ConfirmedAt = sp.ConfirmedAt
	s.CancelledAt = sp.CancelledAt
	s.CancelReason = sp.CancelReason
	s.Lines = sp.Lines
	s.VariantIDs = sp.VariantIDs
	s.Discounts = sp.Discounts
	s.TotalItems = sp.TotalItems
	s.BasketValue = sp.BasketValue
	s.TotalWeight = sp.TotalWeight
	s.TotalTax = sp.TotalTax
	s.TotalDiscount = sp.TotalDiscount
	s.TotalAmount = sp.TotalAmount
	s.ShopCOD = sp.ShopCOD
	s.ExternalConfirm = sp.ExternalConfirm
	s.OrderSourceType = sp.OrderSourceType
	s.OrderSourceID = sp.OrderSourceID
	s.ExternalOrderID = sp.ExternalOrderID
	s.IsOutsideEtop = sp.IsOutsideEtop
}

func (s *OrderExternalCreateOrder) AssignTo(sp *Order) {
	sp.ShopID = s.ShopID
	sp.Code = s.Code
	sp.SupplierIDs = s.SupplierIDs
	sp.Currency = s.Currency
	sp.PaymentMethod = s.PaymentMethod
	sp.Customer = s.Customer
	sp.CustomerAddress = s.CustomerAddress
	sp.BillingAddress = s.BillingAddress
	sp.ShippingAddress = s.ShippingAddress
	sp.CustomerPhone = s.CustomerPhone
	sp.CustomerEmail = s.CustomerEmail
	sp.CreatedAt = s.CreatedAt
	sp.ProcessedAt = s.ProcessedAt
	sp.UpdatedAt = s.UpdatedAt
	sp.ClosedAt = s.ClosedAt
	sp.ConfirmedAt = s.ConfirmedAt
	sp.CancelledAt = s.CancelledAt
	sp.CancelReason = s.CancelReason
	sp.Lines = s.Lines
	sp.VariantIDs = s.VariantIDs
	sp.Discounts = s.Discounts
	sp.TotalItems = s.TotalItems
	sp.BasketValue = s.BasketValue
	sp.TotalWeight = s.TotalWeight
	sp.TotalTax = s.TotalTax
	sp.TotalDiscount = s.TotalDiscount
	sp.TotalAmount = s.TotalAmount
	sp.ShopCOD = s.ShopCOD
	sp.ExternalConfirm = s.ExternalConfirm
	sp.OrderSourceType = s.OrderSourceType
	sp.OrderSourceID = s.OrderSourceID
	sp.ExternalOrderID = s.ExternalOrderID
	sp.IsOutsideEtop = s.IsOutsideEtop
}

// Type OrderExternalCreateOrder represents table order
func sqlgenOrderExternalCreateOrder(_ *OrderExternalCreateOrder, _ *Order) bool { return true }

type OrderExternalCreateOrders []*OrderExternalCreateOrder

const __sqlOrderExternalCreateOrder_Table = "order"
const __sqlOrderExternalCreateOrder_ListCols = "\"shop_id\",\"code\",\"supplier_ids\",\"currency\",\"payment_method\",\"customer\",\"customer_address\",\"billing_address\",\"shipping_address\",\"customer_phone\",\"customer_email\",\"created_at\",\"processed_at\",\"updated_at\",\"closed_at\",\"confirmed_at\",\"cancelled_at\",\"cancel_reason\",\"lines\",\"variant_ids\",\"discounts\",\"total_items\",\"basket_value\",\"total_weight\",\"total_tax\",\"total_discount\",\"total_amount\",\"shop_cod\",\"external_confirm\",\"order_source_type\",\"order_source_id\",\"external_order_id\",\"is_outside_etop\""
const __sqlOrderExternalCreateOrder_Insert = "INSERT INTO \"order\" (" + __sqlOrderExternalCreateOrder_ListCols + ") VALUES"
const __sqlOrderExternalCreateOrder_Select = "SELECT " + __sqlOrderExternalCreateOrder_ListCols + " FROM \"order\""
const __sqlOrderExternalCreateOrder_Select_history = "SELECT " + __sqlOrderExternalCreateOrder_ListCols + " FROM history.\"order\""
const __sqlOrderExternalCreateOrder_UpdateAll = "UPDATE \"order\" SET (" + __sqlOrderExternalCreateOrder_ListCols + ")"

func (m *OrderExternalCreateOrder) SQLTableName() string  { return "order" }
func (m *OrderExternalCreateOrders) SQLTableName() string { return "order" }
func (m *OrderExternalCreateOrder) SQLListCols() string   { return __sqlOrderExternalCreateOrder_ListCols }

func (m *OrderExternalCreateOrder) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ShopID),
		core.String(m.Code),
		core.Array{m.SupplierIDs, opts},
		core.String(m.Currency),
		core.String(m.PaymentMethod),
		core.JSON{m.Customer},
		core.JSON{m.CustomerAddress},
		core.JSON{m.BillingAddress},
		core.JSON{m.ShippingAddress},
		core.String(m.CustomerPhone),
		core.String(m.CustomerEmail),
		core.Now(m.CreatedAt, now, create),
		core.Time(m.ProcessedAt),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.ClosedAt),
		core.Time(m.ConfirmedAt),
		core.Time(m.CancelledAt),
		core.String(m.CancelReason),
		core.JSON{m.Lines},
		core.Array{m.VariantIDs, opts},
		core.JSON{m.Discounts},
		core.Int(m.TotalItems),
		core.Int(m.BasketValue),
		core.Int(m.TotalWeight),
		core.Int(m.TotalTax),
		core.Int(m.TotalDiscount),
		core.Int(m.TotalAmount),
		core.Int(m.ShopCOD),
		core.Int(m.ExternalConfirm),
		core.String(m.OrderSourceType),
		core.Int64(m.OrderSourceID),
		core.String(m.ExternalOrderID),
		core.Bool(m.IsOutsideEtop),
	}
}

func (m *OrderExternalCreateOrder) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ShopID),
		(*core.String)(&m.Code),
		core.Array{&m.SupplierIDs, opts},
		(*core.String)(&m.Currency),
		(*core.String)(&m.PaymentMethod),
		core.JSON{&m.Customer},
		core.JSON{&m.CustomerAddress},
		core.JSON{&m.BillingAddress},
		core.JSON{&m.ShippingAddress},
		(*core.String)(&m.CustomerPhone),
		(*core.String)(&m.CustomerEmail),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.ProcessedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.ClosedAt),
		(*core.Time)(&m.ConfirmedAt),
		(*core.Time)(&m.CancelledAt),
		(*core.String)(&m.CancelReason),
		core.JSON{&m.Lines},
		core.Array{&m.VariantIDs, opts},
		core.JSON{&m.Discounts},
		(*core.Int)(&m.TotalItems),
		(*core.Int)(&m.BasketValue),
		(*core.Int)(&m.TotalWeight),
		(*core.Int)(&m.TotalTax),
		(*core.Int)(&m.TotalDiscount),
		(*core.Int)(&m.TotalAmount),
		(*core.Int)(&m.ShopCOD),
		(*core.Int)(&m.ExternalConfirm),
		(*core.String)(&m.OrderSourceType),
		(*core.Int64)(&m.OrderSourceID),
		(*core.String)(&m.ExternalOrderID),
		(*core.Bool)(&m.IsOutsideEtop),
	}
}

func (m *OrderExternalCreateOrder) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *OrderExternalCreateOrders) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(OrderExternalCreateOrders, 0, 128)
	for rows.Next() {
		m := new(OrderExternalCreateOrder)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *OrderExternalCreateOrder) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalCreateOrder_Select)
	return nil
}

func (_ *OrderExternalCreateOrders) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalCreateOrder_Select)
	return nil
}

func (m *OrderExternalCreateOrder) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalCreateOrder_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(33)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms OrderExternalCreateOrders) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalCreateOrder_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(33)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *OrderExternalCreateOrder) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("order")
	w.WriteRawString(" SET ")
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.SupplierIDs != nil {
		flag = true
		w.WriteName("supplier_ids")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.SupplierIDs, opts})
	}
	if m.Currency != "" {
		flag = true
		w.WriteName("currency")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Currency)
	}
	if m.PaymentMethod != "" {
		flag = true
		w.WriteName("payment_method")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PaymentMethod)
	}
	if m.Customer != nil {
		flag = true
		w.WriteName("customer")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Customer})
	}
	if m.CustomerAddress != nil {
		flag = true
		w.WriteName("customer_address")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.CustomerAddress})
	}
	if m.BillingAddress != nil {
		flag = true
		w.WriteName("billing_address")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.BillingAddress})
	}
	if m.ShippingAddress != nil {
		flag = true
		w.WriteName("shipping_address")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ShippingAddress})
	}
	if m.CustomerPhone != "" {
		flag = true
		w.WriteName("customer_phone")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CustomerPhone)
	}
	if m.CustomerEmail != "" {
		flag = true
		w.WriteName("customer_email")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CustomerEmail)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.ProcessedAt.IsZero() {
		flag = true
		w.WriteName("processed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProcessedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.ClosedAt.IsZero() {
		flag = true
		w.WriteName("closed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ClosedAt)
	}
	if !m.ConfirmedAt.IsZero() {
		flag = true
		w.WriteName("confirmed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ConfirmedAt)
	}
	if !m.CancelledAt.IsZero() {
		flag = true
		w.WriteName("cancelled_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CancelledAt)
	}
	if m.CancelReason != "" {
		flag = true
		w.WriteName("cancel_reason")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CancelReason)
	}
	if m.Lines != nil {
		flag = true
		w.WriteName("lines")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Lines})
	}
	if m.VariantIDs != nil {
		flag = true
		w.WriteName("variant_ids")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.VariantIDs, opts})
	}
	if m.Discounts != nil {
		flag = true
		w.WriteName("discounts")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Discounts})
	}
	if m.TotalItems != 0 {
		flag = true
		w.WriteName("total_items")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalItems)
	}
	if m.BasketValue != 0 {
		flag = true
		w.WriteName("basket_value")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.BasketValue)
	}
	if m.TotalWeight != 0 {
		flag = true
		w.WriteName("total_weight")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalWeight)
	}
	if m.TotalTax != 0 {
		flag = true
		w.WriteName("total_tax")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalTax)
	}
	if m.TotalDiscount != 0 {
		flag = true
		w.WriteName("total_discount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalDiscount)
	}
	if m.TotalAmount != 0 {
		flag = true
		w.WriteName("total_amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalAmount)
	}
	if m.ShopCOD != 0 {
		flag = true
		w.WriteName("shop_cod")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopCOD)
	}
	if m.ExternalConfirm != 0 {
		flag = true
		w.WriteName("external_confirm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.ExternalConfirm))
	}
	if m.OrderSourceType != "" {
		flag = true
		w.WriteName("order_source_type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(string(m.OrderSourceType))
	}
	if m.OrderSourceID != 0 {
		flag = true
		w.WriteName("order_source_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderSourceID)
	}
	if m.ExternalOrderID != "" {
		flag = true
		w.WriteName("external_order_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalOrderID)
	}
	if m.IsOutsideEtop {
		flag = true
		w.WriteName("is_outside_etop")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.IsOutsideEtop)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *OrderExternalCreateOrder) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalCreateOrder_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(33)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type OrderExternalCreateOrderHistory map[string]interface{}
type OrderExternalCreateOrderHistories []map[string]interface{}

func (m *OrderExternalCreateOrderHistory) SQLTableName() string  { return "history.\"order\"" }
func (m OrderExternalCreateOrderHistories) SQLTableName() string { return "history.\"order\"" }

func (m *OrderExternalCreateOrderHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalCreateOrder_Select_history)
	return nil
}

func (m OrderExternalCreateOrderHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalCreateOrder_Select_history)
	return nil
}

func (m OrderExternalCreateOrderHistory) ShopID() core.Interface { return core.Interface{m["shop_id"]} }
func (m OrderExternalCreateOrderHistory) Code() core.Interface   { return core.Interface{m["code"]} }
func (m OrderExternalCreateOrderHistory) SupplierIDs() core.Interface {
	return core.Interface{m["supplier_ids"]}
}
func (m OrderExternalCreateOrderHistory) Currency() core.Interface {
	return core.Interface{m["currency"]}
}
func (m OrderExternalCreateOrderHistory) PaymentMethod() core.Interface {
	return core.Interface{m["payment_method"]}
}
func (m OrderExternalCreateOrderHistory) Customer() core.Interface {
	return core.Interface{m["customer"]}
}
func (m OrderExternalCreateOrderHistory) CustomerAddress() core.Interface {
	return core.Interface{m["customer_address"]}
}
func (m OrderExternalCreateOrderHistory) BillingAddress() core.Interface {
	return core.Interface{m["billing_address"]}
}
func (m OrderExternalCreateOrderHistory) ShippingAddress() core.Interface {
	return core.Interface{m["shipping_address"]}
}
func (m OrderExternalCreateOrderHistory) CustomerPhone() core.Interface {
	return core.Interface{m["customer_phone"]}
}
func (m OrderExternalCreateOrderHistory) CustomerEmail() core.Interface {
	return core.Interface{m["customer_email"]}
}
func (m OrderExternalCreateOrderHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m OrderExternalCreateOrderHistory) ProcessedAt() core.Interface {
	return core.Interface{m["processed_at"]}
}
func (m OrderExternalCreateOrderHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}
func (m OrderExternalCreateOrderHistory) ClosedAt() core.Interface {
	return core.Interface{m["closed_at"]}
}
func (m OrderExternalCreateOrderHistory) ConfirmedAt() core.Interface {
	return core.Interface{m["confirmed_at"]}
}
func (m OrderExternalCreateOrderHistory) CancelledAt() core.Interface {
	return core.Interface{m["cancelled_at"]}
}
func (m OrderExternalCreateOrderHistory) CancelReason() core.Interface {
	return core.Interface{m["cancel_reason"]}
}
func (m OrderExternalCreateOrderHistory) Lines() core.Interface { return core.Interface{m["lines"]} }
func (m OrderExternalCreateOrderHistory) VariantIDs() core.Interface {
	return core.Interface{m["variant_ids"]}
}
func (m OrderExternalCreateOrderHistory) Discounts() core.Interface {
	return core.Interface{m["discounts"]}
}
func (m OrderExternalCreateOrderHistory) TotalItems() core.Interface {
	return core.Interface{m["total_items"]}
}
func (m OrderExternalCreateOrderHistory) BasketValue() core.Interface {
	return core.Interface{m["basket_value"]}
}
func (m OrderExternalCreateOrderHistory) TotalWeight() core.Interface {
	return core.Interface{m["total_weight"]}
}
func (m OrderExternalCreateOrderHistory) TotalTax() core.Interface {
	return core.Interface{m["total_tax"]}
}
func (m OrderExternalCreateOrderHistory) TotalDiscount() core.Interface {
	return core.Interface{m["total_discount"]}
}
func (m OrderExternalCreateOrderHistory) TotalAmount() core.Interface {
	return core.Interface{m["total_amount"]}
}
func (m OrderExternalCreateOrderHistory) ShopCOD() core.Interface {
	return core.Interface{m["shop_cod"]}
}
func (m OrderExternalCreateOrderHistory) ExternalConfirm() core.Interface {
	return core.Interface{m["external_confirm"]}
}
func (m OrderExternalCreateOrderHistory) OrderSourceType() core.Interface {
	return core.Interface{m["order_source_type"]}
}
func (m OrderExternalCreateOrderHistory) OrderSourceID() core.Interface {
	return core.Interface{m["order_source_id"]}
}
func (m OrderExternalCreateOrderHistory) ExternalOrderID() core.Interface {
	return core.Interface{m["external_order_id"]}
}
func (m OrderExternalCreateOrderHistory) IsOutsideEtop() core.Interface {
	return core.Interface{m["is_outside_etop"]}
}

func (m *OrderExternalCreateOrderHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 33)
	args := make([]interface{}, 33)
	for i := 0; i < 33; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(OrderExternalCreateOrderHistory, 33)
	res["shop_id"] = data[0]
	res["code"] = data[1]
	res["supplier_ids"] = data[2]
	res["currency"] = data[3]
	res["payment_method"] = data[4]
	res["customer"] = data[5]
	res["customer_address"] = data[6]
	res["billing_address"] = data[7]
	res["shipping_address"] = data[8]
	res["customer_phone"] = data[9]
	res["customer_email"] = data[10]
	res["created_at"] = data[11]
	res["processed_at"] = data[12]
	res["updated_at"] = data[13]
	res["closed_at"] = data[14]
	res["confirmed_at"] = data[15]
	res["cancelled_at"] = data[16]
	res["cancel_reason"] = data[17]
	res["lines"] = data[18]
	res["variant_ids"] = data[19]
	res["discounts"] = data[20]
	res["total_items"] = data[21]
	res["basket_value"] = data[22]
	res["total_weight"] = data[23]
	res["total_tax"] = data[24]
	res["total_discount"] = data[25]
	res["total_amount"] = data[26]
	res["shop_cod"] = data[27]
	res["external_confirm"] = data[28]
	res["order_source_type"] = data[29]
	res["order_source_id"] = data[30]
	res["external_order_id"] = data[31]
	res["is_outside_etop"] = data[32]
	*m = res
	return nil
}

func (ms *OrderExternalCreateOrderHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 33)
	args := make([]interface{}, 33)
	for i := 0; i < 33; i++ {
		args[i] = &data[i]
	}
	res := make(OrderExternalCreateOrderHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(OrderExternalCreateOrderHistory)
		m["shop_id"] = data[0]
		m["code"] = data[1]
		m["supplier_ids"] = data[2]
		m["currency"] = data[3]
		m["payment_method"] = data[4]
		m["customer"] = data[5]
		m["customer_address"] = data[6]
		m["billing_address"] = data[7]
		m["shipping_address"] = data[8]
		m["customer_phone"] = data[9]
		m["customer_email"] = data[10]
		m["created_at"] = data[11]
		m["processed_at"] = data[12]
		m["updated_at"] = data[13]
		m["closed_at"] = data[14]
		m["confirmed_at"] = data[15]
		m["cancelled_at"] = data[16]
		m["cancel_reason"] = data[17]
		m["lines"] = data[18]
		m["variant_ids"] = data[19]
		m["discounts"] = data[20]
		m["total_items"] = data[21]
		m["basket_value"] = data[22]
		m["total_weight"] = data[23]
		m["total_tax"] = data[24]
		m["total_discount"] = data[25]
		m["total_amount"] = data[26]
		m["shop_cod"] = data[27]
		m["external_confirm"] = data[28]
		m["order_source_type"] = data[29]
		m["order_source_id"] = data[30]
		m["external_order_id"] = data[31]
		m["is_outside_etop"] = data[32]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// *OrderExternalCreateExternal is a substruct of *OrderExternal
func substructOrderExternalCreateExternal(_ *OrderExternalCreateExternal, _ *OrderExternal) bool {
	return true
}

func OrderExternalCreateExternalsFromOrderExternals(ps []*OrderExternal) []*OrderExternalCreateExternal {
	ss := make([]*OrderExternalCreateExternal, len(ps))
	for i, p := range ps {
		ss[i] = NewOrderExternalCreateExternalFromOrderExternal(p)
	}
	return ss
}

func OrderExternalCreateExternalsToOrderExternals(ss []*OrderExternalCreateExternal) []*OrderExternal {
	ps := make([]*OrderExternal, len(ss))
	for i, s := range ss {
		ps[i] = s.ToOrderExternal()
	}
	return ps
}

func NewOrderExternalCreateExternalFromOrderExternal(sp *OrderExternal) *OrderExternalCreateExternal {
	if sp == nil {
		return nil
	}
	s := new(OrderExternalCreateExternal)
	s.CopyFrom(sp)
	return s
}

func (s *OrderExternalCreateExternal) ToOrderExternal() *OrderExternal {
	if s == nil {
		return nil
	}
	sp := new(OrderExternal)
	s.AssignTo(sp)
	return sp
}

func (s *OrderExternalCreateExternal) CopyFrom(sp *OrderExternal) {
	s.OrderSourceID = sp.OrderSourceID
	s.ExternalOrderSource = sp.ExternalOrderSource
	s.ExternalOrderID = sp.ExternalOrderID
	s.ExternalOrderCode = sp.ExternalOrderCode
	s.ExternalUserID = sp.ExternalUserID
	s.ExternalCustomerID = sp.ExternalCustomerID
	s.ExternalCreatedAt = sp.ExternalCreatedAt
	s.ExternalProcessedAt = sp.ExternalProcessedAt
	s.ExternalUpdatedAt = sp.ExternalUpdatedAt
	s.ExternalClosedAt = sp.ExternalClosedAt
	s.ExternalCancelledAt = sp.ExternalCancelledAt
	s.ExternalCancelReason = sp.ExternalCancelReason
	s.ExternalLines = sp.ExternalLines
	s.ExternalData = sp.ExternalData
}

func (s *OrderExternalCreateExternal) AssignTo(sp *OrderExternal) {
	sp.OrderSourceID = s.OrderSourceID
	sp.ExternalOrderSource = s.ExternalOrderSource
	sp.ExternalOrderID = s.ExternalOrderID
	sp.ExternalOrderCode = s.ExternalOrderCode
	sp.ExternalUserID = s.ExternalUserID
	sp.ExternalCustomerID = s.ExternalCustomerID
	sp.ExternalCreatedAt = s.ExternalCreatedAt
	sp.ExternalProcessedAt = s.ExternalProcessedAt
	sp.ExternalUpdatedAt = s.ExternalUpdatedAt
	sp.ExternalClosedAt = s.ExternalClosedAt
	sp.ExternalCancelledAt = s.ExternalCancelledAt
	sp.ExternalCancelReason = s.ExternalCancelReason
	sp.ExternalLines = s.ExternalLines
	sp.ExternalData = s.ExternalData
}

// Type OrderExternalCreateExternal represents table order_external
func sqlgenOrderExternalCreateExternal(_ *OrderExternalCreateExternal, _ *OrderExternal) bool {
	return true
}

type OrderExternalCreateExternals []*OrderExternalCreateExternal

const __sqlOrderExternalCreateExternal_Table = "order_external"
const __sqlOrderExternalCreateExternal_ListCols = "\"order_source_id\",\"external_order_source\",\"external_order_id\",\"external_order_code\",\"external_user_id\",\"external_customer_id\",\"external_created_at\",\"external_processed_at\",\"external_updated_at\",\"external_closed_at\",\"external_cancelled_at\",\"external_cancel_reason\",\"external_lines\",\"external_data\""
const __sqlOrderExternalCreateExternal_Insert = "INSERT INTO \"order_external\" (" + __sqlOrderExternalCreateExternal_ListCols + ") VALUES"
const __sqlOrderExternalCreateExternal_Select = "SELECT " + __sqlOrderExternalCreateExternal_ListCols + " FROM \"order_external\""
const __sqlOrderExternalCreateExternal_Select_history = "SELECT " + __sqlOrderExternalCreateExternal_ListCols + " FROM history.\"order_external\""
const __sqlOrderExternalCreateExternal_UpdateAll = "UPDATE \"order_external\" SET (" + __sqlOrderExternalCreateExternal_ListCols + ")"

func (m *OrderExternalCreateExternal) SQLTableName() string  { return "order_external" }
func (m *OrderExternalCreateExternals) SQLTableName() string { return "order_external" }
func (m *OrderExternalCreateExternal) SQLListCols() string {
	return __sqlOrderExternalCreateExternal_ListCols
}

func (m *OrderExternalCreateExternal) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.OrderSourceID),
		core.String(m.ExternalOrderSource),
		core.String(m.ExternalOrderID),
		core.String(m.ExternalOrderCode),
		core.String(m.ExternalUserID),
		core.String(m.ExternalCustomerID),
		core.Now(m.ExternalCreatedAt, now, create),
		core.Time(m.ExternalProcessedAt),
		core.Now(m.ExternalUpdatedAt, now, true),
		core.Time(m.ExternalClosedAt),
		core.Time(m.ExternalCancelledAt),
		core.String(m.ExternalCancelReason),
		core.JSON{m.ExternalLines},
		core.JSON{m.ExternalData},
	}
}

func (m *OrderExternalCreateExternal) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.OrderSourceID),
		(*core.String)(&m.ExternalOrderSource),
		(*core.String)(&m.ExternalOrderID),
		(*core.String)(&m.ExternalOrderCode),
		(*core.String)(&m.ExternalUserID),
		(*core.String)(&m.ExternalCustomerID),
		(*core.Time)(&m.ExternalCreatedAt),
		(*core.Time)(&m.ExternalProcessedAt),
		(*core.Time)(&m.ExternalUpdatedAt),
		(*core.Time)(&m.ExternalClosedAt),
		(*core.Time)(&m.ExternalCancelledAt),
		(*core.String)(&m.ExternalCancelReason),
		core.JSON{&m.ExternalLines},
		core.JSON{&m.ExternalData},
	}
}

func (m *OrderExternalCreateExternal) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *OrderExternalCreateExternals) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(OrderExternalCreateExternals, 0, 128)
	for rows.Next() {
		m := new(OrderExternalCreateExternal)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *OrderExternalCreateExternal) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalCreateExternal_Select)
	return nil
}

func (_ *OrderExternalCreateExternals) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalCreateExternal_Select)
	return nil
}

func (m *OrderExternalCreateExternal) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalCreateExternal_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms OrderExternalCreateExternals) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalCreateExternal_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(14)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *OrderExternalCreateExternal) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("order_external")
	w.WriteRawString(" SET ")
	if m.OrderSourceID != 0 {
		flag = true
		w.WriteName("order_source_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderSourceID)
	}
	if m.ExternalOrderSource != "" {
		flag = true
		w.WriteName("external_order_source")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalOrderSource)
	}
	if m.ExternalOrderID != "" {
		flag = true
		w.WriteName("external_order_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalOrderID)
	}
	if m.ExternalOrderCode != "" {
		flag = true
		w.WriteName("external_order_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalOrderCode)
	}
	if m.ExternalUserID != "" {
		flag = true
		w.WriteName("external_user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalUserID)
	}
	if m.ExternalCustomerID != "" {
		flag = true
		w.WriteName("external_customer_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCustomerID)
	}
	if !m.ExternalCreatedAt.IsZero() {
		flag = true
		w.WriteName("external_created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCreatedAt)
	}
	if !m.ExternalProcessedAt.IsZero() {
		flag = true
		w.WriteName("external_processed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalProcessedAt)
	}
	if !m.ExternalUpdatedAt.IsZero() {
		flag = true
		w.WriteName("external_updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.ExternalUpdatedAt, time.Now(), true))
	}
	if !m.ExternalClosedAt.IsZero() {
		flag = true
		w.WriteName("external_closed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalClosedAt)
	}
	if !m.ExternalCancelledAt.IsZero() {
		flag = true
		w.WriteName("external_cancelled_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCancelledAt)
	}
	if m.ExternalCancelReason != "" {
		flag = true
		w.WriteName("external_cancel_reason")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCancelReason)
	}
	if m.ExternalLines != nil {
		flag = true
		w.WriteName("external_lines")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalLines})
	}
	if m.ExternalData != nil {
		flag = true
		w.WriteName("external_data")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalData})
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *OrderExternalCreateExternal) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalCreateExternal_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type OrderExternalCreateExternalHistory map[string]interface{}
type OrderExternalCreateExternalHistories []map[string]interface{}

func (m *OrderExternalCreateExternalHistory) SQLTableName() string {
	return "history.\"order_external\""
}
func (m OrderExternalCreateExternalHistories) SQLTableName() string {
	return "history.\"order_external\""
}

func (m *OrderExternalCreateExternalHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalCreateExternal_Select_history)
	return nil
}

func (m OrderExternalCreateExternalHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalCreateExternal_Select_history)
	return nil
}

func (m OrderExternalCreateExternalHistory) OrderSourceID() core.Interface {
	return core.Interface{m["order_source_id"]}
}
func (m OrderExternalCreateExternalHistory) ExternalOrderSource() core.Interface {
	return core.Interface{m["external_order_source"]}
}
func (m OrderExternalCreateExternalHistory) ExternalOrderID() core.Interface {
	return core.Interface{m["external_order_id"]}
}
func (m OrderExternalCreateExternalHistory) ExternalOrderCode() core.Interface {
	return core.Interface{m["external_order_code"]}
}
func (m OrderExternalCreateExternalHistory) ExternalUserID() core.Interface {
	return core.Interface{m["external_user_id"]}
}
func (m OrderExternalCreateExternalHistory) ExternalCustomerID() core.Interface {
	return core.Interface{m["external_customer_id"]}
}
func (m OrderExternalCreateExternalHistory) ExternalCreatedAt() core.Interface {
	return core.Interface{m["external_created_at"]}
}
func (m OrderExternalCreateExternalHistory) ExternalProcessedAt() core.Interface {
	return core.Interface{m["external_processed_at"]}
}
func (m OrderExternalCreateExternalHistory) ExternalUpdatedAt() core.Interface {
	return core.Interface{m["external_updated_at"]}
}
func (m OrderExternalCreateExternalHistory) ExternalClosedAt() core.Interface {
	return core.Interface{m["external_closed_at"]}
}
func (m OrderExternalCreateExternalHistory) ExternalCancelledAt() core.Interface {
	return core.Interface{m["external_cancelled_at"]}
}
func (m OrderExternalCreateExternalHistory) ExternalCancelReason() core.Interface {
	return core.Interface{m["external_cancel_reason"]}
}
func (m OrderExternalCreateExternalHistory) ExternalLines() core.Interface {
	return core.Interface{m["external_lines"]}
}
func (m OrderExternalCreateExternalHistory) ExternalData() core.Interface {
	return core.Interface{m["external_data"]}
}

func (m *OrderExternalCreateExternalHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(OrderExternalCreateExternalHistory, 14)
	res["order_source_id"] = data[0]
	res["external_order_source"] = data[1]
	res["external_order_id"] = data[2]
	res["external_order_code"] = data[3]
	res["external_user_id"] = data[4]
	res["external_customer_id"] = data[5]
	res["external_created_at"] = data[6]
	res["external_processed_at"] = data[7]
	res["external_updated_at"] = data[8]
	res["external_closed_at"] = data[9]
	res["external_cancelled_at"] = data[10]
	res["external_cancel_reason"] = data[11]
	res["external_lines"] = data[12]
	res["external_data"] = data[13]
	*m = res
	return nil
}

func (ms *OrderExternalCreateExternalHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	res := make(OrderExternalCreateExternalHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(OrderExternalCreateExternalHistory)
		m["order_source_id"] = data[0]
		m["external_order_source"] = data[1]
		m["external_order_id"] = data[2]
		m["external_order_code"] = data[3]
		m["external_user_id"] = data[4]
		m["external_customer_id"] = data[5]
		m["external_created_at"] = data[6]
		m["external_processed_at"] = data[7]
		m["external_updated_at"] = data[8]
		m["external_closed_at"] = data[9]
		m["external_cancelled_at"] = data[10]
		m["external_cancel_reason"] = data[11]
		m["external_lines"] = data[12]
		m["external_data"] = data[13]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// *OrderExternalUpdateOrder is a substruct of *Order
func substructOrderExternalUpdateOrder(_ *OrderExternalUpdateOrder, _ *Order) bool { return true }

func OrderExternalUpdateOrdersFromOrders(ps []*Order) []*OrderExternalUpdateOrder {
	ss := make([]*OrderExternalUpdateOrder, len(ps))
	for i, p := range ps {
		ss[i] = NewOrderExternalUpdateOrderFromOrder(p)
	}
	return ss
}

func OrderExternalUpdateOrdersToOrders(ss []*OrderExternalUpdateOrder) []*Order {
	ps := make([]*Order, len(ss))
	for i, s := range ss {
		ps[i] = s.ToOrder()
	}
	return ps
}

func NewOrderExternalUpdateOrderFromOrder(sp *Order) *OrderExternalUpdateOrder {
	if sp == nil {
		return nil
	}
	s := new(OrderExternalUpdateOrder)
	s.CopyFrom(sp)
	return s
}

func (s *OrderExternalUpdateOrder) ToOrder() *Order {
	if s == nil {
		return nil
	}
	sp := new(Order)
	s.AssignTo(sp)
	return sp
}

func (s *OrderExternalUpdateOrder) CopyFrom(sp *Order) {
	s.UpdatedAt = sp.UpdatedAt
	s.ClosedAt = sp.ClosedAt
	s.CancelledAt = sp.CancelledAt
	s.CancelReason = sp.CancelReason
	s.ExternalConfirm = sp.ExternalConfirm
}

func (s *OrderExternalUpdateOrder) AssignTo(sp *Order) {
	sp.UpdatedAt = s.UpdatedAt
	sp.ClosedAt = s.ClosedAt
	sp.CancelledAt = s.CancelledAt
	sp.CancelReason = s.CancelReason
	sp.ExternalConfirm = s.ExternalConfirm
}

// Type OrderExternalUpdateOrder represents table order
func sqlgenOrderExternalUpdateOrder(_ *OrderExternalUpdateOrder, _ *Order) bool { return true }

type OrderExternalUpdateOrders []*OrderExternalUpdateOrder

const __sqlOrderExternalUpdateOrder_Table = "order"
const __sqlOrderExternalUpdateOrder_ListCols = "\"updated_at\",\"closed_at\",\"cancelled_at\",\"cancel_reason\",\"external_confirm\""
const __sqlOrderExternalUpdateOrder_Insert = "INSERT INTO \"order\" (" + __sqlOrderExternalUpdateOrder_ListCols + ") VALUES"
const __sqlOrderExternalUpdateOrder_Select = "SELECT " + __sqlOrderExternalUpdateOrder_ListCols + " FROM \"order\""
const __sqlOrderExternalUpdateOrder_Select_history = "SELECT " + __sqlOrderExternalUpdateOrder_ListCols + " FROM history.\"order\""
const __sqlOrderExternalUpdateOrder_UpdateAll = "UPDATE \"order\" SET (" + __sqlOrderExternalUpdateOrder_ListCols + ")"

func (m *OrderExternalUpdateOrder) SQLTableName() string  { return "order" }
func (m *OrderExternalUpdateOrders) SQLTableName() string { return "order" }
func (m *OrderExternalUpdateOrder) SQLListCols() string   { return __sqlOrderExternalUpdateOrder_ListCols }

func (m *OrderExternalUpdateOrder) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.ClosedAt),
		core.Time(m.CancelledAt),
		core.String(m.CancelReason),
		core.Int(m.ExternalConfirm),
	}
}

func (m *OrderExternalUpdateOrder) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.ClosedAt),
		(*core.Time)(&m.CancelledAt),
		(*core.String)(&m.CancelReason),
		(*core.Int)(&m.ExternalConfirm),
	}
}

func (m *OrderExternalUpdateOrder) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *OrderExternalUpdateOrders) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(OrderExternalUpdateOrders, 0, 128)
	for rows.Next() {
		m := new(OrderExternalUpdateOrder)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *OrderExternalUpdateOrder) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalUpdateOrder_Select)
	return nil
}

func (_ *OrderExternalUpdateOrders) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalUpdateOrder_Select)
	return nil
}

func (m *OrderExternalUpdateOrder) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalUpdateOrder_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(5)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms OrderExternalUpdateOrders) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalUpdateOrder_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(5)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *OrderExternalUpdateOrder) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("order")
	w.WriteRawString(" SET ")
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.ClosedAt.IsZero() {
		flag = true
		w.WriteName("closed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ClosedAt)
	}
	if !m.CancelledAt.IsZero() {
		flag = true
		w.WriteName("cancelled_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CancelledAt)
	}
	if m.CancelReason != "" {
		flag = true
		w.WriteName("cancel_reason")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CancelReason)
	}
	if m.ExternalConfirm != 0 {
		flag = true
		w.WriteName("external_confirm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.ExternalConfirm))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *OrderExternalUpdateOrder) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalUpdateOrder_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(5)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type OrderExternalUpdateOrderHistory map[string]interface{}
type OrderExternalUpdateOrderHistories []map[string]interface{}

func (m *OrderExternalUpdateOrderHistory) SQLTableName() string  { return "history.\"order\"" }
func (m OrderExternalUpdateOrderHistories) SQLTableName() string { return "history.\"order\"" }

func (m *OrderExternalUpdateOrderHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalUpdateOrder_Select_history)
	return nil
}

func (m OrderExternalUpdateOrderHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalUpdateOrder_Select_history)
	return nil
}

func (m OrderExternalUpdateOrderHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}
func (m OrderExternalUpdateOrderHistory) ClosedAt() core.Interface {
	return core.Interface{m["closed_at"]}
}
func (m OrderExternalUpdateOrderHistory) CancelledAt() core.Interface {
	return core.Interface{m["cancelled_at"]}
}
func (m OrderExternalUpdateOrderHistory) CancelReason() core.Interface {
	return core.Interface{m["cancel_reason"]}
}
func (m OrderExternalUpdateOrderHistory) ExternalConfirm() core.Interface {
	return core.Interface{m["external_confirm"]}
}

func (m *OrderExternalUpdateOrderHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 5)
	args := make([]interface{}, 5)
	for i := 0; i < 5; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(OrderExternalUpdateOrderHistory, 5)
	res["updated_at"] = data[0]
	res["closed_at"] = data[1]
	res["cancelled_at"] = data[2]
	res["cancel_reason"] = data[3]
	res["external_confirm"] = data[4]
	*m = res
	return nil
}

func (ms *OrderExternalUpdateOrderHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 5)
	args := make([]interface{}, 5)
	for i := 0; i < 5; i++ {
		args[i] = &data[i]
	}
	res := make(OrderExternalUpdateOrderHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(OrderExternalUpdateOrderHistory)
		m["updated_at"] = data[0]
		m["closed_at"] = data[1]
		m["cancelled_at"] = data[2]
		m["cancel_reason"] = data[3]
		m["external_confirm"] = data[4]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// *OrderExternalUpdateExternal is a substruct of *OrderExternal
func substructOrderExternalUpdateExternal(_ *OrderExternalUpdateExternal, _ *OrderExternal) bool {
	return true
}

func OrderExternalUpdateExternalsFromOrderExternals(ps []*OrderExternal) []*OrderExternalUpdateExternal {
	ss := make([]*OrderExternalUpdateExternal, len(ps))
	for i, p := range ps {
		ss[i] = NewOrderExternalUpdateExternalFromOrderExternal(p)
	}
	return ss
}

func OrderExternalUpdateExternalsToOrderExternals(ss []*OrderExternalUpdateExternal) []*OrderExternal {
	ps := make([]*OrderExternal, len(ss))
	for i, s := range ss {
		ps[i] = s.ToOrderExternal()
	}
	return ps
}

func NewOrderExternalUpdateExternalFromOrderExternal(sp *OrderExternal) *OrderExternalUpdateExternal {
	if sp == nil {
		return nil
	}
	s := new(OrderExternalUpdateExternal)
	s.CopyFrom(sp)
	return s
}

func (s *OrderExternalUpdateExternal) ToOrderExternal() *OrderExternal {
	if s == nil {
		return nil
	}
	sp := new(OrderExternal)
	s.AssignTo(sp)
	return sp
}

func (s *OrderExternalUpdateExternal) CopyFrom(sp *OrderExternal) {
	s.ExternalUpdatedAt = sp.ExternalUpdatedAt
	s.ExternalCancelledAt = sp.ExternalCancelledAt
	s.ExternalCancelReason = sp.ExternalCancelReason
}

func (s *OrderExternalUpdateExternal) AssignTo(sp *OrderExternal) {
	sp.ExternalUpdatedAt = s.ExternalUpdatedAt
	sp.ExternalCancelledAt = s.ExternalCancelledAt
	sp.ExternalCancelReason = s.ExternalCancelReason
}

// Type OrderExternalUpdateExternal represents table order_external
func sqlgenOrderExternalUpdateExternal(_ *OrderExternalUpdateExternal, _ *OrderExternal) bool {
	return true
}

type OrderExternalUpdateExternals []*OrderExternalUpdateExternal

const __sqlOrderExternalUpdateExternal_Table = "order_external"
const __sqlOrderExternalUpdateExternal_ListCols = "\"external_updated_at\",\"external_cancelled_at\",\"external_cancel_reason\""
const __sqlOrderExternalUpdateExternal_Insert = "INSERT INTO \"order_external\" (" + __sqlOrderExternalUpdateExternal_ListCols + ") VALUES"
const __sqlOrderExternalUpdateExternal_Select = "SELECT " + __sqlOrderExternalUpdateExternal_ListCols + " FROM \"order_external\""
const __sqlOrderExternalUpdateExternal_Select_history = "SELECT " + __sqlOrderExternalUpdateExternal_ListCols + " FROM history.\"order_external\""
const __sqlOrderExternalUpdateExternal_UpdateAll = "UPDATE \"order_external\" SET (" + __sqlOrderExternalUpdateExternal_ListCols + ")"

func (m *OrderExternalUpdateExternal) SQLTableName() string  { return "order_external" }
func (m *OrderExternalUpdateExternals) SQLTableName() string { return "order_external" }
func (m *OrderExternalUpdateExternal) SQLListCols() string {
	return __sqlOrderExternalUpdateExternal_ListCols
}

func (m *OrderExternalUpdateExternal) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Now(m.ExternalUpdatedAt, now, true),
		core.Time(m.ExternalCancelledAt),
		core.String(m.ExternalCancelReason),
	}
}

func (m *OrderExternalUpdateExternal) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Time)(&m.ExternalUpdatedAt),
		(*core.Time)(&m.ExternalCancelledAt),
		(*core.String)(&m.ExternalCancelReason),
	}
}

func (m *OrderExternalUpdateExternal) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *OrderExternalUpdateExternals) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(OrderExternalUpdateExternals, 0, 128)
	for rows.Next() {
		m := new(OrderExternalUpdateExternal)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *OrderExternalUpdateExternal) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalUpdateExternal_Select)
	return nil
}

func (_ *OrderExternalUpdateExternals) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalUpdateExternal_Select)
	return nil
}

func (m *OrderExternalUpdateExternal) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalUpdateExternal_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(3)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms OrderExternalUpdateExternals) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalUpdateExternal_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(3)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *OrderExternalUpdateExternal) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("order_external")
	w.WriteRawString(" SET ")
	if !m.ExternalUpdatedAt.IsZero() {
		flag = true
		w.WriteName("external_updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.ExternalUpdatedAt, time.Now(), true))
	}
	if !m.ExternalCancelledAt.IsZero() {
		flag = true
		w.WriteName("external_cancelled_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCancelledAt)
	}
	if m.ExternalCancelReason != "" {
		flag = true
		w.WriteName("external_cancel_reason")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCancelReason)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *OrderExternalUpdateExternal) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalUpdateExternal_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(3)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type OrderExternalUpdateExternalHistory map[string]interface{}
type OrderExternalUpdateExternalHistories []map[string]interface{}

func (m *OrderExternalUpdateExternalHistory) SQLTableName() string {
	return "history.\"order_external\""
}
func (m OrderExternalUpdateExternalHistories) SQLTableName() string {
	return "history.\"order_external\""
}

func (m *OrderExternalUpdateExternalHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalUpdateExternal_Select_history)
	return nil
}

func (m OrderExternalUpdateExternalHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderExternalUpdateExternal_Select_history)
	return nil
}

func (m OrderExternalUpdateExternalHistory) ExternalUpdatedAt() core.Interface {
	return core.Interface{m["external_updated_at"]}
}
func (m OrderExternalUpdateExternalHistory) ExternalCancelledAt() core.Interface {
	return core.Interface{m["external_cancelled_at"]}
}
func (m OrderExternalUpdateExternalHistory) ExternalCancelReason() core.Interface {
	return core.Interface{m["external_cancel_reason"]}
}

func (m *OrderExternalUpdateExternalHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 3)
	args := make([]interface{}, 3)
	for i := 0; i < 3; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(OrderExternalUpdateExternalHistory, 3)
	res["external_updated_at"] = data[0]
	res["external_cancelled_at"] = data[1]
	res["external_cancel_reason"] = data[2]
	*m = res
	return nil
}

func (ms *OrderExternalUpdateExternalHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 3)
	args := make([]interface{}, 3)
	for i := 0; i < 3; i++ {
		args[i] = &data[i]
	}
	res := make(OrderExternalUpdateExternalHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(OrderExternalUpdateExternalHistory)
		m["external_updated_at"] = data[0]
		m["external_cancelled_at"] = data[1]
		m["external_cancel_reason"] = data[2]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type OrderLine represents table order_line
func sqlgenOrderLine(_ *OrderLine) bool { return true }

type OrderLines []*OrderLine

const __sqlOrderLine_Table = "order_line"
const __sqlOrderLine_ListCols = "\"order_id\",\"variant_id\",\"product_name\",\"product_id\",\"supplier_id\",\"shop_id\",\"external_variant_id\",\"external_supplier_order_id\",\"supplier_name\",\"updated_at\",\"closed_at\",\"confirmed_at\",\"cancelled_at\",\"cancel_reason\",\"supplier_confirm\",\"status\",\"weight\",\"quantity\",\"wholesale_price_0\",\"wholesale_price\",\"list_price\",\"retail_price\",\"payment_price\",\"line_amount\",\"total_discount\",\"total_line_amount\",\"requires_shipping\",\"image_url\",\"is_outside_etop\",\"code\""
const __sqlOrderLine_Insert = "INSERT INTO \"order_line\" (" + __sqlOrderLine_ListCols + ") VALUES"
const __sqlOrderLine_Select = "SELECT " + __sqlOrderLine_ListCols + " FROM \"order_line\""
const __sqlOrderLine_Select_history = "SELECT " + __sqlOrderLine_ListCols + " FROM history.\"order_line\""
const __sqlOrderLine_UpdateAll = "UPDATE \"order_line\" SET (" + __sqlOrderLine_ListCols + ")"

func (m *OrderLine) SQLTableName() string  { return "order_line" }
func (m *OrderLines) SQLTableName() string { return "order_line" }
func (m *OrderLine) SQLListCols() string   { return __sqlOrderLine_ListCols }

func (m *OrderLine) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.Int64(m.OrderID),
		core.Int64(m.VariantID),
		core.String(m.ProductName),
		core.Int64(m.ProductID),
		core.Int64(m.SupplierID),
		core.Int64(m.ShopID),
		core.String(m.ExternalVariantID),
		core.String(m.ExternalSupplierOrderID),
		core.String(m.SupplierName),
		core.Time(m.UpdatedAt),
		core.Time(m.ClosedAt),
		core.Time(m.ConfirmedAt),
		core.Time(m.CancelledAt),
		core.String(m.CancelReason),
		core.Int(m.SupplierConfirm),
		core.Int(m.Status),
		core.Int(m.Weight),
		core.Int(m.Quantity),
		core.Int(m.WholesalePrice0),
		core.Int(m.WholesalePrice),
		core.Int(m.ListPrice),
		core.Int(m.RetailPrice),
		core.Int(m.PaymentPrice),
		core.Int(m.LineAmount),
		core.Int(m.TotalDiscount),
		core.Int(m.TotalLineAmount),
		core.Bool(m.RequiresShipping),
		core.String(m.ImageURL),
		core.Bool(m.IsOutsideEtop),
		core.String(m.Code),
	}
}

func (m *OrderLine) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.OrderID),
		(*core.Int64)(&m.VariantID),
		(*core.String)(&m.ProductName),
		(*core.Int64)(&m.ProductID),
		(*core.Int64)(&m.SupplierID),
		(*core.Int64)(&m.ShopID),
		(*core.String)(&m.ExternalVariantID),
		(*core.String)(&m.ExternalSupplierOrderID),
		(*core.String)(&m.SupplierName),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.ClosedAt),
		(*core.Time)(&m.ConfirmedAt),
		(*core.Time)(&m.CancelledAt),
		(*core.String)(&m.CancelReason),
		(*core.Int)(&m.SupplierConfirm),
		(*core.Int)(&m.Status),
		(*core.Int)(&m.Weight),
		(*core.Int)(&m.Quantity),
		(*core.Int)(&m.WholesalePrice0),
		(*core.Int)(&m.WholesalePrice),
		(*core.Int)(&m.ListPrice),
		(*core.Int)(&m.RetailPrice),
		(*core.Int)(&m.PaymentPrice),
		(*core.Int)(&m.LineAmount),
		(*core.Int)(&m.TotalDiscount),
		(*core.Int)(&m.TotalLineAmount),
		(*core.Bool)(&m.RequiresShipping),
		(*core.String)(&m.ImageURL),
		(*core.Bool)(&m.IsOutsideEtop),
		(*core.String)(&m.Code),
	}
}

func (m *OrderLine) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *OrderLines) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(OrderLines, 0, 128)
	for rows.Next() {
		m := new(OrderLine)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *OrderLine) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderLine_Select)
	return nil
}

func (_ *OrderLines) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderLine_Select)
	return nil
}

func (m *OrderLine) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderLine_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(30)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms OrderLines) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderLine_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(30)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *OrderLine) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("order_line")
	w.WriteRawString(" SET ")
	if m.OrderID != 0 {
		flag = true
		w.WriteName("order_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderID)
	}
	if m.VariantID != 0 {
		flag = true
		w.WriteName("variant_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.VariantID)
	}
	if m.ProductName != "" {
		flag = true
		w.WriteName("product_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductName)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.SupplierID != 0 {
		flag = true
		w.WriteName("supplier_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SupplierID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.ExternalVariantID != "" {
		flag = true
		w.WriteName("external_variant_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalVariantID)
	}
	if m.ExternalSupplierOrderID != "" {
		flag = true
		w.WriteName("external_supplier_order_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalSupplierOrderID)
	}
	if m.SupplierName != "" {
		flag = true
		w.WriteName("supplier_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SupplierName)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UpdatedAt)
	}
	if !m.ClosedAt.IsZero() {
		flag = true
		w.WriteName("closed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ClosedAt)
	}
	if !m.ConfirmedAt.IsZero() {
		flag = true
		w.WriteName("confirmed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ConfirmedAt)
	}
	if !m.CancelledAt.IsZero() {
		flag = true
		w.WriteName("cancelled_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CancelledAt)
	}
	if m.CancelReason != "" {
		flag = true
		w.WriteName("cancel_reason")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CancelReason)
	}
	if m.SupplierConfirm != 0 {
		flag = true
		w.WriteName("supplier_confirm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.SupplierConfirm))
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if m.Weight != 0 {
		flag = true
		w.WriteName("weight")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Weight)
	}
	if m.Quantity != 0 {
		flag = true
		w.WriteName("quantity")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Quantity)
	}
	if m.WholesalePrice0 != 0 {
		flag = true
		w.WriteName("wholesale_price_0")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WholesalePrice0)
	}
	if m.WholesalePrice != 0 {
		flag = true
		w.WriteName("wholesale_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WholesalePrice)
	}
	if m.ListPrice != 0 {
		flag = true
		w.WriteName("list_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ListPrice)
	}
	if m.RetailPrice != 0 {
		flag = true
		w.WriteName("retail_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RetailPrice)
	}
	if m.PaymentPrice != 0 {
		flag = true
		w.WriteName("payment_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PaymentPrice)
	}
	if m.LineAmount != 0 {
		flag = true
		w.WriteName("line_amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.LineAmount)
	}
	if m.TotalDiscount != 0 {
		flag = true
		w.WriteName("total_discount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalDiscount)
	}
	if m.TotalLineAmount != 0 {
		flag = true
		w.WriteName("total_line_amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalLineAmount)
	}
	if m.RequiresShipping {
		flag = true
		w.WriteName("requires_shipping")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RequiresShipping)
	}
	if m.ImageURL != "" {
		flag = true
		w.WriteName("image_url")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ImageURL)
	}
	if m.IsOutsideEtop {
		flag = true
		w.WriteName("is_outside_etop")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.IsOutsideEtop)
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *OrderLine) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderLine_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(30)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type OrderLineHistory map[string]interface{}
type OrderLineHistories []map[string]interface{}

func (m *OrderLineHistory) SQLTableName() string  { return "history.\"order_line\"" }
func (m OrderLineHistories) SQLTableName() string { return "history.\"order_line\"" }

func (m *OrderLineHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderLine_Select_history)
	return nil
}

func (m OrderLineHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderLine_Select_history)
	return nil
}

func (m OrderLineHistory) OrderID() core.Interface     { return core.Interface{m["order_id"]} }
func (m OrderLineHistory) VariantID() core.Interface   { return core.Interface{m["variant_id"]} }
func (m OrderLineHistory) ProductName() core.Interface { return core.Interface{m["product_name"]} }
func (m OrderLineHistory) ProductID() core.Interface   { return core.Interface{m["product_id"]} }
func (m OrderLineHistory) SupplierID() core.Interface  { return core.Interface{m["supplier_id"]} }
func (m OrderLineHistory) ShopID() core.Interface      { return core.Interface{m["shop_id"]} }
func (m OrderLineHistory) ExternalVariantID() core.Interface {
	return core.Interface{m["external_variant_id"]}
}
func (m OrderLineHistory) ExternalSupplierOrderID() core.Interface {
	return core.Interface{m["external_supplier_order_id"]}
}
func (m OrderLineHistory) SupplierName() core.Interface { return core.Interface{m["supplier_name"]} }
func (m OrderLineHistory) UpdatedAt() core.Interface    { return core.Interface{m["updated_at"]} }
func (m OrderLineHistory) ClosedAt() core.Interface     { return core.Interface{m["closed_at"]} }
func (m OrderLineHistory) ConfirmedAt() core.Interface  { return core.Interface{m["confirmed_at"]} }
func (m OrderLineHistory) CancelledAt() core.Interface  { return core.Interface{m["cancelled_at"]} }
func (m OrderLineHistory) CancelReason() core.Interface { return core.Interface{m["cancel_reason"]} }
func (m OrderLineHistory) SupplierConfirm() core.Interface {
	return core.Interface{m["supplier_confirm"]}
}
func (m OrderLineHistory) Status() core.Interface   { return core.Interface{m["status"]} }
func (m OrderLineHistory) Weight() core.Interface   { return core.Interface{m["weight"]} }
func (m OrderLineHistory) Quantity() core.Interface { return core.Interface{m["quantity"]} }
func (m OrderLineHistory) WholesalePrice0() core.Interface {
	return core.Interface{m["wholesale_price_0"]}
}
func (m OrderLineHistory) WholesalePrice() core.Interface { return core.Interface{m["wholesale_price"]} }
func (m OrderLineHistory) ListPrice() core.Interface      { return core.Interface{m["list_price"]} }
func (m OrderLineHistory) RetailPrice() core.Interface    { return core.Interface{m["retail_price"]} }
func (m OrderLineHistory) PaymentPrice() core.Interface   { return core.Interface{m["payment_price"]} }
func (m OrderLineHistory) LineAmount() core.Interface     { return core.Interface{m["line_amount"]} }
func (m OrderLineHistory) TotalDiscount() core.Interface  { return core.Interface{m["total_discount"]} }
func (m OrderLineHistory) TotalLineAmount() core.Interface {
	return core.Interface{m["total_line_amount"]}
}
func (m OrderLineHistory) RequiresShipping() core.Interface {
	return core.Interface{m["requires_shipping"]}
}
func (m OrderLineHistory) ImageURL() core.Interface      { return core.Interface{m["image_url"]} }
func (m OrderLineHistory) IsOutsideEtop() core.Interface { return core.Interface{m["is_outside_etop"]} }
func (m OrderLineHistory) Code() core.Interface          { return core.Interface{m["code"]} }

func (m *OrderLineHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 30)
	args := make([]interface{}, 30)
	for i := 0; i < 30; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(OrderLineHistory, 30)
	res["order_id"] = data[0]
	res["variant_id"] = data[1]
	res["product_name"] = data[2]
	res["product_id"] = data[3]
	res["supplier_id"] = data[4]
	res["shop_id"] = data[5]
	res["external_variant_id"] = data[6]
	res["external_supplier_order_id"] = data[7]
	res["supplier_name"] = data[8]
	res["updated_at"] = data[9]
	res["closed_at"] = data[10]
	res["confirmed_at"] = data[11]
	res["cancelled_at"] = data[12]
	res["cancel_reason"] = data[13]
	res["supplier_confirm"] = data[14]
	res["status"] = data[15]
	res["weight"] = data[16]
	res["quantity"] = data[17]
	res["wholesale_price_0"] = data[18]
	res["wholesale_price"] = data[19]
	res["list_price"] = data[20]
	res["retail_price"] = data[21]
	res["payment_price"] = data[22]
	res["line_amount"] = data[23]
	res["total_discount"] = data[24]
	res["total_line_amount"] = data[25]
	res["requires_shipping"] = data[26]
	res["image_url"] = data[27]
	res["is_outside_etop"] = data[28]
	res["code"] = data[29]
	*m = res
	return nil
}

func (ms *OrderLineHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 30)
	args := make([]interface{}, 30)
	for i := 0; i < 30; i++ {
		args[i] = &data[i]
	}
	res := make(OrderLineHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(OrderLineHistory)
		m["order_id"] = data[0]
		m["variant_id"] = data[1]
		m["product_name"] = data[2]
		m["product_id"] = data[3]
		m["supplier_id"] = data[4]
		m["shop_id"] = data[5]
		m["external_variant_id"] = data[6]
		m["external_supplier_order_id"] = data[7]
		m["supplier_name"] = data[8]
		m["updated_at"] = data[9]
		m["closed_at"] = data[10]
		m["confirmed_at"] = data[11]
		m["cancelled_at"] = data[12]
		m["cancel_reason"] = data[13]
		m["supplier_confirm"] = data[14]
		m["status"] = data[15]
		m["weight"] = data[16]
		m["quantity"] = data[17]
		m["wholesale_price_0"] = data[18]
		m["wholesale_price"] = data[19]
		m["list_price"] = data[20]
		m["retail_price"] = data[21]
		m["payment_price"] = data[22]
		m["line_amount"] = data[23]
		m["total_discount"] = data[24]
		m["total_line_amount"] = data[25]
		m["requires_shipping"] = data[26]
		m["image_url"] = data[27]
		m["is_outside_etop"] = data[28]
		m["code"] = data[29]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type OrderLineExtended represents a join
func sqlgenOrderLineExtended(_ *OrderLineExtended, _ *OrderLine, as sq.AS, t0 sq.JOIN_TYPE, _ *etop_vn_backend_pkg_services_catalog_model.Variant, a0 sq.AS, c0 string) bool {
	__sqlOrderLineExtended_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlOrderLineExtended_As = as
	__sqlOrderLineExtended_JoinAs = []sq.AS{a0}
	__sqlOrderLineExtended_JoinConds = []string{c0}
	return true
}

type OrderLineExtendeds []*OrderLineExtended

var __sqlOrderLineExtended_JoinTypes []sq.JOIN_TYPE
var __sqlOrderLineExtended_As sq.AS
var __sqlOrderLineExtended_JoinAs []sq.AS
var __sqlOrderLineExtended_JoinConds []string

func (m *OrderLineExtended) SQLTableName() string  { return "order_line" }
func (m *OrderLineExtendeds) SQLTableName() string { return "order_line" }

func (m *OrderLineExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *OrderLineExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(OrderLineExtendeds, 0, 128)
	for rows.Next() {
		m := new(OrderLineExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *OrderLineExtended) SQLSelect(w SQLWriter) error {
	(*OrderLineExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*OrderLineExtended)(nil).__sqlJoin(w, __sqlOrderLineExtended_JoinTypes)
	return nil
}

func (m *OrderLineExtendeds) SQLSelect(w SQLWriter) error {
	return (*OrderLineExtended)(nil).SQLSelect(w)
}

func (m *OrderLineExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlOrderLineExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *OrderLineExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*OrderLineExtended)(nil).SQLJoin(w, types)
}

func (m *OrderLineExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlOrderLineExtended_As), (*OrderLine)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlOrderLineExtended_JoinAs[0]), (*etop_vn_backend_pkg_services_catalog_model.Variant)(nil).SQLListCols())
}

func (m *OrderLineExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("order_line")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlOrderLineExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*etop_vn_backend_pkg_services_catalog_model.Variant)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlOrderLineExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlOrderLineExtended_JoinConds[0])
}

func (m *OrderLineExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.OrderLine = new(OrderLine)
	args = append(args, m.OrderLine.SQLScanArgs(opts)...)
	m.Variant = new(etop_vn_backend_pkg_services_catalog_model.Variant)
	args = append(args, m.Variant.SQLScanArgs(opts)...)

	return args
}
