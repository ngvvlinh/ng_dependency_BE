// Code generated by goderive DO NOT EDIT.

package model

import (
	"database/sql"
	"time"

	sq "etop.vn/backend/pkg/common/sql"
	core "etop.vn/backend/pkg/common/sql/core"
	model "etop.vn/backend/pkg/etop/model"
	etop_vn_backend_pkg_services_ordering_model "etop.vn/backend/pkg/services/ordering/model"
	etop_vn_backend_pkg_services_shipping_model "etop.vn/backend/pkg/services/shipping/model"
)

type SQLWriter = core.SQLWriter

// Type MoneyTransactionShippingExternal represents table money_transaction_shipping_external
func sqlgenMoneyTransactionShippingExternal(_ *MoneyTransactionShippingExternal) bool { return true }

type MoneyTransactionShippingExternals []*MoneyTransactionShippingExternal

const __sqlMoneyTransactionShippingExternal_Table = "money_transaction_shipping_external"
const __sqlMoneyTransactionShippingExternal_ListCols = "\"id\",\"code\",\"total_cod\",\"total_orders\",\"created_at\",\"updated_at\",\"status\",\"external_paid_at\",\"provider\",\"bank_account\",\"note\",\"invoice_number\""
const __sqlMoneyTransactionShippingExternal_Insert = "INSERT INTO \"money_transaction_shipping_external\" (" + __sqlMoneyTransactionShippingExternal_ListCols + ") VALUES"
const __sqlMoneyTransactionShippingExternal_Select = "SELECT " + __sqlMoneyTransactionShippingExternal_ListCols + " FROM \"money_transaction_shipping_external\""
const __sqlMoneyTransactionShippingExternal_Select_history = "SELECT " + __sqlMoneyTransactionShippingExternal_ListCols + " FROM history.\"money_transaction_shipping_external\""
const __sqlMoneyTransactionShippingExternal_UpdateAll = "UPDATE \"money_transaction_shipping_external\" SET (" + __sqlMoneyTransactionShippingExternal_ListCols + ")"

func (m *MoneyTransactionShippingExternal) SQLTableName() string {
	return "money_transaction_shipping_external"
}
func (m *MoneyTransactionShippingExternals) SQLTableName() string {
	return "money_transaction_shipping_external"
}
func (m *MoneyTransactionShippingExternal) SQLListCols() string {
	return __sqlMoneyTransactionShippingExternal_ListCols
}

func (m *MoneyTransactionShippingExternal) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.String(m.Code),
		core.Int(m.TotalCOD),
		core.Int(m.TotalOrders),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Int(m.Status),
		core.Time(m.ExternalPaidAt),
		core.String(m.Provider),
		core.JSON{m.BankAccount},
		core.String(m.Note),
		core.String(m.InvoiceNumber),
	}
}

func (m *MoneyTransactionShippingExternal) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.String)(&m.Code),
		(*core.Int)(&m.TotalCOD),
		(*core.Int)(&m.TotalOrders),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.ExternalPaidAt),
		(*core.String)(&m.Provider),
		core.JSON{&m.BankAccount},
		(*core.String)(&m.Note),
		(*core.String)(&m.InvoiceNumber),
	}
}

func (m *MoneyTransactionShippingExternal) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *MoneyTransactionShippingExternals) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(MoneyTransactionShippingExternals, 0, 128)
	for rows.Next() {
		m := new(MoneyTransactionShippingExternal)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *MoneyTransactionShippingExternal) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingExternal_Select)
	return nil
}

func (_ *MoneyTransactionShippingExternals) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingExternal_Select)
	return nil
}

func (m *MoneyTransactionShippingExternal) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingExternal_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(12)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms MoneyTransactionShippingExternals) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingExternal_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(12)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *MoneyTransactionShippingExternal) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("money_transaction_shipping_external")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.TotalCOD != 0 {
		flag = true
		w.WriteName("total_cod")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalCOD)
	}
	if m.TotalOrders != 0 {
		flag = true
		w.WriteName("total_orders")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalOrders)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if !m.ExternalPaidAt.IsZero() {
		flag = true
		w.WriteName("external_paid_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalPaidAt)
	}
	if m.Provider != "" {
		flag = true
		w.WriteName("provider")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Provider)
	}
	if m.BankAccount != nil {
		flag = true
		w.WriteName("bank_account")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.BankAccount})
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if m.InvoiceNumber != "" {
		flag = true
		w.WriteName("invoice_number")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.InvoiceNumber)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *MoneyTransactionShippingExternal) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingExternal_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(12)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type MoneyTransactionShippingExternalHistory map[string]interface{}
type MoneyTransactionShippingExternalHistories []map[string]interface{}

func (m *MoneyTransactionShippingExternalHistory) SQLTableName() string {
	return "history.\"money_transaction_shipping_external\""
}
func (m MoneyTransactionShippingExternalHistories) SQLTableName() string {
	return "history.\"money_transaction_shipping_external\""
}

func (m *MoneyTransactionShippingExternalHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingExternal_Select_history)
	return nil
}

func (m MoneyTransactionShippingExternalHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingExternal_Select_history)
	return nil
}

func (m MoneyTransactionShippingExternalHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m MoneyTransactionShippingExternalHistory) Code() core.Interface {
	return core.Interface{m["code"]}
}
func (m MoneyTransactionShippingExternalHistory) TotalCOD() core.Interface {
	return core.Interface{m["total_cod"]}
}
func (m MoneyTransactionShippingExternalHistory) TotalOrders() core.Interface {
	return core.Interface{m["total_orders"]}
}
func (m MoneyTransactionShippingExternalHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m MoneyTransactionShippingExternalHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}
func (m MoneyTransactionShippingExternalHistory) Status() core.Interface {
	return core.Interface{m["status"]}
}
func (m MoneyTransactionShippingExternalHistory) ExternalPaidAt() core.Interface {
	return core.Interface{m["external_paid_at"]}
}
func (m MoneyTransactionShippingExternalHistory) Provider() core.Interface {
	return core.Interface{m["provider"]}
}
func (m MoneyTransactionShippingExternalHistory) BankAccount() core.Interface {
	return core.Interface{m["bank_account"]}
}
func (m MoneyTransactionShippingExternalHistory) Note() core.Interface {
	return core.Interface{m["note"]}
}
func (m MoneyTransactionShippingExternalHistory) InvoiceNumber() core.Interface {
	return core.Interface{m["invoice_number"]}
}

func (m *MoneyTransactionShippingExternalHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 12)
	args := make([]interface{}, 12)
	for i := 0; i < 12; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(MoneyTransactionShippingExternalHistory, 12)
	res["id"] = data[0]
	res["code"] = data[1]
	res["total_cod"] = data[2]
	res["total_orders"] = data[3]
	res["created_at"] = data[4]
	res["updated_at"] = data[5]
	res["status"] = data[6]
	res["external_paid_at"] = data[7]
	res["provider"] = data[8]
	res["bank_account"] = data[9]
	res["note"] = data[10]
	res["invoice_number"] = data[11]
	*m = res
	return nil
}

func (ms *MoneyTransactionShippingExternalHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 12)
	args := make([]interface{}, 12)
	for i := 0; i < 12; i++ {
		args[i] = &data[i]
	}
	res := make(MoneyTransactionShippingExternalHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(MoneyTransactionShippingExternalHistory)
		m["id"] = data[0]
		m["code"] = data[1]
		m["total_cod"] = data[2]
		m["total_orders"] = data[3]
		m["created_at"] = data[4]
		m["updated_at"] = data[5]
		m["status"] = data[6]
		m["external_paid_at"] = data[7]
		m["provider"] = data[8]
		m["bank_account"] = data[9]
		m["note"] = data[10]
		m["invoice_number"] = data[11]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type MoneyTransactionShippingExternalLine represents table money_transaction_shipping_external_line
func sqlgenMoneyTransactionShippingExternalLine(_ *MoneyTransactionShippingExternalLine) bool {
	return true
}

type MoneyTransactionShippingExternalLines []*MoneyTransactionShippingExternalLine

const __sqlMoneyTransactionShippingExternalLine_Table = "money_transaction_shipping_external_line"
const __sqlMoneyTransactionShippingExternalLine_ListCols = "\"id\",\"external_code\",\"external_customer\",\"external_address\",\"external_total_cod\",\"external_created_at\",\"external_closed_at\",\"etop_fulfillment_id_raw\",\"etop_fulfillment_id\",\"note\",\"money_transaction_shipping_external_id\",\"created_at\",\"updated_at\",\"import_error\",\"external_total_shipping_fee\""
const __sqlMoneyTransactionShippingExternalLine_Insert = "INSERT INTO \"money_transaction_shipping_external_line\" (" + __sqlMoneyTransactionShippingExternalLine_ListCols + ") VALUES"
const __sqlMoneyTransactionShippingExternalLine_Select = "SELECT " + __sqlMoneyTransactionShippingExternalLine_ListCols + " FROM \"money_transaction_shipping_external_line\""
const __sqlMoneyTransactionShippingExternalLine_Select_history = "SELECT " + __sqlMoneyTransactionShippingExternalLine_ListCols + " FROM history.\"money_transaction_shipping_external_line\""
const __sqlMoneyTransactionShippingExternalLine_UpdateAll = "UPDATE \"money_transaction_shipping_external_line\" SET (" + __sqlMoneyTransactionShippingExternalLine_ListCols + ")"

func (m *MoneyTransactionShippingExternalLine) SQLTableName() string {
	return "money_transaction_shipping_external_line"
}
func (m *MoneyTransactionShippingExternalLines) SQLTableName() string {
	return "money_transaction_shipping_external_line"
}
func (m *MoneyTransactionShippingExternalLine) SQLListCols() string {
	return __sqlMoneyTransactionShippingExternalLine_ListCols
}

func (m *MoneyTransactionShippingExternalLine) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.String(m.ExternalCode),
		core.String(m.ExternalCustomer),
		core.String(m.ExternalAddress),
		core.Int(m.ExternalTotalCOD),
		core.Time(m.ExternalCreatedAt),
		core.Time(m.ExternalClosedAt),
		core.String(m.EtopFulfillmentIdRaw),
		core.Int64(m.EtopFulfillmentID),
		core.String(m.Note),
		core.Int64(m.MoneyTransactionShippingExternalID),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.JSON{m.ImportError},
		core.Int(m.ExternalTotalShippingFee),
	}
}

func (m *MoneyTransactionShippingExternalLine) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.String)(&m.ExternalCode),
		(*core.String)(&m.ExternalCustomer),
		(*core.String)(&m.ExternalAddress),
		(*core.Int)(&m.ExternalTotalCOD),
		(*core.Time)(&m.ExternalCreatedAt),
		(*core.Time)(&m.ExternalClosedAt),
		(*core.String)(&m.EtopFulfillmentIdRaw),
		(*core.Int64)(&m.EtopFulfillmentID),
		(*core.String)(&m.Note),
		(*core.Int64)(&m.MoneyTransactionShippingExternalID),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		core.JSON{&m.ImportError},
		(*core.Int)(&m.ExternalTotalShippingFee),
	}
}

func (m *MoneyTransactionShippingExternalLine) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *MoneyTransactionShippingExternalLines) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(MoneyTransactionShippingExternalLines, 0, 128)
	for rows.Next() {
		m := new(MoneyTransactionShippingExternalLine)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *MoneyTransactionShippingExternalLine) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingExternalLine_Select)
	return nil
}

func (_ *MoneyTransactionShippingExternalLines) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingExternalLine_Select)
	return nil
}

func (m *MoneyTransactionShippingExternalLine) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingExternalLine_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(15)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms MoneyTransactionShippingExternalLines) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingExternalLine_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(15)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *MoneyTransactionShippingExternalLine) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("money_transaction_shipping_external_line")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ExternalCode != "" {
		flag = true
		w.WriteName("external_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCode)
	}
	if m.ExternalCustomer != "" {
		flag = true
		w.WriteName("external_customer")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCustomer)
	}
	if m.ExternalAddress != "" {
		flag = true
		w.WriteName("external_address")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalAddress)
	}
	if m.ExternalTotalCOD != 0 {
		flag = true
		w.WriteName("external_total_cod")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalTotalCOD)
	}
	if !m.ExternalCreatedAt.IsZero() {
		flag = true
		w.WriteName("external_created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCreatedAt)
	}
	if !m.ExternalClosedAt.IsZero() {
		flag = true
		w.WriteName("external_closed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalClosedAt)
	}
	if m.EtopFulfillmentIdRaw != "" {
		flag = true
		w.WriteName("etop_fulfillment_id_raw")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EtopFulfillmentIdRaw)
	}
	if m.EtopFulfillmentID != 0 {
		flag = true
		w.WriteName("etop_fulfillment_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EtopFulfillmentID)
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if m.MoneyTransactionShippingExternalID != 0 {
		flag = true
		w.WriteName("money_transaction_shipping_external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.MoneyTransactionShippingExternalID)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if m.ImportError != nil {
		flag = true
		w.WriteName("import_error")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ImportError})
	}
	if m.ExternalTotalShippingFee != 0 {
		flag = true
		w.WriteName("external_total_shipping_fee")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalTotalShippingFee)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *MoneyTransactionShippingExternalLine) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingExternalLine_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(15)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type MoneyTransactionShippingExternalLineHistory map[string]interface{}
type MoneyTransactionShippingExternalLineHistories []map[string]interface{}

func (m *MoneyTransactionShippingExternalLineHistory) SQLTableName() string {
	return "history.\"money_transaction_shipping_external_line\""
}
func (m MoneyTransactionShippingExternalLineHistories) SQLTableName() string {
	return "history.\"money_transaction_shipping_external_line\""
}

func (m *MoneyTransactionShippingExternalLineHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingExternalLine_Select_history)
	return nil
}

func (m MoneyTransactionShippingExternalLineHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingExternalLine_Select_history)
	return nil
}

func (m MoneyTransactionShippingExternalLineHistory) ID() core.Interface {
	return core.Interface{m["id"]}
}
func (m MoneyTransactionShippingExternalLineHistory) ExternalCode() core.Interface {
	return core.Interface{m["external_code"]}
}
func (m MoneyTransactionShippingExternalLineHistory) ExternalCustomer() core.Interface {
	return core.Interface{m["external_customer"]}
}
func (m MoneyTransactionShippingExternalLineHistory) ExternalAddress() core.Interface {
	return core.Interface{m["external_address"]}
}
func (m MoneyTransactionShippingExternalLineHistory) ExternalTotalCOD() core.Interface {
	return core.Interface{m["external_total_cod"]}
}
func (m MoneyTransactionShippingExternalLineHistory) ExternalCreatedAt() core.Interface {
	return core.Interface{m["external_created_at"]}
}
func (m MoneyTransactionShippingExternalLineHistory) ExternalClosedAt() core.Interface {
	return core.Interface{m["external_closed_at"]}
}
func (m MoneyTransactionShippingExternalLineHistory) EtopFulfillmentIdRaw() core.Interface {
	return core.Interface{m["etop_fulfillment_id_raw"]}
}
func (m MoneyTransactionShippingExternalLineHistory) EtopFulfillmentID() core.Interface {
	return core.Interface{m["etop_fulfillment_id"]}
}
func (m MoneyTransactionShippingExternalLineHistory) Note() core.Interface {
	return core.Interface{m["note"]}
}
func (m MoneyTransactionShippingExternalLineHistory) MoneyTransactionShippingExternalID() core.Interface {
	return core.Interface{m["money_transaction_shipping_external_id"]}
}
func (m MoneyTransactionShippingExternalLineHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m MoneyTransactionShippingExternalLineHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}
func (m MoneyTransactionShippingExternalLineHistory) ImportError() core.Interface {
	return core.Interface{m["import_error"]}
}
func (m MoneyTransactionShippingExternalLineHistory) ExternalTotalShippingFee() core.Interface {
	return core.Interface{m["external_total_shipping_fee"]}
}

func (m *MoneyTransactionShippingExternalLineHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 15)
	args := make([]interface{}, 15)
	for i := 0; i < 15; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(MoneyTransactionShippingExternalLineHistory, 15)
	res["id"] = data[0]
	res["external_code"] = data[1]
	res["external_customer"] = data[2]
	res["external_address"] = data[3]
	res["external_total_cod"] = data[4]
	res["external_created_at"] = data[5]
	res["external_closed_at"] = data[6]
	res["etop_fulfillment_id_raw"] = data[7]
	res["etop_fulfillment_id"] = data[8]
	res["note"] = data[9]
	res["money_transaction_shipping_external_id"] = data[10]
	res["created_at"] = data[11]
	res["updated_at"] = data[12]
	res["import_error"] = data[13]
	res["external_total_shipping_fee"] = data[14]
	*m = res
	return nil
}

func (ms *MoneyTransactionShippingExternalLineHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 15)
	args := make([]interface{}, 15)
	for i := 0; i < 15; i++ {
		args[i] = &data[i]
	}
	res := make(MoneyTransactionShippingExternalLineHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(MoneyTransactionShippingExternalLineHistory)
		m["id"] = data[0]
		m["external_code"] = data[1]
		m["external_customer"] = data[2]
		m["external_address"] = data[3]
		m["external_total_cod"] = data[4]
		m["external_created_at"] = data[5]
		m["external_closed_at"] = data[6]
		m["etop_fulfillment_id_raw"] = data[7]
		m["etop_fulfillment_id"] = data[8]
		m["note"] = data[9]
		m["money_transaction_shipping_external_id"] = data[10]
		m["created_at"] = data[11]
		m["updated_at"] = data[12]
		m["import_error"] = data[13]
		m["external_total_shipping_fee"] = data[14]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type MoneyTransactionShippingExternalLineExtended represents a join
func sqlgenMoneyTransactionShippingExternalLineExtended(_ *MoneyTransactionShippingExternalLineExtended, _ *MoneyTransactionShippingExternalLine, as sq.AS, t0 sq.JOIN_TYPE, _ *etop_vn_backend_pkg_services_shipping_model.Fulfillment, a0 sq.AS, c0 string, t1 sq.JOIN_TYPE, _ *model.Shop, a1 sq.AS, c1 string, t2 sq.JOIN_TYPE, _ *etop_vn_backend_pkg_services_ordering_model.Order, a2 sq.AS, c2 string) bool {
	__sqlMoneyTransactionShippingExternalLineExtended_JoinTypes = []sq.JOIN_TYPE{t0, t1, t2}
	__sqlMoneyTransactionShippingExternalLineExtended_As = as
	__sqlMoneyTransactionShippingExternalLineExtended_JoinAs = []sq.AS{a0, a1, a2}
	__sqlMoneyTransactionShippingExternalLineExtended_JoinConds = []string{c0, c1, c2}
	return true
}

type MoneyTransactionShippingExternalLineExtendeds []*MoneyTransactionShippingExternalLineExtended

var __sqlMoneyTransactionShippingExternalLineExtended_JoinTypes []sq.JOIN_TYPE
var __sqlMoneyTransactionShippingExternalLineExtended_As sq.AS
var __sqlMoneyTransactionShippingExternalLineExtended_JoinAs []sq.AS
var __sqlMoneyTransactionShippingExternalLineExtended_JoinConds []string

func (m *MoneyTransactionShippingExternalLineExtended) SQLTableName() string {
	return "money_transaction_shipping_external_line"
}
func (m *MoneyTransactionShippingExternalLineExtendeds) SQLTableName() string {
	return "money_transaction_shipping_external_line"
}

func (m *MoneyTransactionShippingExternalLineExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *MoneyTransactionShippingExternalLineExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(MoneyTransactionShippingExternalLineExtendeds, 0, 128)
	for rows.Next() {
		m := new(MoneyTransactionShippingExternalLineExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *MoneyTransactionShippingExternalLineExtended) SQLSelect(w SQLWriter) error {
	(*MoneyTransactionShippingExternalLineExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*MoneyTransactionShippingExternalLineExtended)(nil).__sqlJoin(w, __sqlMoneyTransactionShippingExternalLineExtended_JoinTypes)
	return nil
}

func (m *MoneyTransactionShippingExternalLineExtendeds) SQLSelect(w SQLWriter) error {
	return (*MoneyTransactionShippingExternalLineExtended)(nil).SQLSelect(w)
}

func (m *MoneyTransactionShippingExternalLineExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlMoneyTransactionShippingExternalLineExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *MoneyTransactionShippingExternalLineExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*MoneyTransactionShippingExternalLineExtended)(nil).SQLJoin(w, types)
}

func (m *MoneyTransactionShippingExternalLineExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlMoneyTransactionShippingExternalLineExtended_As), (*MoneyTransactionShippingExternalLine)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlMoneyTransactionShippingExternalLineExtended_JoinAs[0]), (*etop_vn_backend_pkg_services_shipping_model.Fulfillment)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlMoneyTransactionShippingExternalLineExtended_JoinAs[1]), (*model.Shop)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlMoneyTransactionShippingExternalLineExtended_JoinAs[2]), (*etop_vn_backend_pkg_services_ordering_model.Order)(nil).SQLListCols())
}

func (m *MoneyTransactionShippingExternalLineExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 3 {
		panic("common/sql: expect 3 types to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("money_transaction_shipping_external_line")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlMoneyTransactionShippingExternalLineExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*etop_vn_backend_pkg_services_shipping_model.Fulfillment)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlMoneyTransactionShippingExternalLineExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlMoneyTransactionShippingExternalLineExtended_JoinConds[0])
	w.WriteByte(' ')
	w.WriteRawString(string(types[1]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*model.Shop)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlMoneyTransactionShippingExternalLineExtended_JoinAs[1]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlMoneyTransactionShippingExternalLineExtended_JoinConds[1])
	w.WriteByte(' ')
	w.WriteRawString(string(types[2]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*etop_vn_backend_pkg_services_ordering_model.Order)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlMoneyTransactionShippingExternalLineExtended_JoinAs[2]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlMoneyTransactionShippingExternalLineExtended_JoinConds[2])
}

func (m *MoneyTransactionShippingExternalLineExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.MoneyTransactionShippingExternalLine = new(MoneyTransactionShippingExternalLine)
	args = append(args, m.MoneyTransactionShippingExternalLine.SQLScanArgs(opts)...)
	m.Fulfillment = new(etop_vn_backend_pkg_services_shipping_model.Fulfillment)
	args = append(args, m.Fulfillment.SQLScanArgs(opts)...)
	m.Shop = new(model.Shop)
	args = append(args, m.Shop.SQLScanArgs(opts)...)
	m.Order = new(etop_vn_backend_pkg_services_ordering_model.Order)
	args = append(args, m.Order.SQLScanArgs(opts)...)

	return args
}

// Type MoneyTransactionShipping represents table money_transaction_shipping
func sqlgenMoneyTransactionShipping(_ *MoneyTransactionShipping) bool { return true }

type MoneyTransactionShippings []*MoneyTransactionShipping

const __sqlMoneyTransactionShipping_Table = "money_transaction_shipping"
const __sqlMoneyTransactionShipping_ListCols = "\"id\",\"shop_id\",\"supplier_id\",\"created_at\",\"updated_at\",\"closed_at\",\"status\",\"total_cod\",\"total_amount\",\"total_orders\",\"code\",\"money_transaction_shipping_external_id\",\"money_transaction_shipping_etop_id\",\"provider\",\"confirmed_at\",\"etop_transfered_at\",\"bank_account\",\"note\",\"invoice_number\""
const __sqlMoneyTransactionShipping_Insert = "INSERT INTO \"money_transaction_shipping\" (" + __sqlMoneyTransactionShipping_ListCols + ") VALUES"
const __sqlMoneyTransactionShipping_Select = "SELECT " + __sqlMoneyTransactionShipping_ListCols + " FROM \"money_transaction_shipping\""
const __sqlMoneyTransactionShipping_Select_history = "SELECT " + __sqlMoneyTransactionShipping_ListCols + " FROM history.\"money_transaction_shipping\""
const __sqlMoneyTransactionShipping_UpdateAll = "UPDATE \"money_transaction_shipping\" SET (" + __sqlMoneyTransactionShipping_ListCols + ")"

func (m *MoneyTransactionShipping) SQLTableName() string  { return "money_transaction_shipping" }
func (m *MoneyTransactionShippings) SQLTableName() string { return "money_transaction_shipping" }
func (m *MoneyTransactionShipping) SQLListCols() string   { return __sqlMoneyTransactionShipping_ListCols }

func (m *MoneyTransactionShipping) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ShopID),
		core.Int64(m.SupplierID),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.ClosedAt),
		core.Int(m.Status),
		core.Int(m.TotalCOD),
		core.Int(m.TotalAmount),
		core.Int(m.TotalOrders),
		core.String(m.Code),
		core.Int64(m.MoneyTransactionShippingExternalID),
		core.Int64(m.MoneyTransactionShippingEtopID),
		core.String(m.Provider),
		core.Time(m.ConfirmedAt),
		core.Time(m.EtopTransferedAt),
		core.JSON{m.BankAccount},
		core.String(m.Note),
		core.String(m.InvoiceNumber),
	}
}

func (m *MoneyTransactionShipping) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ShopID),
		(*core.Int64)(&m.SupplierID),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.ClosedAt),
		(*core.Int)(&m.Status),
		(*core.Int)(&m.TotalCOD),
		(*core.Int)(&m.TotalAmount),
		(*core.Int)(&m.TotalOrders),
		(*core.String)(&m.Code),
		(*core.Int64)(&m.MoneyTransactionShippingExternalID),
		(*core.Int64)(&m.MoneyTransactionShippingEtopID),
		(*core.String)(&m.Provider),
		(*core.Time)(&m.ConfirmedAt),
		(*core.Time)(&m.EtopTransferedAt),
		core.JSON{&m.BankAccount},
		(*core.String)(&m.Note),
		(*core.String)(&m.InvoiceNumber),
	}
}

func (m *MoneyTransactionShipping) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *MoneyTransactionShippings) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(MoneyTransactionShippings, 0, 128)
	for rows.Next() {
		m := new(MoneyTransactionShipping)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *MoneyTransactionShipping) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShipping_Select)
	return nil
}

func (_ *MoneyTransactionShippings) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShipping_Select)
	return nil
}

func (m *MoneyTransactionShipping) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShipping_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(19)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms MoneyTransactionShippings) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShipping_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(19)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *MoneyTransactionShipping) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("money_transaction_shipping")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.SupplierID != 0 {
		flag = true
		w.WriteName("supplier_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SupplierID)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.ClosedAt.IsZero() {
		flag = true
		w.WriteName("closed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ClosedAt)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if m.TotalCOD != 0 {
		flag = true
		w.WriteName("total_cod")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalCOD)
	}
	if m.TotalAmount != 0 {
		flag = true
		w.WriteName("total_amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalAmount)
	}
	if m.TotalOrders != 0 {
		flag = true
		w.WriteName("total_orders")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalOrders)
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.MoneyTransactionShippingExternalID != 0 {
		flag = true
		w.WriteName("money_transaction_shipping_external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.MoneyTransactionShippingExternalID)
	}
	if m.MoneyTransactionShippingEtopID != 0 {
		flag = true
		w.WriteName("money_transaction_shipping_etop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.MoneyTransactionShippingEtopID)
	}
	if m.Provider != "" {
		flag = true
		w.WriteName("provider")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Provider)
	}
	if !m.ConfirmedAt.IsZero() {
		flag = true
		w.WriteName("confirmed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ConfirmedAt)
	}
	if !m.EtopTransferedAt.IsZero() {
		flag = true
		w.WriteName("etop_transfered_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EtopTransferedAt)
	}
	if m.BankAccount != nil {
		flag = true
		w.WriteName("bank_account")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.BankAccount})
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if m.InvoiceNumber != "" {
		flag = true
		w.WriteName("invoice_number")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.InvoiceNumber)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *MoneyTransactionShipping) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShipping_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(19)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type MoneyTransactionShippingHistory map[string]interface{}
type MoneyTransactionShippingHistories []map[string]interface{}

func (m *MoneyTransactionShippingHistory) SQLTableName() string {
	return "history.\"money_transaction_shipping\""
}
func (m MoneyTransactionShippingHistories) SQLTableName() string {
	return "history.\"money_transaction_shipping\""
}

func (m *MoneyTransactionShippingHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShipping_Select_history)
	return nil
}

func (m MoneyTransactionShippingHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShipping_Select_history)
	return nil
}

func (m MoneyTransactionShippingHistory) ID() core.Interface     { return core.Interface{m["id"]} }
func (m MoneyTransactionShippingHistory) ShopID() core.Interface { return core.Interface{m["shop_id"]} }
func (m MoneyTransactionShippingHistory) SupplierID() core.Interface {
	return core.Interface{m["supplier_id"]}
}
func (m MoneyTransactionShippingHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m MoneyTransactionShippingHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}
func (m MoneyTransactionShippingHistory) ClosedAt() core.Interface {
	return core.Interface{m["closed_at"]}
}
func (m MoneyTransactionShippingHistory) Status() core.Interface { return core.Interface{m["status"]} }
func (m MoneyTransactionShippingHistory) TotalCOD() core.Interface {
	return core.Interface{m["total_cod"]}
}
func (m MoneyTransactionShippingHistory) TotalAmount() core.Interface {
	return core.Interface{m["total_amount"]}
}
func (m MoneyTransactionShippingHistory) TotalOrders() core.Interface {
	return core.Interface{m["total_orders"]}
}
func (m MoneyTransactionShippingHistory) Code() core.Interface { return core.Interface{m["code"]} }
func (m MoneyTransactionShippingHistory) MoneyTransactionShippingExternalID() core.Interface {
	return core.Interface{m["money_transaction_shipping_external_id"]}
}
func (m MoneyTransactionShippingHistory) MoneyTransactionShippingEtopID() core.Interface {
	return core.Interface{m["money_transaction_shipping_etop_id"]}
}
func (m MoneyTransactionShippingHistory) Provider() core.Interface {
	return core.Interface{m["provider"]}
}
func (m MoneyTransactionShippingHistory) ConfirmedAt() core.Interface {
	return core.Interface{m["confirmed_at"]}
}
func (m MoneyTransactionShippingHistory) EtopTransferedAt() core.Interface {
	return core.Interface{m["etop_transfered_at"]}
}
func (m MoneyTransactionShippingHistory) BankAccount() core.Interface {
	return core.Interface{m["bank_account"]}
}
func (m MoneyTransactionShippingHistory) Note() core.Interface { return core.Interface{m["note"]} }
func (m MoneyTransactionShippingHistory) InvoiceNumber() core.Interface {
	return core.Interface{m["invoice_number"]}
}

func (m *MoneyTransactionShippingHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 19)
	args := make([]interface{}, 19)
	for i := 0; i < 19; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(MoneyTransactionShippingHistory, 19)
	res["id"] = data[0]
	res["shop_id"] = data[1]
	res["supplier_id"] = data[2]
	res["created_at"] = data[3]
	res["updated_at"] = data[4]
	res["closed_at"] = data[5]
	res["status"] = data[6]
	res["total_cod"] = data[7]
	res["total_amount"] = data[8]
	res["total_orders"] = data[9]
	res["code"] = data[10]
	res["money_transaction_shipping_external_id"] = data[11]
	res["money_transaction_shipping_etop_id"] = data[12]
	res["provider"] = data[13]
	res["confirmed_at"] = data[14]
	res["etop_transfered_at"] = data[15]
	res["bank_account"] = data[16]
	res["note"] = data[17]
	res["invoice_number"] = data[18]
	*m = res
	return nil
}

func (ms *MoneyTransactionShippingHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 19)
	args := make([]interface{}, 19)
	for i := 0; i < 19; i++ {
		args[i] = &data[i]
	}
	res := make(MoneyTransactionShippingHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(MoneyTransactionShippingHistory)
		m["id"] = data[0]
		m["shop_id"] = data[1]
		m["supplier_id"] = data[2]
		m["created_at"] = data[3]
		m["updated_at"] = data[4]
		m["closed_at"] = data[5]
		m["status"] = data[6]
		m["total_cod"] = data[7]
		m["total_amount"] = data[8]
		m["total_orders"] = data[9]
		m["code"] = data[10]
		m["money_transaction_shipping_external_id"] = data[11]
		m["money_transaction_shipping_etop_id"] = data[12]
		m["provider"] = data[13]
		m["confirmed_at"] = data[14]
		m["etop_transfered_at"] = data[15]
		m["bank_account"] = data[16]
		m["note"] = data[17]
		m["invoice_number"] = data[18]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type MoneyTransactionShippingFtShop represents a join
func sqlgenMoneyTransactionShippingFtShop(_ *MoneyTransactionShippingFtShop, _ *MoneyTransactionShipping, as sq.AS, t0 sq.JOIN_TYPE, _ *model.Shop, a0 sq.AS, c0 string) bool {
	__sqlMoneyTransactionShippingFtShop_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlMoneyTransactionShippingFtShop_As = as
	__sqlMoneyTransactionShippingFtShop_JoinAs = []sq.AS{a0}
	__sqlMoneyTransactionShippingFtShop_JoinConds = []string{c0}
	return true
}

type MoneyTransactionShippingFtShops []*MoneyTransactionShippingFtShop

var __sqlMoneyTransactionShippingFtShop_JoinTypes []sq.JOIN_TYPE
var __sqlMoneyTransactionShippingFtShop_As sq.AS
var __sqlMoneyTransactionShippingFtShop_JoinAs []sq.AS
var __sqlMoneyTransactionShippingFtShop_JoinConds []string

func (m *MoneyTransactionShippingFtShop) SQLTableName() string  { return "money_transaction_shipping" }
func (m *MoneyTransactionShippingFtShops) SQLTableName() string { return "money_transaction_shipping" }

func (m *MoneyTransactionShippingFtShop) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *MoneyTransactionShippingFtShops) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(MoneyTransactionShippingFtShops, 0, 128)
	for rows.Next() {
		m := new(MoneyTransactionShippingFtShop)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *MoneyTransactionShippingFtShop) SQLSelect(w SQLWriter) error {
	(*MoneyTransactionShippingFtShop)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*MoneyTransactionShippingFtShop)(nil).__sqlJoin(w, __sqlMoneyTransactionShippingFtShop_JoinTypes)
	return nil
}

func (m *MoneyTransactionShippingFtShops) SQLSelect(w SQLWriter) error {
	return (*MoneyTransactionShippingFtShop)(nil).SQLSelect(w)
}

func (m *MoneyTransactionShippingFtShop) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlMoneyTransactionShippingFtShop_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *MoneyTransactionShippingFtShops) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*MoneyTransactionShippingFtShop)(nil).SQLJoin(w, types)
}

func (m *MoneyTransactionShippingFtShop) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlMoneyTransactionShippingFtShop_As), (*MoneyTransactionShipping)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlMoneyTransactionShippingFtShop_JoinAs[0]), (*model.Shop)(nil).SQLListCols())
}

func (m *MoneyTransactionShippingFtShop) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("money_transaction_shipping")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlMoneyTransactionShippingFtShop_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*model.Shop)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlMoneyTransactionShippingFtShop_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlMoneyTransactionShippingFtShop_JoinConds[0])
}

func (m *MoneyTransactionShippingFtShop) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.MoneyTransactionShipping = new(MoneyTransactionShipping)
	args = append(args, m.MoneyTransactionShipping.SQLScanArgs(opts)...)
	m.Shop = new(model.Shop)
	args = append(args, m.Shop.SQLScanArgs(opts)...)

	return args
}

// Type MoneyTransactionShippingEtop represents table money_transaction_shipping_etop
func sqlgenMoneyTransactionShippingEtop(_ *MoneyTransactionShippingEtop) bool { return true }

type MoneyTransactionShippingEtops []*MoneyTransactionShippingEtop

const __sqlMoneyTransactionShippingEtop_Table = "money_transaction_shipping_etop"
const __sqlMoneyTransactionShippingEtop_ListCols = "\"id\",\"code\",\"total_cod\",\"total_orders\",\"total_amount\",\"total_fee\",\"total_money_transaction\",\"created_at\",\"updated_at\",\"confirmed_at\",\"status\",\"bank_account\",\"note\",\"invoice_number\""
const __sqlMoneyTransactionShippingEtop_Insert = "INSERT INTO \"money_transaction_shipping_etop\" (" + __sqlMoneyTransactionShippingEtop_ListCols + ") VALUES"
const __sqlMoneyTransactionShippingEtop_Select = "SELECT " + __sqlMoneyTransactionShippingEtop_ListCols + " FROM \"money_transaction_shipping_etop\""
const __sqlMoneyTransactionShippingEtop_Select_history = "SELECT " + __sqlMoneyTransactionShippingEtop_ListCols + " FROM history.\"money_transaction_shipping_etop\""
const __sqlMoneyTransactionShippingEtop_UpdateAll = "UPDATE \"money_transaction_shipping_etop\" SET (" + __sqlMoneyTransactionShippingEtop_ListCols + ")"

func (m *MoneyTransactionShippingEtop) SQLTableName() string { return "money_transaction_shipping_etop" }
func (m *MoneyTransactionShippingEtops) SQLTableName() string {
	return "money_transaction_shipping_etop"
}
func (m *MoneyTransactionShippingEtop) SQLListCols() string {
	return __sqlMoneyTransactionShippingEtop_ListCols
}

func (m *MoneyTransactionShippingEtop) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.String(m.Code),
		core.Int(m.TotalCOD),
		core.Int(m.TotalOrders),
		core.Int(m.TotalAmount),
		core.Int(m.TotalFee),
		core.Int(m.TotalMoneyTransaction),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.ConfirmedAt),
		core.Int(m.Status),
		core.JSON{m.BankAccount},
		core.String(m.Note),
		core.String(m.InvoiceNumber),
	}
}

func (m *MoneyTransactionShippingEtop) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.String)(&m.Code),
		(*core.Int)(&m.TotalCOD),
		(*core.Int)(&m.TotalOrders),
		(*core.Int)(&m.TotalAmount),
		(*core.Int)(&m.TotalFee),
		(*core.Int)(&m.TotalMoneyTransaction),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.ConfirmedAt),
		(*core.Int)(&m.Status),
		core.JSON{&m.BankAccount},
		(*core.String)(&m.Note),
		(*core.String)(&m.InvoiceNumber),
	}
}

func (m *MoneyTransactionShippingEtop) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *MoneyTransactionShippingEtops) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(MoneyTransactionShippingEtops, 0, 128)
	for rows.Next() {
		m := new(MoneyTransactionShippingEtop)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *MoneyTransactionShippingEtop) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingEtop_Select)
	return nil
}

func (_ *MoneyTransactionShippingEtops) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingEtop_Select)
	return nil
}

func (m *MoneyTransactionShippingEtop) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingEtop_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms MoneyTransactionShippingEtops) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingEtop_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(14)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *MoneyTransactionShippingEtop) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("money_transaction_shipping_etop")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.TotalCOD != 0 {
		flag = true
		w.WriteName("total_cod")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalCOD)
	}
	if m.TotalOrders != 0 {
		flag = true
		w.WriteName("total_orders")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalOrders)
	}
	if m.TotalAmount != 0 {
		flag = true
		w.WriteName("total_amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalAmount)
	}
	if m.TotalFee != 0 {
		flag = true
		w.WriteName("total_fee")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalFee)
	}
	if m.TotalMoneyTransaction != 0 {
		flag = true
		w.WriteName("total_money_transaction")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalMoneyTransaction)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.ConfirmedAt.IsZero() {
		flag = true
		w.WriteName("confirmed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ConfirmedAt)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if m.BankAccount != nil {
		flag = true
		w.WriteName("bank_account")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.BankAccount})
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if m.InvoiceNumber != "" {
		flag = true
		w.WriteName("invoice_number")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.InvoiceNumber)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *MoneyTransactionShippingEtop) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingEtop_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type MoneyTransactionShippingEtopHistory map[string]interface{}
type MoneyTransactionShippingEtopHistories []map[string]interface{}

func (m *MoneyTransactionShippingEtopHistory) SQLTableName() string {
	return "history.\"money_transaction_shipping_etop\""
}
func (m MoneyTransactionShippingEtopHistories) SQLTableName() string {
	return "history.\"money_transaction_shipping_etop\""
}

func (m *MoneyTransactionShippingEtopHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingEtop_Select_history)
	return nil
}

func (m MoneyTransactionShippingEtopHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShippingEtop_Select_history)
	return nil
}

func (m MoneyTransactionShippingEtopHistory) ID() core.Interface   { return core.Interface{m["id"]} }
func (m MoneyTransactionShippingEtopHistory) Code() core.Interface { return core.Interface{m["code"]} }
func (m MoneyTransactionShippingEtopHistory) TotalCOD() core.Interface {
	return core.Interface{m["total_cod"]}
}
func (m MoneyTransactionShippingEtopHistory) TotalOrders() core.Interface {
	return core.Interface{m["total_orders"]}
}
func (m MoneyTransactionShippingEtopHistory) TotalAmount() core.Interface {
	return core.Interface{m["total_amount"]}
}
func (m MoneyTransactionShippingEtopHistory) TotalFee() core.Interface {
	return core.Interface{m["total_fee"]}
}
func (m MoneyTransactionShippingEtopHistory) TotalMoneyTransaction() core.Interface {
	return core.Interface{m["total_money_transaction"]}
}
func (m MoneyTransactionShippingEtopHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m MoneyTransactionShippingEtopHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}
func (m MoneyTransactionShippingEtopHistory) ConfirmedAt() core.Interface {
	return core.Interface{m["confirmed_at"]}
}
func (m MoneyTransactionShippingEtopHistory) Status() core.Interface {
	return core.Interface{m["status"]}
}
func (m MoneyTransactionShippingEtopHistory) BankAccount() core.Interface {
	return core.Interface{m["bank_account"]}
}
func (m MoneyTransactionShippingEtopHistory) Note() core.Interface { return core.Interface{m["note"]} }
func (m MoneyTransactionShippingEtopHistory) InvoiceNumber() core.Interface {
	return core.Interface{m["invoice_number"]}
}

func (m *MoneyTransactionShippingEtopHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(MoneyTransactionShippingEtopHistory, 14)
	res["id"] = data[0]
	res["code"] = data[1]
	res["total_cod"] = data[2]
	res["total_orders"] = data[3]
	res["total_amount"] = data[4]
	res["total_fee"] = data[5]
	res["total_money_transaction"] = data[6]
	res["created_at"] = data[7]
	res["updated_at"] = data[8]
	res["confirmed_at"] = data[9]
	res["status"] = data[10]
	res["bank_account"] = data[11]
	res["note"] = data[12]
	res["invoice_number"] = data[13]
	*m = res
	return nil
}

func (ms *MoneyTransactionShippingEtopHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	res := make(MoneyTransactionShippingEtopHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(MoneyTransactionShippingEtopHistory)
		m["id"] = data[0]
		m["code"] = data[1]
		m["total_cod"] = data[2]
		m["total_orders"] = data[3]
		m["total_amount"] = data[4]
		m["total_fee"] = data[5]
		m["total_money_transaction"] = data[6]
		m["created_at"] = data[7]
		m["updated_at"] = data[8]
		m["confirmed_at"] = data[9]
		m["status"] = data[10]
		m["bank_account"] = data[11]
		m["note"] = data[12]
		m["invoice_number"] = data[13]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
