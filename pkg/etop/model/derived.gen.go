// Code generated by goderive DO NOT EDIT.

package model

import (
	"database/sql"
	"time"

	sq "etop.vn/backend/pkg/common/sql"
	core "etop.vn/backend/pkg/common/sql/core"
)

// *EtopProduct is a substruct of *Product
func substructEtopProduct(_ *EtopProduct, _ *Product) bool { return true }

func EtopProductsFromProducts(ps []*Product) []*EtopProduct {
	ss := make([]*EtopProduct, len(ps))
	for i, p := range ps {
		ss[i] = NewEtopProductFromProduct(p)
	}
	return ss
}

func EtopProductsToProducts(ss []*EtopProduct) []*Product {
	ps := make([]*Product, len(ss))
	for i, s := range ss {
		ps[i] = s.ToProduct()
	}
	return ps
}

func NewEtopProductFromProduct(sp *Product) *EtopProduct {
	if sp == nil {
		return nil
	}
	s := new(EtopProduct)
	s.CopyFrom(sp)
	return s
}

func (s *EtopProduct) ToProduct() *Product {
	if s == nil {
		return nil
	}
	sp := new(Product)
	s.AssignTo(sp)
	return sp
}

func (s *EtopProduct) CopyFrom(sp *Product) {
	s.ID = sp.ID
	s.SupplierID = sp.SupplierID
	s.Name = sp.Name
	s.Description = sp.Description
	s.DescHTML = sp.DescHTML
	s.ShortDesc = sp.ShortDesc
	s.ImageURLs = sp.ImageURLs
	s.Status = sp.Status
	s.Code = sp.Code
	s.QuantityAvailable = sp.QuantityAvailable
	s.QuantityOnHand = sp.QuantityOnHand
	s.QuantityReserved = sp.QuantityReserved
}

func (s *EtopProduct) AssignTo(sp *Product) {
	sp.ID = s.ID
	sp.SupplierID = s.SupplierID
	sp.Name = s.Name
	sp.Description = s.Description
	sp.DescHTML = s.DescHTML
	sp.ShortDesc = s.ShortDesc
	sp.ImageURLs = s.ImageURLs
	sp.Status = s.Status
	sp.Code = s.Code
	sp.QuantityAvailable = s.QuantityAvailable
	sp.QuantityOnHand = s.QuantityOnHand
	sp.QuantityReserved = s.QuantityReserved
}

type SQLWriter = core.SQLWriter

// Type ProductBrand represents table product_brand
func sqlgenProductBrand(_ *ProductBrand) bool { return true }

type ProductBrands []*ProductBrand

const __sqlProductBrand_Table = "product_brand"
const __sqlProductBrand_ListCols = "\"id\",\"name\",\"description\",\"policy\",\"image_urls\",\"supplier_id\",\"created_at\",\"updated_at\""
const __sqlProductBrand_Insert = "INSERT INTO \"product_brand\" (" + __sqlProductBrand_ListCols + ") VALUES"
const __sqlProductBrand_Select = "SELECT " + __sqlProductBrand_ListCols + " FROM \"product_brand\""
const __sqlProductBrand_Select_history = "SELECT " + __sqlProductBrand_ListCols + " FROM history.\"product_brand\""
const __sqlProductBrand_UpdateAll = "UPDATE \"product_brand\" SET (" + __sqlProductBrand_ListCols + ")"

func (m *ProductBrand) SQLTableName() string  { return "product_brand" }
func (m *ProductBrands) SQLTableName() string { return "product_brand" }
func (m *ProductBrand) SQLListCols() string   { return __sqlProductBrand_ListCols }

func (m *ProductBrand) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.String(m.Name),
		core.String(m.Description),
		core.String(m.Policy),
		core.Array{m.ImageURLs, opts},
		core.Int64(m.SupplierID),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *ProductBrand) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.String)(&m.Name),
		(*core.String)(&m.Description),
		(*core.String)(&m.Policy),
		core.Array{&m.ImageURLs, opts},
		(*core.Int64)(&m.SupplierID),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *ProductBrand) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductBrands) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductBrands, 0, 128)
	for rows.Next() {
		m := new(ProductBrand)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ProductBrand) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductBrand_Select)
	return nil
}

func (_ *ProductBrands) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductBrand_Select)
	return nil
}

func (m *ProductBrand) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductBrand_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ProductBrands) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductBrand_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(8)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ProductBrand) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("product_brand")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.Policy != "" {
		flag = true
		w.WriteName("policy")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Policy)
	}
	if m.ImageURLs != nil {
		flag = true
		w.WriteName("image_urls")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ImageURLs, opts})
	}
	if m.SupplierID != 0 {
		flag = true
		w.WriteName("supplier_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SupplierID)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ProductBrand) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlProductBrand_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ProductBrandHistory map[string]interface{}
type ProductBrandHistories []map[string]interface{}

func (m *ProductBrandHistory) SQLTableName() string  { return "history.\"product_brand\"" }
func (m ProductBrandHistories) SQLTableName() string { return "history.\"product_brand\"" }

func (m *ProductBrandHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductBrand_Select_history)
	return nil
}

func (m ProductBrandHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductBrand_Select_history)
	return nil
}

func (m ProductBrandHistory) ID() core.Interface          { return core.Interface{m["id"]} }
func (m ProductBrandHistory) Name() core.Interface        { return core.Interface{m["name"]} }
func (m ProductBrandHistory) Description() core.Interface { return core.Interface{m["description"]} }
func (m ProductBrandHistory) Policy() core.Interface      { return core.Interface{m["policy"]} }
func (m ProductBrandHistory) ImageURLs() core.Interface   { return core.Interface{m["image_urls"]} }
func (m ProductBrandHistory) SupplierID() core.Interface  { return core.Interface{m["supplier_id"]} }
func (m ProductBrandHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m ProductBrandHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }

func (m *ProductBrandHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ProductBrandHistory, 8)
	res["id"] = data[0]
	res["name"] = data[1]
	res["description"] = data[2]
	res["policy"] = data[3]
	res["image_urls"] = data[4]
	res["supplier_id"] = data[5]
	res["created_at"] = data[6]
	res["updated_at"] = data[7]
	*m = res
	return nil
}

func (ms *ProductBrandHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	res := make(ProductBrandHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ProductBrandHistory)
		m["id"] = data[0]
		m["name"] = data[1]
		m["description"] = data[2]
		m["policy"] = data[3]
		m["image_urls"] = data[4]
		m["supplier_id"] = data[5]
		m["created_at"] = data[6]
		m["updated_at"] = data[7]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ProductBrandExtended represents a join
func sqlgenProductBrandExtended(_ *ProductBrandExtended, _ *ProductBrand, as sq.AS, t0 sq.JOIN_TYPE, _ *Supplier, a0 sq.AS, c0 string) bool {
	__sqlProductBrandExtended_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlProductBrandExtended_As = as
	__sqlProductBrandExtended_JoinAs = []sq.AS{a0}
	__sqlProductBrandExtended_JoinConds = []string{c0}
	return true
}

type ProductBrandExtendeds []*ProductBrandExtended

var __sqlProductBrandExtended_JoinTypes []sq.JOIN_TYPE
var __sqlProductBrandExtended_As sq.AS
var __sqlProductBrandExtended_JoinAs []sq.AS
var __sqlProductBrandExtended_JoinConds []string

func (m *ProductBrandExtended) SQLTableName() string  { return "product_brand" }
func (m *ProductBrandExtendeds) SQLTableName() string { return "product_brand" }

func (m *ProductBrandExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductBrandExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductBrandExtendeds, 0, 128)
	for rows.Next() {
		m := new(ProductBrandExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ProductBrandExtended) SQLSelect(w SQLWriter) error {
	(*ProductBrandExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ProductBrandExtended)(nil).__sqlJoin(w, __sqlProductBrandExtended_JoinTypes)
	return nil
}

func (m *ProductBrandExtendeds) SQLSelect(w SQLWriter) error {
	return (*ProductBrandExtended)(nil).SQLSelect(w)
}

func (m *ProductBrandExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlProductBrandExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ProductBrandExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ProductBrandExtended)(nil).SQLJoin(w, types)
}

func (m *ProductBrandExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlProductBrandExtended_As), (*ProductBrand)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlProductBrandExtended_JoinAs[0]), (*Supplier)(nil).SQLListCols())
}

func (m *ProductBrandExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("product_brand")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductBrandExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Supplier)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductBrandExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlProductBrandExtended_JoinConds[0])
}

func (m *ProductBrandExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.ProductBrand = new(ProductBrand)
	args = append(args, m.ProductBrand.SQLScanArgs(opts)...)
	m.Supplier = new(Supplier)
	args = append(args, m.Supplier.SQLScanArgs(opts)...)

	return args
}

// Type ImportAttempt represents table import_attempt
func sqlgenImportAttempt(_ *ImportAttempt) bool { return true }

type ImportAttempts []*ImportAttempt

const __sqlImportAttempt_Table = "import_attempt"
const __sqlImportAttempt_ListCols = "\"id\",\"user_id\",\"account_id\",\"original_file\",\"stored_file\",\"type\",\"n_created\",\"n_updated\",\"n_error\",\"status\",\"error_type\",\"errors\",\"duration_ms\",\"created_at\""
const __sqlImportAttempt_Insert = "INSERT INTO \"import_attempt\" (" + __sqlImportAttempt_ListCols + ") VALUES"
const __sqlImportAttempt_Select = "SELECT " + __sqlImportAttempt_ListCols + " FROM \"import_attempt\""
const __sqlImportAttempt_Select_history = "SELECT " + __sqlImportAttempt_ListCols + " FROM history.\"import_attempt\""
const __sqlImportAttempt_UpdateAll = "UPDATE \"import_attempt\" SET (" + __sqlImportAttempt_ListCols + ")"

func (m *ImportAttempt) SQLTableName() string  { return "import_attempt" }
func (m *ImportAttempts) SQLTableName() string { return "import_attempt" }
func (m *ImportAttempt) SQLListCols() string   { return __sqlImportAttempt_ListCols }

func (m *ImportAttempt) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.UserID),
		core.Int64(m.AccountID),
		core.String(m.OriginalFile),
		core.String(m.StoredFile),
		core.String(m.Type),
		core.Int(m.NCreated),
		core.Int(m.NUpdated),
		core.Int(m.NError),
		core.Int(m.Status),
		core.String(m.ErrorType),
		core.JSON{m.Errors},
		core.Int(m.DurationMs),
		core.Now(m.CreatedAt, now, create),
	}
}

func (m *ImportAttempt) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.UserID),
		(*core.Int64)(&m.AccountID),
		(*core.String)(&m.OriginalFile),
		(*core.String)(&m.StoredFile),
		(*core.String)(&m.Type),
		(*core.Int)(&m.NCreated),
		(*core.Int)(&m.NUpdated),
		(*core.Int)(&m.NError),
		(*core.Int)(&m.Status),
		(*core.String)(&m.ErrorType),
		core.JSON{&m.Errors},
		(*core.Int)(&m.DurationMs),
		(*core.Time)(&m.CreatedAt),
	}
}

func (m *ImportAttempt) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ImportAttempts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ImportAttempts, 0, 128)
	for rows.Next() {
		m := new(ImportAttempt)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ImportAttempt) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlImportAttempt_Select)
	return nil
}

func (_ *ImportAttempts) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlImportAttempt_Select)
	return nil
}

func (m *ImportAttempt) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlImportAttempt_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ImportAttempts) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlImportAttempt_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(14)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ImportAttempt) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("import_attempt")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.UserID != 0 {
		flag = true
		w.WriteName("user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UserID)
	}
	if m.AccountID != 0 {
		flag = true
		w.WriteName("account_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccountID)
	}
	if m.OriginalFile != "" {
		flag = true
		w.WriteName("original_file")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OriginalFile)
	}
	if m.StoredFile != "" {
		flag = true
		w.WriteName("stored_file")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.StoredFile)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(string(m.Type))
	}
	if m.NCreated != 0 {
		flag = true
		w.WriteName("n_created")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.NCreated)
	}
	if m.NUpdated != 0 {
		flag = true
		w.WriteName("n_updated")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.NUpdated)
	}
	if m.NError != 0 {
		flag = true
		w.WriteName("n_error")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.NError)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if m.ErrorType != "" {
		flag = true
		w.WriteName("error_type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ErrorType)
	}
	if m.Errors != nil {
		flag = true
		w.WriteName("errors")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Errors})
	}
	if m.DurationMs != 0 {
		flag = true
		w.WriteName("duration_ms")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DurationMs)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ImportAttempt) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlImportAttempt_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ImportAttemptHistory map[string]interface{}
type ImportAttemptHistories []map[string]interface{}

func (m *ImportAttemptHistory) SQLTableName() string  { return "history.\"import_attempt\"" }
func (m ImportAttemptHistories) SQLTableName() string { return "history.\"import_attempt\"" }

func (m *ImportAttemptHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlImportAttempt_Select_history)
	return nil
}

func (m ImportAttemptHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlImportAttempt_Select_history)
	return nil
}

func (m ImportAttemptHistory) ID() core.Interface           { return core.Interface{m["id"]} }
func (m ImportAttemptHistory) UserID() core.Interface       { return core.Interface{m["user_id"]} }
func (m ImportAttemptHistory) AccountID() core.Interface    { return core.Interface{m["account_id"]} }
func (m ImportAttemptHistory) OriginalFile() core.Interface { return core.Interface{m["original_file"]} }
func (m ImportAttemptHistory) StoredFile() core.Interface   { return core.Interface{m["stored_file"]} }
func (m ImportAttemptHistory) Type() core.Interface         { return core.Interface{m["type"]} }
func (m ImportAttemptHistory) NCreated() core.Interface     { return core.Interface{m["n_created"]} }
func (m ImportAttemptHistory) NUpdated() core.Interface     { return core.Interface{m["n_updated"]} }
func (m ImportAttemptHistory) NError() core.Interface       { return core.Interface{m["n_error"]} }
func (m ImportAttemptHistory) Status() core.Interface       { return core.Interface{m["status"]} }
func (m ImportAttemptHistory) ErrorType() core.Interface    { return core.Interface{m["error_type"]} }
func (m ImportAttemptHistory) Errors() core.Interface       { return core.Interface{m["errors"]} }
func (m ImportAttemptHistory) DurationMs() core.Interface   { return core.Interface{m["duration_ms"]} }
func (m ImportAttemptHistory) CreatedAt() core.Interface    { return core.Interface{m["created_at"]} }

func (m *ImportAttemptHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ImportAttemptHistory, 14)
	res["id"] = data[0]
	res["user_id"] = data[1]
	res["account_id"] = data[2]
	res["original_file"] = data[3]
	res["stored_file"] = data[4]
	res["type"] = data[5]
	res["n_created"] = data[6]
	res["n_updated"] = data[7]
	res["n_error"] = data[8]
	res["status"] = data[9]
	res["error_type"] = data[10]
	res["errors"] = data[11]
	res["duration_ms"] = data[12]
	res["created_at"] = data[13]
	*m = res
	return nil
}

func (ms *ImportAttemptHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	res := make(ImportAttemptHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ImportAttemptHistory)
		m["id"] = data[0]
		m["user_id"] = data[1]
		m["account_id"] = data[2]
		m["original_file"] = data[3]
		m["stored_file"] = data[4]
		m["type"] = data[5]
		m["n_created"] = data[6]
		m["n_updated"] = data[7]
		m["n_error"] = data[8]
		m["status"] = data[9]
		m["error_type"] = data[10]
		m["errors"] = data[11]
		m["duration_ms"] = data[12]
		m["created_at"] = data[13]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ExportAttempt represents table export_attempt
func sqlgenExportAttempt(_ *ExportAttempt) bool { return true }

type ExportAttempts []*ExportAttempt

const __sqlExportAttempt_Table = "export_attempt"
const __sqlExportAttempt_ListCols = "\"id\",\"user_id\",\"account_id\",\"export_type\",\"filename\",\"stored_file\",\"download_url\",\"request_query\",\"mime_type\",\"status\",\"errors\",\"error\",\"n_total\",\"n_exported\",\"n_error\",\"created_at\",\"deleted_at\",\"started_at\",\"done_at\",\"expires_at\""
const __sqlExportAttempt_Insert = "INSERT INTO \"export_attempt\" (" + __sqlExportAttempt_ListCols + ") VALUES"
const __sqlExportAttempt_Select = "SELECT " + __sqlExportAttempt_ListCols + " FROM \"export_attempt\""
const __sqlExportAttempt_Select_history = "SELECT " + __sqlExportAttempt_ListCols + " FROM history.\"export_attempt\""
const __sqlExportAttempt_UpdateAll = "UPDATE \"export_attempt\" SET (" + __sqlExportAttempt_ListCols + ")"

func (m *ExportAttempt) SQLTableName() string  { return "export_attempt" }
func (m *ExportAttempts) SQLTableName() string { return "export_attempt" }
func (m *ExportAttempt) SQLListCols() string   { return __sqlExportAttempt_ListCols }

func (m *ExportAttempt) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.String(m.ID),
		core.Int64(m.UserID),
		core.Int64(m.AccountID),
		core.String(m.ExportType),
		core.String(m.FileName),
		core.String(m.StoredFile),
		core.String(m.DownloadURL),
		core.String(m.RequestQuery),
		core.String(m.MimeType),
		core.Int(m.Status),
		core.JSON{m.Errors},
		core.JSON{m.Error},
		core.Int(m.NTotal),
		core.Int(m.NExported),
		core.Int(m.NError),
		core.Now(m.CreatedAt, now, create),
		core.Time(m.DeletedAt),
		core.Time(m.StartedAt),
		core.Time(m.DoneAt),
		core.Time(m.ExpiresAt),
	}
}

func (m *ExportAttempt) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.String)(&m.ID),
		(*core.Int64)(&m.UserID),
		(*core.Int64)(&m.AccountID),
		(*core.String)(&m.ExportType),
		(*core.String)(&m.FileName),
		(*core.String)(&m.StoredFile),
		(*core.String)(&m.DownloadURL),
		(*core.String)(&m.RequestQuery),
		(*core.String)(&m.MimeType),
		(*core.Int)(&m.Status),
		core.JSON{&m.Errors},
		core.JSON{&m.Error},
		(*core.Int)(&m.NTotal),
		(*core.Int)(&m.NExported),
		(*core.Int)(&m.NError),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.DeletedAt),
		(*core.Time)(&m.StartedAt),
		(*core.Time)(&m.DoneAt),
		(*core.Time)(&m.ExpiresAt),
	}
}

func (m *ExportAttempt) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ExportAttempts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ExportAttempts, 0, 128)
	for rows.Next() {
		m := new(ExportAttempt)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ExportAttempt) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlExportAttempt_Select)
	return nil
}

func (_ *ExportAttempts) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlExportAttempt_Select)
	return nil
}

func (m *ExportAttempt) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlExportAttempt_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(20)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ExportAttempts) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlExportAttempt_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(20)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ExportAttempt) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("export_attempt")
	w.WriteRawString(" SET ")
	if m.ID != "" {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.UserID != 0 {
		flag = true
		w.WriteName("user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UserID)
	}
	if m.AccountID != 0 {
		flag = true
		w.WriteName("account_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccountID)
	}
	if m.ExportType != "" {
		flag = true
		w.WriteName("export_type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExportType)
	}
	if m.FileName != "" {
		flag = true
		w.WriteName("filename")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FileName)
	}
	if m.StoredFile != "" {
		flag = true
		w.WriteName("stored_file")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.StoredFile)
	}
	if m.DownloadURL != "" {
		flag = true
		w.WriteName("download_url")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DownloadURL)
	}
	if m.RequestQuery != "" {
		flag = true
		w.WriteName("request_query")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RequestQuery)
	}
	if m.MimeType != "" {
		flag = true
		w.WriteName("mime_type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.MimeType)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if m.Errors != nil {
		flag = true
		w.WriteName("errors")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Errors})
	}
	if m.Error != nil {
		flag = true
		w.WriteName("error")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Error})
	}
	if m.NTotal != 0 {
		flag = true
		w.WriteName("n_total")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.NTotal)
	}
	if m.NExported != 0 {
		flag = true
		w.WriteName("n_exported")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.NExported)
	}
	if m.NError != 0 {
		flag = true
		w.WriteName("n_error")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.NError)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !m.StartedAt.IsZero() {
		flag = true
		w.WriteName("started_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.StartedAt)
	}
	if !m.DoneAt.IsZero() {
		flag = true
		w.WriteName("done_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DoneAt)
	}
	if !m.ExpiresAt.IsZero() {
		flag = true
		w.WriteName("expires_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExpiresAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ExportAttempt) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlExportAttempt_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(20)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ExportAttemptHistory map[string]interface{}
type ExportAttemptHistories []map[string]interface{}

func (m *ExportAttemptHistory) SQLTableName() string  { return "history.\"export_attempt\"" }
func (m ExportAttemptHistories) SQLTableName() string { return "history.\"export_attempt\"" }

func (m *ExportAttemptHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlExportAttempt_Select_history)
	return nil
}

func (m ExportAttemptHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlExportAttempt_Select_history)
	return nil
}

func (m ExportAttemptHistory) ID() core.Interface           { return core.Interface{m["id"]} }
func (m ExportAttemptHistory) UserID() core.Interface       { return core.Interface{m["user_id"]} }
func (m ExportAttemptHistory) AccountID() core.Interface    { return core.Interface{m["account_id"]} }
func (m ExportAttemptHistory) ExportType() core.Interface   { return core.Interface{m["export_type"]} }
func (m ExportAttemptHistory) FileName() core.Interface     { return core.Interface{m["filename"]} }
func (m ExportAttemptHistory) StoredFile() core.Interface   { return core.Interface{m["stored_file"]} }
func (m ExportAttemptHistory) DownloadURL() core.Interface  { return core.Interface{m["download_url"]} }
func (m ExportAttemptHistory) RequestQuery() core.Interface { return core.Interface{m["request_query"]} }
func (m ExportAttemptHistory) MimeType() core.Interface     { return core.Interface{m["mime_type"]} }
func (m ExportAttemptHistory) Status() core.Interface       { return core.Interface{m["status"]} }
func (m ExportAttemptHistory) Errors() core.Interface       { return core.Interface{m["errors"]} }
func (m ExportAttemptHistory) Error() core.Interface        { return core.Interface{m["error"]} }
func (m ExportAttemptHistory) NTotal() core.Interface       { return core.Interface{m["n_total"]} }
func (m ExportAttemptHistory) NExported() core.Interface    { return core.Interface{m["n_exported"]} }
func (m ExportAttemptHistory) NError() core.Interface       { return core.Interface{m["n_error"]} }
func (m ExportAttemptHistory) CreatedAt() core.Interface    { return core.Interface{m["created_at"]} }
func (m ExportAttemptHistory) DeletedAt() core.Interface    { return core.Interface{m["deleted_at"]} }
func (m ExportAttemptHistory) StartedAt() core.Interface    { return core.Interface{m["started_at"]} }
func (m ExportAttemptHistory) DoneAt() core.Interface       { return core.Interface{m["done_at"]} }
func (m ExportAttemptHistory) ExpiresAt() core.Interface    { return core.Interface{m["expires_at"]} }

func (m *ExportAttemptHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 20)
	args := make([]interface{}, 20)
	for i := 0; i < 20; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ExportAttemptHistory, 20)
	res["id"] = data[0]
	res["user_id"] = data[1]
	res["account_id"] = data[2]
	res["export_type"] = data[3]
	res["filename"] = data[4]
	res["stored_file"] = data[5]
	res["download_url"] = data[6]
	res["request_query"] = data[7]
	res["mime_type"] = data[8]
	res["status"] = data[9]
	res["errors"] = data[10]
	res["error"] = data[11]
	res["n_total"] = data[12]
	res["n_exported"] = data[13]
	res["n_error"] = data[14]
	res["created_at"] = data[15]
	res["deleted_at"] = data[16]
	res["started_at"] = data[17]
	res["done_at"] = data[18]
	res["expires_at"] = data[19]
	*m = res
	return nil
}

func (ms *ExportAttemptHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 20)
	args := make([]interface{}, 20)
	for i := 0; i < 20; i++ {
		args[i] = &data[i]
	}
	res := make(ExportAttemptHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ExportAttemptHistory)
		m["id"] = data[0]
		m["user_id"] = data[1]
		m["account_id"] = data[2]
		m["export_type"] = data[3]
		m["filename"] = data[4]
		m["stored_file"] = data[5]
		m["download_url"] = data[6]
		m["request_query"] = data[7]
		m["mime_type"] = data[8]
		m["status"] = data[9]
		m["errors"] = data[10]
		m["error"] = data[11]
		m["n_total"] = data[12]
		m["n_exported"] = data[13]
		m["n_error"] = data[14]
		m["created_at"] = data[15]
		m["deleted_at"] = data[16]
		m["started_at"] = data[17]
		m["done_at"] = data[18]
		m["expires_at"] = data[19]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type Account represents table account
func sqlgenAccount(_ *Account) bool { return true }

type Accounts []*Account

const __sqlAccount_Table = "account"
const __sqlAccount_ListCols = "\"id\",\"owner_id\",\"name\",\"type\",\"image_url\",\"url_slug\""
const __sqlAccount_Insert = "INSERT INTO \"account\" (" + __sqlAccount_ListCols + ") VALUES"
const __sqlAccount_Select = "SELECT " + __sqlAccount_ListCols + " FROM \"account\""
const __sqlAccount_Select_history = "SELECT " + __sqlAccount_ListCols + " FROM history.\"account\""
const __sqlAccount_UpdateAll = "UPDATE \"account\" SET (" + __sqlAccount_ListCols + ")"

func (m *Account) SQLTableName() string  { return "account" }
func (m *Accounts) SQLTableName() string { return "account" }
func (m *Account) SQLListCols() string   { return __sqlAccount_ListCols }

func (m *Account) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.OwnerID),
		core.String(m.Name),
		core.String(m.Type),
		core.String(m.ImageURL),
		core.String(m.URLSlug),
	}
}

func (m *Account) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.OwnerID),
		(*core.String)(&m.Name),
		(*core.String)(&m.Type),
		(*core.String)(&m.ImageURL),
		(*core.String)(&m.URLSlug),
	}
}

func (m *Account) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Accounts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Accounts, 0, 128)
	for rows.Next() {
		m := new(Account)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Account) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAccount_Select)
	return nil
}

func (_ *Accounts) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAccount_Select)
	return nil
}

func (m *Account) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlAccount_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Accounts) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlAccount_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(6)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Account) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("account")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.OwnerID != 0 {
		flag = true
		w.WriteName("owner_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OwnerID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(string(m.Type))
	}
	if m.ImageURL != "" {
		flag = true
		w.WriteName("image_url")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ImageURL)
	}
	if m.URLSlug != "" {
		flag = true
		w.WriteName("url_slug")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.URLSlug)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Account) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlAccount_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type AccountHistory map[string]interface{}
type AccountHistories []map[string]interface{}

func (m *AccountHistory) SQLTableName() string  { return "history.\"account\"" }
func (m AccountHistories) SQLTableName() string { return "history.\"account\"" }

func (m *AccountHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAccount_Select_history)
	return nil
}

func (m AccountHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAccount_Select_history)
	return nil
}

func (m AccountHistory) ID() core.Interface       { return core.Interface{m["id"]} }
func (m AccountHistory) OwnerID() core.Interface  { return core.Interface{m["owner_id"]} }
func (m AccountHistory) Name() core.Interface     { return core.Interface{m["name"]} }
func (m AccountHistory) Type() core.Interface     { return core.Interface{m["type"]} }
func (m AccountHistory) ImageURL() core.Interface { return core.Interface{m["image_url"]} }
func (m AccountHistory) URLSlug() core.Interface  { return core.Interface{m["url_slug"]} }

func (m *AccountHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(AccountHistory, 6)
	res["id"] = data[0]
	res["owner_id"] = data[1]
	res["name"] = data[2]
	res["type"] = data[3]
	res["image_url"] = data[4]
	res["url_slug"] = data[5]
	*m = res
	return nil
}

func (ms *AccountHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	res := make(AccountHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(AccountHistory)
		m["id"] = data[0]
		m["owner_id"] = data[1]
		m["name"] = data[2]
		m["type"] = data[3]
		m["image_url"] = data[4]
		m["url_slug"] = data[5]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type Shop represents table shop
func sqlgenShop(_ *Shop) bool { return true }

type Shops []*Shop

const __sqlShop_Table = "shop"
const __sqlShop_ListCols = "\"id\",\"name\",\"owner_id\",\"is_test\",\"address_id\",\"ship_to_address_id\",\"ship_from_address_id\",\"phone\",\"bank_account\",\"website_url\",\"image_url\",\"email\",\"code\",\"auto_create_ffm\",\"product_source_id\",\"order_source_id\",\"status\",\"created_at\",\"updated_at\",\"deleted_at\",\"recognized_hosts\",\"ghn_note_code\",\"try_on\",\"company_info\",\"money_transaction_rrule\",\"survey_info\",\"shipping_service_select_strategy\""
const __sqlShop_Insert = "INSERT INTO \"shop\" (" + __sqlShop_ListCols + ") VALUES"
const __sqlShop_Select = "SELECT " + __sqlShop_ListCols + " FROM \"shop\""
const __sqlShop_Select_history = "SELECT " + __sqlShop_ListCols + " FROM history.\"shop\""
const __sqlShop_UpdateAll = "UPDATE \"shop\" SET (" + __sqlShop_ListCols + ")"

func (m *Shop) SQLTableName() string  { return "shop" }
func (m *Shops) SQLTableName() string { return "shop" }
func (m *Shop) SQLListCols() string   { return __sqlShop_ListCols }

func (m *Shop) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.String(m.Name),
		core.Int64(m.OwnerID),
		core.Int(m.IsTest),
		core.Int64(m.AddressID),
		core.Int64(m.ShipToAddressID),
		core.Int64(m.ShipFromAddressID),
		core.String(m.Phone),
		core.JSON{m.BankAccount},
		core.String(m.WebsiteURL),
		core.String(m.ImageURL),
		core.String(m.Email),
		core.String(m.Code),
		core.Bool(m.AutoCreateFFM),
		core.Int64(m.ProductSourceID),
		core.Int64(m.OrderSourceID),
		core.Int(m.Status),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
		core.Array{m.RecognizedHosts, opts},
		core.String(m.GhnNoteCode),
		core.String(m.TryOn),
		core.JSON{m.CompanyInfo},
		core.String(m.MoneyTransactionRRule),
		core.JSON{m.SurveyInfo},
		core.JSON{m.ShippingServiceSelectStrategy},
	}
}

func (m *Shop) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.String)(&m.Name),
		(*core.Int64)(&m.OwnerID),
		(*core.Int)(&m.IsTest),
		(*core.Int64)(&m.AddressID),
		(*core.Int64)(&m.ShipToAddressID),
		(*core.Int64)(&m.ShipFromAddressID),
		(*core.String)(&m.Phone),
		core.JSON{&m.BankAccount},
		(*core.String)(&m.WebsiteURL),
		(*core.String)(&m.ImageURL),
		(*core.String)(&m.Email),
		(*core.String)(&m.Code),
		(*core.Bool)(&m.AutoCreateFFM),
		(*core.Int64)(&m.ProductSourceID),
		(*core.Int64)(&m.OrderSourceID),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
		core.Array{&m.RecognizedHosts, opts},
		(*core.String)(&m.GhnNoteCode),
		(*core.String)(&m.TryOn),
		core.JSON{&m.CompanyInfo},
		(*core.String)(&m.MoneyTransactionRRule),
		core.JSON{&m.SurveyInfo},
		core.JSON{&m.ShippingServiceSelectStrategy},
	}
}

func (m *Shop) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Shops) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Shops, 0, 128)
	for rows.Next() {
		m := new(Shop)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Shop) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShop_Select)
	return nil
}

func (_ *Shops) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShop_Select)
	return nil
}

func (m *Shop) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShop_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(27)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Shops) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShop_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(27)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Shop) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.OwnerID != 0 {
		flag = true
		w.WriteName("owner_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OwnerID)
	}
	if m.IsTest != 0 {
		flag = true
		w.WriteName("is_test")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.IsTest)
	}
	if m.AddressID != 0 {
		flag = true
		w.WriteName("address_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AddressID)
	}
	if m.ShipToAddressID != 0 {
		flag = true
		w.WriteName("ship_to_address_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShipToAddressID)
	}
	if m.ShipFromAddressID != 0 {
		flag = true
		w.WriteName("ship_from_address_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShipFromAddressID)
	}
	if m.Phone != "" {
		flag = true
		w.WriteName("phone")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Phone)
	}
	if m.BankAccount != nil {
		flag = true
		w.WriteName("bank_account")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.BankAccount})
	}
	if m.WebsiteURL != "" {
		flag = true
		w.WriteName("website_url")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WebsiteURL)
	}
	if m.ImageURL != "" {
		flag = true
		w.WriteName("image_url")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ImageURL)
	}
	if m.Email != "" {
		flag = true
		w.WriteName("email")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Email)
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.AutoCreateFFM {
		flag = true
		w.WriteName("auto_create_ffm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AutoCreateFFM)
	}
	if m.ProductSourceID != 0 {
		flag = true
		w.WriteName("product_source_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductSourceID)
	}
	if m.OrderSourceID != 0 {
		flag = true
		w.WriteName("order_source_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OrderSourceID)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if m.RecognizedHosts != nil {
		flag = true
		w.WriteName("recognized_hosts")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.RecognizedHosts, opts})
	}
	if m.GhnNoteCode != "" {
		flag = true
		w.WriteName("ghn_note_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.GhnNoteCode)
	}
	if m.TryOn != "" {
		flag = true
		w.WriteName("try_on")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(string(m.TryOn))
	}
	if m.CompanyInfo != nil {
		flag = true
		w.WriteName("company_info")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.CompanyInfo})
	}
	if m.MoneyTransactionRRule != "" {
		flag = true
		w.WriteName("money_transaction_rrule")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.MoneyTransactionRRule)
	}
	if m.SurveyInfo != nil {
		flag = true
		w.WriteName("survey_info")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.SurveyInfo})
	}
	if m.ShippingServiceSelectStrategy != nil {
		flag = true
		w.WriteName("shipping_service_select_strategy")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ShippingServiceSelectStrategy})
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Shop) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShop_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(27)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopHistory map[string]interface{}
type ShopHistories []map[string]interface{}

func (m *ShopHistory) SQLTableName() string  { return "history.\"shop\"" }
func (m ShopHistories) SQLTableName() string { return "history.\"shop\"" }

func (m *ShopHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShop_Select_history)
	return nil
}

func (m ShopHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShop_Select_history)
	return nil
}

func (m ShopHistory) ID() core.Interface              { return core.Interface{m["id"]} }
func (m ShopHistory) Name() core.Interface            { return core.Interface{m["name"]} }
func (m ShopHistory) OwnerID() core.Interface         { return core.Interface{m["owner_id"]} }
func (m ShopHistory) IsTest() core.Interface          { return core.Interface{m["is_test"]} }
func (m ShopHistory) AddressID() core.Interface       { return core.Interface{m["address_id"]} }
func (m ShopHistory) ShipToAddressID() core.Interface { return core.Interface{m["ship_to_address_id"]} }
func (m ShopHistory) ShipFromAddressID() core.Interface {
	return core.Interface{m["ship_from_address_id"]}
}
func (m ShopHistory) Phone() core.Interface           { return core.Interface{m["phone"]} }
func (m ShopHistory) BankAccount() core.Interface     { return core.Interface{m["bank_account"]} }
func (m ShopHistory) WebsiteURL() core.Interface      { return core.Interface{m["website_url"]} }
func (m ShopHistory) ImageURL() core.Interface        { return core.Interface{m["image_url"]} }
func (m ShopHistory) Email() core.Interface           { return core.Interface{m["email"]} }
func (m ShopHistory) Code() core.Interface            { return core.Interface{m["code"]} }
func (m ShopHistory) AutoCreateFFM() core.Interface   { return core.Interface{m["auto_create_ffm"]} }
func (m ShopHistory) ProductSourceID() core.Interface { return core.Interface{m["product_source_id"]} }
func (m ShopHistory) OrderSourceID() core.Interface   { return core.Interface{m["order_source_id"]} }
func (m ShopHistory) Status() core.Interface          { return core.Interface{m["status"]} }
func (m ShopHistory) CreatedAt() core.Interface       { return core.Interface{m["created_at"]} }
func (m ShopHistory) UpdatedAt() core.Interface       { return core.Interface{m["updated_at"]} }
func (m ShopHistory) DeletedAt() core.Interface       { return core.Interface{m["deleted_at"]} }
func (m ShopHistory) RecognizedHosts() core.Interface { return core.Interface{m["recognized_hosts"]} }
func (m ShopHistory) GhnNoteCode() core.Interface     { return core.Interface{m["ghn_note_code"]} }
func (m ShopHistory) TryOn() core.Interface           { return core.Interface{m["try_on"]} }
func (m ShopHistory) CompanyInfo() core.Interface     { return core.Interface{m["company_info"]} }
func (m ShopHistory) MoneyTransactionRRule() core.Interface {
	return core.Interface{m["money_transaction_rrule"]}
}
func (m ShopHistory) SurveyInfo() core.Interface { return core.Interface{m["survey_info"]} }
func (m ShopHistory) ShippingServiceSelectStrategy() core.Interface {
	return core.Interface{m["shipping_service_select_strategy"]}
}

func (m *ShopHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 27)
	args := make([]interface{}, 27)
	for i := 0; i < 27; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopHistory, 27)
	res["id"] = data[0]
	res["name"] = data[1]
	res["owner_id"] = data[2]
	res["is_test"] = data[3]
	res["address_id"] = data[4]
	res["ship_to_address_id"] = data[5]
	res["ship_from_address_id"] = data[6]
	res["phone"] = data[7]
	res["bank_account"] = data[8]
	res["website_url"] = data[9]
	res["image_url"] = data[10]
	res["email"] = data[11]
	res["code"] = data[12]
	res["auto_create_ffm"] = data[13]
	res["product_source_id"] = data[14]
	res["order_source_id"] = data[15]
	res["status"] = data[16]
	res["created_at"] = data[17]
	res["updated_at"] = data[18]
	res["deleted_at"] = data[19]
	res["recognized_hosts"] = data[20]
	res["ghn_note_code"] = data[21]
	res["try_on"] = data[22]
	res["company_info"] = data[23]
	res["money_transaction_rrule"] = data[24]
	res["survey_info"] = data[25]
	res["shipping_service_select_strategy"] = data[26]
	*m = res
	return nil
}

func (ms *ShopHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 27)
	args := make([]interface{}, 27)
	for i := 0; i < 27; i++ {
		args[i] = &data[i]
	}
	res := make(ShopHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopHistory)
		m["id"] = data[0]
		m["name"] = data[1]
		m["owner_id"] = data[2]
		m["is_test"] = data[3]
		m["address_id"] = data[4]
		m["ship_to_address_id"] = data[5]
		m["ship_from_address_id"] = data[6]
		m["phone"] = data[7]
		m["bank_account"] = data[8]
		m["website_url"] = data[9]
		m["image_url"] = data[10]
		m["email"] = data[11]
		m["code"] = data[12]
		m["auto_create_ffm"] = data[13]
		m["product_source_id"] = data[14]
		m["order_source_id"] = data[15]
		m["status"] = data[16]
		m["created_at"] = data[17]
		m["updated_at"] = data[18]
		m["deleted_at"] = data[19]
		m["recognized_hosts"] = data[20]
		m["ghn_note_code"] = data[21]
		m["try_on"] = data[22]
		m["company_info"] = data[23]
		m["money_transaction_rrule"] = data[24]
		m["survey_info"] = data[25]
		m["shipping_service_select_strategy"] = data[26]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ShopExtended represents a join
func sqlgenShopExtended(_ *ShopExtended, _ *Shop, as sq.AS, t0 sq.JOIN_TYPE, _ *Address, a0 sq.AS, c0 string, t1 sq.JOIN_TYPE, _ *User, a1 sq.AS, c1 string) bool {
	__sqlShopExtended_JoinTypes = []sq.JOIN_TYPE{t0, t1}
	__sqlShopExtended_As = as
	__sqlShopExtended_JoinAs = []sq.AS{a0, a1}
	__sqlShopExtended_JoinConds = []string{c0, c1}
	return true
}

type ShopExtendeds []*ShopExtended

var __sqlShopExtended_JoinTypes []sq.JOIN_TYPE
var __sqlShopExtended_As sq.AS
var __sqlShopExtended_JoinAs []sq.AS
var __sqlShopExtended_JoinConds []string

func (m *ShopExtended) SQLTableName() string  { return "shop" }
func (m *ShopExtendeds) SQLTableName() string { return "shop" }

func (m *ShopExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopExtendeds, 0, 128)
	for rows.Next() {
		m := new(ShopExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ShopExtended) SQLSelect(w SQLWriter) error {
	(*ShopExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ShopExtended)(nil).__sqlJoin(w, __sqlShopExtended_JoinTypes)
	return nil
}

func (m *ShopExtendeds) SQLSelect(w SQLWriter) error {
	return (*ShopExtended)(nil).SQLSelect(w)
}

func (m *ShopExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlShopExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ShopExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ShopExtended)(nil).SQLJoin(w, types)
}

func (m *ShopExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlShopExtended_As), (*Shop)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopExtended_JoinAs[0]), (*Address)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopExtended_JoinAs[1]), (*User)(nil).SQLListCols())
}

func (m *ShopExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 2 {
		panic("common/sql: expect 2 types to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("shop")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Address)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopExtended_JoinConds[0])
	w.WriteByte(' ')
	w.WriteRawString(string(types[1]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*User)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopExtended_JoinAs[1]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopExtended_JoinConds[1])
}

func (m *ShopExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.Shop = new(Shop)
	args = append(args, m.Shop.SQLScanArgs(opts)...)
	m.Address = new(Address)
	args = append(args, m.Address.SQLScanArgs(opts)...)
	m.User = new(User)
	args = append(args, m.User.SQLScanArgs(opts)...)

	return args
}

// *ShopDelete is a substruct of *Shop
func substructShopDelete(_ *ShopDelete, _ *Shop) bool { return true }

func ShopDeletesFromShops(ps []*Shop) []*ShopDelete {
	ss := make([]*ShopDelete, len(ps))
	for i, p := range ps {
		ss[i] = NewShopDeleteFromShop(p)
	}
	return ss
}

func ShopDeletesToShops(ss []*ShopDelete) []*Shop {
	ps := make([]*Shop, len(ss))
	for i, s := range ss {
		ps[i] = s.ToShop()
	}
	return ps
}

func NewShopDeleteFromShop(sp *Shop) *ShopDelete {
	if sp == nil {
		return nil
	}
	s := new(ShopDelete)
	s.CopyFrom(sp)
	return s
}

func (s *ShopDelete) ToShop() *Shop {
	if s == nil {
		return nil
	}
	sp := new(Shop)
	s.AssignTo(sp)
	return sp
}

func (s *ShopDelete) CopyFrom(sp *Shop) {
	s.DeletedAt = sp.DeletedAt
}

func (s *ShopDelete) AssignTo(sp *Shop) {
	sp.DeletedAt = s.DeletedAt
}

// Type ShopDelete represents table shop
func sqlgenShopDelete(_ *ShopDelete, _ *Shop) bool { return true }

type ShopDeletes []*ShopDelete

const __sqlShopDelete_Table = "shop"
const __sqlShopDelete_ListCols = "\"deleted_at\""
const __sqlShopDelete_Insert = "INSERT INTO \"shop\" (" + __sqlShopDelete_ListCols + ") VALUES"
const __sqlShopDelete_Select = "SELECT " + __sqlShopDelete_ListCols + " FROM \"shop\""
const __sqlShopDelete_Select_history = "SELECT " + __sqlShopDelete_ListCols + " FROM history.\"shop\""
const __sqlShopDelete_UpdateAll = "UPDATE \"shop\" SET (" + __sqlShopDelete_ListCols + ")"

func (m *ShopDelete) SQLTableName() string  { return "shop" }
func (m *ShopDeletes) SQLTableName() string { return "shop" }
func (m *ShopDelete) SQLListCols() string   { return __sqlShopDelete_ListCols }

func (m *ShopDelete) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.Time(m.DeletedAt),
	}
}

func (m *ShopDelete) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *ShopDelete) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopDeletes) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopDeletes, 0, 128)
	for rows.Next() {
		m := new(ShopDelete)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopDelete) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopDelete_Select)
	return nil
}

func (_ *ShopDeletes) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopDelete_Select)
	return nil
}

func (m *ShopDelete) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopDelete_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(1)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopDeletes) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopDelete_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(1)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopDelete) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop")
	w.WriteRawString(" SET ")
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopDelete) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopDelete_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(1)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopDeleteHistory map[string]interface{}
type ShopDeleteHistories []map[string]interface{}

func (m *ShopDeleteHistory) SQLTableName() string  { return "history.\"shop\"" }
func (m ShopDeleteHistories) SQLTableName() string { return "history.\"shop\"" }

func (m *ShopDeleteHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopDelete_Select_history)
	return nil
}

func (m ShopDeleteHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopDelete_Select_history)
	return nil
}

func (m ShopDeleteHistory) DeletedAt() core.Interface { return core.Interface{m["deleted_at"]} }

func (m *ShopDeleteHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 1)
	args := make([]interface{}, 1)
	for i := 0; i < 1; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopDeleteHistory, 1)
	res["deleted_at"] = data[0]
	*m = res
	return nil
}

func (ms *ShopDeleteHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 1)
	args := make([]interface{}, 1)
	for i := 0; i < 1; i++ {
		args[i] = &data[i]
	}
	res := make(ShopDeleteHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopDeleteHistory)
		m["deleted_at"] = data[0]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type EtopCategory represents table etop_category
func sqlgenEtopCatgory(_ *EtopCategory) bool { return true }

type EtopCategories []*EtopCategory

const __sqlEtopCategory_Table = "etop_category"
const __sqlEtopCategory_ListCols = "\"id\",\"name\",\"parent_id\",\"status\",\"created_at\",\"updated_at\""
const __sqlEtopCategory_Insert = "INSERT INTO \"etop_category\" (" + __sqlEtopCategory_ListCols + ") VALUES"
const __sqlEtopCategory_Select = "SELECT " + __sqlEtopCategory_ListCols + " FROM \"etop_category\""
const __sqlEtopCategory_Select_history = "SELECT " + __sqlEtopCategory_ListCols + " FROM history.\"etop_category\""
const __sqlEtopCategory_UpdateAll = "UPDATE \"etop_category\" SET (" + __sqlEtopCategory_ListCols + ")"

func (m *EtopCategory) SQLTableName() string   { return "etop_category" }
func (m *EtopCategories) SQLTableName() string { return "etop_category" }
func (m *EtopCategory) SQLListCols() string    { return __sqlEtopCategory_ListCols }

func (m *EtopCategory) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.String(m.Name),
		core.Int64(m.ParentID),
		core.Int(m.Status),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *EtopCategory) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.String)(&m.Name),
		(*core.Int64)(&m.ParentID),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *EtopCategory) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *EtopCategories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(EtopCategories, 0, 128)
	for rows.Next() {
		m := new(EtopCategory)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *EtopCategory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlEtopCategory_Select)
	return nil
}

func (_ *EtopCategories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlEtopCategory_Select)
	return nil
}

func (m *EtopCategory) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlEtopCategory_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms EtopCategories) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlEtopCategory_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(6)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *EtopCategory) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("etop_category")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.ParentID != 0 {
		flag = true
		w.WriteName("parent_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ParentID)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *EtopCategory) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlEtopCategory_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type EtopCategoryHistory map[string]interface{}
type EtopCategoryHistories []map[string]interface{}

func (m *EtopCategoryHistory) SQLTableName() string  { return "history.\"etop_category\"" }
func (m EtopCategoryHistories) SQLTableName() string { return "history.\"etop_category\"" }

func (m *EtopCategoryHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlEtopCategory_Select_history)
	return nil
}

func (m EtopCategoryHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlEtopCategory_Select_history)
	return nil
}

func (m EtopCategoryHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m EtopCategoryHistory) Name() core.Interface      { return core.Interface{m["name"]} }
func (m EtopCategoryHistory) ParentID() core.Interface  { return core.Interface{m["parent_id"]} }
func (m EtopCategoryHistory) Status() core.Interface    { return core.Interface{m["status"]} }
func (m EtopCategoryHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m EtopCategoryHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *EtopCategoryHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(EtopCategoryHistory, 6)
	res["id"] = data[0]
	res["name"] = data[1]
	res["parent_id"] = data[2]
	res["status"] = data[3]
	res["created_at"] = data[4]
	res["updated_at"] = data[5]
	*m = res
	return nil
}

func (ms *EtopCategoryHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	res := make(EtopCategoryHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(EtopCategoryHistory)
		m["id"] = data[0]
		m["name"] = data[1]
		m["parent_id"] = data[2]
		m["status"] = data[3]
		m["created_at"] = data[4]
		m["updated_at"] = data[5]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type Supplier represents table supplier
func sqlgenSupplier(_ *Supplier) bool { return true }

type Suppliers []*Supplier

const __sqlSupplier_Table = "supplier"
const __sqlSupplier_ListCols = "\"id\",\"status\",\"created_at\",\"updated_at\",\"is_test\",\"name\",\"owner_id\",\"image_url\",\"rules\",\"company_info\",\"warehouse_address_id\",\"bank_account\",\"contact_persons\",\"ship_from_address_id\",\"product_source_id\""
const __sqlSupplier_Insert = "INSERT INTO \"supplier\" (" + __sqlSupplier_ListCols + ") VALUES"
const __sqlSupplier_Select = "SELECT " + __sqlSupplier_ListCols + " FROM \"supplier\""
const __sqlSupplier_Select_history = "SELECT " + __sqlSupplier_ListCols + " FROM history.\"supplier\""
const __sqlSupplier_UpdateAll = "UPDATE \"supplier\" SET (" + __sqlSupplier_ListCols + ")"

func (m *Supplier) SQLTableName() string  { return "supplier" }
func (m *Suppliers) SQLTableName() string { return "supplier" }
func (m *Supplier) SQLListCols() string   { return __sqlSupplier_ListCols }

func (m *Supplier) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int(m.Status),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Int(m.IsTest),
		core.String(m.Name),
		core.Int64(m.OwnerID),
		core.String(m.ImageURL),
		core.JSON{m.Rules},
		core.JSON{m.CompanyInfo},
		core.Int64(m.WarehouseAddressID),
		core.JSON{m.BankAccount},
		core.JSON{m.ContactPersons},
		core.Int64(m.ShipFromAddressID),
		core.Int64(m.ProductSourceID),
	}
}

func (m *Supplier) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Int)(&m.IsTest),
		(*core.String)(&m.Name),
		(*core.Int64)(&m.OwnerID),
		(*core.String)(&m.ImageURL),
		core.JSON{&m.Rules},
		core.JSON{&m.CompanyInfo},
		(*core.Int64)(&m.WarehouseAddressID),
		core.JSON{&m.BankAccount},
		core.JSON{&m.ContactPersons},
		(*core.Int64)(&m.ShipFromAddressID),
		(*core.Int64)(&m.ProductSourceID),
	}
}

func (m *Supplier) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Suppliers) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Suppliers, 0, 128)
	for rows.Next() {
		m := new(Supplier)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Supplier) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplier_Select)
	return nil
}

func (_ *Suppliers) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplier_Select)
	return nil
}

func (m *Supplier) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplier_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(15)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Suppliers) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplier_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(15)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Supplier) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("supplier")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if m.IsTest != 0 {
		flag = true
		w.WriteName("is_test")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.IsTest)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.OwnerID != 0 {
		flag = true
		w.WriteName("owner_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OwnerID)
	}
	if m.ImageURL != "" {
		flag = true
		w.WriteName("image_url")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ImageURL)
	}
	if m.Rules != nil {
		flag = true
		w.WriteName("rules")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Rules})
	}
	if m.CompanyInfo != nil {
		flag = true
		w.WriteName("company_info")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.CompanyInfo})
	}
	if m.WarehouseAddressID != 0 {
		flag = true
		w.WriteName("warehouse_address_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WarehouseAddressID)
	}
	if m.BankAccount != nil {
		flag = true
		w.WriteName("bank_account")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.BankAccount})
	}
	if m.ContactPersons != nil {
		flag = true
		w.WriteName("contact_persons")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ContactPersons})
	}
	if m.ShipFromAddressID != 0 {
		flag = true
		w.WriteName("ship_from_address_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShipFromAddressID)
	}
	if m.ProductSourceID != 0 {
		flag = true
		w.WriteName("product_source_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductSourceID)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Supplier) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplier_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(15)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type SupplierHistory map[string]interface{}
type SupplierHistories []map[string]interface{}

func (m *SupplierHistory) SQLTableName() string  { return "history.\"supplier\"" }
func (m SupplierHistories) SQLTableName() string { return "history.\"supplier\"" }

func (m *SupplierHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplier_Select_history)
	return nil
}

func (m SupplierHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplier_Select_history)
	return nil
}

func (m SupplierHistory) ID() core.Interface          { return core.Interface{m["id"]} }
func (m SupplierHistory) Status() core.Interface      { return core.Interface{m["status"]} }
func (m SupplierHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m SupplierHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }
func (m SupplierHistory) IsTest() core.Interface      { return core.Interface{m["is_test"]} }
func (m SupplierHistory) Name() core.Interface        { return core.Interface{m["name"]} }
func (m SupplierHistory) OwnerID() core.Interface     { return core.Interface{m["owner_id"]} }
func (m SupplierHistory) ImageURL() core.Interface    { return core.Interface{m["image_url"]} }
func (m SupplierHistory) Rules() core.Interface       { return core.Interface{m["rules"]} }
func (m SupplierHistory) CompanyInfo() core.Interface { return core.Interface{m["company_info"]} }
func (m SupplierHistory) WarehouseAddressID() core.Interface {
	return core.Interface{m["warehouse_address_id"]}
}
func (m SupplierHistory) BankAccount() core.Interface    { return core.Interface{m["bank_account"]} }
func (m SupplierHistory) ContactPersons() core.Interface { return core.Interface{m["contact_persons"]} }
func (m SupplierHistory) ShipFromAddressID() core.Interface {
	return core.Interface{m["ship_from_address_id"]}
}
func (m SupplierHistory) ProductSourceID() core.Interface {
	return core.Interface{m["product_source_id"]}
}

func (m *SupplierHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 15)
	args := make([]interface{}, 15)
	for i := 0; i < 15; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(SupplierHistory, 15)
	res["id"] = data[0]
	res["status"] = data[1]
	res["created_at"] = data[2]
	res["updated_at"] = data[3]
	res["is_test"] = data[4]
	res["name"] = data[5]
	res["owner_id"] = data[6]
	res["image_url"] = data[7]
	res["rules"] = data[8]
	res["company_info"] = data[9]
	res["warehouse_address_id"] = data[10]
	res["bank_account"] = data[11]
	res["contact_persons"] = data[12]
	res["ship_from_address_id"] = data[13]
	res["product_source_id"] = data[14]
	*m = res
	return nil
}

func (ms *SupplierHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 15)
	args := make([]interface{}, 15)
	for i := 0; i < 15; i++ {
		args[i] = &data[i]
	}
	res := make(SupplierHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(SupplierHistory)
		m["id"] = data[0]
		m["status"] = data[1]
		m["created_at"] = data[2]
		m["updated_at"] = data[3]
		m["is_test"] = data[4]
		m["name"] = data[5]
		m["owner_id"] = data[6]
		m["image_url"] = data[7]
		m["rules"] = data[8]
		m["company_info"] = data[9]
		m["warehouse_address_id"] = data[10]
		m["bank_account"] = data[11]
		m["contact_persons"] = data[12]
		m["ship_from_address_id"] = data[13]
		m["product_source_id"] = data[14]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// *SupplierInfo is a substruct of *Supplier
func substructSupplierInfo(_ *SupplierInfo, _ *Supplier) bool { return true }

func SupplierInfoesFromSuppliers(ps []*Supplier) []*SupplierInfo {
	ss := make([]*SupplierInfo, len(ps))
	for i, p := range ps {
		ss[i] = NewSupplierInfoFromSupplier(p)
	}
	return ss
}

func SupplierInfoesToSuppliers(ss []*SupplierInfo) []*Supplier {
	ps := make([]*Supplier, len(ss))
	for i, s := range ss {
		ps[i] = s.ToSupplier()
	}
	return ps
}

func NewSupplierInfoFromSupplier(sp *Supplier) *SupplierInfo {
	if sp == nil {
		return nil
	}
	s := new(SupplierInfo)
	s.CopyFrom(sp)
	return s
}

func (s *SupplierInfo) ToSupplier() *Supplier {
	if s == nil {
		return nil
	}
	sp := new(Supplier)
	s.AssignTo(sp)
	return sp
}

func (s *SupplierInfo) CopyFrom(sp *Supplier) {
	s.Name = sp.Name
	s.ImageURL = sp.ImageURL
	s.Rules = sp.Rules
	s.CompanyInfo = sp.CompanyInfo
	s.WarehouseAddressID = sp.WarehouseAddressID
	s.BankAccount = sp.BankAccount
	s.ContactPersons = sp.ContactPersons
}

func (s *SupplierInfo) AssignTo(sp *Supplier) {
	sp.Name = s.Name
	sp.ImageURL = s.ImageURL
	sp.Rules = s.Rules
	sp.CompanyInfo = s.CompanyInfo
	sp.WarehouseAddressID = s.WarehouseAddressID
	sp.BankAccount = s.BankAccount
	sp.ContactPersons = s.ContactPersons
}

// Type SupplierInfo represents table supplier
func sqlgenSupplierInfo(_ *SupplierInfo, _ *Supplier) bool { return true }

type SupplierInfoes []*SupplierInfo

const __sqlSupplierInfo_Table = "supplier"
const __sqlSupplierInfo_ListCols = "\"name\",\"image_url\",\"rules\",\"company_info\",\"warehouse_address_id\",\"bank_account\",\"contact_persons\""
const __sqlSupplierInfo_Insert = "INSERT INTO \"supplier\" (" + __sqlSupplierInfo_ListCols + ") VALUES"
const __sqlSupplierInfo_Select = "SELECT " + __sqlSupplierInfo_ListCols + " FROM \"supplier\""
const __sqlSupplierInfo_Select_history = "SELECT " + __sqlSupplierInfo_ListCols + " FROM history.\"supplier\""
const __sqlSupplierInfo_UpdateAll = "UPDATE \"supplier\" SET (" + __sqlSupplierInfo_ListCols + ")"

func (m *SupplierInfo) SQLTableName() string   { return "supplier" }
func (m *SupplierInfoes) SQLTableName() string { return "supplier" }
func (m *SupplierInfo) SQLListCols() string    { return __sqlSupplierInfo_ListCols }

func (m *SupplierInfo) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.String(m.Name),
		core.String(m.ImageURL),
		core.JSON{m.Rules},
		core.JSON{m.CompanyInfo},
		core.Int64(m.WarehouseAddressID),
		core.JSON{m.BankAccount},
		core.JSON{m.ContactPersons},
	}
}

func (m *SupplierInfo) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.String)(&m.Name),
		(*core.String)(&m.ImageURL),
		core.JSON{&m.Rules},
		core.JSON{&m.CompanyInfo},
		(*core.Int64)(&m.WarehouseAddressID),
		core.JSON{&m.BankAccount},
		core.JSON{&m.ContactPersons},
	}
}

func (m *SupplierInfo) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *SupplierInfoes) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(SupplierInfoes, 0, 128)
	for rows.Next() {
		m := new(SupplierInfo)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *SupplierInfo) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplierInfo_Select)
	return nil
}

func (_ *SupplierInfoes) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplierInfo_Select)
	return nil
}

func (m *SupplierInfo) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplierInfo_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms SupplierInfoes) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplierInfo_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(7)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *SupplierInfo) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("supplier")
	w.WriteRawString(" SET ")
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.ImageURL != "" {
		flag = true
		w.WriteName("image_url")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ImageURL)
	}
	if m.Rules != nil {
		flag = true
		w.WriteName("rules")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Rules})
	}
	if m.CompanyInfo != nil {
		flag = true
		w.WriteName("company_info")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.CompanyInfo})
	}
	if m.WarehouseAddressID != 0 {
		flag = true
		w.WriteName("warehouse_address_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WarehouseAddressID)
	}
	if m.BankAccount != nil {
		flag = true
		w.WriteName("bank_account")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.BankAccount})
	}
	if m.ContactPersons != nil {
		flag = true
		w.WriteName("contact_persons")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ContactPersons})
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *SupplierInfo) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplierInfo_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type SupplierInfoHistory map[string]interface{}
type SupplierInfoHistories []map[string]interface{}

func (m *SupplierInfoHistory) SQLTableName() string  { return "history.\"supplier\"" }
func (m SupplierInfoHistories) SQLTableName() string { return "history.\"supplier\"" }

func (m *SupplierInfoHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplierInfo_Select_history)
	return nil
}

func (m SupplierInfoHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlSupplierInfo_Select_history)
	return nil
}

func (m SupplierInfoHistory) Name() core.Interface        { return core.Interface{m["name"]} }
func (m SupplierInfoHistory) ImageURL() core.Interface    { return core.Interface{m["image_url"]} }
func (m SupplierInfoHistory) Rules() core.Interface       { return core.Interface{m["rules"]} }
func (m SupplierInfoHistory) CompanyInfo() core.Interface { return core.Interface{m["company_info"]} }
func (m SupplierInfoHistory) WarehouseAddressID() core.Interface {
	return core.Interface{m["warehouse_address_id"]}
}
func (m SupplierInfoHistory) BankAccount() core.Interface { return core.Interface{m["bank_account"]} }
func (m SupplierInfoHistory) ContactPersons() core.Interface {
	return core.Interface{m["contact_persons"]}
}

func (m *SupplierInfoHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(SupplierInfoHistory, 7)
	res["name"] = data[0]
	res["image_url"] = data[1]
	res["rules"] = data[2]
	res["company_info"] = data[3]
	res["warehouse_address_id"] = data[4]
	res["bank_account"] = data[5]
	res["contact_persons"] = data[6]
	*m = res
	return nil
}

func (ms *SupplierInfoHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	res := make(SupplierInfoHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(SupplierInfoHistory)
		m["name"] = data[0]
		m["image_url"] = data[1]
		m["rules"] = data[2]
		m["company_info"] = data[3]
		m["warehouse_address_id"] = data[4]
		m["bank_account"] = data[5]
		m["contact_persons"] = data[6]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type SupplierExtended represents a join
func sqlgenSupplierExtended(_ *SupplierExtended, _ *Supplier, as sq.AS, t0 sq.JOIN_TYPE, _ *Address, a0 sq.AS, c0 string) bool {
	__sqlSupplierExtended_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlSupplierExtended_As = as
	__sqlSupplierExtended_JoinAs = []sq.AS{a0}
	__sqlSupplierExtended_JoinConds = []string{c0}
	return true
}

type SupplierExtendeds []*SupplierExtended

var __sqlSupplierExtended_JoinTypes []sq.JOIN_TYPE
var __sqlSupplierExtended_As sq.AS
var __sqlSupplierExtended_JoinAs []sq.AS
var __sqlSupplierExtended_JoinConds []string

func (m *SupplierExtended) SQLTableName() string  { return "supplier" }
func (m *SupplierExtendeds) SQLTableName() string { return "supplier" }

func (m *SupplierExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *SupplierExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(SupplierExtendeds, 0, 128)
	for rows.Next() {
		m := new(SupplierExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *SupplierExtended) SQLSelect(w SQLWriter) error {
	(*SupplierExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*SupplierExtended)(nil).__sqlJoin(w, __sqlSupplierExtended_JoinTypes)
	return nil
}

func (m *SupplierExtendeds) SQLSelect(w SQLWriter) error {
	return (*SupplierExtended)(nil).SQLSelect(w)
}

func (m *SupplierExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlSupplierExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *SupplierExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*SupplierExtended)(nil).SQLJoin(w, types)
}

func (m *SupplierExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlSupplierExtended_As), (*Supplier)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlSupplierExtended_JoinAs[0]), (*Address)(nil).SQLListCols())
}

func (m *SupplierExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("supplier")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlSupplierExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Address)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlSupplierExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlSupplierExtended_JoinConds[0])
}

func (m *SupplierExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.Supplier = new(Supplier)
	args = append(args, m.Supplier.SQLScanArgs(opts)...)
	m.Address = new(Address)
	args = append(args, m.Address.SQLScanArgs(opts)...)

	return args
}

// Type SupplierShipFromAddress represents a join
func sqlgenSupplierShipFromAddress(_ *SupplierShipFromAddress, _ *Supplier, as sq.AS, t0 sq.JOIN_TYPE, _ *Address, a0 sq.AS, c0 string) bool {
	__sqlSupplierShipFromAddress_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlSupplierShipFromAddress_As = as
	__sqlSupplierShipFromAddress_JoinAs = []sq.AS{a0}
	__sqlSupplierShipFromAddress_JoinConds = []string{c0}
	return true
}

type SupplierShipFromAddresses []*SupplierShipFromAddress

var __sqlSupplierShipFromAddress_JoinTypes []sq.JOIN_TYPE
var __sqlSupplierShipFromAddress_As sq.AS
var __sqlSupplierShipFromAddress_JoinAs []sq.AS
var __sqlSupplierShipFromAddress_JoinConds []string

func (m *SupplierShipFromAddress) SQLTableName() string   { return "supplier" }
func (m *SupplierShipFromAddresses) SQLTableName() string { return "supplier" }

func (m *SupplierShipFromAddress) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *SupplierShipFromAddresses) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(SupplierShipFromAddresses, 0, 128)
	for rows.Next() {
		m := new(SupplierShipFromAddress)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *SupplierShipFromAddress) SQLSelect(w SQLWriter) error {
	(*SupplierShipFromAddress)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*SupplierShipFromAddress)(nil).__sqlJoin(w, __sqlSupplierShipFromAddress_JoinTypes)
	return nil
}

func (m *SupplierShipFromAddresses) SQLSelect(w SQLWriter) error {
	return (*SupplierShipFromAddress)(nil).SQLSelect(w)
}

func (m *SupplierShipFromAddress) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlSupplierShipFromAddress_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *SupplierShipFromAddresses) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*SupplierShipFromAddress)(nil).SQLJoin(w, types)
}

func (m *SupplierShipFromAddress) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlSupplierShipFromAddress_As), (*Supplier)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlSupplierShipFromAddress_JoinAs[0]), (*Address)(nil).SQLListCols())
}

func (m *SupplierShipFromAddress) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("supplier")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlSupplierShipFromAddress_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Address)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlSupplierShipFromAddress_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlSupplierShipFromAddress_JoinConds[0])
}

func (m *SupplierShipFromAddress) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.Supplier = new(Supplier)
	args = append(args, m.Supplier.SQLScanArgs(opts)...)
	m.Address = new(Address)
	args = append(args, m.Address.SQLScanArgs(opts)...)

	return args
}

// Type Partner represents table partner
func sqlgenPartner(_ *Partner) bool { return true }

type Partners []*Partner

const __sqlPartner_Table = "partner"
const __sqlPartner_ListCols = "\"id\",\"owner_id\",\"status\",\"is_test\",\"name\",\"public_name\",\"phone\",\"email\",\"image_url\",\"website_url\",\"contact_persons\",\"recognized_hosts\",\"redirect_urls\",\"available_from_etop\",\"available_from_etop_config\",\"created_at\",\"updated_at\",\"deleted_at\""
const __sqlPartner_Insert = "INSERT INTO \"partner\" (" + __sqlPartner_ListCols + ") VALUES"
const __sqlPartner_Select = "SELECT " + __sqlPartner_ListCols + " FROM \"partner\""
const __sqlPartner_Select_history = "SELECT " + __sqlPartner_ListCols + " FROM history.\"partner\""
const __sqlPartner_UpdateAll = "UPDATE \"partner\" SET (" + __sqlPartner_ListCols + ")"

func (m *Partner) SQLTableName() string  { return "partner" }
func (m *Partners) SQLTableName() string { return "partner" }
func (m *Partner) SQLListCols() string   { return __sqlPartner_ListCols }

func (m *Partner) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.OwnerID),
		core.Int(m.Status),
		core.Int(m.IsTest),
		core.String(m.Name),
		core.String(m.PublicName),
		core.String(m.Phone),
		core.String(m.Email),
		core.String(m.ImageURL),
		core.String(m.WebsiteURL),
		core.JSON{m.ContactPersons},
		core.Array{m.RecognizedHosts, opts},
		core.Array{m.RedirectURLs, opts},
		core.Bool(m.AvailableFromEtop),
		core.JSON{m.AvailableFromEtopConfig},
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
	}
}

func (m *Partner) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.OwnerID),
		(*core.Int)(&m.Status),
		(*core.Int)(&m.IsTest),
		(*core.String)(&m.Name),
		(*core.String)(&m.PublicName),
		(*core.String)(&m.Phone),
		(*core.String)(&m.Email),
		(*core.String)(&m.ImageURL),
		(*core.String)(&m.WebsiteURL),
		core.JSON{&m.ContactPersons},
		core.Array{&m.RecognizedHosts, opts},
		core.Array{&m.RedirectURLs, opts},
		(*core.Bool)(&m.AvailableFromEtop),
		core.JSON{&m.AvailableFromEtopConfig},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *Partner) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Partners) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Partners, 0, 128)
	for rows.Next() {
		m := new(Partner)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Partner) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPartner_Select)
	return nil
}

func (_ *Partners) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPartner_Select)
	return nil
}

func (m *Partner) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlPartner_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(18)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Partners) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlPartner_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(18)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Partner) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("partner")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.OwnerID != 0 {
		flag = true
		w.WriteName("owner_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OwnerID)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if m.IsTest != 0 {
		flag = true
		w.WriteName("is_test")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.IsTest)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.PublicName != "" {
		flag = true
		w.WriteName("public_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PublicName)
	}
	if m.Phone != "" {
		flag = true
		w.WriteName("phone")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Phone)
	}
	if m.Email != "" {
		flag = true
		w.WriteName("email")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Email)
	}
	if m.ImageURL != "" {
		flag = true
		w.WriteName("image_url")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ImageURL)
	}
	if m.WebsiteURL != "" {
		flag = true
		w.WriteName("website_url")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WebsiteURL)
	}
	if m.ContactPersons != nil {
		flag = true
		w.WriteName("contact_persons")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ContactPersons})
	}
	if m.RecognizedHosts != nil {
		flag = true
		w.WriteName("recognized_hosts")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.RecognizedHosts, opts})
	}
	if m.RedirectURLs != nil {
		flag = true
		w.WriteName("redirect_urls")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.RedirectURLs, opts})
	}
	if m.AvailableFromEtop {
		flag = true
		w.WriteName("available_from_etop")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AvailableFromEtop)
	}
	if m.AvailableFromEtopConfig != nil {
		flag = true
		w.WriteName("available_from_etop_config")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.AvailableFromEtopConfig})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Partner) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlPartner_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(18)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type PartnerHistory map[string]interface{}
type PartnerHistories []map[string]interface{}

func (m *PartnerHistory) SQLTableName() string  { return "history.\"partner\"" }
func (m PartnerHistories) SQLTableName() string { return "history.\"partner\"" }

func (m *PartnerHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPartner_Select_history)
	return nil
}

func (m PartnerHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPartner_Select_history)
	return nil
}

func (m PartnerHistory) ID() core.Interface              { return core.Interface{m["id"]} }
func (m PartnerHistory) OwnerID() core.Interface         { return core.Interface{m["owner_id"]} }
func (m PartnerHistory) Status() core.Interface          { return core.Interface{m["status"]} }
func (m PartnerHistory) IsTest() core.Interface          { return core.Interface{m["is_test"]} }
func (m PartnerHistory) Name() core.Interface            { return core.Interface{m["name"]} }
func (m PartnerHistory) PublicName() core.Interface      { return core.Interface{m["public_name"]} }
func (m PartnerHistory) Phone() core.Interface           { return core.Interface{m["phone"]} }
func (m PartnerHistory) Email() core.Interface           { return core.Interface{m["email"]} }
func (m PartnerHistory) ImageURL() core.Interface        { return core.Interface{m["image_url"]} }
func (m PartnerHistory) WebsiteURL() core.Interface      { return core.Interface{m["website_url"]} }
func (m PartnerHistory) ContactPersons() core.Interface  { return core.Interface{m["contact_persons"]} }
func (m PartnerHistory) RecognizedHosts() core.Interface { return core.Interface{m["recognized_hosts"]} }
func (m PartnerHistory) RedirectURLs() core.Interface    { return core.Interface{m["redirect_urls"]} }
func (m PartnerHistory) AvailableFromEtop() core.Interface {
	return core.Interface{m["available_from_etop"]}
}
func (m PartnerHistory) AvailableFromEtopConfig() core.Interface {
	return core.Interface{m["available_from_etop_config"]}
}
func (m PartnerHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m PartnerHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }
func (m PartnerHistory) DeletedAt() core.Interface { return core.Interface{m["deleted_at"]} }

func (m *PartnerHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 18)
	args := make([]interface{}, 18)
	for i := 0; i < 18; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(PartnerHistory, 18)
	res["id"] = data[0]
	res["owner_id"] = data[1]
	res["status"] = data[2]
	res["is_test"] = data[3]
	res["name"] = data[4]
	res["public_name"] = data[5]
	res["phone"] = data[6]
	res["email"] = data[7]
	res["image_url"] = data[8]
	res["website_url"] = data[9]
	res["contact_persons"] = data[10]
	res["recognized_hosts"] = data[11]
	res["redirect_urls"] = data[12]
	res["available_from_etop"] = data[13]
	res["available_from_etop_config"] = data[14]
	res["created_at"] = data[15]
	res["updated_at"] = data[16]
	res["deleted_at"] = data[17]
	*m = res
	return nil
}

func (ms *PartnerHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 18)
	args := make([]interface{}, 18)
	for i := 0; i < 18; i++ {
		args[i] = &data[i]
	}
	res := make(PartnerHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(PartnerHistory)
		m["id"] = data[0]
		m["owner_id"] = data[1]
		m["status"] = data[2]
		m["is_test"] = data[3]
		m["name"] = data[4]
		m["public_name"] = data[5]
		m["phone"] = data[6]
		m["email"] = data[7]
		m["image_url"] = data[8]
		m["website_url"] = data[9]
		m["contact_persons"] = data[10]
		m["recognized_hosts"] = data[11]
		m["redirect_urls"] = data[12]
		m["available_from_etop"] = data[13]
		m["available_from_etop_config"] = data[14]
		m["created_at"] = data[15]
		m["updated_at"] = data[16]
		m["deleted_at"] = data[17]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type AccountAuth represents table account_auth
func sqlgenAccountAuth(_ *AccountAuth) bool { return true }

type AccountAuths []*AccountAuth

const __sqlAccountAuth_Table = "account_auth"
const __sqlAccountAuth_ListCols = "\"auth_key\",\"account_id\",\"status\",\"roles\",\"permissions\",\"created_at\",\"updated_at\",\"deleted_at\""
const __sqlAccountAuth_Insert = "INSERT INTO \"account_auth\" (" + __sqlAccountAuth_ListCols + ") VALUES"
const __sqlAccountAuth_Select = "SELECT " + __sqlAccountAuth_ListCols + " FROM \"account_auth\""
const __sqlAccountAuth_Select_history = "SELECT " + __sqlAccountAuth_ListCols + " FROM history.\"account_auth\""
const __sqlAccountAuth_UpdateAll = "UPDATE \"account_auth\" SET (" + __sqlAccountAuth_ListCols + ")"

func (m *AccountAuth) SQLTableName() string  { return "account_auth" }
func (m *AccountAuths) SQLTableName() string { return "account_auth" }
func (m *AccountAuth) SQLListCols() string   { return __sqlAccountAuth_ListCols }

func (m *AccountAuth) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.String(m.AuthKey),
		core.Int64(m.AccountID),
		core.Int(m.Status),
		core.Array{m.Roles, opts},
		core.Array{m.Permissions, opts},
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
	}
}

func (m *AccountAuth) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.String)(&m.AuthKey),
		(*core.Int64)(&m.AccountID),
		(*core.Int)(&m.Status),
		core.Array{&m.Roles, opts},
		core.Array{&m.Permissions, opts},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *AccountAuth) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *AccountAuths) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(AccountAuths, 0, 128)
	for rows.Next() {
		m := new(AccountAuth)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *AccountAuth) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountAuth_Select)
	return nil
}

func (_ *AccountAuths) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountAuth_Select)
	return nil
}

func (m *AccountAuth) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountAuth_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms AccountAuths) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountAuth_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(8)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *AccountAuth) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("account_auth")
	w.WriteRawString(" SET ")
	if m.AuthKey != "" {
		flag = true
		w.WriteName("auth_key")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AuthKey)
	}
	if m.AccountID != 0 {
		flag = true
		w.WriteName("account_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccountID)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if m.Roles != nil {
		flag = true
		w.WriteName("roles")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.Roles, opts})
	}
	if m.Permissions != nil {
		flag = true
		w.WriteName("permissions")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.Permissions, opts})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *AccountAuth) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountAuth_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type AccountAuthHistory map[string]interface{}
type AccountAuthHistories []map[string]interface{}

func (m *AccountAuthHistory) SQLTableName() string  { return "history.\"account_auth\"" }
func (m AccountAuthHistories) SQLTableName() string { return "history.\"account_auth\"" }

func (m *AccountAuthHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountAuth_Select_history)
	return nil
}

func (m AccountAuthHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountAuth_Select_history)
	return nil
}

func (m AccountAuthHistory) AuthKey() core.Interface     { return core.Interface{m["auth_key"]} }
func (m AccountAuthHistory) AccountID() core.Interface   { return core.Interface{m["account_id"]} }
func (m AccountAuthHistory) Status() core.Interface      { return core.Interface{m["status"]} }
func (m AccountAuthHistory) Roles() core.Interface       { return core.Interface{m["roles"]} }
func (m AccountAuthHistory) Permissions() core.Interface { return core.Interface{m["permissions"]} }
func (m AccountAuthHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m AccountAuthHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }
func (m AccountAuthHistory) DeletedAt() core.Interface   { return core.Interface{m["deleted_at"]} }

func (m *AccountAuthHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(AccountAuthHistory, 8)
	res["auth_key"] = data[0]
	res["account_id"] = data[1]
	res["status"] = data[2]
	res["roles"] = data[3]
	res["permissions"] = data[4]
	res["created_at"] = data[5]
	res["updated_at"] = data[6]
	res["deleted_at"] = data[7]
	*m = res
	return nil
}

func (ms *AccountAuthHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	res := make(AccountAuthHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(AccountAuthHistory)
		m["auth_key"] = data[0]
		m["account_id"] = data[1]
		m["status"] = data[2]
		m["roles"] = data[3]
		m["permissions"] = data[4]
		m["created_at"] = data[5]
		m["updated_at"] = data[6]
		m["deleted_at"] = data[7]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type AccountAuthFtPartner represents a join
func sqlgenAccountAuthFtPartner(_ *AccountAuthFtPartner, _ *AccountAuth, as sq.AS, t0 sq.JOIN_TYPE, _ *Partner, a0 sq.AS, c0 string) bool {
	__sqlAccountAuthFtPartner_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlAccountAuthFtPartner_As = as
	__sqlAccountAuthFtPartner_JoinAs = []sq.AS{a0}
	__sqlAccountAuthFtPartner_JoinConds = []string{c0}
	return true
}

type AccountAuthFtPartners []*AccountAuthFtPartner

var __sqlAccountAuthFtPartner_JoinTypes []sq.JOIN_TYPE
var __sqlAccountAuthFtPartner_As sq.AS
var __sqlAccountAuthFtPartner_JoinAs []sq.AS
var __sqlAccountAuthFtPartner_JoinConds []string

func (m *AccountAuthFtPartner) SQLTableName() string  { return "account_auth" }
func (m *AccountAuthFtPartners) SQLTableName() string { return "account_auth" }

func (m *AccountAuthFtPartner) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *AccountAuthFtPartners) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(AccountAuthFtPartners, 0, 128)
	for rows.Next() {
		m := new(AccountAuthFtPartner)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *AccountAuthFtPartner) SQLSelect(w SQLWriter) error {
	(*AccountAuthFtPartner)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*AccountAuthFtPartner)(nil).__sqlJoin(w, __sqlAccountAuthFtPartner_JoinTypes)
	return nil
}

func (m *AccountAuthFtPartners) SQLSelect(w SQLWriter) error {
	return (*AccountAuthFtPartner)(nil).SQLSelect(w)
}

func (m *AccountAuthFtPartner) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlAccountAuthFtPartner_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *AccountAuthFtPartners) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*AccountAuthFtPartner)(nil).SQLJoin(w, types)
}

func (m *AccountAuthFtPartner) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlAccountAuthFtPartner_As), (*AccountAuth)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlAccountAuthFtPartner_JoinAs[0]), (*Partner)(nil).SQLListCols())
}

func (m *AccountAuthFtPartner) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("account_auth")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlAccountAuthFtPartner_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Partner)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlAccountAuthFtPartner_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlAccountAuthFtPartner_JoinConds[0])
}

func (m *AccountAuthFtPartner) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.AccountAuth = new(AccountAuth)
	args = append(args, m.AccountAuth.SQLScanArgs(opts)...)
	m.Partner = new(Partner)
	args = append(args, m.Partner.SQLScanArgs(opts)...)

	return args
}

// Type AccountAuthFtShop represents a join
func sqlgenAccountAuthFtShop(_ *AccountAuthFtShop, _ *AccountAuth, as sq.AS, t0 sq.JOIN_TYPE, _ *Shop, a0 sq.AS, c0 string) bool {
	__sqlAccountAuthFtShop_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlAccountAuthFtShop_As = as
	__sqlAccountAuthFtShop_JoinAs = []sq.AS{a0}
	__sqlAccountAuthFtShop_JoinConds = []string{c0}
	return true
}

type AccountAuthFtShops []*AccountAuthFtShop

var __sqlAccountAuthFtShop_JoinTypes []sq.JOIN_TYPE
var __sqlAccountAuthFtShop_As sq.AS
var __sqlAccountAuthFtShop_JoinAs []sq.AS
var __sqlAccountAuthFtShop_JoinConds []string

func (m *AccountAuthFtShop) SQLTableName() string  { return "account_auth" }
func (m *AccountAuthFtShops) SQLTableName() string { return "account_auth" }

func (m *AccountAuthFtShop) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *AccountAuthFtShops) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(AccountAuthFtShops, 0, 128)
	for rows.Next() {
		m := new(AccountAuthFtShop)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *AccountAuthFtShop) SQLSelect(w SQLWriter) error {
	(*AccountAuthFtShop)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*AccountAuthFtShop)(nil).__sqlJoin(w, __sqlAccountAuthFtShop_JoinTypes)
	return nil
}

func (m *AccountAuthFtShops) SQLSelect(w SQLWriter) error {
	return (*AccountAuthFtShop)(nil).SQLSelect(w)
}

func (m *AccountAuthFtShop) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlAccountAuthFtShop_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *AccountAuthFtShops) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*AccountAuthFtShop)(nil).SQLJoin(w, types)
}

func (m *AccountAuthFtShop) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlAccountAuthFtShop_As), (*AccountAuth)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlAccountAuthFtShop_JoinAs[0]), (*Shop)(nil).SQLListCols())
}

func (m *AccountAuthFtShop) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("account_auth")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlAccountAuthFtShop_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Shop)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlAccountAuthFtShop_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlAccountAuthFtShop_JoinConds[0])
}

func (m *AccountAuthFtShop) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.AccountAuth = new(AccountAuth)
	args = append(args, m.AccountAuth.SQLScanArgs(opts)...)
	m.Shop = new(Shop)
	args = append(args, m.Shop.SQLScanArgs(opts)...)

	return args
}

// Type PartnerRelation represents table partner_relation
func sqlgenPartnerRelation(_ *PartnerRelation) bool { return true }

type PartnerRelations []*PartnerRelation

const __sqlPartnerRelation_Table = "partner_relation"
const __sqlPartnerRelation_ListCols = "\"auth_key\",\"partner_id\",\"subject_id\",\"subject_type\",\"external_subject_id\",\"nonce\",\"status\",\"created_at\",\"updated_at\",\"deleted_at\",\"roles\",\"permissions\""
const __sqlPartnerRelation_Insert = "INSERT INTO \"partner_relation\" (" + __sqlPartnerRelation_ListCols + ") VALUES"
const __sqlPartnerRelation_Select = "SELECT " + __sqlPartnerRelation_ListCols + " FROM \"partner_relation\""
const __sqlPartnerRelation_Select_history = "SELECT " + __sqlPartnerRelation_ListCols + " FROM history.\"partner_relation\""
const __sqlPartnerRelation_UpdateAll = "UPDATE \"partner_relation\" SET (" + __sqlPartnerRelation_ListCols + ")"

func (m *PartnerRelation) SQLTableName() string  { return "partner_relation" }
func (m *PartnerRelations) SQLTableName() string { return "partner_relation" }
func (m *PartnerRelation) SQLListCols() string   { return __sqlPartnerRelation_ListCols }

func (m *PartnerRelation) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.String(m.AuthKey),
		core.Int64(m.PartnerID),
		core.Int64(m.SubjectID),
		core.String(m.SubjectType),
		core.String(m.ExternalSubjectID),
		core.Int64(m.Nonce),
		core.Int(m.Status),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
		core.Array{m.Permission.Roles, opts},
		core.Array{m.Permission.Permissions, opts},
	}
}

func (m *PartnerRelation) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.String)(&m.AuthKey),
		(*core.Int64)(&m.PartnerID),
		(*core.Int64)(&m.SubjectID),
		(*core.String)(&m.SubjectType),
		(*core.String)(&m.ExternalSubjectID),
		(*core.Int64)(&m.Nonce),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
		core.Array{&m.Permission.Roles, opts},
		core.Array{&m.Permission.Permissions, opts},
	}
}

func (m *PartnerRelation) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *PartnerRelations) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(PartnerRelations, 0, 128)
	for rows.Next() {
		m := new(PartnerRelation)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *PartnerRelation) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPartnerRelation_Select)
	return nil
}

func (_ *PartnerRelations) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPartnerRelation_Select)
	return nil
}

func (m *PartnerRelation) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlPartnerRelation_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(12)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms PartnerRelations) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlPartnerRelation_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(12)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *PartnerRelation) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("partner_relation")
	w.WriteRawString(" SET ")
	if m.AuthKey != "" {
		flag = true
		w.WriteName("auth_key")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AuthKey)
	}
	if m.PartnerID != 0 {
		flag = true
		w.WriteName("partner_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PartnerID)
	}
	if m.SubjectID != 0 {
		flag = true
		w.WriteName("subject_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SubjectID)
	}
	if m.SubjectType != "" {
		flag = true
		w.WriteName("subject_type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(string(m.SubjectType))
	}
	if m.ExternalSubjectID != "" {
		flag = true
		w.WriteName("external_subject_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalSubjectID)
	}
	if m.Nonce != 0 {
		flag = true
		w.WriteName("nonce")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Nonce)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if m.Permission.Roles != nil {
		flag = true
		w.WriteName("roles")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.Permission.Roles, opts})
	}
	if m.Permission.Permissions != nil {
		flag = true
		w.WriteName("permissions")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.Permission.Permissions, opts})
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *PartnerRelation) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlPartnerRelation_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(12)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type PartnerRelationHistory map[string]interface{}
type PartnerRelationHistories []map[string]interface{}

func (m *PartnerRelationHistory) SQLTableName() string  { return "history.\"partner_relation\"" }
func (m PartnerRelationHistories) SQLTableName() string { return "history.\"partner_relation\"" }

func (m *PartnerRelationHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPartnerRelation_Select_history)
	return nil
}

func (m PartnerRelationHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPartnerRelation_Select_history)
	return nil
}

func (m PartnerRelationHistory) AuthKey() core.Interface     { return core.Interface{m["auth_key"]} }
func (m PartnerRelationHistory) PartnerID() core.Interface   { return core.Interface{m["partner_id"]} }
func (m PartnerRelationHistory) SubjectID() core.Interface   { return core.Interface{m["subject_id"]} }
func (m PartnerRelationHistory) SubjectType() core.Interface { return core.Interface{m["subject_type"]} }
func (m PartnerRelationHistory) ExternalSubjectID() core.Interface {
	return core.Interface{m["external_subject_id"]}
}
func (m PartnerRelationHistory) Nonce() core.Interface       { return core.Interface{m["nonce"]} }
func (m PartnerRelationHistory) Status() core.Interface      { return core.Interface{m["status"]} }
func (m PartnerRelationHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m PartnerRelationHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }
func (m PartnerRelationHistory) DeletedAt() core.Interface   { return core.Interface{m["deleted_at"]} }
func (m PartnerRelationHistory) Roles() core.Interface       { return core.Interface{m["roles"]} }
func (m PartnerRelationHistory) Permissions() core.Interface { return core.Interface{m["permissions"]} }

func (m *PartnerRelationHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 12)
	args := make([]interface{}, 12)
	for i := 0; i < 12; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(PartnerRelationHistory, 12)
	res["auth_key"] = data[0]
	res["partner_id"] = data[1]
	res["subject_id"] = data[2]
	res["subject_type"] = data[3]
	res["external_subject_id"] = data[4]
	res["nonce"] = data[5]
	res["status"] = data[6]
	res["created_at"] = data[7]
	res["updated_at"] = data[8]
	res["deleted_at"] = data[9]
	res["roles"] = data[10]
	res["permissions"] = data[11]
	*m = res
	return nil
}

func (ms *PartnerRelationHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 12)
	args := make([]interface{}, 12)
	for i := 0; i < 12; i++ {
		args[i] = &data[i]
	}
	res := make(PartnerRelationHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(PartnerRelationHistory)
		m["auth_key"] = data[0]
		m["partner_id"] = data[1]
		m["subject_id"] = data[2]
		m["subject_type"] = data[3]
		m["external_subject_id"] = data[4]
		m["nonce"] = data[5]
		m["status"] = data[6]
		m["created_at"] = data[7]
		m["updated_at"] = data[8]
		m["deleted_at"] = data[9]
		m["roles"] = data[10]
		m["permissions"] = data[11]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type PartnerRelationFtShop represents a join
func sqlgenPartnerRelationFtShop(_ *PartnerRelationFtShop, _ *PartnerRelation, as sq.AS, t0 sq.JOIN_TYPE, _ *Shop, a0 sq.AS, c0 string, t1 sq.JOIN_TYPE, _ *User, a1 sq.AS, c1 string) bool {
	__sqlPartnerRelationFtShop_JoinTypes = []sq.JOIN_TYPE{t0, t1}
	__sqlPartnerRelationFtShop_As = as
	__sqlPartnerRelationFtShop_JoinAs = []sq.AS{a0, a1}
	__sqlPartnerRelationFtShop_JoinConds = []string{c0, c1}
	return true
}

type PartnerRelationFtShops []*PartnerRelationFtShop

var __sqlPartnerRelationFtShop_JoinTypes []sq.JOIN_TYPE
var __sqlPartnerRelationFtShop_As sq.AS
var __sqlPartnerRelationFtShop_JoinAs []sq.AS
var __sqlPartnerRelationFtShop_JoinConds []string

func (m *PartnerRelationFtShop) SQLTableName() string  { return "partner_relation" }
func (m *PartnerRelationFtShops) SQLTableName() string { return "partner_relation" }

func (m *PartnerRelationFtShop) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *PartnerRelationFtShops) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(PartnerRelationFtShops, 0, 128)
	for rows.Next() {
		m := new(PartnerRelationFtShop)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *PartnerRelationFtShop) SQLSelect(w SQLWriter) error {
	(*PartnerRelationFtShop)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*PartnerRelationFtShop)(nil).__sqlJoin(w, __sqlPartnerRelationFtShop_JoinTypes)
	return nil
}

func (m *PartnerRelationFtShops) SQLSelect(w SQLWriter) error {
	return (*PartnerRelationFtShop)(nil).SQLSelect(w)
}

func (m *PartnerRelationFtShop) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlPartnerRelationFtShop_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *PartnerRelationFtShops) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*PartnerRelationFtShop)(nil).SQLJoin(w, types)
}

func (m *PartnerRelationFtShop) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlPartnerRelationFtShop_As), (*PartnerRelation)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlPartnerRelationFtShop_JoinAs[0]), (*Shop)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlPartnerRelationFtShop_JoinAs[1]), (*User)(nil).SQLListCols())
}

func (m *PartnerRelationFtShop) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 2 {
		panic("common/sql: expect 2 types to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("partner_relation")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlPartnerRelationFtShop_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Shop)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlPartnerRelationFtShop_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlPartnerRelationFtShop_JoinConds[0])
	w.WriteByte(' ')
	w.WriteRawString(string(types[1]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*User)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlPartnerRelationFtShop_JoinAs[1]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlPartnerRelationFtShop_JoinConds[1])
}

func (m *PartnerRelationFtShop) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.PartnerRelation = new(PartnerRelation)
	args = append(args, m.PartnerRelation.SQLScanArgs(opts)...)
	m.Shop = new(Shop)
	args = append(args, m.Shop.SQLScanArgs(opts)...)
	m.User = new(User)
	args = append(args, m.User.SQLScanArgs(opts)...)

	return args
}

// Type ProductSource represents table product_source
func sqlgenProductSource(_ *ProductSource) bool { return true }

type ProductSources []*ProductSource

const __sqlProductSource_Table = "product_source"
const __sqlProductSource_ListCols = "\"id\",\"supplier_id\",\"type\",\"name\",\"status\",\"external_status\",\"external_key\",\"external_info\",\"extra_info\",\"created_at\",\"updated_at\",\"last_sync_at\",\"sync_state_products\",\"sync_state_categories\""
const __sqlProductSource_Insert = "INSERT INTO \"product_source\" (" + __sqlProductSource_ListCols + ") VALUES"
const __sqlProductSource_Select = "SELECT " + __sqlProductSource_ListCols + " FROM \"product_source\""
const __sqlProductSource_Select_history = "SELECT " + __sqlProductSource_ListCols + " FROM history.\"product_source\""
const __sqlProductSource_UpdateAll = "UPDATE \"product_source\" SET (" + __sqlProductSource_ListCols + ")"

func (m *ProductSource) SQLTableName() string  { return "product_source" }
func (m *ProductSources) SQLTableName() string { return "product_source" }
func (m *ProductSource) SQLListCols() string   { return __sqlProductSource_ListCols }

func (m *ProductSource) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.SupplierID),
		core.String(m.Type),
		core.String(m.Name),
		core.Int(m.Status),
		core.Int(m.ExternalStatus),
		core.String(m.ExternalKey),
		core.JSON{m.ExternalInfo},
		core.JSON{m.ExtraInfo},
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.LastSyncAt),
		core.JSON{m.SyncStateProducts},
		core.JSON{m.SyncStateCategories},
	}
}

func (m *ProductSource) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.SupplierID),
		(*core.String)(&m.Type),
		(*core.String)(&m.Name),
		(*core.Int)(&m.Status),
		(*core.Int)(&m.ExternalStatus),
		(*core.String)(&m.ExternalKey),
		core.JSON{&m.ExternalInfo},
		core.JSON{&m.ExtraInfo},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.LastSyncAt),
		core.JSON{&m.SyncStateProducts},
		core.JSON{&m.SyncStateCategories},
	}
}

func (m *ProductSource) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductSources) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductSources, 0, 128)
	for rows.Next() {
		m := new(ProductSource)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ProductSource) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSource_Select)
	return nil
}

func (_ *ProductSources) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSource_Select)
	return nil
}

func (m *ProductSource) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSource_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ProductSources) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSource_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(14)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ProductSource) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("product_source")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.SupplierID != 0 {
		flag = true
		w.WriteName("supplier_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SupplierID)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if m.ExternalStatus != 0 {
		flag = true
		w.WriteName("external_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.ExternalStatus))
	}
	if m.ExternalKey != "" {
		flag = true
		w.WriteName("external_key")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalKey)
	}
	if m.ExternalInfo != nil {
		flag = true
		w.WriteName("external_info")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalInfo})
	}
	if m.ExtraInfo != nil {
		flag = true
		w.WriteName("extra_info")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExtraInfo})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.LastSyncAt.IsZero() {
		flag = true
		w.WriteName("last_sync_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.LastSyncAt)
	}
	if m.SyncStateProducts != nil {
		flag = true
		w.WriteName("sync_state_products")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.SyncStateProducts})
	}
	if m.SyncStateCategories != nil {
		flag = true
		w.WriteName("sync_state_categories")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.SyncStateCategories})
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ProductSource) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSource_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ProductSourceHistory map[string]interface{}
type ProductSourceHistories []map[string]interface{}

func (m *ProductSourceHistory) SQLTableName() string  { return "history.\"product_source\"" }
func (m ProductSourceHistories) SQLTableName() string { return "history.\"product_source\"" }

func (m *ProductSourceHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSource_Select_history)
	return nil
}

func (m ProductSourceHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSource_Select_history)
	return nil
}

func (m ProductSourceHistory) ID() core.Interface         { return core.Interface{m["id"]} }
func (m ProductSourceHistory) SupplierID() core.Interface { return core.Interface{m["supplier_id"]} }
func (m ProductSourceHistory) Type() core.Interface       { return core.Interface{m["type"]} }
func (m ProductSourceHistory) Name() core.Interface       { return core.Interface{m["name"]} }
func (m ProductSourceHistory) Status() core.Interface     { return core.Interface{m["status"]} }
func (m ProductSourceHistory) ExternalStatus() core.Interface {
	return core.Interface{m["external_status"]}
}
func (m ProductSourceHistory) ExternalKey() core.Interface  { return core.Interface{m["external_key"]} }
func (m ProductSourceHistory) ExternalInfo() core.Interface { return core.Interface{m["external_info"]} }
func (m ProductSourceHistory) ExtraInfo() core.Interface    { return core.Interface{m["extra_info"]} }
func (m ProductSourceHistory) CreatedAt() core.Interface    { return core.Interface{m["created_at"]} }
func (m ProductSourceHistory) UpdatedAt() core.Interface    { return core.Interface{m["updated_at"]} }
func (m ProductSourceHistory) LastSyncAt() core.Interface   { return core.Interface{m["last_sync_at"]} }
func (m ProductSourceHistory) SyncStateProducts() core.Interface {
	return core.Interface{m["sync_state_products"]}
}
func (m ProductSourceHistory) SyncStateCategories() core.Interface {
	return core.Interface{m["sync_state_categories"]}
}

func (m *ProductSourceHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ProductSourceHistory, 14)
	res["id"] = data[0]
	res["supplier_id"] = data[1]
	res["type"] = data[2]
	res["name"] = data[3]
	res["status"] = data[4]
	res["external_status"] = data[5]
	res["external_key"] = data[6]
	res["external_info"] = data[7]
	res["extra_info"] = data[8]
	res["created_at"] = data[9]
	res["updated_at"] = data[10]
	res["last_sync_at"] = data[11]
	res["sync_state_products"] = data[12]
	res["sync_state_categories"] = data[13]
	*m = res
	return nil
}

func (ms *ProductSourceHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	res := make(ProductSourceHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ProductSourceHistory)
		m["id"] = data[0]
		m["supplier_id"] = data[1]
		m["type"] = data[2]
		m["name"] = data[3]
		m["status"] = data[4]
		m["external_status"] = data[5]
		m["external_key"] = data[6]
		m["external_info"] = data[7]
		m["extra_info"] = data[8]
		m["created_at"] = data[9]
		m["updated_at"] = data[10]
		m["last_sync_at"] = data[11]
		m["sync_state_products"] = data[12]
		m["sync_state_categories"] = data[13]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// *ProductSourceSyncStates is a substruct of *ProductSource
func substructProductSourceSyncStates(_ *ProductSourceSyncStates, _ *ProductSource) bool { return true }

func ProductSourceSyncStatesesFromProductSources(ps []*ProductSource) []*ProductSourceSyncStates {
	ss := make([]*ProductSourceSyncStates, len(ps))
	for i, p := range ps {
		ss[i] = NewProductSourceSyncStatesFromProductSource(p)
	}
	return ss
}

func ProductSourceSyncStatesesToProductSources(ss []*ProductSourceSyncStates) []*ProductSource {
	ps := make([]*ProductSource, len(ss))
	for i, s := range ss {
		ps[i] = s.ToProductSource()
	}
	return ps
}

func NewProductSourceSyncStatesFromProductSource(sp *ProductSource) *ProductSourceSyncStates {
	if sp == nil {
		return nil
	}
	s := new(ProductSourceSyncStates)
	s.CopyFrom(sp)
	return s
}

func (s *ProductSourceSyncStates) ToProductSource() *ProductSource {
	if s == nil {
		return nil
	}
	sp := new(ProductSource)
	s.AssignTo(sp)
	return sp
}

func (s *ProductSourceSyncStates) CopyFrom(sp *ProductSource) {
	s.LastSyncAt = sp.LastSyncAt
	s.SyncStateProducts = sp.SyncStateProducts
	s.SyncStateCategories = sp.SyncStateCategories
}

func (s *ProductSourceSyncStates) AssignTo(sp *ProductSource) {
	sp.LastSyncAt = s.LastSyncAt
	sp.SyncStateProducts = s.SyncStateProducts
	sp.SyncStateCategories = s.SyncStateCategories
}

// Type ProductSourceSyncStates represents table product_source
func sqlgenProductSourceSyncStates(_ *ProductSourceSyncStates, _ *ProductSource) bool { return true }

type ProductSourceSyncStateses []*ProductSourceSyncStates

const __sqlProductSourceSyncStates_Table = "product_source"
const __sqlProductSourceSyncStates_ListCols = "\"last_sync_at\",\"sync_state_products\",\"sync_state_categories\""
const __sqlProductSourceSyncStates_Insert = "INSERT INTO \"product_source\" (" + __sqlProductSourceSyncStates_ListCols + ") VALUES"
const __sqlProductSourceSyncStates_Select = "SELECT " + __sqlProductSourceSyncStates_ListCols + " FROM \"product_source\""
const __sqlProductSourceSyncStates_Select_history = "SELECT " + __sqlProductSourceSyncStates_ListCols + " FROM history.\"product_source\""
const __sqlProductSourceSyncStates_UpdateAll = "UPDATE \"product_source\" SET (" + __sqlProductSourceSyncStates_ListCols + ")"

func (m *ProductSourceSyncStates) SQLTableName() string   { return "product_source" }
func (m *ProductSourceSyncStateses) SQLTableName() string { return "product_source" }
func (m *ProductSourceSyncStates) SQLListCols() string    { return __sqlProductSourceSyncStates_ListCols }

func (m *ProductSourceSyncStates) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.Time(m.LastSyncAt),
		core.JSON{m.SyncStateProducts},
		core.JSON{m.SyncStateCategories},
	}
}

func (m *ProductSourceSyncStates) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Time)(&m.LastSyncAt),
		core.JSON{&m.SyncStateProducts},
		core.JSON{&m.SyncStateCategories},
	}
}

func (m *ProductSourceSyncStates) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductSourceSyncStateses) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductSourceSyncStateses, 0, 128)
	for rows.Next() {
		m := new(ProductSourceSyncStates)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ProductSourceSyncStates) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceSyncStates_Select)
	return nil
}

func (_ *ProductSourceSyncStateses) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceSyncStates_Select)
	return nil
}

func (m *ProductSourceSyncStates) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceSyncStates_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(3)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ProductSourceSyncStateses) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceSyncStates_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(3)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ProductSourceSyncStates) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("product_source")
	w.WriteRawString(" SET ")
	if !m.LastSyncAt.IsZero() {
		flag = true
		w.WriteName("last_sync_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.LastSyncAt)
	}
	if m.SyncStateProducts != nil {
		flag = true
		w.WriteName("sync_state_products")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.SyncStateProducts})
	}
	if m.SyncStateCategories != nil {
		flag = true
		w.WriteName("sync_state_categories")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.SyncStateCategories})
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ProductSourceSyncStates) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceSyncStates_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(3)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ProductSourceSyncStatesHistory map[string]interface{}
type ProductSourceSyncStatesHistories []map[string]interface{}

func (m *ProductSourceSyncStatesHistory) SQLTableName() string  { return "history.\"product_source\"" }
func (m ProductSourceSyncStatesHistories) SQLTableName() string { return "history.\"product_source\"" }

func (m *ProductSourceSyncStatesHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceSyncStates_Select_history)
	return nil
}

func (m ProductSourceSyncStatesHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceSyncStates_Select_history)
	return nil
}

func (m ProductSourceSyncStatesHistory) LastSyncAt() core.Interface {
	return core.Interface{m["last_sync_at"]}
}
func (m ProductSourceSyncStatesHistory) SyncStateProducts() core.Interface {
	return core.Interface{m["sync_state_products"]}
}
func (m ProductSourceSyncStatesHistory) SyncStateCategories() core.Interface {
	return core.Interface{m["sync_state_categories"]}
}

func (m *ProductSourceSyncStatesHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 3)
	args := make([]interface{}, 3)
	for i := 0; i < 3; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ProductSourceSyncStatesHistory, 3)
	res["last_sync_at"] = data[0]
	res["sync_state_products"] = data[1]
	res["sync_state_categories"] = data[2]
	*m = res
	return nil
}

func (ms *ProductSourceSyncStatesHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 3)
	args := make([]interface{}, 3)
	for i := 0; i < 3; i++ {
		args[i] = &data[i]
	}
	res := make(ProductSourceSyncStatesHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ProductSourceSyncStatesHistory)
		m["last_sync_at"] = data[0]
		m["sync_state_products"] = data[1]
		m["sync_state_categories"] = data[2]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ProductSourceInternal represents table product_source_internal
func sqlgenProductSourceInternal(_ *ProductSourceInternal) bool { return true }

type ProductSourceInternals []*ProductSourceInternal

const __sqlProductSourceInternal_Table = "product_source_internal"
const __sqlProductSourceInternal_ListCols = "\"id\",\"secret\",\"access_token\",\"expires_at\",\"created_at\",\"updated_at\""
const __sqlProductSourceInternal_Insert = "INSERT INTO \"product_source_internal\" (" + __sqlProductSourceInternal_ListCols + ") VALUES"
const __sqlProductSourceInternal_Select = "SELECT " + __sqlProductSourceInternal_ListCols + " FROM \"product_source_internal\""
const __sqlProductSourceInternal_Select_history = "SELECT " + __sqlProductSourceInternal_ListCols + " FROM history.\"product_source_internal\""
const __sqlProductSourceInternal_UpdateAll = "UPDATE \"product_source_internal\" SET (" + __sqlProductSourceInternal_ListCols + ")"

func (m *ProductSourceInternal) SQLTableName() string  { return "product_source_internal" }
func (m *ProductSourceInternals) SQLTableName() string { return "product_source_internal" }
func (m *ProductSourceInternal) SQLListCols() string   { return __sqlProductSourceInternal_ListCols }

func (m *ProductSourceInternal) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.JSON{m.Secret},
		core.String(m.AccessToken),
		core.Time(m.ExpiresAt),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *ProductSourceInternal) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		core.JSON{&m.Secret},
		(*core.String)(&m.AccessToken),
		(*core.Time)(&m.ExpiresAt),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *ProductSourceInternal) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductSourceInternals) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductSourceInternals, 0, 128)
	for rows.Next() {
		m := new(ProductSourceInternal)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ProductSourceInternal) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceInternal_Select)
	return nil
}

func (_ *ProductSourceInternals) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceInternal_Select)
	return nil
}

func (m *ProductSourceInternal) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceInternal_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ProductSourceInternals) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceInternal_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(6)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ProductSourceInternal) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("product_source_internal")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Secret != nil {
		flag = true
		w.WriteName("secret")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Secret})
	}
	if m.AccessToken != "" {
		flag = true
		w.WriteName("access_token")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccessToken)
	}
	if !m.ExpiresAt.IsZero() {
		flag = true
		w.WriteName("expires_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExpiresAt)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ProductSourceInternal) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceInternal_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ProductSourceInternalHistory map[string]interface{}
type ProductSourceInternalHistories []map[string]interface{}

func (m *ProductSourceInternalHistory) SQLTableName() string {
	return "history.\"product_source_internal\""
}
func (m ProductSourceInternalHistories) SQLTableName() string {
	return "history.\"product_source_internal\""
}

func (m *ProductSourceInternalHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceInternal_Select_history)
	return nil
}

func (m ProductSourceInternalHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceInternal_Select_history)
	return nil
}

func (m ProductSourceInternalHistory) ID() core.Interface     { return core.Interface{m["id"]} }
func (m ProductSourceInternalHistory) Secret() core.Interface { return core.Interface{m["secret"]} }
func (m ProductSourceInternalHistory) AccessToken() core.Interface {
	return core.Interface{m["access_token"]}
}
func (m ProductSourceInternalHistory) ExpiresAt() core.Interface {
	return core.Interface{m["expires_at"]}
}
func (m ProductSourceInternalHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m ProductSourceInternalHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *ProductSourceInternalHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ProductSourceInternalHistory, 6)
	res["id"] = data[0]
	res["secret"] = data[1]
	res["access_token"] = data[2]
	res["expires_at"] = data[3]
	res["created_at"] = data[4]
	res["updated_at"] = data[5]
	*m = res
	return nil
}

func (ms *ProductSourceInternalHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	res := make(ProductSourceInternalHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ProductSourceInternalHistory)
		m["id"] = data[0]
		m["secret"] = data[1]
		m["access_token"] = data[2]
		m["expires_at"] = data[3]
		m["created_at"] = data[4]
		m["updated_at"] = data[5]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// *ProductSourceInternalAccessToken is a substruct of *ProductSourceInternal
func substructProductSourceInternalAccessToken(_ *ProductSourceInternalAccessToken, _ *ProductSourceInternal) bool {
	return true
}

func ProductSourceInternalAccessTokensFromProductSourceInternals(ps []*ProductSourceInternal) []*ProductSourceInternalAccessToken {
	ss := make([]*ProductSourceInternalAccessToken, len(ps))
	for i, p := range ps {
		ss[i] = NewProductSourceInternalAccessTokenFromProductSourceInternal(p)
	}
	return ss
}

func ProductSourceInternalAccessTokensToProductSourceInternals(ss []*ProductSourceInternalAccessToken) []*ProductSourceInternal {
	ps := make([]*ProductSourceInternal, len(ss))
	for i, s := range ss {
		ps[i] = s.ToProductSourceInternal()
	}
	return ps
}

func NewProductSourceInternalAccessTokenFromProductSourceInternal(sp *ProductSourceInternal) *ProductSourceInternalAccessToken {
	if sp == nil {
		return nil
	}
	s := new(ProductSourceInternalAccessToken)
	s.CopyFrom(sp)
	return s
}

func (s *ProductSourceInternalAccessToken) ToProductSourceInternal() *ProductSourceInternal {
	if s == nil {
		return nil
	}
	sp := new(ProductSourceInternal)
	s.AssignTo(sp)
	return sp
}

func (s *ProductSourceInternalAccessToken) CopyFrom(sp *ProductSourceInternal) {
	s.AccessToken = sp.AccessToken
	s.ExpiresAt = sp.ExpiresAt
	s.UpdatedAt = sp.UpdatedAt
}

func (s *ProductSourceInternalAccessToken) AssignTo(sp *ProductSourceInternal) {
	sp.AccessToken = s.AccessToken
	sp.ExpiresAt = s.ExpiresAt
	sp.UpdatedAt = s.UpdatedAt
}

// Type ProductSourceInternalAccessToken represents table product_source_internal
func sqlgenProductSourceInternalAccessToken(_ *ProductSourceInternalAccessToken, _ *ProductSourceInternal) bool {
	return true
}

type ProductSourceInternalAccessTokens []*ProductSourceInternalAccessToken

const __sqlProductSourceInternalAccessToken_Table = "product_source_internal"
const __sqlProductSourceInternalAccessToken_ListCols = "\"access_token\",\"expires_at\",\"updated_at\""
const __sqlProductSourceInternalAccessToken_Insert = "INSERT INTO \"product_source_internal\" (" + __sqlProductSourceInternalAccessToken_ListCols + ") VALUES"
const __sqlProductSourceInternalAccessToken_Select = "SELECT " + __sqlProductSourceInternalAccessToken_ListCols + " FROM \"product_source_internal\""
const __sqlProductSourceInternalAccessToken_Select_history = "SELECT " + __sqlProductSourceInternalAccessToken_ListCols + " FROM history.\"product_source_internal\""
const __sqlProductSourceInternalAccessToken_UpdateAll = "UPDATE \"product_source_internal\" SET (" + __sqlProductSourceInternalAccessToken_ListCols + ")"

func (m *ProductSourceInternalAccessToken) SQLTableName() string  { return "product_source_internal" }
func (m *ProductSourceInternalAccessTokens) SQLTableName() string { return "product_source_internal" }
func (m *ProductSourceInternalAccessToken) SQLListCols() string {
	return __sqlProductSourceInternalAccessToken_ListCols
}

func (m *ProductSourceInternalAccessToken) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.String(m.AccessToken),
		core.Time(m.ExpiresAt),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *ProductSourceInternalAccessToken) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.String)(&m.AccessToken),
		(*core.Time)(&m.ExpiresAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *ProductSourceInternalAccessToken) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductSourceInternalAccessTokens) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductSourceInternalAccessTokens, 0, 128)
	for rows.Next() {
		m := new(ProductSourceInternalAccessToken)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ProductSourceInternalAccessToken) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceInternalAccessToken_Select)
	return nil
}

func (_ *ProductSourceInternalAccessTokens) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceInternalAccessToken_Select)
	return nil
}

func (m *ProductSourceInternalAccessToken) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceInternalAccessToken_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(3)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ProductSourceInternalAccessTokens) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceInternalAccessToken_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(3)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ProductSourceInternalAccessToken) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("product_source_internal")
	w.WriteRawString(" SET ")
	if m.AccessToken != "" {
		flag = true
		w.WriteName("access_token")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccessToken)
	}
	if !m.ExpiresAt.IsZero() {
		flag = true
		w.WriteName("expires_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExpiresAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ProductSourceInternalAccessToken) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceInternalAccessToken_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(3)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ProductSourceInternalAccessTokenHistory map[string]interface{}
type ProductSourceInternalAccessTokenHistories []map[string]interface{}

func (m *ProductSourceInternalAccessTokenHistory) SQLTableName() string {
	return "history.\"product_source_internal\""
}
func (m ProductSourceInternalAccessTokenHistories) SQLTableName() string {
	return "history.\"product_source_internal\""
}

func (m *ProductSourceInternalAccessTokenHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceInternalAccessToken_Select_history)
	return nil
}

func (m ProductSourceInternalAccessTokenHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceInternalAccessToken_Select_history)
	return nil
}

func (m ProductSourceInternalAccessTokenHistory) AccessToken() core.Interface {
	return core.Interface{m["access_token"]}
}
func (m ProductSourceInternalAccessTokenHistory) ExpiresAt() core.Interface {
	return core.Interface{m["expires_at"]}
}
func (m ProductSourceInternalAccessTokenHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *ProductSourceInternalAccessTokenHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 3)
	args := make([]interface{}, 3)
	for i := 0; i < 3; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ProductSourceInternalAccessTokenHistory, 3)
	res["access_token"] = data[0]
	res["expires_at"] = data[1]
	res["updated_at"] = data[2]
	*m = res
	return nil
}

func (ms *ProductSourceInternalAccessTokenHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 3)
	args := make([]interface{}, 3)
	for i := 0; i < 3; i++ {
		args[i] = &data[i]
	}
	res := make(ProductSourceInternalAccessTokenHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ProductSourceInternalAccessTokenHistory)
		m["access_token"] = data[0]
		m["expires_at"] = data[1]
		m["updated_at"] = data[2]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ProductSourceExtended represents a join
func sqlgenProductSourceExtended(_ *ProductSourceExtended, _ *ProductSource, as sq.AS, t0 sq.JOIN_TYPE, _ *ProductSourceInternal, a0 sq.AS, c0 string) bool {
	__sqlProductSourceExtended_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlProductSourceExtended_As = as
	__sqlProductSourceExtended_JoinAs = []sq.AS{a0}
	__sqlProductSourceExtended_JoinConds = []string{c0}
	return true
}

type ProductSourceExtendeds []*ProductSourceExtended

var __sqlProductSourceExtended_JoinTypes []sq.JOIN_TYPE
var __sqlProductSourceExtended_As sq.AS
var __sqlProductSourceExtended_JoinAs []sq.AS
var __sqlProductSourceExtended_JoinConds []string

func (m *ProductSourceExtended) SQLTableName() string  { return "product_source" }
func (m *ProductSourceExtendeds) SQLTableName() string { return "product_source" }

func (m *ProductSourceExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductSourceExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductSourceExtendeds, 0, 128)
	for rows.Next() {
		m := new(ProductSourceExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ProductSourceExtended) SQLSelect(w SQLWriter) error {
	(*ProductSourceExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ProductSourceExtended)(nil).__sqlJoin(w, __sqlProductSourceExtended_JoinTypes)
	return nil
}

func (m *ProductSourceExtendeds) SQLSelect(w SQLWriter) error {
	return (*ProductSourceExtended)(nil).SQLSelect(w)
}

func (m *ProductSourceExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlProductSourceExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ProductSourceExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ProductSourceExtended)(nil).SQLJoin(w, types)
}

func (m *ProductSourceExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlProductSourceExtended_As), (*ProductSource)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlProductSourceExtended_JoinAs[0]), (*ProductSourceInternal)(nil).SQLListCols())
}

func (m *ProductSourceExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("product_source")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductSourceExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*ProductSourceInternal)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductSourceExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlProductSourceExtended_JoinConds[0])
}

func (m *ProductSourceExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.ProductSource = new(ProductSource)
	args = append(args, m.ProductSource.SQLScanArgs(opts)...)
	m.ProductSourceInternal = new(ProductSourceInternal)
	args = append(args, m.ProductSourceInternal.SQLScanArgs(opts)...)

	return args
}

// Type SupplierFtProductSource represents a join
func sqlgenSupplierFtProductSource(_ *SupplierFtProductSource, _ *Supplier, as sq.AS, t0 sq.JOIN_TYPE, _ *ProductSource, a0 sq.AS, c0 string) bool {
	__sqlSupplierFtProductSource_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlSupplierFtProductSource_As = as
	__sqlSupplierFtProductSource_JoinAs = []sq.AS{a0}
	__sqlSupplierFtProductSource_JoinConds = []string{c0}
	return true
}

type SupplierFtProductSources []*SupplierFtProductSource

var __sqlSupplierFtProductSource_JoinTypes []sq.JOIN_TYPE
var __sqlSupplierFtProductSource_As sq.AS
var __sqlSupplierFtProductSource_JoinAs []sq.AS
var __sqlSupplierFtProductSource_JoinConds []string

func (m *SupplierFtProductSource) SQLTableName() string  { return "supplier" }
func (m *SupplierFtProductSources) SQLTableName() string { return "supplier" }

func (m *SupplierFtProductSource) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *SupplierFtProductSources) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(SupplierFtProductSources, 0, 128)
	for rows.Next() {
		m := new(SupplierFtProductSource)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *SupplierFtProductSource) SQLSelect(w SQLWriter) error {
	(*SupplierFtProductSource)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*SupplierFtProductSource)(nil).__sqlJoin(w, __sqlSupplierFtProductSource_JoinTypes)
	return nil
}

func (m *SupplierFtProductSources) SQLSelect(w SQLWriter) error {
	return (*SupplierFtProductSource)(nil).SQLSelect(w)
}

func (m *SupplierFtProductSource) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlSupplierFtProductSource_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *SupplierFtProductSources) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*SupplierFtProductSource)(nil).SQLJoin(w, types)
}

func (m *SupplierFtProductSource) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlSupplierFtProductSource_As), (*Supplier)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlSupplierFtProductSource_JoinAs[0]), (*ProductSource)(nil).SQLListCols())
}

func (m *SupplierFtProductSource) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("supplier")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlSupplierFtProductSource_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*ProductSource)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlSupplierFtProductSource_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlSupplierFtProductSource_JoinConds[0])
}

func (m *SupplierFtProductSource) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.Supplier = new(Supplier)
	args = append(args, m.Supplier.SQLScanArgs(opts)...)
	m.ProductSource = new(ProductSource)
	args = append(args, m.ProductSource.SQLScanArgs(opts)...)

	return args
}

// Type ProductSourceFtSupplier represents a join
func sqlgenProductSourceFtSupplier(_ *ProductSourceFtSupplier, _ *ProductSource, as sq.AS, t0 sq.JOIN_TYPE, _ *Supplier, a0 sq.AS, c0 string) bool {
	__sqlProductSourceFtSupplier_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlProductSourceFtSupplier_As = as
	__sqlProductSourceFtSupplier_JoinAs = []sq.AS{a0}
	__sqlProductSourceFtSupplier_JoinConds = []string{c0}
	return true
}

type ProductSourceFtSuppliers []*ProductSourceFtSupplier

var __sqlProductSourceFtSupplier_JoinTypes []sq.JOIN_TYPE
var __sqlProductSourceFtSupplier_As sq.AS
var __sqlProductSourceFtSupplier_JoinAs []sq.AS
var __sqlProductSourceFtSupplier_JoinConds []string

func (m *ProductSourceFtSupplier) SQLTableName() string  { return "product_source" }
func (m *ProductSourceFtSuppliers) SQLTableName() string { return "product_source" }

func (m *ProductSourceFtSupplier) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductSourceFtSuppliers) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductSourceFtSuppliers, 0, 128)
	for rows.Next() {
		m := new(ProductSourceFtSupplier)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ProductSourceFtSupplier) SQLSelect(w SQLWriter) error {
	(*ProductSourceFtSupplier)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ProductSourceFtSupplier)(nil).__sqlJoin(w, __sqlProductSourceFtSupplier_JoinTypes)
	return nil
}

func (m *ProductSourceFtSuppliers) SQLSelect(w SQLWriter) error {
	return (*ProductSourceFtSupplier)(nil).SQLSelect(w)
}

func (m *ProductSourceFtSupplier) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlProductSourceFtSupplier_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ProductSourceFtSuppliers) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ProductSourceFtSupplier)(nil).SQLJoin(w, types)
}

func (m *ProductSourceFtSupplier) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlProductSourceFtSupplier_As), (*ProductSource)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlProductSourceFtSupplier_JoinAs[0]), (*Supplier)(nil).SQLListCols())
}

func (m *ProductSourceFtSupplier) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("product_source")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductSourceFtSupplier_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Supplier)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductSourceFtSupplier_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlProductSourceFtSupplier_JoinConds[0])
}

func (m *ProductSourceFtSupplier) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.ProductSource = new(ProductSource)
	args = append(args, m.ProductSource.SQLScanArgs(opts)...)
	m.Supplier = new(Supplier)
	args = append(args, m.Supplier.SQLScanArgs(opts)...)

	return args
}

// Type ShopFtProductSource represents a join
func sqlgenShopFtProductSource(_ *ShopFtProductSource, _ *Shop, as sq.AS, t0 sq.JOIN_TYPE, _ *ProductSource, a0 sq.AS, c0 string, t1 sq.JOIN_TYPE, _ *ProductSourceInternal, a1 sq.AS, c1 string) bool {
	__sqlShopFtProductSource_JoinTypes = []sq.JOIN_TYPE{t0, t1}
	__sqlShopFtProductSource_As = as
	__sqlShopFtProductSource_JoinAs = []sq.AS{a0, a1}
	__sqlShopFtProductSource_JoinConds = []string{c0, c1}
	return true
}

type ShopFtProductSources []*ShopFtProductSource

var __sqlShopFtProductSource_JoinTypes []sq.JOIN_TYPE
var __sqlShopFtProductSource_As sq.AS
var __sqlShopFtProductSource_JoinAs []sq.AS
var __sqlShopFtProductSource_JoinConds []string

func (m *ShopFtProductSource) SQLTableName() string  { return "shop" }
func (m *ShopFtProductSources) SQLTableName() string { return "shop" }

func (m *ShopFtProductSource) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopFtProductSources) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopFtProductSources, 0, 128)
	for rows.Next() {
		m := new(ShopFtProductSource)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ShopFtProductSource) SQLSelect(w SQLWriter) error {
	(*ShopFtProductSource)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ShopFtProductSource)(nil).__sqlJoin(w, __sqlShopFtProductSource_JoinTypes)
	return nil
}

func (m *ShopFtProductSources) SQLSelect(w SQLWriter) error {
	return (*ShopFtProductSource)(nil).SQLSelect(w)
}

func (m *ShopFtProductSource) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlShopFtProductSource_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ShopFtProductSources) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ShopFtProductSource)(nil).SQLJoin(w, types)
}

func (m *ShopFtProductSource) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlShopFtProductSource_As), (*Shop)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopFtProductSource_JoinAs[0]), (*ProductSource)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopFtProductSource_JoinAs[1]), (*ProductSourceInternal)(nil).SQLListCols())
}

func (m *ShopFtProductSource) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 2 {
		panic("common/sql: expect 2 types to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("shop")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopFtProductSource_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*ProductSource)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopFtProductSource_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopFtProductSource_JoinConds[0])
	w.WriteByte(' ')
	w.WriteRawString(string(types[1]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*ProductSourceInternal)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopFtProductSource_JoinAs[1]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopFtProductSource_JoinConds[1])
}

func (m *ShopFtProductSource) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.Shop = new(Shop)
	args = append(args, m.Shop.SQLScanArgs(opts)...)
	m.ProductSource = new(ProductSource)
	args = append(args, m.ProductSource.SQLScanArgs(opts)...)
	m.ProductSourceInternal = new(ProductSourceInternal)
	args = append(args, m.ProductSourceInternal.SQLScanArgs(opts)...)

	return args
}

// Type OrderSource represents table order_source
func sqlgenOrderSource(_ *OrderSource) bool { return true }

type OrderSources []*OrderSource

const __sqlOrderSource_Table = "order_source"
const __sqlOrderSource_ListCols = "\"id\",\"shop_id\",\"type\",\"name\",\"status\",\"external_status\",\"external_key\",\"external_info\",\"extra_info\",\"created_at\",\"updated_at\",\"last_sync_at\",\"sync_state_orders\""
const __sqlOrderSource_Insert = "INSERT INTO \"order_source\" (" + __sqlOrderSource_ListCols + ") VALUES"
const __sqlOrderSource_Select = "SELECT " + __sqlOrderSource_ListCols + " FROM \"order_source\""
const __sqlOrderSource_Select_history = "SELECT " + __sqlOrderSource_ListCols + " FROM history.\"order_source\""
const __sqlOrderSource_UpdateAll = "UPDATE \"order_source\" SET (" + __sqlOrderSource_ListCols + ")"

func (m *OrderSource) SQLTableName() string  { return "order_source" }
func (m *OrderSources) SQLTableName() string { return "order_source" }
func (m *OrderSource) SQLListCols() string   { return __sqlOrderSource_ListCols }

func (m *OrderSource) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ShopID),
		core.String(m.Type),
		core.String(m.Name),
		core.Int(m.Status),
		core.Int(m.ExternalStatus),
		core.String(m.ExternalKey),
		core.JSON{m.ExternalInfo},
		core.JSON{m.ExtraInfo},
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.LastSyncAt),
		core.JSON{m.SyncStateOrders},
	}
}

func (m *OrderSource) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ShopID),
		(*core.String)(&m.Type),
		(*core.String)(&m.Name),
		(*core.Int)(&m.Status),
		(*core.Int)(&m.ExternalStatus),
		(*core.String)(&m.ExternalKey),
		core.JSON{&m.ExternalInfo},
		core.JSON{&m.ExtraInfo},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.LastSyncAt),
		core.JSON{&m.SyncStateOrders},
	}
}

func (m *OrderSource) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *OrderSources) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(OrderSources, 0, 128)
	for rows.Next() {
		m := new(OrderSource)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *OrderSource) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSource_Select)
	return nil
}

func (_ *OrderSources) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSource_Select)
	return nil
}

func (m *OrderSource) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSource_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(13)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms OrderSources) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSource_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(13)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *OrderSource) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("order_source")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if m.ExternalStatus != 0 {
		flag = true
		w.WriteName("external_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalStatus)
	}
	if m.ExternalKey != "" {
		flag = true
		w.WriteName("external_key")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalKey)
	}
	if m.ExternalInfo != nil {
		flag = true
		w.WriteName("external_info")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalInfo})
	}
	if m.ExtraInfo != nil {
		flag = true
		w.WriteName("extra_info")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExtraInfo})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.LastSyncAt.IsZero() {
		flag = true
		w.WriteName("last_sync_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.LastSyncAt)
	}
	if m.SyncStateOrders != nil {
		flag = true
		w.WriteName("sync_state_orders")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.SyncStateOrders})
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *OrderSource) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSource_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(13)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type OrderSourceHistory map[string]interface{}
type OrderSourceHistories []map[string]interface{}

func (m *OrderSourceHistory) SQLTableName() string  { return "history.\"order_source\"" }
func (m OrderSourceHistories) SQLTableName() string { return "history.\"order_source\"" }

func (m *OrderSourceHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSource_Select_history)
	return nil
}

func (m OrderSourceHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSource_Select_history)
	return nil
}

func (m OrderSourceHistory) ID() core.Interface     { return core.Interface{m["id"]} }
func (m OrderSourceHistory) ShopID() core.Interface { return core.Interface{m["shop_id"]} }
func (m OrderSourceHistory) Type() core.Interface   { return core.Interface{m["type"]} }
func (m OrderSourceHistory) Name() core.Interface   { return core.Interface{m["name"]} }
func (m OrderSourceHistory) Status() core.Interface { return core.Interface{m["status"]} }
func (m OrderSourceHistory) ExternalStatus() core.Interface {
	return core.Interface{m["external_status"]}
}
func (m OrderSourceHistory) ExternalKey() core.Interface  { return core.Interface{m["external_key"]} }
func (m OrderSourceHistory) ExternalInfo() core.Interface { return core.Interface{m["external_info"]} }
func (m OrderSourceHistory) ExtraInfo() core.Interface    { return core.Interface{m["extra_info"]} }
func (m OrderSourceHistory) CreatedAt() core.Interface    { return core.Interface{m["created_at"]} }
func (m OrderSourceHistory) UpdatedAt() core.Interface    { return core.Interface{m["updated_at"]} }
func (m OrderSourceHistory) LastSyncAt() core.Interface   { return core.Interface{m["last_sync_at"]} }
func (m OrderSourceHistory) SyncStateOrders() core.Interface {
	return core.Interface{m["sync_state_orders"]}
}

func (m *OrderSourceHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 13)
	args := make([]interface{}, 13)
	for i := 0; i < 13; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(OrderSourceHistory, 13)
	res["id"] = data[0]
	res["shop_id"] = data[1]
	res["type"] = data[2]
	res["name"] = data[3]
	res["status"] = data[4]
	res["external_status"] = data[5]
	res["external_key"] = data[6]
	res["external_info"] = data[7]
	res["extra_info"] = data[8]
	res["created_at"] = data[9]
	res["updated_at"] = data[10]
	res["last_sync_at"] = data[11]
	res["sync_state_orders"] = data[12]
	*m = res
	return nil
}

func (ms *OrderSourceHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 13)
	args := make([]interface{}, 13)
	for i := 0; i < 13; i++ {
		args[i] = &data[i]
	}
	res := make(OrderSourceHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(OrderSourceHistory)
		m["id"] = data[0]
		m["shop_id"] = data[1]
		m["type"] = data[2]
		m["name"] = data[3]
		m["status"] = data[4]
		m["external_status"] = data[5]
		m["external_key"] = data[6]
		m["external_info"] = data[7]
		m["extra_info"] = data[8]
		m["created_at"] = data[9]
		m["updated_at"] = data[10]
		m["last_sync_at"] = data[11]
		m["sync_state_orders"] = data[12]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// *OrderSourceSyncStates is a substruct of *OrderSource
func substructOrderSourceSyncStates(_ *OrderSourceSyncStates, _ *OrderSource) bool { return true }

func OrderSourceSyncStatesesFromOrderSources(ps []*OrderSource) []*OrderSourceSyncStates {
	ss := make([]*OrderSourceSyncStates, len(ps))
	for i, p := range ps {
		ss[i] = NewOrderSourceSyncStatesFromOrderSource(p)
	}
	return ss
}

func OrderSourceSyncStatesesToOrderSources(ss []*OrderSourceSyncStates) []*OrderSource {
	ps := make([]*OrderSource, len(ss))
	for i, s := range ss {
		ps[i] = s.ToOrderSource()
	}
	return ps
}

func NewOrderSourceSyncStatesFromOrderSource(sp *OrderSource) *OrderSourceSyncStates {
	if sp == nil {
		return nil
	}
	s := new(OrderSourceSyncStates)
	s.CopyFrom(sp)
	return s
}

func (s *OrderSourceSyncStates) ToOrderSource() *OrderSource {
	if s == nil {
		return nil
	}
	sp := new(OrderSource)
	s.AssignTo(sp)
	return sp
}

func (s *OrderSourceSyncStates) CopyFrom(sp *OrderSource) {
	s.LastSyncAt = sp.LastSyncAt
	s.SyncStateOrders = sp.SyncStateOrders
}

func (s *OrderSourceSyncStates) AssignTo(sp *OrderSource) {
	sp.LastSyncAt = s.LastSyncAt
	sp.SyncStateOrders = s.SyncStateOrders
}

// Type OrderSourceSyncStates represents table order_source
func sqlgenOrderSourceSyncStates(_ *OrderSourceSyncStates, _ *OrderSource) bool { return true }

type OrderSourceSyncStateses []*OrderSourceSyncStates

const __sqlOrderSourceSyncStates_Table = "order_source"
const __sqlOrderSourceSyncStates_ListCols = "\"last_sync_at\",\"sync_state_orders\""
const __sqlOrderSourceSyncStates_Insert = "INSERT INTO \"order_source\" (" + __sqlOrderSourceSyncStates_ListCols + ") VALUES"
const __sqlOrderSourceSyncStates_Select = "SELECT " + __sqlOrderSourceSyncStates_ListCols + " FROM \"order_source\""
const __sqlOrderSourceSyncStates_Select_history = "SELECT " + __sqlOrderSourceSyncStates_ListCols + " FROM history.\"order_source\""
const __sqlOrderSourceSyncStates_UpdateAll = "UPDATE \"order_source\" SET (" + __sqlOrderSourceSyncStates_ListCols + ")"

func (m *OrderSourceSyncStates) SQLTableName() string   { return "order_source" }
func (m *OrderSourceSyncStateses) SQLTableName() string { return "order_source" }
func (m *OrderSourceSyncStates) SQLListCols() string    { return __sqlOrderSourceSyncStates_ListCols }

func (m *OrderSourceSyncStates) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Now(m.LastSyncAt, now, true),
		core.JSON{m.SyncStateOrders},
	}
}

func (m *OrderSourceSyncStates) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Time)(&m.LastSyncAt),
		core.JSON{&m.SyncStateOrders},
	}
}

func (m *OrderSourceSyncStates) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *OrderSourceSyncStateses) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(OrderSourceSyncStateses, 0, 128)
	for rows.Next() {
		m := new(OrderSourceSyncStates)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *OrderSourceSyncStates) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSourceSyncStates_Select)
	return nil
}

func (_ *OrderSourceSyncStateses) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSourceSyncStates_Select)
	return nil
}

func (m *OrderSourceSyncStates) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSourceSyncStates_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(2)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms OrderSourceSyncStateses) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSourceSyncStates_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(2)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *OrderSourceSyncStates) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("order_source")
	w.WriteRawString(" SET ")
	if !m.LastSyncAt.IsZero() {
		flag = true
		w.WriteName("last_sync_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.LastSyncAt, time.Now(), true))
	}
	if m.SyncStateOrders != nil {
		flag = true
		w.WriteName("sync_state_orders")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.SyncStateOrders})
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *OrderSourceSyncStates) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSourceSyncStates_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(2)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type OrderSourceSyncStatesHistory map[string]interface{}
type OrderSourceSyncStatesHistories []map[string]interface{}

func (m *OrderSourceSyncStatesHistory) SQLTableName() string  { return "history.\"order_source\"" }
func (m OrderSourceSyncStatesHistories) SQLTableName() string { return "history.\"order_source\"" }

func (m *OrderSourceSyncStatesHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSourceSyncStates_Select_history)
	return nil
}

func (m OrderSourceSyncStatesHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSourceSyncStates_Select_history)
	return nil
}

func (m OrderSourceSyncStatesHistory) LastSyncAt() core.Interface {
	return core.Interface{m["last_sync_at"]}
}
func (m OrderSourceSyncStatesHistory) SyncStateOrders() core.Interface {
	return core.Interface{m["sync_state_orders"]}
}

func (m *OrderSourceSyncStatesHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 2)
	args := make([]interface{}, 2)
	for i := 0; i < 2; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(OrderSourceSyncStatesHistory, 2)
	res["last_sync_at"] = data[0]
	res["sync_state_orders"] = data[1]
	*m = res
	return nil
}

func (ms *OrderSourceSyncStatesHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 2)
	args := make([]interface{}, 2)
	for i := 0; i < 2; i++ {
		args[i] = &data[i]
	}
	res := make(OrderSourceSyncStatesHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(OrderSourceSyncStatesHistory)
		m["last_sync_at"] = data[0]
		m["sync_state_orders"] = data[1]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type OrderSourceInternal represents table order_source_internal
func sqlgenOrderSourceInternal(_ *OrderSourceInternal) bool { return true }

type OrderSourceInternals []*OrderSourceInternal

const __sqlOrderSourceInternal_Table = "order_source_internal"
const __sqlOrderSourceInternal_ListCols = "\"id\",\"access_token\",\"expires_at\",\"created_at\",\"updated_at\""
const __sqlOrderSourceInternal_Insert = "INSERT INTO \"order_source_internal\" (" + __sqlOrderSourceInternal_ListCols + ") VALUES"
const __sqlOrderSourceInternal_Select = "SELECT " + __sqlOrderSourceInternal_ListCols + " FROM \"order_source_internal\""
const __sqlOrderSourceInternal_Select_history = "SELECT " + __sqlOrderSourceInternal_ListCols + " FROM history.\"order_source_internal\""
const __sqlOrderSourceInternal_UpdateAll = "UPDATE \"order_source_internal\" SET (" + __sqlOrderSourceInternal_ListCols + ")"

func (m *OrderSourceInternal) SQLTableName() string  { return "order_source_internal" }
func (m *OrderSourceInternals) SQLTableName() string { return "order_source_internal" }
func (m *OrderSourceInternal) SQLListCols() string   { return __sqlOrderSourceInternal_ListCols }

func (m *OrderSourceInternal) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.String(m.AccessToken),
		core.Time(m.ExpiresAt),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *OrderSourceInternal) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.String)(&m.AccessToken),
		(*core.Time)(&m.ExpiresAt),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *OrderSourceInternal) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *OrderSourceInternals) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(OrderSourceInternals, 0, 128)
	for rows.Next() {
		m := new(OrderSourceInternal)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *OrderSourceInternal) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSourceInternal_Select)
	return nil
}

func (_ *OrderSourceInternals) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSourceInternal_Select)
	return nil
}

func (m *OrderSourceInternal) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSourceInternal_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(5)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms OrderSourceInternals) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSourceInternal_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(5)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *OrderSourceInternal) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("order_source_internal")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.AccessToken != "" {
		flag = true
		w.WriteName("access_token")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccessToken)
	}
	if !m.ExpiresAt.IsZero() {
		flag = true
		w.WriteName("expires_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExpiresAt)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *OrderSourceInternal) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSourceInternal_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(5)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type OrderSourceInternalHistory map[string]interface{}
type OrderSourceInternalHistories []map[string]interface{}

func (m *OrderSourceInternalHistory) SQLTableName() string { return "history.\"order_source_internal\"" }
func (m OrderSourceInternalHistories) SQLTableName() string {
	return "history.\"order_source_internal\""
}

func (m *OrderSourceInternalHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSourceInternal_Select_history)
	return nil
}

func (m OrderSourceInternalHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlOrderSourceInternal_Select_history)
	return nil
}

func (m OrderSourceInternalHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m OrderSourceInternalHistory) AccessToken() core.Interface {
	return core.Interface{m["access_token"]}
}
func (m OrderSourceInternalHistory) ExpiresAt() core.Interface { return core.Interface{m["expires_at"]} }
func (m OrderSourceInternalHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m OrderSourceInternalHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *OrderSourceInternalHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 5)
	args := make([]interface{}, 5)
	for i := 0; i < 5; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(OrderSourceInternalHistory, 5)
	res["id"] = data[0]
	res["access_token"] = data[1]
	res["expires_at"] = data[2]
	res["created_at"] = data[3]
	res["updated_at"] = data[4]
	*m = res
	return nil
}

func (ms *OrderSourceInternalHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 5)
	args := make([]interface{}, 5)
	for i := 0; i < 5; i++ {
		args[i] = &data[i]
	}
	res := make(OrderSourceInternalHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(OrderSourceInternalHistory)
		m["id"] = data[0]
		m["access_token"] = data[1]
		m["expires_at"] = data[2]
		m["created_at"] = data[3]
		m["updated_at"] = data[4]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type OrderSourceExtended represents a join
func sqlgenOrderSourceExtended(_ *OrderSourceExtended, _ *OrderSource, as sq.AS, t0 sq.JOIN_TYPE, _ *OrderSourceInternal, a0 sq.AS, c0 string) bool {
	__sqlOrderSourceExtended_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlOrderSourceExtended_As = as
	__sqlOrderSourceExtended_JoinAs = []sq.AS{a0}
	__sqlOrderSourceExtended_JoinConds = []string{c0}
	return true
}

type OrderSourceExtendeds []*OrderSourceExtended

var __sqlOrderSourceExtended_JoinTypes []sq.JOIN_TYPE
var __sqlOrderSourceExtended_As sq.AS
var __sqlOrderSourceExtended_JoinAs []sq.AS
var __sqlOrderSourceExtended_JoinConds []string

func (m *OrderSourceExtended) SQLTableName() string  { return "order_source" }
func (m *OrderSourceExtendeds) SQLTableName() string { return "order_source" }

func (m *OrderSourceExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *OrderSourceExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(OrderSourceExtendeds, 0, 128)
	for rows.Next() {
		m := new(OrderSourceExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *OrderSourceExtended) SQLSelect(w SQLWriter) error {
	(*OrderSourceExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*OrderSourceExtended)(nil).__sqlJoin(w, __sqlOrderSourceExtended_JoinTypes)
	return nil
}

func (m *OrderSourceExtendeds) SQLSelect(w SQLWriter) error {
	return (*OrderSourceExtended)(nil).SQLSelect(w)
}

func (m *OrderSourceExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlOrderSourceExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *OrderSourceExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*OrderSourceExtended)(nil).SQLJoin(w, types)
}

func (m *OrderSourceExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlOrderSourceExtended_As), (*OrderSource)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlOrderSourceExtended_JoinAs[0]), (*OrderSourceInternal)(nil).SQLListCols())
}

func (m *OrderSourceExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("order_source")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlOrderSourceExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*OrderSourceInternal)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlOrderSourceExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlOrderSourceExtended_JoinConds[0])
}

func (m *OrderSourceExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.OrderSource = new(OrderSource)
	args = append(args, m.OrderSource.SQLScanArgs(opts)...)
	m.OrderSourceInternal = new(OrderSourceInternal)
	args = append(args, m.OrderSourceInternal.SQLScanArgs(opts)...)

	return args
}

// Type ShopFtOrderSource represents a join
func sqlgenShopFtOrderSource(_ *ShopFtOrderSource, _ *Shop, as sq.AS, t0 sq.JOIN_TYPE, _ *OrderSource, a0 sq.AS, c0 string, t1 sq.JOIN_TYPE, _ *OrderSourceInternal, a1 sq.AS, c1 string) bool {
	__sqlShopFtOrderSource_JoinTypes = []sq.JOIN_TYPE{t0, t1}
	__sqlShopFtOrderSource_As = as
	__sqlShopFtOrderSource_JoinAs = []sq.AS{a0, a1}
	__sqlShopFtOrderSource_JoinConds = []string{c0, c1}
	return true
}

type ShopFtOrderSources []*ShopFtOrderSource

var __sqlShopFtOrderSource_JoinTypes []sq.JOIN_TYPE
var __sqlShopFtOrderSource_As sq.AS
var __sqlShopFtOrderSource_JoinAs []sq.AS
var __sqlShopFtOrderSource_JoinConds []string

func (m *ShopFtOrderSource) SQLTableName() string  { return "shop" }
func (m *ShopFtOrderSources) SQLTableName() string { return "shop" }

func (m *ShopFtOrderSource) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopFtOrderSources) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopFtOrderSources, 0, 128)
	for rows.Next() {
		m := new(ShopFtOrderSource)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ShopFtOrderSource) SQLSelect(w SQLWriter) error {
	(*ShopFtOrderSource)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ShopFtOrderSource)(nil).__sqlJoin(w, __sqlShopFtOrderSource_JoinTypes)
	return nil
}

func (m *ShopFtOrderSources) SQLSelect(w SQLWriter) error {
	return (*ShopFtOrderSource)(nil).SQLSelect(w)
}

func (m *ShopFtOrderSource) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlShopFtOrderSource_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ShopFtOrderSources) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ShopFtOrderSource)(nil).SQLJoin(w, types)
}

func (m *ShopFtOrderSource) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlShopFtOrderSource_As), (*Shop)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopFtOrderSource_JoinAs[0]), (*OrderSource)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopFtOrderSource_JoinAs[1]), (*OrderSourceInternal)(nil).SQLListCols())
}

func (m *ShopFtOrderSource) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 2 {
		panic("common/sql: expect 2 types to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("shop")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopFtOrderSource_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*OrderSource)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopFtOrderSource_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopFtOrderSource_JoinConds[0])
	w.WriteByte(' ')
	w.WriteRawString(string(types[1]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*OrderSourceInternal)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopFtOrderSource_JoinAs[1]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopFtOrderSource_JoinConds[1])
}

func (m *ShopFtOrderSource) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.Shop = new(Shop)
	args = append(args, m.Shop.SQLScanArgs(opts)...)
	m.OrderSource = new(OrderSource)
	args = append(args, m.OrderSource.SQLScanArgs(opts)...)
	m.OrderSourceInternal = new(OrderSourceInternal)
	args = append(args, m.OrderSourceInternal.SQLScanArgs(opts)...)

	return args
}

// Type ProductSourceCategoryExternal represents table product_source_category_external
func sqlgenProductSourceCategoryExternal(_ *ProductSourceCategoryExternal) bool { return true }

type ProductSourceCategoryExternals []*ProductSourceCategoryExternal

const __sqlProductSourceCategoryExternal_Table = "product_source_category_external"
const __sqlProductSourceCategoryExternal_ListCols = "\"id\",\"product_source_id\",\"product_source_type\",\"external_id\",\"external_parent_id\",\"external_code\",\"external_name\",\"external_status\",\"external_updated_at\",\"external_created_at\",\"external_deleted_at\",\"last_sync_at\""
const __sqlProductSourceCategoryExternal_Insert = "INSERT INTO \"product_source_category_external\" (" + __sqlProductSourceCategoryExternal_ListCols + ") VALUES"
const __sqlProductSourceCategoryExternal_Select = "SELECT " + __sqlProductSourceCategoryExternal_ListCols + " FROM \"product_source_category_external\""
const __sqlProductSourceCategoryExternal_Select_history = "SELECT " + __sqlProductSourceCategoryExternal_ListCols + " FROM history.\"product_source_category_external\""
const __sqlProductSourceCategoryExternal_UpdateAll = "UPDATE \"product_source_category_external\" SET (" + __sqlProductSourceCategoryExternal_ListCols + ")"

func (m *ProductSourceCategoryExternal) SQLTableName() string {
	return "product_source_category_external"
}
func (m *ProductSourceCategoryExternals) SQLTableName() string {
	return "product_source_category_external"
}
func (m *ProductSourceCategoryExternal) SQLListCols() string {
	return __sqlProductSourceCategoryExternal_ListCols
}

func (m *ProductSourceCategoryExternal) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ProductSourceID),
		core.String(m.ProductSourceType),
		core.String(m.ExternalID),
		core.String(m.ExternalParentID),
		core.String(m.ExternalCode),
		core.String(m.ExternalName),
		core.Int(m.ExternalStatus),
		core.Time(m.ExternalUpdatedAt),
		core.Time(m.ExternalCreatedAt),
		core.Time(m.ExternalDeletedAt),
		core.Time(m.LastSyncAt),
	}
}

func (m *ProductSourceCategoryExternal) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ProductSourceID),
		(*core.String)(&m.ProductSourceType),
		(*core.String)(&m.ExternalID),
		(*core.String)(&m.ExternalParentID),
		(*core.String)(&m.ExternalCode),
		(*core.String)(&m.ExternalName),
		(*core.Int)(&m.ExternalStatus),
		(*core.Time)(&m.ExternalUpdatedAt),
		(*core.Time)(&m.ExternalCreatedAt),
		(*core.Time)(&m.ExternalDeletedAt),
		(*core.Time)(&m.LastSyncAt),
	}
}

func (m *ProductSourceCategoryExternal) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductSourceCategoryExternals) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductSourceCategoryExternals, 0, 128)
	for rows.Next() {
		m := new(ProductSourceCategoryExternal)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ProductSourceCategoryExternal) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceCategoryExternal_Select)
	return nil
}

func (_ *ProductSourceCategoryExternals) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceCategoryExternal_Select)
	return nil
}

func (m *ProductSourceCategoryExternal) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceCategoryExternal_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(12)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ProductSourceCategoryExternals) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceCategoryExternal_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(12)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ProductSourceCategoryExternal) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("product_source_category_external")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ProductSourceID != 0 {
		flag = true
		w.WriteName("product_source_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductSourceID)
	}
	if m.ProductSourceType != "" {
		flag = true
		w.WriteName("product_source_type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductSourceType)
	}
	if m.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalID)
	}
	if m.ExternalParentID != "" {
		flag = true
		w.WriteName("external_parent_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalParentID)
	}
	if m.ExternalCode != "" {
		flag = true
		w.WriteName("external_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCode)
	}
	if m.ExternalName != "" {
		flag = true
		w.WriteName("external_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalName)
	}
	if m.ExternalStatus != 0 {
		flag = true
		w.WriteName("external_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalStatus)
	}
	if !m.ExternalUpdatedAt.IsZero() {
		flag = true
		w.WriteName("external_updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalUpdatedAt)
	}
	if !m.ExternalCreatedAt.IsZero() {
		flag = true
		w.WriteName("external_created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalCreatedAt)
	}
	if !m.ExternalDeletedAt.IsZero() {
		flag = true
		w.WriteName("external_deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalDeletedAt)
	}
	if !m.LastSyncAt.IsZero() {
		flag = true
		w.WriteName("last_sync_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.LastSyncAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ProductSourceCategoryExternal) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceCategoryExternal_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(12)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ProductSourceCategoryExternalHistory map[string]interface{}
type ProductSourceCategoryExternalHistories []map[string]interface{}

func (m *ProductSourceCategoryExternalHistory) SQLTableName() string {
	return "history.\"product_source_category_external\""
}
func (m ProductSourceCategoryExternalHistories) SQLTableName() string {
	return "history.\"product_source_category_external\""
}

func (m *ProductSourceCategoryExternalHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceCategoryExternal_Select_history)
	return nil
}

func (m ProductSourceCategoryExternalHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceCategoryExternal_Select_history)
	return nil
}

func (m ProductSourceCategoryExternalHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m ProductSourceCategoryExternalHistory) ProductSourceID() core.Interface {
	return core.Interface{m["product_source_id"]}
}
func (m ProductSourceCategoryExternalHistory) ProductSourceType() core.Interface {
	return core.Interface{m["product_source_type"]}
}
func (m ProductSourceCategoryExternalHistory) ExternalID() core.Interface {
	return core.Interface{m["external_id"]}
}
func (m ProductSourceCategoryExternalHistory) ExternalParentID() core.Interface {
	return core.Interface{m["external_parent_id"]}
}
func (m ProductSourceCategoryExternalHistory) ExternalCode() core.Interface {
	return core.Interface{m["external_code"]}
}
func (m ProductSourceCategoryExternalHistory) ExternalName() core.Interface {
	return core.Interface{m["external_name"]}
}
func (m ProductSourceCategoryExternalHistory) ExternalStatus() core.Interface {
	return core.Interface{m["external_status"]}
}
func (m ProductSourceCategoryExternalHistory) ExternalUpdatedAt() core.Interface {
	return core.Interface{m["external_updated_at"]}
}
func (m ProductSourceCategoryExternalHistory) ExternalCreatedAt() core.Interface {
	return core.Interface{m["external_created_at"]}
}
func (m ProductSourceCategoryExternalHistory) ExternalDeletedAt() core.Interface {
	return core.Interface{m["external_deleted_at"]}
}
func (m ProductSourceCategoryExternalHistory) LastSyncAt() core.Interface {
	return core.Interface{m["last_sync_at"]}
}

func (m *ProductSourceCategoryExternalHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 12)
	args := make([]interface{}, 12)
	for i := 0; i < 12; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ProductSourceCategoryExternalHistory, 12)
	res["id"] = data[0]
	res["product_source_id"] = data[1]
	res["product_source_type"] = data[2]
	res["external_id"] = data[3]
	res["external_parent_id"] = data[4]
	res["external_code"] = data[5]
	res["external_name"] = data[6]
	res["external_status"] = data[7]
	res["external_updated_at"] = data[8]
	res["external_created_at"] = data[9]
	res["external_deleted_at"] = data[10]
	res["last_sync_at"] = data[11]
	*m = res
	return nil
}

func (ms *ProductSourceCategoryExternalHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 12)
	args := make([]interface{}, 12)
	for i := 0; i < 12; i++ {
		args[i] = &data[i]
	}
	res := make(ProductSourceCategoryExternalHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ProductSourceCategoryExternalHistory)
		m["id"] = data[0]
		m["product_source_id"] = data[1]
		m["product_source_type"] = data[2]
		m["external_id"] = data[3]
		m["external_parent_id"] = data[4]
		m["external_code"] = data[5]
		m["external_name"] = data[6]
		m["external_status"] = data[7]
		m["external_updated_at"] = data[8]
		m["external_created_at"] = data[9]
		m["external_deleted_at"] = data[10]
		m["last_sync_at"] = data[11]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ProductSourceCategory represents table product_source_category
func sqlgenProductSourceCategory(_ *ProductSourceCategory) bool { return true }

type ProductSourceCategories []*ProductSourceCategory

const __sqlProductSourceCategory_Table = "product_source_category"
const __sqlProductSourceCategory_ListCols = "\"id\",\"product_source_id\",\"product_source_type\",\"supplier_id\",\"parent_id\",\"shop_id\",\"name\",\"status\",\"created_at\",\"updated_at\",\"deleted_at\""
const __sqlProductSourceCategory_Insert = "INSERT INTO \"product_source_category\" (" + __sqlProductSourceCategory_ListCols + ") VALUES"
const __sqlProductSourceCategory_Select = "SELECT " + __sqlProductSourceCategory_ListCols + " FROM \"product_source_category\""
const __sqlProductSourceCategory_Select_history = "SELECT " + __sqlProductSourceCategory_ListCols + " FROM history.\"product_source_category\""
const __sqlProductSourceCategory_UpdateAll = "UPDATE \"product_source_category\" SET (" + __sqlProductSourceCategory_ListCols + ")"

func (m *ProductSourceCategory) SQLTableName() string   { return "product_source_category" }
func (m *ProductSourceCategories) SQLTableName() string { return "product_source_category" }
func (m *ProductSourceCategory) SQLListCols() string    { return __sqlProductSourceCategory_ListCols }

func (m *ProductSourceCategory) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ProductSourceID),
		core.String(m.ProductSourceType),
		core.Int64(m.SupplierID),
		core.Int64(m.ParentID),
		core.Int64(m.ShopID),
		core.String(m.Name),
		core.Int(m.Status),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
	}
}

func (m *ProductSourceCategory) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ProductSourceID),
		(*core.String)(&m.ProductSourceType),
		(*core.Int64)(&m.SupplierID),
		(*core.Int64)(&m.ParentID),
		(*core.Int64)(&m.ShopID),
		(*core.String)(&m.Name),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *ProductSourceCategory) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductSourceCategories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductSourceCategories, 0, 128)
	for rows.Next() {
		m := new(ProductSourceCategory)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ProductSourceCategory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceCategory_Select)
	return nil
}

func (_ *ProductSourceCategories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceCategory_Select)
	return nil
}

func (m *ProductSourceCategory) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceCategory_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(11)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ProductSourceCategories) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceCategory_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(11)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ProductSourceCategory) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("product_source_category")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ProductSourceID != 0 {
		flag = true
		w.WriteName("product_source_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductSourceID)
	}
	if m.ProductSourceType != "" {
		flag = true
		w.WriteName("product_source_type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductSourceType)
	}
	if m.SupplierID != 0 {
		flag = true
		w.WriteName("supplier_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SupplierID)
	}
	if m.ParentID != 0 {
		flag = true
		w.WriteName("parent_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ParentID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ProductSourceCategory) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceCategory_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(11)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ProductSourceCategoryHistory map[string]interface{}
type ProductSourceCategoryHistories []map[string]interface{}

func (m *ProductSourceCategoryHistory) SQLTableName() string {
	return "history.\"product_source_category\""
}
func (m ProductSourceCategoryHistories) SQLTableName() string {
	return "history.\"product_source_category\""
}

func (m *ProductSourceCategoryHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceCategory_Select_history)
	return nil
}

func (m ProductSourceCategoryHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductSourceCategory_Select_history)
	return nil
}

func (m ProductSourceCategoryHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m ProductSourceCategoryHistory) ProductSourceID() core.Interface {
	return core.Interface{m["product_source_id"]}
}
func (m ProductSourceCategoryHistory) ProductSourceType() core.Interface {
	return core.Interface{m["product_source_type"]}
}
func (m ProductSourceCategoryHistory) SupplierID() core.Interface {
	return core.Interface{m["supplier_id"]}
}
func (m ProductSourceCategoryHistory) ParentID() core.Interface { return core.Interface{m["parent_id"]} }
func (m ProductSourceCategoryHistory) ShopID() core.Interface   { return core.Interface{m["shop_id"]} }
func (m ProductSourceCategoryHistory) Name() core.Interface     { return core.Interface{m["name"]} }
func (m ProductSourceCategoryHistory) Status() core.Interface   { return core.Interface{m["status"]} }
func (m ProductSourceCategoryHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m ProductSourceCategoryHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}
func (m ProductSourceCategoryHistory) DeletedAt() core.Interface {
	return core.Interface{m["deleted_at"]}
}

func (m *ProductSourceCategoryHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 11)
	args := make([]interface{}, 11)
	for i := 0; i < 11; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ProductSourceCategoryHistory, 11)
	res["id"] = data[0]
	res["product_source_id"] = data[1]
	res["product_source_type"] = data[2]
	res["supplier_id"] = data[3]
	res["parent_id"] = data[4]
	res["shop_id"] = data[5]
	res["name"] = data[6]
	res["status"] = data[7]
	res["created_at"] = data[8]
	res["updated_at"] = data[9]
	res["deleted_at"] = data[10]
	*m = res
	return nil
}

func (ms *ProductSourceCategoryHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 11)
	args := make([]interface{}, 11)
	for i := 0; i < 11; i++ {
		args[i] = &data[i]
	}
	res := make(ProductSourceCategoryHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ProductSourceCategoryHistory)
		m["id"] = data[0]
		m["product_source_id"] = data[1]
		m["product_source_type"] = data[2]
		m["supplier_id"] = data[3]
		m["parent_id"] = data[4]
		m["shop_id"] = data[5]
		m["name"] = data[6]
		m["status"] = data[7]
		m["created_at"] = data[8]
		m["updated_at"] = data[9]
		m["deleted_at"] = data[10]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ProductSourceCategoryExtended represents a join
func sqlgenProductSourceCategoryExtended(_ *ProductSourceCategoryExtended, _ *ProductSourceCategory, as sq.AS, t0 sq.JOIN_TYPE, _ *ProductSourceCategoryExternal, a0 sq.AS, c0 string) bool {
	__sqlProductSourceCategoryExtended_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlProductSourceCategoryExtended_As = as
	__sqlProductSourceCategoryExtended_JoinAs = []sq.AS{a0}
	__sqlProductSourceCategoryExtended_JoinConds = []string{c0}
	return true
}

type ProductSourceCategoryExtendeds []*ProductSourceCategoryExtended

var __sqlProductSourceCategoryExtended_JoinTypes []sq.JOIN_TYPE
var __sqlProductSourceCategoryExtended_As sq.AS
var __sqlProductSourceCategoryExtended_JoinAs []sq.AS
var __sqlProductSourceCategoryExtended_JoinConds []string

func (m *ProductSourceCategoryExtended) SQLTableName() string  { return "product_source_category" }
func (m *ProductSourceCategoryExtendeds) SQLTableName() string { return "product_source_category" }

func (m *ProductSourceCategoryExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductSourceCategoryExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductSourceCategoryExtendeds, 0, 128)
	for rows.Next() {
		m := new(ProductSourceCategoryExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ProductSourceCategoryExtended) SQLSelect(w SQLWriter) error {
	(*ProductSourceCategoryExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ProductSourceCategoryExtended)(nil).__sqlJoin(w, __sqlProductSourceCategoryExtended_JoinTypes)
	return nil
}

func (m *ProductSourceCategoryExtendeds) SQLSelect(w SQLWriter) error {
	return (*ProductSourceCategoryExtended)(nil).SQLSelect(w)
}

func (m *ProductSourceCategoryExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlProductSourceCategoryExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ProductSourceCategoryExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ProductSourceCategoryExtended)(nil).SQLJoin(w, types)
}

func (m *ProductSourceCategoryExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlProductSourceCategoryExtended_As), (*ProductSourceCategory)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlProductSourceCategoryExtended_JoinAs[0]), (*ProductSourceCategoryExternal)(nil).SQLListCols())
}

func (m *ProductSourceCategoryExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("product_source_category")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductSourceCategoryExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*ProductSourceCategoryExternal)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductSourceCategoryExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlProductSourceCategoryExtended_JoinConds[0])
}

func (m *ProductSourceCategoryExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.ProductSourceCategory = new(ProductSourceCategory)
	args = append(args, m.ProductSourceCategory.SQLScanArgs(opts)...)
	m.ProductSourceCategoryExternal = new(ProductSourceCategoryExternal)
	args = append(args, m.ProductSourceCategoryExternal.SQLScanArgs(opts)...)

	return args
}

// Type Product represents table product
func sqlgenProduct(_ *Product) bool { return true }

type Products []*Product

const __sqlProduct_Table = "product"
const __sqlProduct_ListCols = "\"id\",\"product_source_id\",\"supplier_id\",\"product_source_category_id\",\"etop_category_id\",\"product_brand_id\",\"name\",\"short_desc\",\"description\",\"desc_html\",\"ed_name\",\"ed_short_desc\",\"ed_description\",\"ed_desc_html\",\"ed_tags\",\"unit\",\"status\",\"code\",\"ed_code\",\"quantity_available\",\"quantity_on_hand\",\"quantity_reserved\",\"image_urls\",\"created_at\",\"updated_at\",\"name_norm\",\"name_norm_ua\""
const __sqlProduct_Insert = "INSERT INTO \"product\" (" + __sqlProduct_ListCols + ") VALUES"
const __sqlProduct_Select = "SELECT " + __sqlProduct_ListCols + " FROM \"product\""
const __sqlProduct_Select_history = "SELECT " + __sqlProduct_ListCols + " FROM history.\"product\""
const __sqlProduct_UpdateAll = "UPDATE \"product\" SET (" + __sqlProduct_ListCols + ")"

func (m *Product) SQLTableName() string  { return "product" }
func (m *Products) SQLTableName() string { return "product" }
func (m *Product) SQLListCols() string   { return __sqlProduct_ListCols }

func (m *Product) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ProductSourceID),
		core.Int64(m.SupplierID),
		core.String(m.ProductSourceCategoryID),
		core.Int64(m.EtopCategoryID),
		core.Int64(m.ProductBrandID),
		core.String(m.Name),
		core.String(m.ShortDesc),
		core.String(m.Description),
		core.String(m.DescHTML),
		core.String(m.EdName),
		core.String(m.EdShortDesc),
		core.String(m.EdDescription),
		core.String(m.EdDescHTML),
		core.Array{m.EdTags, opts},
		core.String(m.Unit),
		core.Int(m.Status),
		core.String(m.Code),
		core.String(m.EdCode),
		core.Int(m.QuantityAvailable),
		core.Int(m.QuantityOnHand),
		core.Int(m.QuantityReserved),
		core.Array{m.ImageURLs, opts},
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.String(m.NameNorm),
		core.String(m.NameNormUa),
	}
}

func (m *Product) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ProductSourceID),
		(*core.Int64)(&m.SupplierID),
		(*core.String)(&m.ProductSourceCategoryID),
		(*core.Int64)(&m.EtopCategoryID),
		(*core.Int64)(&m.ProductBrandID),
		(*core.String)(&m.Name),
		(*core.String)(&m.ShortDesc),
		(*core.String)(&m.Description),
		(*core.String)(&m.DescHTML),
		(*core.String)(&m.EdName),
		(*core.String)(&m.EdShortDesc),
		(*core.String)(&m.EdDescription),
		(*core.String)(&m.EdDescHTML),
		core.Array{&m.EdTags, opts},
		(*core.String)(&m.Unit),
		(*core.Int)(&m.Status),
		(*core.String)(&m.Code),
		(*core.String)(&m.EdCode),
		(*core.Int)(&m.QuantityAvailable),
		(*core.Int)(&m.QuantityOnHand),
		(*core.Int)(&m.QuantityReserved),
		core.Array{&m.ImageURLs, opts},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.String)(&m.NameNorm),
		(*core.String)(&m.NameNormUa),
	}
}

func (m *Product) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Products) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Products, 0, 128)
	for rows.Next() {
		m := new(Product)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Product) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProduct_Select)
	return nil
}

func (_ *Products) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProduct_Select)
	return nil
}

func (m *Product) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProduct_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(27)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Products) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProduct_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(27)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Product) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("product")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ProductSourceID != 0 {
		flag = true
		w.WriteName("product_source_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductSourceID)
	}
	if m.SupplierID != 0 {
		flag = true
		w.WriteName("supplier_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SupplierID)
	}
	if m.ProductSourceCategoryID != "" {
		flag = true
		w.WriteName("product_source_category_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductSourceCategoryID)
	}
	if m.EtopCategoryID != 0 {
		flag = true
		w.WriteName("etop_category_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EtopCategoryID)
	}
	if m.ProductBrandID != 0 {
		flag = true
		w.WriteName("product_brand_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductBrandID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.ShortDesc != "" {
		flag = true
		w.WriteName("short_desc")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShortDesc)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.DescHTML != "" {
		flag = true
		w.WriteName("desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DescHTML)
	}
	if m.EdName != "" {
		flag = true
		w.WriteName("ed_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdName)
	}
	if m.EdShortDesc != "" {
		flag = true
		w.WriteName("ed_short_desc")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdShortDesc)
	}
	if m.EdDescription != "" {
		flag = true
		w.WriteName("ed_description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdDescription)
	}
	if m.EdDescHTML != "" {
		flag = true
		w.WriteName("ed_desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdDescHTML)
	}
	if m.EdTags != nil {
		flag = true
		w.WriteName("ed_tags")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.EdTags, opts})
	}
	if m.Unit != "" {
		flag = true
		w.WriteName("unit")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Unit)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.EdCode != "" {
		flag = true
		w.WriteName("ed_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdCode)
	}
	if m.QuantityAvailable != 0 {
		flag = true
		w.WriteName("quantity_available")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityAvailable)
	}
	if m.QuantityOnHand != 0 {
		flag = true
		w.WriteName("quantity_on_hand")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityOnHand)
	}
	if m.QuantityReserved != 0 {
		flag = true
		w.WriteName("quantity_reserved")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityReserved)
	}
	if m.ImageURLs != nil {
		flag = true
		w.WriteName("image_urls")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ImageURLs, opts})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if m.NameNorm != "" {
		flag = true
		w.WriteName("name_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.NameNorm)
	}
	if m.NameNormUa != "" {
		flag = true
		w.WriteName("name_norm_ua")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.NameNormUa)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Product) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlProduct_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(27)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ProductHistory map[string]interface{}
type ProductHistories []map[string]interface{}

func (m *ProductHistory) SQLTableName() string  { return "history.\"product\"" }
func (m ProductHistories) SQLTableName() string { return "history.\"product\"" }

func (m *ProductHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProduct_Select_history)
	return nil
}

func (m ProductHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProduct_Select_history)
	return nil
}

func (m ProductHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m ProductHistory) ProductSourceID() core.Interface {
	return core.Interface{m["product_source_id"]}
}
func (m ProductHistory) SupplierID() core.Interface { return core.Interface{m["supplier_id"]} }
func (m ProductHistory) ProductSourceCategoryID() core.Interface {
	return core.Interface{m["product_source_category_id"]}
}
func (m ProductHistory) EtopCategoryID() core.Interface { return core.Interface{m["etop_category_id"]} }
func (m ProductHistory) ProductBrandID() core.Interface { return core.Interface{m["product_brand_id"]} }
func (m ProductHistory) Name() core.Interface           { return core.Interface{m["name"]} }
func (m ProductHistory) ShortDesc() core.Interface      { return core.Interface{m["short_desc"]} }
func (m ProductHistory) Description() core.Interface    { return core.Interface{m["description"]} }
func (m ProductHistory) DescHTML() core.Interface       { return core.Interface{m["desc_html"]} }
func (m ProductHistory) EdName() core.Interface         { return core.Interface{m["ed_name"]} }
func (m ProductHistory) EdShortDesc() core.Interface    { return core.Interface{m["ed_short_desc"]} }
func (m ProductHistory) EdDescription() core.Interface  { return core.Interface{m["ed_description"]} }
func (m ProductHistory) EdDescHTML() core.Interface     { return core.Interface{m["ed_desc_html"]} }
func (m ProductHistory) EdTags() core.Interface         { return core.Interface{m["ed_tags"]} }
func (m ProductHistory) Unit() core.Interface           { return core.Interface{m["unit"]} }
func (m ProductHistory) Status() core.Interface         { return core.Interface{m["status"]} }
func (m ProductHistory) Code() core.Interface           { return core.Interface{m["code"]} }
func (m ProductHistory) EdCode() core.Interface         { return core.Interface{m["ed_code"]} }
func (m ProductHistory) QuantityAvailable() core.Interface {
	return core.Interface{m["quantity_available"]}
}
func (m ProductHistory) QuantityOnHand() core.Interface { return core.Interface{m["quantity_on_hand"]} }
func (m ProductHistory) QuantityReserved() core.Interface {
	return core.Interface{m["quantity_reserved"]}
}
func (m ProductHistory) ImageURLs() core.Interface  { return core.Interface{m["image_urls"]} }
func (m ProductHistory) CreatedAt() core.Interface  { return core.Interface{m["created_at"]} }
func (m ProductHistory) UpdatedAt() core.Interface  { return core.Interface{m["updated_at"]} }
func (m ProductHistory) NameNorm() core.Interface   { return core.Interface{m["name_norm"]} }
func (m ProductHistory) NameNormUa() core.Interface { return core.Interface{m["name_norm_ua"]} }

func (m *ProductHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 27)
	args := make([]interface{}, 27)
	for i := 0; i < 27; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ProductHistory, 27)
	res["id"] = data[0]
	res["product_source_id"] = data[1]
	res["supplier_id"] = data[2]
	res["product_source_category_id"] = data[3]
	res["etop_category_id"] = data[4]
	res["product_brand_id"] = data[5]
	res["name"] = data[6]
	res["short_desc"] = data[7]
	res["description"] = data[8]
	res["desc_html"] = data[9]
	res["ed_name"] = data[10]
	res["ed_short_desc"] = data[11]
	res["ed_description"] = data[12]
	res["ed_desc_html"] = data[13]
	res["ed_tags"] = data[14]
	res["unit"] = data[15]
	res["status"] = data[16]
	res["code"] = data[17]
	res["ed_code"] = data[18]
	res["quantity_available"] = data[19]
	res["quantity_on_hand"] = data[20]
	res["quantity_reserved"] = data[21]
	res["image_urls"] = data[22]
	res["created_at"] = data[23]
	res["updated_at"] = data[24]
	res["name_norm"] = data[25]
	res["name_norm_ua"] = data[26]
	*m = res
	return nil
}

func (ms *ProductHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 27)
	args := make([]interface{}, 27)
	for i := 0; i < 27; i++ {
		args[i] = &data[i]
	}
	res := make(ProductHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ProductHistory)
		m["id"] = data[0]
		m["product_source_id"] = data[1]
		m["supplier_id"] = data[2]
		m["product_source_category_id"] = data[3]
		m["etop_category_id"] = data[4]
		m["product_brand_id"] = data[5]
		m["name"] = data[6]
		m["short_desc"] = data[7]
		m["description"] = data[8]
		m["desc_html"] = data[9]
		m["ed_name"] = data[10]
		m["ed_short_desc"] = data[11]
		m["ed_description"] = data[12]
		m["ed_desc_html"] = data[13]
		m["ed_tags"] = data[14]
		m["unit"] = data[15]
		m["status"] = data[16]
		m["code"] = data[17]
		m["ed_code"] = data[18]
		m["quantity_available"] = data[19]
		m["quantity_on_hand"] = data[20]
		m["quantity_reserved"] = data[21]
		m["image_urls"] = data[22]
		m["created_at"] = data[23]
		m["updated_at"] = data[24]
		m["name_norm"] = data[25]
		m["name_norm_ua"] = data[26]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ProductExternal represents table product_external
func sqlgenProductExternal(_ *ProductExternal) bool { return true }

type ProductExternals []*ProductExternal

const __sqlProductExternal_Table = "product_external"
const __sqlProductExternal_ListCols = "\"id\",\"product_source_id\",\"product_source_type\",\"external_id\",\"external_name\",\"external_code\",\"external_category_id\",\"external_description\",\"external_image_urls\",\"external_unit\",\"external_data\",\"external_status\",\"external_created_at\",\"external_updated_at\",\"external_deleted_at\",\"last_sync_at\",\"external_units\""
const __sqlProductExternal_Insert = "INSERT INTO \"product_external\" (" + __sqlProductExternal_ListCols + ") VALUES"
const __sqlProductExternal_Select = "SELECT " + __sqlProductExternal_ListCols + " FROM \"product_external\""
const __sqlProductExternal_Select_history = "SELECT " + __sqlProductExternal_ListCols + " FROM history.\"product_external\""
const __sqlProductExternal_UpdateAll = "UPDATE \"product_external\" SET (" + __sqlProductExternal_ListCols + ")"

func (m *ProductExternal) SQLTableName() string  { return "product_external" }
func (m *ProductExternals) SQLTableName() string { return "product_external" }
func (m *ProductExternal) SQLListCols() string   { return __sqlProductExternal_ListCols }

func (m *ProductExternal) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ProductExternalCommon.ProductSourceID),
		core.String(m.ProductExternalCommon.ProductSourceType),
		core.String(m.ProductExternalCommon.ExternalID),
		core.String(m.ProductExternalCommon.ExternalName),
		core.String(m.ProductExternalCommon.ExternalCode),
		core.String(m.ProductExternalCommon.ExternalCategoryID),
		core.String(m.ProductExternalCommon.ExternalDescription),
		core.Array{m.ProductExternalCommon.ExternalImageURLs, opts},
		core.String(m.ProductExternalCommon.ExternalUnit),
		core.JSON{m.ProductExternalCommon.ExternalData},
		core.Int(m.ProductExternalCommon.ExternalStatus),
		core.Time(m.ProductExternalCommon.ExternalCreatedAt),
		core.Time(m.ProductExternalCommon.ExternalUpdatedAt),
		core.Time(m.ProductExternalCommon.ExternalDeletedAt),
		core.Time(m.ProductExternalCommon.LastSyncAt),
		core.JSON{m.ExternalUnits},
	}
}

func (m *ProductExternal) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ProductExternalCommon.ProductSourceID),
		(*core.String)(&m.ProductExternalCommon.ProductSourceType),
		(*core.String)(&m.ProductExternalCommon.ExternalID),
		(*core.String)(&m.ProductExternalCommon.ExternalName),
		(*core.String)(&m.ProductExternalCommon.ExternalCode),
		(*core.String)(&m.ProductExternalCommon.ExternalCategoryID),
		(*core.String)(&m.ProductExternalCommon.ExternalDescription),
		core.Array{&m.ProductExternalCommon.ExternalImageURLs, opts},
		(*core.String)(&m.ProductExternalCommon.ExternalUnit),
		core.JSON{&m.ProductExternalCommon.ExternalData},
		(*core.Int)(&m.ProductExternalCommon.ExternalStatus),
		(*core.Time)(&m.ProductExternalCommon.ExternalCreatedAt),
		(*core.Time)(&m.ProductExternalCommon.ExternalUpdatedAt),
		(*core.Time)(&m.ProductExternalCommon.ExternalDeletedAt),
		(*core.Time)(&m.ProductExternalCommon.LastSyncAt),
		core.JSON{&m.ExternalUnits},
	}
}

func (m *ProductExternal) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductExternals) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductExternals, 0, 128)
	for rows.Next() {
		m := new(ProductExternal)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ProductExternal) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductExternal_Select)
	return nil
}

func (_ *ProductExternals) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductExternal_Select)
	return nil
}

func (m *ProductExternal) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductExternal_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(17)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ProductExternals) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductExternal_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(17)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ProductExternal) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("product_external")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ProductExternalCommon.ProductSourceID != 0 {
		flag = true
		w.WriteName("product_source_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ProductSourceID)
	}
	if m.ProductExternalCommon.ProductSourceType != "" {
		flag = true
		w.WriteName("product_source_type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ProductSourceType)
	}
	if m.ProductExternalCommon.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalID)
	}
	if m.ProductExternalCommon.ExternalName != "" {
		flag = true
		w.WriteName("external_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalName)
	}
	if m.ProductExternalCommon.ExternalCode != "" {
		flag = true
		w.WriteName("external_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalCode)
	}
	if m.ProductExternalCommon.ExternalCategoryID != "" {
		flag = true
		w.WriteName("external_category_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalCategoryID)
	}
	if m.ProductExternalCommon.ExternalDescription != "" {
		flag = true
		w.WriteName("external_description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalDescription)
	}
	if m.ProductExternalCommon.ExternalImageURLs != nil {
		flag = true
		w.WriteName("external_image_urls")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ProductExternalCommon.ExternalImageURLs, opts})
	}
	if m.ProductExternalCommon.ExternalUnit != "" {
		flag = true
		w.WriteName("external_unit")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalUnit)
	}
	if m.ProductExternalCommon.ExternalData != nil {
		flag = true
		w.WriteName("external_data")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ProductExternalCommon.ExternalData})
	}
	if m.ProductExternalCommon.ExternalStatus != 0 {
		flag = true
		w.WriteName("external_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.ProductExternalCommon.ExternalStatus))
	}
	if !m.ProductExternalCommon.ExternalCreatedAt.IsZero() {
		flag = true
		w.WriteName("external_created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalCreatedAt)
	}
	if !m.ProductExternalCommon.ExternalUpdatedAt.IsZero() {
		flag = true
		w.WriteName("external_updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalUpdatedAt)
	}
	if !m.ProductExternalCommon.ExternalDeletedAt.IsZero() {
		flag = true
		w.WriteName("external_deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalDeletedAt)
	}
	if !m.ProductExternalCommon.LastSyncAt.IsZero() {
		flag = true
		w.WriteName("last_sync_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.LastSyncAt)
	}
	if m.ExternalUnits != nil {
		flag = true
		w.WriteName("external_units")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalUnits})
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ProductExternal) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlProductExternal_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(17)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ProductExternalHistory map[string]interface{}
type ProductExternalHistories []map[string]interface{}

func (m *ProductExternalHistory) SQLTableName() string  { return "history.\"product_external\"" }
func (m ProductExternalHistories) SQLTableName() string { return "history.\"product_external\"" }

func (m *ProductExternalHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductExternal_Select_history)
	return nil
}

func (m ProductExternalHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductExternal_Select_history)
	return nil
}

func (m ProductExternalHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m ProductExternalHistory) ProductSourceID() core.Interface {
	return core.Interface{m["product_source_id"]}
}
func (m ProductExternalHistory) ProductSourceType() core.Interface {
	return core.Interface{m["product_source_type"]}
}
func (m ProductExternalHistory) ExternalID() core.Interface { return core.Interface{m["external_id"]} }
func (m ProductExternalHistory) ExternalName() core.Interface {
	return core.Interface{m["external_name"]}
}
func (m ProductExternalHistory) ExternalCode() core.Interface {
	return core.Interface{m["external_code"]}
}
func (m ProductExternalHistory) ExternalCategoryID() core.Interface {
	return core.Interface{m["external_category_id"]}
}
func (m ProductExternalHistory) ExternalDescription() core.Interface {
	return core.Interface{m["external_description"]}
}
func (m ProductExternalHistory) ExternalImageURLs() core.Interface {
	return core.Interface{m["external_image_urls"]}
}
func (m ProductExternalHistory) ExternalUnit() core.Interface {
	return core.Interface{m["external_unit"]}
}
func (m ProductExternalHistory) ExternalData() core.Interface {
	return core.Interface{m["external_data"]}
}
func (m ProductExternalHistory) ExternalStatus() core.Interface {
	return core.Interface{m["external_status"]}
}
func (m ProductExternalHistory) ExternalCreatedAt() core.Interface {
	return core.Interface{m["external_created_at"]}
}
func (m ProductExternalHistory) ExternalUpdatedAt() core.Interface {
	return core.Interface{m["external_updated_at"]}
}
func (m ProductExternalHistory) ExternalDeletedAt() core.Interface {
	return core.Interface{m["external_deleted_at"]}
}
func (m ProductExternalHistory) LastSyncAt() core.Interface { return core.Interface{m["last_sync_at"]} }
func (m ProductExternalHistory) ExternalUnits() core.Interface {
	return core.Interface{m["external_units"]}
}

func (m *ProductExternalHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 17)
	args := make([]interface{}, 17)
	for i := 0; i < 17; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ProductExternalHistory, 17)
	res["id"] = data[0]
	res["product_source_id"] = data[1]
	res["product_source_type"] = data[2]
	res["external_id"] = data[3]
	res["external_name"] = data[4]
	res["external_code"] = data[5]
	res["external_category_id"] = data[6]
	res["external_description"] = data[7]
	res["external_image_urls"] = data[8]
	res["external_unit"] = data[9]
	res["external_data"] = data[10]
	res["external_status"] = data[11]
	res["external_created_at"] = data[12]
	res["external_updated_at"] = data[13]
	res["external_deleted_at"] = data[14]
	res["last_sync_at"] = data[15]
	res["external_units"] = data[16]
	*m = res
	return nil
}

func (ms *ProductExternalHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 17)
	args := make([]interface{}, 17)
	for i := 0; i < 17; i++ {
		args[i] = &data[i]
	}
	res := make(ProductExternalHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ProductExternalHistory)
		m["id"] = data[0]
		m["product_source_id"] = data[1]
		m["product_source_type"] = data[2]
		m["external_id"] = data[3]
		m["external_name"] = data[4]
		m["external_code"] = data[5]
		m["external_category_id"] = data[6]
		m["external_description"] = data[7]
		m["external_image_urls"] = data[8]
		m["external_unit"] = data[9]
		m["external_data"] = data[10]
		m["external_status"] = data[11]
		m["external_created_at"] = data[12]
		m["external_updated_at"] = data[13]
		m["external_deleted_at"] = data[14]
		m["last_sync_at"] = data[15]
		m["external_units"] = data[16]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ProductExtended represents a join
func sqlgenProductExtended(_ *ProductExtended, _ *Product, as sq.AS, t0 sq.JOIN_TYPE, _ *ProductExternal, a0 sq.AS, c0 string, t1 sq.JOIN_TYPE, _ *ProductBrand, a1 sq.AS, c1 string, t2 sq.JOIN_TYPE, _ *ProductSource, a2 sq.AS, c2 string) bool {
	__sqlProductExtended_JoinTypes = []sq.JOIN_TYPE{t0, t1, t2}
	__sqlProductExtended_As = as
	__sqlProductExtended_JoinAs = []sq.AS{a0, a1, a2}
	__sqlProductExtended_JoinConds = []string{c0, c1, c2}
	return true
}

type ProductExtendeds []*ProductExtended

var __sqlProductExtended_JoinTypes []sq.JOIN_TYPE
var __sqlProductExtended_As sq.AS
var __sqlProductExtended_JoinAs []sq.AS
var __sqlProductExtended_JoinConds []string

func (m *ProductExtended) SQLTableName() string  { return "product" }
func (m *ProductExtendeds) SQLTableName() string { return "product" }

func (m *ProductExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductExtendeds, 0, 128)
	for rows.Next() {
		m := new(ProductExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ProductExtended) SQLSelect(w SQLWriter) error {
	(*ProductExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ProductExtended)(nil).__sqlJoin(w, __sqlProductExtended_JoinTypes)
	return nil
}

func (m *ProductExtendeds) SQLSelect(w SQLWriter) error {
	return (*ProductExtended)(nil).SQLSelect(w)
}

func (m *ProductExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlProductExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ProductExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ProductExtended)(nil).SQLJoin(w, types)
}

func (m *ProductExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlProductExtended_As), (*Product)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlProductExtended_JoinAs[0]), (*ProductExternal)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlProductExtended_JoinAs[1]), (*ProductBrand)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlProductExtended_JoinAs[2]), (*ProductSource)(nil).SQLListCols())
}

func (m *ProductExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 3 {
		panic("common/sql: expect 3 types to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("product")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*ProductExternal)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlProductExtended_JoinConds[0])
	w.WriteByte(' ')
	w.WriteRawString(string(types[1]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*ProductBrand)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductExtended_JoinAs[1]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlProductExtended_JoinConds[1])
	w.WriteByte(' ')
	w.WriteRawString(string(types[2]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*ProductSource)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductExtended_JoinAs[2]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlProductExtended_JoinConds[2])
}

func (m *ProductExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.Product = new(Product)
	args = append(args, m.Product.SQLScanArgs(opts)...)
	m.ProductExternal = new(ProductExternal)
	args = append(args, m.ProductExternal.SQLScanArgs(opts)...)
	m.ProductBrand = new(ProductBrand)
	args = append(args, m.ProductBrand.SQLScanArgs(opts)...)
	m.ProductSource = new(ProductSource)
	args = append(args, m.ProductSource.SQLScanArgs(opts)...)

	return args
}

// Type Variant represents table variant
func sqlgenVariant(_ *Variant) bool { return true }

type Variants []*Variant

const __sqlVariant_Table = "variant"
const __sqlVariant_ListCols = "\"id\",\"product_id\",\"product_source_id\",\"supplier_id\",\"product_source_category_id\",\"etop_category_id\",\"product_brand_id\",\"short_desc\",\"description\",\"desc_html\",\"ed_name\",\"ed_short_desc\",\"ed_description\",\"ed_desc_html\",\"desc_norm\",\"attr_norm_kv\",\"status\",\"etop_status\",\"ed_status\",\"code\",\"ed_code\",\"wholesale_price_0\",\"wholesale_price\",\"list_price\",\"retail_price_min\",\"retail_price_max\",\"ed_wholesale_price_0\",\"ed_wholesale_price\",\"ed_list_price\",\"ed_retail_price_min\",\"ed_retail_price_max\",\"quantity_available\",\"quantity_on_hand\",\"quantity_reserved\",\"image_urls\",\"supplier_meta\",\"cost_price\",\"attributes\",\"created_at\",\"updated_at\""
const __sqlVariant_Insert = "INSERT INTO \"variant\" (" + __sqlVariant_ListCols + ") VALUES"
const __sqlVariant_Select = "SELECT " + __sqlVariant_ListCols + " FROM \"variant\""
const __sqlVariant_Select_history = "SELECT " + __sqlVariant_ListCols + " FROM history.\"variant\""
const __sqlVariant_UpdateAll = "UPDATE \"variant\" SET (" + __sqlVariant_ListCols + ")"

func (m *Variant) SQLTableName() string  { return "variant" }
func (m *Variants) SQLTableName() string { return "variant" }
func (m *Variant) SQLListCols() string   { return __sqlVariant_ListCols }

func (m *Variant) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ProductID),
		core.Int64(m.ProductSourceID),
		core.Int64(m.SupplierID),
		core.Int64(m.ProductSourceCategoryID),
		core.Int64(m.EtopCategoryID),
		core.Int64(m.ProductBrandID),
		core.String(m.ShortDesc),
		core.String(m.Description),
		core.String(m.DescHTML),
		core.String(m.EdName),
		core.String(m.EdShortDesc),
		core.String(m.EdDescription),
		core.String(m.EdDescHTML),
		core.String(m.DescNorm),
		core.String(m.AttrNormKv),
		core.Int(m.Status),
		core.Int(m.EtopStatus),
		core.Int(m.EdStatus),
		core.String(m.Code),
		core.String(m.EdCode),
		core.Int(m.WholesalePrice0),
		core.Int(m.WholesalePrice),
		core.Int(m.ListPrice),
		core.Int(m.RetailPriceMin),
		core.Int(m.RetailPriceMax),
		core.Int(m.EdWholesalePrice0),
		core.Int(m.EdWholesalePrice),
		core.Int(m.EdListPrice),
		core.Int(m.EdRetailPriceMin),
		core.Int(m.EdRetailPriceMax),
		core.Int(m.QuantityAvailable),
		core.Int(m.QuantityOnHand),
		core.Int(m.QuantityReserved),
		core.Array{m.ImageURLs, opts},
		core.JSON{m.SupplierMeta},
		core.Int(m.CostPrice),
		core.JSON{m.Attributes},
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *Variant) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ProductID),
		(*core.Int64)(&m.ProductSourceID),
		(*core.Int64)(&m.SupplierID),
		(*core.Int64)(&m.ProductSourceCategoryID),
		(*core.Int64)(&m.EtopCategoryID),
		(*core.Int64)(&m.ProductBrandID),
		(*core.String)(&m.ShortDesc),
		(*core.String)(&m.Description),
		(*core.String)(&m.DescHTML),
		(*core.String)(&m.EdName),
		(*core.String)(&m.EdShortDesc),
		(*core.String)(&m.EdDescription),
		(*core.String)(&m.EdDescHTML),
		(*core.String)(&m.DescNorm),
		(*core.String)(&m.AttrNormKv),
		(*core.Int)(&m.Status),
		(*core.Int)(&m.EtopStatus),
		(*core.Int)(&m.EdStatus),
		(*core.String)(&m.Code),
		(*core.String)(&m.EdCode),
		(*core.Int)(&m.WholesalePrice0),
		(*core.Int)(&m.WholesalePrice),
		(*core.Int)(&m.ListPrice),
		(*core.Int)(&m.RetailPriceMin),
		(*core.Int)(&m.RetailPriceMax),
		(*core.Int)(&m.EdWholesalePrice0),
		(*core.Int)(&m.EdWholesalePrice),
		(*core.Int)(&m.EdListPrice),
		(*core.Int)(&m.EdRetailPriceMin),
		(*core.Int)(&m.EdRetailPriceMax),
		(*core.Int)(&m.QuantityAvailable),
		(*core.Int)(&m.QuantityOnHand),
		(*core.Int)(&m.QuantityReserved),
		core.Array{&m.ImageURLs, opts},
		core.JSON{&m.SupplierMeta},
		(*core.Int)(&m.CostPrice),
		core.JSON{&m.Attributes},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *Variant) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Variants) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Variants, 0, 128)
	for rows.Next() {
		m := new(Variant)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Variant) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariant_Select)
	return nil
}

func (_ *Variants) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariant_Select)
	return nil
}

func (m *Variant) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlVariant_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(40)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Variants) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlVariant_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(40)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Variant) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("variant")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.ProductSourceID != 0 {
		flag = true
		w.WriteName("product_source_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductSourceID)
	}
	if m.SupplierID != 0 {
		flag = true
		w.WriteName("supplier_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SupplierID)
	}
	if m.ProductSourceCategoryID != 0 {
		flag = true
		w.WriteName("product_source_category_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductSourceCategoryID)
	}
	if m.EtopCategoryID != 0 {
		flag = true
		w.WriteName("etop_category_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EtopCategoryID)
	}
	if m.ProductBrandID != 0 {
		flag = true
		w.WriteName("product_brand_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductBrandID)
	}
	if m.ShortDesc != "" {
		flag = true
		w.WriteName("short_desc")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShortDesc)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.DescHTML != "" {
		flag = true
		w.WriteName("desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DescHTML)
	}
	if m.EdName != "" {
		flag = true
		w.WriteName("ed_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdName)
	}
	if m.EdShortDesc != "" {
		flag = true
		w.WriteName("ed_short_desc")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdShortDesc)
	}
	if m.EdDescription != "" {
		flag = true
		w.WriteName("ed_description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdDescription)
	}
	if m.EdDescHTML != "" {
		flag = true
		w.WriteName("ed_desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdDescHTML)
	}
	if m.DescNorm != "" {
		flag = true
		w.WriteName("desc_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DescNorm)
	}
	if m.AttrNormKv != "" {
		flag = true
		w.WriteName("attr_norm_kv")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AttrNormKv)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if m.EtopStatus != 0 {
		flag = true
		w.WriteName("etop_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.EtopStatus))
	}
	if m.EdStatus != 0 {
		flag = true
		w.WriteName("ed_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.EdStatus))
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.EdCode != "" {
		flag = true
		w.WriteName("ed_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdCode)
	}
	if m.WholesalePrice0 != 0 {
		flag = true
		w.WriteName("wholesale_price_0")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WholesalePrice0)
	}
	if m.WholesalePrice != 0 {
		flag = true
		w.WriteName("wholesale_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WholesalePrice)
	}
	if m.ListPrice != 0 {
		flag = true
		w.WriteName("list_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ListPrice)
	}
	if m.RetailPriceMin != 0 {
		flag = true
		w.WriteName("retail_price_min")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RetailPriceMin)
	}
	if m.RetailPriceMax != 0 {
		flag = true
		w.WriteName("retail_price_max")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RetailPriceMax)
	}
	if m.EdWholesalePrice0 != 0 {
		flag = true
		w.WriteName("ed_wholesale_price_0")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdWholesalePrice0)
	}
	if m.EdWholesalePrice != 0 {
		flag = true
		w.WriteName("ed_wholesale_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdWholesalePrice)
	}
	if m.EdListPrice != 0 {
		flag = true
		w.WriteName("ed_list_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdListPrice)
	}
	if m.EdRetailPriceMin != 0 {
		flag = true
		w.WriteName("ed_retail_price_min")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdRetailPriceMin)
	}
	if m.EdRetailPriceMax != 0 {
		flag = true
		w.WriteName("ed_retail_price_max")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EdRetailPriceMax)
	}
	if m.QuantityAvailable != 0 {
		flag = true
		w.WriteName("quantity_available")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityAvailable)
	}
	if m.QuantityOnHand != 0 {
		flag = true
		w.WriteName("quantity_on_hand")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityOnHand)
	}
	if m.QuantityReserved != 0 {
		flag = true
		w.WriteName("quantity_reserved")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityReserved)
	}
	if m.ImageURLs != nil {
		flag = true
		w.WriteName("image_urls")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ImageURLs, opts})
	}
	if m.SupplierMeta != nil {
		flag = true
		w.WriteName("supplier_meta")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.SupplierMeta})
	}
	if m.CostPrice != 0 {
		flag = true
		w.WriteName("cost_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CostPrice)
	}
	if m.Attributes != nil {
		flag = true
		w.WriteName("attributes")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Attributes})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Variant) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlVariant_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(40)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type VariantHistory map[string]interface{}
type VariantHistories []map[string]interface{}

func (m *VariantHistory) SQLTableName() string  { return "history.\"variant\"" }
func (m VariantHistories) SQLTableName() string { return "history.\"variant\"" }

func (m *VariantHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariant_Select_history)
	return nil
}

func (m VariantHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariant_Select_history)
	return nil
}

func (m VariantHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m VariantHistory) ProductID() core.Interface { return core.Interface{m["product_id"]} }
func (m VariantHistory) ProductSourceID() core.Interface {
	return core.Interface{m["product_source_id"]}
}
func (m VariantHistory) SupplierID() core.Interface { return core.Interface{m["supplier_id"]} }
func (m VariantHistory) ProductSourceCategoryID() core.Interface {
	return core.Interface{m["product_source_category_id"]}
}
func (m VariantHistory) EtopCategoryID() core.Interface { return core.Interface{m["etop_category_id"]} }
func (m VariantHistory) ProductBrandID() core.Interface { return core.Interface{m["product_brand_id"]} }
func (m VariantHistory) ShortDesc() core.Interface      { return core.Interface{m["short_desc"]} }
func (m VariantHistory) Description() core.Interface    { return core.Interface{m["description"]} }
func (m VariantHistory) DescHTML() core.Interface       { return core.Interface{m["desc_html"]} }
func (m VariantHistory) EdName() core.Interface         { return core.Interface{m["ed_name"]} }
func (m VariantHistory) EdShortDesc() core.Interface    { return core.Interface{m["ed_short_desc"]} }
func (m VariantHistory) EdDescription() core.Interface  { return core.Interface{m["ed_description"]} }
func (m VariantHistory) EdDescHTML() core.Interface     { return core.Interface{m["ed_desc_html"]} }
func (m VariantHistory) DescNorm() core.Interface       { return core.Interface{m["desc_norm"]} }
func (m VariantHistory) AttrNormKv() core.Interface     { return core.Interface{m["attr_norm_kv"]} }
func (m VariantHistory) Status() core.Interface         { return core.Interface{m["status"]} }
func (m VariantHistory) EtopStatus() core.Interface     { return core.Interface{m["etop_status"]} }
func (m VariantHistory) EdStatus() core.Interface       { return core.Interface{m["ed_status"]} }
func (m VariantHistory) Code() core.Interface           { return core.Interface{m["code"]} }
func (m VariantHistory) EdCode() core.Interface         { return core.Interface{m["ed_code"]} }
func (m VariantHistory) WholesalePrice0() core.Interface {
	return core.Interface{m["wholesale_price_0"]}
}
func (m VariantHistory) WholesalePrice() core.Interface { return core.Interface{m["wholesale_price"]} }
func (m VariantHistory) ListPrice() core.Interface      { return core.Interface{m["list_price"]} }
func (m VariantHistory) RetailPriceMin() core.Interface { return core.Interface{m["retail_price_min"]} }
func (m VariantHistory) RetailPriceMax() core.Interface { return core.Interface{m["retail_price_max"]} }
func (m VariantHistory) EdWholesalePrice0() core.Interface {
	return core.Interface{m["ed_wholesale_price_0"]}
}
func (m VariantHistory) EdWholesalePrice() core.Interface {
	return core.Interface{m["ed_wholesale_price"]}
}
func (m VariantHistory) EdListPrice() core.Interface { return core.Interface{m["ed_list_price"]} }
func (m VariantHistory) EdRetailPriceMin() core.Interface {
	return core.Interface{m["ed_retail_price_min"]}
}
func (m VariantHistory) EdRetailPriceMax() core.Interface {
	return core.Interface{m["ed_retail_price_max"]}
}
func (m VariantHistory) QuantityAvailable() core.Interface {
	return core.Interface{m["quantity_available"]}
}
func (m VariantHistory) QuantityOnHand() core.Interface { return core.Interface{m["quantity_on_hand"]} }
func (m VariantHistory) QuantityReserved() core.Interface {
	return core.Interface{m["quantity_reserved"]}
}
func (m VariantHistory) ImageURLs() core.Interface    { return core.Interface{m["image_urls"]} }
func (m VariantHistory) SupplierMeta() core.Interface { return core.Interface{m["supplier_meta"]} }
func (m VariantHistory) CostPrice() core.Interface    { return core.Interface{m["cost_price"]} }
func (m VariantHistory) Attributes() core.Interface   { return core.Interface{m["attributes"]} }
func (m VariantHistory) CreatedAt() core.Interface    { return core.Interface{m["created_at"]} }
func (m VariantHistory) UpdatedAt() core.Interface    { return core.Interface{m["updated_at"]} }

func (m *VariantHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 40)
	args := make([]interface{}, 40)
	for i := 0; i < 40; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(VariantHistory, 40)
	res["id"] = data[0]
	res["product_id"] = data[1]
	res["product_source_id"] = data[2]
	res["supplier_id"] = data[3]
	res["product_source_category_id"] = data[4]
	res["etop_category_id"] = data[5]
	res["product_brand_id"] = data[6]
	res["short_desc"] = data[7]
	res["description"] = data[8]
	res["desc_html"] = data[9]
	res["ed_name"] = data[10]
	res["ed_short_desc"] = data[11]
	res["ed_description"] = data[12]
	res["ed_desc_html"] = data[13]
	res["desc_norm"] = data[14]
	res["attr_norm_kv"] = data[15]
	res["status"] = data[16]
	res["etop_status"] = data[17]
	res["ed_status"] = data[18]
	res["code"] = data[19]
	res["ed_code"] = data[20]
	res["wholesale_price_0"] = data[21]
	res["wholesale_price"] = data[22]
	res["list_price"] = data[23]
	res["retail_price_min"] = data[24]
	res["retail_price_max"] = data[25]
	res["ed_wholesale_price_0"] = data[26]
	res["ed_wholesale_price"] = data[27]
	res["ed_list_price"] = data[28]
	res["ed_retail_price_min"] = data[29]
	res["ed_retail_price_max"] = data[30]
	res["quantity_available"] = data[31]
	res["quantity_on_hand"] = data[32]
	res["quantity_reserved"] = data[33]
	res["image_urls"] = data[34]
	res["supplier_meta"] = data[35]
	res["cost_price"] = data[36]
	res["attributes"] = data[37]
	res["created_at"] = data[38]
	res["updated_at"] = data[39]
	*m = res
	return nil
}

func (ms *VariantHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 40)
	args := make([]interface{}, 40)
	for i := 0; i < 40; i++ {
		args[i] = &data[i]
	}
	res := make(VariantHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(VariantHistory)
		m["id"] = data[0]
		m["product_id"] = data[1]
		m["product_source_id"] = data[2]
		m["supplier_id"] = data[3]
		m["product_source_category_id"] = data[4]
		m["etop_category_id"] = data[5]
		m["product_brand_id"] = data[6]
		m["short_desc"] = data[7]
		m["description"] = data[8]
		m["desc_html"] = data[9]
		m["ed_name"] = data[10]
		m["ed_short_desc"] = data[11]
		m["ed_description"] = data[12]
		m["ed_desc_html"] = data[13]
		m["desc_norm"] = data[14]
		m["attr_norm_kv"] = data[15]
		m["status"] = data[16]
		m["etop_status"] = data[17]
		m["ed_status"] = data[18]
		m["code"] = data[19]
		m["ed_code"] = data[20]
		m["wholesale_price_0"] = data[21]
		m["wholesale_price"] = data[22]
		m["list_price"] = data[23]
		m["retail_price_min"] = data[24]
		m["retail_price_max"] = data[25]
		m["ed_wholesale_price_0"] = data[26]
		m["ed_wholesale_price"] = data[27]
		m["ed_list_price"] = data[28]
		m["ed_retail_price_min"] = data[29]
		m["ed_retail_price_max"] = data[30]
		m["quantity_available"] = data[31]
		m["quantity_on_hand"] = data[32]
		m["quantity_reserved"] = data[33]
		m["image_urls"] = data[34]
		m["supplier_meta"] = data[35]
		m["cost_price"] = data[36]
		m["attributes"] = data[37]
		m["created_at"] = data[38]
		m["updated_at"] = data[39]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type VariantExtended represents a join
func sqlgenVariantExtended(_ *VariantExtended, _ *Variant, as sq.AS, t0 sq.JOIN_TYPE, _ *Product, a0 sq.AS, c0 string, t1 sq.JOIN_TYPE, _ *VariantExternal, a1 sq.AS, c1 string) bool {
	__sqlVariantExtended_JoinTypes = []sq.JOIN_TYPE{t0, t1}
	__sqlVariantExtended_As = as
	__sqlVariantExtended_JoinAs = []sq.AS{a0, a1}
	__sqlVariantExtended_JoinConds = []string{c0, c1}
	return true
}

type VariantExtendeds []*VariantExtended

var __sqlVariantExtended_JoinTypes []sq.JOIN_TYPE
var __sqlVariantExtended_As sq.AS
var __sqlVariantExtended_JoinAs []sq.AS
var __sqlVariantExtended_JoinConds []string

func (m *VariantExtended) SQLTableName() string  { return "variant" }
func (m *VariantExtendeds) SQLTableName() string { return "variant" }

func (m *VariantExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *VariantExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(VariantExtendeds, 0, 128)
	for rows.Next() {
		m := new(VariantExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *VariantExtended) SQLSelect(w SQLWriter) error {
	(*VariantExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*VariantExtended)(nil).__sqlJoin(w, __sqlVariantExtended_JoinTypes)
	return nil
}

func (m *VariantExtendeds) SQLSelect(w SQLWriter) error {
	return (*VariantExtended)(nil).SQLSelect(w)
}

func (m *VariantExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlVariantExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *VariantExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*VariantExtended)(nil).SQLJoin(w, types)
}

func (m *VariantExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlVariantExtended_As), (*Variant)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlVariantExtended_JoinAs[0]), (*Product)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlVariantExtended_JoinAs[1]), (*VariantExternal)(nil).SQLListCols())
}

func (m *VariantExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 2 {
		panic("common/sql: expect 2 types to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("variant")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlVariantExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Product)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlVariantExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlVariantExtended_JoinConds[0])
	w.WriteByte(' ')
	w.WriteRawString(string(types[1]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*VariantExternal)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlVariantExtended_JoinAs[1]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlVariantExtended_JoinConds[1])
}

func (m *VariantExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.Variant = new(Variant)
	args = append(args, m.Variant.SQLScanArgs(opts)...)
	m.Product = new(Product)
	args = append(args, m.Product.SQLScanArgs(opts)...)
	m.VariantExternal = new(VariantExternal)
	args = append(args, m.VariantExternal.SQLScanArgs(opts)...)

	return args
}

// Type VariantExternal represents table variant_external
func sqlgenVariantExternal(_ *VariantExternal) bool { return true }

type VariantExternals []*VariantExternal

const __sqlVariantExternal_Table = "variant_external"
const __sqlVariantExternal_ListCols = "\"id\",\"product_source_id\",\"product_source_type\",\"external_id\",\"external_name\",\"external_code\",\"external_category_id\",\"external_description\",\"external_image_urls\",\"external_unit\",\"external_data\",\"external_status\",\"external_created_at\",\"external_updated_at\",\"external_deleted_at\",\"last_sync_at\",\"external_product_id\",\"external_price\",\"external_base_unit_id\",\"external_unit_conv\",\"external_attributes\""
const __sqlVariantExternal_Insert = "INSERT INTO \"variant_external\" (" + __sqlVariantExternal_ListCols + ") VALUES"
const __sqlVariantExternal_Select = "SELECT " + __sqlVariantExternal_ListCols + " FROM \"variant_external\""
const __sqlVariantExternal_Select_history = "SELECT " + __sqlVariantExternal_ListCols + " FROM history.\"variant_external\""
const __sqlVariantExternal_UpdateAll = "UPDATE \"variant_external\" SET (" + __sqlVariantExternal_ListCols + ")"

func (m *VariantExternal) SQLTableName() string  { return "variant_external" }
func (m *VariantExternals) SQLTableName() string { return "variant_external" }
func (m *VariantExternal) SQLListCols() string   { return __sqlVariantExternal_ListCols }

func (m *VariantExternal) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ProductExternalCommon.ProductSourceID),
		core.String(m.ProductExternalCommon.ProductSourceType),
		core.String(m.ProductExternalCommon.ExternalID),
		core.String(m.ProductExternalCommon.ExternalName),
		core.String(m.ProductExternalCommon.ExternalCode),
		core.String(m.ProductExternalCommon.ExternalCategoryID),
		core.String(m.ProductExternalCommon.ExternalDescription),
		core.Array{m.ProductExternalCommon.ExternalImageURLs, opts},
		core.String(m.ProductExternalCommon.ExternalUnit),
		core.JSON{m.ProductExternalCommon.ExternalData},
		core.Int(m.ProductExternalCommon.ExternalStatus),
		core.Time(m.ProductExternalCommon.ExternalCreatedAt),
		core.Time(m.ProductExternalCommon.ExternalUpdatedAt),
		core.Time(m.ProductExternalCommon.ExternalDeletedAt),
		core.Time(m.ProductExternalCommon.LastSyncAt),
		core.String(m.ExternalProductID),
		core.Int(m.ExternalPrice),
		core.String(m.ExternalBaseUnitID),
		core.Float64(m.ExternalUnitConv),
		core.JSON{m.ExternalAttributes},
	}
}

func (m *VariantExternal) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ProductExternalCommon.ProductSourceID),
		(*core.String)(&m.ProductExternalCommon.ProductSourceType),
		(*core.String)(&m.ProductExternalCommon.ExternalID),
		(*core.String)(&m.ProductExternalCommon.ExternalName),
		(*core.String)(&m.ProductExternalCommon.ExternalCode),
		(*core.String)(&m.ProductExternalCommon.ExternalCategoryID),
		(*core.String)(&m.ProductExternalCommon.ExternalDescription),
		core.Array{&m.ProductExternalCommon.ExternalImageURLs, opts},
		(*core.String)(&m.ProductExternalCommon.ExternalUnit),
		core.JSON{&m.ProductExternalCommon.ExternalData},
		(*core.Int)(&m.ProductExternalCommon.ExternalStatus),
		(*core.Time)(&m.ProductExternalCommon.ExternalCreatedAt),
		(*core.Time)(&m.ProductExternalCommon.ExternalUpdatedAt),
		(*core.Time)(&m.ProductExternalCommon.ExternalDeletedAt),
		(*core.Time)(&m.ProductExternalCommon.LastSyncAt),
		(*core.String)(&m.ExternalProductID),
		(*core.Int)(&m.ExternalPrice),
		(*core.String)(&m.ExternalBaseUnitID),
		(*core.Float64)(&m.ExternalUnitConv),
		core.JSON{&m.ExternalAttributes},
	}
}

func (m *VariantExternal) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *VariantExternals) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(VariantExternals, 0, 128)
	for rows.Next() {
		m := new(VariantExternal)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *VariantExternal) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantExternal_Select)
	return nil
}

func (_ *VariantExternals) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantExternal_Select)
	return nil
}

func (m *VariantExternal) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantExternal_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(21)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms VariantExternals) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantExternal_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(21)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *VariantExternal) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("variant_external")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ProductExternalCommon.ProductSourceID != 0 {
		flag = true
		w.WriteName("product_source_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ProductSourceID)
	}
	if m.ProductExternalCommon.ProductSourceType != "" {
		flag = true
		w.WriteName("product_source_type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ProductSourceType)
	}
	if m.ProductExternalCommon.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalID)
	}
	if m.ProductExternalCommon.ExternalName != "" {
		flag = true
		w.WriteName("external_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalName)
	}
	if m.ProductExternalCommon.ExternalCode != "" {
		flag = true
		w.WriteName("external_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalCode)
	}
	if m.ProductExternalCommon.ExternalCategoryID != "" {
		flag = true
		w.WriteName("external_category_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalCategoryID)
	}
	if m.ProductExternalCommon.ExternalDescription != "" {
		flag = true
		w.WriteName("external_description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalDescription)
	}
	if m.ProductExternalCommon.ExternalImageURLs != nil {
		flag = true
		w.WriteName("external_image_urls")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ProductExternalCommon.ExternalImageURLs, opts})
	}
	if m.ProductExternalCommon.ExternalUnit != "" {
		flag = true
		w.WriteName("external_unit")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalUnit)
	}
	if m.ProductExternalCommon.ExternalData != nil {
		flag = true
		w.WriteName("external_data")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ProductExternalCommon.ExternalData})
	}
	if m.ProductExternalCommon.ExternalStatus != 0 {
		flag = true
		w.WriteName("external_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.ProductExternalCommon.ExternalStatus))
	}
	if !m.ProductExternalCommon.ExternalCreatedAt.IsZero() {
		flag = true
		w.WriteName("external_created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalCreatedAt)
	}
	if !m.ProductExternalCommon.ExternalUpdatedAt.IsZero() {
		flag = true
		w.WriteName("external_updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalUpdatedAt)
	}
	if !m.ProductExternalCommon.ExternalDeletedAt.IsZero() {
		flag = true
		w.WriteName("external_deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.ExternalDeletedAt)
	}
	if !m.ProductExternalCommon.LastSyncAt.IsZero() {
		flag = true
		w.WriteName("last_sync_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductExternalCommon.LastSyncAt)
	}
	if m.ExternalProductID != "" {
		flag = true
		w.WriteName("external_product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalProductID)
	}
	if m.ExternalPrice != 0 {
		flag = true
		w.WriteName("external_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalPrice)
	}
	if m.ExternalBaseUnitID != "" {
		flag = true
		w.WriteName("external_base_unit_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalBaseUnitID)
	}
	if m.ExternalUnitConv != 0 {
		flag = true
		w.WriteName("external_unit_conv")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalUnitConv)
	}
	if m.ExternalAttributes != nil {
		flag = true
		w.WriteName("external_attributes")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.ExternalAttributes})
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *VariantExternal) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantExternal_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(21)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type VariantExternalHistory map[string]interface{}
type VariantExternalHistories []map[string]interface{}

func (m *VariantExternalHistory) SQLTableName() string  { return "history.\"variant_external\"" }
func (m VariantExternalHistories) SQLTableName() string { return "history.\"variant_external\"" }

func (m *VariantExternalHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantExternal_Select_history)
	return nil
}

func (m VariantExternalHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantExternal_Select_history)
	return nil
}

func (m VariantExternalHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m VariantExternalHistory) ProductSourceID() core.Interface {
	return core.Interface{m["product_source_id"]}
}
func (m VariantExternalHistory) ProductSourceType() core.Interface {
	return core.Interface{m["product_source_type"]}
}
func (m VariantExternalHistory) ExternalID() core.Interface { return core.Interface{m["external_id"]} }
func (m VariantExternalHistory) ExternalName() core.Interface {
	return core.Interface{m["external_name"]}
}
func (m VariantExternalHistory) ExternalCode() core.Interface {
	return core.Interface{m["external_code"]}
}
func (m VariantExternalHistory) ExternalCategoryID() core.Interface {
	return core.Interface{m["external_category_id"]}
}
func (m VariantExternalHistory) ExternalDescription() core.Interface {
	return core.Interface{m["external_description"]}
}
func (m VariantExternalHistory) ExternalImageURLs() core.Interface {
	return core.Interface{m["external_image_urls"]}
}
func (m VariantExternalHistory) ExternalUnit() core.Interface {
	return core.Interface{m["external_unit"]}
}
func (m VariantExternalHistory) ExternalData() core.Interface {
	return core.Interface{m["external_data"]}
}
func (m VariantExternalHistory) ExternalStatus() core.Interface {
	return core.Interface{m["external_status"]}
}
func (m VariantExternalHistory) ExternalCreatedAt() core.Interface {
	return core.Interface{m["external_created_at"]}
}
func (m VariantExternalHistory) ExternalUpdatedAt() core.Interface {
	return core.Interface{m["external_updated_at"]}
}
func (m VariantExternalHistory) ExternalDeletedAt() core.Interface {
	return core.Interface{m["external_deleted_at"]}
}
func (m VariantExternalHistory) LastSyncAt() core.Interface { return core.Interface{m["last_sync_at"]} }
func (m VariantExternalHistory) ExternalProductID() core.Interface {
	return core.Interface{m["external_product_id"]}
}
func (m VariantExternalHistory) ExternalPrice() core.Interface {
	return core.Interface{m["external_price"]}
}
func (m VariantExternalHistory) ExternalBaseUnitID() core.Interface {
	return core.Interface{m["external_base_unit_id"]}
}
func (m VariantExternalHistory) ExternalUnitConv() core.Interface {
	return core.Interface{m["external_unit_conv"]}
}
func (m VariantExternalHistory) ExternalAttributes() core.Interface {
	return core.Interface{m["external_attributes"]}
}

func (m *VariantExternalHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 21)
	args := make([]interface{}, 21)
	for i := 0; i < 21; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(VariantExternalHistory, 21)
	res["id"] = data[0]
	res["product_source_id"] = data[1]
	res["product_source_type"] = data[2]
	res["external_id"] = data[3]
	res["external_name"] = data[4]
	res["external_code"] = data[5]
	res["external_category_id"] = data[6]
	res["external_description"] = data[7]
	res["external_image_urls"] = data[8]
	res["external_unit"] = data[9]
	res["external_data"] = data[10]
	res["external_status"] = data[11]
	res["external_created_at"] = data[12]
	res["external_updated_at"] = data[13]
	res["external_deleted_at"] = data[14]
	res["last_sync_at"] = data[15]
	res["external_product_id"] = data[16]
	res["external_price"] = data[17]
	res["external_base_unit_id"] = data[18]
	res["external_unit_conv"] = data[19]
	res["external_attributes"] = data[20]
	*m = res
	return nil
}

func (ms *VariantExternalHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 21)
	args := make([]interface{}, 21)
	for i := 0; i < 21; i++ {
		args[i] = &data[i]
	}
	res := make(VariantExternalHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(VariantExternalHistory)
		m["id"] = data[0]
		m["product_source_id"] = data[1]
		m["product_source_type"] = data[2]
		m["external_id"] = data[3]
		m["external_name"] = data[4]
		m["external_code"] = data[5]
		m["external_category_id"] = data[6]
		m["external_description"] = data[7]
		m["external_image_urls"] = data[8]
		m["external_unit"] = data[9]
		m["external_data"] = data[10]
		m["external_status"] = data[11]
		m["external_created_at"] = data[12]
		m["external_updated_at"] = data[13]
		m["external_deleted_at"] = data[14]
		m["last_sync_at"] = data[15]
		m["external_product_id"] = data[16]
		m["external_price"] = data[17]
		m["external_base_unit_id"] = data[18]
		m["external_unit_conv"] = data[19]
		m["external_attributes"] = data[20]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type VariantExternalExtended represents a join
func sqlgenVariantExternalExtended(_ *VariantExternalExtended, _ *Variant, as sq.AS, t0 sq.JOIN_TYPE, _ *VariantExternal, a0 sq.AS, c0 string) bool {
	__sqlVariantExternalExtended_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlVariantExternalExtended_As = as
	__sqlVariantExternalExtended_JoinAs = []sq.AS{a0}
	__sqlVariantExternalExtended_JoinConds = []string{c0}
	return true
}

type VariantExternalExtendeds []*VariantExternalExtended

var __sqlVariantExternalExtended_JoinTypes []sq.JOIN_TYPE
var __sqlVariantExternalExtended_As sq.AS
var __sqlVariantExternalExtended_JoinAs []sq.AS
var __sqlVariantExternalExtended_JoinConds []string

func (m *VariantExternalExtended) SQLTableName() string  { return "variant" }
func (m *VariantExternalExtendeds) SQLTableName() string { return "variant" }

func (m *VariantExternalExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *VariantExternalExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(VariantExternalExtendeds, 0, 128)
	for rows.Next() {
		m := new(VariantExternalExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *VariantExternalExtended) SQLSelect(w SQLWriter) error {
	(*VariantExternalExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*VariantExternalExtended)(nil).__sqlJoin(w, __sqlVariantExternalExtended_JoinTypes)
	return nil
}

func (m *VariantExternalExtendeds) SQLSelect(w SQLWriter) error {
	return (*VariantExternalExtended)(nil).SQLSelect(w)
}

func (m *VariantExternalExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlVariantExternalExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *VariantExternalExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*VariantExternalExtended)(nil).SQLJoin(w, types)
}

func (m *VariantExternalExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlVariantExternalExtended_As), (*Variant)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlVariantExternalExtended_JoinAs[0]), (*VariantExternal)(nil).SQLListCols())
}

func (m *VariantExternalExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("variant")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlVariantExternalExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*VariantExternal)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlVariantExternalExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlVariantExternalExtended_JoinConds[0])
}

func (m *VariantExternalExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.Variant = new(Variant)
	args = append(args, m.Variant.SQLScanArgs(opts)...)
	m.VariantExternal = new(VariantExternal)
	args = append(args, m.VariantExternal.SQLScanArgs(opts)...)

	return args
}

// *PriceDef is a substruct of *Variant
func substructPriceDef(_ *PriceDef, _ *Variant) bool { return true }

func PriceDefsFromVariants(ps []*Variant) []*PriceDef {
	ss := make([]*PriceDef, len(ps))
	for i, p := range ps {
		ss[i] = NewPriceDefFromVariant(p)
	}
	return ss
}

func PriceDefsToVariants(ss []*PriceDef) []*Variant {
	ps := make([]*Variant, len(ss))
	for i, s := range ss {
		ps[i] = s.ToVariant()
	}
	return ps
}

func NewPriceDefFromVariant(sp *Variant) *PriceDef {
	if sp == nil {
		return nil
	}
	s := new(PriceDef)
	s.CopyFrom(sp)
	return s
}

func (s *PriceDef) ToVariant() *Variant {
	if s == nil {
		return nil
	}
	sp := new(Variant)
	s.AssignTo(sp)
	return sp
}

func (s *PriceDef) CopyFrom(sp *Variant) {
	s.WholesalePrice0 = sp.WholesalePrice0
	s.WholesalePrice = sp.WholesalePrice
	s.ListPrice = sp.ListPrice
	s.RetailPriceMin = sp.RetailPriceMin
	s.RetailPriceMax = sp.RetailPriceMax
}

func (s *PriceDef) AssignTo(sp *Variant) {
	sp.WholesalePrice0 = s.WholesalePrice0
	sp.WholesalePrice = s.WholesalePrice
	sp.ListPrice = s.ListPrice
	sp.RetailPriceMin = s.RetailPriceMin
	sp.RetailPriceMax = s.RetailPriceMax
}

// Type PriceDef represents table variant
func sqlgenPriceDef(_ *PriceDef, _ *Variant) bool { return true }

type PriceDefs []*PriceDef

const __sqlPriceDef_Table = "variant"
const __sqlPriceDef_ListCols = "\"wholesale_price_0\",\"wholesale_price\",\"list_price\",\"retail_price_min\",\"retail_price_max\""
const __sqlPriceDef_Insert = "INSERT INTO \"variant\" (" + __sqlPriceDef_ListCols + ") VALUES"
const __sqlPriceDef_Select = "SELECT " + __sqlPriceDef_ListCols + " FROM \"variant\""
const __sqlPriceDef_Select_history = "SELECT " + __sqlPriceDef_ListCols + " FROM history.\"variant\""
const __sqlPriceDef_UpdateAll = "UPDATE \"variant\" SET (" + __sqlPriceDef_ListCols + ")"

func (m *PriceDef) SQLTableName() string  { return "variant" }
func (m *PriceDefs) SQLTableName() string { return "variant" }
func (m *PriceDef) SQLListCols() string   { return __sqlPriceDef_ListCols }

func (m *PriceDef) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.Int(m.WholesalePrice0),
		core.Int(m.WholesalePrice),
		core.Int(m.ListPrice),
		core.Int(m.RetailPriceMin),
		core.Int(m.RetailPriceMax),
	}
}

func (m *PriceDef) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int)(&m.WholesalePrice0),
		(*core.Int)(&m.WholesalePrice),
		(*core.Int)(&m.ListPrice),
		(*core.Int)(&m.RetailPriceMin),
		(*core.Int)(&m.RetailPriceMax),
	}
}

func (m *PriceDef) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *PriceDefs) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(PriceDefs, 0, 128)
	for rows.Next() {
		m := new(PriceDef)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *PriceDef) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPriceDef_Select)
	return nil
}

func (_ *PriceDefs) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPriceDef_Select)
	return nil
}

func (m *PriceDef) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlPriceDef_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(5)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms PriceDefs) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlPriceDef_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(5)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *PriceDef) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("variant")
	w.WriteRawString(" SET ")
	if m.WholesalePrice0 != 0 {
		flag = true
		w.WriteName("wholesale_price_0")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WholesalePrice0)
	}
	if m.WholesalePrice != 0 {
		flag = true
		w.WriteName("wholesale_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WholesalePrice)
	}
	if m.ListPrice != 0 {
		flag = true
		w.WriteName("list_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ListPrice)
	}
	if m.RetailPriceMin != 0 {
		flag = true
		w.WriteName("retail_price_min")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RetailPriceMin)
	}
	if m.RetailPriceMax != 0 {
		flag = true
		w.WriteName("retail_price_max")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RetailPriceMax)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *PriceDef) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlPriceDef_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(5)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type PriceDefHistory map[string]interface{}
type PriceDefHistories []map[string]interface{}

func (m *PriceDefHistory) SQLTableName() string  { return "history.\"variant\"" }
func (m PriceDefHistories) SQLTableName() string { return "history.\"variant\"" }

func (m *PriceDefHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPriceDef_Select_history)
	return nil
}

func (m PriceDefHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlPriceDef_Select_history)
	return nil
}

func (m PriceDefHistory) WholesalePrice0() core.Interface {
	return core.Interface{m["wholesale_price_0"]}
}
func (m PriceDefHistory) WholesalePrice() core.Interface { return core.Interface{m["wholesale_price"]} }
func (m PriceDefHistory) ListPrice() core.Interface      { return core.Interface{m["list_price"]} }
func (m PriceDefHistory) RetailPriceMin() core.Interface { return core.Interface{m["retail_price_min"]} }
func (m PriceDefHistory) RetailPriceMax() core.Interface { return core.Interface{m["retail_price_max"]} }

func (m *PriceDefHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 5)
	args := make([]interface{}, 5)
	for i := 0; i < 5; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(PriceDefHistory, 5)
	res["wholesale_price_0"] = data[0]
	res["wholesale_price"] = data[1]
	res["list_price"] = data[2]
	res["retail_price_min"] = data[3]
	res["retail_price_max"] = data[4]
	*m = res
	return nil
}

func (ms *PriceDefHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 5)
	args := make([]interface{}, 5)
	for i := 0; i < 5; i++ {
		args[i] = &data[i]
	}
	res := make(PriceDefHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(PriceDefHistory)
		m["wholesale_price_0"] = data[0]
		m["wholesale_price"] = data[1]
		m["list_price"] = data[2]
		m["retail_price_min"] = data[3]
		m["retail_price_max"] = data[4]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// *VariantQuantity is a substruct of *Variant
func substructVariantQuantity(_ *VariantQuantity, _ *Variant) bool { return true }

func VariantQuantitiesFromVariants(ps []*Variant) []*VariantQuantity {
	ss := make([]*VariantQuantity, len(ps))
	for i, p := range ps {
		ss[i] = NewVariantQuantityFromVariant(p)
	}
	return ss
}

func VariantQuantitiesToVariants(ss []*VariantQuantity) []*Variant {
	ps := make([]*Variant, len(ss))
	for i, s := range ss {
		ps[i] = s.ToVariant()
	}
	return ps
}

func NewVariantQuantityFromVariant(sp *Variant) *VariantQuantity {
	if sp == nil {
		return nil
	}
	s := new(VariantQuantity)
	s.CopyFrom(sp)
	return s
}

func (s *VariantQuantity) ToVariant() *Variant {
	if s == nil {
		return nil
	}
	sp := new(Variant)
	s.AssignTo(sp)
	return sp
}

func (s *VariantQuantity) CopyFrom(sp *Variant) {
	s.QuantityAvailable = sp.QuantityAvailable
	s.QuantityOnHand = sp.QuantityOnHand
	s.QuantityReserved = sp.QuantityReserved
}

func (s *VariantQuantity) AssignTo(sp *Variant) {
	sp.QuantityAvailable = s.QuantityAvailable
	sp.QuantityOnHand = s.QuantityOnHand
	sp.QuantityReserved = s.QuantityReserved
}

// Type VariantQuantity represents table variant
func sqlgenVariantQuantity(_ *VariantQuantity, _ *Variant) bool { return true }

type VariantQuantities []*VariantQuantity

const __sqlVariantQuantity_Table = "variant"
const __sqlVariantQuantity_ListCols = "\"quantity_available\",\"quantity_on_hand\",\"quantity_reserved\""
const __sqlVariantQuantity_Insert = "INSERT INTO \"variant\" (" + __sqlVariantQuantity_ListCols + ") VALUES"
const __sqlVariantQuantity_Select = "SELECT " + __sqlVariantQuantity_ListCols + " FROM \"variant\""
const __sqlVariantQuantity_Select_history = "SELECT " + __sqlVariantQuantity_ListCols + " FROM history.\"variant\""
const __sqlVariantQuantity_UpdateAll = "UPDATE \"variant\" SET (" + __sqlVariantQuantity_ListCols + ")"

func (m *VariantQuantity) SQLTableName() string   { return "variant" }
func (m *VariantQuantities) SQLTableName() string { return "variant" }
func (m *VariantQuantity) SQLListCols() string    { return __sqlVariantQuantity_ListCols }

func (m *VariantQuantity) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.Int(m.QuantityAvailable),
		core.Int(m.QuantityOnHand),
		core.Int(m.QuantityReserved),
	}
}

func (m *VariantQuantity) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int)(&m.QuantityAvailable),
		(*core.Int)(&m.QuantityOnHand),
		(*core.Int)(&m.QuantityReserved),
	}
}

func (m *VariantQuantity) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *VariantQuantities) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(VariantQuantities, 0, 128)
	for rows.Next() {
		m := new(VariantQuantity)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *VariantQuantity) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantQuantity_Select)
	return nil
}

func (_ *VariantQuantities) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantQuantity_Select)
	return nil
}

func (m *VariantQuantity) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantQuantity_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(3)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms VariantQuantities) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantQuantity_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(3)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *VariantQuantity) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("variant")
	w.WriteRawString(" SET ")
	if m.QuantityAvailable != 0 {
		flag = true
		w.WriteName("quantity_available")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityAvailable)
	}
	if m.QuantityOnHand != 0 {
		flag = true
		w.WriteName("quantity_on_hand")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityOnHand)
	}
	if m.QuantityReserved != 0 {
		flag = true
		w.WriteName("quantity_reserved")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityReserved)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *VariantQuantity) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantQuantity_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(3)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type VariantQuantityHistory map[string]interface{}
type VariantQuantityHistories []map[string]interface{}

func (m *VariantQuantityHistory) SQLTableName() string  { return "history.\"variant\"" }
func (m VariantQuantityHistories) SQLTableName() string { return "history.\"variant\"" }

func (m *VariantQuantityHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantQuantity_Select_history)
	return nil
}

func (m VariantQuantityHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlVariantQuantity_Select_history)
	return nil
}

func (m VariantQuantityHistory) QuantityAvailable() core.Interface {
	return core.Interface{m["quantity_available"]}
}
func (m VariantQuantityHistory) QuantityOnHand() core.Interface {
	return core.Interface{m["quantity_on_hand"]}
}
func (m VariantQuantityHistory) QuantityReserved() core.Interface {
	return core.Interface{m["quantity_reserved"]}
}

func (m *VariantQuantityHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 3)
	args := make([]interface{}, 3)
	for i := 0; i < 3; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(VariantQuantityHistory, 3)
	res["quantity_available"] = data[0]
	res["quantity_on_hand"] = data[1]
	res["quantity_reserved"] = data[2]
	*m = res
	return nil
}

func (ms *VariantQuantityHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 3)
	args := make([]interface{}, 3)
	for i := 0; i < 3; i++ {
		args[i] = &data[i]
	}
	res := make(VariantQuantityHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(VariantQuantityHistory)
		m["quantity_available"] = data[0]
		m["quantity_on_hand"] = data[1]
		m["quantity_reserved"] = data[2]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ShopVariantExtended represents a join
func sqlgenShopVariantExtended(_ *ShopVariantExtended, _ *ShopVariant, as sq.AS, t0 sq.JOIN_TYPE, _ *Variant, a0 sq.AS, c0 string, t1 sq.JOIN_TYPE, _ *Product, a1 sq.AS, c1 string, t2 sq.JOIN_TYPE, _ *ShopProduct, a2 sq.AS, c2 string) bool {
	__sqlShopVariantExtended_JoinTypes = []sq.JOIN_TYPE{t0, t1, t2}
	__sqlShopVariantExtended_As = as
	__sqlShopVariantExtended_JoinAs = []sq.AS{a0, a1, a2}
	__sqlShopVariantExtended_JoinConds = []string{c0, c1, c2}
	return true
}

type ShopVariantExtendeds []*ShopVariantExtended

var __sqlShopVariantExtended_JoinTypes []sq.JOIN_TYPE
var __sqlShopVariantExtended_As sq.AS
var __sqlShopVariantExtended_JoinAs []sq.AS
var __sqlShopVariantExtended_JoinConds []string

func (m *ShopVariantExtended) SQLTableName() string  { return "shop_variant" }
func (m *ShopVariantExtendeds) SQLTableName() string { return "shop_variant" }

func (m *ShopVariantExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopVariantExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopVariantExtendeds, 0, 128)
	for rows.Next() {
		m := new(ShopVariantExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ShopVariantExtended) SQLSelect(w SQLWriter) error {
	(*ShopVariantExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ShopVariantExtended)(nil).__sqlJoin(w, __sqlShopVariantExtended_JoinTypes)
	return nil
}

func (m *ShopVariantExtendeds) SQLSelect(w SQLWriter) error {
	return (*ShopVariantExtended)(nil).SQLSelect(w)
}

func (m *ShopVariantExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlShopVariantExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ShopVariantExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ShopVariantExtended)(nil).SQLJoin(w, types)
}

func (m *ShopVariantExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlShopVariantExtended_As), (*ShopVariant)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopVariantExtended_JoinAs[0]), (*Variant)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopVariantExtended_JoinAs[1]), (*Product)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopVariantExtended_JoinAs[2]), (*ShopProduct)(nil).SQLListCols())
}

func (m *ShopVariantExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 3 {
		panic("common/sql: expect 3 types to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("shop_variant")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopVariantExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Variant)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopVariantExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopVariantExtended_JoinConds[0])
	w.WriteByte(' ')
	w.WriteRawString(string(types[1]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Product)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopVariantExtended_JoinAs[1]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopVariantExtended_JoinConds[1])
	w.WriteByte(' ')
	w.WriteRawString(string(types[2]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*ShopProduct)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopVariantExtended_JoinAs[2]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopVariantExtended_JoinConds[2])
}

func (m *ShopVariantExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.ShopVariant = new(ShopVariant)
	args = append(args, m.ShopVariant.SQLScanArgs(opts)...)
	m.Variant = new(Variant)
	args = append(args, m.Variant.SQLScanArgs(opts)...)
	m.Product = new(Product)
	args = append(args, m.Product.SQLScanArgs(opts)...)
	m.ShopProduct = new(ShopProduct)
	args = append(args, m.ShopProduct.SQLScanArgs(opts)...)

	return args
}

// Type ShopVariant represents table shop_variant
func sqlgenShopVariant(_ *ShopVariant) bool { return true }

type ShopVariants []*ShopVariant

const __sqlShopVariant_Table = "shop_variant"
const __sqlShopVariant_ListCols = "\"shop_id\",\"variant_id\",\"collection_id\",\"product_id\",\"name\",\"description\",\"desc_html\",\"short_desc\",\"image_urls\",\"note\",\"tags\",\"retail_price\",\"status\",\"created_at\",\"updated_at\",\"name_norm\""
const __sqlShopVariant_Insert = "INSERT INTO \"shop_variant\" (" + __sqlShopVariant_ListCols + ") VALUES"
const __sqlShopVariant_Select = "SELECT " + __sqlShopVariant_ListCols + " FROM \"shop_variant\""
const __sqlShopVariant_Select_history = "SELECT " + __sqlShopVariant_ListCols + " FROM history.\"shop_variant\""
const __sqlShopVariant_UpdateAll = "UPDATE \"shop_variant\" SET (" + __sqlShopVariant_ListCols + ")"

func (m *ShopVariant) SQLTableName() string  { return "shop_variant" }
func (m *ShopVariants) SQLTableName() string { return "shop_variant" }
func (m *ShopVariant) SQLListCols() string   { return __sqlShopVariant_ListCols }

func (m *ShopVariant) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ShopID),
		core.Int64(m.VariantID),
		core.Int64(m.CollectionID),
		core.Int64(m.ProductID),
		core.String(m.Name),
		core.String(m.Description),
		core.String(m.DescHTML),
		core.String(m.ShortDesc),
		core.Array{m.ImageURLs, opts},
		core.String(m.Note),
		core.Array{m.Tags, opts},
		core.Int(m.RetailPrice),
		core.Int(m.Status),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.String(m.NameNorm),
	}
}

func (m *ShopVariant) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ShopID),
		(*core.Int64)(&m.VariantID),
		(*core.Int64)(&m.CollectionID),
		(*core.Int64)(&m.ProductID),
		(*core.String)(&m.Name),
		(*core.String)(&m.Description),
		(*core.String)(&m.DescHTML),
		(*core.String)(&m.ShortDesc),
		core.Array{&m.ImageURLs, opts},
		(*core.String)(&m.Note),
		core.Array{&m.Tags, opts},
		(*core.Int)(&m.RetailPrice),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.String)(&m.NameNorm),
	}
}

func (m *ShopVariant) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopVariants) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopVariants, 0, 128)
	for rows.Next() {
		m := new(ShopVariant)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopVariant) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Select)
	return nil
}

func (_ *ShopVariants) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Select)
	return nil
}

func (m *ShopVariant) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(16)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopVariants) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(16)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopVariant) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_variant")
	w.WriteRawString(" SET ")
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.VariantID != 0 {
		flag = true
		w.WriteName("variant_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.VariantID)
	}
	if m.CollectionID != 0 {
		flag = true
		w.WriteName("collection_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CollectionID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.DescHTML != "" {
		flag = true
		w.WriteName("desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DescHTML)
	}
	if m.ShortDesc != "" {
		flag = true
		w.WriteName("short_desc")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShortDesc)
	}
	if m.ImageURLs != nil {
		flag = true
		w.WriteName("image_urls")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ImageURLs, opts})
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if m.Tags != nil {
		flag = true
		w.WriteName("tags")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.Tags, opts})
	}
	if m.RetailPrice != 0 {
		flag = true
		w.WriteName("retail_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RetailPrice)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if m.NameNorm != "" {
		flag = true
		w.WriteName("name_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.NameNorm)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopVariant) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(16)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopVariantHistory map[string]interface{}
type ShopVariantHistories []map[string]interface{}

func (m *ShopVariantHistory) SQLTableName() string  { return "history.\"shop_variant\"" }
func (m ShopVariantHistories) SQLTableName() string { return "history.\"shop_variant\"" }

func (m *ShopVariantHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Select_history)
	return nil
}

func (m ShopVariantHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Select_history)
	return nil
}

func (m ShopVariantHistory) ShopID() core.Interface       { return core.Interface{m["shop_id"]} }
func (m ShopVariantHistory) VariantID() core.Interface    { return core.Interface{m["variant_id"]} }
func (m ShopVariantHistory) CollectionID() core.Interface { return core.Interface{m["collection_id"]} }
func (m ShopVariantHistory) ProductID() core.Interface    { return core.Interface{m["product_id"]} }
func (m ShopVariantHistory) Name() core.Interface         { return core.Interface{m["name"]} }
func (m ShopVariantHistory) Description() core.Interface  { return core.Interface{m["description"]} }
func (m ShopVariantHistory) DescHTML() core.Interface     { return core.Interface{m["desc_html"]} }
func (m ShopVariantHistory) ShortDesc() core.Interface    { return core.Interface{m["short_desc"]} }
func (m ShopVariantHistory) ImageURLs() core.Interface    { return core.Interface{m["image_urls"]} }
func (m ShopVariantHistory) Note() core.Interface         { return core.Interface{m["note"]} }
func (m ShopVariantHistory) Tags() core.Interface         { return core.Interface{m["tags"]} }
func (m ShopVariantHistory) RetailPrice() core.Interface  { return core.Interface{m["retail_price"]} }
func (m ShopVariantHistory) Status() core.Interface       { return core.Interface{m["status"]} }
func (m ShopVariantHistory) CreatedAt() core.Interface    { return core.Interface{m["created_at"]} }
func (m ShopVariantHistory) UpdatedAt() core.Interface    { return core.Interface{m["updated_at"]} }
func (m ShopVariantHistory) NameNorm() core.Interface     { return core.Interface{m["name_norm"]} }

func (m *ShopVariantHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 16)
	args := make([]interface{}, 16)
	for i := 0; i < 16; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopVariantHistory, 16)
	res["shop_id"] = data[0]
	res["variant_id"] = data[1]
	res["collection_id"] = data[2]
	res["product_id"] = data[3]
	res["name"] = data[4]
	res["description"] = data[5]
	res["desc_html"] = data[6]
	res["short_desc"] = data[7]
	res["image_urls"] = data[8]
	res["note"] = data[9]
	res["tags"] = data[10]
	res["retail_price"] = data[11]
	res["status"] = data[12]
	res["created_at"] = data[13]
	res["updated_at"] = data[14]
	res["name_norm"] = data[15]
	*m = res
	return nil
}

func (ms *ShopVariantHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 16)
	args := make([]interface{}, 16)
	for i := 0; i < 16; i++ {
		args[i] = &data[i]
	}
	res := make(ShopVariantHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopVariantHistory)
		m["shop_id"] = data[0]
		m["variant_id"] = data[1]
		m["collection_id"] = data[2]
		m["product_id"] = data[3]
		m["name"] = data[4]
		m["description"] = data[5]
		m["desc_html"] = data[6]
		m["short_desc"] = data[7]
		m["image_urls"] = data[8]
		m["note"] = data[9]
		m["tags"] = data[10]
		m["retail_price"] = data[11]
		m["status"] = data[12]
		m["created_at"] = data[13]
		m["updated_at"] = data[14]
		m["name_norm"] = data[15]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ShopProduct represents table shop_product
func sqlgenShopProduct(_ *ShopProduct) bool { return true }

type ShopProducts []*ShopProduct

const __sqlShopProduct_Table = "shop_product"
const __sqlShopProduct_ListCols = "\"shop_id\",\"product_id\",\"name\",\"description\",\"desc_html\",\"short_desc\",\"image_urls\",\"note\",\"tags\",\"retail_price\",\"status\",\"created_at\",\"updated_at\",\"name_norm\""
const __sqlShopProduct_Insert = "INSERT INTO \"shop_product\" (" + __sqlShopProduct_ListCols + ") VALUES"
const __sqlShopProduct_Select = "SELECT " + __sqlShopProduct_ListCols + " FROM \"shop_product\""
const __sqlShopProduct_Select_history = "SELECT " + __sqlShopProduct_ListCols + " FROM history.\"shop_product\""
const __sqlShopProduct_UpdateAll = "UPDATE \"shop_product\" SET (" + __sqlShopProduct_ListCols + ")"

func (m *ShopProduct) SQLTableName() string  { return "shop_product" }
func (m *ShopProducts) SQLTableName() string { return "shop_product" }
func (m *ShopProduct) SQLListCols() string   { return __sqlShopProduct_ListCols }

func (m *ShopProduct) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ShopID),
		core.Int64(m.ProductID),
		core.String(m.Name),
		core.String(m.Description),
		core.String(m.DescHTML),
		core.String(m.ShortDesc),
		core.Array{m.ImageURLs, opts},
		core.String(m.Note),
		core.Array{m.Tags, opts},
		core.Int(m.RetailPrice),
		core.Int(m.Status),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.String(m.NameNorm),
	}
}

func (m *ShopProduct) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ShopID),
		(*core.Int64)(&m.ProductID),
		(*core.String)(&m.Name),
		(*core.String)(&m.Description),
		(*core.String)(&m.DescHTML),
		(*core.String)(&m.ShortDesc),
		core.Array{&m.ImageURLs, opts},
		(*core.String)(&m.Note),
		core.Array{&m.Tags, opts},
		(*core.Int)(&m.RetailPrice),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.String)(&m.NameNorm),
	}
}

func (m *ShopProduct) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopProducts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopProducts, 0, 128)
	for rows.Next() {
		m := new(ShopProduct)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopProduct) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_Select)
	return nil
}

func (_ *ShopProducts) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_Select)
	return nil
}

func (m *ShopProduct) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopProducts) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(14)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopProduct) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_product")
	w.WriteRawString(" SET ")
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.DescHTML != "" {
		flag = true
		w.WriteName("desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DescHTML)
	}
	if m.ShortDesc != "" {
		flag = true
		w.WriteName("short_desc")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShortDesc)
	}
	if m.ImageURLs != nil {
		flag = true
		w.WriteName("image_urls")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ImageURLs, opts})
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if m.Tags != nil {
		flag = true
		w.WriteName("tags")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.Tags, opts})
	}
	if m.RetailPrice != 0 {
		flag = true
		w.WriteName("retail_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RetailPrice)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if m.NameNorm != "" {
		flag = true
		w.WriteName("name_norm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.NameNorm)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopProduct) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopProductHistory map[string]interface{}
type ShopProductHistories []map[string]interface{}

func (m *ShopProductHistory) SQLTableName() string  { return "history.\"shop_product\"" }
func (m ShopProductHistories) SQLTableName() string { return "history.\"shop_product\"" }

func (m *ShopProductHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_Select_history)
	return nil
}

func (m ShopProductHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopProduct_Select_history)
	return nil
}

func (m ShopProductHistory) ShopID() core.Interface      { return core.Interface{m["shop_id"]} }
func (m ShopProductHistory) ProductID() core.Interface   { return core.Interface{m["product_id"]} }
func (m ShopProductHistory) Name() core.Interface        { return core.Interface{m["name"]} }
func (m ShopProductHistory) Description() core.Interface { return core.Interface{m["description"]} }
func (m ShopProductHistory) DescHTML() core.Interface    { return core.Interface{m["desc_html"]} }
func (m ShopProductHistory) ShortDesc() core.Interface   { return core.Interface{m["short_desc"]} }
func (m ShopProductHistory) ImageURLs() core.Interface   { return core.Interface{m["image_urls"]} }
func (m ShopProductHistory) Note() core.Interface        { return core.Interface{m["note"]} }
func (m ShopProductHistory) Tags() core.Interface        { return core.Interface{m["tags"]} }
func (m ShopProductHistory) RetailPrice() core.Interface { return core.Interface{m["retail_price"]} }
func (m ShopProductHistory) Status() core.Interface      { return core.Interface{m["status"]} }
func (m ShopProductHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m ShopProductHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }
func (m ShopProductHistory) NameNorm() core.Interface    { return core.Interface{m["name_norm"]} }

func (m *ShopProductHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopProductHistory, 14)
	res["shop_id"] = data[0]
	res["product_id"] = data[1]
	res["name"] = data[2]
	res["description"] = data[3]
	res["desc_html"] = data[4]
	res["short_desc"] = data[5]
	res["image_urls"] = data[6]
	res["note"] = data[7]
	res["tags"] = data[8]
	res["retail_price"] = data[9]
	res["status"] = data[10]
	res["created_at"] = data[11]
	res["updated_at"] = data[12]
	res["name_norm"] = data[13]
	*m = res
	return nil
}

func (ms *ShopProductHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	res := make(ShopProductHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopProductHistory)
		m["shop_id"] = data[0]
		m["product_id"] = data[1]
		m["name"] = data[2]
		m["description"] = data[3]
		m["desc_html"] = data[4]
		m["short_desc"] = data[5]
		m["image_urls"] = data[6]
		m["note"] = data[7]
		m["tags"] = data[8]
		m["retail_price"] = data[9]
		m["status"] = data[10]
		m["created_at"] = data[11]
		m["updated_at"] = data[12]
		m["name_norm"] = data[13]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ShopProductFtProductFtVariantFtShopVariant represents a join
func sqlgenShopProductFtProductFtVariantFtShopVariant(_ *ShopProductFtProductFtVariantFtShopVariant, _ *ShopProduct, as sq.AS, t0 sq.JOIN_TYPE, _ *Product, a0 sq.AS, c0 string, t1 sq.JOIN_TYPE, _ *Variant, a1 sq.AS, c1 string, t2 sq.JOIN_TYPE, _ *VariantExternal, a2 sq.AS, c2 string, t3 sq.JOIN_TYPE, _ *ShopVariant, a3 sq.AS, c3 string) bool {
	__sqlShopProductFtProductFtVariantFtShopVariant_JoinTypes = []sq.JOIN_TYPE{t0, t1, t2, t3}
	__sqlShopProductFtProductFtVariantFtShopVariant_As = as
	__sqlShopProductFtProductFtVariantFtShopVariant_JoinAs = []sq.AS{a0, a1, a2, a3}
	__sqlShopProductFtProductFtVariantFtShopVariant_JoinConds = []string{c0, c1, c2, c3}
	return true
}

type ShopProductFtProductFtVariantFtShopVariants []*ShopProductFtProductFtVariantFtShopVariant

var __sqlShopProductFtProductFtVariantFtShopVariant_JoinTypes []sq.JOIN_TYPE
var __sqlShopProductFtProductFtVariantFtShopVariant_As sq.AS
var __sqlShopProductFtProductFtVariantFtShopVariant_JoinAs []sq.AS
var __sqlShopProductFtProductFtVariantFtShopVariant_JoinConds []string

func (m *ShopProductFtProductFtVariantFtShopVariant) SQLTableName() string  { return "shop_product" }
func (m *ShopProductFtProductFtVariantFtShopVariants) SQLTableName() string { return "shop_product" }

func (m *ShopProductFtProductFtVariantFtShopVariant) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopProductFtProductFtVariantFtShopVariants) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopProductFtProductFtVariantFtShopVariants, 0, 128)
	for rows.Next() {
		m := new(ShopProductFtProductFtVariantFtShopVariant)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ShopProductFtProductFtVariantFtShopVariant) SQLSelect(w SQLWriter) error {
	(*ShopProductFtProductFtVariantFtShopVariant)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ShopProductFtProductFtVariantFtShopVariant)(nil).__sqlJoin(w, __sqlShopProductFtProductFtVariantFtShopVariant_JoinTypes)
	return nil
}

func (m *ShopProductFtProductFtVariantFtShopVariants) SQLSelect(w SQLWriter) error {
	return (*ShopProductFtProductFtVariantFtShopVariant)(nil).SQLSelect(w)
}

func (m *ShopProductFtProductFtVariantFtShopVariant) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlShopProductFtProductFtVariantFtShopVariant_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ShopProductFtProductFtVariantFtShopVariants) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ShopProductFtProductFtVariantFtShopVariant)(nil).SQLJoin(w, types)
}

func (m *ShopProductFtProductFtVariantFtShopVariant) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlShopProductFtProductFtVariantFtShopVariant_As), (*ShopProduct)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopProductFtProductFtVariantFtShopVariant_JoinAs[0]), (*Product)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopProductFtProductFtVariantFtShopVariant_JoinAs[1]), (*Variant)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopProductFtProductFtVariantFtShopVariant_JoinAs[2]), (*VariantExternal)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopProductFtProductFtVariantFtShopVariant_JoinAs[3]), (*ShopVariant)(nil).SQLListCols())
}

func (m *ShopProductFtProductFtVariantFtShopVariant) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 4 {
		panic("common/sql: expect 4 types to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("shop_product")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopProductFtProductFtVariantFtShopVariant_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Product)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopProductFtProductFtVariantFtShopVariant_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopProductFtProductFtVariantFtShopVariant_JoinConds[0])
	w.WriteByte(' ')
	w.WriteRawString(string(types[1]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Variant)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopProductFtProductFtVariantFtShopVariant_JoinAs[1]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopProductFtProductFtVariantFtShopVariant_JoinConds[1])
	w.WriteByte(' ')
	w.WriteRawString(string(types[2]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*VariantExternal)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopProductFtProductFtVariantFtShopVariant_JoinAs[2]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopProductFtProductFtVariantFtShopVariant_JoinConds[2])
	w.WriteByte(' ')
	w.WriteRawString(string(types[3]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*ShopVariant)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopProductFtProductFtVariantFtShopVariant_JoinAs[3]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopProductFtProductFtVariantFtShopVariant_JoinConds[3])
}

func (m *ShopProductFtProductFtVariantFtShopVariant) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.ShopProduct = new(ShopProduct)
	args = append(args, m.ShopProduct.SQLScanArgs(opts)...)
	m.Product = new(Product)
	args = append(args, m.Product.SQLScanArgs(opts)...)
	m.Variant = new(Variant)
	args = append(args, m.Variant.SQLScanArgs(opts)...)
	m.VariantExternal = new(VariantExternal)
	args = append(args, m.VariantExternal.SQLScanArgs(opts)...)
	m.ShopVariant = new(ShopVariant)
	args = append(args, m.ShopVariant.SQLScanArgs(opts)...)

	return args
}

// Type ShopProductExtended represents a join
func sqlgenShopProductExtended(_ *ShopProductExtended, _ *ShopProduct, as sq.AS, t0 sq.JOIN_TYPE, _ *Product, a0 sq.AS, c0 string) bool {
	__sqlShopProductExtended_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlShopProductExtended_As = as
	__sqlShopProductExtended_JoinAs = []sq.AS{a0}
	__sqlShopProductExtended_JoinConds = []string{c0}
	return true
}

type ShopProductExtendeds []*ShopProductExtended

var __sqlShopProductExtended_JoinTypes []sq.JOIN_TYPE
var __sqlShopProductExtended_As sq.AS
var __sqlShopProductExtended_JoinAs []sq.AS
var __sqlShopProductExtended_JoinConds []string

func (m *ShopProductExtended) SQLTableName() string  { return "shop_product" }
func (m *ShopProductExtendeds) SQLTableName() string { return "shop_product" }

func (m *ShopProductExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopProductExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopProductExtendeds, 0, 128)
	for rows.Next() {
		m := new(ShopProductExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ShopProductExtended) SQLSelect(w SQLWriter) error {
	(*ShopProductExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ShopProductExtended)(nil).__sqlJoin(w, __sqlShopProductExtended_JoinTypes)
	return nil
}

func (m *ShopProductExtendeds) SQLSelect(w SQLWriter) error {
	return (*ShopProductExtended)(nil).SQLSelect(w)
}

func (m *ShopProductExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlShopProductExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ShopProductExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ShopProductExtended)(nil).SQLJoin(w, types)
}

func (m *ShopProductExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlShopProductExtended_As), (*ShopProduct)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopProductExtended_JoinAs[0]), (*Product)(nil).SQLListCols())
}

func (m *ShopProductExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("shop_product")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopProductExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Product)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopProductExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopProductExtended_JoinConds[0])
}

func (m *ShopProductExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.ShopProduct = new(ShopProduct)
	args = append(args, m.ShopProduct.SQLScanArgs(opts)...)
	m.Product = new(Product)
	args = append(args, m.Product.SQLScanArgs(opts)...)

	return args
}

// Type ShopVariantExt represents a join
func sqlgenShopVariantExt(_ *ShopVariantExt, _ *ShopVariant, as sq.AS, t0 sq.JOIN_TYPE, _ *Variant, a0 sq.AS, c0 string, t1 sq.JOIN_TYPE, _ *VariantExternal, a1 sq.AS, c1 string) bool {
	__sqlShopVariantExt_JoinTypes = []sq.JOIN_TYPE{t0, t1}
	__sqlShopVariantExt_As = as
	__sqlShopVariantExt_JoinAs = []sq.AS{a0, a1}
	__sqlShopVariantExt_JoinConds = []string{c0, c1}
	return true
}

type ShopVariantExts []*ShopVariantExt

var __sqlShopVariantExt_JoinTypes []sq.JOIN_TYPE
var __sqlShopVariantExt_As sq.AS
var __sqlShopVariantExt_JoinAs []sq.AS
var __sqlShopVariantExt_JoinConds []string

func (m *ShopVariantExt) SQLTableName() string  { return "shop_variant" }
func (m *ShopVariantExts) SQLTableName() string { return "shop_variant" }

func (m *ShopVariantExt) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopVariantExts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopVariantExts, 0, 128)
	for rows.Next() {
		m := new(ShopVariantExt)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ShopVariantExt) SQLSelect(w SQLWriter) error {
	(*ShopVariantExt)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ShopVariantExt)(nil).__sqlJoin(w, __sqlShopVariantExt_JoinTypes)
	return nil
}

func (m *ShopVariantExts) SQLSelect(w SQLWriter) error {
	return (*ShopVariantExt)(nil).SQLSelect(w)
}

func (m *ShopVariantExt) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlShopVariantExt_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ShopVariantExts) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ShopVariantExt)(nil).SQLJoin(w, types)
}

func (m *ShopVariantExt) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlShopVariantExt_As), (*ShopVariant)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopVariantExt_JoinAs[0]), (*Variant)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlShopVariantExt_JoinAs[1]), (*VariantExternal)(nil).SQLListCols())
}

func (m *ShopVariantExt) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 2 {
		panic("common/sql: expect 2 types to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("shop_variant")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopVariantExt_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Variant)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopVariantExt_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopVariantExt_JoinConds[0])
	w.WriteByte(' ')
	w.WriteRawString(string(types[1]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*VariantExternal)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlShopVariantExt_JoinAs[1]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlShopVariantExt_JoinConds[1])
}

func (m *ShopVariantExt) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.ShopVariant = new(ShopVariant)
	args = append(args, m.ShopVariant.SQLScanArgs(opts)...)
	m.Variant = new(Variant)
	args = append(args, m.Variant.SQLScanArgs(opts)...)
	m.VariantExternal = new(VariantExternal)
	args = append(args, m.VariantExternal.SQLScanArgs(opts)...)

	return args
}

// Type ProductFtVariantFtShopProduct represents a join
func sqlgenProductFtVariantFtShopProduct(_ *ProductFtVariantFtShopProduct, _ *Product, as sq.AS, t0 sq.JOIN_TYPE, _ *Variant, a0 sq.AS, c0 string, t1 sq.JOIN_TYPE, _ *VariantExternal, a1 sq.AS, c1 string, t2 sq.JOIN_TYPE, _ *ShopProduct, a2 sq.AS, c2 string) bool {
	__sqlProductFtVariantFtShopProduct_JoinTypes = []sq.JOIN_TYPE{t0, t1, t2}
	__sqlProductFtVariantFtShopProduct_As = as
	__sqlProductFtVariantFtShopProduct_JoinAs = []sq.AS{a0, a1, a2}
	__sqlProductFtVariantFtShopProduct_JoinConds = []string{c0, c1, c2}
	return true
}

type ProductFtVariantFtShopProducts []*ProductFtVariantFtShopProduct

var __sqlProductFtVariantFtShopProduct_JoinTypes []sq.JOIN_TYPE
var __sqlProductFtVariantFtShopProduct_As sq.AS
var __sqlProductFtVariantFtShopProduct_JoinAs []sq.AS
var __sqlProductFtVariantFtShopProduct_JoinConds []string

func (m *ProductFtVariantFtShopProduct) SQLTableName() string  { return "product" }
func (m *ProductFtVariantFtShopProducts) SQLTableName() string { return "product" }

func (m *ProductFtVariantFtShopProduct) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductFtVariantFtShopProducts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductFtVariantFtShopProducts, 0, 128)
	for rows.Next() {
		m := new(ProductFtVariantFtShopProduct)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ProductFtVariantFtShopProduct) SQLSelect(w SQLWriter) error {
	(*ProductFtVariantFtShopProduct)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ProductFtVariantFtShopProduct)(nil).__sqlJoin(w, __sqlProductFtVariantFtShopProduct_JoinTypes)
	return nil
}

func (m *ProductFtVariantFtShopProducts) SQLSelect(w SQLWriter) error {
	return (*ProductFtVariantFtShopProduct)(nil).SQLSelect(w)
}

func (m *ProductFtVariantFtShopProduct) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlProductFtVariantFtShopProduct_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ProductFtVariantFtShopProducts) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ProductFtVariantFtShopProduct)(nil).SQLJoin(w, types)
}

func (m *ProductFtVariantFtShopProduct) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlProductFtVariantFtShopProduct_As), (*Product)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlProductFtVariantFtShopProduct_JoinAs[0]), (*Variant)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlProductFtVariantFtShopProduct_JoinAs[1]), (*VariantExternal)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlProductFtVariantFtShopProduct_JoinAs[2]), (*ShopProduct)(nil).SQLListCols())
}

func (m *ProductFtVariantFtShopProduct) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 3 {
		panic("common/sql: expect 3 types to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("product")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductFtVariantFtShopProduct_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Variant)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductFtVariantFtShopProduct_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlProductFtVariantFtShopProduct_JoinConds[0])
	w.WriteByte(' ')
	w.WriteRawString(string(types[1]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*VariantExternal)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductFtVariantFtShopProduct_JoinAs[1]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlProductFtVariantFtShopProduct_JoinConds[1])
	w.WriteByte(' ')
	w.WriteRawString(string(types[2]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*ShopProduct)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductFtVariantFtShopProduct_JoinAs[2]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlProductFtVariantFtShopProduct_JoinConds[2])
}

func (m *ProductFtVariantFtShopProduct) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.Product = new(Product)
	args = append(args, m.Product.SQLScanArgs(opts)...)
	m.Variant = new(Variant)
	args = append(args, m.Variant.SQLScanArgs(opts)...)
	m.VariantExternal = new(VariantExternal)
	args = append(args, m.VariantExternal.SQLScanArgs(opts)...)
	m.ShopProduct = new(ShopProduct)
	args = append(args, m.ShopProduct.SQLScanArgs(opts)...)

	return args
}

// Type ProductFtShopProduct represents a join
func sqlgenProductFtShopProduct(_ *ProductFtShopProduct, _ *Product, as sq.AS, t0 sq.JOIN_TYPE, _ *ShopProduct, a0 sq.AS, c0 string) bool {
	__sqlProductFtShopProduct_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlProductFtShopProduct_As = as
	__sqlProductFtShopProduct_JoinAs = []sq.AS{a0}
	__sqlProductFtShopProduct_JoinConds = []string{c0}
	return true
}

type ProductFtShopProducts []*ProductFtShopProduct

var __sqlProductFtShopProduct_JoinTypes []sq.JOIN_TYPE
var __sqlProductFtShopProduct_As sq.AS
var __sqlProductFtShopProduct_JoinAs []sq.AS
var __sqlProductFtShopProduct_JoinConds []string

func (m *ProductFtShopProduct) SQLTableName() string  { return "product" }
func (m *ProductFtShopProducts) SQLTableName() string { return "product" }

func (m *ProductFtShopProduct) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductFtShopProducts) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductFtShopProducts, 0, 128)
	for rows.Next() {
		m := new(ProductFtShopProduct)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *ProductFtShopProduct) SQLSelect(w SQLWriter) error {
	(*ProductFtShopProduct)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*ProductFtShopProduct)(nil).__sqlJoin(w, __sqlProductFtShopProduct_JoinTypes)
	return nil
}

func (m *ProductFtShopProducts) SQLSelect(w SQLWriter) error {
	return (*ProductFtShopProduct)(nil).SQLSelect(w)
}

func (m *ProductFtShopProduct) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlProductFtShopProduct_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *ProductFtShopProducts) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*ProductFtShopProduct)(nil).SQLJoin(w, types)
}

func (m *ProductFtShopProduct) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlProductFtShopProduct_As), (*Product)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlProductFtShopProduct_JoinAs[0]), (*ShopProduct)(nil).SQLListCols())
}

func (m *ProductFtShopProduct) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("product")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductFtShopProduct_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*ShopProduct)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlProductFtShopProduct_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlProductFtShopProduct_JoinConds[0])
}

func (m *ProductFtShopProduct) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.Product = new(Product)
	args = append(args, m.Product.SQLScanArgs(opts)...)
	m.ShopProduct = new(ShopProduct)
	args = append(args, m.ShopProduct.SQLScanArgs(opts)...)

	return args
}

// Type ShopCollection represents table shop_collection
func sqlgenShopCollection(_ *ShopCollection) bool { return true }

type ShopCollections []*ShopCollection

const __sqlShopCollection_Table = "shop_collection"
const __sqlShopCollection_ListCols = "\"id\",\"shop_id\",\"name\",\"description\",\"desc_html\",\"short_desc\",\"created_at\",\"updated_at\""
const __sqlShopCollection_Insert = "INSERT INTO \"shop_collection\" (" + __sqlShopCollection_ListCols + ") VALUES"
const __sqlShopCollection_Select = "SELECT " + __sqlShopCollection_ListCols + " FROM \"shop_collection\""
const __sqlShopCollection_Select_history = "SELECT " + __sqlShopCollection_ListCols + " FROM history.\"shop_collection\""
const __sqlShopCollection_UpdateAll = "UPDATE \"shop_collection\" SET (" + __sqlShopCollection_ListCols + ")"

func (m *ShopCollection) SQLTableName() string  { return "shop_collection" }
func (m *ShopCollections) SQLTableName() string { return "shop_collection" }
func (m *ShopCollection) SQLListCols() string   { return __sqlShopCollection_ListCols }

func (m *ShopCollection) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.ShopID),
		core.String(m.Name),
		core.String(m.Description),
		core.String(m.DescHTML),
		core.String(m.ShortDesc),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *ShopCollection) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.ShopID),
		(*core.String)(&m.Name),
		(*core.String)(&m.Description),
		(*core.String)(&m.DescHTML),
		(*core.String)(&m.ShortDesc),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *ShopCollection) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopCollections) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopCollections, 0, 128)
	for rows.Next() {
		m := new(ShopCollection)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopCollection) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_Select)
	return nil
}

func (_ *ShopCollections) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_Select)
	return nil
}

func (m *ShopCollection) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopCollections) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(8)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopCollection) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_collection")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.DescHTML != "" {
		flag = true
		w.WriteName("desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DescHTML)
	}
	if m.ShortDesc != "" {
		flag = true
		w.WriteName("short_desc")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShortDesc)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopCollection) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopCollectionHistory map[string]interface{}
type ShopCollectionHistories []map[string]interface{}

func (m *ShopCollectionHistory) SQLTableName() string  { return "history.\"shop_collection\"" }
func (m ShopCollectionHistories) SQLTableName() string { return "history.\"shop_collection\"" }

func (m *ShopCollectionHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_Select_history)
	return nil
}

func (m ShopCollectionHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCollection_Select_history)
	return nil
}

func (m ShopCollectionHistory) ID() core.Interface          { return core.Interface{m["id"]} }
func (m ShopCollectionHistory) ShopID() core.Interface      { return core.Interface{m["shop_id"]} }
func (m ShopCollectionHistory) Name() core.Interface        { return core.Interface{m["name"]} }
func (m ShopCollectionHistory) Description() core.Interface { return core.Interface{m["description"]} }
func (m ShopCollectionHistory) DescHTML() core.Interface    { return core.Interface{m["desc_html"]} }
func (m ShopCollectionHistory) ShortDesc() core.Interface   { return core.Interface{m["short_desc"]} }
func (m ShopCollectionHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m ShopCollectionHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }

func (m *ShopCollectionHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopCollectionHistory, 8)
	res["id"] = data[0]
	res["shop_id"] = data[1]
	res["name"] = data[2]
	res["description"] = data[3]
	res["desc_html"] = data[4]
	res["short_desc"] = data[5]
	res["created_at"] = data[6]
	res["updated_at"] = data[7]
	*m = res
	return nil
}

func (ms *ShopCollectionHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	res := make(ShopCollectionHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopCollectionHistory)
		m["id"] = data[0]
		m["shop_id"] = data[1]
		m["name"] = data[2]
		m["description"] = data[3]
		m["desc_html"] = data[4]
		m["short_desc"] = data[5]
		m["created_at"] = data[6]
		m["updated_at"] = data[7]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ProductShopCollection represents table product_shop_collection
func sqlgenProductShopCollection(_ *ProductShopCollection) bool { return true }

type ProductShopCollections []*ProductShopCollection

const __sqlProductShopCollection_Table = "product_shop_collection"
const __sqlProductShopCollection_ListCols = "\"collection_id\",\"product_id\",\"shop_id\",\"status\",\"created_at\",\"updated_at\""
const __sqlProductShopCollection_Insert = "INSERT INTO \"product_shop_collection\" (" + __sqlProductShopCollection_ListCols + ") VALUES"
const __sqlProductShopCollection_Select = "SELECT " + __sqlProductShopCollection_ListCols + " FROM \"product_shop_collection\""
const __sqlProductShopCollection_Select_history = "SELECT " + __sqlProductShopCollection_ListCols + " FROM history.\"product_shop_collection\""
const __sqlProductShopCollection_UpdateAll = "UPDATE \"product_shop_collection\" SET (" + __sqlProductShopCollection_ListCols + ")"

func (m *ProductShopCollection) SQLTableName() string  { return "product_shop_collection" }
func (m *ProductShopCollections) SQLTableName() string { return "product_shop_collection" }
func (m *ProductShopCollection) SQLListCols() string   { return __sqlProductShopCollection_ListCols }

func (m *ProductShopCollection) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.CollectionID),
		core.Int64(m.ProductID),
		core.Int64(m.ShopID),
		core.Int(m.Status),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *ProductShopCollection) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.CollectionID),
		(*core.Int64)(&m.ProductID),
		(*core.Int64)(&m.ShopID),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *ProductShopCollection) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ProductShopCollections) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ProductShopCollections, 0, 128)
	for rows.Next() {
		m := new(ProductShopCollection)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ProductShopCollection) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_Select)
	return nil
}

func (_ *ProductShopCollections) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_Select)
	return nil
}

func (m *ProductShopCollection) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ProductShopCollections) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(6)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ProductShopCollection) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("product_shop_collection")
	w.WriteRawString(" SET ")
	if m.CollectionID != 0 {
		flag = true
		w.WriteName("collection_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CollectionID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ProductShopCollection) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ProductShopCollectionHistory map[string]interface{}
type ProductShopCollectionHistories []map[string]interface{}

func (m *ProductShopCollectionHistory) SQLTableName() string {
	return "history.\"product_shop_collection\""
}
func (m ProductShopCollectionHistories) SQLTableName() string {
	return "history.\"product_shop_collection\""
}

func (m *ProductShopCollectionHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_Select_history)
	return nil
}

func (m ProductShopCollectionHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlProductShopCollection_Select_history)
	return nil
}

func (m ProductShopCollectionHistory) CollectionID() core.Interface {
	return core.Interface{m["collection_id"]}
}
func (m ProductShopCollectionHistory) ProductID() core.Interface {
	return core.Interface{m["product_id"]}
}
func (m ProductShopCollectionHistory) ShopID() core.Interface { return core.Interface{m["shop_id"]} }
func (m ProductShopCollectionHistory) Status() core.Interface { return core.Interface{m["status"]} }
func (m ProductShopCollectionHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m ProductShopCollectionHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}

func (m *ProductShopCollectionHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ProductShopCollectionHistory, 6)
	res["collection_id"] = data[0]
	res["product_id"] = data[1]
	res["shop_id"] = data[2]
	res["status"] = data[3]
	res["created_at"] = data[4]
	res["updated_at"] = data[5]
	*m = res
	return nil
}

func (ms *ProductShopCollectionHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	res := make(ProductShopCollectionHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ProductShopCollectionHistory)
		m["collection_id"] = data[0]
		m["product_id"] = data[1]
		m["shop_id"] = data[2]
		m["status"] = data[3]
		m["created_at"] = data[4]
		m["updated_at"] = data[5]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type User represents table user
func sqlgenUser(_ *User) bool { return true }

type Users []*User

const __sqlUser_Table = "user"
const __sqlUser_ListCols = "\"id\",\"full_name\",\"short_name\",\"email\",\"phone\",\"status\",\"identifying\",\"created_at\",\"updated_at\",\"agreed_tos_at\",\"agreed_email_info_at\",\"email_verified_at\",\"phone_verified_at\",\"email_verification_sent_at\",\"phone_verification_sent_at\",\"is_test\""
const __sqlUser_Insert = "INSERT INTO \"user\" (" + __sqlUser_ListCols + ") VALUES"
const __sqlUser_Select = "SELECT " + __sqlUser_ListCols + " FROM \"user\""
const __sqlUser_Select_history = "SELECT " + __sqlUser_ListCols + " FROM history.\"user\""
const __sqlUser_UpdateAll = "UPDATE \"user\" SET (" + __sqlUser_ListCols + ")"

func (m *User) SQLTableName() string  { return "user" }
func (m *Users) SQLTableName() string { return "user" }
func (m *User) SQLListCols() string   { return __sqlUser_ListCols }

func (m *User) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.String(m.UserInner.FullName),
		core.String(m.UserInner.ShortName),
		core.String(m.UserInner.Email),
		core.String(m.UserInner.Phone),
		core.Int(m.Status),
		core.String(m.Identifying),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.AgreedTOSAt),
		core.Time(m.AgreedEmailInfoAt),
		core.Time(m.EmailVerifiedAt),
		core.Time(m.PhoneVerifiedAt),
		core.Time(m.EmailVerificationSentAt),
		core.Time(m.PhoneVerificationSentAt),
		core.Int(m.IsTest),
	}
}

func (m *User) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.String)(&m.UserInner.FullName),
		(*core.String)(&m.UserInner.ShortName),
		(*core.String)(&m.UserInner.Email),
		(*core.String)(&m.UserInner.Phone),
		(*core.Int)(&m.Status),
		(*core.String)(&m.Identifying),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.AgreedTOSAt),
		(*core.Time)(&m.AgreedEmailInfoAt),
		(*core.Time)(&m.EmailVerifiedAt),
		(*core.Time)(&m.PhoneVerifiedAt),
		(*core.Time)(&m.EmailVerificationSentAt),
		(*core.Time)(&m.PhoneVerificationSentAt),
		(*core.Int)(&m.IsTest),
	}
}

func (m *User) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Users) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Users, 0, 128)
	for rows.Next() {
		m := new(User)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *User) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUser_Select)
	return nil
}

func (_ *Users) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUser_Select)
	return nil
}

func (m *User) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUser_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(16)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Users) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUser_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(16)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *User) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("user")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.UserInner.FullName != "" {
		flag = true
		w.WriteName("full_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UserInner.FullName)
	}
	if m.UserInner.ShortName != "" {
		flag = true
		w.WriteName("short_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UserInner.ShortName)
	}
	if m.UserInner.Email != "" {
		flag = true
		w.WriteName("email")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UserInner.Email)
	}
	if m.UserInner.Phone != "" {
		flag = true
		w.WriteName("phone")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UserInner.Phone)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if m.Identifying != "" {
		flag = true
		w.WriteName("identifying")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(string(m.Identifying))
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.AgreedTOSAt.IsZero() {
		flag = true
		w.WriteName("agreed_tos_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AgreedTOSAt)
	}
	if !m.AgreedEmailInfoAt.IsZero() {
		flag = true
		w.WriteName("agreed_email_info_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AgreedEmailInfoAt)
	}
	if !m.EmailVerifiedAt.IsZero() {
		flag = true
		w.WriteName("email_verified_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EmailVerifiedAt)
	}
	if !m.PhoneVerifiedAt.IsZero() {
		flag = true
		w.WriteName("phone_verified_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PhoneVerifiedAt)
	}
	if !m.EmailVerificationSentAt.IsZero() {
		flag = true
		w.WriteName("email_verification_sent_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.EmailVerificationSentAt)
	}
	if !m.PhoneVerificationSentAt.IsZero() {
		flag = true
		w.WriteName("phone_verification_sent_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PhoneVerificationSentAt)
	}
	if m.IsTest != 0 {
		flag = true
		w.WriteName("is_test")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.IsTest)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *User) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlUser_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(16)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type UserHistory map[string]interface{}
type UserHistories []map[string]interface{}

func (m *UserHistory) SQLTableName() string  { return "history.\"user\"" }
func (m UserHistories) SQLTableName() string { return "history.\"user\"" }

func (m *UserHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUser_Select_history)
	return nil
}

func (m UserHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUser_Select_history)
	return nil
}

func (m UserHistory) ID() core.Interface          { return core.Interface{m["id"]} }
func (m UserHistory) FullName() core.Interface    { return core.Interface{m["full_name"]} }
func (m UserHistory) ShortName() core.Interface   { return core.Interface{m["short_name"]} }
func (m UserHistory) Email() core.Interface       { return core.Interface{m["email"]} }
func (m UserHistory) Phone() core.Interface       { return core.Interface{m["phone"]} }
func (m UserHistory) Status() core.Interface      { return core.Interface{m["status"]} }
func (m UserHistory) Identifying() core.Interface { return core.Interface{m["identifying"]} }
func (m UserHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m UserHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }
func (m UserHistory) AgreedTOSAt() core.Interface { return core.Interface{m["agreed_tos_at"]} }
func (m UserHistory) AgreedEmailInfoAt() core.Interface {
	return core.Interface{m["agreed_email_info_at"]}
}
func (m UserHistory) EmailVerifiedAt() core.Interface { return core.Interface{m["email_verified_at"]} }
func (m UserHistory) PhoneVerifiedAt() core.Interface { return core.Interface{m["phone_verified_at"]} }
func (m UserHistory) EmailVerificationSentAt() core.Interface {
	return core.Interface{m["email_verification_sent_at"]}
}
func (m UserHistory) PhoneVerificationSentAt() core.Interface {
	return core.Interface{m["phone_verification_sent_at"]}
}
func (m UserHistory) IsTest() core.Interface { return core.Interface{m["is_test"]} }

func (m *UserHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 16)
	args := make([]interface{}, 16)
	for i := 0; i < 16; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(UserHistory, 16)
	res["id"] = data[0]
	res["full_name"] = data[1]
	res["short_name"] = data[2]
	res["email"] = data[3]
	res["phone"] = data[4]
	res["status"] = data[5]
	res["identifying"] = data[6]
	res["created_at"] = data[7]
	res["updated_at"] = data[8]
	res["agreed_tos_at"] = data[9]
	res["agreed_email_info_at"] = data[10]
	res["email_verified_at"] = data[11]
	res["phone_verified_at"] = data[12]
	res["email_verification_sent_at"] = data[13]
	res["phone_verification_sent_at"] = data[14]
	res["is_test"] = data[15]
	*m = res
	return nil
}

func (ms *UserHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 16)
	args := make([]interface{}, 16)
	for i := 0; i < 16; i++ {
		args[i] = &data[i]
	}
	res := make(UserHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(UserHistory)
		m["id"] = data[0]
		m["full_name"] = data[1]
		m["short_name"] = data[2]
		m["email"] = data[3]
		m["phone"] = data[4]
		m["status"] = data[5]
		m["identifying"] = data[6]
		m["created_at"] = data[7]
		m["updated_at"] = data[8]
		m["agreed_tos_at"] = data[9]
		m["agreed_email_info_at"] = data[10]
		m["email_verified_at"] = data[11]
		m["phone_verified_at"] = data[12]
		m["email_verification_sent_at"] = data[13]
		m["phone_verification_sent_at"] = data[14]
		m["is_test"] = data[15]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type AccountUser represents table account_user
func sqlgenAccountUser(_ *AccountUser) bool { return true }

type AccountUsers []*AccountUser

const __sqlAccountUser_Table = "account_user"
const __sqlAccountUser_ListCols = "\"account_id\",\"user_id\",\"status\",\"response_status\",\"created_at\",\"updated_at\",\"deleted_at\",\"roles\",\"permissions\",\"full_name\",\"short_name\",\"position\",\"invitation_sent_at\",\"invitation_sent_by\",\"invitation_accepted_at\",\"invitation_rejected_at\",\"disabled_at\",\"disabled_by\",\"disable_reason\""
const __sqlAccountUser_Insert = "INSERT INTO \"account_user\" (" + __sqlAccountUser_ListCols + ") VALUES"
const __sqlAccountUser_Select = "SELECT " + __sqlAccountUser_ListCols + " FROM \"account_user\""
const __sqlAccountUser_Select_history = "SELECT " + __sqlAccountUser_ListCols + " FROM history.\"account_user\""
const __sqlAccountUser_UpdateAll = "UPDATE \"account_user\" SET (" + __sqlAccountUser_ListCols + ")"

func (m *AccountUser) SQLTableName() string  { return "account_user" }
func (m *AccountUsers) SQLTableName() string { return "account_user" }
func (m *AccountUser) SQLListCols() string   { return __sqlAccountUser_ListCols }

func (m *AccountUser) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.AccountID),
		core.Int64(m.UserID),
		core.Int(m.Status),
		core.Int(m.ResponseStatus),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
		core.Array{m.Permission.Roles, opts},
		core.Array{m.Permission.Permissions, opts},
		core.String(m.FullName),
		core.String(m.ShortName),
		core.String(m.Position),
		core.Time(m.InvitationSentAt),
		core.Int64(m.InvitationSentBy),
		core.Time(m.InvitationAcceptedAt),
		core.Time(m.InvitationRejectedAt),
		core.Time(m.DisabledAt),
		core.Time(m.DisabledBy),
		core.String(m.DisableReason),
	}
}

func (m *AccountUser) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.AccountID),
		(*core.Int64)(&m.UserID),
		(*core.Int)(&m.Status),
		(*core.Int)(&m.ResponseStatus),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
		core.Array{&m.Permission.Roles, opts},
		core.Array{&m.Permission.Permissions, opts},
		(*core.String)(&m.FullName),
		(*core.String)(&m.ShortName),
		(*core.String)(&m.Position),
		(*core.Time)(&m.InvitationSentAt),
		(*core.Int64)(&m.InvitationSentBy),
		(*core.Time)(&m.InvitationAcceptedAt),
		(*core.Time)(&m.InvitationRejectedAt),
		(*core.Time)(&m.DisabledAt),
		(*core.Time)(&m.DisabledBy),
		(*core.String)(&m.DisableReason),
	}
}

func (m *AccountUser) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *AccountUsers) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(AccountUsers, 0, 128)
	for rows.Next() {
		m := new(AccountUser)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *AccountUser) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountUser_Select)
	return nil
}

func (_ *AccountUsers) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountUser_Select)
	return nil
}

func (m *AccountUser) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountUser_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(19)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms AccountUsers) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountUser_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(19)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *AccountUser) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("account_user")
	w.WriteRawString(" SET ")
	if m.AccountID != 0 {
		flag = true
		w.WriteName("account_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccountID)
	}
	if m.UserID != 0 {
		flag = true
		w.WriteName("user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UserID)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if m.ResponseStatus != 0 {
		flag = true
		w.WriteName("response_status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.ResponseStatus))
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if m.Permission.Roles != nil {
		flag = true
		w.WriteName("roles")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.Permission.Roles, opts})
	}
	if m.Permission.Permissions != nil {
		flag = true
		w.WriteName("permissions")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.Permission.Permissions, opts})
	}
	if m.FullName != "" {
		flag = true
		w.WriteName("full_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FullName)
	}
	if m.ShortName != "" {
		flag = true
		w.WriteName("short_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShortName)
	}
	if m.Position != "" {
		flag = true
		w.WriteName("position")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Position)
	}
	if !m.InvitationSentAt.IsZero() {
		flag = true
		w.WriteName("invitation_sent_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.InvitationSentAt)
	}
	if m.InvitationSentBy != 0 {
		flag = true
		w.WriteName("invitation_sent_by")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.InvitationSentBy)
	}
	if !m.InvitationAcceptedAt.IsZero() {
		flag = true
		w.WriteName("invitation_accepted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.InvitationAcceptedAt)
	}
	if !m.InvitationRejectedAt.IsZero() {
		flag = true
		w.WriteName("invitation_rejected_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.InvitationRejectedAt)
	}
	if !m.DisabledAt.IsZero() {
		flag = true
		w.WriteName("disabled_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DisabledAt)
	}
	if !m.DisabledBy.IsZero() {
		flag = true
		w.WriteName("disabled_by")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DisabledBy)
	}
	if m.DisableReason != "" {
		flag = true
		w.WriteName("disable_reason")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DisableReason)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *AccountUser) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountUser_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(19)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type AccountUserHistory map[string]interface{}
type AccountUserHistories []map[string]interface{}

func (m *AccountUserHistory) SQLTableName() string  { return "history.\"account_user\"" }
func (m AccountUserHistories) SQLTableName() string { return "history.\"account_user\"" }

func (m *AccountUserHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountUser_Select_history)
	return nil
}

func (m AccountUserHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountUser_Select_history)
	return nil
}

func (m AccountUserHistory) AccountID() core.Interface { return core.Interface{m["account_id"]} }
func (m AccountUserHistory) UserID() core.Interface    { return core.Interface{m["user_id"]} }
func (m AccountUserHistory) Status() core.Interface    { return core.Interface{m["status"]} }
func (m AccountUserHistory) ResponseStatus() core.Interface {
	return core.Interface{m["response_status"]}
}
func (m AccountUserHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m AccountUserHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }
func (m AccountUserHistory) DeletedAt() core.Interface   { return core.Interface{m["deleted_at"]} }
func (m AccountUserHistory) Roles() core.Interface       { return core.Interface{m["roles"]} }
func (m AccountUserHistory) Permissions() core.Interface { return core.Interface{m["permissions"]} }
func (m AccountUserHistory) FullName() core.Interface    { return core.Interface{m["full_name"]} }
func (m AccountUserHistory) ShortName() core.Interface   { return core.Interface{m["short_name"]} }
func (m AccountUserHistory) Position() core.Interface    { return core.Interface{m["position"]} }
func (m AccountUserHistory) InvitationSentAt() core.Interface {
	return core.Interface{m["invitation_sent_at"]}
}
func (m AccountUserHistory) InvitationSentBy() core.Interface {
	return core.Interface{m["invitation_sent_by"]}
}
func (m AccountUserHistory) InvitationAcceptedAt() core.Interface {
	return core.Interface{m["invitation_accepted_at"]}
}
func (m AccountUserHistory) InvitationRejectedAt() core.Interface {
	return core.Interface{m["invitation_rejected_at"]}
}
func (m AccountUserHistory) DisabledAt() core.Interface    { return core.Interface{m["disabled_at"]} }
func (m AccountUserHistory) DisabledBy() core.Interface    { return core.Interface{m["disabled_by"]} }
func (m AccountUserHistory) DisableReason() core.Interface { return core.Interface{m["disable_reason"]} }

func (m *AccountUserHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 19)
	args := make([]interface{}, 19)
	for i := 0; i < 19; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(AccountUserHistory, 19)
	res["account_id"] = data[0]
	res["user_id"] = data[1]
	res["status"] = data[2]
	res["response_status"] = data[3]
	res["created_at"] = data[4]
	res["updated_at"] = data[5]
	res["deleted_at"] = data[6]
	res["roles"] = data[7]
	res["permissions"] = data[8]
	res["full_name"] = data[9]
	res["short_name"] = data[10]
	res["position"] = data[11]
	res["invitation_sent_at"] = data[12]
	res["invitation_sent_by"] = data[13]
	res["invitation_accepted_at"] = data[14]
	res["invitation_rejected_at"] = data[15]
	res["disabled_at"] = data[16]
	res["disabled_by"] = data[17]
	res["disable_reason"] = data[18]
	*m = res
	return nil
}

func (ms *AccountUserHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 19)
	args := make([]interface{}, 19)
	for i := 0; i < 19; i++ {
		args[i] = &data[i]
	}
	res := make(AccountUserHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(AccountUserHistory)
		m["account_id"] = data[0]
		m["user_id"] = data[1]
		m["status"] = data[2]
		m["response_status"] = data[3]
		m["created_at"] = data[4]
		m["updated_at"] = data[5]
		m["deleted_at"] = data[6]
		m["roles"] = data[7]
		m["permissions"] = data[8]
		m["full_name"] = data[9]
		m["short_name"] = data[10]
		m["position"] = data[11]
		m["invitation_sent_at"] = data[12]
		m["invitation_sent_by"] = data[13]
		m["invitation_accepted_at"] = data[14]
		m["invitation_rejected_at"] = data[15]
		m["disabled_at"] = data[16]
		m["disabled_by"] = data[17]
		m["disable_reason"] = data[18]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type AccountUserExtended represents a join
func sqlgenAccountUserExtended(_ *AccountUserExtended, _ *AccountUser, as sq.AS, t0 sq.JOIN_TYPE, _ *Account, a0 sq.AS, c0 string, t1 sq.JOIN_TYPE, _ *User, a1 sq.AS, c1 string) bool {
	__sqlAccountUserExtended_JoinTypes = []sq.JOIN_TYPE{t0, t1}
	__sqlAccountUserExtended_As = as
	__sqlAccountUserExtended_JoinAs = []sq.AS{a0, a1}
	__sqlAccountUserExtended_JoinConds = []string{c0, c1}
	return true
}

type AccountUserExtendeds []*AccountUserExtended

var __sqlAccountUserExtended_JoinTypes []sq.JOIN_TYPE
var __sqlAccountUserExtended_As sq.AS
var __sqlAccountUserExtended_JoinAs []sq.AS
var __sqlAccountUserExtended_JoinConds []string

func (m *AccountUserExtended) SQLTableName() string  { return "account_user" }
func (m *AccountUserExtendeds) SQLTableName() string { return "account_user" }

func (m *AccountUserExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *AccountUserExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(AccountUserExtendeds, 0, 128)
	for rows.Next() {
		m := new(AccountUserExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *AccountUserExtended) SQLSelect(w SQLWriter) error {
	(*AccountUserExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*AccountUserExtended)(nil).__sqlJoin(w, __sqlAccountUserExtended_JoinTypes)
	return nil
}

func (m *AccountUserExtendeds) SQLSelect(w SQLWriter) error {
	return (*AccountUserExtended)(nil).SQLSelect(w)
}

func (m *AccountUserExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlAccountUserExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *AccountUserExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*AccountUserExtended)(nil).SQLJoin(w, types)
}

func (m *AccountUserExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlAccountUserExtended_As), (*AccountUser)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlAccountUserExtended_JoinAs[0]), (*Account)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlAccountUserExtended_JoinAs[1]), (*User)(nil).SQLListCols())
}

func (m *AccountUserExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 2 {
		panic("common/sql: expect 2 types to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("account_user")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlAccountUserExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Account)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlAccountUserExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlAccountUserExtended_JoinConds[0])
	w.WriteByte(' ')
	w.WriteRawString(string(types[1]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*User)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlAccountUserExtended_JoinAs[1]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlAccountUserExtended_JoinConds[1])
}

func (m *AccountUserExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.AccountUser = new(AccountUser)
	args = append(args, m.AccountUser.SQLScanArgs(opts)...)
	m.Account = new(Account)
	args = append(args, m.Account.SQLScanArgs(opts)...)
	m.User = new(User)
	args = append(args, m.User.SQLScanArgs(opts)...)

	return args
}

// *AccountUserDelete is a substruct of *AccountUser
func substructAccountUserDelete(_ *AccountUserDelete, _ *AccountUser) bool { return true }

func AccountUserDeletesFromAccountUsers(ps []*AccountUser) []*AccountUserDelete {
	ss := make([]*AccountUserDelete, len(ps))
	for i, p := range ps {
		ss[i] = NewAccountUserDeleteFromAccountUser(p)
	}
	return ss
}

func AccountUserDeletesToAccountUsers(ss []*AccountUserDelete) []*AccountUser {
	ps := make([]*AccountUser, len(ss))
	for i, s := range ss {
		ps[i] = s.ToAccountUser()
	}
	return ps
}

func NewAccountUserDeleteFromAccountUser(sp *AccountUser) *AccountUserDelete {
	if sp == nil {
		return nil
	}
	s := new(AccountUserDelete)
	s.CopyFrom(sp)
	return s
}

func (s *AccountUserDelete) ToAccountUser() *AccountUser {
	if s == nil {
		return nil
	}
	sp := new(AccountUser)
	s.AssignTo(sp)
	return sp
}

func (s *AccountUserDelete) CopyFrom(sp *AccountUser) {
	s.DeletedAt = sp.DeletedAt
}

func (s *AccountUserDelete) AssignTo(sp *AccountUser) {
	sp.DeletedAt = s.DeletedAt
}

// Type AccountUserDelete represents table account_user
func sqlgenAccountUserDelete(_ *AccountUserDelete, _ *AccountUser) bool { return true }

type AccountUserDeletes []*AccountUserDelete

const __sqlAccountUserDelete_Table = "account_user"
const __sqlAccountUserDelete_ListCols = "\"deleted_at\""
const __sqlAccountUserDelete_Insert = "INSERT INTO \"account_user\" (" + __sqlAccountUserDelete_ListCols + ") VALUES"
const __sqlAccountUserDelete_Select = "SELECT " + __sqlAccountUserDelete_ListCols + " FROM \"account_user\""
const __sqlAccountUserDelete_Select_history = "SELECT " + __sqlAccountUserDelete_ListCols + " FROM history.\"account_user\""
const __sqlAccountUserDelete_UpdateAll = "UPDATE \"account_user\" SET (" + __sqlAccountUserDelete_ListCols + ")"

func (m *AccountUserDelete) SQLTableName() string  { return "account_user" }
func (m *AccountUserDeletes) SQLTableName() string { return "account_user" }
func (m *AccountUserDelete) SQLListCols() string   { return __sqlAccountUserDelete_ListCols }

func (m *AccountUserDelete) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		core.Time(m.DeletedAt),
	}
}

func (m *AccountUserDelete) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *AccountUserDelete) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *AccountUserDeletes) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(AccountUserDeletes, 0, 128)
	for rows.Next() {
		m := new(AccountUserDelete)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *AccountUserDelete) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountUserDelete_Select)
	return nil
}

func (_ *AccountUserDeletes) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountUserDelete_Select)
	return nil
}

func (m *AccountUserDelete) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountUserDelete_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(1)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms AccountUserDeletes) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountUserDelete_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(1)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *AccountUserDelete) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("account_user")
	w.WriteRawString(" SET ")
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *AccountUserDelete) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountUserDelete_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(1)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type AccountUserDeleteHistory map[string]interface{}
type AccountUserDeleteHistories []map[string]interface{}

func (m *AccountUserDeleteHistory) SQLTableName() string  { return "history.\"account_user\"" }
func (m AccountUserDeleteHistories) SQLTableName() string { return "history.\"account_user\"" }

func (m *AccountUserDeleteHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountUserDelete_Select_history)
	return nil
}

func (m AccountUserDeleteHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAccountUserDelete_Select_history)
	return nil
}

func (m AccountUserDeleteHistory) DeletedAt() core.Interface { return core.Interface{m["deleted_at"]} }

func (m *AccountUserDeleteHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 1)
	args := make([]interface{}, 1)
	for i := 0; i < 1; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(AccountUserDeleteHistory, 1)
	res["deleted_at"] = data[0]
	*m = res
	return nil
}

func (ms *AccountUserDeleteHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 1)
	args := make([]interface{}, 1)
	for i := 0; i < 1; i++ {
		args[i] = &data[i]
	}
	res := make(AccountUserDeleteHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(AccountUserDeleteHistory)
		m["deleted_at"] = data[0]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type UserAuth represents table user_auth
func sqlgenUserAuth(_ *UserAuth) bool { return true }

type UserAuths []*UserAuth

const __sqlUserAuth_Table = "user_auth"
const __sqlUserAuth_ListCols = "\"user_id\",\"auth_type\",\"auth_key\",\"created_at\",\"updated_at\""
const __sqlUserAuth_Insert = "INSERT INTO \"user_auth\" (" + __sqlUserAuth_ListCols + ") VALUES"
const __sqlUserAuth_Select = "SELECT " + __sqlUserAuth_ListCols + " FROM \"user_auth\""
const __sqlUserAuth_Select_history = "SELECT " + __sqlUserAuth_ListCols + " FROM history.\"user_auth\""
const __sqlUserAuth_UpdateAll = "UPDATE \"user_auth\" SET (" + __sqlUserAuth_ListCols + ")"

func (m *UserAuth) SQLTableName() string  { return "user_auth" }
func (m *UserAuths) SQLTableName() string { return "user_auth" }
func (m *UserAuth) SQLListCols() string   { return __sqlUserAuth_ListCols }

func (m *UserAuth) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.UserID),
		core.String(m.AuthType),
		core.String(m.AuthKey),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *UserAuth) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.UserID),
		(*core.String)(&m.AuthType),
		(*core.String)(&m.AuthKey),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *UserAuth) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *UserAuths) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(UserAuths, 0, 128)
	for rows.Next() {
		m := new(UserAuth)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *UserAuth) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserAuth_Select)
	return nil
}

func (_ *UserAuths) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserAuth_Select)
	return nil
}

func (m *UserAuth) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUserAuth_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(5)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms UserAuths) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUserAuth_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(5)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *UserAuth) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("user_auth")
	w.WriteRawString(" SET ")
	if m.UserID != 0 {
		flag = true
		w.WriteName("user_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UserID)
	}
	if m.AuthType != "" {
		flag = true
		w.WriteName("auth_type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AuthType)
	}
	if m.AuthKey != "" {
		flag = true
		w.WriteName("auth_key")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AuthKey)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *UserAuth) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlUserAuth_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(5)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type UserAuthHistory map[string]interface{}
type UserAuthHistories []map[string]interface{}

func (m *UserAuthHistory) SQLTableName() string  { return "history.\"user_auth\"" }
func (m UserAuthHistories) SQLTableName() string { return "history.\"user_auth\"" }

func (m *UserAuthHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserAuth_Select_history)
	return nil
}

func (m UserAuthHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserAuth_Select_history)
	return nil
}

func (m UserAuthHistory) UserID() core.Interface    { return core.Interface{m["user_id"]} }
func (m UserAuthHistory) AuthType() core.Interface  { return core.Interface{m["auth_type"]} }
func (m UserAuthHistory) AuthKey() core.Interface   { return core.Interface{m["auth_key"]} }
func (m UserAuthHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m UserAuthHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *UserAuthHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 5)
	args := make([]interface{}, 5)
	for i := 0; i < 5; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(UserAuthHistory, 5)
	res["user_id"] = data[0]
	res["auth_type"] = data[1]
	res["auth_key"] = data[2]
	res["created_at"] = data[3]
	res["updated_at"] = data[4]
	*m = res
	return nil
}

func (ms *UserAuthHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 5)
	args := make([]interface{}, 5)
	for i := 0; i < 5; i++ {
		args[i] = &data[i]
	}
	res := make(UserAuthHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(UserAuthHistory)
		m["user_id"] = data[0]
		m["auth_type"] = data[1]
		m["auth_key"] = data[2]
		m["created_at"] = data[3]
		m["updated_at"] = data[4]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type UserInternal represents table user_internal
func sqlgenUserInternal(_ *UserInternal) bool { return true }

type UserInternals []*UserInternal

const __sqlUserInternal_Table = "user_internal"
const __sqlUserInternal_ListCols = "\"id\",\"hashpwd\",\"updated_at\""
const __sqlUserInternal_Insert = "INSERT INTO \"user_internal\" (" + __sqlUserInternal_ListCols + ") VALUES"
const __sqlUserInternal_Select = "SELECT " + __sqlUserInternal_ListCols + " FROM \"user_internal\""
const __sqlUserInternal_Select_history = "SELECT " + __sqlUserInternal_ListCols + " FROM history.\"user_internal\""
const __sqlUserInternal_UpdateAll = "UPDATE \"user_internal\" SET (" + __sqlUserInternal_ListCols + ")"

func (m *UserInternal) SQLTableName() string  { return "user_internal" }
func (m *UserInternals) SQLTableName() string { return "user_internal" }
func (m *UserInternal) SQLListCols() string   { return __sqlUserInternal_ListCols }

func (m *UserInternal) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.String(m.Hashpwd),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *UserInternal) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.String)(&m.Hashpwd),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *UserInternal) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *UserInternals) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(UserInternals, 0, 128)
	for rows.Next() {
		m := new(UserInternal)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *UserInternal) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserInternal_Select)
	return nil
}

func (_ *UserInternals) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserInternal_Select)
	return nil
}

func (m *UserInternal) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUserInternal_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(3)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms UserInternals) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlUserInternal_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(3)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *UserInternal) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("user_internal")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Hashpwd != "" {
		flag = true
		w.WriteName("hashpwd")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Hashpwd)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *UserInternal) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlUserInternal_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(3)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type UserInternalHistory map[string]interface{}
type UserInternalHistories []map[string]interface{}

func (m *UserInternalHistory) SQLTableName() string  { return "history.\"user_internal\"" }
func (m UserInternalHistories) SQLTableName() string { return "history.\"user_internal\"" }

func (m *UserInternalHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserInternal_Select_history)
	return nil
}

func (m UserInternalHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlUserInternal_Select_history)
	return nil
}

func (m UserInternalHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m UserInternalHistory) Hashpwd() core.Interface   { return core.Interface{m["hashpwd"]} }
func (m UserInternalHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *UserInternalHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 3)
	args := make([]interface{}, 3)
	for i := 0; i < 3; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(UserInternalHistory, 3)
	res["id"] = data[0]
	res["hashpwd"] = data[1]
	res["updated_at"] = data[2]
	*m = res
	return nil
}

func (ms *UserInternalHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 3)
	args := make([]interface{}, 3)
	for i := 0; i < 3; i++ {
		args[i] = &data[i]
	}
	res := make(UserInternalHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(UserInternalHistory)
		m["id"] = data[0]
		m["hashpwd"] = data[1]
		m["updated_at"] = data[2]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type Address represents table address
func sqlgenAddress(_ *Address) bool { return true }

type Addresses []*Address

const __sqlAddress_Table = "address"
const __sqlAddress_ListCols = "\"id\",\"full_name\",\"first_name\",\"last_name\",\"phone\",\"position\",\"email\",\"country\",\"city\",\"province\",\"district\",\"ward\",\"zip\",\"district_code\",\"province_code\",\"ward_code\",\"company\",\"address1\",\"address2\",\"type\",\"account_id\",\"notes\",\"created_at\",\"updated_at\""
const __sqlAddress_Insert = "INSERT INTO \"address\" (" + __sqlAddress_ListCols + ") VALUES"
const __sqlAddress_Select = "SELECT " + __sqlAddress_ListCols + " FROM \"address\""
const __sqlAddress_Select_history = "SELECT " + __sqlAddress_ListCols + " FROM history.\"address\""
const __sqlAddress_UpdateAll = "UPDATE \"address\" SET (" + __sqlAddress_ListCols + ")"

func (m *Address) SQLTableName() string   { return "address" }
func (m *Addresses) SQLTableName() string { return "address" }
func (m *Address) SQLListCols() string    { return __sqlAddress_ListCols }

func (m *Address) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.String(m.FullName),
		core.String(m.FirstName),
		core.String(m.LastName),
		core.String(m.Phone),
		core.String(m.Position),
		core.String(m.Email),
		core.String(m.Country),
		core.String(m.City),
		core.String(m.Province),
		core.String(m.District),
		core.String(m.Ward),
		core.String(m.Zip),
		core.String(m.DistrictCode),
		core.String(m.ProvinceCode),
		core.String(m.WardCode),
		core.String(m.Company),
		core.String(m.Address1),
		core.String(m.Address2),
		core.String(m.Type),
		core.Int64(m.AccountID),
		core.JSON{m.Notes},
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *Address) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.String)(&m.FullName),
		(*core.String)(&m.FirstName),
		(*core.String)(&m.LastName),
		(*core.String)(&m.Phone),
		(*core.String)(&m.Position),
		(*core.String)(&m.Email),
		(*core.String)(&m.Country),
		(*core.String)(&m.City),
		(*core.String)(&m.Province),
		(*core.String)(&m.District),
		(*core.String)(&m.Ward),
		(*core.String)(&m.Zip),
		(*core.String)(&m.DistrictCode),
		(*core.String)(&m.ProvinceCode),
		(*core.String)(&m.WardCode),
		(*core.String)(&m.Company),
		(*core.String)(&m.Address1),
		(*core.String)(&m.Address2),
		(*core.String)(&m.Type),
		(*core.Int64)(&m.AccountID),
		core.JSON{&m.Notes},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *Address) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Addresses) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Addresses, 0, 128)
	for rows.Next() {
		m := new(Address)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Address) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAddress_Select)
	return nil
}

func (_ *Addresses) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAddress_Select)
	return nil
}

func (m *Address) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlAddress_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(24)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Addresses) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlAddress_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(24)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Address) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("address")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.FullName != "" {
		flag = true
		w.WriteName("full_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FullName)
	}
	if m.FirstName != "" {
		flag = true
		w.WriteName("first_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FirstName)
	}
	if m.LastName != "" {
		flag = true
		w.WriteName("last_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.LastName)
	}
	if m.Phone != "" {
		flag = true
		w.WriteName("phone")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Phone)
	}
	if m.Position != "" {
		flag = true
		w.WriteName("position")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Position)
	}
	if m.Email != "" {
		flag = true
		w.WriteName("email")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Email)
	}
	if m.Country != "" {
		flag = true
		w.WriteName("country")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Country)
	}
	if m.City != "" {
		flag = true
		w.WriteName("city")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.City)
	}
	if m.Province != "" {
		flag = true
		w.WriteName("province")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Province)
	}
	if m.District != "" {
		flag = true
		w.WriteName("district")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.District)
	}
	if m.Ward != "" {
		flag = true
		w.WriteName("ward")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Ward)
	}
	if m.Zip != "" {
		flag = true
		w.WriteName("zip")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Zip)
	}
	if m.DistrictCode != "" {
		flag = true
		w.WriteName("district_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DistrictCode)
	}
	if m.ProvinceCode != "" {
		flag = true
		w.WriteName("province_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProvinceCode)
	}
	if m.WardCode != "" {
		flag = true
		w.WriteName("ward_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WardCode)
	}
	if m.Company != "" {
		flag = true
		w.WriteName("company")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Company)
	}
	if m.Address1 != "" {
		flag = true
		w.WriteName("address1")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Address1)
	}
	if m.Address2 != "" {
		flag = true
		w.WriteName("address2")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Address2)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if m.AccountID != 0 {
		flag = true
		w.WriteName("account_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccountID)
	}
	if m.Notes != nil {
		flag = true
		w.WriteName("notes")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Notes})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Address) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlAddress_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(24)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type AddressHistory map[string]interface{}
type AddressHistories []map[string]interface{}

func (m *AddressHistory) SQLTableName() string  { return "history.\"address\"" }
func (m AddressHistories) SQLTableName() string { return "history.\"address\"" }

func (m *AddressHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAddress_Select_history)
	return nil
}

func (m AddressHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAddress_Select_history)
	return nil
}

func (m AddressHistory) ID() core.Interface           { return core.Interface{m["id"]} }
func (m AddressHistory) FullName() core.Interface     { return core.Interface{m["full_name"]} }
func (m AddressHistory) FirstName() core.Interface    { return core.Interface{m["first_name"]} }
func (m AddressHistory) LastName() core.Interface     { return core.Interface{m["last_name"]} }
func (m AddressHistory) Phone() core.Interface        { return core.Interface{m["phone"]} }
func (m AddressHistory) Position() core.Interface     { return core.Interface{m["position"]} }
func (m AddressHistory) Email() core.Interface        { return core.Interface{m["email"]} }
func (m AddressHistory) Country() core.Interface      { return core.Interface{m["country"]} }
func (m AddressHistory) City() core.Interface         { return core.Interface{m["city"]} }
func (m AddressHistory) Province() core.Interface     { return core.Interface{m["province"]} }
func (m AddressHistory) District() core.Interface     { return core.Interface{m["district"]} }
func (m AddressHistory) Ward() core.Interface         { return core.Interface{m["ward"]} }
func (m AddressHistory) Zip() core.Interface          { return core.Interface{m["zip"]} }
func (m AddressHistory) DistrictCode() core.Interface { return core.Interface{m["district_code"]} }
func (m AddressHistory) ProvinceCode() core.Interface { return core.Interface{m["province_code"]} }
func (m AddressHistory) WardCode() core.Interface     { return core.Interface{m["ward_code"]} }
func (m AddressHistory) Company() core.Interface      { return core.Interface{m["company"]} }
func (m AddressHistory) Address1() core.Interface     { return core.Interface{m["address1"]} }
func (m AddressHistory) Address2() core.Interface     { return core.Interface{m["address2"]} }
func (m AddressHistory) Type() core.Interface         { return core.Interface{m["type"]} }
func (m AddressHistory) AccountID() core.Interface    { return core.Interface{m["account_id"]} }
func (m AddressHistory) Notes() core.Interface        { return core.Interface{m["notes"]} }
func (m AddressHistory) CreatedAt() core.Interface    { return core.Interface{m["created_at"]} }
func (m AddressHistory) UpdatedAt() core.Interface    { return core.Interface{m["updated_at"]} }

func (m *AddressHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 24)
	args := make([]interface{}, 24)
	for i := 0; i < 24; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(AddressHistory, 24)
	res["id"] = data[0]
	res["full_name"] = data[1]
	res["first_name"] = data[2]
	res["last_name"] = data[3]
	res["phone"] = data[4]
	res["position"] = data[5]
	res["email"] = data[6]
	res["country"] = data[7]
	res["city"] = data[8]
	res["province"] = data[9]
	res["district"] = data[10]
	res["ward"] = data[11]
	res["zip"] = data[12]
	res["district_code"] = data[13]
	res["province_code"] = data[14]
	res["ward_code"] = data[15]
	res["company"] = data[16]
	res["address1"] = data[17]
	res["address2"] = data[18]
	res["type"] = data[19]
	res["account_id"] = data[20]
	res["notes"] = data[21]
	res["created_at"] = data[22]
	res["updated_at"] = data[23]
	*m = res
	return nil
}

func (ms *AddressHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 24)
	args := make([]interface{}, 24)
	for i := 0; i < 24; i++ {
		args[i] = &data[i]
	}
	res := make(AddressHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(AddressHistory)
		m["id"] = data[0]
		m["full_name"] = data[1]
		m["first_name"] = data[2]
		m["last_name"] = data[3]
		m["phone"] = data[4]
		m["position"] = data[5]
		m["email"] = data[6]
		m["country"] = data[7]
		m["city"] = data[8]
		m["province"] = data[9]
		m["district"] = data[10]
		m["ward"] = data[11]
		m["zip"] = data[12]
		m["district_code"] = data[13]
		m["province_code"] = data[14]
		m["ward_code"] = data[15]
		m["company"] = data[16]
		m["address1"] = data[17]
		m["address2"] = data[18]
		m["type"] = data[19]
		m["account_id"] = data[20]
		m["notes"] = data[21]
		m["created_at"] = data[22]
		m["updated_at"] = data[23]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type Code represents table code
func sqlgenCode(_ *Code) bool { return true }

type Codes []*Code

const __sqlCode_Table = "code"
const __sqlCode_ListCols = "\"code\",\"type\",\"created_at\""
const __sqlCode_Insert = "INSERT INTO \"code\" (" + __sqlCode_ListCols + ") VALUES"
const __sqlCode_Select = "SELECT " + __sqlCode_ListCols + " FROM \"code\""
const __sqlCode_Select_history = "SELECT " + __sqlCode_ListCols + " FROM history.\"code\""
const __sqlCode_UpdateAll = "UPDATE \"code\" SET (" + __sqlCode_ListCols + ")"

func (m *Code) SQLTableName() string  { return "code" }
func (m *Codes) SQLTableName() string { return "code" }
func (m *Code) SQLListCols() string   { return __sqlCode_ListCols }

func (m *Code) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.String(m.Code),
		core.String(m.Type),
		core.Now(m.CreatedAt, now, create),
	}
}

func (m *Code) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.String)(&m.Code),
		(*core.String)(&m.Type),
		(*core.Time)(&m.CreatedAt),
	}
}

func (m *Code) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Codes) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Codes, 0, 128)
	for rows.Next() {
		m := new(Code)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Code) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCode_Select)
	return nil
}

func (_ *Codes) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCode_Select)
	return nil
}

func (m *Code) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlCode_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(3)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Codes) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlCode_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(3)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Code) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("code")
	w.WriteRawString(" SET ")
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(string(m.Type))
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Code) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlCode_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(3)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type CodeHistory map[string]interface{}
type CodeHistories []map[string]interface{}

func (m *CodeHistory) SQLTableName() string  { return "history.\"code\"" }
func (m CodeHistories) SQLTableName() string { return "history.\"code\"" }

func (m *CodeHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCode_Select_history)
	return nil
}

func (m CodeHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCode_Select_history)
	return nil
}

func (m CodeHistory) Code() core.Interface      { return core.Interface{m["code"]} }
func (m CodeHistory) Type() core.Interface      { return core.Interface{m["type"]} }
func (m CodeHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }

func (m *CodeHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 3)
	args := make([]interface{}, 3)
	for i := 0; i < 3; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(CodeHistory, 3)
	res["code"] = data[0]
	res["type"] = data[1]
	res["created_at"] = data[2]
	*m = res
	return nil
}

func (ms *CodeHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 3)
	args := make([]interface{}, 3)
	for i := 0; i < 3; i++ {
		args[i] = &data[i]
	}
	res := make(CodeHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(CodeHistory)
		m["code"] = data[0]
		m["type"] = data[1]
		m["created_at"] = data[2]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type Credit represents table credit
func sqlgenCredit(_ *Credit) bool { return true }

type Credits []*Credit

const __sqlCredit_Table = "credit"
const __sqlCredit_ListCols = "\"id\",\"amount\",\"shop_id\",\"supplier_id\",\"type\",\"status\",\"created_at\",\"updated_at\",\"paid_at\""
const __sqlCredit_Insert = "INSERT INTO \"credit\" (" + __sqlCredit_ListCols + ") VALUES"
const __sqlCredit_Select = "SELECT " + __sqlCredit_ListCols + " FROM \"credit\""
const __sqlCredit_Select_history = "SELECT " + __sqlCredit_ListCols + " FROM history.\"credit\""
const __sqlCredit_UpdateAll = "UPDATE \"credit\" SET (" + __sqlCredit_ListCols + ")"

func (m *Credit) SQLTableName() string  { return "credit" }
func (m *Credits) SQLTableName() string { return "credit" }
func (m *Credit) SQLListCols() string   { return __sqlCredit_ListCols }

func (m *Credit) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int(m.Amount),
		core.Int64(m.ShopID),
		core.Int64(m.SupplierID),
		core.String(m.Type),
		core.Int(m.Status),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.PaidAt),
	}
}

func (m *Credit) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int)(&m.Amount),
		(*core.Int64)(&m.ShopID),
		(*core.Int64)(&m.SupplierID),
		(*core.String)(&m.Type),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.PaidAt),
	}
}

func (m *Credit) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Credits) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Credits, 0, 128)
	for rows.Next() {
		m := new(Credit)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Credit) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCredit_Select)
	return nil
}

func (_ *Credits) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCredit_Select)
	return nil
}

func (m *Credit) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlCredit_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Credits) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlCredit_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(9)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Credit) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("credit")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Amount != 0 {
		flag = true
		w.WriteName("amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Amount)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.SupplierID != 0 {
		flag = true
		w.WriteName("supplier_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.SupplierID)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(int(m.Status))
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.PaidAt.IsZero() {
		flag = true
		w.WriteName("paid_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PaidAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Credit) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlCredit_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type CreditHistory map[string]interface{}
type CreditHistories []map[string]interface{}

func (m *CreditHistory) SQLTableName() string  { return "history.\"credit\"" }
func (m CreditHistories) SQLTableName() string { return "history.\"credit\"" }

func (m *CreditHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCredit_Select_history)
	return nil
}

func (m CreditHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCredit_Select_history)
	return nil
}

func (m CreditHistory) ID() core.Interface         { return core.Interface{m["id"]} }
func (m CreditHistory) Amount() core.Interface     { return core.Interface{m["amount"]} }
func (m CreditHistory) ShopID() core.Interface     { return core.Interface{m["shop_id"]} }
func (m CreditHistory) SupplierID() core.Interface { return core.Interface{m["supplier_id"]} }
func (m CreditHistory) Type() core.Interface       { return core.Interface{m["type"]} }
func (m CreditHistory) Status() core.Interface     { return core.Interface{m["status"]} }
func (m CreditHistory) CreatedAt() core.Interface  { return core.Interface{m["created_at"]} }
func (m CreditHistory) UpdatedAt() core.Interface  { return core.Interface{m["updated_at"]} }
func (m CreditHistory) PaidAt() core.Interface     { return core.Interface{m["paid_at"]} }

func (m *CreditHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(CreditHistory, 9)
	res["id"] = data[0]
	res["amount"] = data[1]
	res["shop_id"] = data[2]
	res["supplier_id"] = data[3]
	res["type"] = data[4]
	res["status"] = data[5]
	res["created_at"] = data[6]
	res["updated_at"] = data[7]
	res["paid_at"] = data[8]
	*m = res
	return nil
}

func (ms *CreditHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	res := make(CreditHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(CreditHistory)
		m["id"] = data[0]
		m["amount"] = data[1]
		m["shop_id"] = data[2]
		m["supplier_id"] = data[3]
		m["type"] = data[4]
		m["status"] = data[5]
		m["created_at"] = data[6]
		m["updated_at"] = data[7]
		m["paid_at"] = data[8]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type CreditExtended represents a join
func sqlgenCreditExtended(_ *CreditExtended, _ *Credit, as sq.AS, t0 sq.JOIN_TYPE, _ *Shop, a0 sq.AS, c0 string) bool {
	__sqlCreditExtended_JoinTypes = []sq.JOIN_TYPE{t0}
	__sqlCreditExtended_As = as
	__sqlCreditExtended_JoinAs = []sq.AS{a0}
	__sqlCreditExtended_JoinConds = []string{c0}
	return true
}

type CreditExtendeds []*CreditExtended

var __sqlCreditExtended_JoinTypes []sq.JOIN_TYPE
var __sqlCreditExtended_As sq.AS
var __sqlCreditExtended_JoinAs []sq.AS
var __sqlCreditExtended_JoinConds []string

func (m *CreditExtended) SQLTableName() string  { return "credit" }
func (m *CreditExtendeds) SQLTableName() string { return "credit" }

func (m *CreditExtended) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *CreditExtendeds) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(CreditExtendeds, 0, 128)
	for rows.Next() {
		m := new(CreditExtended)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (m *CreditExtended) SQLSelect(w SQLWriter) error {
	(*CreditExtended)(nil).__sqlSelect(w)
	w.WriteByte(' ')
	(*CreditExtended)(nil).__sqlJoin(w, __sqlCreditExtended_JoinTypes)
	return nil
}

func (m *CreditExtendeds) SQLSelect(w SQLWriter) error {
	return (*CreditExtended)(nil).SQLSelect(w)
}

func (m *CreditExtended) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	if len(types) == 0 {
		types = __sqlCreditExtended_JoinTypes
	}
	m.__sqlJoin(w, types)
	return nil
}

func (m *CreditExtendeds) SQLJoin(w SQLWriter, types []sq.JOIN_TYPE) error {
	return (*CreditExtended)(nil).SQLJoin(w, types)
}

func (m *CreditExtended) __sqlSelect(w SQLWriter) {
	w.WriteRawString("SELECT ")
	core.WriteCols(w, string(__sqlCreditExtended_As), (*Credit)(nil).SQLListCols())
	w.WriteByte(',')
	core.WriteCols(w, string(__sqlCreditExtended_JoinAs[0]), (*Shop)(nil).SQLListCols())
}

func (m *CreditExtended) __sqlJoin(w SQLWriter, types []sq.JOIN_TYPE) {
	if len(types) != 1 {
		panic("common/sql: expect 1 type to join")
	}
	w.WriteRawString("FROM ")
	w.WriteName("credit")
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlCreditExtended_As))
	w.WriteByte(' ')
	w.WriteRawString(string(types[0]))
	w.WriteRawString(" JOIN ")
	w.WriteName((*Shop)(nil).SQLTableName())
	w.WriteRawString(" AS ")
	w.WriteRawString(string(__sqlCreditExtended_JoinAs[0]))
	w.WriteRawString(" ON ")
	w.WriteQueryString(__sqlCreditExtended_JoinConds[0])
}

func (m *CreditExtended) SQLScanArgs(opts core.Opts) []interface{} {
	args := make([]interface{}, 0, 64) // TODO: pre-calculate length
	m.Credit = new(Credit)
	args = append(args, m.Credit.SQLScanArgs(opts)...)
	m.Shop = new(Shop)
	args = append(args, m.Shop.SQLScanArgs(opts)...)

	return args
}

// Type ShippingSource represents table shipping_source
func sqlgenShippingSource(_ *ShippingSource) bool { return true }

type ShippingSources []*ShippingSource

const __sqlShippingSource_Table = "shipping_source"
const __sqlShippingSource_ListCols = "\"id\",\"name\",\"username\",\"type\",\"created_at\",\"updated_at\""
const __sqlShippingSource_Insert = "INSERT INTO \"shipping_source\" (" + __sqlShippingSource_ListCols + ") VALUES"
const __sqlShippingSource_Select = "SELECT " + __sqlShippingSource_ListCols + " FROM \"shipping_source\""
const __sqlShippingSource_Select_history = "SELECT " + __sqlShippingSource_ListCols + " FROM history.\"shipping_source\""
const __sqlShippingSource_UpdateAll = "UPDATE \"shipping_source\" SET (" + __sqlShippingSource_ListCols + ")"

func (m *ShippingSource) SQLTableName() string  { return "shipping_source" }
func (m *ShippingSources) SQLTableName() string { return "shipping_source" }
func (m *ShippingSource) SQLListCols() string   { return __sqlShippingSource_ListCols }

func (m *ShippingSource) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.String(m.Name),
		core.String(m.Username),
		core.String(m.Type),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
	}
}

func (m *ShippingSource) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.String)(&m.Name),
		(*core.String)(&m.Username),
		(*core.String)(&m.Type),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
	}
}

func (m *ShippingSource) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShippingSources) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShippingSources, 0, 128)
	for rows.Next() {
		m := new(ShippingSource)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShippingSource) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShippingSource_Select)
	return nil
}

func (_ *ShippingSources) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShippingSource_Select)
	return nil
}

func (m *ShippingSource) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShippingSource_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShippingSources) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShippingSource_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(6)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShippingSource) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shipping_source")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Username != "" {
		flag = true
		w.WriteName("username")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Username)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShippingSource) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShippingSource_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShippingSourceHistory map[string]interface{}
type ShippingSourceHistories []map[string]interface{}

func (m *ShippingSourceHistory) SQLTableName() string  { return "history.\"shipping_source\"" }
func (m ShippingSourceHistories) SQLTableName() string { return "history.\"shipping_source\"" }

func (m *ShippingSourceHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShippingSource_Select_history)
	return nil
}

func (m ShippingSourceHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShippingSource_Select_history)
	return nil
}

func (m ShippingSourceHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m ShippingSourceHistory) Name() core.Interface      { return core.Interface{m["name"]} }
func (m ShippingSourceHistory) Username() core.Interface  { return core.Interface{m["username"]} }
func (m ShippingSourceHistory) Type() core.Interface      { return core.Interface{m["type"]} }
func (m ShippingSourceHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m ShippingSourceHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }

func (m *ShippingSourceHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShippingSourceHistory, 6)
	res["id"] = data[0]
	res["name"] = data[1]
	res["username"] = data[2]
	res["type"] = data[3]
	res["created_at"] = data[4]
	res["updated_at"] = data[5]
	*m = res
	return nil
}

func (ms *ShippingSourceHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	res := make(ShippingSourceHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShippingSourceHistory)
		m["id"] = data[0]
		m["name"] = data[1]
		m["username"] = data[2]
		m["type"] = data[3]
		m["created_at"] = data[4]
		m["updated_at"] = data[5]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type ShippingSourceInternal represents table shipping_source_internal
func sqlgenShippingSourceInternal(_ *ShippingSourceInternal) bool { return true }

type ShippingSourceInternals []*ShippingSourceInternal

const __sqlShippingSourceInternal_Table = "shipping_source_internal"
const __sqlShippingSourceInternal_ListCols = "\"id\",\"created_at\",\"updated_at\",\"last_sync_at\",\"access_token\",\"expires_at\",\"secret\""
const __sqlShippingSourceInternal_Insert = "INSERT INTO \"shipping_source_internal\" (" + __sqlShippingSourceInternal_ListCols + ") VALUES"
const __sqlShippingSourceInternal_Select = "SELECT " + __sqlShippingSourceInternal_ListCols + " FROM \"shipping_source_internal\""
const __sqlShippingSourceInternal_Select_history = "SELECT " + __sqlShippingSourceInternal_ListCols + " FROM history.\"shipping_source_internal\""
const __sqlShippingSourceInternal_UpdateAll = "UPDATE \"shipping_source_internal\" SET (" + __sqlShippingSourceInternal_ListCols + ")"

func (m *ShippingSourceInternal) SQLTableName() string  { return "shipping_source_internal" }
func (m *ShippingSourceInternals) SQLTableName() string { return "shipping_source_internal" }
func (m *ShippingSourceInternal) SQLListCols() string   { return __sqlShippingSourceInternal_ListCols }

func (m *ShippingSourceInternal) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.LastSyncAt),
		core.String(m.AccessToken),
		core.Time(m.ExpiresAt),
		core.JSON{m.Secret},
	}
}

func (m *ShippingSourceInternal) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.LastSyncAt),
		(*core.String)(&m.AccessToken),
		(*core.Time)(&m.ExpiresAt),
		core.JSON{&m.Secret},
	}
}

func (m *ShippingSourceInternal) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShippingSourceInternals) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShippingSourceInternals, 0, 128)
	for rows.Next() {
		m := new(ShippingSourceInternal)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShippingSourceInternal) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShippingSourceInternal_Select)
	return nil
}

func (_ *ShippingSourceInternals) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShippingSourceInternal_Select)
	return nil
}

func (m *ShippingSourceInternal) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShippingSourceInternal_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShippingSourceInternals) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShippingSourceInternal_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(7)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShippingSourceInternal) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shipping_source_internal")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.LastSyncAt.IsZero() {
		flag = true
		w.WriteName("last_sync_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.LastSyncAt)
	}
	if m.AccessToken != "" {
		flag = true
		w.WriteName("access_token")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccessToken)
	}
	if !m.ExpiresAt.IsZero() {
		flag = true
		w.WriteName("expires_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExpiresAt)
	}
	if m.Secret != nil {
		flag = true
		w.WriteName("secret")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Secret})
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShippingSourceInternal) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShippingSourceInternal_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(7)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShippingSourceInternalHistory map[string]interface{}
type ShippingSourceInternalHistories []map[string]interface{}

func (m *ShippingSourceInternalHistory) SQLTableName() string {
	return "history.\"shipping_source_internal\""
}
func (m ShippingSourceInternalHistories) SQLTableName() string {
	return "history.\"shipping_source_internal\""
}

func (m *ShippingSourceInternalHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShippingSourceInternal_Select_history)
	return nil
}

func (m ShippingSourceInternalHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShippingSourceInternal_Select_history)
	return nil
}

func (m ShippingSourceInternalHistory) ID() core.Interface { return core.Interface{m["id"]} }
func (m ShippingSourceInternalHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m ShippingSourceInternalHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}
func (m ShippingSourceInternalHistory) LastSyncAt() core.Interface {
	return core.Interface{m["last_sync_at"]}
}
func (m ShippingSourceInternalHistory) AccessToken() core.Interface {
	return core.Interface{m["access_token"]}
}
func (m ShippingSourceInternalHistory) ExpiresAt() core.Interface {
	return core.Interface{m["expires_at"]}
}
func (m ShippingSourceInternalHistory) Secret() core.Interface { return core.Interface{m["secret"]} }

func (m *ShippingSourceInternalHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShippingSourceInternalHistory, 7)
	res["id"] = data[0]
	res["created_at"] = data[1]
	res["updated_at"] = data[2]
	res["last_sync_at"] = data[3]
	res["access_token"] = data[4]
	res["expires_at"] = data[5]
	res["secret"] = data[6]
	*m = res
	return nil
}

func (ms *ShippingSourceInternalHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 7)
	args := make([]interface{}, 7)
	for i := 0; i < 7; i++ {
		args[i] = &data[i]
	}
	res := make(ShippingSourceInternalHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShippingSourceInternalHistory)
		m["id"] = data[0]
		m["created_at"] = data[1]
		m["updated_at"] = data[2]
		m["last_sync_at"] = data[3]
		m["access_token"] = data[4]
		m["expires_at"] = data[5]
		m["secret"] = data[6]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type Webhook represents table webhook
func sqlgenWebhook(_ *Webhook) bool { return true }

type Webhooks []*Webhook

const __sqlWebhook_Table = "webhook"
const __sqlWebhook_ListCols = "\"id\",\"account_id\",\"entities\",\"fields\",\"url\",\"metadata\",\"created_at\",\"updated_at\",\"deleted_at\""
const __sqlWebhook_Insert = "INSERT INTO \"webhook\" (" + __sqlWebhook_ListCols + ") VALUES"
const __sqlWebhook_Select = "SELECT " + __sqlWebhook_ListCols + " FROM \"webhook\""
const __sqlWebhook_Select_history = "SELECT " + __sqlWebhook_ListCols + " FROM history.\"webhook\""
const __sqlWebhook_UpdateAll = "UPDATE \"webhook\" SET (" + __sqlWebhook_ListCols + ")"

func (m *Webhook) SQLTableName() string  { return "webhook" }
func (m *Webhooks) SQLTableName() string { return "webhook" }
func (m *Webhook) SQLListCols() string   { return __sqlWebhook_ListCols }

func (m *Webhook) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.AccountID),
		core.Array{m.Entities, opts},
		core.Array{m.Fields, opts},
		core.String(m.URL),
		core.String(m.Metadata),
		core.Now(m.CreatedAt, now, create),
		core.Now(m.UpdatedAt, now, true),
		core.Time(m.DeletedAt),
	}
}

func (m *Webhook) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.AccountID),
		core.Array{&m.Entities, opts},
		core.Array{&m.Fields, opts},
		(*core.String)(&m.URL),
		(*core.String)(&m.Metadata),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.DeletedAt),
	}
}

func (m *Webhook) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Webhooks) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Webhooks, 0, 128)
	for rows.Next() {
		m := new(Webhook)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Webhook) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWebhook_Select)
	return nil
}

func (_ *Webhooks) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWebhook_Select)
	return nil
}

func (m *Webhook) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlWebhook_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Webhooks) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlWebhook_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(9)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Webhook) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("webhook")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.AccountID != 0 {
		flag = true
		w.WriteName("account_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccountID)
	}
	if m.Entities != nil {
		flag = true
		w.WriteName("entities")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.Entities, opts})
	}
	if m.Fields != nil {
		flag = true
		w.WriteName("fields")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.Fields, opts})
	}
	if m.URL != "" {
		flag = true
		w.WriteName("url")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.URL)
	}
	if m.Metadata != "" {
		flag = true
		w.WriteName("metadata")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Metadata)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Now(m.UpdatedAt, time.Now(), true))
	}
	if !m.DeletedAt.IsZero() {
		flag = true
		w.WriteName("deleted_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DeletedAt)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Webhook) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlWebhook_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type WebhookHistory map[string]interface{}
type WebhookHistories []map[string]interface{}

func (m *WebhookHistory) SQLTableName() string  { return "history.\"webhook\"" }
func (m WebhookHistories) SQLTableName() string { return "history.\"webhook\"" }

func (m *WebhookHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWebhook_Select_history)
	return nil
}

func (m WebhookHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlWebhook_Select_history)
	return nil
}

func (m WebhookHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m WebhookHistory) AccountID() core.Interface { return core.Interface{m["account_id"]} }
func (m WebhookHistory) Entities() core.Interface  { return core.Interface{m["entities"]} }
func (m WebhookHistory) Fields() core.Interface    { return core.Interface{m["fields"]} }
func (m WebhookHistory) URL() core.Interface       { return core.Interface{m["url"]} }
func (m WebhookHistory) Metadata() core.Interface  { return core.Interface{m["metadata"]} }
func (m WebhookHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m WebhookHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }
func (m WebhookHistory) DeletedAt() core.Interface { return core.Interface{m["deleted_at"]} }

func (m *WebhookHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(WebhookHistory, 9)
	res["id"] = data[0]
	res["account_id"] = data[1]
	res["entities"] = data[2]
	res["fields"] = data[3]
	res["url"] = data[4]
	res["metadata"] = data[5]
	res["created_at"] = data[6]
	res["updated_at"] = data[7]
	res["deleted_at"] = data[8]
	*m = res
	return nil
}

func (ms *WebhookHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	res := make(WebhookHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(WebhookHistory)
		m["id"] = data[0]
		m["account_id"] = data[1]
		m["entities"] = data[2]
		m["fields"] = data[3]
		m["url"] = data[4]
		m["metadata"] = data[5]
		m["created_at"] = data[6]
		m["updated_at"] = data[7]
		m["deleted_at"] = data[8]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

// Type Callback represents table callback
func sqlgenChangesData(_ *Callback) bool { return true }

type Callbacks []*Callback

const __sqlCallback_Table = "callback"
const __sqlCallback_ListCols = "\"id\",\"webhook_id\",\"account_id\",\"created_at\",\"changes\",\"result\""
const __sqlCallback_Insert = "INSERT INTO \"callback\" (" + __sqlCallback_ListCols + ") VALUES"
const __sqlCallback_Select = "SELECT " + __sqlCallback_ListCols + " FROM \"callback\""
const __sqlCallback_Select_history = "SELECT " + __sqlCallback_ListCols + " FROM history.\"callback\""
const __sqlCallback_UpdateAll = "UPDATE \"callback\" SET (" + __sqlCallback_ListCols + ")"

func (m *Callback) SQLTableName() string  { return "callback" }
func (m *Callbacks) SQLTableName() string { return "callback" }
func (m *Callback) SQLListCols() string   { return __sqlCallback_ListCols }

func (m *Callback) SQLArgs(opts core.Opts, create bool) []interface{} {
	now := time.Now()
	return []interface{}{
		core.Int64(m.ID),
		core.Int64(m.WebhookID),
		core.Int64(m.AccountID),
		core.Now(m.CreatedAt, now, create),
		core.JSON{m.Changes},
		core.JSON{m.Result},
	}
}

func (m *Callback) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		(*core.Int64)(&m.ID),
		(*core.Int64)(&m.WebhookID),
		(*core.Int64)(&m.AccountID),
		(*core.Time)(&m.CreatedAt),
		core.JSON{&m.Changes},
		core.JSON{&m.Result},
	}
}

func (m *Callback) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Callbacks) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Callbacks, 0, 128)
	for rows.Next() {
		m := new(Callback)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Callback) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCallback_Select)
	return nil
}

func (_ *Callbacks) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCallback_Select)
	return nil
}

func (m *Callback) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlCallback_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Callbacks) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlCallback_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(6)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Callback) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("callback")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.WebhookID != 0 {
		flag = true
		w.WriteName("webhook_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WebhookID)
	}
	if m.AccountID != 0 {
		flag = true
		w.WriteName("account_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccountID)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if m.Changes != nil {
		flag = true
		w.WriteName("changes")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Changes})
	}
	if m.Result != nil {
		flag = true
		w.WriteName("result")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Result})
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Callback) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlCallback_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(6)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type CallbackHistory map[string]interface{}
type CallbackHistories []map[string]interface{}

func (m *CallbackHistory) SQLTableName() string  { return "history.\"callback\"" }
func (m CallbackHistories) SQLTableName() string { return "history.\"callback\"" }

func (m *CallbackHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCallback_Select_history)
	return nil
}

func (m CallbackHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlCallback_Select_history)
	return nil
}

func (m CallbackHistory) ID() core.Interface        { return core.Interface{m["id"]} }
func (m CallbackHistory) WebhookID() core.Interface { return core.Interface{m["webhook_id"]} }
func (m CallbackHistory) AccountID() core.Interface { return core.Interface{m["account_id"]} }
func (m CallbackHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m CallbackHistory) Changes() core.Interface   { return core.Interface{m["changes"]} }
func (m CallbackHistory) Result() core.Interface    { return core.Interface{m["result"]} }

func (m *CallbackHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(CallbackHistory, 6)
	res["id"] = data[0]
	res["webhook_id"] = data[1]
	res["account_id"] = data[2]
	res["created_at"] = data[3]
	res["changes"] = data[4]
	res["result"] = data[5]
	*m = res
	return nil
}

func (ms *CallbackHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 6)
	args := make([]interface{}, 6)
	for i := 0; i < 6; i++ {
		args[i] = &data[i]
	}
	res := make(CallbackHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(CallbackHistory)
		m["id"] = data[0]
		m["webhook_id"] = data[1]
		m["account_id"] = data[2]
		m["created_at"] = data[3]
		m["changes"] = data[4]
		m["result"] = data[5]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
