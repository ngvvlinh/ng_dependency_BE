// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package shop

import (
	"github.com/google/wire"
	"o.o/api/external/payment/manager"
	"o.o/api/main/address"
	"o.o/api/main/catalog"
	"o.o/api/main/connectioning"
	"o.o/api/main/identity"
	"o.o/api/main/inventory"
	"o.o/api/main/ledgering"
	"o.o/api/main/location"
	"o.o/api/main/ordering"
	"o.o/api/main/purchaseorder"
	"o.o/api/main/purchaserefund"
	"o.o/api/main/receipting"
	"o.o/api/main/refund"
	"o.o/api/main/shipnow"
	"o.o/api/main/shipping"
	"o.o/api/main/stocktaking"
	"o.o/api/shopping/addressing"
	"o.o/api/shopping/carrying"
	"o.o/api/shopping/customering"
	"o.o/api/shopping/suppliering"
	"o.o/api/shopping/tradering"
	"o.o/api/subscripting/subscription"
	"o.o/api/summary"
	"o.o/api/webserver"
	"o.o/backend/com/main/shipping/carrier"
	"o.o/backend/pkg/common/apifw/service"
	"o.o/backend/pkg/common/redis"
	"o.o/backend/pkg/etop/logic/shipping_provider"
	"o.o/capi"
)

// Injectors from wire.go:

func BuildServers(locationQ location.QueryBus, catalogQueryBus catalog.QueryBus, catalogCommandBus catalog.CommandBus, shipnow2 shipnow.CommandBus, shipnowQS shipnow.QueryBus, identity2 identity.CommandBus, identityQS identity.QueryBus, addressQS address.QueryBus, providerManager *shipping_provider.ProviderManager, customerA customering.CommandBus, customerQS customering.QueryBus, traderAddressA addressing.CommandBus, traderAddressQ addressing.QueryBus, orderA ordering.CommandBus, orderQ ordering.QueryBus, paymentManager manager.CommandBus, supplierA suppliering.CommandBus, supplierQ suppliering.QueryBus, carrierA carrying.CommandBus, carrierQ carrying.QueryBus, traderQ tradering.QueryBus, eventB capi.EventBus, receiptA receipting.CommandBus, receiptQS receipting.QueryBus, sd cmService.Shutdowner, rd redis.Store, inventoryA inventory.CommandBus, inventoryQ inventory.QueryBus, ledgerA ledgering.CommandBus, ledgerQ ledgering.QueryBus, purchaseOrderA purchaseorder.CommandBus, purchaseOrderQ purchaseorder.QueryBus, summary2 summary.QueryBus, StocktakeQ stocktaking.QueryBus, StocktakeA stocktaking.CommandBus, shipmentM *carrier.ShipmentManager, shippingA shipping.CommandBus, refundA refund.CommandBus, refundQ refund.QueryBus, purchaseRefundA purchaserefund.CommandBus, purchaseRefundQ purchaserefund.QueryBus, connectionQ connectioning.QueryBus, connectionA connectioning.CommandBus, shippingQ shipping.QueryBus, webserverA webserver.CommandBus, webserverQ webserver.QueryBus, subscriptionQ subscription.QueryBus) Servers {
	miscService := &MiscService{}
	brandService := &BrandService{}
	inventoryService := &InventoryService{}
	accountService := &AccountService{}
	collectionService := &CollectionService{}
	customerService := &CustomerService{}
	customerGroupService := &CustomerGroupService{}
	productService := &ProductService{}
	categoryService := &CategoryService{}
	productSourceService := &ProductSourceService{}
	orderService := &OrderService{}
	fulfillmentService := &FulfillmentService{}
	shipnowService := &ShipnowService{}
	historyService := &HistoryService{}
	moneyTransactionService := &MoneyTransactionService{}
	summaryService := &SummaryService{}
	exportService := &ExportService{}
	notificationService := &NotificationService{}
	authorizeService := &AuthorizeService{}
	tradingService := &TradingService{}
	paymentService := &PaymentService{}
	receiptService := &ReceiptService{}
	supplierService := &SupplierService{}
	carrierService := &CarrierService{}
	ledgerService := &LedgerService{}
	purchaseOrderService := &PurchaseOrderService{}
	stocktakeService := &StocktakeService{}
	shipmentService := &ShipmentService{}
	connectionService := &ConnectionService{}
	refundService := &RefundService{}
	purchaseRefundService := &PurchaseRefundService{}
	webServerService := &WebServerService{}
	subscriptionService := &SubscriptionService{}
	servers := NewServers(rd, miscService, brandService, inventoryService, accountService, collectionService, customerService, customerGroupService, productService, categoryService, productSourceService, orderService, fulfillmentService, shipnowService, historyService, moneyTransactionService, summaryService, exportService, notificationService, authorizeService, tradingService, paymentService, receiptService, supplierService, carrierService, ledgerService, purchaseOrderService, stocktakeService, shipmentService, connectionService, refundService, purchaseRefundService, webServerService, subscriptionService)
	return servers
}

// wire.go:

var WireSet = wire.NewSet(wire.Struct(new(AccountService)), wire.Struct(new(AuthorizeService)), wire.Struct(new(BrandService)), wire.Struct(new(CarrierService)), wire.Struct(new(CategoryService)), wire.Struct(new(CollectionService)), wire.Struct(new(ConnectionService)), wire.Struct(new(CustomerGroupService)), wire.Struct(new(CustomerService)), wire.Struct(new(ExportService)), wire.Struct(new(FulfillmentService)), wire.Struct(new(HistoryService)), wire.Struct(new(InventoryService)), wire.Struct(new(LedgerService)), wire.Struct(new(MiscService)), wire.Struct(new(MoneyTransactionService)), wire.Struct(new(NotificationService)), wire.Struct(new(OrderService)), wire.Struct(new(PaymentService)), wire.Struct(new(ProductService)), wire.Struct(new(ProductSourceService)), wire.Struct(new(PurchaseOrderService)), wire.Struct(new(PurchaseRefundService)), wire.Struct(new(ReceiptService)), wire.Struct(new(RefundService)), wire.Struct(new(ShipmentService)), wire.Struct(new(ShipnowService)), wire.Struct(new(StocktakeService)), wire.Struct(new(SubscriptionService)), wire.Struct(new(SummaryService)), wire.Struct(new(SupplierService)), wire.Struct(new(TradingService)), wire.Struct(new(WebServerService)), NewServers)
