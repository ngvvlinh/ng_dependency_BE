// Generated by common/sql. DO NOT EDIT.

package sqlstore

import (
	"time"

	sq "etop.vn/backend/pkg/common/sql"
	m "etop.vn/backend/pkg/etop/model"
)

type ProductBrandFilters struct{ prefix string }

func NewProductBrandFilters(prefix string) ProductBrandFilters {
	return ProductBrandFilters{prefix}
}

func (ft ProductBrandFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ProductBrandFilters) Prefix() string {
	return ft.prefix
}

func (ft ProductBrandFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft ProductBrandFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft ProductBrandFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft ProductBrandFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft ProductBrandFilters) ByDescription(Description string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == "",
	}
}

func (ft ProductBrandFilters) ByDescriptionPtr(Description *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == nil,
		IsZero: Description != nil && (*Description) == "",
	}
}

func (ft ProductBrandFilters) ByPolicy(Policy string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "policy",
		Value:  Policy,
		IsNil:  Policy == "",
	}
}

func (ft ProductBrandFilters) ByPolicyPtr(Policy *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "policy",
		Value:  Policy,
		IsNil:  Policy == nil,
		IsZero: Policy != nil && (*Policy) == "",
	}
}

func (ft ProductBrandFilters) BySupplierID(SupplierID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == 0,
	}
}

func (ft ProductBrandFilters) BySupplierIDPtr(SupplierID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == nil,
		IsZero: SupplierID != nil && (*SupplierID) == 0,
	}
}

func (ft ProductBrandFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ProductBrandFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft ProductBrandFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft ProductBrandFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

type ImportAttemptFilters struct{ prefix string }

func NewImportAttemptFilters(prefix string) ImportAttemptFilters {
	return ImportAttemptFilters{prefix}
}

func (ft ImportAttemptFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ImportAttemptFilters) Prefix() string {
	return ft.prefix
}

func (ft ImportAttemptFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft ImportAttemptFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft ImportAttemptFilters) ByUserID(UserID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "user_id",
		Value:  UserID,
		IsNil:  UserID == 0,
	}
}

func (ft ImportAttemptFilters) ByUserIDPtr(UserID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "user_id",
		Value:  UserID,
		IsNil:  UserID == nil,
		IsZero: UserID != nil && (*UserID) == 0,
	}
}

func (ft ImportAttemptFilters) ByAccountID(AccountID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == 0,
	}
}

func (ft ImportAttemptFilters) ByAccountIDPtr(AccountID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == nil,
		IsZero: AccountID != nil && (*AccountID) == 0,
	}
}

func (ft ImportAttemptFilters) ByOriginalFile(OriginalFile string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "original_file",
		Value:  OriginalFile,
		IsNil:  OriginalFile == "",
	}
}

func (ft ImportAttemptFilters) ByOriginalFilePtr(OriginalFile *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "original_file",
		Value:  OriginalFile,
		IsNil:  OriginalFile == nil,
		IsZero: OriginalFile != nil && (*OriginalFile) == "",
	}
}

func (ft ImportAttemptFilters) ByStoredFile(StoredFile string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "stored_file",
		Value:  StoredFile,
		IsNil:  StoredFile == "",
	}
}

func (ft ImportAttemptFilters) ByStoredFilePtr(StoredFile *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "stored_file",
		Value:  StoredFile,
		IsNil:  StoredFile == nil,
		IsZero: StoredFile != nil && (*StoredFile) == "",
	}
}

func (ft ImportAttemptFilters) ByType(Type m.ImportType) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "type",
		Value:  Type,
		IsNil:  Type == "",
	}
}

func (ft ImportAttemptFilters) ByTypePtr(Type *m.ImportType) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "type",
		Value:  Type,
		IsNil:  Type == nil,
		IsZero: Type != nil && (*Type) == "",
	}
}

func (ft ImportAttemptFilters) ByNCreated(NCreated int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "n_created",
		Value:  NCreated,
		IsNil:  NCreated == 0,
	}
}

func (ft ImportAttemptFilters) ByNCreatedPtr(NCreated *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "n_created",
		Value:  NCreated,
		IsNil:  NCreated == nil,
		IsZero: NCreated != nil && (*NCreated) == 0,
	}
}

func (ft ImportAttemptFilters) ByNUpdated(NUpdated int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "n_updated",
		Value:  NUpdated,
		IsNil:  NUpdated == 0,
	}
}

func (ft ImportAttemptFilters) ByNUpdatedPtr(NUpdated *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "n_updated",
		Value:  NUpdated,
		IsNil:  NUpdated == nil,
		IsZero: NUpdated != nil && (*NUpdated) == 0,
	}
}

func (ft ImportAttemptFilters) ByNError(NError int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "n_error",
		Value:  NError,
		IsNil:  NError == 0,
	}
}

func (ft ImportAttemptFilters) ByNErrorPtr(NError *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "n_error",
		Value:  NError,
		IsNil:  NError == nil,
		IsZero: NError != nil && (*NError) == 0,
	}
}

func (ft ImportAttemptFilters) ByStatus(Status m.Status4) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft ImportAttemptFilters) ByStatusPtr(Status *m.Status4) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft ImportAttemptFilters) ByErrorType(ErrorType string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "error_type",
		Value:  ErrorType,
		IsNil:  ErrorType == "",
	}
}

func (ft ImportAttemptFilters) ByErrorTypePtr(ErrorType *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "error_type",
		Value:  ErrorType,
		IsNil:  ErrorType == nil,
		IsZero: ErrorType != nil && (*ErrorType) == "",
	}
}

func (ft ImportAttemptFilters) ByDurationMs(DurationMs int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "duration_ms",
		Value:  DurationMs,
		IsNil:  DurationMs == 0,
	}
}

func (ft ImportAttemptFilters) ByDurationMsPtr(DurationMs *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "duration_ms",
		Value:  DurationMs,
		IsNil:  DurationMs == nil,
		IsZero: DurationMs != nil && (*DurationMs) == 0,
	}
}

func (ft ImportAttemptFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ImportAttemptFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

type ExportAttemptFilters struct{ prefix string }

func NewExportAttemptFilters(prefix string) ExportAttemptFilters {
	return ExportAttemptFilters{prefix}
}

func (ft ExportAttemptFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ExportAttemptFilters) Prefix() string {
	return ft.prefix
}

func (ft ExportAttemptFilters) ByID(ID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == "",
	}
}

func (ft ExportAttemptFilters) ByIDPtr(ID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == "",
	}
}

func (ft ExportAttemptFilters) ByUserID(UserID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "user_id",
		Value:  UserID,
		IsNil:  UserID == 0,
	}
}

func (ft ExportAttemptFilters) ByUserIDPtr(UserID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "user_id",
		Value:  UserID,
		IsNil:  UserID == nil,
		IsZero: UserID != nil && (*UserID) == 0,
	}
}

func (ft ExportAttemptFilters) ByAccountID(AccountID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == 0,
	}
}

func (ft ExportAttemptFilters) ByAccountIDPtr(AccountID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == nil,
		IsZero: AccountID != nil && (*AccountID) == 0,
	}
}

func (ft ExportAttemptFilters) ByExportType(ExportType string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "export_type",
		Value:  ExportType,
		IsNil:  ExportType == "",
	}
}

func (ft ExportAttemptFilters) ByExportTypePtr(ExportType *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "export_type",
		Value:  ExportType,
		IsNil:  ExportType == nil,
		IsZero: ExportType != nil && (*ExportType) == "",
	}
}

func (ft ExportAttemptFilters) ByFileName(FileName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "filename",
		Value:  FileName,
		IsNil:  FileName == "",
	}
}

func (ft ExportAttemptFilters) ByFileNamePtr(FileName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "filename",
		Value:  FileName,
		IsNil:  FileName == nil,
		IsZero: FileName != nil && (*FileName) == "",
	}
}

func (ft ExportAttemptFilters) ByStoredFile(StoredFile string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "stored_file",
		Value:  StoredFile,
		IsNil:  StoredFile == "",
	}
}

func (ft ExportAttemptFilters) ByStoredFilePtr(StoredFile *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "stored_file",
		Value:  StoredFile,
		IsNil:  StoredFile == nil,
		IsZero: StoredFile != nil && (*StoredFile) == "",
	}
}

func (ft ExportAttemptFilters) ByDownloadURL(DownloadURL string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "download_url",
		Value:  DownloadURL,
		IsNil:  DownloadURL == "",
	}
}

func (ft ExportAttemptFilters) ByDownloadURLPtr(DownloadURL *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "download_url",
		Value:  DownloadURL,
		IsNil:  DownloadURL == nil,
		IsZero: DownloadURL != nil && (*DownloadURL) == "",
	}
}

func (ft ExportAttemptFilters) ByRequestQuery(RequestQuery string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "request_query",
		Value:  RequestQuery,
		IsNil:  RequestQuery == "",
	}
}

func (ft ExportAttemptFilters) ByRequestQueryPtr(RequestQuery *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "request_query",
		Value:  RequestQuery,
		IsNil:  RequestQuery == nil,
		IsZero: RequestQuery != nil && (*RequestQuery) == "",
	}
}

func (ft ExportAttemptFilters) ByMimeType(MimeType string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "mime_type",
		Value:  MimeType,
		IsNil:  MimeType == "",
	}
}

func (ft ExportAttemptFilters) ByMimeTypePtr(MimeType *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "mime_type",
		Value:  MimeType,
		IsNil:  MimeType == nil,
		IsZero: MimeType != nil && (*MimeType) == "",
	}
}

func (ft ExportAttemptFilters) ByStatus(Status m.Status4) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft ExportAttemptFilters) ByStatusPtr(Status *m.Status4) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft ExportAttemptFilters) ByNTotal(NTotal int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "n_total",
		Value:  NTotal,
		IsNil:  NTotal == 0,
	}
}

func (ft ExportAttemptFilters) ByNTotalPtr(NTotal *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "n_total",
		Value:  NTotal,
		IsNil:  NTotal == nil,
		IsZero: NTotal != nil && (*NTotal) == 0,
	}
}

func (ft ExportAttemptFilters) ByNExported(NExported int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "n_exported",
		Value:  NExported,
		IsNil:  NExported == 0,
	}
}

func (ft ExportAttemptFilters) ByNExportedPtr(NExported *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "n_exported",
		Value:  NExported,
		IsNil:  NExported == nil,
		IsZero: NExported != nil && (*NExported) == 0,
	}
}

func (ft ExportAttemptFilters) ByNError(NError int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "n_error",
		Value:  NError,
		IsNil:  NError == 0,
	}
}

func (ft ExportAttemptFilters) ByNErrorPtr(NError *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "n_error",
		Value:  NError,
		IsNil:  NError == nil,
		IsZero: NError != nil && (*NError) == 0,
	}
}

func (ft ExportAttemptFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ExportAttemptFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft ExportAttemptFilters) ByDeletedAt(DeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt.IsZero(),
	}
}

func (ft ExportAttemptFilters) ByDeletedAtPtr(DeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt == nil,
		IsZero: DeletedAt != nil && (*DeletedAt).IsZero(),
	}
}

func (ft ExportAttemptFilters) ByStartedAt(StartedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "started_at",
		Value:  StartedAt,
		IsNil:  StartedAt.IsZero(),
	}
}

func (ft ExportAttemptFilters) ByStartedAtPtr(StartedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "started_at",
		Value:  StartedAt,
		IsNil:  StartedAt == nil,
		IsZero: StartedAt != nil && (*StartedAt).IsZero(),
	}
}

func (ft ExportAttemptFilters) ByDoneAt(DoneAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "done_at",
		Value:  DoneAt,
		IsNil:  DoneAt.IsZero(),
	}
}

func (ft ExportAttemptFilters) ByDoneAtPtr(DoneAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "done_at",
		Value:  DoneAt,
		IsNil:  DoneAt == nil,
		IsZero: DoneAt != nil && (*DoneAt).IsZero(),
	}
}

func (ft ExportAttemptFilters) ByExpiresAt(ExpiresAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "expires_at",
		Value:  ExpiresAt,
		IsNil:  ExpiresAt.IsZero(),
	}
}

func (ft ExportAttemptFilters) ByExpiresAtPtr(ExpiresAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "expires_at",
		Value:  ExpiresAt,
		IsNil:  ExpiresAt == nil,
		IsZero: ExpiresAt != nil && (*ExpiresAt).IsZero(),
	}
}

type AccountFilters struct{ prefix string }

func NewAccountFilters(prefix string) AccountFilters {
	return AccountFilters{prefix}
}

func (ft AccountFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft AccountFilters) Prefix() string {
	return ft.prefix
}

func (ft AccountFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft AccountFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft AccountFilters) ByOwnerID(OwnerID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "owner_id",
		Value:  OwnerID,
		IsNil:  OwnerID == 0,
	}
}

func (ft AccountFilters) ByOwnerIDPtr(OwnerID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "owner_id",
		Value:  OwnerID,
		IsNil:  OwnerID == nil,
		IsZero: OwnerID != nil && (*OwnerID) == 0,
	}
}

func (ft AccountFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft AccountFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft AccountFilters) ByType(Type m.AccountType) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "type",
		Value:  Type,
		IsNil:  Type == "",
	}
}

func (ft AccountFilters) ByTypePtr(Type *m.AccountType) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "type",
		Value:  Type,
		IsNil:  Type == nil,
		IsZero: Type != nil && (*Type) == "",
	}
}

func (ft AccountFilters) ByImageURL(ImageURL string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "image_url",
		Value:  ImageURL,
		IsNil:  ImageURL == "",
	}
}

func (ft AccountFilters) ByImageURLPtr(ImageURL *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "image_url",
		Value:  ImageURL,
		IsNil:  ImageURL == nil,
		IsZero: ImageURL != nil && (*ImageURL) == "",
	}
}

func (ft AccountFilters) ByURLSlug(URLSlug string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "url_slug",
		Value:  URLSlug,
		IsNil:  URLSlug == "",
	}
}

func (ft AccountFilters) ByURLSlugPtr(URLSlug *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "url_slug",
		Value:  URLSlug,
		IsNil:  URLSlug == nil,
		IsZero: URLSlug != nil && (*URLSlug) == "",
	}
}

type ShopFilters struct{ prefix string }

func NewShopFilters(prefix string) ShopFilters {
	return ShopFilters{prefix}
}

func (ft ShopFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ShopFilters) Prefix() string {
	return ft.prefix
}

func (ft ShopFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft ShopFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft ShopFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft ShopFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft ShopFilters) ByOwnerID(OwnerID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "owner_id",
		Value:  OwnerID,
		IsNil:  OwnerID == 0,
	}
}

func (ft ShopFilters) ByOwnerIDPtr(OwnerID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "owner_id",
		Value:  OwnerID,
		IsNil:  OwnerID == nil,
		IsZero: OwnerID != nil && (*OwnerID) == 0,
	}
}

func (ft ShopFilters) ByIsTest(IsTest int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "is_test",
		Value:  IsTest,
		IsNil:  IsTest == 0,
	}
}

func (ft ShopFilters) ByIsTestPtr(IsTest *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "is_test",
		Value:  IsTest,
		IsNil:  IsTest == nil,
		IsZero: IsTest != nil && (*IsTest) == 0,
	}
}

func (ft ShopFilters) ByAddressID(AddressID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "address_id",
		Value:  AddressID,
		IsNil:  AddressID == 0,
	}
}

func (ft ShopFilters) ByAddressIDPtr(AddressID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "address_id",
		Value:  AddressID,
		IsNil:  AddressID == nil,
		IsZero: AddressID != nil && (*AddressID) == 0,
	}
}

func (ft ShopFilters) ByShipToAddressID(ShipToAddressID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ship_to_address_id",
		Value:  ShipToAddressID,
		IsNil:  ShipToAddressID == 0,
	}
}

func (ft ShopFilters) ByShipToAddressIDPtr(ShipToAddressID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ship_to_address_id",
		Value:  ShipToAddressID,
		IsNil:  ShipToAddressID == nil,
		IsZero: ShipToAddressID != nil && (*ShipToAddressID) == 0,
	}
}

func (ft ShopFilters) ByShipFromAddressID(ShipFromAddressID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ship_from_address_id",
		Value:  ShipFromAddressID,
		IsNil:  ShipFromAddressID == 0,
	}
}

func (ft ShopFilters) ByShipFromAddressIDPtr(ShipFromAddressID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ship_from_address_id",
		Value:  ShipFromAddressID,
		IsNil:  ShipFromAddressID == nil,
		IsZero: ShipFromAddressID != nil && (*ShipFromAddressID) == 0,
	}
}

func (ft ShopFilters) ByPhone(Phone string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "phone",
		Value:  Phone,
		IsNil:  Phone == "",
	}
}

func (ft ShopFilters) ByPhonePtr(Phone *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "phone",
		Value:  Phone,
		IsNil:  Phone == nil,
		IsZero: Phone != nil && (*Phone) == "",
	}
}

func (ft ShopFilters) ByWebsiteURL(WebsiteURL string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "website_url",
		Value:  WebsiteURL,
		IsNil:  WebsiteURL == "",
	}
}

func (ft ShopFilters) ByWebsiteURLPtr(WebsiteURL *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "website_url",
		Value:  WebsiteURL,
		IsNil:  WebsiteURL == nil,
		IsZero: WebsiteURL != nil && (*WebsiteURL) == "",
	}
}

func (ft ShopFilters) ByImageURL(ImageURL string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "image_url",
		Value:  ImageURL,
		IsNil:  ImageURL == "",
	}
}

func (ft ShopFilters) ByImageURLPtr(ImageURL *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "image_url",
		Value:  ImageURL,
		IsNil:  ImageURL == nil,
		IsZero: ImageURL != nil && (*ImageURL) == "",
	}
}

func (ft ShopFilters) ByEmail(Email string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "email",
		Value:  Email,
		IsNil:  Email == "",
	}
}

func (ft ShopFilters) ByEmailPtr(Email *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "email",
		Value:  Email,
		IsNil:  Email == nil,
		IsZero: Email != nil && (*Email) == "",
	}
}

func (ft ShopFilters) ByCode(Code string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "code",
		Value:  Code,
		IsNil:  Code == "",
	}
}

func (ft ShopFilters) ByCodePtr(Code *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "code",
		Value:  Code,
		IsNil:  Code == nil,
		IsZero: Code != nil && (*Code) == "",
	}
}

func (ft ShopFilters) ByAutoCreateFFM(AutoCreateFFM bool) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "auto_create_ffm",
		Value:  AutoCreateFFM,
		IsNil:  bool(!AutoCreateFFM),
	}
}

func (ft ShopFilters) ByAutoCreateFFMPtr(AutoCreateFFM *bool) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "auto_create_ffm",
		Value:  AutoCreateFFM,
		IsNil:  AutoCreateFFM == nil,
		IsZero: AutoCreateFFM != nil && bool(!(*AutoCreateFFM)),
	}
}

func (ft ShopFilters) ByProductSourceID(ProductSourceID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == 0,
	}
}

func (ft ShopFilters) ByProductSourceIDPtr(ProductSourceID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == nil,
		IsZero: ProductSourceID != nil && (*ProductSourceID) == 0,
	}
}

func (ft ShopFilters) ByOrderSourceID(OrderSourceID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "order_source_id",
		Value:  OrderSourceID,
		IsNil:  OrderSourceID == 0,
	}
}

func (ft ShopFilters) ByOrderSourceIDPtr(OrderSourceID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "order_source_id",
		Value:  OrderSourceID,
		IsNil:  OrderSourceID == nil,
		IsZero: OrderSourceID != nil && (*OrderSourceID) == 0,
	}
}

func (ft ShopFilters) ByStatus(Status m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft ShopFilters) ByStatusPtr(Status *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft ShopFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ShopFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft ShopFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft ShopFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft ShopFilters) ByDeletedAt(DeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt.IsZero(),
	}
}

func (ft ShopFilters) ByDeletedAtPtr(DeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt == nil,
		IsZero: DeletedAt != nil && (*DeletedAt).IsZero(),
	}
}

func (ft ShopFilters) ByGhnNoteCode(GhnNoteCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ghn_note_code",
		Value:  GhnNoteCode,
		IsNil:  GhnNoteCode == "",
	}
}

func (ft ShopFilters) ByGhnNoteCodePtr(GhnNoteCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ghn_note_code",
		Value:  GhnNoteCode,
		IsNil:  GhnNoteCode == nil,
		IsZero: GhnNoteCode != nil && (*GhnNoteCode) == "",
	}
}

func (ft ShopFilters) ByTryOn(TryOn m.TryOn) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "try_on",
		Value:  TryOn,
		IsNil:  TryOn == "",
	}
}

func (ft ShopFilters) ByTryOnPtr(TryOn *m.TryOn) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "try_on",
		Value:  TryOn,
		IsNil:  TryOn == nil,
		IsZero: TryOn != nil && (*TryOn) == "",
	}
}

func (ft ShopFilters) ByMoneyTransactionRRule(MoneyTransactionRRule string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "money_transaction_rrule",
		Value:  MoneyTransactionRRule,
		IsNil:  MoneyTransactionRRule == "",
	}
}

func (ft ShopFilters) ByMoneyTransactionRRulePtr(MoneyTransactionRRule *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "money_transaction_rrule",
		Value:  MoneyTransactionRRule,
		IsNil:  MoneyTransactionRRule == nil,
		IsZero: MoneyTransactionRRule != nil && (*MoneyTransactionRRule) == "",
	}
}

type ShopDeleteFilters struct{ prefix string }

func NewShopDeleteFilters(prefix string) ShopDeleteFilters {
	return ShopDeleteFilters{prefix}
}

func (ft ShopDeleteFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ShopDeleteFilters) Prefix() string {
	return ft.prefix
}

func (ft ShopDeleteFilters) ByDeletedAt(DeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt.IsZero(),
	}
}

func (ft ShopDeleteFilters) ByDeletedAtPtr(DeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt == nil,
		IsZero: DeletedAt != nil && (*DeletedAt).IsZero(),
	}
}

type EtopCategoryFilters struct{ prefix string }

func NewEtopCategoryFilters(prefix string) EtopCategoryFilters {
	return EtopCategoryFilters{prefix}
}

func (ft EtopCategoryFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft EtopCategoryFilters) Prefix() string {
	return ft.prefix
}

func (ft EtopCategoryFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft EtopCategoryFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft EtopCategoryFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft EtopCategoryFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft EtopCategoryFilters) ByParentID(ParentID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "parent_id",
		Value:  ParentID,
		IsNil:  ParentID == 0,
	}
}

func (ft EtopCategoryFilters) ByParentIDPtr(ParentID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "parent_id",
		Value:  ParentID,
		IsNil:  ParentID == nil,
		IsZero: ParentID != nil && (*ParentID) == 0,
	}
}

func (ft EtopCategoryFilters) ByStatus(Status m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft EtopCategoryFilters) ByStatusPtr(Status *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft EtopCategoryFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft EtopCategoryFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft EtopCategoryFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft EtopCategoryFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

type SupplierFilters struct{ prefix string }

func NewSupplierFilters(prefix string) SupplierFilters {
	return SupplierFilters{prefix}
}

func (ft SupplierFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft SupplierFilters) Prefix() string {
	return ft.prefix
}

func (ft SupplierFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft SupplierFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft SupplierFilters) ByStatus(Status m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft SupplierFilters) ByStatusPtr(Status *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft SupplierFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft SupplierFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft SupplierFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft SupplierFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft SupplierFilters) ByIsTest(IsTest int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "is_test",
		Value:  IsTest,
		IsNil:  IsTest == 0,
	}
}

func (ft SupplierFilters) ByIsTestPtr(IsTest *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "is_test",
		Value:  IsTest,
		IsNil:  IsTest == nil,
		IsZero: IsTest != nil && (*IsTest) == 0,
	}
}

func (ft SupplierFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft SupplierFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft SupplierFilters) ByOwnerID(OwnerID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "owner_id",
		Value:  OwnerID,
		IsNil:  OwnerID == 0,
	}
}

func (ft SupplierFilters) ByOwnerIDPtr(OwnerID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "owner_id",
		Value:  OwnerID,
		IsNil:  OwnerID == nil,
		IsZero: OwnerID != nil && (*OwnerID) == 0,
	}
}

func (ft SupplierFilters) ByImageURL(ImageURL string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "image_url",
		Value:  ImageURL,
		IsNil:  ImageURL == "",
	}
}

func (ft SupplierFilters) ByImageURLPtr(ImageURL *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "image_url",
		Value:  ImageURL,
		IsNil:  ImageURL == nil,
		IsZero: ImageURL != nil && (*ImageURL) == "",
	}
}

func (ft SupplierFilters) ByWarehouseAddressID(WarehouseAddressID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "warehouse_address_id",
		Value:  WarehouseAddressID,
		IsNil:  WarehouseAddressID == 0,
	}
}

func (ft SupplierFilters) ByWarehouseAddressIDPtr(WarehouseAddressID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "warehouse_address_id",
		Value:  WarehouseAddressID,
		IsNil:  WarehouseAddressID == nil,
		IsZero: WarehouseAddressID != nil && (*WarehouseAddressID) == 0,
	}
}

func (ft SupplierFilters) ByShipFromAddressID(ShipFromAddressID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ship_from_address_id",
		Value:  ShipFromAddressID,
		IsNil:  ShipFromAddressID == 0,
	}
}

func (ft SupplierFilters) ByShipFromAddressIDPtr(ShipFromAddressID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ship_from_address_id",
		Value:  ShipFromAddressID,
		IsNil:  ShipFromAddressID == nil,
		IsZero: ShipFromAddressID != nil && (*ShipFromAddressID) == 0,
	}
}

func (ft SupplierFilters) ByProductSourceID(ProductSourceID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == 0,
	}
}

func (ft SupplierFilters) ByProductSourceIDPtr(ProductSourceID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == nil,
		IsZero: ProductSourceID != nil && (*ProductSourceID) == 0,
	}
}

type SupplierInfoFilters struct{ prefix string }

func NewSupplierInfoFilters(prefix string) SupplierInfoFilters {
	return SupplierInfoFilters{prefix}
}

func (ft SupplierInfoFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft SupplierInfoFilters) Prefix() string {
	return ft.prefix
}

func (ft SupplierInfoFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft SupplierInfoFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft SupplierInfoFilters) ByImageURL(ImageURL string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "image_url",
		Value:  ImageURL,
		IsNil:  ImageURL == "",
	}
}

func (ft SupplierInfoFilters) ByImageURLPtr(ImageURL *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "image_url",
		Value:  ImageURL,
		IsNil:  ImageURL == nil,
		IsZero: ImageURL != nil && (*ImageURL) == "",
	}
}

func (ft SupplierInfoFilters) ByWarehouseAddressID(WarehouseAddressID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "warehouse_address_id",
		Value:  WarehouseAddressID,
		IsNil:  WarehouseAddressID == 0,
	}
}

func (ft SupplierInfoFilters) ByWarehouseAddressIDPtr(WarehouseAddressID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "warehouse_address_id",
		Value:  WarehouseAddressID,
		IsNil:  WarehouseAddressID == nil,
		IsZero: WarehouseAddressID != nil && (*WarehouseAddressID) == 0,
	}
}

type PartnerFilters struct{ prefix string }

func NewPartnerFilters(prefix string) PartnerFilters {
	return PartnerFilters{prefix}
}

func (ft PartnerFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft PartnerFilters) Prefix() string {
	return ft.prefix
}

func (ft PartnerFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft PartnerFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft PartnerFilters) ByOwnerID(OwnerID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "owner_id",
		Value:  OwnerID,
		IsNil:  OwnerID == 0,
	}
}

func (ft PartnerFilters) ByOwnerIDPtr(OwnerID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "owner_id",
		Value:  OwnerID,
		IsNil:  OwnerID == nil,
		IsZero: OwnerID != nil && (*OwnerID) == 0,
	}
}

func (ft PartnerFilters) ByStatus(Status m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft PartnerFilters) ByStatusPtr(Status *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft PartnerFilters) ByIsTest(IsTest int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "is_test",
		Value:  IsTest,
		IsNil:  IsTest == 0,
	}
}

func (ft PartnerFilters) ByIsTestPtr(IsTest *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "is_test",
		Value:  IsTest,
		IsNil:  IsTest == nil,
		IsZero: IsTest != nil && (*IsTest) == 0,
	}
}

func (ft PartnerFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft PartnerFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft PartnerFilters) ByPublicName(PublicName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "public_name",
		Value:  PublicName,
		IsNil:  PublicName == "",
	}
}

func (ft PartnerFilters) ByPublicNamePtr(PublicName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "public_name",
		Value:  PublicName,
		IsNil:  PublicName == nil,
		IsZero: PublicName != nil && (*PublicName) == "",
	}
}

func (ft PartnerFilters) ByPhone(Phone string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "phone",
		Value:  Phone,
		IsNil:  Phone == "",
	}
}

func (ft PartnerFilters) ByPhonePtr(Phone *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "phone",
		Value:  Phone,
		IsNil:  Phone == nil,
		IsZero: Phone != nil && (*Phone) == "",
	}
}

func (ft PartnerFilters) ByEmail(Email string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "email",
		Value:  Email,
		IsNil:  Email == "",
	}
}

func (ft PartnerFilters) ByEmailPtr(Email *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "email",
		Value:  Email,
		IsNil:  Email == nil,
		IsZero: Email != nil && (*Email) == "",
	}
}

func (ft PartnerFilters) ByImageURL(ImageURL string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "image_url",
		Value:  ImageURL,
		IsNil:  ImageURL == "",
	}
}

func (ft PartnerFilters) ByImageURLPtr(ImageURL *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "image_url",
		Value:  ImageURL,
		IsNil:  ImageURL == nil,
		IsZero: ImageURL != nil && (*ImageURL) == "",
	}
}

func (ft PartnerFilters) ByWebsiteURL(WebsiteURL string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "website_url",
		Value:  WebsiteURL,
		IsNil:  WebsiteURL == "",
	}
}

func (ft PartnerFilters) ByWebsiteURLPtr(WebsiteURL *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "website_url",
		Value:  WebsiteURL,
		IsNil:  WebsiteURL == nil,
		IsZero: WebsiteURL != nil && (*WebsiteURL) == "",
	}
}

func (ft PartnerFilters) ByAvailableFromEtop(AvailableFromEtop bool) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "available_from_etop",
		Value:  AvailableFromEtop,
		IsNil:  bool(!AvailableFromEtop),
	}
}

func (ft PartnerFilters) ByAvailableFromEtopPtr(AvailableFromEtop *bool) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "available_from_etop",
		Value:  AvailableFromEtop,
		IsNil:  AvailableFromEtop == nil,
		IsZero: AvailableFromEtop != nil && bool(!(*AvailableFromEtop)),
	}
}

func (ft PartnerFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft PartnerFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft PartnerFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft PartnerFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft PartnerFilters) ByDeletedAt(DeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt.IsZero(),
	}
}

func (ft PartnerFilters) ByDeletedAtPtr(DeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt == nil,
		IsZero: DeletedAt != nil && (*DeletedAt).IsZero(),
	}
}

type AccountAuthFilters struct{ prefix string }

func NewAccountAuthFilters(prefix string) AccountAuthFilters {
	return AccountAuthFilters{prefix}
}

func (ft AccountAuthFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft AccountAuthFilters) Prefix() string {
	return ft.prefix
}

func (ft AccountAuthFilters) ByAuthKey(AuthKey string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "auth_key",
		Value:  AuthKey,
		IsNil:  AuthKey == "",
	}
}

func (ft AccountAuthFilters) ByAuthKeyPtr(AuthKey *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "auth_key",
		Value:  AuthKey,
		IsNil:  AuthKey == nil,
		IsZero: AuthKey != nil && (*AuthKey) == "",
	}
}

func (ft AccountAuthFilters) ByAccountID(AccountID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == 0,
	}
}

func (ft AccountAuthFilters) ByAccountIDPtr(AccountID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == nil,
		IsZero: AccountID != nil && (*AccountID) == 0,
	}
}

func (ft AccountAuthFilters) ByStatus(Status m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft AccountAuthFilters) ByStatusPtr(Status *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft AccountAuthFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft AccountAuthFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft AccountAuthFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft AccountAuthFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft AccountAuthFilters) ByDeletedAt(DeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt.IsZero(),
	}
}

func (ft AccountAuthFilters) ByDeletedAtPtr(DeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt == nil,
		IsZero: DeletedAt != nil && (*DeletedAt).IsZero(),
	}
}

type PartnerRelationFilters struct{ prefix string }

func NewPartnerRelationFilters(prefix string) PartnerRelationFilters {
	return PartnerRelationFilters{prefix}
}

func (ft PartnerRelationFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft PartnerRelationFilters) Prefix() string {
	return ft.prefix
}

func (ft PartnerRelationFilters) ByAuthKey(AuthKey string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "auth_key",
		Value:  AuthKey,
		IsNil:  AuthKey == "",
	}
}

func (ft PartnerRelationFilters) ByAuthKeyPtr(AuthKey *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "auth_key",
		Value:  AuthKey,
		IsNil:  AuthKey == nil,
		IsZero: AuthKey != nil && (*AuthKey) == "",
	}
}

func (ft PartnerRelationFilters) ByPartnerID(PartnerID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "partner_id",
		Value:  PartnerID,
		IsNil:  PartnerID == 0,
	}
}

func (ft PartnerRelationFilters) ByPartnerIDPtr(PartnerID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "partner_id",
		Value:  PartnerID,
		IsNil:  PartnerID == nil,
		IsZero: PartnerID != nil && (*PartnerID) == 0,
	}
}

func (ft PartnerRelationFilters) BySubjectID(SubjectID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "subject_id",
		Value:  SubjectID,
		IsNil:  SubjectID == 0,
	}
}

func (ft PartnerRelationFilters) BySubjectIDPtr(SubjectID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "subject_id",
		Value:  SubjectID,
		IsNil:  SubjectID == nil,
		IsZero: SubjectID != nil && (*SubjectID) == 0,
	}
}

func (ft PartnerRelationFilters) BySubjectType(SubjectType m.SubjectType) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "subject_type",
		Value:  SubjectType,
		IsNil:  SubjectType == "",
	}
}

func (ft PartnerRelationFilters) BySubjectTypePtr(SubjectType *m.SubjectType) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "subject_type",
		Value:  SubjectType,
		IsNil:  SubjectType == nil,
		IsZero: SubjectType != nil && (*SubjectType) == "",
	}
}

func (ft PartnerRelationFilters) ByExternalSubjectID(ExternalSubjectID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_subject_id",
		Value:  ExternalSubjectID,
		IsNil:  ExternalSubjectID == "",
	}
}

func (ft PartnerRelationFilters) ByExternalSubjectIDPtr(ExternalSubjectID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_subject_id",
		Value:  ExternalSubjectID,
		IsNil:  ExternalSubjectID == nil,
		IsZero: ExternalSubjectID != nil && (*ExternalSubjectID) == "",
	}
}

func (ft PartnerRelationFilters) ByNonce(Nonce int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "nonce",
		Value:  Nonce,
		IsNil:  Nonce == 0,
	}
}

func (ft PartnerRelationFilters) ByNoncePtr(Nonce *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "nonce",
		Value:  Nonce,
		IsNil:  Nonce == nil,
		IsZero: Nonce != nil && (*Nonce) == 0,
	}
}

func (ft PartnerRelationFilters) ByStatus(Status m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft PartnerRelationFilters) ByStatusPtr(Status *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft PartnerRelationFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft PartnerRelationFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft PartnerRelationFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft PartnerRelationFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft PartnerRelationFilters) ByDeletedAt(DeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt.IsZero(),
	}
}

func (ft PartnerRelationFilters) ByDeletedAtPtr(DeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt == nil,
		IsZero: DeletedAt != nil && (*DeletedAt).IsZero(),
	}
}

type ProductSourceFilters struct{ prefix string }

func NewProductSourceFilters(prefix string) ProductSourceFilters {
	return ProductSourceFilters{prefix}
}

func (ft ProductSourceFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ProductSourceFilters) Prefix() string {
	return ft.prefix
}

func (ft ProductSourceFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft ProductSourceFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft ProductSourceFilters) BySupplierID(SupplierID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == 0,
	}
}

func (ft ProductSourceFilters) BySupplierIDPtr(SupplierID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == nil,
		IsZero: SupplierID != nil && (*SupplierID) == 0,
	}
}

func (ft ProductSourceFilters) ByType(Type string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "type",
		Value:  Type,
		IsNil:  Type == "",
	}
}

func (ft ProductSourceFilters) ByTypePtr(Type *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "type",
		Value:  Type,
		IsNil:  Type == nil,
		IsZero: Type != nil && (*Type) == "",
	}
}

func (ft ProductSourceFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft ProductSourceFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft ProductSourceFilters) ByStatus(Status m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft ProductSourceFilters) ByStatusPtr(Status *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft ProductSourceFilters) ByExternalStatus(ExternalStatus m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_status",
		Value:  ExternalStatus,
		IsNil:  ExternalStatus == 0,
	}
}

func (ft ProductSourceFilters) ByExternalStatusPtr(ExternalStatus *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_status",
		Value:  ExternalStatus,
		IsNil:  ExternalStatus == nil,
		IsZero: ExternalStatus != nil && (*ExternalStatus) == 0,
	}
}

func (ft ProductSourceFilters) ByExternalKey(ExternalKey string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_key",
		Value:  ExternalKey,
		IsNil:  ExternalKey == "",
	}
}

func (ft ProductSourceFilters) ByExternalKeyPtr(ExternalKey *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_key",
		Value:  ExternalKey,
		IsNil:  ExternalKey == nil,
		IsZero: ExternalKey != nil && (*ExternalKey) == "",
	}
}

func (ft ProductSourceFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ProductSourceFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft ProductSourceFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft ProductSourceFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft ProductSourceFilters) ByLastSyncAt(LastSyncAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt.IsZero(),
	}
}

func (ft ProductSourceFilters) ByLastSyncAtPtr(LastSyncAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt == nil,
		IsZero: LastSyncAt != nil && (*LastSyncAt).IsZero(),
	}
}

type ProductSourceSyncStatesFilters struct{ prefix string }

func NewProductSourceSyncStatesFilters(prefix string) ProductSourceSyncStatesFilters {
	return ProductSourceSyncStatesFilters{prefix}
}

func (ft ProductSourceSyncStatesFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ProductSourceSyncStatesFilters) Prefix() string {
	return ft.prefix
}

func (ft ProductSourceSyncStatesFilters) ByLastSyncAt(LastSyncAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt.IsZero(),
	}
}

func (ft ProductSourceSyncStatesFilters) ByLastSyncAtPtr(LastSyncAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt == nil,
		IsZero: LastSyncAt != nil && (*LastSyncAt).IsZero(),
	}
}

type ProductSourceInternalFilters struct{ prefix string }

func NewProductSourceInternalFilters(prefix string) ProductSourceInternalFilters {
	return ProductSourceInternalFilters{prefix}
}

func (ft ProductSourceInternalFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ProductSourceInternalFilters) Prefix() string {
	return ft.prefix
}

func (ft ProductSourceInternalFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft ProductSourceInternalFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft ProductSourceInternalFilters) ByAccessToken(AccessToken string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "access_token",
		Value:  AccessToken,
		IsNil:  AccessToken == "",
	}
}

func (ft ProductSourceInternalFilters) ByAccessTokenPtr(AccessToken *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "access_token",
		Value:  AccessToken,
		IsNil:  AccessToken == nil,
		IsZero: AccessToken != nil && (*AccessToken) == "",
	}
}

func (ft ProductSourceInternalFilters) ByExpiresAt(ExpiresAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "expires_at",
		Value:  ExpiresAt,
		IsNil:  ExpiresAt.IsZero(),
	}
}

func (ft ProductSourceInternalFilters) ByExpiresAtPtr(ExpiresAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "expires_at",
		Value:  ExpiresAt,
		IsNil:  ExpiresAt == nil,
		IsZero: ExpiresAt != nil && (*ExpiresAt).IsZero(),
	}
}

func (ft ProductSourceInternalFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ProductSourceInternalFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft ProductSourceInternalFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft ProductSourceInternalFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

type ProductSourceInternalAccessTokenFilters struct{ prefix string }

func NewProductSourceInternalAccessTokenFilters(prefix string) ProductSourceInternalAccessTokenFilters {
	return ProductSourceInternalAccessTokenFilters{prefix}
}

func (ft ProductSourceInternalAccessTokenFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ProductSourceInternalAccessTokenFilters) Prefix() string {
	return ft.prefix
}

func (ft ProductSourceInternalAccessTokenFilters) ByAccessToken(AccessToken string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "access_token",
		Value:  AccessToken,
		IsNil:  AccessToken == "",
	}
}

func (ft ProductSourceInternalAccessTokenFilters) ByAccessTokenPtr(AccessToken *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "access_token",
		Value:  AccessToken,
		IsNil:  AccessToken == nil,
		IsZero: AccessToken != nil && (*AccessToken) == "",
	}
}

func (ft ProductSourceInternalAccessTokenFilters) ByExpiresAt(ExpiresAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "expires_at",
		Value:  ExpiresAt,
		IsNil:  ExpiresAt.IsZero(),
	}
}

func (ft ProductSourceInternalAccessTokenFilters) ByExpiresAtPtr(ExpiresAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "expires_at",
		Value:  ExpiresAt,
		IsNil:  ExpiresAt == nil,
		IsZero: ExpiresAt != nil && (*ExpiresAt).IsZero(),
	}
}

func (ft ProductSourceInternalAccessTokenFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft ProductSourceInternalAccessTokenFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

type OrderSourceFilters struct{ prefix string }

func NewOrderSourceFilters(prefix string) OrderSourceFilters {
	return OrderSourceFilters{prefix}
}

func (ft OrderSourceFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft OrderSourceFilters) Prefix() string {
	return ft.prefix
}

func (ft OrderSourceFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft OrderSourceFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft OrderSourceFilters) ByShopID(ShopID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == 0,
	}
}

func (ft OrderSourceFilters) ByShopIDPtr(ShopID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == nil,
		IsZero: ShopID != nil && (*ShopID) == 0,
	}
}

func (ft OrderSourceFilters) ByType(Type string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "type",
		Value:  Type,
		IsNil:  Type == "",
	}
}

func (ft OrderSourceFilters) ByTypePtr(Type *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "type",
		Value:  Type,
		IsNil:  Type == nil,
		IsZero: Type != nil && (*Type) == "",
	}
}

func (ft OrderSourceFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft OrderSourceFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft OrderSourceFilters) ByStatus(Status int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft OrderSourceFilters) ByStatusPtr(Status *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft OrderSourceFilters) ByExternalStatus(ExternalStatus int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_status",
		Value:  ExternalStatus,
		IsNil:  ExternalStatus == 0,
	}
}

func (ft OrderSourceFilters) ByExternalStatusPtr(ExternalStatus *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_status",
		Value:  ExternalStatus,
		IsNil:  ExternalStatus == nil,
		IsZero: ExternalStatus != nil && (*ExternalStatus) == 0,
	}
}

func (ft OrderSourceFilters) ByExternalKey(ExternalKey string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_key",
		Value:  ExternalKey,
		IsNil:  ExternalKey == "",
	}
}

func (ft OrderSourceFilters) ByExternalKeyPtr(ExternalKey *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_key",
		Value:  ExternalKey,
		IsNil:  ExternalKey == nil,
		IsZero: ExternalKey != nil && (*ExternalKey) == "",
	}
}

func (ft OrderSourceFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft OrderSourceFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft OrderSourceFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft OrderSourceFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft OrderSourceFilters) ByLastSyncAt(LastSyncAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt.IsZero(),
	}
}

func (ft OrderSourceFilters) ByLastSyncAtPtr(LastSyncAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt == nil,
		IsZero: LastSyncAt != nil && (*LastSyncAt).IsZero(),
	}
}

type OrderSourceSyncStatesFilters struct{ prefix string }

func NewOrderSourceSyncStatesFilters(prefix string) OrderSourceSyncStatesFilters {
	return OrderSourceSyncStatesFilters{prefix}
}

func (ft OrderSourceSyncStatesFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft OrderSourceSyncStatesFilters) Prefix() string {
	return ft.prefix
}

func (ft OrderSourceSyncStatesFilters) ByLastSyncAt(LastSyncAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt.IsZero(),
	}
}

func (ft OrderSourceSyncStatesFilters) ByLastSyncAtPtr(LastSyncAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt == nil,
		IsZero: LastSyncAt != nil && (*LastSyncAt).IsZero(),
	}
}

type OrderSourceInternalFilters struct{ prefix string }

func NewOrderSourceInternalFilters(prefix string) OrderSourceInternalFilters {
	return OrderSourceInternalFilters{prefix}
}

func (ft OrderSourceInternalFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft OrderSourceInternalFilters) Prefix() string {
	return ft.prefix
}

func (ft OrderSourceInternalFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft OrderSourceInternalFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft OrderSourceInternalFilters) ByAccessToken(AccessToken string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "access_token",
		Value:  AccessToken,
		IsNil:  AccessToken == "",
	}
}

func (ft OrderSourceInternalFilters) ByAccessTokenPtr(AccessToken *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "access_token",
		Value:  AccessToken,
		IsNil:  AccessToken == nil,
		IsZero: AccessToken != nil && (*AccessToken) == "",
	}
}

func (ft OrderSourceInternalFilters) ByExpiresAt(ExpiresAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "expires_at",
		Value:  ExpiresAt,
		IsNil:  ExpiresAt.IsZero(),
	}
}

func (ft OrderSourceInternalFilters) ByExpiresAtPtr(ExpiresAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "expires_at",
		Value:  ExpiresAt,
		IsNil:  ExpiresAt == nil,
		IsZero: ExpiresAt != nil && (*ExpiresAt).IsZero(),
	}
}

func (ft OrderSourceInternalFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft OrderSourceInternalFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft OrderSourceInternalFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft OrderSourceInternalFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

type ProductSourceCategoryExternalFilters struct{ prefix string }

func NewProductSourceCategoryExternalFilters(prefix string) ProductSourceCategoryExternalFilters {
	return ProductSourceCategoryExternalFilters{prefix}
}

func (ft ProductSourceCategoryExternalFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ProductSourceCategoryExternalFilters) Prefix() string {
	return ft.prefix
}

func (ft ProductSourceCategoryExternalFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft ProductSourceCategoryExternalFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft ProductSourceCategoryExternalFilters) ByProductSourceID(ProductSourceID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == 0,
	}
}

func (ft ProductSourceCategoryExternalFilters) ByProductSourceIDPtr(ProductSourceID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == nil,
		IsZero: ProductSourceID != nil && (*ProductSourceID) == 0,
	}
}

func (ft ProductSourceCategoryExternalFilters) ByProductSourceType(ProductSourceType string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_type",
		Value:  ProductSourceType,
		IsNil:  ProductSourceType == "",
	}
}

func (ft ProductSourceCategoryExternalFilters) ByProductSourceTypePtr(ProductSourceType *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_type",
		Value:  ProductSourceType,
		IsNil:  ProductSourceType == nil,
		IsZero: ProductSourceType != nil && (*ProductSourceType) == "",
	}
}

func (ft ProductSourceCategoryExternalFilters) ByExternalID(ExternalID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_id",
		Value:  ExternalID,
		IsNil:  ExternalID == "",
	}
}

func (ft ProductSourceCategoryExternalFilters) ByExternalIDPtr(ExternalID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_id",
		Value:  ExternalID,
		IsNil:  ExternalID == nil,
		IsZero: ExternalID != nil && (*ExternalID) == "",
	}
}

func (ft ProductSourceCategoryExternalFilters) ByExternalParentID(ExternalParentID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_parent_id",
		Value:  ExternalParentID,
		IsNil:  ExternalParentID == "",
	}
}

func (ft ProductSourceCategoryExternalFilters) ByExternalParentIDPtr(ExternalParentID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_parent_id",
		Value:  ExternalParentID,
		IsNil:  ExternalParentID == nil,
		IsZero: ExternalParentID != nil && (*ExternalParentID) == "",
	}
}

func (ft ProductSourceCategoryExternalFilters) ByExternalCode(ExternalCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_code",
		Value:  ExternalCode,
		IsNil:  ExternalCode == "",
	}
}

func (ft ProductSourceCategoryExternalFilters) ByExternalCodePtr(ExternalCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_code",
		Value:  ExternalCode,
		IsNil:  ExternalCode == nil,
		IsZero: ExternalCode != nil && (*ExternalCode) == "",
	}
}

func (ft ProductSourceCategoryExternalFilters) ByExternalName(ExternalName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_name",
		Value:  ExternalName,
		IsNil:  ExternalName == "",
	}
}

func (ft ProductSourceCategoryExternalFilters) ByExternalNamePtr(ExternalName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_name",
		Value:  ExternalName,
		IsNil:  ExternalName == nil,
		IsZero: ExternalName != nil && (*ExternalName) == "",
	}
}

func (ft ProductSourceCategoryExternalFilters) ByExternalStatus(ExternalStatus int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_status",
		Value:  ExternalStatus,
		IsNil:  ExternalStatus == 0,
	}
}

func (ft ProductSourceCategoryExternalFilters) ByExternalStatusPtr(ExternalStatus *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_status",
		Value:  ExternalStatus,
		IsNil:  ExternalStatus == nil,
		IsZero: ExternalStatus != nil && (*ExternalStatus) == 0,
	}
}

func (ft ProductSourceCategoryExternalFilters) ByExternalUpdatedAt(ExternalUpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_updated_at",
		Value:  ExternalUpdatedAt,
		IsNil:  ExternalUpdatedAt.IsZero(),
	}
}

func (ft ProductSourceCategoryExternalFilters) ByExternalUpdatedAtPtr(ExternalUpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_updated_at",
		Value:  ExternalUpdatedAt,
		IsNil:  ExternalUpdatedAt == nil,
		IsZero: ExternalUpdatedAt != nil && (*ExternalUpdatedAt).IsZero(),
	}
}

func (ft ProductSourceCategoryExternalFilters) ByExternalCreatedAt(ExternalCreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_created_at",
		Value:  ExternalCreatedAt,
		IsNil:  ExternalCreatedAt.IsZero(),
	}
}

func (ft ProductSourceCategoryExternalFilters) ByExternalCreatedAtPtr(ExternalCreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_created_at",
		Value:  ExternalCreatedAt,
		IsNil:  ExternalCreatedAt == nil,
		IsZero: ExternalCreatedAt != nil && (*ExternalCreatedAt).IsZero(),
	}
}

func (ft ProductSourceCategoryExternalFilters) ByExternalDeletedAt(ExternalDeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_deleted_at",
		Value:  ExternalDeletedAt,
		IsNil:  ExternalDeletedAt.IsZero(),
	}
}

func (ft ProductSourceCategoryExternalFilters) ByExternalDeletedAtPtr(ExternalDeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_deleted_at",
		Value:  ExternalDeletedAt,
		IsNil:  ExternalDeletedAt == nil,
		IsZero: ExternalDeletedAt != nil && (*ExternalDeletedAt).IsZero(),
	}
}

func (ft ProductSourceCategoryExternalFilters) ByLastSyncAt(LastSyncAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt.IsZero(),
	}
}

func (ft ProductSourceCategoryExternalFilters) ByLastSyncAtPtr(LastSyncAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt == nil,
		IsZero: LastSyncAt != nil && (*LastSyncAt).IsZero(),
	}
}

type ProductSourceCategoryFilters struct{ prefix string }

func NewProductSourceCategoryFilters(prefix string) ProductSourceCategoryFilters {
	return ProductSourceCategoryFilters{prefix}
}

func (ft ProductSourceCategoryFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ProductSourceCategoryFilters) Prefix() string {
	return ft.prefix
}

func (ft ProductSourceCategoryFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft ProductSourceCategoryFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft ProductSourceCategoryFilters) ByProductSourceID(ProductSourceID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == 0,
	}
}

func (ft ProductSourceCategoryFilters) ByProductSourceIDPtr(ProductSourceID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == nil,
		IsZero: ProductSourceID != nil && (*ProductSourceID) == 0,
	}
}

func (ft ProductSourceCategoryFilters) ByProductSourceType(ProductSourceType string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_type",
		Value:  ProductSourceType,
		IsNil:  ProductSourceType == "",
	}
}

func (ft ProductSourceCategoryFilters) ByProductSourceTypePtr(ProductSourceType *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_type",
		Value:  ProductSourceType,
		IsNil:  ProductSourceType == nil,
		IsZero: ProductSourceType != nil && (*ProductSourceType) == "",
	}
}

func (ft ProductSourceCategoryFilters) BySupplierID(SupplierID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == 0,
	}
}

func (ft ProductSourceCategoryFilters) BySupplierIDPtr(SupplierID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == nil,
		IsZero: SupplierID != nil && (*SupplierID) == 0,
	}
}

func (ft ProductSourceCategoryFilters) ByParentID(ParentID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "parent_id",
		Value:  ParentID,
		IsNil:  ParentID == 0,
	}
}

func (ft ProductSourceCategoryFilters) ByParentIDPtr(ParentID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "parent_id",
		Value:  ParentID,
		IsNil:  ParentID == nil,
		IsZero: ParentID != nil && (*ParentID) == 0,
	}
}

func (ft ProductSourceCategoryFilters) ByShopID(ShopID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == 0,
	}
}

func (ft ProductSourceCategoryFilters) ByShopIDPtr(ShopID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == nil,
		IsZero: ShopID != nil && (*ShopID) == 0,
	}
}

func (ft ProductSourceCategoryFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft ProductSourceCategoryFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft ProductSourceCategoryFilters) ByStatus(Status int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft ProductSourceCategoryFilters) ByStatusPtr(Status *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft ProductSourceCategoryFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ProductSourceCategoryFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft ProductSourceCategoryFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft ProductSourceCategoryFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft ProductSourceCategoryFilters) ByDeletedAt(DeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt.IsZero(),
	}
}

func (ft ProductSourceCategoryFilters) ByDeletedAtPtr(DeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt == nil,
		IsZero: DeletedAt != nil && (*DeletedAt).IsZero(),
	}
}

type ProductFilters struct{ prefix string }

func NewProductFilters(prefix string) ProductFilters {
	return ProductFilters{prefix}
}

func (ft ProductFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ProductFilters) Prefix() string {
	return ft.prefix
}

func (ft ProductFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft ProductFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft ProductFilters) ByProductSourceID(ProductSourceID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == 0,
	}
}

func (ft ProductFilters) ByProductSourceIDPtr(ProductSourceID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == nil,
		IsZero: ProductSourceID != nil && (*ProductSourceID) == 0,
	}
}

func (ft ProductFilters) BySupplierID(SupplierID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == 0,
	}
}

func (ft ProductFilters) BySupplierIDPtr(SupplierID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == nil,
		IsZero: SupplierID != nil && (*SupplierID) == 0,
	}
}

func (ft ProductFilters) ByProductSourceCategoryID(ProductSourceCategoryID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_category_id",
		Value:  ProductSourceCategoryID,
		IsNil:  ProductSourceCategoryID == "",
	}
}

func (ft ProductFilters) ByProductSourceCategoryIDPtr(ProductSourceCategoryID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_category_id",
		Value:  ProductSourceCategoryID,
		IsNil:  ProductSourceCategoryID == nil,
		IsZero: ProductSourceCategoryID != nil && (*ProductSourceCategoryID) == "",
	}
}

func (ft ProductFilters) ByEtopCategoryID(EtopCategoryID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "etop_category_id",
		Value:  EtopCategoryID,
		IsNil:  EtopCategoryID == 0,
	}
}

func (ft ProductFilters) ByEtopCategoryIDPtr(EtopCategoryID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "etop_category_id",
		Value:  EtopCategoryID,
		IsNil:  EtopCategoryID == nil,
		IsZero: EtopCategoryID != nil && (*EtopCategoryID) == 0,
	}
}

func (ft ProductFilters) ByProductBrandID(ProductBrandID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_brand_id",
		Value:  ProductBrandID,
		IsNil:  ProductBrandID == 0,
	}
}

func (ft ProductFilters) ByProductBrandIDPtr(ProductBrandID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_brand_id",
		Value:  ProductBrandID,
		IsNil:  ProductBrandID == nil,
		IsZero: ProductBrandID != nil && (*ProductBrandID) == 0,
	}
}

func (ft ProductFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft ProductFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft ProductFilters) ByShortDesc(ShortDesc string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == "",
	}
}

func (ft ProductFilters) ByShortDescPtr(ShortDesc *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == nil,
		IsZero: ShortDesc != nil && (*ShortDesc) == "",
	}
}

func (ft ProductFilters) ByDescription(Description string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == "",
	}
}

func (ft ProductFilters) ByDescriptionPtr(Description *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == nil,
		IsZero: Description != nil && (*Description) == "",
	}
}

func (ft ProductFilters) ByDescHTML(DescHTML string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == "",
	}
}

func (ft ProductFilters) ByDescHTMLPtr(DescHTML *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == nil,
		IsZero: DescHTML != nil && (*DescHTML) == "",
	}
}

func (ft ProductFilters) ByEdName(EdName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_name",
		Value:  EdName,
		IsNil:  EdName == "",
	}
}

func (ft ProductFilters) ByEdNamePtr(EdName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_name",
		Value:  EdName,
		IsNil:  EdName == nil,
		IsZero: EdName != nil && (*EdName) == "",
	}
}

func (ft ProductFilters) ByEdShortDesc(EdShortDesc string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_short_desc",
		Value:  EdShortDesc,
		IsNil:  EdShortDesc == "",
	}
}

func (ft ProductFilters) ByEdShortDescPtr(EdShortDesc *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_short_desc",
		Value:  EdShortDesc,
		IsNil:  EdShortDesc == nil,
		IsZero: EdShortDesc != nil && (*EdShortDesc) == "",
	}
}

func (ft ProductFilters) ByEdDescription(EdDescription string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_description",
		Value:  EdDescription,
		IsNil:  EdDescription == "",
	}
}

func (ft ProductFilters) ByEdDescriptionPtr(EdDescription *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_description",
		Value:  EdDescription,
		IsNil:  EdDescription == nil,
		IsZero: EdDescription != nil && (*EdDescription) == "",
	}
}

func (ft ProductFilters) ByEdDescHTML(EdDescHTML string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_desc_html",
		Value:  EdDescHTML,
		IsNil:  EdDescHTML == "",
	}
}

func (ft ProductFilters) ByEdDescHTMLPtr(EdDescHTML *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_desc_html",
		Value:  EdDescHTML,
		IsNil:  EdDescHTML == nil,
		IsZero: EdDescHTML != nil && (*EdDescHTML) == "",
	}
}

func (ft ProductFilters) ByUnit(Unit string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "unit",
		Value:  Unit,
		IsNil:  Unit == "",
	}
}

func (ft ProductFilters) ByUnitPtr(Unit *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "unit",
		Value:  Unit,
		IsNil:  Unit == nil,
		IsZero: Unit != nil && (*Unit) == "",
	}
}

func (ft ProductFilters) ByStatus(Status m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft ProductFilters) ByStatusPtr(Status *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft ProductFilters) ByCode(Code string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "code",
		Value:  Code,
		IsNil:  Code == "",
	}
}

func (ft ProductFilters) ByCodePtr(Code *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "code",
		Value:  Code,
		IsNil:  Code == nil,
		IsZero: Code != nil && (*Code) == "",
	}
}

func (ft ProductFilters) ByEdCode(EdCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_code",
		Value:  EdCode,
		IsNil:  EdCode == "",
	}
}

func (ft ProductFilters) ByEdCodePtr(EdCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_code",
		Value:  EdCode,
		IsNil:  EdCode == nil,
		IsZero: EdCode != nil && (*EdCode) == "",
	}
}

func (ft ProductFilters) ByQuantityAvailable(QuantityAvailable int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "quantity_available",
		Value:  QuantityAvailable,
		IsNil:  QuantityAvailable == 0,
	}
}

func (ft ProductFilters) ByQuantityAvailablePtr(QuantityAvailable *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "quantity_available",
		Value:  QuantityAvailable,
		IsNil:  QuantityAvailable == nil,
		IsZero: QuantityAvailable != nil && (*QuantityAvailable) == 0,
	}
}

func (ft ProductFilters) ByQuantityOnHand(QuantityOnHand int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "quantity_on_hand",
		Value:  QuantityOnHand,
		IsNil:  QuantityOnHand == 0,
	}
}

func (ft ProductFilters) ByQuantityOnHandPtr(QuantityOnHand *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "quantity_on_hand",
		Value:  QuantityOnHand,
		IsNil:  QuantityOnHand == nil,
		IsZero: QuantityOnHand != nil && (*QuantityOnHand) == 0,
	}
}

func (ft ProductFilters) ByQuantityReserved(QuantityReserved int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "quantity_reserved",
		Value:  QuantityReserved,
		IsNil:  QuantityReserved == 0,
	}
}

func (ft ProductFilters) ByQuantityReservedPtr(QuantityReserved *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "quantity_reserved",
		Value:  QuantityReserved,
		IsNil:  QuantityReserved == nil,
		IsZero: QuantityReserved != nil && (*QuantityReserved) == 0,
	}
}

func (ft ProductFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ProductFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft ProductFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft ProductFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft ProductFilters) ByNameNorm(NameNorm string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name_norm",
		Value:  NameNorm,
		IsNil:  NameNorm == "",
	}
}

func (ft ProductFilters) ByNameNormPtr(NameNorm *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name_norm",
		Value:  NameNorm,
		IsNil:  NameNorm == nil,
		IsZero: NameNorm != nil && (*NameNorm) == "",
	}
}

func (ft ProductFilters) ByNameNormUa(NameNormUa string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name_norm_ua",
		Value:  NameNormUa,
		IsNil:  NameNormUa == "",
	}
}

func (ft ProductFilters) ByNameNormUaPtr(NameNormUa *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name_norm_ua",
		Value:  NameNormUa,
		IsNil:  NameNormUa == nil,
		IsZero: NameNormUa != nil && (*NameNormUa) == "",
	}
}

type ProductExternalFilters struct{ prefix string }

func NewProductExternalFilters(prefix string) ProductExternalFilters {
	return ProductExternalFilters{prefix}
}

func (ft ProductExternalFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ProductExternalFilters) Prefix() string {
	return ft.prefix
}

func (ft ProductExternalFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft ProductExternalFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft ProductExternalFilters) ByProductSourceID(ProductSourceID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == 0,
	}
}

func (ft ProductExternalFilters) ByProductSourceIDPtr(ProductSourceID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == nil,
		IsZero: ProductSourceID != nil && (*ProductSourceID) == 0,
	}
}

func (ft ProductExternalFilters) ByProductSourceType(ProductSourceType string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_type",
		Value:  ProductSourceType,
		IsNil:  ProductSourceType == "",
	}
}

func (ft ProductExternalFilters) ByProductSourceTypePtr(ProductSourceType *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_type",
		Value:  ProductSourceType,
		IsNil:  ProductSourceType == nil,
		IsZero: ProductSourceType != nil && (*ProductSourceType) == "",
	}
}

func (ft ProductExternalFilters) ByExternalID(ExternalID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_id",
		Value:  ExternalID,
		IsNil:  ExternalID == "",
	}
}

func (ft ProductExternalFilters) ByExternalIDPtr(ExternalID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_id",
		Value:  ExternalID,
		IsNil:  ExternalID == nil,
		IsZero: ExternalID != nil && (*ExternalID) == "",
	}
}

func (ft ProductExternalFilters) ByExternalName(ExternalName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_name",
		Value:  ExternalName,
		IsNil:  ExternalName == "",
	}
}

func (ft ProductExternalFilters) ByExternalNamePtr(ExternalName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_name",
		Value:  ExternalName,
		IsNil:  ExternalName == nil,
		IsZero: ExternalName != nil && (*ExternalName) == "",
	}
}

func (ft ProductExternalFilters) ByExternalCode(ExternalCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_code",
		Value:  ExternalCode,
		IsNil:  ExternalCode == "",
	}
}

func (ft ProductExternalFilters) ByExternalCodePtr(ExternalCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_code",
		Value:  ExternalCode,
		IsNil:  ExternalCode == nil,
		IsZero: ExternalCode != nil && (*ExternalCode) == "",
	}
}

func (ft ProductExternalFilters) ByExternalCategoryID(ExternalCategoryID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_category_id",
		Value:  ExternalCategoryID,
		IsNil:  ExternalCategoryID == "",
	}
}

func (ft ProductExternalFilters) ByExternalCategoryIDPtr(ExternalCategoryID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_category_id",
		Value:  ExternalCategoryID,
		IsNil:  ExternalCategoryID == nil,
		IsZero: ExternalCategoryID != nil && (*ExternalCategoryID) == "",
	}
}

func (ft ProductExternalFilters) ByExternalDescription(ExternalDescription string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_description",
		Value:  ExternalDescription,
		IsNil:  ExternalDescription == "",
	}
}

func (ft ProductExternalFilters) ByExternalDescriptionPtr(ExternalDescription *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_description",
		Value:  ExternalDescription,
		IsNil:  ExternalDescription == nil,
		IsZero: ExternalDescription != nil && (*ExternalDescription) == "",
	}
}

func (ft ProductExternalFilters) ByExternalUnit(ExternalUnit string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_unit",
		Value:  ExternalUnit,
		IsNil:  ExternalUnit == "",
	}
}

func (ft ProductExternalFilters) ByExternalUnitPtr(ExternalUnit *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_unit",
		Value:  ExternalUnit,
		IsNil:  ExternalUnit == nil,
		IsZero: ExternalUnit != nil && (*ExternalUnit) == "",
	}
}

func (ft ProductExternalFilters) ByExternalStatus(ExternalStatus m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_status",
		Value:  ExternalStatus,
		IsNil:  ExternalStatus == 0,
	}
}

func (ft ProductExternalFilters) ByExternalStatusPtr(ExternalStatus *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_status",
		Value:  ExternalStatus,
		IsNil:  ExternalStatus == nil,
		IsZero: ExternalStatus != nil && (*ExternalStatus) == 0,
	}
}

func (ft ProductExternalFilters) ByExternalCreatedAt(ExternalCreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_created_at",
		Value:  ExternalCreatedAt,
		IsNil:  ExternalCreatedAt.IsZero(),
	}
}

func (ft ProductExternalFilters) ByExternalCreatedAtPtr(ExternalCreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_created_at",
		Value:  ExternalCreatedAt,
		IsNil:  ExternalCreatedAt == nil,
		IsZero: ExternalCreatedAt != nil && (*ExternalCreatedAt).IsZero(),
	}
}

func (ft ProductExternalFilters) ByExternalUpdatedAt(ExternalUpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_updated_at",
		Value:  ExternalUpdatedAt,
		IsNil:  ExternalUpdatedAt.IsZero(),
	}
}

func (ft ProductExternalFilters) ByExternalUpdatedAtPtr(ExternalUpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_updated_at",
		Value:  ExternalUpdatedAt,
		IsNil:  ExternalUpdatedAt == nil,
		IsZero: ExternalUpdatedAt != nil && (*ExternalUpdatedAt).IsZero(),
	}
}

func (ft ProductExternalFilters) ByExternalDeletedAt(ExternalDeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_deleted_at",
		Value:  ExternalDeletedAt,
		IsNil:  ExternalDeletedAt.IsZero(),
	}
}

func (ft ProductExternalFilters) ByExternalDeletedAtPtr(ExternalDeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_deleted_at",
		Value:  ExternalDeletedAt,
		IsNil:  ExternalDeletedAt == nil,
		IsZero: ExternalDeletedAt != nil && (*ExternalDeletedAt).IsZero(),
	}
}

func (ft ProductExternalFilters) ByLastSyncAt(LastSyncAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt.IsZero(),
	}
}

func (ft ProductExternalFilters) ByLastSyncAtPtr(LastSyncAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt == nil,
		IsZero: LastSyncAt != nil && (*LastSyncAt).IsZero(),
	}
}

type VariantFilters struct{ prefix string }

func NewVariantFilters(prefix string) VariantFilters {
	return VariantFilters{prefix}
}

func (ft VariantFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft VariantFilters) Prefix() string {
	return ft.prefix
}

func (ft VariantFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft VariantFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft VariantFilters) ByProductID(ProductID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == 0,
	}
}

func (ft VariantFilters) ByProductIDPtr(ProductID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == nil,
		IsZero: ProductID != nil && (*ProductID) == 0,
	}
}

func (ft VariantFilters) ByProductSourceID(ProductSourceID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == 0,
	}
}

func (ft VariantFilters) ByProductSourceIDPtr(ProductSourceID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == nil,
		IsZero: ProductSourceID != nil && (*ProductSourceID) == 0,
	}
}

func (ft VariantFilters) BySupplierID(SupplierID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == 0,
	}
}

func (ft VariantFilters) BySupplierIDPtr(SupplierID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == nil,
		IsZero: SupplierID != nil && (*SupplierID) == 0,
	}
}

func (ft VariantFilters) ByProductSourceCategoryID(ProductSourceCategoryID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_category_id",
		Value:  ProductSourceCategoryID,
		IsNil:  ProductSourceCategoryID == 0,
	}
}

func (ft VariantFilters) ByProductSourceCategoryIDPtr(ProductSourceCategoryID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_category_id",
		Value:  ProductSourceCategoryID,
		IsNil:  ProductSourceCategoryID == nil,
		IsZero: ProductSourceCategoryID != nil && (*ProductSourceCategoryID) == 0,
	}
}

func (ft VariantFilters) ByEtopCategoryID(EtopCategoryID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "etop_category_id",
		Value:  EtopCategoryID,
		IsNil:  EtopCategoryID == 0,
	}
}

func (ft VariantFilters) ByEtopCategoryIDPtr(EtopCategoryID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "etop_category_id",
		Value:  EtopCategoryID,
		IsNil:  EtopCategoryID == nil,
		IsZero: EtopCategoryID != nil && (*EtopCategoryID) == 0,
	}
}

func (ft VariantFilters) ByProductBrandID(ProductBrandID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_brand_id",
		Value:  ProductBrandID,
		IsNil:  ProductBrandID == 0,
	}
}

func (ft VariantFilters) ByProductBrandIDPtr(ProductBrandID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_brand_id",
		Value:  ProductBrandID,
		IsNil:  ProductBrandID == nil,
		IsZero: ProductBrandID != nil && (*ProductBrandID) == 0,
	}
}

func (ft VariantFilters) ByShortDesc(ShortDesc string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == "",
	}
}

func (ft VariantFilters) ByShortDescPtr(ShortDesc *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == nil,
		IsZero: ShortDesc != nil && (*ShortDesc) == "",
	}
}

func (ft VariantFilters) ByDescription(Description string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == "",
	}
}

func (ft VariantFilters) ByDescriptionPtr(Description *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == nil,
		IsZero: Description != nil && (*Description) == "",
	}
}

func (ft VariantFilters) ByDescHTML(DescHTML string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == "",
	}
}

func (ft VariantFilters) ByDescHTMLPtr(DescHTML *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == nil,
		IsZero: DescHTML != nil && (*DescHTML) == "",
	}
}

func (ft VariantFilters) ByEdName(EdName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_name",
		Value:  EdName,
		IsNil:  EdName == "",
	}
}

func (ft VariantFilters) ByEdNamePtr(EdName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_name",
		Value:  EdName,
		IsNil:  EdName == nil,
		IsZero: EdName != nil && (*EdName) == "",
	}
}

func (ft VariantFilters) ByEdShortDesc(EdShortDesc string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_short_desc",
		Value:  EdShortDesc,
		IsNil:  EdShortDesc == "",
	}
}

func (ft VariantFilters) ByEdShortDescPtr(EdShortDesc *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_short_desc",
		Value:  EdShortDesc,
		IsNil:  EdShortDesc == nil,
		IsZero: EdShortDesc != nil && (*EdShortDesc) == "",
	}
}

func (ft VariantFilters) ByEdDescription(EdDescription string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_description",
		Value:  EdDescription,
		IsNil:  EdDescription == "",
	}
}

func (ft VariantFilters) ByEdDescriptionPtr(EdDescription *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_description",
		Value:  EdDescription,
		IsNil:  EdDescription == nil,
		IsZero: EdDescription != nil && (*EdDescription) == "",
	}
}

func (ft VariantFilters) ByEdDescHTML(EdDescHTML string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_desc_html",
		Value:  EdDescHTML,
		IsNil:  EdDescHTML == "",
	}
}

func (ft VariantFilters) ByEdDescHTMLPtr(EdDescHTML *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_desc_html",
		Value:  EdDescHTML,
		IsNil:  EdDescHTML == nil,
		IsZero: EdDescHTML != nil && (*EdDescHTML) == "",
	}
}

func (ft VariantFilters) ByDescNorm(DescNorm string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "desc_norm",
		Value:  DescNorm,
		IsNil:  DescNorm == "",
	}
}

func (ft VariantFilters) ByDescNormPtr(DescNorm *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "desc_norm",
		Value:  DescNorm,
		IsNil:  DescNorm == nil,
		IsZero: DescNorm != nil && (*DescNorm) == "",
	}
}

func (ft VariantFilters) ByAttrNormKv(AttrNormKv string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "attr_norm_kv",
		Value:  AttrNormKv,
		IsNil:  AttrNormKv == "",
	}
}

func (ft VariantFilters) ByAttrNormKvPtr(AttrNormKv *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "attr_norm_kv",
		Value:  AttrNormKv,
		IsNil:  AttrNormKv == nil,
		IsZero: AttrNormKv != nil && (*AttrNormKv) == "",
	}
}

func (ft VariantFilters) ByStatus(Status m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft VariantFilters) ByStatusPtr(Status *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft VariantFilters) ByEtopStatus(EtopStatus m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "etop_status",
		Value:  EtopStatus,
		IsNil:  EtopStatus == 0,
	}
}

func (ft VariantFilters) ByEtopStatusPtr(EtopStatus *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "etop_status",
		Value:  EtopStatus,
		IsNil:  EtopStatus == nil,
		IsZero: EtopStatus != nil && (*EtopStatus) == 0,
	}
}

func (ft VariantFilters) ByEdStatus(EdStatus m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_status",
		Value:  EdStatus,
		IsNil:  EdStatus == 0,
	}
}

func (ft VariantFilters) ByEdStatusPtr(EdStatus *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_status",
		Value:  EdStatus,
		IsNil:  EdStatus == nil,
		IsZero: EdStatus != nil && (*EdStatus) == 0,
	}
}

func (ft VariantFilters) ByCode(Code string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "code",
		Value:  Code,
		IsNil:  Code == "",
	}
}

func (ft VariantFilters) ByCodePtr(Code *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "code",
		Value:  Code,
		IsNil:  Code == nil,
		IsZero: Code != nil && (*Code) == "",
	}
}

func (ft VariantFilters) ByEdCode(EdCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_code",
		Value:  EdCode,
		IsNil:  EdCode == "",
	}
}

func (ft VariantFilters) ByEdCodePtr(EdCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_code",
		Value:  EdCode,
		IsNil:  EdCode == nil,
		IsZero: EdCode != nil && (*EdCode) == "",
	}
}

func (ft VariantFilters) ByWholesalePrice0(WholesalePrice0 int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "wholesale_price_0",
		Value:  WholesalePrice0,
		IsNil:  WholesalePrice0 == 0,
	}
}

func (ft VariantFilters) ByWholesalePrice0Ptr(WholesalePrice0 *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "wholesale_price_0",
		Value:  WholesalePrice0,
		IsNil:  WholesalePrice0 == nil,
		IsZero: WholesalePrice0 != nil && (*WholesalePrice0) == 0,
	}
}

func (ft VariantFilters) ByWholesalePrice(WholesalePrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "wholesale_price",
		Value:  WholesalePrice,
		IsNil:  WholesalePrice == 0,
	}
}

func (ft VariantFilters) ByWholesalePricePtr(WholesalePrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "wholesale_price",
		Value:  WholesalePrice,
		IsNil:  WholesalePrice == nil,
		IsZero: WholesalePrice != nil && (*WholesalePrice) == 0,
	}
}

func (ft VariantFilters) ByListPrice(ListPrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "list_price",
		Value:  ListPrice,
		IsNil:  ListPrice == 0,
	}
}

func (ft VariantFilters) ByListPricePtr(ListPrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "list_price",
		Value:  ListPrice,
		IsNil:  ListPrice == nil,
		IsZero: ListPrice != nil && (*ListPrice) == 0,
	}
}

func (ft VariantFilters) ByRetailPriceMin(RetailPriceMin int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "retail_price_min",
		Value:  RetailPriceMin,
		IsNil:  RetailPriceMin == 0,
	}
}

func (ft VariantFilters) ByRetailPriceMinPtr(RetailPriceMin *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "retail_price_min",
		Value:  RetailPriceMin,
		IsNil:  RetailPriceMin == nil,
		IsZero: RetailPriceMin != nil && (*RetailPriceMin) == 0,
	}
}

func (ft VariantFilters) ByRetailPriceMax(RetailPriceMax int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "retail_price_max",
		Value:  RetailPriceMax,
		IsNil:  RetailPriceMax == 0,
	}
}

func (ft VariantFilters) ByRetailPriceMaxPtr(RetailPriceMax *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "retail_price_max",
		Value:  RetailPriceMax,
		IsNil:  RetailPriceMax == nil,
		IsZero: RetailPriceMax != nil && (*RetailPriceMax) == 0,
	}
}

func (ft VariantFilters) ByEdWholesalePrice0(EdWholesalePrice0 int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_wholesale_price_0",
		Value:  EdWholesalePrice0,
		IsNil:  EdWholesalePrice0 == 0,
	}
}

func (ft VariantFilters) ByEdWholesalePrice0Ptr(EdWholesalePrice0 *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_wholesale_price_0",
		Value:  EdWholesalePrice0,
		IsNil:  EdWholesalePrice0 == nil,
		IsZero: EdWholesalePrice0 != nil && (*EdWholesalePrice0) == 0,
	}
}

func (ft VariantFilters) ByEdWholesalePrice(EdWholesalePrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_wholesale_price",
		Value:  EdWholesalePrice,
		IsNil:  EdWholesalePrice == 0,
	}
}

func (ft VariantFilters) ByEdWholesalePricePtr(EdWholesalePrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_wholesale_price",
		Value:  EdWholesalePrice,
		IsNil:  EdWholesalePrice == nil,
		IsZero: EdWholesalePrice != nil && (*EdWholesalePrice) == 0,
	}
}

func (ft VariantFilters) ByEdListPrice(EdListPrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_list_price",
		Value:  EdListPrice,
		IsNil:  EdListPrice == 0,
	}
}

func (ft VariantFilters) ByEdListPricePtr(EdListPrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_list_price",
		Value:  EdListPrice,
		IsNil:  EdListPrice == nil,
		IsZero: EdListPrice != nil && (*EdListPrice) == 0,
	}
}

func (ft VariantFilters) ByEdRetailPriceMin(EdRetailPriceMin int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_retail_price_min",
		Value:  EdRetailPriceMin,
		IsNil:  EdRetailPriceMin == 0,
	}
}

func (ft VariantFilters) ByEdRetailPriceMinPtr(EdRetailPriceMin *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_retail_price_min",
		Value:  EdRetailPriceMin,
		IsNil:  EdRetailPriceMin == nil,
		IsZero: EdRetailPriceMin != nil && (*EdRetailPriceMin) == 0,
	}
}

func (ft VariantFilters) ByEdRetailPriceMax(EdRetailPriceMax int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_retail_price_max",
		Value:  EdRetailPriceMax,
		IsNil:  EdRetailPriceMax == 0,
	}
}

func (ft VariantFilters) ByEdRetailPriceMaxPtr(EdRetailPriceMax *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_retail_price_max",
		Value:  EdRetailPriceMax,
		IsNil:  EdRetailPriceMax == nil,
		IsZero: EdRetailPriceMax != nil && (*EdRetailPriceMax) == 0,
	}
}

func (ft VariantFilters) ByQuantityAvailable(QuantityAvailable int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "quantity_available",
		Value:  QuantityAvailable,
		IsNil:  QuantityAvailable == 0,
	}
}

func (ft VariantFilters) ByQuantityAvailablePtr(QuantityAvailable *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "quantity_available",
		Value:  QuantityAvailable,
		IsNil:  QuantityAvailable == nil,
		IsZero: QuantityAvailable != nil && (*QuantityAvailable) == 0,
	}
}

func (ft VariantFilters) ByQuantityOnHand(QuantityOnHand int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "quantity_on_hand",
		Value:  QuantityOnHand,
		IsNil:  QuantityOnHand == 0,
	}
}

func (ft VariantFilters) ByQuantityOnHandPtr(QuantityOnHand *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "quantity_on_hand",
		Value:  QuantityOnHand,
		IsNil:  QuantityOnHand == nil,
		IsZero: QuantityOnHand != nil && (*QuantityOnHand) == 0,
	}
}

func (ft VariantFilters) ByQuantityReserved(QuantityReserved int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "quantity_reserved",
		Value:  QuantityReserved,
		IsNil:  QuantityReserved == 0,
	}
}

func (ft VariantFilters) ByQuantityReservedPtr(QuantityReserved *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "quantity_reserved",
		Value:  QuantityReserved,
		IsNil:  QuantityReserved == nil,
		IsZero: QuantityReserved != nil && (*QuantityReserved) == 0,
	}
}

func (ft VariantFilters) ByCostPrice(CostPrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "cost_price",
		Value:  CostPrice,
		IsNil:  CostPrice == 0,
	}
}

func (ft VariantFilters) ByCostPricePtr(CostPrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "cost_price",
		Value:  CostPrice,
		IsNil:  CostPrice == nil,
		IsZero: CostPrice != nil && (*CostPrice) == 0,
	}
}

func (ft VariantFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft VariantFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft VariantFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft VariantFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

type VariantExternalFilters struct{ prefix string }

func NewVariantExternalFilters(prefix string) VariantExternalFilters {
	return VariantExternalFilters{prefix}
}

func (ft VariantExternalFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft VariantExternalFilters) Prefix() string {
	return ft.prefix
}

func (ft VariantExternalFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft VariantExternalFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft VariantExternalFilters) ByProductSourceID(ProductSourceID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == 0,
	}
}

func (ft VariantExternalFilters) ByProductSourceIDPtr(ProductSourceID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_id",
		Value:  ProductSourceID,
		IsNil:  ProductSourceID == nil,
		IsZero: ProductSourceID != nil && (*ProductSourceID) == 0,
	}
}

func (ft VariantExternalFilters) ByProductSourceType(ProductSourceType string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_source_type",
		Value:  ProductSourceType,
		IsNil:  ProductSourceType == "",
	}
}

func (ft VariantExternalFilters) ByProductSourceTypePtr(ProductSourceType *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_source_type",
		Value:  ProductSourceType,
		IsNil:  ProductSourceType == nil,
		IsZero: ProductSourceType != nil && (*ProductSourceType) == "",
	}
}

func (ft VariantExternalFilters) ByExternalID(ExternalID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_id",
		Value:  ExternalID,
		IsNil:  ExternalID == "",
	}
}

func (ft VariantExternalFilters) ByExternalIDPtr(ExternalID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_id",
		Value:  ExternalID,
		IsNil:  ExternalID == nil,
		IsZero: ExternalID != nil && (*ExternalID) == "",
	}
}

func (ft VariantExternalFilters) ByExternalName(ExternalName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_name",
		Value:  ExternalName,
		IsNil:  ExternalName == "",
	}
}

func (ft VariantExternalFilters) ByExternalNamePtr(ExternalName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_name",
		Value:  ExternalName,
		IsNil:  ExternalName == nil,
		IsZero: ExternalName != nil && (*ExternalName) == "",
	}
}

func (ft VariantExternalFilters) ByExternalCode(ExternalCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_code",
		Value:  ExternalCode,
		IsNil:  ExternalCode == "",
	}
}

func (ft VariantExternalFilters) ByExternalCodePtr(ExternalCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_code",
		Value:  ExternalCode,
		IsNil:  ExternalCode == nil,
		IsZero: ExternalCode != nil && (*ExternalCode) == "",
	}
}

func (ft VariantExternalFilters) ByExternalCategoryID(ExternalCategoryID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_category_id",
		Value:  ExternalCategoryID,
		IsNil:  ExternalCategoryID == "",
	}
}

func (ft VariantExternalFilters) ByExternalCategoryIDPtr(ExternalCategoryID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_category_id",
		Value:  ExternalCategoryID,
		IsNil:  ExternalCategoryID == nil,
		IsZero: ExternalCategoryID != nil && (*ExternalCategoryID) == "",
	}
}

func (ft VariantExternalFilters) ByExternalDescription(ExternalDescription string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_description",
		Value:  ExternalDescription,
		IsNil:  ExternalDescription == "",
	}
}

func (ft VariantExternalFilters) ByExternalDescriptionPtr(ExternalDescription *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_description",
		Value:  ExternalDescription,
		IsNil:  ExternalDescription == nil,
		IsZero: ExternalDescription != nil && (*ExternalDescription) == "",
	}
}

func (ft VariantExternalFilters) ByExternalUnit(ExternalUnit string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_unit",
		Value:  ExternalUnit,
		IsNil:  ExternalUnit == "",
	}
}

func (ft VariantExternalFilters) ByExternalUnitPtr(ExternalUnit *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_unit",
		Value:  ExternalUnit,
		IsNil:  ExternalUnit == nil,
		IsZero: ExternalUnit != nil && (*ExternalUnit) == "",
	}
}

func (ft VariantExternalFilters) ByExternalStatus(ExternalStatus m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_status",
		Value:  ExternalStatus,
		IsNil:  ExternalStatus == 0,
	}
}

func (ft VariantExternalFilters) ByExternalStatusPtr(ExternalStatus *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_status",
		Value:  ExternalStatus,
		IsNil:  ExternalStatus == nil,
		IsZero: ExternalStatus != nil && (*ExternalStatus) == 0,
	}
}

func (ft VariantExternalFilters) ByExternalCreatedAt(ExternalCreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_created_at",
		Value:  ExternalCreatedAt,
		IsNil:  ExternalCreatedAt.IsZero(),
	}
}

func (ft VariantExternalFilters) ByExternalCreatedAtPtr(ExternalCreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_created_at",
		Value:  ExternalCreatedAt,
		IsNil:  ExternalCreatedAt == nil,
		IsZero: ExternalCreatedAt != nil && (*ExternalCreatedAt).IsZero(),
	}
}

func (ft VariantExternalFilters) ByExternalUpdatedAt(ExternalUpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_updated_at",
		Value:  ExternalUpdatedAt,
		IsNil:  ExternalUpdatedAt.IsZero(),
	}
}

func (ft VariantExternalFilters) ByExternalUpdatedAtPtr(ExternalUpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_updated_at",
		Value:  ExternalUpdatedAt,
		IsNil:  ExternalUpdatedAt == nil,
		IsZero: ExternalUpdatedAt != nil && (*ExternalUpdatedAt).IsZero(),
	}
}

func (ft VariantExternalFilters) ByExternalDeletedAt(ExternalDeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_deleted_at",
		Value:  ExternalDeletedAt,
		IsNil:  ExternalDeletedAt.IsZero(),
	}
}

func (ft VariantExternalFilters) ByExternalDeletedAtPtr(ExternalDeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_deleted_at",
		Value:  ExternalDeletedAt,
		IsNil:  ExternalDeletedAt == nil,
		IsZero: ExternalDeletedAt != nil && (*ExternalDeletedAt).IsZero(),
	}
}

func (ft VariantExternalFilters) ByLastSyncAt(LastSyncAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt.IsZero(),
	}
}

func (ft VariantExternalFilters) ByLastSyncAtPtr(LastSyncAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt == nil,
		IsZero: LastSyncAt != nil && (*LastSyncAt).IsZero(),
	}
}

func (ft VariantExternalFilters) ByExternalProductID(ExternalProductID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_product_id",
		Value:  ExternalProductID,
		IsNil:  ExternalProductID == "",
	}
}

func (ft VariantExternalFilters) ByExternalProductIDPtr(ExternalProductID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_product_id",
		Value:  ExternalProductID,
		IsNil:  ExternalProductID == nil,
		IsZero: ExternalProductID != nil && (*ExternalProductID) == "",
	}
}

func (ft VariantExternalFilters) ByExternalPrice(ExternalPrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_price",
		Value:  ExternalPrice,
		IsNil:  ExternalPrice == 0,
	}
}

func (ft VariantExternalFilters) ByExternalPricePtr(ExternalPrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_price",
		Value:  ExternalPrice,
		IsNil:  ExternalPrice == nil,
		IsZero: ExternalPrice != nil && (*ExternalPrice) == 0,
	}
}

func (ft VariantExternalFilters) ByExternalBaseUnitID(ExternalBaseUnitID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_base_unit_id",
		Value:  ExternalBaseUnitID,
		IsNil:  ExternalBaseUnitID == "",
	}
}

func (ft VariantExternalFilters) ByExternalBaseUnitIDPtr(ExternalBaseUnitID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_base_unit_id",
		Value:  ExternalBaseUnitID,
		IsNil:  ExternalBaseUnitID == nil,
		IsZero: ExternalBaseUnitID != nil && (*ExternalBaseUnitID) == "",
	}
}

func (ft VariantExternalFilters) ByExternalUnitConv(ExternalUnitConv float64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_unit_conv",
		Value:  ExternalUnitConv,
		IsNil:  ExternalUnitConv == 0,
	}
}

func (ft VariantExternalFilters) ByExternalUnitConvPtr(ExternalUnitConv *float64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_unit_conv",
		Value:  ExternalUnitConv,
		IsNil:  ExternalUnitConv == nil,
		IsZero: ExternalUnitConv != nil && (*ExternalUnitConv) == 0,
	}
}

type PriceDefFilters struct{ prefix string }

func NewPriceDefFilters(prefix string) PriceDefFilters {
	return PriceDefFilters{prefix}
}

func (ft PriceDefFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft PriceDefFilters) Prefix() string {
	return ft.prefix
}

func (ft PriceDefFilters) ByWholesalePrice0(WholesalePrice0 int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "wholesale_price_0",
		Value:  WholesalePrice0,
		IsNil:  WholesalePrice0 == 0,
	}
}

func (ft PriceDefFilters) ByWholesalePrice0Ptr(WholesalePrice0 *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "wholesale_price_0",
		Value:  WholesalePrice0,
		IsNil:  WholesalePrice0 == nil,
		IsZero: WholesalePrice0 != nil && (*WholesalePrice0) == 0,
	}
}

func (ft PriceDefFilters) ByWholesalePrice(WholesalePrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "wholesale_price",
		Value:  WholesalePrice,
		IsNil:  WholesalePrice == 0,
	}
}

func (ft PriceDefFilters) ByWholesalePricePtr(WholesalePrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "wholesale_price",
		Value:  WholesalePrice,
		IsNil:  WholesalePrice == nil,
		IsZero: WholesalePrice != nil && (*WholesalePrice) == 0,
	}
}

func (ft PriceDefFilters) ByListPrice(ListPrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "list_price",
		Value:  ListPrice,
		IsNil:  ListPrice == 0,
	}
}

func (ft PriceDefFilters) ByListPricePtr(ListPrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "list_price",
		Value:  ListPrice,
		IsNil:  ListPrice == nil,
		IsZero: ListPrice != nil && (*ListPrice) == 0,
	}
}

func (ft PriceDefFilters) ByRetailPriceMin(RetailPriceMin int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "retail_price_min",
		Value:  RetailPriceMin,
		IsNil:  RetailPriceMin == 0,
	}
}

func (ft PriceDefFilters) ByRetailPriceMinPtr(RetailPriceMin *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "retail_price_min",
		Value:  RetailPriceMin,
		IsNil:  RetailPriceMin == nil,
		IsZero: RetailPriceMin != nil && (*RetailPriceMin) == 0,
	}
}

func (ft PriceDefFilters) ByRetailPriceMax(RetailPriceMax int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "retail_price_max",
		Value:  RetailPriceMax,
		IsNil:  RetailPriceMax == 0,
	}
}

func (ft PriceDefFilters) ByRetailPriceMaxPtr(RetailPriceMax *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "retail_price_max",
		Value:  RetailPriceMax,
		IsNil:  RetailPriceMax == nil,
		IsZero: RetailPriceMax != nil && (*RetailPriceMax) == 0,
	}
}

type VariantQuantityFilters struct{ prefix string }

func NewVariantQuantityFilters(prefix string) VariantQuantityFilters {
	return VariantQuantityFilters{prefix}
}

func (ft VariantQuantityFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft VariantQuantityFilters) Prefix() string {
	return ft.prefix
}

func (ft VariantQuantityFilters) ByQuantityAvailable(QuantityAvailable int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "quantity_available",
		Value:  QuantityAvailable,
		IsNil:  QuantityAvailable == 0,
	}
}

func (ft VariantQuantityFilters) ByQuantityAvailablePtr(QuantityAvailable *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "quantity_available",
		Value:  QuantityAvailable,
		IsNil:  QuantityAvailable == nil,
		IsZero: QuantityAvailable != nil && (*QuantityAvailable) == 0,
	}
}

func (ft VariantQuantityFilters) ByQuantityOnHand(QuantityOnHand int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "quantity_on_hand",
		Value:  QuantityOnHand,
		IsNil:  QuantityOnHand == 0,
	}
}

func (ft VariantQuantityFilters) ByQuantityOnHandPtr(QuantityOnHand *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "quantity_on_hand",
		Value:  QuantityOnHand,
		IsNil:  QuantityOnHand == nil,
		IsZero: QuantityOnHand != nil && (*QuantityOnHand) == 0,
	}
}

func (ft VariantQuantityFilters) ByQuantityReserved(QuantityReserved int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "quantity_reserved",
		Value:  QuantityReserved,
		IsNil:  QuantityReserved == 0,
	}
}

func (ft VariantQuantityFilters) ByQuantityReservedPtr(QuantityReserved *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "quantity_reserved",
		Value:  QuantityReserved,
		IsNil:  QuantityReserved == nil,
		IsZero: QuantityReserved != nil && (*QuantityReserved) == 0,
	}
}

type ShopVariantFilters struct{ prefix string }

func NewShopVariantFilters(prefix string) ShopVariantFilters {
	return ShopVariantFilters{prefix}
}

func (ft ShopVariantFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ShopVariantFilters) Prefix() string {
	return ft.prefix
}

func (ft ShopVariantFilters) ByShopID(ShopID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == 0,
	}
}

func (ft ShopVariantFilters) ByShopIDPtr(ShopID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == nil,
		IsZero: ShopID != nil && (*ShopID) == 0,
	}
}

func (ft ShopVariantFilters) ByVariantID(VariantID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "variant_id",
		Value:  VariantID,
		IsNil:  VariantID == 0,
	}
}

func (ft ShopVariantFilters) ByVariantIDPtr(VariantID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "variant_id",
		Value:  VariantID,
		IsNil:  VariantID == nil,
		IsZero: VariantID != nil && (*VariantID) == 0,
	}
}

func (ft ShopVariantFilters) ByCollectionID(CollectionID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "collection_id",
		Value:  CollectionID,
		IsNil:  CollectionID == 0,
	}
}

func (ft ShopVariantFilters) ByCollectionIDPtr(CollectionID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "collection_id",
		Value:  CollectionID,
		IsNil:  CollectionID == nil,
		IsZero: CollectionID != nil && (*CollectionID) == 0,
	}
}

func (ft ShopVariantFilters) ByProductID(ProductID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == 0,
	}
}

func (ft ShopVariantFilters) ByProductIDPtr(ProductID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == nil,
		IsZero: ProductID != nil && (*ProductID) == 0,
	}
}

func (ft ShopVariantFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft ShopVariantFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft ShopVariantFilters) ByDescription(Description string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == "",
	}
}

func (ft ShopVariantFilters) ByDescriptionPtr(Description *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == nil,
		IsZero: Description != nil && (*Description) == "",
	}
}

func (ft ShopVariantFilters) ByDescHTML(DescHTML string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == "",
	}
}

func (ft ShopVariantFilters) ByDescHTMLPtr(DescHTML *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == nil,
		IsZero: DescHTML != nil && (*DescHTML) == "",
	}
}

func (ft ShopVariantFilters) ByShortDesc(ShortDesc string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == "",
	}
}

func (ft ShopVariantFilters) ByShortDescPtr(ShortDesc *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == nil,
		IsZero: ShortDesc != nil && (*ShortDesc) == "",
	}
}

func (ft ShopVariantFilters) ByNote(Note string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "note",
		Value:  Note,
		IsNil:  Note == "",
	}
}

func (ft ShopVariantFilters) ByNotePtr(Note *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "note",
		Value:  Note,
		IsNil:  Note == nil,
		IsZero: Note != nil && (*Note) == "",
	}
}

func (ft ShopVariantFilters) ByRetailPrice(RetailPrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "retail_price",
		Value:  RetailPrice,
		IsNil:  RetailPrice == 0,
	}
}

func (ft ShopVariantFilters) ByRetailPricePtr(RetailPrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "retail_price",
		Value:  RetailPrice,
		IsNil:  RetailPrice == nil,
		IsZero: RetailPrice != nil && (*RetailPrice) == 0,
	}
}

func (ft ShopVariantFilters) ByStatus(Status m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft ShopVariantFilters) ByStatusPtr(Status *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft ShopVariantFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ShopVariantFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft ShopVariantFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft ShopVariantFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft ShopVariantFilters) ByNameNorm(NameNorm string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name_norm",
		Value:  NameNorm,
		IsNil:  NameNorm == "",
	}
}

func (ft ShopVariantFilters) ByNameNormPtr(NameNorm *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name_norm",
		Value:  NameNorm,
		IsNil:  NameNorm == nil,
		IsZero: NameNorm != nil && (*NameNorm) == "",
	}
}

type ShopProductFilters struct{ prefix string }

func NewShopProductFilters(prefix string) ShopProductFilters {
	return ShopProductFilters{prefix}
}

func (ft ShopProductFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ShopProductFilters) Prefix() string {
	return ft.prefix
}

func (ft ShopProductFilters) ByShopID(ShopID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == 0,
	}
}

func (ft ShopProductFilters) ByShopIDPtr(ShopID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == nil,
		IsZero: ShopID != nil && (*ShopID) == 0,
	}
}

func (ft ShopProductFilters) ByProductID(ProductID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == 0,
	}
}

func (ft ShopProductFilters) ByProductIDPtr(ProductID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == nil,
		IsZero: ProductID != nil && (*ProductID) == 0,
	}
}

func (ft ShopProductFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft ShopProductFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft ShopProductFilters) ByDescription(Description string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == "",
	}
}

func (ft ShopProductFilters) ByDescriptionPtr(Description *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == nil,
		IsZero: Description != nil && (*Description) == "",
	}
}

func (ft ShopProductFilters) ByDescHTML(DescHTML string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == "",
	}
}

func (ft ShopProductFilters) ByDescHTMLPtr(DescHTML *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == nil,
		IsZero: DescHTML != nil && (*DescHTML) == "",
	}
}

func (ft ShopProductFilters) ByShortDesc(ShortDesc string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == "",
	}
}

func (ft ShopProductFilters) ByShortDescPtr(ShortDesc *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == nil,
		IsZero: ShortDesc != nil && (*ShortDesc) == "",
	}
}

func (ft ShopProductFilters) ByNote(Note string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "note",
		Value:  Note,
		IsNil:  Note == "",
	}
}

func (ft ShopProductFilters) ByNotePtr(Note *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "note",
		Value:  Note,
		IsNil:  Note == nil,
		IsZero: Note != nil && (*Note) == "",
	}
}

func (ft ShopProductFilters) ByRetailPrice(RetailPrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "retail_price",
		Value:  RetailPrice,
		IsNil:  RetailPrice == 0,
	}
}

func (ft ShopProductFilters) ByRetailPricePtr(RetailPrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "retail_price",
		Value:  RetailPrice,
		IsNil:  RetailPrice == nil,
		IsZero: RetailPrice != nil && (*RetailPrice) == 0,
	}
}

func (ft ShopProductFilters) ByStatus(Status m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft ShopProductFilters) ByStatusPtr(Status *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft ShopProductFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ShopProductFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft ShopProductFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft ShopProductFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft ShopProductFilters) ByNameNorm(NameNorm string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name_norm",
		Value:  NameNorm,
		IsNil:  NameNorm == "",
	}
}

func (ft ShopProductFilters) ByNameNormPtr(NameNorm *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name_norm",
		Value:  NameNorm,
		IsNil:  NameNorm == nil,
		IsZero: NameNorm != nil && (*NameNorm) == "",
	}
}

type ShopCollectionFilters struct{ prefix string }

func NewShopCollectionFilters(prefix string) ShopCollectionFilters {
	return ShopCollectionFilters{prefix}
}

func (ft ShopCollectionFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ShopCollectionFilters) Prefix() string {
	return ft.prefix
}

func (ft ShopCollectionFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft ShopCollectionFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft ShopCollectionFilters) ByShopID(ShopID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == 0,
	}
}

func (ft ShopCollectionFilters) ByShopIDPtr(ShopID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == nil,
		IsZero: ShopID != nil && (*ShopID) == 0,
	}
}

func (ft ShopCollectionFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft ShopCollectionFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft ShopCollectionFilters) ByDescription(Description string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == "",
	}
}

func (ft ShopCollectionFilters) ByDescriptionPtr(Description *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "description",
		Value:  Description,
		IsNil:  Description == nil,
		IsZero: Description != nil && (*Description) == "",
	}
}

func (ft ShopCollectionFilters) ByDescHTML(DescHTML string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == "",
	}
}

func (ft ShopCollectionFilters) ByDescHTMLPtr(DescHTML *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "desc_html",
		Value:  DescHTML,
		IsNil:  DescHTML == nil,
		IsZero: DescHTML != nil && (*DescHTML) == "",
	}
}

func (ft ShopCollectionFilters) ByShortDesc(ShortDesc string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == "",
	}
}

func (ft ShopCollectionFilters) ByShortDescPtr(ShortDesc *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "short_desc",
		Value:  ShortDesc,
		IsNil:  ShortDesc == nil,
		IsZero: ShortDesc != nil && (*ShortDesc) == "",
	}
}

func (ft ShopCollectionFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ShopCollectionFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft ShopCollectionFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft ShopCollectionFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

type ProductShopCollectionFilters struct{ prefix string }

func NewProductShopCollectionFilters(prefix string) ProductShopCollectionFilters {
	return ProductShopCollectionFilters{prefix}
}

func (ft ProductShopCollectionFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ProductShopCollectionFilters) Prefix() string {
	return ft.prefix
}

func (ft ProductShopCollectionFilters) ByCollectionID(CollectionID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "collection_id",
		Value:  CollectionID,
		IsNil:  CollectionID == 0,
	}
}

func (ft ProductShopCollectionFilters) ByCollectionIDPtr(CollectionID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "collection_id",
		Value:  CollectionID,
		IsNil:  CollectionID == nil,
		IsZero: CollectionID != nil && (*CollectionID) == 0,
	}
}

func (ft ProductShopCollectionFilters) ByProductID(ProductID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == 0,
	}
}

func (ft ProductShopCollectionFilters) ByProductIDPtr(ProductID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == nil,
		IsZero: ProductID != nil && (*ProductID) == 0,
	}
}

func (ft ProductShopCollectionFilters) ByShopID(ShopID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == 0,
	}
}

func (ft ProductShopCollectionFilters) ByShopIDPtr(ShopID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == nil,
		IsZero: ShopID != nil && (*ShopID) == 0,
	}
}

func (ft ProductShopCollectionFilters) ByStatus(Status int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft ProductShopCollectionFilters) ByStatusPtr(Status *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft ProductShopCollectionFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ProductShopCollectionFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft ProductShopCollectionFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft ProductShopCollectionFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

type UserFilters struct{ prefix string }

func NewUserFilters(prefix string) UserFilters {
	return UserFilters{prefix}
}

func (ft UserFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft UserFilters) Prefix() string {
	return ft.prefix
}

func (ft UserFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft UserFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft UserFilters) ByFullName(FullName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "full_name",
		Value:  FullName,
		IsNil:  FullName == "",
	}
}

func (ft UserFilters) ByFullNamePtr(FullName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "full_name",
		Value:  FullName,
		IsNil:  FullName == nil,
		IsZero: FullName != nil && (*FullName) == "",
	}
}

func (ft UserFilters) ByShortName(ShortName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "short_name",
		Value:  ShortName,
		IsNil:  ShortName == "",
	}
}

func (ft UserFilters) ByShortNamePtr(ShortName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "short_name",
		Value:  ShortName,
		IsNil:  ShortName == nil,
		IsZero: ShortName != nil && (*ShortName) == "",
	}
}

func (ft UserFilters) ByEmail(Email string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "email",
		Value:  Email,
		IsNil:  Email == "",
	}
}

func (ft UserFilters) ByEmailPtr(Email *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "email",
		Value:  Email,
		IsNil:  Email == nil,
		IsZero: Email != nil && (*Email) == "",
	}
}

func (ft UserFilters) ByPhone(Phone string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "phone",
		Value:  Phone,
		IsNil:  Phone == "",
	}
}

func (ft UserFilters) ByPhonePtr(Phone *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "phone",
		Value:  Phone,
		IsNil:  Phone == nil,
		IsZero: Phone != nil && (*Phone) == "",
	}
}

func (ft UserFilters) ByStatus(Status m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft UserFilters) ByStatusPtr(Status *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft UserFilters) ByIdentifying(Identifying m.UserIdentifying) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "identifying",
		Value:  Identifying,
		IsNil:  Identifying == "",
	}
}

func (ft UserFilters) ByIdentifyingPtr(Identifying *m.UserIdentifying) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "identifying",
		Value:  Identifying,
		IsNil:  Identifying == nil,
		IsZero: Identifying != nil && (*Identifying) == "",
	}
}

func (ft UserFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft UserFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft UserFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft UserFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft UserFilters) ByAgreedTOSAt(AgreedTOSAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "agreed_tos_at",
		Value:  AgreedTOSAt,
		IsNil:  AgreedTOSAt.IsZero(),
	}
}

func (ft UserFilters) ByAgreedTOSAtPtr(AgreedTOSAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "agreed_tos_at",
		Value:  AgreedTOSAt,
		IsNil:  AgreedTOSAt == nil,
		IsZero: AgreedTOSAt != nil && (*AgreedTOSAt).IsZero(),
	}
}

func (ft UserFilters) ByAgreedEmailInfoAt(AgreedEmailInfoAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "agreed_email_info_at",
		Value:  AgreedEmailInfoAt,
		IsNil:  AgreedEmailInfoAt.IsZero(),
	}
}

func (ft UserFilters) ByAgreedEmailInfoAtPtr(AgreedEmailInfoAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "agreed_email_info_at",
		Value:  AgreedEmailInfoAt,
		IsNil:  AgreedEmailInfoAt == nil,
		IsZero: AgreedEmailInfoAt != nil && (*AgreedEmailInfoAt).IsZero(),
	}
}

func (ft UserFilters) ByEmailVerifiedAt(EmailVerifiedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "email_verified_at",
		Value:  EmailVerifiedAt,
		IsNil:  EmailVerifiedAt.IsZero(),
	}
}

func (ft UserFilters) ByEmailVerifiedAtPtr(EmailVerifiedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "email_verified_at",
		Value:  EmailVerifiedAt,
		IsNil:  EmailVerifiedAt == nil,
		IsZero: EmailVerifiedAt != nil && (*EmailVerifiedAt).IsZero(),
	}
}

func (ft UserFilters) ByPhoneVerifiedAt(PhoneVerifiedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "phone_verified_at",
		Value:  PhoneVerifiedAt,
		IsNil:  PhoneVerifiedAt.IsZero(),
	}
}

func (ft UserFilters) ByPhoneVerifiedAtPtr(PhoneVerifiedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "phone_verified_at",
		Value:  PhoneVerifiedAt,
		IsNil:  PhoneVerifiedAt == nil,
		IsZero: PhoneVerifiedAt != nil && (*PhoneVerifiedAt).IsZero(),
	}
}

func (ft UserFilters) ByEmailVerificationSentAt(EmailVerificationSentAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "email_verification_sent_at",
		Value:  EmailVerificationSentAt,
		IsNil:  EmailVerificationSentAt.IsZero(),
	}
}

func (ft UserFilters) ByEmailVerificationSentAtPtr(EmailVerificationSentAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "email_verification_sent_at",
		Value:  EmailVerificationSentAt,
		IsNil:  EmailVerificationSentAt == nil,
		IsZero: EmailVerificationSentAt != nil && (*EmailVerificationSentAt).IsZero(),
	}
}

func (ft UserFilters) ByPhoneVerificationSentAt(PhoneVerificationSentAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "phone_verification_sent_at",
		Value:  PhoneVerificationSentAt,
		IsNil:  PhoneVerificationSentAt.IsZero(),
	}
}

func (ft UserFilters) ByPhoneVerificationSentAtPtr(PhoneVerificationSentAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "phone_verification_sent_at",
		Value:  PhoneVerificationSentAt,
		IsNil:  PhoneVerificationSentAt == nil,
		IsZero: PhoneVerificationSentAt != nil && (*PhoneVerificationSentAt).IsZero(),
	}
}

func (ft UserFilters) ByIsTest(IsTest int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "is_test",
		Value:  IsTest,
		IsNil:  IsTest == 0,
	}
}

func (ft UserFilters) ByIsTestPtr(IsTest *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "is_test",
		Value:  IsTest,
		IsNil:  IsTest == nil,
		IsZero: IsTest != nil && (*IsTest) == 0,
	}
}

type AccountUserFilters struct{ prefix string }

func NewAccountUserFilters(prefix string) AccountUserFilters {
	return AccountUserFilters{prefix}
}

func (ft AccountUserFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft AccountUserFilters) Prefix() string {
	return ft.prefix
}

func (ft AccountUserFilters) ByAccountID(AccountID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == 0,
	}
}

func (ft AccountUserFilters) ByAccountIDPtr(AccountID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == nil,
		IsZero: AccountID != nil && (*AccountID) == 0,
	}
}

func (ft AccountUserFilters) ByUserID(UserID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "user_id",
		Value:  UserID,
		IsNil:  UserID == 0,
	}
}

func (ft AccountUserFilters) ByUserIDPtr(UserID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "user_id",
		Value:  UserID,
		IsNil:  UserID == nil,
		IsZero: UserID != nil && (*UserID) == 0,
	}
}

func (ft AccountUserFilters) ByStatus(Status m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft AccountUserFilters) ByStatusPtr(Status *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft AccountUserFilters) ByResponseStatus(ResponseStatus m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "response_status",
		Value:  ResponseStatus,
		IsNil:  ResponseStatus == 0,
	}
}

func (ft AccountUserFilters) ByResponseStatusPtr(ResponseStatus *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "response_status",
		Value:  ResponseStatus,
		IsNil:  ResponseStatus == nil,
		IsZero: ResponseStatus != nil && (*ResponseStatus) == 0,
	}
}

func (ft AccountUserFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft AccountUserFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft AccountUserFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft AccountUserFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft AccountUserFilters) ByDeletedAt(DeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt.IsZero(),
	}
}

func (ft AccountUserFilters) ByDeletedAtPtr(DeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt == nil,
		IsZero: DeletedAt != nil && (*DeletedAt).IsZero(),
	}
}

func (ft AccountUserFilters) ByFullName(FullName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "full_name",
		Value:  FullName,
		IsNil:  FullName == "",
	}
}

func (ft AccountUserFilters) ByFullNamePtr(FullName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "full_name",
		Value:  FullName,
		IsNil:  FullName == nil,
		IsZero: FullName != nil && (*FullName) == "",
	}
}

func (ft AccountUserFilters) ByShortName(ShortName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "short_name",
		Value:  ShortName,
		IsNil:  ShortName == "",
	}
}

func (ft AccountUserFilters) ByShortNamePtr(ShortName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "short_name",
		Value:  ShortName,
		IsNil:  ShortName == nil,
		IsZero: ShortName != nil && (*ShortName) == "",
	}
}

func (ft AccountUserFilters) ByPosition(Position string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "position",
		Value:  Position,
		IsNil:  Position == "",
	}
}

func (ft AccountUserFilters) ByPositionPtr(Position *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "position",
		Value:  Position,
		IsNil:  Position == nil,
		IsZero: Position != nil && (*Position) == "",
	}
}

func (ft AccountUserFilters) ByInvitationSentAt(InvitationSentAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "invitation_sent_at",
		Value:  InvitationSentAt,
		IsNil:  InvitationSentAt.IsZero(),
	}
}

func (ft AccountUserFilters) ByInvitationSentAtPtr(InvitationSentAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "invitation_sent_at",
		Value:  InvitationSentAt,
		IsNil:  InvitationSentAt == nil,
		IsZero: InvitationSentAt != nil && (*InvitationSentAt).IsZero(),
	}
}

func (ft AccountUserFilters) ByInvitationSentBy(InvitationSentBy int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "invitation_sent_by",
		Value:  InvitationSentBy,
		IsNil:  InvitationSentBy == 0,
	}
}

func (ft AccountUserFilters) ByInvitationSentByPtr(InvitationSentBy *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "invitation_sent_by",
		Value:  InvitationSentBy,
		IsNil:  InvitationSentBy == nil,
		IsZero: InvitationSentBy != nil && (*InvitationSentBy) == 0,
	}
}

func (ft AccountUserFilters) ByInvitationAcceptedAt(InvitationAcceptedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "invitation_accepted_at",
		Value:  InvitationAcceptedAt,
		IsNil:  InvitationAcceptedAt.IsZero(),
	}
}

func (ft AccountUserFilters) ByInvitationAcceptedAtPtr(InvitationAcceptedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "invitation_accepted_at",
		Value:  InvitationAcceptedAt,
		IsNil:  InvitationAcceptedAt == nil,
		IsZero: InvitationAcceptedAt != nil && (*InvitationAcceptedAt).IsZero(),
	}
}

func (ft AccountUserFilters) ByInvitationRejectedAt(InvitationRejectedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "invitation_rejected_at",
		Value:  InvitationRejectedAt,
		IsNil:  InvitationRejectedAt.IsZero(),
	}
}

func (ft AccountUserFilters) ByInvitationRejectedAtPtr(InvitationRejectedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "invitation_rejected_at",
		Value:  InvitationRejectedAt,
		IsNil:  InvitationRejectedAt == nil,
		IsZero: InvitationRejectedAt != nil && (*InvitationRejectedAt).IsZero(),
	}
}

func (ft AccountUserFilters) ByDisabledAt(DisabledAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "disabled_at",
		Value:  DisabledAt,
		IsNil:  DisabledAt.IsZero(),
	}
}

func (ft AccountUserFilters) ByDisabledAtPtr(DisabledAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "disabled_at",
		Value:  DisabledAt,
		IsNil:  DisabledAt == nil,
		IsZero: DisabledAt != nil && (*DisabledAt).IsZero(),
	}
}

func (ft AccountUserFilters) ByDisabledBy(DisabledBy time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "disabled_by",
		Value:  DisabledBy,
		IsNil:  DisabledBy.IsZero(),
	}
}

func (ft AccountUserFilters) ByDisabledByPtr(DisabledBy *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "disabled_by",
		Value:  DisabledBy,
		IsNil:  DisabledBy == nil,
		IsZero: DisabledBy != nil && (*DisabledBy).IsZero(),
	}
}

func (ft AccountUserFilters) ByDisableReason(DisableReason string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "disable_reason",
		Value:  DisableReason,
		IsNil:  DisableReason == "",
	}
}

func (ft AccountUserFilters) ByDisableReasonPtr(DisableReason *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "disable_reason",
		Value:  DisableReason,
		IsNil:  DisableReason == nil,
		IsZero: DisableReason != nil && (*DisableReason) == "",
	}
}

type AccountUserDeleteFilters struct{ prefix string }

func NewAccountUserDeleteFilters(prefix string) AccountUserDeleteFilters {
	return AccountUserDeleteFilters{prefix}
}

func (ft AccountUserDeleteFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft AccountUserDeleteFilters) Prefix() string {
	return ft.prefix
}

func (ft AccountUserDeleteFilters) ByDeletedAt(DeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt.IsZero(),
	}
}

func (ft AccountUserDeleteFilters) ByDeletedAtPtr(DeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt == nil,
		IsZero: DeletedAt != nil && (*DeletedAt).IsZero(),
	}
}

type UserAuthFilters struct{ prefix string }

func NewUserAuthFilters(prefix string) UserAuthFilters {
	return UserAuthFilters{prefix}
}

func (ft UserAuthFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft UserAuthFilters) Prefix() string {
	return ft.prefix
}

func (ft UserAuthFilters) ByUserID(UserID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "user_id",
		Value:  UserID,
		IsNil:  UserID == 0,
	}
}

func (ft UserAuthFilters) ByUserIDPtr(UserID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "user_id",
		Value:  UserID,
		IsNil:  UserID == nil,
		IsZero: UserID != nil && (*UserID) == 0,
	}
}

func (ft UserAuthFilters) ByAuthType(AuthType string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "auth_type",
		Value:  AuthType,
		IsNil:  AuthType == "",
	}
}

func (ft UserAuthFilters) ByAuthTypePtr(AuthType *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "auth_type",
		Value:  AuthType,
		IsNil:  AuthType == nil,
		IsZero: AuthType != nil && (*AuthType) == "",
	}
}

func (ft UserAuthFilters) ByAuthKey(AuthKey string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "auth_key",
		Value:  AuthKey,
		IsNil:  AuthKey == "",
	}
}

func (ft UserAuthFilters) ByAuthKeyPtr(AuthKey *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "auth_key",
		Value:  AuthKey,
		IsNil:  AuthKey == nil,
		IsZero: AuthKey != nil && (*AuthKey) == "",
	}
}

func (ft UserAuthFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft UserAuthFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft UserAuthFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft UserAuthFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

type UserInternalFilters struct{ prefix string }

func NewUserInternalFilters(prefix string) UserInternalFilters {
	return UserInternalFilters{prefix}
}

func (ft UserInternalFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft UserInternalFilters) Prefix() string {
	return ft.prefix
}

func (ft UserInternalFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft UserInternalFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft UserInternalFilters) ByHashpwd(Hashpwd string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "hashpwd",
		Value:  Hashpwd,
		IsNil:  Hashpwd == "",
	}
}

func (ft UserInternalFilters) ByHashpwdPtr(Hashpwd *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "hashpwd",
		Value:  Hashpwd,
		IsNil:  Hashpwd == nil,
		IsZero: Hashpwd != nil && (*Hashpwd) == "",
	}
}

func (ft UserInternalFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft UserInternalFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

type OrderFilters struct{ prefix string }

func NewOrderFilters(prefix string) OrderFilters {
	return OrderFilters{prefix}
}

func (ft OrderFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft OrderFilters) Prefix() string {
	return ft.prefix
}

func (ft OrderFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft OrderFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft OrderFilters) ByShopID(ShopID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == 0,
	}
}

func (ft OrderFilters) ByShopIDPtr(ShopID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == nil,
		IsZero: ShopID != nil && (*ShopID) == 0,
	}
}

func (ft OrderFilters) ByCode(Code string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "code",
		Value:  Code,
		IsNil:  Code == "",
	}
}

func (ft OrderFilters) ByCodePtr(Code *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "code",
		Value:  Code,
		IsNil:  Code == nil,
		IsZero: Code != nil && (*Code) == "",
	}
}

func (ft OrderFilters) ByEdCode(EdCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ed_code",
		Value:  EdCode,
		IsNil:  EdCode == "",
	}
}

func (ft OrderFilters) ByEdCodePtr(EdCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ed_code",
		Value:  EdCode,
		IsNil:  EdCode == nil,
		IsZero: EdCode != nil && (*EdCode) == "",
	}
}

func (ft OrderFilters) ByPartnerID(PartnerID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "partner_id",
		Value:  PartnerID,
		IsNil:  PartnerID == 0,
	}
}

func (ft OrderFilters) ByPartnerIDPtr(PartnerID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "partner_id",
		Value:  PartnerID,
		IsNil:  PartnerID == nil,
		IsZero: PartnerID != nil && (*PartnerID) == 0,
	}
}

func (ft OrderFilters) ByCurrency(Currency string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "currency",
		Value:  Currency,
		IsNil:  Currency == "",
	}
}

func (ft OrderFilters) ByCurrencyPtr(Currency *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "currency",
		Value:  Currency,
		IsNil:  Currency == nil,
		IsZero: Currency != nil && (*Currency) == "",
	}
}

func (ft OrderFilters) ByPaymentMethod(PaymentMethod string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "payment_method",
		Value:  PaymentMethod,
		IsNil:  PaymentMethod == "",
	}
}

func (ft OrderFilters) ByPaymentMethodPtr(PaymentMethod *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "payment_method",
		Value:  PaymentMethod,
		IsNil:  PaymentMethod == nil,
		IsZero: PaymentMethod != nil && (*PaymentMethod) == "",
	}
}

func (ft OrderFilters) ByCustomerName(CustomerName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "customer_name",
		Value:  CustomerName,
		IsNil:  CustomerName == "",
	}
}

func (ft OrderFilters) ByCustomerNamePtr(CustomerName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "customer_name",
		Value:  CustomerName,
		IsNil:  CustomerName == nil,
		IsZero: CustomerName != nil && (*CustomerName) == "",
	}
}

func (ft OrderFilters) ByCustomerPhone(CustomerPhone string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "customer_phone",
		Value:  CustomerPhone,
		IsNil:  CustomerPhone == "",
	}
}

func (ft OrderFilters) ByCustomerPhonePtr(CustomerPhone *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "customer_phone",
		Value:  CustomerPhone,
		IsNil:  CustomerPhone == nil,
		IsZero: CustomerPhone != nil && (*CustomerPhone) == "",
	}
}

func (ft OrderFilters) ByCustomerEmail(CustomerEmail string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "customer_email",
		Value:  CustomerEmail,
		IsNil:  CustomerEmail == "",
	}
}

func (ft OrderFilters) ByCustomerEmailPtr(CustomerEmail *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "customer_email",
		Value:  CustomerEmail,
		IsNil:  CustomerEmail == nil,
		IsZero: CustomerEmail != nil && (*CustomerEmail) == "",
	}
}

func (ft OrderFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft OrderFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft OrderFilters) ByProcessedAt(ProcessedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "processed_at",
		Value:  ProcessedAt,
		IsNil:  ProcessedAt.IsZero(),
	}
}

func (ft OrderFilters) ByProcessedAtPtr(ProcessedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "processed_at",
		Value:  ProcessedAt,
		IsNil:  ProcessedAt == nil,
		IsZero: ProcessedAt != nil && (*ProcessedAt).IsZero(),
	}
}

func (ft OrderFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft OrderFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft OrderFilters) ByClosedAt(ClosedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "closed_at",
		Value:  ClosedAt,
		IsNil:  ClosedAt.IsZero(),
	}
}

func (ft OrderFilters) ByClosedAtPtr(ClosedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "closed_at",
		Value:  ClosedAt,
		IsNil:  ClosedAt == nil,
		IsZero: ClosedAt != nil && (*ClosedAt).IsZero(),
	}
}

func (ft OrderFilters) ByConfirmedAt(ConfirmedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "confirmed_at",
		Value:  ConfirmedAt,
		IsNil:  ConfirmedAt.IsZero(),
	}
}

func (ft OrderFilters) ByConfirmedAtPtr(ConfirmedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "confirmed_at",
		Value:  ConfirmedAt,
		IsNil:  ConfirmedAt == nil,
		IsZero: ConfirmedAt != nil && (*ConfirmedAt).IsZero(),
	}
}

func (ft OrderFilters) ByCancelledAt(CancelledAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "cancelled_at",
		Value:  CancelledAt,
		IsNil:  CancelledAt.IsZero(),
	}
}

func (ft OrderFilters) ByCancelledAtPtr(CancelledAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "cancelled_at",
		Value:  CancelledAt,
		IsNil:  CancelledAt == nil,
		IsZero: CancelledAt != nil && (*CancelledAt).IsZero(),
	}
}

func (ft OrderFilters) ByCancelReason(CancelReason string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "cancel_reason",
		Value:  CancelReason,
		IsNil:  CancelReason == "",
	}
}

func (ft OrderFilters) ByCancelReasonPtr(CancelReason *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "cancel_reason",
		Value:  CancelReason,
		IsNil:  CancelReason == nil,
		IsZero: CancelReason != nil && (*CancelReason) == "",
	}
}

func (ft OrderFilters) ByCustomerConfirm(CustomerConfirm m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "customer_confirm",
		Value:  CustomerConfirm,
		IsNil:  CustomerConfirm == 0,
	}
}

func (ft OrderFilters) ByCustomerConfirmPtr(CustomerConfirm *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "customer_confirm",
		Value:  CustomerConfirm,
		IsNil:  CustomerConfirm == nil,
		IsZero: CustomerConfirm != nil && (*CustomerConfirm) == 0,
	}
}

func (ft OrderFilters) ByExternalConfirm(ExternalConfirm m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_confirm",
		Value:  ExternalConfirm,
		IsNil:  ExternalConfirm == 0,
	}
}

func (ft OrderFilters) ByExternalConfirmPtr(ExternalConfirm *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_confirm",
		Value:  ExternalConfirm,
		IsNil:  ExternalConfirm == nil,
		IsZero: ExternalConfirm != nil && (*ExternalConfirm) == 0,
	}
}

func (ft OrderFilters) ByShopConfirm(ShopConfirm m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_confirm",
		Value:  ShopConfirm,
		IsNil:  ShopConfirm == 0,
	}
}

func (ft OrderFilters) ByShopConfirmPtr(ShopConfirm *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_confirm",
		Value:  ShopConfirm,
		IsNil:  ShopConfirm == nil,
		IsZero: ShopConfirm != nil && (*ShopConfirm) == 0,
	}
}

func (ft OrderFilters) ByConfirmStatus(ConfirmStatus m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "confirm_status",
		Value:  ConfirmStatus,
		IsNil:  ConfirmStatus == 0,
	}
}

func (ft OrderFilters) ByConfirmStatusPtr(ConfirmStatus *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "confirm_status",
		Value:  ConfirmStatus,
		IsNil:  ConfirmStatus == nil,
		IsZero: ConfirmStatus != nil && (*ConfirmStatus) == 0,
	}
}

func (ft OrderFilters) ByFulfillmentShippingStatus(FulfillmentShippingStatus m.Status5) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "fulfillment_shipping_status",
		Value:  FulfillmentShippingStatus,
		IsNil:  FulfillmentShippingStatus == 0,
	}
}

func (ft OrderFilters) ByFulfillmentShippingStatusPtr(FulfillmentShippingStatus *m.Status5) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "fulfillment_shipping_status",
		Value:  FulfillmentShippingStatus,
		IsNil:  FulfillmentShippingStatus == nil,
		IsZero: FulfillmentShippingStatus != nil && (*FulfillmentShippingStatus) == 0,
	}
}

func (ft OrderFilters) ByCustomerPaymentStatus(CustomerPaymentStatus m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "customer_payment_status",
		Value:  CustomerPaymentStatus,
		IsNil:  CustomerPaymentStatus == 0,
	}
}

func (ft OrderFilters) ByCustomerPaymentStatusPtr(CustomerPaymentStatus *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "customer_payment_status",
		Value:  CustomerPaymentStatus,
		IsNil:  CustomerPaymentStatus == nil,
		IsZero: CustomerPaymentStatus != nil && (*CustomerPaymentStatus) == 0,
	}
}

func (ft OrderFilters) ByEtopPaymentStatus(EtopPaymentStatus m.Status4) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "etop_payment_status",
		Value:  EtopPaymentStatus,
		IsNil:  EtopPaymentStatus == 0,
	}
}

func (ft OrderFilters) ByEtopPaymentStatusPtr(EtopPaymentStatus *m.Status4) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "etop_payment_status",
		Value:  EtopPaymentStatus,
		IsNil:  EtopPaymentStatus == nil,
		IsZero: EtopPaymentStatus != nil && (*EtopPaymentStatus) == 0,
	}
}

func (ft OrderFilters) ByStatus(Status m.Status5) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft OrderFilters) ByStatusPtr(Status *m.Status5) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft OrderFilters) ByTotalItems(TotalItems int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "total_items",
		Value:  TotalItems,
		IsNil:  TotalItems == 0,
	}
}

func (ft OrderFilters) ByTotalItemsPtr(TotalItems *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "total_items",
		Value:  TotalItems,
		IsNil:  TotalItems == nil,
		IsZero: TotalItems != nil && (*TotalItems) == 0,
	}
}

func (ft OrderFilters) ByBasketValue(BasketValue int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "basket_value",
		Value:  BasketValue,
		IsNil:  BasketValue == 0,
	}
}

func (ft OrderFilters) ByBasketValuePtr(BasketValue *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "basket_value",
		Value:  BasketValue,
		IsNil:  BasketValue == nil,
		IsZero: BasketValue != nil && (*BasketValue) == 0,
	}
}

func (ft OrderFilters) ByTotalWeight(TotalWeight int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "total_weight",
		Value:  TotalWeight,
		IsNil:  TotalWeight == 0,
	}
}

func (ft OrderFilters) ByTotalWeightPtr(TotalWeight *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "total_weight",
		Value:  TotalWeight,
		IsNil:  TotalWeight == nil,
		IsZero: TotalWeight != nil && (*TotalWeight) == 0,
	}
}

func (ft OrderFilters) ByTotalTax(TotalTax int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "total_tax",
		Value:  TotalTax,
		IsNil:  TotalTax == 0,
	}
}

func (ft OrderFilters) ByTotalTaxPtr(TotalTax *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "total_tax",
		Value:  TotalTax,
		IsNil:  TotalTax == nil,
		IsZero: TotalTax != nil && (*TotalTax) == 0,
	}
}

func (ft OrderFilters) ByOrderDiscount(OrderDiscount int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "order_discount",
		Value:  OrderDiscount,
		IsNil:  OrderDiscount == 0,
	}
}

func (ft OrderFilters) ByOrderDiscountPtr(OrderDiscount *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "order_discount",
		Value:  OrderDiscount,
		IsNil:  OrderDiscount == nil,
		IsZero: OrderDiscount != nil && (*OrderDiscount) == 0,
	}
}

func (ft OrderFilters) ByTotalDiscount(TotalDiscount int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "total_discount",
		Value:  TotalDiscount,
		IsNil:  TotalDiscount == 0,
	}
}

func (ft OrderFilters) ByTotalDiscountPtr(TotalDiscount *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "total_discount",
		Value:  TotalDiscount,
		IsNil:  TotalDiscount == nil,
		IsZero: TotalDiscount != nil && (*TotalDiscount) == 0,
	}
}

func (ft OrderFilters) ByShopShippingFee(ShopShippingFee int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_shipping_fee",
		Value:  ShopShippingFee,
		IsNil:  ShopShippingFee == 0,
	}
}

func (ft OrderFilters) ByShopShippingFeePtr(ShopShippingFee *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_shipping_fee",
		Value:  ShopShippingFee,
		IsNil:  ShopShippingFee == nil,
		IsZero: ShopShippingFee != nil && (*ShopShippingFee) == 0,
	}
}

func (ft OrderFilters) ByTotalFee(TotalFee int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "total_fee",
		Value:  TotalFee,
		IsNil:  TotalFee == 0,
	}
}

func (ft OrderFilters) ByTotalFeePtr(TotalFee *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "total_fee",
		Value:  TotalFee,
		IsNil:  TotalFee == nil,
		IsZero: TotalFee != nil && (*TotalFee) == 0,
	}
}

func (ft OrderFilters) ByShopCOD(ShopCOD int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_cod",
		Value:  ShopCOD,
		IsNil:  ShopCOD == 0,
	}
}

func (ft OrderFilters) ByShopCODPtr(ShopCOD *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_cod",
		Value:  ShopCOD,
		IsNil:  ShopCOD == nil,
		IsZero: ShopCOD != nil && (*ShopCOD) == 0,
	}
}

func (ft OrderFilters) ByTotalAmount(TotalAmount int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "total_amount",
		Value:  TotalAmount,
		IsNil:  TotalAmount == 0,
	}
}

func (ft OrderFilters) ByTotalAmountPtr(TotalAmount *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "total_amount",
		Value:  TotalAmount,
		IsNil:  TotalAmount == nil,
		IsZero: TotalAmount != nil && (*TotalAmount) == 0,
	}
}

func (ft OrderFilters) ByOrderNote(OrderNote string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "order_note",
		Value:  OrderNote,
		IsNil:  OrderNote == "",
	}
}

func (ft OrderFilters) ByOrderNotePtr(OrderNote *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "order_note",
		Value:  OrderNote,
		IsNil:  OrderNote == nil,
		IsZero: OrderNote != nil && (*OrderNote) == "",
	}
}

func (ft OrderFilters) ByShopNote(ShopNote string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_note",
		Value:  ShopNote,
		IsNil:  ShopNote == "",
	}
}

func (ft OrderFilters) ByShopNotePtr(ShopNote *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_note",
		Value:  ShopNote,
		IsNil:  ShopNote == nil,
		IsZero: ShopNote != nil && (*ShopNote) == "",
	}
}

func (ft OrderFilters) ByShippingNote(ShippingNote string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_note",
		Value:  ShippingNote,
		IsNil:  ShippingNote == "",
	}
}

func (ft OrderFilters) ByShippingNotePtr(ShippingNote *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_note",
		Value:  ShippingNote,
		IsNil:  ShippingNote == nil,
		IsZero: ShippingNote != nil && (*ShippingNote) == "",
	}
}

func (ft OrderFilters) ByOrderSourceType(OrderSourceType m.OrderSourceType) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "order_source_type",
		Value:  OrderSourceType,
		IsNil:  OrderSourceType == "",
	}
}

func (ft OrderFilters) ByOrderSourceTypePtr(OrderSourceType *m.OrderSourceType) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "order_source_type",
		Value:  OrderSourceType,
		IsNil:  OrderSourceType == nil,
		IsZero: OrderSourceType != nil && (*OrderSourceType) == "",
	}
}

func (ft OrderFilters) ByOrderSourceID(OrderSourceID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "order_source_id",
		Value:  OrderSourceID,
		IsNil:  OrderSourceID == 0,
	}
}

func (ft OrderFilters) ByOrderSourceIDPtr(OrderSourceID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "order_source_id",
		Value:  OrderSourceID,
		IsNil:  OrderSourceID == nil,
		IsZero: OrderSourceID != nil && (*OrderSourceID) == 0,
	}
}

func (ft OrderFilters) ByExternalOrderID(ExternalOrderID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_order_id",
		Value:  ExternalOrderID,
		IsNil:  ExternalOrderID == "",
	}
}

func (ft OrderFilters) ByExternalOrderIDPtr(ExternalOrderID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_order_id",
		Value:  ExternalOrderID,
		IsNil:  ExternalOrderID == nil,
		IsZero: ExternalOrderID != nil && (*ExternalOrderID) == "",
	}
}

func (ft OrderFilters) ByReferenceURL(ReferenceURL string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "reference_url",
		Value:  ReferenceURL,
		IsNil:  ReferenceURL == "",
	}
}

func (ft OrderFilters) ByReferenceURLPtr(ReferenceURL *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "reference_url",
		Value:  ReferenceURL,
		IsNil:  ReferenceURL == nil,
		IsZero: ReferenceURL != nil && (*ReferenceURL) == "",
	}
}

func (ft OrderFilters) ByExternalURL(ExternalURL string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_url",
		Value:  ExternalURL,
		IsNil:  ExternalURL == "",
	}
}

func (ft OrderFilters) ByExternalURLPtr(ExternalURL *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_url",
		Value:  ExternalURL,
		IsNil:  ExternalURL == nil,
		IsZero: ExternalURL != nil && (*ExternalURL) == "",
	}
}

func (ft OrderFilters) ByIsOutsideEtop(IsOutsideEtop bool) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "is_outside_etop",
		Value:  IsOutsideEtop,
		IsNil:  bool(!IsOutsideEtop),
	}
}

func (ft OrderFilters) ByIsOutsideEtopPtr(IsOutsideEtop *bool) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "is_outside_etop",
		Value:  IsOutsideEtop,
		IsNil:  IsOutsideEtop == nil,
		IsZero: IsOutsideEtop != nil && bool(!(*IsOutsideEtop)),
	}
}

func (ft OrderFilters) ByGhnNoteCode(GhnNoteCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ghn_note_code",
		Value:  GhnNoteCode,
		IsNil:  GhnNoteCode == "",
	}
}

func (ft OrderFilters) ByGhnNoteCodePtr(GhnNoteCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ghn_note_code",
		Value:  GhnNoteCode,
		IsNil:  GhnNoteCode == nil,
		IsZero: GhnNoteCode != nil && (*GhnNoteCode) == "",
	}
}

func (ft OrderFilters) ByTryOn(TryOn m.TryOn) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "try_on",
		Value:  TryOn,
		IsNil:  TryOn == "",
	}
}

func (ft OrderFilters) ByTryOnPtr(TryOn *m.TryOn) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "try_on",
		Value:  TryOn,
		IsNil:  TryOn == nil,
		IsZero: TryOn != nil && (*TryOn) == "",
	}
}

func (ft OrderFilters) ByCustomerNameNorm(CustomerNameNorm string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "customer_name_norm",
		Value:  CustomerNameNorm,
		IsNil:  CustomerNameNorm == "",
	}
}

func (ft OrderFilters) ByCustomerNameNormPtr(CustomerNameNorm *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "customer_name_norm",
		Value:  CustomerNameNorm,
		IsNil:  CustomerNameNorm == nil,
		IsZero: CustomerNameNorm != nil && (*CustomerNameNorm) == "",
	}
}

func (ft OrderFilters) ByProductNameNorm(ProductNameNorm string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_name_norm",
		Value:  ProductNameNorm,
		IsNil:  ProductNameNorm == "",
	}
}

func (ft OrderFilters) ByProductNameNormPtr(ProductNameNorm *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_name_norm",
		Value:  ProductNameNorm,
		IsNil:  ProductNameNorm == nil,
		IsZero: ProductNameNorm != nil && (*ProductNameNorm) == "",
	}
}

type OrderExternalFilters struct{ prefix string }

func NewOrderExternalFilters(prefix string) OrderExternalFilters {
	return OrderExternalFilters{prefix}
}

func (ft OrderExternalFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft OrderExternalFilters) Prefix() string {
	return ft.prefix
}

func (ft OrderExternalFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft OrderExternalFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft OrderExternalFilters) ByOrderSourceID(OrderSourceID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "order_source_id",
		Value:  OrderSourceID,
		IsNil:  OrderSourceID == 0,
	}
}

func (ft OrderExternalFilters) ByOrderSourceIDPtr(OrderSourceID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "order_source_id",
		Value:  OrderSourceID,
		IsNil:  OrderSourceID == nil,
		IsZero: OrderSourceID != nil && (*OrderSourceID) == 0,
	}
}

func (ft OrderExternalFilters) ByExternalOrderSource(ExternalOrderSource string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_order_source",
		Value:  ExternalOrderSource,
		IsNil:  ExternalOrderSource == "",
	}
}

func (ft OrderExternalFilters) ByExternalOrderSourcePtr(ExternalOrderSource *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_order_source",
		Value:  ExternalOrderSource,
		IsNil:  ExternalOrderSource == nil,
		IsZero: ExternalOrderSource != nil && (*ExternalOrderSource) == "",
	}
}

func (ft OrderExternalFilters) ByExternalProvider(ExternalProvider string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_provider",
		Value:  ExternalProvider,
		IsNil:  ExternalProvider == "",
	}
}

func (ft OrderExternalFilters) ByExternalProviderPtr(ExternalProvider *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_provider",
		Value:  ExternalProvider,
		IsNil:  ExternalProvider == nil,
		IsZero: ExternalProvider != nil && (*ExternalProvider) == "",
	}
}

func (ft OrderExternalFilters) ByExternalOrderID(ExternalOrderID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_order_id",
		Value:  ExternalOrderID,
		IsNil:  ExternalOrderID == "",
	}
}

func (ft OrderExternalFilters) ByExternalOrderIDPtr(ExternalOrderID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_order_id",
		Value:  ExternalOrderID,
		IsNil:  ExternalOrderID == nil,
		IsZero: ExternalOrderID != nil && (*ExternalOrderID) == "",
	}
}

func (ft OrderExternalFilters) ByExternalOrderCode(ExternalOrderCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_order_code",
		Value:  ExternalOrderCode,
		IsNil:  ExternalOrderCode == "",
	}
}

func (ft OrderExternalFilters) ByExternalOrderCodePtr(ExternalOrderCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_order_code",
		Value:  ExternalOrderCode,
		IsNil:  ExternalOrderCode == nil,
		IsZero: ExternalOrderCode != nil && (*ExternalOrderCode) == "",
	}
}

func (ft OrderExternalFilters) ByExternalUserID(ExternalUserID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_user_id",
		Value:  ExternalUserID,
		IsNil:  ExternalUserID == "",
	}
}

func (ft OrderExternalFilters) ByExternalUserIDPtr(ExternalUserID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_user_id",
		Value:  ExternalUserID,
		IsNil:  ExternalUserID == nil,
		IsZero: ExternalUserID != nil && (*ExternalUserID) == "",
	}
}

func (ft OrderExternalFilters) ByExternalCustomerID(ExternalCustomerID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_customer_id",
		Value:  ExternalCustomerID,
		IsNil:  ExternalCustomerID == "",
	}
}

func (ft OrderExternalFilters) ByExternalCustomerIDPtr(ExternalCustomerID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_customer_id",
		Value:  ExternalCustomerID,
		IsNil:  ExternalCustomerID == nil,
		IsZero: ExternalCustomerID != nil && (*ExternalCustomerID) == "",
	}
}

func (ft OrderExternalFilters) ByExternalCreatedAt(ExternalCreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_created_at",
		Value:  ExternalCreatedAt,
		IsNil:  ExternalCreatedAt.IsZero(),
	}
}

func (ft OrderExternalFilters) ByExternalCreatedAtPtr(ExternalCreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_created_at",
		Value:  ExternalCreatedAt,
		IsNil:  ExternalCreatedAt == nil,
		IsZero: ExternalCreatedAt != nil && (*ExternalCreatedAt).IsZero(),
	}
}

func (ft OrderExternalFilters) ByExternalProcessedAt(ExternalProcessedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_processed_at",
		Value:  ExternalProcessedAt,
		IsNil:  ExternalProcessedAt.IsZero(),
	}
}

func (ft OrderExternalFilters) ByExternalProcessedAtPtr(ExternalProcessedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_processed_at",
		Value:  ExternalProcessedAt,
		IsNil:  ExternalProcessedAt == nil,
		IsZero: ExternalProcessedAt != nil && (*ExternalProcessedAt).IsZero(),
	}
}

func (ft OrderExternalFilters) ByExternalUpdatedAt(ExternalUpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_updated_at",
		Value:  ExternalUpdatedAt,
		IsNil:  ExternalUpdatedAt.IsZero(),
	}
}

func (ft OrderExternalFilters) ByExternalUpdatedAtPtr(ExternalUpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_updated_at",
		Value:  ExternalUpdatedAt,
		IsNil:  ExternalUpdatedAt == nil,
		IsZero: ExternalUpdatedAt != nil && (*ExternalUpdatedAt).IsZero(),
	}
}

func (ft OrderExternalFilters) ByExternalClosedAt(ExternalClosedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_closed_at",
		Value:  ExternalClosedAt,
		IsNil:  ExternalClosedAt.IsZero(),
	}
}

func (ft OrderExternalFilters) ByExternalClosedAtPtr(ExternalClosedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_closed_at",
		Value:  ExternalClosedAt,
		IsNil:  ExternalClosedAt == nil,
		IsZero: ExternalClosedAt != nil && (*ExternalClosedAt).IsZero(),
	}
}

func (ft OrderExternalFilters) ByExternalCancelledAt(ExternalCancelledAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_cancelled_at",
		Value:  ExternalCancelledAt,
		IsNil:  ExternalCancelledAt.IsZero(),
	}
}

func (ft OrderExternalFilters) ByExternalCancelledAtPtr(ExternalCancelledAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_cancelled_at",
		Value:  ExternalCancelledAt,
		IsNil:  ExternalCancelledAt == nil,
		IsZero: ExternalCancelledAt != nil && (*ExternalCancelledAt).IsZero(),
	}
}

func (ft OrderExternalFilters) ByExternalCancelReason(ExternalCancelReason string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_cancel_reason",
		Value:  ExternalCancelReason,
		IsNil:  ExternalCancelReason == "",
	}
}

func (ft OrderExternalFilters) ByExternalCancelReasonPtr(ExternalCancelReason *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_cancel_reason",
		Value:  ExternalCancelReason,
		IsNil:  ExternalCancelReason == nil,
		IsZero: ExternalCancelReason != nil && (*ExternalCancelReason) == "",
	}
}

type OrderExternalCreateOrderFilters struct{ prefix string }

func NewOrderExternalCreateOrderFilters(prefix string) OrderExternalCreateOrderFilters {
	return OrderExternalCreateOrderFilters{prefix}
}

func (ft OrderExternalCreateOrderFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft OrderExternalCreateOrderFilters) Prefix() string {
	return ft.prefix
}

func (ft OrderExternalCreateOrderFilters) ByShopID(ShopID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByShopIDPtr(ShopID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == nil,
		IsZero: ShopID != nil && (*ShopID) == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByCode(Code string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "code",
		Value:  Code,
		IsNil:  Code == "",
	}
}

func (ft OrderExternalCreateOrderFilters) ByCodePtr(Code *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "code",
		Value:  Code,
		IsNil:  Code == nil,
		IsZero: Code != nil && (*Code) == "",
	}
}

func (ft OrderExternalCreateOrderFilters) ByCurrency(Currency string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "currency",
		Value:  Currency,
		IsNil:  Currency == "",
	}
}

func (ft OrderExternalCreateOrderFilters) ByCurrencyPtr(Currency *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "currency",
		Value:  Currency,
		IsNil:  Currency == nil,
		IsZero: Currency != nil && (*Currency) == "",
	}
}

func (ft OrderExternalCreateOrderFilters) ByPaymentMethod(PaymentMethod string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "payment_method",
		Value:  PaymentMethod,
		IsNil:  PaymentMethod == "",
	}
}

func (ft OrderExternalCreateOrderFilters) ByPaymentMethodPtr(PaymentMethod *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "payment_method",
		Value:  PaymentMethod,
		IsNil:  PaymentMethod == nil,
		IsZero: PaymentMethod != nil && (*PaymentMethod) == "",
	}
}

func (ft OrderExternalCreateOrderFilters) ByCustomerPhone(CustomerPhone string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "customer_phone",
		Value:  CustomerPhone,
		IsNil:  CustomerPhone == "",
	}
}

func (ft OrderExternalCreateOrderFilters) ByCustomerPhonePtr(CustomerPhone *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "customer_phone",
		Value:  CustomerPhone,
		IsNil:  CustomerPhone == nil,
		IsZero: CustomerPhone != nil && (*CustomerPhone) == "",
	}
}

func (ft OrderExternalCreateOrderFilters) ByCustomerEmail(CustomerEmail string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "customer_email",
		Value:  CustomerEmail,
		IsNil:  CustomerEmail == "",
	}
}

func (ft OrderExternalCreateOrderFilters) ByCustomerEmailPtr(CustomerEmail *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "customer_email",
		Value:  CustomerEmail,
		IsNil:  CustomerEmail == nil,
		IsZero: CustomerEmail != nil && (*CustomerEmail) == "",
	}
}

func (ft OrderExternalCreateOrderFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft OrderExternalCreateOrderFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft OrderExternalCreateOrderFilters) ByProcessedAt(ProcessedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "processed_at",
		Value:  ProcessedAt,
		IsNil:  ProcessedAt.IsZero(),
	}
}

func (ft OrderExternalCreateOrderFilters) ByProcessedAtPtr(ProcessedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "processed_at",
		Value:  ProcessedAt,
		IsNil:  ProcessedAt == nil,
		IsZero: ProcessedAt != nil && (*ProcessedAt).IsZero(),
	}
}

func (ft OrderExternalCreateOrderFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft OrderExternalCreateOrderFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft OrderExternalCreateOrderFilters) ByClosedAt(ClosedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "closed_at",
		Value:  ClosedAt,
		IsNil:  ClosedAt.IsZero(),
	}
}

func (ft OrderExternalCreateOrderFilters) ByClosedAtPtr(ClosedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "closed_at",
		Value:  ClosedAt,
		IsNil:  ClosedAt == nil,
		IsZero: ClosedAt != nil && (*ClosedAt).IsZero(),
	}
}

func (ft OrderExternalCreateOrderFilters) ByConfirmedAt(ConfirmedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "confirmed_at",
		Value:  ConfirmedAt,
		IsNil:  ConfirmedAt.IsZero(),
	}
}

func (ft OrderExternalCreateOrderFilters) ByConfirmedAtPtr(ConfirmedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "confirmed_at",
		Value:  ConfirmedAt,
		IsNil:  ConfirmedAt == nil,
		IsZero: ConfirmedAt != nil && (*ConfirmedAt).IsZero(),
	}
}

func (ft OrderExternalCreateOrderFilters) ByCancelledAt(CancelledAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "cancelled_at",
		Value:  CancelledAt,
		IsNil:  CancelledAt.IsZero(),
	}
}

func (ft OrderExternalCreateOrderFilters) ByCancelledAtPtr(CancelledAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "cancelled_at",
		Value:  CancelledAt,
		IsNil:  CancelledAt == nil,
		IsZero: CancelledAt != nil && (*CancelledAt).IsZero(),
	}
}

func (ft OrderExternalCreateOrderFilters) ByCancelReason(CancelReason string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "cancel_reason",
		Value:  CancelReason,
		IsNil:  CancelReason == "",
	}
}

func (ft OrderExternalCreateOrderFilters) ByCancelReasonPtr(CancelReason *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "cancel_reason",
		Value:  CancelReason,
		IsNil:  CancelReason == nil,
		IsZero: CancelReason != nil && (*CancelReason) == "",
	}
}

func (ft OrderExternalCreateOrderFilters) ByTotalItems(TotalItems int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "total_items",
		Value:  TotalItems,
		IsNil:  TotalItems == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByTotalItemsPtr(TotalItems *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "total_items",
		Value:  TotalItems,
		IsNil:  TotalItems == nil,
		IsZero: TotalItems != nil && (*TotalItems) == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByBasketValue(BasketValue int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "basket_value",
		Value:  BasketValue,
		IsNil:  BasketValue == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByBasketValuePtr(BasketValue *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "basket_value",
		Value:  BasketValue,
		IsNil:  BasketValue == nil,
		IsZero: BasketValue != nil && (*BasketValue) == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByTotalWeight(TotalWeight int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "total_weight",
		Value:  TotalWeight,
		IsNil:  TotalWeight == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByTotalWeightPtr(TotalWeight *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "total_weight",
		Value:  TotalWeight,
		IsNil:  TotalWeight == nil,
		IsZero: TotalWeight != nil && (*TotalWeight) == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByTotalTax(TotalTax int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "total_tax",
		Value:  TotalTax,
		IsNil:  TotalTax == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByTotalTaxPtr(TotalTax *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "total_tax",
		Value:  TotalTax,
		IsNil:  TotalTax == nil,
		IsZero: TotalTax != nil && (*TotalTax) == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByTotalDiscount(TotalDiscount int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "total_discount",
		Value:  TotalDiscount,
		IsNil:  TotalDiscount == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByTotalDiscountPtr(TotalDiscount *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "total_discount",
		Value:  TotalDiscount,
		IsNil:  TotalDiscount == nil,
		IsZero: TotalDiscount != nil && (*TotalDiscount) == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByTotalAmount(TotalAmount int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "total_amount",
		Value:  TotalAmount,
		IsNil:  TotalAmount == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByTotalAmountPtr(TotalAmount *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "total_amount",
		Value:  TotalAmount,
		IsNil:  TotalAmount == nil,
		IsZero: TotalAmount != nil && (*TotalAmount) == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByShopCOD(ShopCOD int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_cod",
		Value:  ShopCOD,
		IsNil:  ShopCOD == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByShopCODPtr(ShopCOD *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_cod",
		Value:  ShopCOD,
		IsNil:  ShopCOD == nil,
		IsZero: ShopCOD != nil && (*ShopCOD) == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByExternalConfirm(ExternalConfirm m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_confirm",
		Value:  ExternalConfirm,
		IsNil:  ExternalConfirm == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByExternalConfirmPtr(ExternalConfirm *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_confirm",
		Value:  ExternalConfirm,
		IsNil:  ExternalConfirm == nil,
		IsZero: ExternalConfirm != nil && (*ExternalConfirm) == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByOrderSourceType(OrderSourceType m.OrderSourceType) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "order_source_type",
		Value:  OrderSourceType,
		IsNil:  OrderSourceType == "",
	}
}

func (ft OrderExternalCreateOrderFilters) ByOrderSourceTypePtr(OrderSourceType *m.OrderSourceType) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "order_source_type",
		Value:  OrderSourceType,
		IsNil:  OrderSourceType == nil,
		IsZero: OrderSourceType != nil && (*OrderSourceType) == "",
	}
}

func (ft OrderExternalCreateOrderFilters) ByOrderSourceID(OrderSourceID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "order_source_id",
		Value:  OrderSourceID,
		IsNil:  OrderSourceID == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByOrderSourceIDPtr(OrderSourceID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "order_source_id",
		Value:  OrderSourceID,
		IsNil:  OrderSourceID == nil,
		IsZero: OrderSourceID != nil && (*OrderSourceID) == 0,
	}
}

func (ft OrderExternalCreateOrderFilters) ByExternalOrderID(ExternalOrderID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_order_id",
		Value:  ExternalOrderID,
		IsNil:  ExternalOrderID == "",
	}
}

func (ft OrderExternalCreateOrderFilters) ByExternalOrderIDPtr(ExternalOrderID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_order_id",
		Value:  ExternalOrderID,
		IsNil:  ExternalOrderID == nil,
		IsZero: ExternalOrderID != nil && (*ExternalOrderID) == "",
	}
}

func (ft OrderExternalCreateOrderFilters) ByIsOutsideEtop(IsOutsideEtop bool) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "is_outside_etop",
		Value:  IsOutsideEtop,
		IsNil:  bool(!IsOutsideEtop),
	}
}

func (ft OrderExternalCreateOrderFilters) ByIsOutsideEtopPtr(IsOutsideEtop *bool) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "is_outside_etop",
		Value:  IsOutsideEtop,
		IsNil:  IsOutsideEtop == nil,
		IsZero: IsOutsideEtop != nil && bool(!(*IsOutsideEtop)),
	}
}

type OrderExternalCreateExternalFilters struct{ prefix string }

func NewOrderExternalCreateExternalFilters(prefix string) OrderExternalCreateExternalFilters {
	return OrderExternalCreateExternalFilters{prefix}
}

func (ft OrderExternalCreateExternalFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft OrderExternalCreateExternalFilters) Prefix() string {
	return ft.prefix
}

func (ft OrderExternalCreateExternalFilters) ByOrderSourceID(OrderSourceID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "order_source_id",
		Value:  OrderSourceID,
		IsNil:  OrderSourceID == 0,
	}
}

func (ft OrderExternalCreateExternalFilters) ByOrderSourceIDPtr(OrderSourceID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "order_source_id",
		Value:  OrderSourceID,
		IsNil:  OrderSourceID == nil,
		IsZero: OrderSourceID != nil && (*OrderSourceID) == 0,
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalOrderSource(ExternalOrderSource string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_order_source",
		Value:  ExternalOrderSource,
		IsNil:  ExternalOrderSource == "",
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalOrderSourcePtr(ExternalOrderSource *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_order_source",
		Value:  ExternalOrderSource,
		IsNil:  ExternalOrderSource == nil,
		IsZero: ExternalOrderSource != nil && (*ExternalOrderSource) == "",
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalOrderID(ExternalOrderID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_order_id",
		Value:  ExternalOrderID,
		IsNil:  ExternalOrderID == "",
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalOrderIDPtr(ExternalOrderID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_order_id",
		Value:  ExternalOrderID,
		IsNil:  ExternalOrderID == nil,
		IsZero: ExternalOrderID != nil && (*ExternalOrderID) == "",
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalOrderCode(ExternalOrderCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_order_code",
		Value:  ExternalOrderCode,
		IsNil:  ExternalOrderCode == "",
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalOrderCodePtr(ExternalOrderCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_order_code",
		Value:  ExternalOrderCode,
		IsNil:  ExternalOrderCode == nil,
		IsZero: ExternalOrderCode != nil && (*ExternalOrderCode) == "",
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalUserID(ExternalUserID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_user_id",
		Value:  ExternalUserID,
		IsNil:  ExternalUserID == "",
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalUserIDPtr(ExternalUserID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_user_id",
		Value:  ExternalUserID,
		IsNil:  ExternalUserID == nil,
		IsZero: ExternalUserID != nil && (*ExternalUserID) == "",
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalCustomerID(ExternalCustomerID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_customer_id",
		Value:  ExternalCustomerID,
		IsNil:  ExternalCustomerID == "",
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalCustomerIDPtr(ExternalCustomerID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_customer_id",
		Value:  ExternalCustomerID,
		IsNil:  ExternalCustomerID == nil,
		IsZero: ExternalCustomerID != nil && (*ExternalCustomerID) == "",
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalCreatedAt(ExternalCreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_created_at",
		Value:  ExternalCreatedAt,
		IsNil:  ExternalCreatedAt.IsZero(),
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalCreatedAtPtr(ExternalCreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_created_at",
		Value:  ExternalCreatedAt,
		IsNil:  ExternalCreatedAt == nil,
		IsZero: ExternalCreatedAt != nil && (*ExternalCreatedAt).IsZero(),
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalProcessedAt(ExternalProcessedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_processed_at",
		Value:  ExternalProcessedAt,
		IsNil:  ExternalProcessedAt.IsZero(),
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalProcessedAtPtr(ExternalProcessedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_processed_at",
		Value:  ExternalProcessedAt,
		IsNil:  ExternalProcessedAt == nil,
		IsZero: ExternalProcessedAt != nil && (*ExternalProcessedAt).IsZero(),
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalUpdatedAt(ExternalUpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_updated_at",
		Value:  ExternalUpdatedAt,
		IsNil:  ExternalUpdatedAt.IsZero(),
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalUpdatedAtPtr(ExternalUpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_updated_at",
		Value:  ExternalUpdatedAt,
		IsNil:  ExternalUpdatedAt == nil,
		IsZero: ExternalUpdatedAt != nil && (*ExternalUpdatedAt).IsZero(),
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalClosedAt(ExternalClosedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_closed_at",
		Value:  ExternalClosedAt,
		IsNil:  ExternalClosedAt.IsZero(),
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalClosedAtPtr(ExternalClosedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_closed_at",
		Value:  ExternalClosedAt,
		IsNil:  ExternalClosedAt == nil,
		IsZero: ExternalClosedAt != nil && (*ExternalClosedAt).IsZero(),
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalCancelledAt(ExternalCancelledAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_cancelled_at",
		Value:  ExternalCancelledAt,
		IsNil:  ExternalCancelledAt.IsZero(),
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalCancelledAtPtr(ExternalCancelledAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_cancelled_at",
		Value:  ExternalCancelledAt,
		IsNil:  ExternalCancelledAt == nil,
		IsZero: ExternalCancelledAt != nil && (*ExternalCancelledAt).IsZero(),
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalCancelReason(ExternalCancelReason string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_cancel_reason",
		Value:  ExternalCancelReason,
		IsNil:  ExternalCancelReason == "",
	}
}

func (ft OrderExternalCreateExternalFilters) ByExternalCancelReasonPtr(ExternalCancelReason *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_cancel_reason",
		Value:  ExternalCancelReason,
		IsNil:  ExternalCancelReason == nil,
		IsZero: ExternalCancelReason != nil && (*ExternalCancelReason) == "",
	}
}

type OrderExternalUpdateOrderFilters struct{ prefix string }

func NewOrderExternalUpdateOrderFilters(prefix string) OrderExternalUpdateOrderFilters {
	return OrderExternalUpdateOrderFilters{prefix}
}

func (ft OrderExternalUpdateOrderFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft OrderExternalUpdateOrderFilters) Prefix() string {
	return ft.prefix
}

func (ft OrderExternalUpdateOrderFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft OrderExternalUpdateOrderFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft OrderExternalUpdateOrderFilters) ByClosedAt(ClosedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "closed_at",
		Value:  ClosedAt,
		IsNil:  ClosedAt.IsZero(),
	}
}

func (ft OrderExternalUpdateOrderFilters) ByClosedAtPtr(ClosedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "closed_at",
		Value:  ClosedAt,
		IsNil:  ClosedAt == nil,
		IsZero: ClosedAt != nil && (*ClosedAt).IsZero(),
	}
}

func (ft OrderExternalUpdateOrderFilters) ByCancelledAt(CancelledAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "cancelled_at",
		Value:  CancelledAt,
		IsNil:  CancelledAt.IsZero(),
	}
}

func (ft OrderExternalUpdateOrderFilters) ByCancelledAtPtr(CancelledAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "cancelled_at",
		Value:  CancelledAt,
		IsNil:  CancelledAt == nil,
		IsZero: CancelledAt != nil && (*CancelledAt).IsZero(),
	}
}

func (ft OrderExternalUpdateOrderFilters) ByCancelReason(CancelReason string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "cancel_reason",
		Value:  CancelReason,
		IsNil:  CancelReason == "",
	}
}

func (ft OrderExternalUpdateOrderFilters) ByCancelReasonPtr(CancelReason *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "cancel_reason",
		Value:  CancelReason,
		IsNil:  CancelReason == nil,
		IsZero: CancelReason != nil && (*CancelReason) == "",
	}
}

func (ft OrderExternalUpdateOrderFilters) ByExternalConfirm(ExternalConfirm m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_confirm",
		Value:  ExternalConfirm,
		IsNil:  ExternalConfirm == 0,
	}
}

func (ft OrderExternalUpdateOrderFilters) ByExternalConfirmPtr(ExternalConfirm *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_confirm",
		Value:  ExternalConfirm,
		IsNil:  ExternalConfirm == nil,
		IsZero: ExternalConfirm != nil && (*ExternalConfirm) == 0,
	}
}

type OrderExternalUpdateExternalFilters struct{ prefix string }

func NewOrderExternalUpdateExternalFilters(prefix string) OrderExternalUpdateExternalFilters {
	return OrderExternalUpdateExternalFilters{prefix}
}

func (ft OrderExternalUpdateExternalFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft OrderExternalUpdateExternalFilters) Prefix() string {
	return ft.prefix
}

func (ft OrderExternalUpdateExternalFilters) ByExternalUpdatedAt(ExternalUpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_updated_at",
		Value:  ExternalUpdatedAt,
		IsNil:  ExternalUpdatedAt.IsZero(),
	}
}

func (ft OrderExternalUpdateExternalFilters) ByExternalUpdatedAtPtr(ExternalUpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_updated_at",
		Value:  ExternalUpdatedAt,
		IsNil:  ExternalUpdatedAt == nil,
		IsZero: ExternalUpdatedAt != nil && (*ExternalUpdatedAt).IsZero(),
	}
}

func (ft OrderExternalUpdateExternalFilters) ByExternalCancelledAt(ExternalCancelledAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_cancelled_at",
		Value:  ExternalCancelledAt,
		IsNil:  ExternalCancelledAt.IsZero(),
	}
}

func (ft OrderExternalUpdateExternalFilters) ByExternalCancelledAtPtr(ExternalCancelledAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_cancelled_at",
		Value:  ExternalCancelledAt,
		IsNil:  ExternalCancelledAt == nil,
		IsZero: ExternalCancelledAt != nil && (*ExternalCancelledAt).IsZero(),
	}
}

func (ft OrderExternalUpdateExternalFilters) ByExternalCancelReason(ExternalCancelReason string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_cancel_reason",
		Value:  ExternalCancelReason,
		IsNil:  ExternalCancelReason == "",
	}
}

func (ft OrderExternalUpdateExternalFilters) ByExternalCancelReasonPtr(ExternalCancelReason *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_cancel_reason",
		Value:  ExternalCancelReason,
		IsNil:  ExternalCancelReason == nil,
		IsZero: ExternalCancelReason != nil && (*ExternalCancelReason) == "",
	}
}

type OrderLineFilters struct{ prefix string }

func NewOrderLineFilters(prefix string) OrderLineFilters {
	return OrderLineFilters{prefix}
}

func (ft OrderLineFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft OrderLineFilters) Prefix() string {
	return ft.prefix
}

func (ft OrderLineFilters) ByOrderID(OrderID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "order_id",
		Value:  OrderID,
		IsNil:  OrderID == 0,
	}
}

func (ft OrderLineFilters) ByOrderIDPtr(OrderID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "order_id",
		Value:  OrderID,
		IsNil:  OrderID == nil,
		IsZero: OrderID != nil && (*OrderID) == 0,
	}
}

func (ft OrderLineFilters) ByVariantID(VariantID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "variant_id",
		Value:  VariantID,
		IsNil:  VariantID == 0,
	}
}

func (ft OrderLineFilters) ByVariantIDPtr(VariantID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "variant_id",
		Value:  VariantID,
		IsNil:  VariantID == nil,
		IsZero: VariantID != nil && (*VariantID) == 0,
	}
}

func (ft OrderLineFilters) ByProductName(ProductName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_name",
		Value:  ProductName,
		IsNil:  ProductName == "",
	}
}

func (ft OrderLineFilters) ByProductNamePtr(ProductName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_name",
		Value:  ProductName,
		IsNil:  ProductName == nil,
		IsZero: ProductName != nil && (*ProductName) == "",
	}
}

func (ft OrderLineFilters) ByProductID(ProductID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == 0,
	}
}

func (ft OrderLineFilters) ByProductIDPtr(ProductID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "product_id",
		Value:  ProductID,
		IsNil:  ProductID == nil,
		IsZero: ProductID != nil && (*ProductID) == 0,
	}
}

func (ft OrderLineFilters) BySupplierID(SupplierID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == 0,
	}
}

func (ft OrderLineFilters) BySupplierIDPtr(SupplierID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == nil,
		IsZero: SupplierID != nil && (*SupplierID) == 0,
	}
}

func (ft OrderLineFilters) ByShopID(ShopID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == 0,
	}
}

func (ft OrderLineFilters) ByShopIDPtr(ShopID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == nil,
		IsZero: ShopID != nil && (*ShopID) == 0,
	}
}

func (ft OrderLineFilters) ByExternalVariantID(ExternalVariantID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_variant_id",
		Value:  ExternalVariantID,
		IsNil:  ExternalVariantID == "",
	}
}

func (ft OrderLineFilters) ByExternalVariantIDPtr(ExternalVariantID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_variant_id",
		Value:  ExternalVariantID,
		IsNil:  ExternalVariantID == nil,
		IsZero: ExternalVariantID != nil && (*ExternalVariantID) == "",
	}
}

func (ft OrderLineFilters) ByExternalSupplierOrderID(ExternalSupplierOrderID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_supplier_order_id",
		Value:  ExternalSupplierOrderID,
		IsNil:  ExternalSupplierOrderID == "",
	}
}

func (ft OrderLineFilters) ByExternalSupplierOrderIDPtr(ExternalSupplierOrderID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_supplier_order_id",
		Value:  ExternalSupplierOrderID,
		IsNil:  ExternalSupplierOrderID == nil,
		IsZero: ExternalSupplierOrderID != nil && (*ExternalSupplierOrderID) == "",
	}
}

func (ft OrderLineFilters) BySupplierName(SupplierName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "supplier_name",
		Value:  SupplierName,
		IsNil:  SupplierName == "",
	}
}

func (ft OrderLineFilters) BySupplierNamePtr(SupplierName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "supplier_name",
		Value:  SupplierName,
		IsNil:  SupplierName == nil,
		IsZero: SupplierName != nil && (*SupplierName) == "",
	}
}

func (ft OrderLineFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft OrderLineFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft OrderLineFilters) ByClosedAt(ClosedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "closed_at",
		Value:  ClosedAt,
		IsNil:  ClosedAt.IsZero(),
	}
}

func (ft OrderLineFilters) ByClosedAtPtr(ClosedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "closed_at",
		Value:  ClosedAt,
		IsNil:  ClosedAt == nil,
		IsZero: ClosedAt != nil && (*ClosedAt).IsZero(),
	}
}

func (ft OrderLineFilters) ByConfirmedAt(ConfirmedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "confirmed_at",
		Value:  ConfirmedAt,
		IsNil:  ConfirmedAt.IsZero(),
	}
}

func (ft OrderLineFilters) ByConfirmedAtPtr(ConfirmedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "confirmed_at",
		Value:  ConfirmedAt,
		IsNil:  ConfirmedAt == nil,
		IsZero: ConfirmedAt != nil && (*ConfirmedAt).IsZero(),
	}
}

func (ft OrderLineFilters) ByCancelledAt(CancelledAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "cancelled_at",
		Value:  CancelledAt,
		IsNil:  CancelledAt.IsZero(),
	}
}

func (ft OrderLineFilters) ByCancelledAtPtr(CancelledAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "cancelled_at",
		Value:  CancelledAt,
		IsNil:  CancelledAt == nil,
		IsZero: CancelledAt != nil && (*CancelledAt).IsZero(),
	}
}

func (ft OrderLineFilters) ByCancelReason(CancelReason string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "cancel_reason",
		Value:  CancelReason,
		IsNil:  CancelReason == "",
	}
}

func (ft OrderLineFilters) ByCancelReasonPtr(CancelReason *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "cancel_reason",
		Value:  CancelReason,
		IsNil:  CancelReason == nil,
		IsZero: CancelReason != nil && (*CancelReason) == "",
	}
}

func (ft OrderLineFilters) BySupplierConfirm(SupplierConfirm m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "supplier_confirm",
		Value:  SupplierConfirm,
		IsNil:  SupplierConfirm == 0,
	}
}

func (ft OrderLineFilters) BySupplierConfirmPtr(SupplierConfirm *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "supplier_confirm",
		Value:  SupplierConfirm,
		IsNil:  SupplierConfirm == nil,
		IsZero: SupplierConfirm != nil && (*SupplierConfirm) == 0,
	}
}

func (ft OrderLineFilters) ByStatus(Status m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft OrderLineFilters) ByStatusPtr(Status *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft OrderLineFilters) ByWeight(Weight int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "weight",
		Value:  Weight,
		IsNil:  Weight == 0,
	}
}

func (ft OrderLineFilters) ByWeightPtr(Weight *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "weight",
		Value:  Weight,
		IsNil:  Weight == nil,
		IsZero: Weight != nil && (*Weight) == 0,
	}
}

func (ft OrderLineFilters) ByQuantity(Quantity int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "quantity",
		Value:  Quantity,
		IsNil:  Quantity == 0,
	}
}

func (ft OrderLineFilters) ByQuantityPtr(Quantity *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "quantity",
		Value:  Quantity,
		IsNil:  Quantity == nil,
		IsZero: Quantity != nil && (*Quantity) == 0,
	}
}

func (ft OrderLineFilters) ByWholesalePrice0(WholesalePrice0 int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "wholesale_price_0",
		Value:  WholesalePrice0,
		IsNil:  WholesalePrice0 == 0,
	}
}

func (ft OrderLineFilters) ByWholesalePrice0Ptr(WholesalePrice0 *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "wholesale_price_0",
		Value:  WholesalePrice0,
		IsNil:  WholesalePrice0 == nil,
		IsZero: WholesalePrice0 != nil && (*WholesalePrice0) == 0,
	}
}

func (ft OrderLineFilters) ByWholesalePrice(WholesalePrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "wholesale_price",
		Value:  WholesalePrice,
		IsNil:  WholesalePrice == 0,
	}
}

func (ft OrderLineFilters) ByWholesalePricePtr(WholesalePrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "wholesale_price",
		Value:  WholesalePrice,
		IsNil:  WholesalePrice == nil,
		IsZero: WholesalePrice != nil && (*WholesalePrice) == 0,
	}
}

func (ft OrderLineFilters) ByListPrice(ListPrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "list_price",
		Value:  ListPrice,
		IsNil:  ListPrice == 0,
	}
}

func (ft OrderLineFilters) ByListPricePtr(ListPrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "list_price",
		Value:  ListPrice,
		IsNil:  ListPrice == nil,
		IsZero: ListPrice != nil && (*ListPrice) == 0,
	}
}

func (ft OrderLineFilters) ByRetailPrice(RetailPrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "retail_price",
		Value:  RetailPrice,
		IsNil:  RetailPrice == 0,
	}
}

func (ft OrderLineFilters) ByRetailPricePtr(RetailPrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "retail_price",
		Value:  RetailPrice,
		IsNil:  RetailPrice == nil,
		IsZero: RetailPrice != nil && (*RetailPrice) == 0,
	}
}

func (ft OrderLineFilters) ByPaymentPrice(PaymentPrice int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "payment_price",
		Value:  PaymentPrice,
		IsNil:  PaymentPrice == 0,
	}
}

func (ft OrderLineFilters) ByPaymentPricePtr(PaymentPrice *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "payment_price",
		Value:  PaymentPrice,
		IsNil:  PaymentPrice == nil,
		IsZero: PaymentPrice != nil && (*PaymentPrice) == 0,
	}
}

func (ft OrderLineFilters) ByLineAmount(LineAmount int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "line_amount",
		Value:  LineAmount,
		IsNil:  LineAmount == 0,
	}
}

func (ft OrderLineFilters) ByLineAmountPtr(LineAmount *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "line_amount",
		Value:  LineAmount,
		IsNil:  LineAmount == nil,
		IsZero: LineAmount != nil && (*LineAmount) == 0,
	}
}

func (ft OrderLineFilters) ByTotalDiscount(TotalDiscount int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "total_discount",
		Value:  TotalDiscount,
		IsNil:  TotalDiscount == 0,
	}
}

func (ft OrderLineFilters) ByTotalDiscountPtr(TotalDiscount *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "total_discount",
		Value:  TotalDiscount,
		IsNil:  TotalDiscount == nil,
		IsZero: TotalDiscount != nil && (*TotalDiscount) == 0,
	}
}

func (ft OrderLineFilters) ByTotalLineAmount(TotalLineAmount int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "total_line_amount",
		Value:  TotalLineAmount,
		IsNil:  TotalLineAmount == 0,
	}
}

func (ft OrderLineFilters) ByTotalLineAmountPtr(TotalLineAmount *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "total_line_amount",
		Value:  TotalLineAmount,
		IsNil:  TotalLineAmount == nil,
		IsZero: TotalLineAmount != nil && (*TotalLineAmount) == 0,
	}
}

func (ft OrderLineFilters) ByRequiresShipping(RequiresShipping bool) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "requires_shipping",
		Value:  RequiresShipping,
		IsNil:  bool(!RequiresShipping),
	}
}

func (ft OrderLineFilters) ByRequiresShippingPtr(RequiresShipping *bool) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "requires_shipping",
		Value:  RequiresShipping,
		IsNil:  RequiresShipping == nil,
		IsZero: RequiresShipping != nil && bool(!(*RequiresShipping)),
	}
}

func (ft OrderLineFilters) ByImageURL(ImageURL string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "image_url",
		Value:  ImageURL,
		IsNil:  ImageURL == "",
	}
}

func (ft OrderLineFilters) ByImageURLPtr(ImageURL *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "image_url",
		Value:  ImageURL,
		IsNil:  ImageURL == nil,
		IsZero: ImageURL != nil && (*ImageURL) == "",
	}
}

func (ft OrderLineFilters) ByIsOutsideEtop(IsOutsideEtop bool) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "is_outside_etop",
		Value:  IsOutsideEtop,
		IsNil:  bool(!IsOutsideEtop),
	}
}

func (ft OrderLineFilters) ByIsOutsideEtopPtr(IsOutsideEtop *bool) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "is_outside_etop",
		Value:  IsOutsideEtop,
		IsNil:  IsOutsideEtop == nil,
		IsZero: IsOutsideEtop != nil && bool(!(*IsOutsideEtop)),
	}
}

func (ft OrderLineFilters) ByCode(Code string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "code",
		Value:  Code,
		IsNil:  Code == "",
	}
}

func (ft OrderLineFilters) ByCodePtr(Code *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "code",
		Value:  Code,
		IsNil:  Code == nil,
		IsZero: Code != nil && (*Code) == "",
	}
}

type FulfillmentFilters struct{ prefix string }

func NewFulfillmentFilters(prefix string) FulfillmentFilters {
	return FulfillmentFilters{prefix}
}

func (ft FulfillmentFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft FulfillmentFilters) Prefix() string {
	return ft.prefix
}

func (ft FulfillmentFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft FulfillmentFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft FulfillmentFilters) ByOrderID(OrderID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "order_id",
		Value:  OrderID,
		IsNil:  OrderID == 0,
	}
}

func (ft FulfillmentFilters) ByOrderIDPtr(OrderID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "order_id",
		Value:  OrderID,
		IsNil:  OrderID == nil,
		IsZero: OrderID != nil && (*OrderID) == 0,
	}
}

func (ft FulfillmentFilters) ByShopID(ShopID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == 0,
	}
}

func (ft FulfillmentFilters) ByShopIDPtr(ShopID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == nil,
		IsZero: ShopID != nil && (*ShopID) == 0,
	}
}

func (ft FulfillmentFilters) BySupplierID(SupplierID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == 0,
	}
}

func (ft FulfillmentFilters) BySupplierIDPtr(SupplierID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == nil,
		IsZero: SupplierID != nil && (*SupplierID) == 0,
	}
}

func (ft FulfillmentFilters) ByPartnerID(PartnerID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "partner_id",
		Value:  PartnerID,
		IsNil:  PartnerID == 0,
	}
}

func (ft FulfillmentFilters) ByPartnerIDPtr(PartnerID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "partner_id",
		Value:  PartnerID,
		IsNil:  PartnerID == nil,
		IsZero: PartnerID != nil && (*PartnerID) == 0,
	}
}

func (ft FulfillmentFilters) BySupplierConfirm(SupplierConfirm m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "supplier_confirm",
		Value:  SupplierConfirm,
		IsNil:  SupplierConfirm == 0,
	}
}

func (ft FulfillmentFilters) BySupplierConfirmPtr(SupplierConfirm *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "supplier_confirm",
		Value:  SupplierConfirm,
		IsNil:  SupplierConfirm == nil,
		IsZero: SupplierConfirm != nil && (*SupplierConfirm) == 0,
	}
}

func (ft FulfillmentFilters) ByShopConfirm(ShopConfirm m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_confirm",
		Value:  ShopConfirm,
		IsNil:  ShopConfirm == 0,
	}
}

func (ft FulfillmentFilters) ByShopConfirmPtr(ShopConfirm *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_confirm",
		Value:  ShopConfirm,
		IsNil:  ShopConfirm == nil,
		IsZero: ShopConfirm != nil && (*ShopConfirm) == 0,
	}
}

func (ft FulfillmentFilters) ByConfirmStatus(ConfirmStatus m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "confirm_status",
		Value:  ConfirmStatus,
		IsNil:  ConfirmStatus == 0,
	}
}

func (ft FulfillmentFilters) ByConfirmStatusPtr(ConfirmStatus *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "confirm_status",
		Value:  ConfirmStatus,
		IsNil:  ConfirmStatus == nil,
		IsZero: ConfirmStatus != nil && (*ConfirmStatus) == 0,
	}
}

func (ft FulfillmentFilters) ByTotalItems(TotalItems int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "total_items",
		Value:  TotalItems,
		IsNil:  TotalItems == 0,
	}
}

func (ft FulfillmentFilters) ByTotalItemsPtr(TotalItems *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "total_items",
		Value:  TotalItems,
		IsNil:  TotalItems == nil,
		IsZero: TotalItems != nil && (*TotalItems) == 0,
	}
}

func (ft FulfillmentFilters) ByTotalWeight(TotalWeight int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "total_weight",
		Value:  TotalWeight,
		IsNil:  TotalWeight == 0,
	}
}

func (ft FulfillmentFilters) ByTotalWeightPtr(TotalWeight *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "total_weight",
		Value:  TotalWeight,
		IsNil:  TotalWeight == nil,
		IsZero: TotalWeight != nil && (*TotalWeight) == 0,
	}
}

func (ft FulfillmentFilters) ByBasketValue(BasketValue int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "basket_value",
		Value:  BasketValue,
		IsNil:  BasketValue == 0,
	}
}

func (ft FulfillmentFilters) ByBasketValuePtr(BasketValue *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "basket_value",
		Value:  BasketValue,
		IsNil:  BasketValue == nil,
		IsZero: BasketValue != nil && (*BasketValue) == 0,
	}
}

func (ft FulfillmentFilters) ByTotalDiscount(TotalDiscount int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "total_discount",
		Value:  TotalDiscount,
		IsNil:  TotalDiscount == 0,
	}
}

func (ft FulfillmentFilters) ByTotalDiscountPtr(TotalDiscount *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "total_discount",
		Value:  TotalDiscount,
		IsNil:  TotalDiscount == nil,
		IsZero: TotalDiscount != nil && (*TotalDiscount) == 0,
	}
}

func (ft FulfillmentFilters) ByTotalAmount(TotalAmount int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "total_amount",
		Value:  TotalAmount,
		IsNil:  TotalAmount == 0,
	}
}

func (ft FulfillmentFilters) ByTotalAmountPtr(TotalAmount *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "total_amount",
		Value:  TotalAmount,
		IsNil:  TotalAmount == nil,
		IsZero: TotalAmount != nil && (*TotalAmount) == 0,
	}
}

func (ft FulfillmentFilters) ByTotalCODAmount(TotalCODAmount int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "total_cod_amount",
		Value:  TotalCODAmount,
		IsNil:  TotalCODAmount == 0,
	}
}

func (ft FulfillmentFilters) ByTotalCODAmountPtr(TotalCODAmount *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "total_cod_amount",
		Value:  TotalCODAmount,
		IsNil:  TotalCODAmount == nil,
		IsZero: TotalCODAmount != nil && (*TotalCODAmount) == 0,
	}
}

func (ft FulfillmentFilters) ByOriginalCODAmount(OriginalCODAmount int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "original_cod_amount",
		Value:  OriginalCODAmount,
		IsNil:  OriginalCODAmount == 0,
	}
}

func (ft FulfillmentFilters) ByOriginalCODAmountPtr(OriginalCODAmount *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "original_cod_amount",
		Value:  OriginalCODAmount,
		IsNil:  OriginalCODAmount == nil,
		IsZero: OriginalCODAmount != nil && (*OriginalCODAmount) == 0,
	}
}

func (ft FulfillmentFilters) ByActualCompensationAmount(ActualCompensationAmount int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "actual_compensation_amount",
		Value:  ActualCompensationAmount,
		IsNil:  ActualCompensationAmount == 0,
	}
}

func (ft FulfillmentFilters) ByActualCompensationAmountPtr(ActualCompensationAmount *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "actual_compensation_amount",
		Value:  ActualCompensationAmount,
		IsNil:  ActualCompensationAmount == nil,
		IsZero: ActualCompensationAmount != nil && (*ActualCompensationAmount) == 0,
	}
}

func (ft FulfillmentFilters) ByShippingFeeCustomer(ShippingFeeCustomer int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_fee_customer",
		Value:  ShippingFeeCustomer,
		IsNil:  ShippingFeeCustomer == 0,
	}
}

func (ft FulfillmentFilters) ByShippingFeeCustomerPtr(ShippingFeeCustomer *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_fee_customer",
		Value:  ShippingFeeCustomer,
		IsNil:  ShippingFeeCustomer == nil,
		IsZero: ShippingFeeCustomer != nil && (*ShippingFeeCustomer) == 0,
	}
}

func (ft FulfillmentFilters) ByShippingFeeShop(ShippingFeeShop int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_fee_shop",
		Value:  ShippingFeeShop,
		IsNil:  ShippingFeeShop == 0,
	}
}

func (ft FulfillmentFilters) ByShippingFeeShopPtr(ShippingFeeShop *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_fee_shop",
		Value:  ShippingFeeShop,
		IsNil:  ShippingFeeShop == nil,
		IsZero: ShippingFeeShop != nil && (*ShippingFeeShop) == 0,
	}
}

func (ft FulfillmentFilters) ByShippingServiceFee(ShippingServiceFee int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_service_fee",
		Value:  ShippingServiceFee,
		IsNil:  ShippingServiceFee == 0,
	}
}

func (ft FulfillmentFilters) ByShippingServiceFeePtr(ShippingServiceFee *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_service_fee",
		Value:  ShippingServiceFee,
		IsNil:  ShippingServiceFee == nil,
		IsZero: ShippingServiceFee != nil && (*ShippingServiceFee) == 0,
	}
}

func (ft FulfillmentFilters) ByExternalShippingFee(ExternalShippingFee int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_shipping_fee",
		Value:  ExternalShippingFee,
		IsNil:  ExternalShippingFee == 0,
	}
}

func (ft FulfillmentFilters) ByExternalShippingFeePtr(ExternalShippingFee *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_shipping_fee",
		Value:  ExternalShippingFee,
		IsNil:  ExternalShippingFee == nil,
		IsZero: ExternalShippingFee != nil && (*ExternalShippingFee) == 0,
	}
}

func (ft FulfillmentFilters) ByEtopDiscount(EtopDiscount int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "etop_discount",
		Value:  EtopDiscount,
		IsNil:  EtopDiscount == 0,
	}
}

func (ft FulfillmentFilters) ByEtopDiscountPtr(EtopDiscount *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "etop_discount",
		Value:  EtopDiscount,
		IsNil:  EtopDiscount == nil,
		IsZero: EtopDiscount != nil && (*EtopDiscount) == 0,
	}
}

func (ft FulfillmentFilters) ByEtopFeeAdjustment(EtopFeeAdjustment int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "etop_fee_adjustment",
		Value:  EtopFeeAdjustment,
		IsNil:  EtopFeeAdjustment == 0,
	}
}

func (ft FulfillmentFilters) ByEtopFeeAdjustmentPtr(EtopFeeAdjustment *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "etop_fee_adjustment",
		Value:  EtopFeeAdjustment,
		IsNil:  EtopFeeAdjustment == nil,
		IsZero: EtopFeeAdjustment != nil && (*EtopFeeAdjustment) == 0,
	}
}

func (ft FulfillmentFilters) ByShippingFeeMain(ShippingFeeMain int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_fee_main",
		Value:  ShippingFeeMain,
		IsNil:  ShippingFeeMain == 0,
	}
}

func (ft FulfillmentFilters) ByShippingFeeMainPtr(ShippingFeeMain *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_fee_main",
		Value:  ShippingFeeMain,
		IsNil:  ShippingFeeMain == nil,
		IsZero: ShippingFeeMain != nil && (*ShippingFeeMain) == 0,
	}
}

func (ft FulfillmentFilters) ByShippingFeeReturn(ShippingFeeReturn int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_fee_return",
		Value:  ShippingFeeReturn,
		IsNil:  ShippingFeeReturn == 0,
	}
}

func (ft FulfillmentFilters) ByShippingFeeReturnPtr(ShippingFeeReturn *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_fee_return",
		Value:  ShippingFeeReturn,
		IsNil:  ShippingFeeReturn == nil,
		IsZero: ShippingFeeReturn != nil && (*ShippingFeeReturn) == 0,
	}
}

func (ft FulfillmentFilters) ByShippingFeeInsurance(ShippingFeeInsurance int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_fee_insurance",
		Value:  ShippingFeeInsurance,
		IsNil:  ShippingFeeInsurance == 0,
	}
}

func (ft FulfillmentFilters) ByShippingFeeInsurancePtr(ShippingFeeInsurance *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_fee_insurance",
		Value:  ShippingFeeInsurance,
		IsNil:  ShippingFeeInsurance == nil,
		IsZero: ShippingFeeInsurance != nil && (*ShippingFeeInsurance) == 0,
	}
}

func (ft FulfillmentFilters) ByShippingFeeAdjustment(ShippingFeeAdjustment int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_fee_adjustment",
		Value:  ShippingFeeAdjustment,
		IsNil:  ShippingFeeAdjustment == 0,
	}
}

func (ft FulfillmentFilters) ByShippingFeeAdjustmentPtr(ShippingFeeAdjustment *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_fee_adjustment",
		Value:  ShippingFeeAdjustment,
		IsNil:  ShippingFeeAdjustment == nil,
		IsZero: ShippingFeeAdjustment != nil && (*ShippingFeeAdjustment) == 0,
	}
}

func (ft FulfillmentFilters) ByShippingFeeCODS(ShippingFeeCODS int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_fee_cods",
		Value:  ShippingFeeCODS,
		IsNil:  ShippingFeeCODS == 0,
	}
}

func (ft FulfillmentFilters) ByShippingFeeCODSPtr(ShippingFeeCODS *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_fee_cods",
		Value:  ShippingFeeCODS,
		IsNil:  ShippingFeeCODS == nil,
		IsZero: ShippingFeeCODS != nil && (*ShippingFeeCODS) == 0,
	}
}

func (ft FulfillmentFilters) ByShippingFeeInfoChange(ShippingFeeInfoChange int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_fee_info_change",
		Value:  ShippingFeeInfoChange,
		IsNil:  ShippingFeeInfoChange == 0,
	}
}

func (ft FulfillmentFilters) ByShippingFeeInfoChangePtr(ShippingFeeInfoChange *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_fee_info_change",
		Value:  ShippingFeeInfoChange,
		IsNil:  ShippingFeeInfoChange == nil,
		IsZero: ShippingFeeInfoChange != nil && (*ShippingFeeInfoChange) == 0,
	}
}

func (ft FulfillmentFilters) ByShippingFeeOther(ShippingFeeOther int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_fee_other",
		Value:  ShippingFeeOther,
		IsNil:  ShippingFeeOther == 0,
	}
}

func (ft FulfillmentFilters) ByShippingFeeOtherPtr(ShippingFeeOther *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_fee_other",
		Value:  ShippingFeeOther,
		IsNil:  ShippingFeeOther == nil,
		IsZero: ShippingFeeOther != nil && (*ShippingFeeOther) == 0,
	}
}

func (ft FulfillmentFilters) ByEtopAdjustedShippingFeeMain(EtopAdjustedShippingFeeMain int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "etop_adjusted_shipping_fee_main",
		Value:  EtopAdjustedShippingFeeMain,
		IsNil:  EtopAdjustedShippingFeeMain == 0,
	}
}

func (ft FulfillmentFilters) ByEtopAdjustedShippingFeeMainPtr(EtopAdjustedShippingFeeMain *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "etop_adjusted_shipping_fee_main",
		Value:  EtopAdjustedShippingFeeMain,
		IsNil:  EtopAdjustedShippingFeeMain == nil,
		IsZero: EtopAdjustedShippingFeeMain != nil && (*EtopAdjustedShippingFeeMain) == 0,
	}
}

func (ft FulfillmentFilters) ByEtopPriceRule(EtopPriceRule bool) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "etop_price_rule",
		Value:  EtopPriceRule,
		IsNil:  bool(!EtopPriceRule),
	}
}

func (ft FulfillmentFilters) ByEtopPriceRulePtr(EtopPriceRule *bool) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "etop_price_rule",
		Value:  EtopPriceRule,
		IsNil:  EtopPriceRule == nil,
		IsZero: EtopPriceRule != nil && bool(!(*EtopPriceRule)),
	}
}

func (ft FulfillmentFilters) ByTypeFrom(TypeFrom m.FulfillmentEndpoint) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "type_from",
		Value:  TypeFrom,
		IsNil:  TypeFrom == "",
	}
}

func (ft FulfillmentFilters) ByTypeFromPtr(TypeFrom *m.FulfillmentEndpoint) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "type_from",
		Value:  TypeFrom,
		IsNil:  TypeFrom == nil,
		IsZero: TypeFrom != nil && (*TypeFrom) == "",
	}
}

func (ft FulfillmentFilters) ByTypeTo(TypeTo m.FulfillmentEndpoint) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "type_to",
		Value:  TypeTo,
		IsNil:  TypeTo == "",
	}
}

func (ft FulfillmentFilters) ByTypeToPtr(TypeTo *m.FulfillmentEndpoint) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "type_to",
		Value:  TypeTo,
		IsNil:  TypeTo == nil,
		IsZero: TypeTo != nil && (*TypeTo) == "",
	}
}

func (ft FulfillmentFilters) ByAddressToProvinceCode(AddressToProvinceCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "address_to_province_code",
		Value:  AddressToProvinceCode,
		IsNil:  AddressToProvinceCode == "",
	}
}

func (ft FulfillmentFilters) ByAddressToProvinceCodePtr(AddressToProvinceCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "address_to_province_code",
		Value:  AddressToProvinceCode,
		IsNil:  AddressToProvinceCode == nil,
		IsZero: AddressToProvinceCode != nil && (*AddressToProvinceCode) == "",
	}
}

func (ft FulfillmentFilters) ByAddressToDistrictCode(AddressToDistrictCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "address_to_district_code",
		Value:  AddressToDistrictCode,
		IsNil:  AddressToDistrictCode == "",
	}
}

func (ft FulfillmentFilters) ByAddressToDistrictCodePtr(AddressToDistrictCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "address_to_district_code",
		Value:  AddressToDistrictCode,
		IsNil:  AddressToDistrictCode == nil,
		IsZero: AddressToDistrictCode != nil && (*AddressToDistrictCode) == "",
	}
}

func (ft FulfillmentFilters) ByAddressToWardCode(AddressToWardCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "address_to_ward_code",
		Value:  AddressToWardCode,
		IsNil:  AddressToWardCode == "",
	}
}

func (ft FulfillmentFilters) ByAddressToWardCodePtr(AddressToWardCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "address_to_ward_code",
		Value:  AddressToWardCode,
		IsNil:  AddressToWardCode == nil,
		IsZero: AddressToWardCode != nil && (*AddressToWardCode) == "",
	}
}

func (ft FulfillmentFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByClosedAt(ClosedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "closed_at",
		Value:  ClosedAt,
		IsNil:  ClosedAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByClosedAtPtr(ClosedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "closed_at",
		Value:  ClosedAt,
		IsNil:  ClosedAt == nil,
		IsZero: ClosedAt != nil && (*ClosedAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByExpectedDeliveryAt(ExpectedDeliveryAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "expected_delivery_at",
		Value:  ExpectedDeliveryAt,
		IsNil:  ExpectedDeliveryAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByExpectedDeliveryAtPtr(ExpectedDeliveryAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "expected_delivery_at",
		Value:  ExpectedDeliveryAt,
		IsNil:  ExpectedDeliveryAt == nil,
		IsZero: ExpectedDeliveryAt != nil && (*ExpectedDeliveryAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByExpectedPickAt(ExpectedPickAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "expected_pick_at",
		Value:  ExpectedPickAt,
		IsNil:  ExpectedPickAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByExpectedPickAtPtr(ExpectedPickAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "expected_pick_at",
		Value:  ExpectedPickAt,
		IsNil:  ExpectedPickAt == nil,
		IsZero: ExpectedPickAt != nil && (*ExpectedPickAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByCODEtopTransferedAt(CODEtopTransferedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "cod_etop_transfered_at",
		Value:  CODEtopTransferedAt,
		IsNil:  CODEtopTransferedAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByCODEtopTransferedAtPtr(CODEtopTransferedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "cod_etop_transfered_at",
		Value:  CODEtopTransferedAt,
		IsNil:  CODEtopTransferedAt == nil,
		IsZero: CODEtopTransferedAt != nil && (*CODEtopTransferedAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByShippingFeeShopTransferedAt(ShippingFeeShopTransferedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_fee_shop_transfered_at",
		Value:  ShippingFeeShopTransferedAt,
		IsNil:  ShippingFeeShopTransferedAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByShippingFeeShopTransferedAtPtr(ShippingFeeShopTransferedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_fee_shop_transfered_at",
		Value:  ShippingFeeShopTransferedAt,
		IsNil:  ShippingFeeShopTransferedAt == nil,
		IsZero: ShippingFeeShopTransferedAt != nil && (*ShippingFeeShopTransferedAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByShippingCancelledAt(ShippingCancelledAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_cancelled_at",
		Value:  ShippingCancelledAt,
		IsNil:  ShippingCancelledAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByShippingCancelledAtPtr(ShippingCancelledAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_cancelled_at",
		Value:  ShippingCancelledAt,
		IsNil:  ShippingCancelledAt == nil,
		IsZero: ShippingCancelledAt != nil && (*ShippingCancelledAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByShippingDeliveredAt(ShippingDeliveredAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_delivered_at",
		Value:  ShippingDeliveredAt,
		IsNil:  ShippingDeliveredAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByShippingDeliveredAtPtr(ShippingDeliveredAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_delivered_at",
		Value:  ShippingDeliveredAt,
		IsNil:  ShippingDeliveredAt == nil,
		IsZero: ShippingDeliveredAt != nil && (*ShippingDeliveredAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByShippingReturnedAt(ShippingReturnedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_returned_at",
		Value:  ShippingReturnedAt,
		IsNil:  ShippingReturnedAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByShippingReturnedAtPtr(ShippingReturnedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_returned_at",
		Value:  ShippingReturnedAt,
		IsNil:  ShippingReturnedAt == nil,
		IsZero: ShippingReturnedAt != nil && (*ShippingReturnedAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByShippingCreatedAt(ShippingCreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_created_at",
		Value:  ShippingCreatedAt,
		IsNil:  ShippingCreatedAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByShippingCreatedAtPtr(ShippingCreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_created_at",
		Value:  ShippingCreatedAt,
		IsNil:  ShippingCreatedAt == nil,
		IsZero: ShippingCreatedAt != nil && (*ShippingCreatedAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByShippingPickingAt(ShippingPickingAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_picking_at",
		Value:  ShippingPickingAt,
		IsNil:  ShippingPickingAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByShippingPickingAtPtr(ShippingPickingAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_picking_at",
		Value:  ShippingPickingAt,
		IsNil:  ShippingPickingAt == nil,
		IsZero: ShippingPickingAt != nil && (*ShippingPickingAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByShippingHoldingAt(ShippingHoldingAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_holding_at",
		Value:  ShippingHoldingAt,
		IsNil:  ShippingHoldingAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByShippingHoldingAtPtr(ShippingHoldingAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_holding_at",
		Value:  ShippingHoldingAt,
		IsNil:  ShippingHoldingAt == nil,
		IsZero: ShippingHoldingAt != nil && (*ShippingHoldingAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByShippingDeliveringAt(ShippingDeliveringAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_delivering_at",
		Value:  ShippingDeliveringAt,
		IsNil:  ShippingDeliveringAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByShippingDeliveringAtPtr(ShippingDeliveringAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_delivering_at",
		Value:  ShippingDeliveringAt,
		IsNil:  ShippingDeliveringAt == nil,
		IsZero: ShippingDeliveringAt != nil && (*ShippingDeliveringAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByShippingReturningAt(ShippingReturningAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_returning_at",
		Value:  ShippingReturningAt,
		IsNil:  ShippingReturningAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByShippingReturningAtPtr(ShippingReturningAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_returning_at",
		Value:  ShippingReturningAt,
		IsNil:  ShippingReturningAt == nil,
		IsZero: ShippingReturningAt != nil && (*ShippingReturningAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByMoneyTransactionID(MoneyTransactionID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "money_transaction_id",
		Value:  MoneyTransactionID,
		IsNil:  MoneyTransactionID == 0,
	}
}

func (ft FulfillmentFilters) ByMoneyTransactionIDPtr(MoneyTransactionID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "money_transaction_id",
		Value:  MoneyTransactionID,
		IsNil:  MoneyTransactionID == nil,
		IsZero: MoneyTransactionID != nil && (*MoneyTransactionID) == 0,
	}
}

func (ft FulfillmentFilters) ByMoneyTransactionShippingExternalID(MoneyTransactionShippingExternalID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "money_transaction_shipping_external_id",
		Value:  MoneyTransactionShippingExternalID,
		IsNil:  MoneyTransactionShippingExternalID == 0,
	}
}

func (ft FulfillmentFilters) ByMoneyTransactionShippingExternalIDPtr(MoneyTransactionShippingExternalID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "money_transaction_shipping_external_id",
		Value:  MoneyTransactionShippingExternalID,
		IsNil:  MoneyTransactionShippingExternalID == nil,
		IsZero: MoneyTransactionShippingExternalID != nil && (*MoneyTransactionShippingExternalID) == 0,
	}
}

func (ft FulfillmentFilters) ByCancelReason(CancelReason string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "cancel_reason",
		Value:  CancelReason,
		IsNil:  CancelReason == "",
	}
}

func (ft FulfillmentFilters) ByCancelReasonPtr(CancelReason *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "cancel_reason",
		Value:  CancelReason,
		IsNil:  CancelReason == nil,
		IsZero: CancelReason != nil && (*CancelReason) == "",
	}
}

func (ft FulfillmentFilters) ByShippingProvider(ShippingProvider m.ShippingProvider) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_provider",
		Value:  ShippingProvider,
		IsNil:  ShippingProvider == "",
	}
}

func (ft FulfillmentFilters) ByShippingProviderPtr(ShippingProvider *m.ShippingProvider) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_provider",
		Value:  ShippingProvider,
		IsNil:  ShippingProvider == nil,
		IsZero: ShippingProvider != nil && (*ShippingProvider) == "",
	}
}

func (ft FulfillmentFilters) ByProviderServiceID(ProviderServiceID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "provider_service_id",
		Value:  ProviderServiceID,
		IsNil:  ProviderServiceID == "",
	}
}

func (ft FulfillmentFilters) ByProviderServiceIDPtr(ProviderServiceID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "provider_service_id",
		Value:  ProviderServiceID,
		IsNil:  ProviderServiceID == nil,
		IsZero: ProviderServiceID != nil && (*ProviderServiceID) == "",
	}
}

func (ft FulfillmentFilters) ByShippingCode(ShippingCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_code",
		Value:  ShippingCode,
		IsNil:  ShippingCode == "",
	}
}

func (ft FulfillmentFilters) ByShippingCodePtr(ShippingCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_code",
		Value:  ShippingCode,
		IsNil:  ShippingCode == nil,
		IsZero: ShippingCode != nil && (*ShippingCode) == "",
	}
}

func (ft FulfillmentFilters) ByShippingNote(ShippingNote string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_note",
		Value:  ShippingNote,
		IsNil:  ShippingNote == "",
	}
}

func (ft FulfillmentFilters) ByShippingNotePtr(ShippingNote *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_note",
		Value:  ShippingNote,
		IsNil:  ShippingNote == nil,
		IsZero: ShippingNote != nil && (*ShippingNote) == "",
	}
}

func (ft FulfillmentFilters) ByTryOn(TryOn m.TryOn) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "try_on",
		Value:  TryOn,
		IsNil:  TryOn == "",
	}
}

func (ft FulfillmentFilters) ByTryOnPtr(TryOn *m.TryOn) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "try_on",
		Value:  TryOn,
		IsNil:  TryOn == nil,
		IsZero: TryOn != nil && (*TryOn) == "",
	}
}

func (ft FulfillmentFilters) ByIncludeInsurance(IncludeInsurance bool) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "include_insurance",
		Value:  IncludeInsurance,
		IsNil:  bool(!IncludeInsurance),
	}
}

func (ft FulfillmentFilters) ByIncludeInsurancePtr(IncludeInsurance *bool) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "include_insurance",
		Value:  IncludeInsurance,
		IsNil:  IncludeInsurance == nil,
		IsZero: IncludeInsurance != nil && bool(!(*IncludeInsurance)),
	}
}

func (ft FulfillmentFilters) ByExternalShippingName(ExternalShippingName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_shipping_name",
		Value:  ExternalShippingName,
		IsNil:  ExternalShippingName == "",
	}
}

func (ft FulfillmentFilters) ByExternalShippingNamePtr(ExternalShippingName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_shipping_name",
		Value:  ExternalShippingName,
		IsNil:  ExternalShippingName == nil,
		IsZero: ExternalShippingName != nil && (*ExternalShippingName) == "",
	}
}

func (ft FulfillmentFilters) ByExternalShippingID(ExternalShippingID string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_shipping_id",
		Value:  ExternalShippingID,
		IsNil:  ExternalShippingID == "",
	}
}

func (ft FulfillmentFilters) ByExternalShippingIDPtr(ExternalShippingID *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_shipping_id",
		Value:  ExternalShippingID,
		IsNil:  ExternalShippingID == nil,
		IsZero: ExternalShippingID != nil && (*ExternalShippingID) == "",
	}
}

func (ft FulfillmentFilters) ByExternalShippingCode(ExternalShippingCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_shipping_code",
		Value:  ExternalShippingCode,
		IsNil:  ExternalShippingCode == "",
	}
}

func (ft FulfillmentFilters) ByExternalShippingCodePtr(ExternalShippingCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_shipping_code",
		Value:  ExternalShippingCode,
		IsNil:  ExternalShippingCode == nil,
		IsZero: ExternalShippingCode != nil && (*ExternalShippingCode) == "",
	}
}

func (ft FulfillmentFilters) ByExternalShippingCreatedAt(ExternalShippingCreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_shipping_created_at",
		Value:  ExternalShippingCreatedAt,
		IsNil:  ExternalShippingCreatedAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByExternalShippingCreatedAtPtr(ExternalShippingCreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_shipping_created_at",
		Value:  ExternalShippingCreatedAt,
		IsNil:  ExternalShippingCreatedAt == nil,
		IsZero: ExternalShippingCreatedAt != nil && (*ExternalShippingCreatedAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByExternalShippingUpdatedAt(ExternalShippingUpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_shipping_updated_at",
		Value:  ExternalShippingUpdatedAt,
		IsNil:  ExternalShippingUpdatedAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByExternalShippingUpdatedAtPtr(ExternalShippingUpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_shipping_updated_at",
		Value:  ExternalShippingUpdatedAt,
		IsNil:  ExternalShippingUpdatedAt == nil,
		IsZero: ExternalShippingUpdatedAt != nil && (*ExternalShippingUpdatedAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByExternalShippingCancelledAt(ExternalShippingCancelledAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_shipping_cancelled_at",
		Value:  ExternalShippingCancelledAt,
		IsNil:  ExternalShippingCancelledAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByExternalShippingCancelledAtPtr(ExternalShippingCancelledAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_shipping_cancelled_at",
		Value:  ExternalShippingCancelledAt,
		IsNil:  ExternalShippingCancelledAt == nil,
		IsZero: ExternalShippingCancelledAt != nil && (*ExternalShippingCancelledAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByExternalShippingDeliveredAt(ExternalShippingDeliveredAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_shipping_delivered_at",
		Value:  ExternalShippingDeliveredAt,
		IsNil:  ExternalShippingDeliveredAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByExternalShippingDeliveredAtPtr(ExternalShippingDeliveredAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_shipping_delivered_at",
		Value:  ExternalShippingDeliveredAt,
		IsNil:  ExternalShippingDeliveredAt == nil,
		IsZero: ExternalShippingDeliveredAt != nil && (*ExternalShippingDeliveredAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByExternalShippingReturnedAt(ExternalShippingReturnedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_shipping_returned_at",
		Value:  ExternalShippingReturnedAt,
		IsNil:  ExternalShippingReturnedAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByExternalShippingReturnedAtPtr(ExternalShippingReturnedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_shipping_returned_at",
		Value:  ExternalShippingReturnedAt,
		IsNil:  ExternalShippingReturnedAt == nil,
		IsZero: ExternalShippingReturnedAt != nil && (*ExternalShippingReturnedAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByExternalShippingClosedAt(ExternalShippingClosedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_shipping_closed_at",
		Value:  ExternalShippingClosedAt,
		IsNil:  ExternalShippingClosedAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByExternalShippingClosedAtPtr(ExternalShippingClosedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_shipping_closed_at",
		Value:  ExternalShippingClosedAt,
		IsNil:  ExternalShippingClosedAt == nil,
		IsZero: ExternalShippingClosedAt != nil && (*ExternalShippingClosedAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByExternalShippingState(ExternalShippingState string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_shipping_state",
		Value:  ExternalShippingState,
		IsNil:  ExternalShippingState == "",
	}
}

func (ft FulfillmentFilters) ByExternalShippingStatePtr(ExternalShippingState *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_shipping_state",
		Value:  ExternalShippingState,
		IsNil:  ExternalShippingState == nil,
		IsZero: ExternalShippingState != nil && (*ExternalShippingState) == "",
	}
}

func (ft FulfillmentFilters) ByExternalShippingStateCode(ExternalShippingStateCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_shipping_state_code",
		Value:  ExternalShippingStateCode,
		IsNil:  ExternalShippingStateCode == "",
	}
}

func (ft FulfillmentFilters) ByExternalShippingStateCodePtr(ExternalShippingStateCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_shipping_state_code",
		Value:  ExternalShippingStateCode,
		IsNil:  ExternalShippingStateCode == nil,
		IsZero: ExternalShippingStateCode != nil && (*ExternalShippingStateCode) == "",
	}
}

func (ft FulfillmentFilters) ByExternalShippingStatus(ExternalShippingStatus m.Status5) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_shipping_status",
		Value:  ExternalShippingStatus,
		IsNil:  ExternalShippingStatus == 0,
	}
}

func (ft FulfillmentFilters) ByExternalShippingStatusPtr(ExternalShippingStatus *m.Status5) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_shipping_status",
		Value:  ExternalShippingStatus,
		IsNil:  ExternalShippingStatus == nil,
		IsZero: ExternalShippingStatus != nil && (*ExternalShippingStatus) == 0,
	}
}

func (ft FulfillmentFilters) ByExternalShippingNote(ExternalShippingNote string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_shipping_note",
		Value:  ExternalShippingNote,
		IsNil:  ExternalShippingNote == "",
	}
}

func (ft FulfillmentFilters) ByExternalShippingNotePtr(ExternalShippingNote *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_shipping_note",
		Value:  ExternalShippingNote,
		IsNil:  ExternalShippingNote == nil,
		IsZero: ExternalShippingNote != nil && (*ExternalShippingNote) == "",
	}
}

func (ft FulfillmentFilters) ByExternalShippingSubState(ExternalShippingSubState string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "external_shipping_sub_state",
		Value:  ExternalShippingSubState,
		IsNil:  ExternalShippingSubState == "",
	}
}

func (ft FulfillmentFilters) ByExternalShippingSubStatePtr(ExternalShippingSubState *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "external_shipping_sub_state",
		Value:  ExternalShippingSubState,
		IsNil:  ExternalShippingSubState == nil,
		IsZero: ExternalShippingSubState != nil && (*ExternalShippingSubState) == "",
	}
}

func (ft FulfillmentFilters) ByShippingState(ShippingState m.ShippingState) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_state",
		Value:  ShippingState,
		IsNil:  ShippingState == "",
	}
}

func (ft FulfillmentFilters) ByShippingStatePtr(ShippingState *m.ShippingState) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_state",
		Value:  ShippingState,
		IsNil:  ShippingState == nil,
		IsZero: ShippingState != nil && (*ShippingState) == "",
	}
}

func (ft FulfillmentFilters) ByShippingStatus(ShippingStatus m.Status5) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shipping_status",
		Value:  ShippingStatus,
		IsNil:  ShippingStatus == 0,
	}
}

func (ft FulfillmentFilters) ByShippingStatusPtr(ShippingStatus *m.Status5) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shipping_status",
		Value:  ShippingStatus,
		IsNil:  ShippingStatus == nil,
		IsZero: ShippingStatus != nil && (*ShippingStatus) == 0,
	}
}

func (ft FulfillmentFilters) ByEtopPaymentStatus(EtopPaymentStatus m.Status4) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "etop_payment_status",
		Value:  EtopPaymentStatus,
		IsNil:  EtopPaymentStatus == 0,
	}
}

func (ft FulfillmentFilters) ByEtopPaymentStatusPtr(EtopPaymentStatus *m.Status4) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "etop_payment_status",
		Value:  EtopPaymentStatus,
		IsNil:  EtopPaymentStatus == nil,
		IsZero: EtopPaymentStatus != nil && (*EtopPaymentStatus) == 0,
	}
}

func (ft FulfillmentFilters) ByStatus(Status m.Status5) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft FulfillmentFilters) ByStatusPtr(Status *m.Status5) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft FulfillmentFilters) BySyncStatus(SyncStatus m.Status4) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "sync_status",
		Value:  SyncStatus,
		IsNil:  SyncStatus == 0,
	}
}

func (ft FulfillmentFilters) BySyncStatusPtr(SyncStatus *m.Status4) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "sync_status",
		Value:  SyncStatus,
		IsNil:  SyncStatus == nil,
		IsZero: SyncStatus != nil && (*SyncStatus) == 0,
	}
}

func (ft FulfillmentFilters) ByLastSyncAt(LastSyncAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt.IsZero(),
	}
}

func (ft FulfillmentFilters) ByLastSyncAtPtr(LastSyncAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt == nil,
		IsZero: LastSyncAt != nil && (*LastSyncAt).IsZero(),
	}
}

func (ft FulfillmentFilters) ByAdminNote(AdminNote string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "admin_note",
		Value:  AdminNote,
		IsNil:  AdminNote == "",
	}
}

func (ft FulfillmentFilters) ByAdminNotePtr(AdminNote *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "admin_note",
		Value:  AdminNote,
		IsNil:  AdminNote == nil,
		IsZero: AdminNote != nil && (*AdminNote) == "",
	}
}

func (ft FulfillmentFilters) ByIsPartialDelivery(IsPartialDelivery bool) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "is_partial_delivery",
		Value:  IsPartialDelivery,
		IsNil:  bool(!IsPartialDelivery),
	}
}

func (ft FulfillmentFilters) ByIsPartialDeliveryPtr(IsPartialDelivery *bool) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "is_partial_delivery",
		Value:  IsPartialDelivery,
		IsNil:  IsPartialDelivery == nil,
		IsZero: IsPartialDelivery != nil && bool(!(*IsPartialDelivery)),
	}
}

type AddressFilters struct{ prefix string }

func NewAddressFilters(prefix string) AddressFilters {
	return AddressFilters{prefix}
}

func (ft AddressFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft AddressFilters) Prefix() string {
	return ft.prefix
}

func (ft AddressFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft AddressFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft AddressFilters) ByFullName(FullName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "full_name",
		Value:  FullName,
		IsNil:  FullName == "",
	}
}

func (ft AddressFilters) ByFullNamePtr(FullName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "full_name",
		Value:  FullName,
		IsNil:  FullName == nil,
		IsZero: FullName != nil && (*FullName) == "",
	}
}

func (ft AddressFilters) ByFirstName(FirstName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "first_name",
		Value:  FirstName,
		IsNil:  FirstName == "",
	}
}

func (ft AddressFilters) ByFirstNamePtr(FirstName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "first_name",
		Value:  FirstName,
		IsNil:  FirstName == nil,
		IsZero: FirstName != nil && (*FirstName) == "",
	}
}

func (ft AddressFilters) ByLastName(LastName string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "last_name",
		Value:  LastName,
		IsNil:  LastName == "",
	}
}

func (ft AddressFilters) ByLastNamePtr(LastName *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "last_name",
		Value:  LastName,
		IsNil:  LastName == nil,
		IsZero: LastName != nil && (*LastName) == "",
	}
}

func (ft AddressFilters) ByPhone(Phone string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "phone",
		Value:  Phone,
		IsNil:  Phone == "",
	}
}

func (ft AddressFilters) ByPhonePtr(Phone *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "phone",
		Value:  Phone,
		IsNil:  Phone == nil,
		IsZero: Phone != nil && (*Phone) == "",
	}
}

func (ft AddressFilters) ByPosition(Position string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "position",
		Value:  Position,
		IsNil:  Position == "",
	}
}

func (ft AddressFilters) ByPositionPtr(Position *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "position",
		Value:  Position,
		IsNil:  Position == nil,
		IsZero: Position != nil && (*Position) == "",
	}
}

func (ft AddressFilters) ByEmail(Email string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "email",
		Value:  Email,
		IsNil:  Email == "",
	}
}

func (ft AddressFilters) ByEmailPtr(Email *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "email",
		Value:  Email,
		IsNil:  Email == nil,
		IsZero: Email != nil && (*Email) == "",
	}
}

func (ft AddressFilters) ByCountry(Country string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "country",
		Value:  Country,
		IsNil:  Country == "",
	}
}

func (ft AddressFilters) ByCountryPtr(Country *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "country",
		Value:  Country,
		IsNil:  Country == nil,
		IsZero: Country != nil && (*Country) == "",
	}
}

func (ft AddressFilters) ByCity(City string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "city",
		Value:  City,
		IsNil:  City == "",
	}
}

func (ft AddressFilters) ByCityPtr(City *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "city",
		Value:  City,
		IsNil:  City == nil,
		IsZero: City != nil && (*City) == "",
	}
}

func (ft AddressFilters) ByProvince(Province string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "province",
		Value:  Province,
		IsNil:  Province == "",
	}
}

func (ft AddressFilters) ByProvincePtr(Province *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "province",
		Value:  Province,
		IsNil:  Province == nil,
		IsZero: Province != nil && (*Province) == "",
	}
}

func (ft AddressFilters) ByDistrict(District string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "district",
		Value:  District,
		IsNil:  District == "",
	}
}

func (ft AddressFilters) ByDistrictPtr(District *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "district",
		Value:  District,
		IsNil:  District == nil,
		IsZero: District != nil && (*District) == "",
	}
}

func (ft AddressFilters) ByWard(Ward string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ward",
		Value:  Ward,
		IsNil:  Ward == "",
	}
}

func (ft AddressFilters) ByWardPtr(Ward *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ward",
		Value:  Ward,
		IsNil:  Ward == nil,
		IsZero: Ward != nil && (*Ward) == "",
	}
}

func (ft AddressFilters) ByZip(Zip string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "zip",
		Value:  Zip,
		IsNil:  Zip == "",
	}
}

func (ft AddressFilters) ByZipPtr(Zip *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "zip",
		Value:  Zip,
		IsNil:  Zip == nil,
		IsZero: Zip != nil && (*Zip) == "",
	}
}

func (ft AddressFilters) ByDistrictCode(DistrictCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "district_code",
		Value:  DistrictCode,
		IsNil:  DistrictCode == "",
	}
}

func (ft AddressFilters) ByDistrictCodePtr(DistrictCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "district_code",
		Value:  DistrictCode,
		IsNil:  DistrictCode == nil,
		IsZero: DistrictCode != nil && (*DistrictCode) == "",
	}
}

func (ft AddressFilters) ByProvinceCode(ProvinceCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "province_code",
		Value:  ProvinceCode,
		IsNil:  ProvinceCode == "",
	}
}

func (ft AddressFilters) ByProvinceCodePtr(ProvinceCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "province_code",
		Value:  ProvinceCode,
		IsNil:  ProvinceCode == nil,
		IsZero: ProvinceCode != nil && (*ProvinceCode) == "",
	}
}

func (ft AddressFilters) ByWardCode(WardCode string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "ward_code",
		Value:  WardCode,
		IsNil:  WardCode == "",
	}
}

func (ft AddressFilters) ByWardCodePtr(WardCode *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "ward_code",
		Value:  WardCode,
		IsNil:  WardCode == nil,
		IsZero: WardCode != nil && (*WardCode) == "",
	}
}

func (ft AddressFilters) ByCompany(Company string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "company",
		Value:  Company,
		IsNil:  Company == "",
	}
}

func (ft AddressFilters) ByCompanyPtr(Company *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "company",
		Value:  Company,
		IsNil:  Company == nil,
		IsZero: Company != nil && (*Company) == "",
	}
}

func (ft AddressFilters) ByAddress1(Address1 string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "address1",
		Value:  Address1,
		IsNil:  Address1 == "",
	}
}

func (ft AddressFilters) ByAddress1Ptr(Address1 *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "address1",
		Value:  Address1,
		IsNil:  Address1 == nil,
		IsZero: Address1 != nil && (*Address1) == "",
	}
}

func (ft AddressFilters) ByAddress2(Address2 string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "address2",
		Value:  Address2,
		IsNil:  Address2 == "",
	}
}

func (ft AddressFilters) ByAddress2Ptr(Address2 *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "address2",
		Value:  Address2,
		IsNil:  Address2 == nil,
		IsZero: Address2 != nil && (*Address2) == "",
	}
}

func (ft AddressFilters) ByType(Type string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "type",
		Value:  Type,
		IsNil:  Type == "",
	}
}

func (ft AddressFilters) ByTypePtr(Type *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "type",
		Value:  Type,
		IsNil:  Type == nil,
		IsZero: Type != nil && (*Type) == "",
	}
}

func (ft AddressFilters) ByAccountID(AccountID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == 0,
	}
}

func (ft AddressFilters) ByAccountIDPtr(AccountID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == nil,
		IsZero: AccountID != nil && (*AccountID) == 0,
	}
}

func (ft AddressFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft AddressFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft AddressFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft AddressFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

type CodeFilters struct{ prefix string }

func NewCodeFilters(prefix string) CodeFilters {
	return CodeFilters{prefix}
}

func (ft CodeFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft CodeFilters) Prefix() string {
	return ft.prefix
}

func (ft CodeFilters) ByCode(Code string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "code",
		Value:  Code,
		IsNil:  Code == "",
	}
}

func (ft CodeFilters) ByCodePtr(Code *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "code",
		Value:  Code,
		IsNil:  Code == nil,
		IsZero: Code != nil && (*Code) == "",
	}
}

func (ft CodeFilters) ByType(Type m.CodeType) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "type",
		Value:  Type,
		IsNil:  Type == "",
	}
}

func (ft CodeFilters) ByTypePtr(Type *m.CodeType) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "type",
		Value:  Type,
		IsNil:  Type == nil,
		IsZero: Type != nil && (*Type) == "",
	}
}

func (ft CodeFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft CodeFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

type CreditFilters struct{ prefix string }

func NewCreditFilters(prefix string) CreditFilters {
	return CreditFilters{prefix}
}

func (ft CreditFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft CreditFilters) Prefix() string {
	return ft.prefix
}

func (ft CreditFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft CreditFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft CreditFilters) ByAmount(Amount int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "amount",
		Value:  Amount,
		IsNil:  Amount == 0,
	}
}

func (ft CreditFilters) ByAmountPtr(Amount *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "amount",
		Value:  Amount,
		IsNil:  Amount == nil,
		IsZero: Amount != nil && (*Amount) == 0,
	}
}

func (ft CreditFilters) ByShopID(ShopID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == 0,
	}
}

func (ft CreditFilters) ByShopIDPtr(ShopID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "shop_id",
		Value:  ShopID,
		IsNil:  ShopID == nil,
		IsZero: ShopID != nil && (*ShopID) == 0,
	}
}

func (ft CreditFilters) BySupplierID(SupplierID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == 0,
	}
}

func (ft CreditFilters) BySupplierIDPtr(SupplierID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "supplier_id",
		Value:  SupplierID,
		IsNil:  SupplierID == nil,
		IsZero: SupplierID != nil && (*SupplierID) == 0,
	}
}

func (ft CreditFilters) ByType(Type string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "type",
		Value:  Type,
		IsNil:  Type == "",
	}
}

func (ft CreditFilters) ByTypePtr(Type *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "type",
		Value:  Type,
		IsNil:  Type == nil,
		IsZero: Type != nil && (*Type) == "",
	}
}

func (ft CreditFilters) ByStatus(Status m.Status3) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == 0,
	}
}

func (ft CreditFilters) ByStatusPtr(Status *m.Status3) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "status",
		Value:  Status,
		IsNil:  Status == nil,
		IsZero: Status != nil && (*Status) == 0,
	}
}

func (ft CreditFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft CreditFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft CreditFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft CreditFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft CreditFilters) ByPaidAt(PaidAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "paid_at",
		Value:  PaidAt,
		IsNil:  PaidAt.IsZero(),
	}
}

func (ft CreditFilters) ByPaidAtPtr(PaidAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "paid_at",
		Value:  PaidAt,
		IsNil:  PaidAt == nil,
		IsZero: PaidAt != nil && (*PaidAt).IsZero(),
	}
}

type ShippingSourceFilters struct{ prefix string }

func NewShippingSourceFilters(prefix string) ShippingSourceFilters {
	return ShippingSourceFilters{prefix}
}

func (ft ShippingSourceFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ShippingSourceFilters) Prefix() string {
	return ft.prefix
}

func (ft ShippingSourceFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft ShippingSourceFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft ShippingSourceFilters) ByName(Name string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == "",
	}
}

func (ft ShippingSourceFilters) ByNamePtr(Name *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "name",
		Value:  Name,
		IsNil:  Name == nil,
		IsZero: Name != nil && (*Name) == "",
	}
}

func (ft ShippingSourceFilters) ByUsername(Username string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "username",
		Value:  Username,
		IsNil:  Username == "",
	}
}

func (ft ShippingSourceFilters) ByUsernamePtr(Username *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "username",
		Value:  Username,
		IsNil:  Username == nil,
		IsZero: Username != nil && (*Username) == "",
	}
}

func (ft ShippingSourceFilters) ByType(Type string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "type",
		Value:  Type,
		IsNil:  Type == "",
	}
}

func (ft ShippingSourceFilters) ByTypePtr(Type *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "type",
		Value:  Type,
		IsNil:  Type == nil,
		IsZero: Type != nil && (*Type) == "",
	}
}

func (ft ShippingSourceFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ShippingSourceFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft ShippingSourceFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft ShippingSourceFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

type ShippingSourceInternalFilters struct{ prefix string }

func NewShippingSourceInternalFilters(prefix string) ShippingSourceInternalFilters {
	return ShippingSourceInternalFilters{prefix}
}

func (ft ShippingSourceInternalFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft ShippingSourceInternalFilters) Prefix() string {
	return ft.prefix
}

func (ft ShippingSourceInternalFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft ShippingSourceInternalFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft ShippingSourceInternalFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft ShippingSourceInternalFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft ShippingSourceInternalFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft ShippingSourceInternalFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft ShippingSourceInternalFilters) ByLastSyncAt(LastSyncAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt.IsZero(),
	}
}

func (ft ShippingSourceInternalFilters) ByLastSyncAtPtr(LastSyncAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "last_sync_at",
		Value:  LastSyncAt,
		IsNil:  LastSyncAt == nil,
		IsZero: LastSyncAt != nil && (*LastSyncAt).IsZero(),
	}
}

func (ft ShippingSourceInternalFilters) ByAccessToken(AccessToken string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "access_token",
		Value:  AccessToken,
		IsNil:  AccessToken == "",
	}
}

func (ft ShippingSourceInternalFilters) ByAccessTokenPtr(AccessToken *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "access_token",
		Value:  AccessToken,
		IsNil:  AccessToken == nil,
		IsZero: AccessToken != nil && (*AccessToken) == "",
	}
}

func (ft ShippingSourceInternalFilters) ByExpiresAt(ExpiresAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "expires_at",
		Value:  ExpiresAt,
		IsNil:  ExpiresAt.IsZero(),
	}
}

func (ft ShippingSourceInternalFilters) ByExpiresAtPtr(ExpiresAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "expires_at",
		Value:  ExpiresAt,
		IsNil:  ExpiresAt == nil,
		IsZero: ExpiresAt != nil && (*ExpiresAt).IsZero(),
	}
}

type WebhookFilters struct{ prefix string }

func NewWebhookFilters(prefix string) WebhookFilters {
	return WebhookFilters{prefix}
}

func (ft WebhookFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft WebhookFilters) Prefix() string {
	return ft.prefix
}

func (ft WebhookFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft WebhookFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft WebhookFilters) ByAccountID(AccountID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == 0,
	}
}

func (ft WebhookFilters) ByAccountIDPtr(AccountID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == nil,
		IsZero: AccountID != nil && (*AccountID) == 0,
	}
}

func (ft WebhookFilters) ByURL(URL string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "url",
		Value:  URL,
		IsNil:  URL == "",
	}
}

func (ft WebhookFilters) ByURLPtr(URL *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "url",
		Value:  URL,
		IsNil:  URL == nil,
		IsZero: URL != nil && (*URL) == "",
	}
}

func (ft WebhookFilters) ByMetadata(Metadata string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "metadata",
		Value:  Metadata,
		IsNil:  Metadata == "",
	}
}

func (ft WebhookFilters) ByMetadataPtr(Metadata *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "metadata",
		Value:  Metadata,
		IsNil:  Metadata == nil,
		IsZero: Metadata != nil && (*Metadata) == "",
	}
}

func (ft WebhookFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft WebhookFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}

func (ft WebhookFilters) ByUpdatedAt(UpdatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt.IsZero(),
	}
}

func (ft WebhookFilters) ByUpdatedAtPtr(UpdatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "updated_at",
		Value:  UpdatedAt,
		IsNil:  UpdatedAt == nil,
		IsZero: UpdatedAt != nil && (*UpdatedAt).IsZero(),
	}
}

func (ft WebhookFilters) ByDeletedAt(DeletedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt.IsZero(),
	}
}

func (ft WebhookFilters) ByDeletedAtPtr(DeletedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "deleted_at",
		Value:  DeletedAt,
		IsNil:  DeletedAt == nil,
		IsZero: DeletedAt != nil && (*DeletedAt).IsZero(),
	}
}

type CallbackFilters struct{ prefix string }

func NewCallbackFilters(prefix string) CallbackFilters {
	return CallbackFilters{prefix}
}

func (ft CallbackFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(ft.prefix, pred, args...)
}

func (ft CallbackFilters) Prefix() string {
	return ft.prefix
}

func (ft CallbackFilters) ByID(ID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft CallbackFilters) ByIDPtr(ID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft CallbackFilters) ByWebhookID(WebhookID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "webhook_id",
		Value:  WebhookID,
		IsNil:  WebhookID == 0,
	}
}

func (ft CallbackFilters) ByWebhookIDPtr(WebhookID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "webhook_id",
		Value:  WebhookID,
		IsNil:  WebhookID == nil,
		IsZero: WebhookID != nil && (*WebhookID) == 0,
	}
}

func (ft CallbackFilters) ByAccountID(AccountID int64) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == 0,
	}
}

func (ft CallbackFilters) ByAccountIDPtr(AccountID *int64) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "account_id",
		Value:  AccountID,
		IsNil:  AccountID == nil,
		IsZero: AccountID != nil && (*AccountID) == 0,
	}
}

func (ft CallbackFilters) ByCreatedAt(CreatedAt time.Time) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt.IsZero(),
	}
}

func (ft CallbackFilters) ByCreatedAtPtr(CreatedAt *time.Time) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: ft.prefix,
		Column: "created_at",
		Value:  CreatedAt,
		IsNil:  CreatedAt == nil,
		IsZero: CreatedAt != nil && (*CreatedAt).IsZero(),
	}
}
