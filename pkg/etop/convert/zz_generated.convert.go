// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	identity "etop.vn/api/main/identity"
	conversion "etop.vn/backend/pkg/common/conversion"
	etopmodel "etop.vn/backend/pkg/etop/model"
	dot "etop.vn/capi/dot"
)

/*
Custom conversions: (none)

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*etopmodel.BankAccount)(nil), (*identity.BankAccount)(nil), func(arg, out interface{}) error {
		Convert_etopmodel_BankAccount_identity_BankAccount(arg.(*etopmodel.BankAccount), out.(*identity.BankAccount))
		return nil
	})
	s.Register(([]*etopmodel.BankAccount)(nil), (*[]*identity.BankAccount)(nil), func(arg, out interface{}) error {
		out0 := Convert_etopmodel_BankAccounts_identity_BankAccounts(arg.([]*etopmodel.BankAccount))
		*out.(*[]*identity.BankAccount) = out0
		return nil
	})
	s.Register((*identity.BankAccount)(nil), (*etopmodel.BankAccount)(nil), func(arg, out interface{}) error {
		Convert_identity_BankAccount_etopmodel_BankAccount(arg.(*identity.BankAccount), out.(*etopmodel.BankAccount))
		return nil
	})
	s.Register(([]*identity.BankAccount)(nil), (*[]*etopmodel.BankAccount)(nil), func(arg, out interface{}) error {
		out0 := Convert_identity_BankAccounts_etopmodel_BankAccounts(arg.([]*identity.BankAccount))
		*out.(*[]*etopmodel.BankAccount) = out0
		return nil
	})
	s.Register((*etopmodel.Permission)(nil), (*identity.Permission)(nil), func(arg, out interface{}) error {
		Convert_etopmodel_Permission_identity_Permission(arg.(*etopmodel.Permission), out.(*identity.Permission))
		return nil
	})
	s.Register(([]*etopmodel.Permission)(nil), (*[]*identity.Permission)(nil), func(arg, out interface{}) error {
		out0 := Convert_etopmodel_Permissions_identity_Permissions(arg.([]*etopmodel.Permission))
		*out.(*[]*identity.Permission) = out0
		return nil
	})
	s.Register((*identity.Permission)(nil), (*etopmodel.Permission)(nil), func(arg, out interface{}) error {
		Convert_identity_Permission_etopmodel_Permission(arg.(*identity.Permission), out.(*etopmodel.Permission))
		return nil
	})
	s.Register(([]*identity.Permission)(nil), (*[]*etopmodel.Permission)(nil), func(arg, out interface{}) error {
		out0 := Convert_identity_Permissions_etopmodel_Permissions(arg.([]*identity.Permission))
		*out.(*[]*etopmodel.Permission) = out0
		return nil
	})
	s.Register((*etopmodel.Shop)(nil), (*identity.Shop)(nil), func(arg, out interface{}) error {
		Convert_etopmodel_Shop_identity_Shop(arg.(*etopmodel.Shop), out.(*identity.Shop))
		return nil
	})
	s.Register(([]*etopmodel.Shop)(nil), (*[]*identity.Shop)(nil), func(arg, out interface{}) error {
		out0 := Convert_etopmodel_Shops_identity_Shops(arg.([]*etopmodel.Shop))
		*out.(*[]*identity.Shop) = out0
		return nil
	})
	s.Register((*identity.Shop)(nil), (*etopmodel.Shop)(nil), func(arg, out interface{}) error {
		Convert_identity_Shop_etopmodel_Shop(arg.(*identity.Shop), out.(*etopmodel.Shop))
		return nil
	})
	s.Register(([]*identity.Shop)(nil), (*[]*etopmodel.Shop)(nil), func(arg, out interface{}) error {
		out0 := Convert_identity_Shops_etopmodel_Shops(arg.([]*identity.Shop))
		*out.(*[]*etopmodel.Shop) = out0
		return nil
	})
	s.Register((*etopmodel.User)(nil), (*identity.User)(nil), func(arg, out interface{}) error {
		Convert_etopmodel_User_identity_User(arg.(*etopmodel.User), out.(*identity.User))
		return nil
	})
	s.Register(([]*etopmodel.User)(nil), (*[]*identity.User)(nil), func(arg, out interface{}) error {
		out0 := Convert_etopmodel_Users_identity_Users(arg.([]*etopmodel.User))
		*out.(*[]*identity.User) = out0
		return nil
	})
	s.Register((*identity.User)(nil), (*etopmodel.User)(nil), func(arg, out interface{}) error {
		Convert_identity_User_etopmodel_User(arg.(*identity.User), out.(*etopmodel.User))
		return nil
	})
	s.Register(([]*identity.User)(nil), (*[]*etopmodel.User)(nil), func(arg, out interface{}) error {
		out0 := Convert_identity_Users_etopmodel_Users(arg.([]*identity.User))
		*out.(*[]*etopmodel.User) = out0
		return nil
	})
}

//-- convert etop.vn/api/main/identity.BankAccount --//

func Convert_etopmodel_BankAccount_identity_BankAccount(arg *etopmodel.BankAccount, out *identity.BankAccount) *identity.BankAccount {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identity.BankAccount{}
	}
	convert_etopmodel_BankAccount_identity_BankAccount(arg, out)
	return out
}

func convert_etopmodel_BankAccount_identity_BankAccount(arg *etopmodel.BankAccount, out *identity.BankAccount) {
	out.Name = arg.Name                   // simple assign
	out.Province = arg.Province           // simple assign
	out.Branch = arg.Branch               // simple assign
	out.AccountNumber = arg.AccountNumber // simple assign
	out.AccountName = arg.AccountName     // simple assign
}

func Convert_etopmodel_BankAccounts_identity_BankAccounts(args []*etopmodel.BankAccount) (outs []*identity.BankAccount) {
	tmps := make([]identity.BankAccount, len(args))
	outs = make([]*identity.BankAccount, len(args))
	for i := range tmps {
		outs[i] = Convert_etopmodel_BankAccount_identity_BankAccount(args[i], &tmps[i])
	}
	return outs
}

func Convert_identity_BankAccount_etopmodel_BankAccount(arg *identity.BankAccount, out *etopmodel.BankAccount) *etopmodel.BankAccount {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &etopmodel.BankAccount{}
	}
	convert_identity_BankAccount_etopmodel_BankAccount(arg, out)
	return out
}

func convert_identity_BankAccount_etopmodel_BankAccount(arg *identity.BankAccount, out *etopmodel.BankAccount) {
	out.Name = arg.Name                   // simple assign
	out.Province = arg.Province           // simple assign
	out.Branch = arg.Branch               // simple assign
	out.AccountNumber = arg.AccountNumber // simple assign
	out.AccountName = arg.AccountName     // simple assign
}

func Convert_identity_BankAccounts_etopmodel_BankAccounts(args []*identity.BankAccount) (outs []*etopmodel.BankAccount) {
	tmps := make([]etopmodel.BankAccount, len(args))
	outs = make([]*etopmodel.BankAccount, len(args))
	for i := range tmps {
		outs[i] = Convert_identity_BankAccount_etopmodel_BankAccount(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/api/main/identity.Permission --//

func Convert_etopmodel_Permission_identity_Permission(arg *etopmodel.Permission, out *identity.Permission) *identity.Permission {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identity.Permission{}
	}
	convert_etopmodel_Permission_identity_Permission(arg, out)
	return out
}

func convert_etopmodel_Permission_identity_Permission(arg *etopmodel.Permission, out *identity.Permission) {
	out.Roles = arg.Roles             // simple assign
	out.Permissions = arg.Permissions // simple assign
}

func Convert_etopmodel_Permissions_identity_Permissions(args []*etopmodel.Permission) (outs []*identity.Permission) {
	tmps := make([]identity.Permission, len(args))
	outs = make([]*identity.Permission, len(args))
	for i := range tmps {
		outs[i] = Convert_etopmodel_Permission_identity_Permission(args[i], &tmps[i])
	}
	return outs
}

func Convert_identity_Permission_etopmodel_Permission(arg *identity.Permission, out *etopmodel.Permission) *etopmodel.Permission {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &etopmodel.Permission{}
	}
	convert_identity_Permission_etopmodel_Permission(arg, out)
	return out
}

func convert_identity_Permission_etopmodel_Permission(arg *identity.Permission, out *etopmodel.Permission) {
	out.Roles = arg.Roles             // simple assign
	out.Permissions = arg.Permissions // simple assign
}

func Convert_identity_Permissions_etopmodel_Permissions(args []*identity.Permission) (outs []*etopmodel.Permission) {
	tmps := make([]etopmodel.Permission, len(args))
	outs = make([]*etopmodel.Permission, len(args))
	for i := range tmps {
		outs[i] = Convert_identity_Permission_etopmodel_Permission(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/api/main/identity.Shop --//

func Convert_etopmodel_Shop_identity_Shop(arg *etopmodel.Shop, out *identity.Shop) *identity.Shop {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identity.Shop{}
	}
	convert_etopmodel_Shop_identity_Shop(arg, out)
	return out
}

func convert_etopmodel_Shop_identity_Shop(arg *etopmodel.Shop, out *identity.Shop) {
	out.ID = arg.ID                               // simple assign
	out.Name = arg.Name                           // simple assign
	out.OwnerID = arg.OwnerID                     // simple assign
	out.IsTest = arg.IsTest                       // simple assign
	out.AddressID = arg.AddressID                 // simple assign
	out.ShipToAddressID = arg.ShipToAddressID     // simple assign
	out.ShipFromAddressID = arg.ShipFromAddressID // simple assign
	out.Phone = arg.Phone                         // simple assign
	out.WebsiteURL = arg.WebsiteURL               // simple assign
	out.ImageURL = arg.ImageURL                   // simple assign
	out.Email = arg.Email                         // simple assign
	out.Code = arg.Code                           // simple assign
	out.AutoCreateFFM = arg.AutoCreateFFM         // simple assign
	out.Status = arg.Status                       // simple assign
	out.CreatedAt = arg.CreatedAt                 // simple assign
	out.UpdatedAt = arg.UpdatedAt                 // simple assign
	out.DeletedAt = arg.DeletedAt                 // simple assign
}

func Convert_etopmodel_Shops_identity_Shops(args []*etopmodel.Shop) (outs []*identity.Shop) {
	tmps := make([]identity.Shop, len(args))
	outs = make([]*identity.Shop, len(args))
	for i := range tmps {
		outs[i] = Convert_etopmodel_Shop_identity_Shop(args[i], &tmps[i])
	}
	return outs
}

func Convert_identity_Shop_etopmodel_Shop(arg *identity.Shop, out *etopmodel.Shop) *etopmodel.Shop {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &etopmodel.Shop{}
	}
	convert_identity_Shop_etopmodel_Shop(arg, out)
	return out
}

func convert_identity_Shop_etopmodel_Shop(arg *identity.Shop, out *etopmodel.Shop) {
	out.ID = arg.ID                               // simple assign
	out.Name = arg.Name                           // simple assign
	out.OwnerID = arg.OwnerID                     // simple assign
	out.IsTest = arg.IsTest                       // simple assign
	out.AddressID = arg.AddressID                 // simple assign
	out.ShipToAddressID = arg.ShipToAddressID     // simple assign
	out.ShipFromAddressID = arg.ShipFromAddressID // simple assign
	out.Phone = arg.Phone                         // simple assign
	out.BankAccount = nil                         // zero value
	out.WebsiteURL = arg.WebsiteURL               // simple assign
	out.ImageURL = arg.ImageURL                   // simple assign
	out.Email = arg.Email                         // simple assign
	out.Code = arg.Code                           // simple assign
	out.AutoCreateFFM = arg.AutoCreateFFM         // simple assign
	out.OrderSourceID = 0                         // zero value
	out.Status = arg.Status                       // simple assign
	out.CreatedAt = arg.CreatedAt                 // simple assign
	out.UpdatedAt = arg.UpdatedAt                 // simple assign
	out.DeletedAt = arg.DeletedAt                 // simple assign
	out.Address = nil                             // zero value
	out.RecognizedHosts = nil                     // zero value
	out.GhnNoteCode = 0                           // zero value
	out.TryOn = 0                                 // zero value
	out.CompanyInfo = nil                         // zero value
	out.MoneyTransactionRRule = ""                // zero value
	out.SurveyInfo = nil                          // zero value
	out.ShippingServiceSelectStrategy = nil       // zero value
	out.InventoryOverstock = dot.NullBool{}       // zero value
}

func Convert_identity_Shops_etopmodel_Shops(args []*identity.Shop) (outs []*etopmodel.Shop) {
	tmps := make([]etopmodel.Shop, len(args))
	outs = make([]*etopmodel.Shop, len(args))
	for i := range tmps {
		outs[i] = Convert_identity_Shop_etopmodel_Shop(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/api/main/identity.User --//

func Convert_etopmodel_User_identity_User(arg *etopmodel.User, out *identity.User) *identity.User {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identity.User{}
	}
	convert_etopmodel_User_identity_User(arg, out)
	return out
}

func convert_etopmodel_User_identity_User(arg *etopmodel.User, out *identity.User) {
	out.ID = arg.ID                           // simple assign
	out.FullName = ""                         // zero value
	out.ShortName = ""                        // zero value
	out.Email = ""                            // zero value
	out.Phone = ""                            // zero value
	out.Status = arg.Status                   // simple assign
	out.EmailVerifiedAt = arg.EmailVerifiedAt // simple assign
	out.CreatedAt = arg.CreatedAt             // simple assign
	out.UpdatedAt = arg.UpdatedAt             // simple assign
	out.RefUserID = arg.RefUserID             // simple assign
	out.RefSaleID = arg.RefSaleID             // simple assign
}

func Convert_etopmodel_Users_identity_Users(args []*etopmodel.User) (outs []*identity.User) {
	tmps := make([]identity.User, len(args))
	outs = make([]*identity.User, len(args))
	for i := range tmps {
		outs[i] = Convert_etopmodel_User_identity_User(args[i], &tmps[i])
	}
	return outs
}

func Convert_identity_User_etopmodel_User(arg *identity.User, out *etopmodel.User) *etopmodel.User {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &etopmodel.User{}
	}
	convert_identity_User_etopmodel_User(arg, out)
	return out
}

func convert_identity_User_etopmodel_User(arg *identity.User, out *etopmodel.User) {
	out.ID = arg.ID                           // simple assign
	out.UserInner = etopmodel.UserInner{}     // zero value
	out.Status = arg.Status                   // simple assign
	out.CreatedAt = arg.CreatedAt             // simple assign
	out.UpdatedAt = arg.UpdatedAt             // simple assign
	out.AgreedTOSAt = time.Time{}             // zero value
	out.AgreedEmailInfoAt = time.Time{}       // zero value
	out.EmailVerifiedAt = arg.EmailVerifiedAt // simple assign
	out.PhoneVerifiedAt = time.Time{}         // zero value
	out.EmailVerificationSentAt = time.Time{} // zero value
	out.PhoneVerificationSentAt = time.Time{} // zero value
	out.IsTest = 0                            // zero value
	out.Source = 0                            // zero value
	out.RefUserID = arg.RefUserID             // simple assign
	out.RefSaleID = arg.RefSaleID             // simple assign
}

func Convert_identity_Users_etopmodel_Users(args []*identity.User) (outs []*etopmodel.User) {
	tmps := make([]etopmodel.User, len(args))
	outs = make([]*etopmodel.User, len(args))
	for i := range tmps {
		outs[i] = Convert_identity_User_etopmodel_User(args[i], &tmps[i])
	}
	return outs
}
