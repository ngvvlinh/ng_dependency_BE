// Code generated by goderive DO NOT EDIT.

package pgrid

import (
	"database/sql"

	core "etop.vn/backend/pkg/common/sq/core"
)

type SQLWriter = core.SQLWriter

func selModel(_ ...interface{}) bool { return true }

func (m *UserEvent) SQLTableName() string { return "" }

func (m *UserEvent) SQLScan(opts core.Opts, row *sql.Row) error {
	args := []interface{}{
		(*core.Time)(&m.Time),
		(*core.Time)(&m.CreatedAt),
		(*core.String)(&m.ID),
		(*core.String)(&m.Phone),
		(*core.String)(&m.Email),
		(*core.String)(&m.FullName),
		(*core.String)(&m.ShortName),
		(*core.Time)(&m.EmailVerified),
		(*core.Time)(&m.PhoneVerifiedAt),
		(*core.Time)(&m.AgreedEmailInfoAt),
	}
	return row.Scan(args...)
}

func (_ *UserEvent) SQLSelect(w SQLWriter) error {
	w.WriteRawString(`SELECT h._time, u.created_at, u.id, u.phone, u.email, u.full_name, u.short_name, u.email_verified_at IS NOT NULL, u.phone_verified_at IS NOT NULL, u.agreed_email_info_at IS NOT NULL`)
	return nil
}

func (m *ShopEvent) SQLTableName() string { return "" }

func (m *ShopEvent) SQLScan(opts core.Opts, row *sql.Row) error {
	args := []interface{}{
		(*core.Time)(&m.Time),
		(*core.Time)(&m.CreatedAt),
		(*core.String)(&m.ID),
		(*core.String)(&m.Name),
		(*core.String)(&m.ImageURL),
		(*core.String)(&m.OwnerID),
		(*core.String)(&m.OwnerFullName),
		(*core.String)(&m.OwnerShortName),
		(*core.String)(&m.OwnerEmail),
		(*core.String)(&m.OwnerPhone),
		(*core.Time)(&m.OwnerCreatedAt),
	}
	return row.Scan(args...)
}

func (_ *ShopEvent) SQLSelect(w SQLWriter) error {
	w.WriteRawString(`SELECT h._time, s.created_at, s.id, s.name, s.image_url, u.id, u.full_name, u.short_name, u.email, u.phone, u.created_at`)
	return nil
}

func (m *ShopProductEvent) SQLTableName() string { return "" }

func (m *ShopProductEvent) SQLScan(opts core.Opts, row *sql.Row) error {
	args := []interface{}{
		(*core.Time)(&m.Time),
		(*core.Time)(&m.CreatedAt),
		(*core.String)(&m.ShopID),
		(*core.String)(&m.ProductID),
	}
	return row.Scan(args...)
}

func (_ *ShopProductEvent) SQLSelect(w SQLWriter) error {
	w.WriteRawString(`SELECT h._time, sp.created_at, sp.shop_id, sp.product_id`)
	return nil
}

func (m *OrderEvent) SQLTableName() string { return "" }

func (m *OrderEvent) SQLScan(opts core.Opts, row *sql.Row) error {
	args := []interface{}{
		(*core.Time)(&m.Time),
		(*core.Time)(&m.CreatedAt),
		(*core.String)(&m.ID),
		(*core.String)(&m.ShopID),
	}
	return row.Scan(args...)
}

func (_ *OrderEvent) SQLSelect(w SQLWriter) error {
	w.WriteRawString(`SELECT h._time, o.created_at, o.id, o.shop_id`)
	return nil
}

func (m *FulfillmentEvent) SQLTableName() string { return "" }

func (m *FulfillmentEvent) SQLScan(opts core.Opts, row *sql.Row) error {
	args := []interface{}{
		(*core.Time)(&m.Time),
		(*core.String)(&m.ID),
		(*core.String)(&m.ShopID),
		(*core.String)(&m.OrderID),
		(*core.String)(&m.OrderCode),
		(*core.String)(&m.ShippingCode),
		(*core.String)(&m.ShippingState),
	}
	return row.Scan(args...)
}

func (_ *FulfillmentEvent) SQLSelect(w SQLWriter) error {
	w.WriteRawString(`SELECT h._time, f.id, f.shop_id, o.id, o.code, f.shipping_code, h.shipping_state`)
	return nil
}

func selFoo(_ ...interface{}) bool { return true }

func (m *Foo) SQLTableName() string { return "" }

func (m *Foo) SQLScan(opts core.Opts, row *sql.Row) error {
	args := []interface{}{
		(*core.Int64)(&m.ID),
		(*core.String)(&m.ShopID),
		(*core.Time)(&m.Time),
	}
	return row.Scan(args...)
}

func (_ *Foo) SQLSelect(w SQLWriter) error {
	w.WriteRawString(`SELECT f.id, f.shop_id, hf._time`)
	return nil
}
