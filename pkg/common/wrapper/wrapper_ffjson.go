// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: wrapper.go

package cmWrapper

import (
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *TwerrJSON) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *TwerrJSON) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "code":`)
	fflib.WriteJsonString(buf, string(j.Code))
	buf.WriteString(`,"msg":`)
	fflib.WriteJsonString(buf, string(j.Msg))
	buf.WriteByte(',')
	if len(j.Meta) != 0 {
		if j.Meta == nil {
			buf.WriteString(`"meta":null`)
		} else {
			buf.WriteString(`"meta":{ `)
			for key, value := range j.Meta {
				fflib.WriteJsonString(buf, key)
				buf.WriteString(`:`)
				fflib.WriteJsonString(buf, string(value))
				buf.WriteByte(',')
			}
			buf.Rewind(1)
			buf.WriteByte('}')
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}
