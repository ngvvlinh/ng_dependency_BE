// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package testdst

import (
	conversion "etop.vn/backend/pkg/common/conversion"
	testsrc "etop.vn/backend/zexp/etl/tests/testsrc"
)

/*
Custom conversions:
    ConvertAccount    // in use

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*Account)(nil), (*testsrc.Account)(nil), func(arg, out interface{}) error {
		Convert_Account_testsrc_Account(arg.(*Account), out.(*testsrc.Account))
		return nil
	})
	s.Register(([]*Account)(nil), (*[]*testsrc.Account)(nil), func(arg, out interface{}) error {
		out0 := Convert_Accounts_testsrc_Accounts(arg.([]*Account))
		*out.(*[]*testsrc.Account) = out0
		return nil
	})
	s.Register((*testsrc.Account)(nil), (*Account)(nil), func(arg, out interface{}) error {
		Convert_testsrc_Account_Account(arg.(*testsrc.Account), out.(*Account))
		return nil
	})
	s.Register(([]*testsrc.Account)(nil), (*[]*Account)(nil), func(arg, out interface{}) error {
		out0 := Convert_testsrc_Accounts_Accounts(arg.([]*testsrc.Account))
		*out.(*[]*Account) = out0
		return nil
	})
}

//-- convert etop.vn/backend/zexp/etl/tests/testsrc.Account --//

func Convert_Account_testsrc_Account(arg *Account, out *testsrc.Account) *testsrc.Account {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &testsrc.Account{}
	}
	convert_Account_testsrc_Account(arg, out)
	return out
}

func convert_Account_testsrc_Account(arg *Account, out *testsrc.Account) {
	out.ID = arg.ID               // simple assign
	out.FirstName = arg.FirstName // simple assign
	out.LastName = arg.LastName   // simple assign
	out.Rid = arg.Rid             // simple assign
}

func Convert_Accounts_testsrc_Accounts(args []*Account) (outs []*testsrc.Account) {
	tmps := make([]testsrc.Account, len(args))
	outs = make([]*testsrc.Account, len(args))
	for i := range tmps {
		outs[i] = Convert_Account_testsrc_Account(args[i], &tmps[i])
	}
	return outs
}

func Convert_testsrc_Account_Account(arg *testsrc.Account, out *Account) *Account {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &Account{}
	}
	ConvertAccount(arg, out)
	return out
}

func convert_testsrc_Account_Account(arg *testsrc.Account, out *Account) {
	out.ID = arg.ID               // simple assign
	out.FirstName = arg.FirstName // simple assign
	out.LastName = arg.LastName   // simple assign
	out.FullName = ""             // zero value
	out.Rid = arg.Rid             // simple assign
}

func Convert_testsrc_Accounts_Accounts(args []*testsrc.Account) (outs []*Account) {
	tmps := make([]Account, len(args))
	outs = make([]*Account, len(args))
	for i := range tmps {
		outs[i] = Convert_testsrc_Account_Account(args[i], &tmps[i])
	}
	return outs
}
