// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	orderingmodel "o.o/backend/com/main/ordering/model"
	conversion "o.o/backend/pkg/common/conversion"
	ordermodel "o.o/backend/zexp/etl/main/order/model"
)

/*
Custom conversions:
    ConvertOrder    // in use

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*ordermodel.MetaField)(nil), (*orderingmodel.MetaField)(nil), func(arg, out interface{}) error {
		Convert_ordermodel_MetaField_orderingmodel_MetaField(arg.(*ordermodel.MetaField), out.(*orderingmodel.MetaField))
		return nil
	})
	s.Register(([]*ordermodel.MetaField)(nil), (*[]*orderingmodel.MetaField)(nil), func(arg, out interface{}) error {
		out0 := Convert_ordermodel_MetaFields_orderingmodel_MetaFields(arg.([]*ordermodel.MetaField))
		*out.(*[]*orderingmodel.MetaField) = out0
		return nil
	})
	s.Register((*orderingmodel.MetaField)(nil), (*ordermodel.MetaField)(nil), func(arg, out interface{}) error {
		Convert_orderingmodel_MetaField_ordermodel_MetaField(arg.(*orderingmodel.MetaField), out.(*ordermodel.MetaField))
		return nil
	})
	s.Register(([]*orderingmodel.MetaField)(nil), (*[]*ordermodel.MetaField)(nil), func(arg, out interface{}) error {
		out0 := Convert_orderingmodel_MetaFields_ordermodel_MetaFields(arg.([]*orderingmodel.MetaField))
		*out.(*[]*ordermodel.MetaField) = out0
		return nil
	})
	s.Register((*ordermodel.Order)(nil), (*orderingmodel.Order)(nil), func(arg, out interface{}) error {
		Convert_ordermodel_Order_orderingmodel_Order(arg.(*ordermodel.Order), out.(*orderingmodel.Order))
		return nil
	})
	s.Register(([]*ordermodel.Order)(nil), (*[]*orderingmodel.Order)(nil), func(arg, out interface{}) error {
		out0 := Convert_ordermodel_Orders_orderingmodel_Orders(arg.([]*ordermodel.Order))
		*out.(*[]*orderingmodel.Order) = out0
		return nil
	})
	s.Register((*orderingmodel.Order)(nil), (*ordermodel.Order)(nil), func(arg, out interface{}) error {
		Convert_orderingmodel_Order_ordermodel_Order(arg.(*orderingmodel.Order), out.(*ordermodel.Order))
		return nil
	})
	s.Register(([]*orderingmodel.Order)(nil), (*[]*ordermodel.Order)(nil), func(arg, out interface{}) error {
		out0 := Convert_orderingmodel_Orders_ordermodel_Orders(arg.([]*orderingmodel.Order))
		*out.(*[]*ordermodel.Order) = out0
		return nil
	})
	s.Register((*ordermodel.OrderAddress)(nil), (*orderingmodel.OrderAddress)(nil), func(arg, out interface{}) error {
		Convert_ordermodel_OrderAddress_orderingmodel_OrderAddress(arg.(*ordermodel.OrderAddress), out.(*orderingmodel.OrderAddress))
		return nil
	})
	s.Register(([]*ordermodel.OrderAddress)(nil), (*[]*orderingmodel.OrderAddress)(nil), func(arg, out interface{}) error {
		out0 := Convert_ordermodel_OrderAddresses_orderingmodel_OrderAddresses(arg.([]*ordermodel.OrderAddress))
		*out.(*[]*orderingmodel.OrderAddress) = out0
		return nil
	})
	s.Register((*orderingmodel.OrderAddress)(nil), (*ordermodel.OrderAddress)(nil), func(arg, out interface{}) error {
		Convert_orderingmodel_OrderAddress_ordermodel_OrderAddress(arg.(*orderingmodel.OrderAddress), out.(*ordermodel.OrderAddress))
		return nil
	})
	s.Register(([]*orderingmodel.OrderAddress)(nil), (*[]*ordermodel.OrderAddress)(nil), func(arg, out interface{}) error {
		out0 := Convert_orderingmodel_OrderAddresses_ordermodel_OrderAddresses(arg.([]*orderingmodel.OrderAddress))
		*out.(*[]*ordermodel.OrderAddress) = out0
		return nil
	})
	s.Register((*ordermodel.OrderCustomer)(nil), (*orderingmodel.OrderCustomer)(nil), func(arg, out interface{}) error {
		Convert_ordermodel_OrderCustomer_orderingmodel_OrderCustomer(arg.(*ordermodel.OrderCustomer), out.(*orderingmodel.OrderCustomer))
		return nil
	})
	s.Register(([]*ordermodel.OrderCustomer)(nil), (*[]*orderingmodel.OrderCustomer)(nil), func(arg, out interface{}) error {
		out0 := Convert_ordermodel_OrderCustomers_orderingmodel_OrderCustomers(arg.([]*ordermodel.OrderCustomer))
		*out.(*[]*orderingmodel.OrderCustomer) = out0
		return nil
	})
	s.Register((*orderingmodel.OrderCustomer)(nil), (*ordermodel.OrderCustomer)(nil), func(arg, out interface{}) error {
		Convert_orderingmodel_OrderCustomer_ordermodel_OrderCustomer(arg.(*orderingmodel.OrderCustomer), out.(*ordermodel.OrderCustomer))
		return nil
	})
	s.Register(([]*orderingmodel.OrderCustomer)(nil), (*[]*ordermodel.OrderCustomer)(nil), func(arg, out interface{}) error {
		out0 := Convert_orderingmodel_OrderCustomers_ordermodel_OrderCustomers(arg.([]*orderingmodel.OrderCustomer))
		*out.(*[]*ordermodel.OrderCustomer) = out0
		return nil
	})
	s.Register((*ordermodel.OrderDiscount)(nil), (*orderingmodel.OrderDiscount)(nil), func(arg, out interface{}) error {
		Convert_ordermodel_OrderDiscount_orderingmodel_OrderDiscount(arg.(*ordermodel.OrderDiscount), out.(*orderingmodel.OrderDiscount))
		return nil
	})
	s.Register(([]*ordermodel.OrderDiscount)(nil), (*[]*orderingmodel.OrderDiscount)(nil), func(arg, out interface{}) error {
		out0 := Convert_ordermodel_OrderDiscounts_orderingmodel_OrderDiscounts(arg.([]*ordermodel.OrderDiscount))
		*out.(*[]*orderingmodel.OrderDiscount) = out0
		return nil
	})
	s.Register((*orderingmodel.OrderDiscount)(nil), (*ordermodel.OrderDiscount)(nil), func(arg, out interface{}) error {
		Convert_orderingmodel_OrderDiscount_ordermodel_OrderDiscount(arg.(*orderingmodel.OrderDiscount), out.(*ordermodel.OrderDiscount))
		return nil
	})
	s.Register(([]*orderingmodel.OrderDiscount)(nil), (*[]*ordermodel.OrderDiscount)(nil), func(arg, out interface{}) error {
		out0 := Convert_orderingmodel_OrderDiscounts_ordermodel_OrderDiscounts(arg.([]*orderingmodel.OrderDiscount))
		*out.(*[]*ordermodel.OrderDiscount) = out0
		return nil
	})
	s.Register((*ordermodel.OrderFeeLine)(nil), (*orderingmodel.OrderFeeLine)(nil), func(arg, out interface{}) error {
		Convert_ordermodel_OrderFeeLine_orderingmodel_OrderFeeLine(arg.(*ordermodel.OrderFeeLine), out.(*orderingmodel.OrderFeeLine))
		return nil
	})
	s.Register(([]*ordermodel.OrderFeeLine)(nil), (*[]*orderingmodel.OrderFeeLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_ordermodel_OrderFeeLines_orderingmodel_OrderFeeLines(arg.([]*ordermodel.OrderFeeLine))
		*out.(*[]*orderingmodel.OrderFeeLine) = out0
		return nil
	})
	s.Register((*orderingmodel.OrderFeeLine)(nil), (*ordermodel.OrderFeeLine)(nil), func(arg, out interface{}) error {
		Convert_orderingmodel_OrderFeeLine_ordermodel_OrderFeeLine(arg.(*orderingmodel.OrderFeeLine), out.(*ordermodel.OrderFeeLine))
		return nil
	})
	s.Register(([]*orderingmodel.OrderFeeLine)(nil), (*[]*ordermodel.OrderFeeLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_orderingmodel_OrderFeeLines_ordermodel_OrderFeeLines(arg.([]*orderingmodel.OrderFeeLine))
		*out.(*[]*ordermodel.OrderFeeLine) = out0
		return nil
	})
	s.Register((*ordermodel.OrderLine)(nil), (*orderingmodel.OrderLine)(nil), func(arg, out interface{}) error {
		Convert_ordermodel_OrderLine_orderingmodel_OrderLine(arg.(*ordermodel.OrderLine), out.(*orderingmodel.OrderLine))
		return nil
	})
	s.Register(([]*ordermodel.OrderLine)(nil), (*[]*orderingmodel.OrderLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_ordermodel_OrderLines_orderingmodel_OrderLines(arg.([]*ordermodel.OrderLine))
		*out.(*[]*orderingmodel.OrderLine) = out0
		return nil
	})
	s.Register((*orderingmodel.OrderLine)(nil), (*ordermodel.OrderLine)(nil), func(arg, out interface{}) error {
		Convert_orderingmodel_OrderLine_ordermodel_OrderLine(arg.(*orderingmodel.OrderLine), out.(*ordermodel.OrderLine))
		return nil
	})
	s.Register(([]*orderingmodel.OrderLine)(nil), (*[]*ordermodel.OrderLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_orderingmodel_OrderLines_ordermodel_OrderLines(arg.([]*orderingmodel.OrderLine))
		*out.(*[]*ordermodel.OrderLine) = out0
		return nil
	})
	s.Register((*ordermodel.OrderShipping)(nil), (*orderingmodel.OrderShipping)(nil), func(arg, out interface{}) error {
		Convert_ordermodel_OrderShipping_orderingmodel_OrderShipping(arg.(*ordermodel.OrderShipping), out.(*orderingmodel.OrderShipping))
		return nil
	})
	s.Register(([]*ordermodel.OrderShipping)(nil), (*[]*orderingmodel.OrderShipping)(nil), func(arg, out interface{}) error {
		out0 := Convert_ordermodel_OrderShippings_orderingmodel_OrderShippings(arg.([]*ordermodel.OrderShipping))
		*out.(*[]*orderingmodel.OrderShipping) = out0
		return nil
	})
	s.Register((*orderingmodel.OrderShipping)(nil), (*ordermodel.OrderShipping)(nil), func(arg, out interface{}) error {
		Convert_orderingmodel_OrderShipping_ordermodel_OrderShipping(arg.(*orderingmodel.OrderShipping), out.(*ordermodel.OrderShipping))
		return nil
	})
	s.Register(([]*orderingmodel.OrderShipping)(nil), (*[]*ordermodel.OrderShipping)(nil), func(arg, out interface{}) error {
		out0 := Convert_orderingmodel_OrderShippings_ordermodel_OrderShippings(arg.([]*orderingmodel.OrderShipping))
		*out.(*[]*ordermodel.OrderShipping) = out0
		return nil
	})
}

//-- convert o.o/backend/com/main/ordering/model.MetaField --//

func Convert_ordermodel_MetaField_orderingmodel_MetaField(arg *ordermodel.MetaField, out *orderingmodel.MetaField) *orderingmodel.MetaField {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &orderingmodel.MetaField{}
	}
	convert_ordermodel_MetaField_orderingmodel_MetaField(arg, out)
	return out
}

func convert_ordermodel_MetaField_orderingmodel_MetaField(arg *ordermodel.MetaField, out *orderingmodel.MetaField) {
	out.Key = arg.Key     // simple assign
	out.Value = arg.Value // simple assign
	out.Name = arg.Name   // simple assign
}

func Convert_ordermodel_MetaFields_orderingmodel_MetaFields(args []*ordermodel.MetaField) (outs []*orderingmodel.MetaField) {
	if args == nil {
		return nil
	}
	tmps := make([]orderingmodel.MetaField, len(args))
	outs = make([]*orderingmodel.MetaField, len(args))
	for i := range tmps {
		outs[i] = Convert_ordermodel_MetaField_orderingmodel_MetaField(args[i], &tmps[i])
	}
	return outs
}

func Convert_orderingmodel_MetaField_ordermodel_MetaField(arg *orderingmodel.MetaField, out *ordermodel.MetaField) *ordermodel.MetaField {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &ordermodel.MetaField{}
	}
	convert_orderingmodel_MetaField_ordermodel_MetaField(arg, out)
	return out
}

func convert_orderingmodel_MetaField_ordermodel_MetaField(arg *orderingmodel.MetaField, out *ordermodel.MetaField) {
	out.Key = arg.Key     // simple assign
	out.Value = arg.Value // simple assign
	out.Name = arg.Name   // simple assign
}

func Convert_orderingmodel_MetaFields_ordermodel_MetaFields(args []*orderingmodel.MetaField) (outs []*ordermodel.MetaField) {
	if args == nil {
		return nil
	}
	tmps := make([]ordermodel.MetaField, len(args))
	outs = make([]*ordermodel.MetaField, len(args))
	for i := range tmps {
		outs[i] = Convert_orderingmodel_MetaField_ordermodel_MetaField(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/backend/com/main/ordering/model.Order --//

func Convert_ordermodel_Order_orderingmodel_Order(arg *ordermodel.Order, out *orderingmodel.Order) *orderingmodel.Order {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &orderingmodel.Order{}
	}
	convert_ordermodel_Order_orderingmodel_Order(arg, out)
	return out
}

func convert_ordermodel_Order_orderingmodel_Order(arg *ordermodel.Order, out *orderingmodel.Order) {
	out.ID = arg.ID                       // simple assign
	out.ShopID = arg.ShopID               // simple assign
	out.Code = arg.Code                   // simple assign
	out.EdCode = arg.EdCode               // simple assign
	out.ProductIDs = arg.ProductIDs       // simple assign
	out.VariantIDs = arg.VariantIDs       // simple assign
	out.PartnerID = 0                     // zero value
	out.Currency = ""                     // zero value
	out.PaymentMethod = arg.PaymentMethod // simple assign
	out.Customer = Convert_ordermodel_OrderCustomer_orderingmodel_OrderCustomer(arg.Customer, nil)
	out.CustomerAddress = Convert_ordermodel_OrderAddress_orderingmodel_OrderAddress(arg.CustomerAddress, nil)
	out.BillingAddress = Convert_ordermodel_OrderAddress_orderingmodel_OrderAddress(arg.BillingAddress, nil)
	out.ShippingAddress = Convert_ordermodel_OrderAddress_orderingmodel_OrderAddress(arg.ShippingAddress, nil)
	out.CustomerName = arg.CustomerName                             // simple assign
	out.CustomerPhone = arg.CustomerPhone                           // simple assign
	out.CustomerEmail = arg.CustomerEmail                           // simple assign
	out.CreatedAt = arg.CreatedAt                                   // simple assign
	out.ProcessedAt = arg.ProcessedAt                               // simple assign
	out.UpdatedAt = arg.UpdatedAt                                   // simple assign
	out.ClosedAt = arg.ClosedAt                                     // simple assign
	out.ConfirmedAt = arg.ConfirmedAt                               // simple assign
	out.CancelledAt = arg.CancelledAt                               // simple assign
	out.CancelReason = arg.CancelReason                             // simple assign
	out.CustomerConfirm = 0                                         // zero value
	out.ShopConfirm = arg.ShopConfirm                               // simple assign
	out.ConfirmStatus = arg.ConfirmStatus                           // simple assign
	out.FulfillmentShippingStatus = arg.FulfillmentShippingStatus   // simple assign
	out.EtopPaymentStatus = arg.EtopPaymentStatus                   // simple assign
	out.Status = arg.Status                                         // simple assign
	out.FulfillmentShippingStates = arg.FulfillmentShippingStates   // simple assign
	out.FulfillmentPaymentStatuses = arg.FulfillmentPaymentStatuses // simple assign
	out.FulfillmentStatuses = arg.FulfillmentStatuses               // simple assign
	out.Lines = Convert_ordermodel_OrderLines_orderingmodel_OrderLines(arg.Lines)
	out.Discounts = Convert_ordermodel_OrderDiscounts_orderingmodel_OrderDiscounts(arg.Discounts)
	out.TotalItems = arg.TotalItems           // simple assign
	out.BasketValue = arg.BasketValue         // simple assign
	out.TotalWeight = arg.TotalWeight         // simple assign
	out.TotalTax = arg.TotalTax               // simple assign
	out.OrderDiscount = arg.OrderDiscount     // simple assign
	out.TotalDiscount = arg.TotalDiscount     // simple assign
	out.ShopShippingFee = arg.ShopShippingFee // simple assign
	out.TotalFee = arg.TotalFee               // simple assign
	out.FeeLines = nil                        // types do not match
	out.ShopCOD = arg.ShopCOD                 // simple assign
	out.TotalAmount = arg.TotalAmount         // simple assign
	out.OrderNote = arg.OrderNote             // simple assign
	out.ShopNote = arg.ShopNote               // simple assign
	out.ShippingNote = arg.ShippingNote       // simple assign
	out.OrderSourceType = 0                   // zero value
	out.OrderSourceID = 0                     // zero value
	out.ExternalOrderID = arg.ExternalOrderID // simple assign
	out.ReferenceURL = arg.ReferenceURL       // simple assign
	out.ExternalURL = arg.ExternalURL         // simple assign
	out.ShopShipping = Convert_ordermodel_OrderShipping_orderingmodel_OrderShipping(arg.ShopShipping, nil)
	out.IsOutsideEtop = arg.IsOutsideEtop     // simple assign
	out.GhnNoteCode = arg.GhnNoteCode         // simple assign
	out.TryOn = arg.TryOn                     // simple assign
	out.CustomerNameNorm = ""                 // zero value
	out.ProductNameNorm = ""                  // zero value
	out.FulfillmentType = arg.FulfillmentType // simple assign
	out.FulfillmentIDs = arg.FulfillmentIDs   // simple assign
	out.ExternalMeta = arg.ExternalMeta       // simple assign
	out.TradingShopID = 0                     // zero value
	out.PaymentStatus = arg.PaymentStatus     // simple assign
	out.PaymentID = arg.PaymentID             // simple assign
	out.ReferralMeta = nil                    // zero value
	out.CustomerID = arg.CustomerID           // simple assign
	out.CreatedBy = arg.CreatedBy             // simple assign
	out.Rid = arg.Rid                         // simple assign
}

func Convert_ordermodel_Orders_orderingmodel_Orders(args []*ordermodel.Order) (outs []*orderingmodel.Order) {
	if args == nil {
		return nil
	}
	tmps := make([]orderingmodel.Order, len(args))
	outs = make([]*orderingmodel.Order, len(args))
	for i := range tmps {
		outs[i] = Convert_ordermodel_Order_orderingmodel_Order(args[i], &tmps[i])
	}
	return outs
}

func Convert_orderingmodel_Order_ordermodel_Order(arg *orderingmodel.Order, out *ordermodel.Order) *ordermodel.Order {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &ordermodel.Order{}
	}
	ConvertOrder(arg, out)
	return out
}

func convert_orderingmodel_Order_ordermodel_Order(arg *orderingmodel.Order, out *ordermodel.Order) {
	out.ID = arg.ID                       // simple assign
	out.ShopID = arg.ShopID               // simple assign
	out.Code = arg.Code                   // simple assign
	out.EdCode = arg.EdCode               // simple assign
	out.ProductIDs = arg.ProductIDs       // simple assign
	out.VariantIDs = arg.VariantIDs       // simple assign
	out.PaymentMethod = arg.PaymentMethod // simple assign
	out.Customer = Convert_orderingmodel_OrderCustomer_ordermodel_OrderCustomer(arg.Customer, nil)
	out.CustomerAddress = Convert_orderingmodel_OrderAddress_ordermodel_OrderAddress(arg.CustomerAddress, nil)
	out.BillingAddress = Convert_orderingmodel_OrderAddress_ordermodel_OrderAddress(arg.BillingAddress, nil)
	out.ShippingAddress = Convert_orderingmodel_OrderAddress_ordermodel_OrderAddress(arg.ShippingAddress, nil)
	out.CustomerName = arg.CustomerName                             // simple assign
	out.CustomerPhone = arg.CustomerPhone                           // simple assign
	out.CustomerEmail = arg.CustomerEmail                           // simple assign
	out.CreatedAt = arg.CreatedAt                                   // simple assign
	out.ProcessedAt = arg.ProcessedAt                               // simple assign
	out.UpdatedAt = arg.UpdatedAt                                   // simple assign
	out.ClosedAt = arg.ClosedAt                                     // simple assign
	out.ConfirmedAt = arg.ConfirmedAt                               // simple assign
	out.CancelledAt = arg.CancelledAt                               // simple assign
	out.CancelReason = arg.CancelReason                             // simple assign
	out.ShopConfirm = arg.ShopConfirm                               // simple assign
	out.ConfirmStatus = arg.ConfirmStatus                           // simple assign
	out.FulfillmentShippingStatus = arg.FulfillmentShippingStatus   // simple assign
	out.EtopPaymentStatus = arg.EtopPaymentStatus                   // simple assign
	out.Status = arg.Status                                         // simple assign
	out.FulfillmentShippingStates = arg.FulfillmentShippingStates   // simple assign
	out.FulfillmentPaymentStatuses = arg.FulfillmentPaymentStatuses // simple assign
	out.FulfillmentStatuses = arg.FulfillmentStatuses               // simple assign
	out.Lines = Convert_orderingmodel_OrderLines_ordermodel_OrderLines(arg.Lines)
	out.Discounts = Convert_orderingmodel_OrderDiscounts_ordermodel_OrderDiscounts(arg.Discounts)
	out.TotalItems = arg.TotalItems           // simple assign
	out.BasketValue = arg.BasketValue         // simple assign
	out.TotalWeight = arg.TotalWeight         // simple assign
	out.TotalTax = arg.TotalTax               // simple assign
	out.OrderDiscount = arg.OrderDiscount     // simple assign
	out.TotalDiscount = arg.TotalDiscount     // simple assign
	out.ShopShippingFee = arg.ShopShippingFee // simple assign
	out.TotalFee = arg.TotalFee               // simple assign
	out.FeeLines = nil                        // types do not match
	out.ShopCOD = arg.ShopCOD                 // simple assign
	out.TotalAmount = arg.TotalAmount         // simple assign
	out.OrderNote = arg.OrderNote             // simple assign
	out.ShopNote = arg.ShopNote               // simple assign
	out.ShippingNote = arg.ShippingNote       // simple assign
	out.ExternalOrderID = arg.ExternalOrderID // simple assign
	out.ReferenceURL = arg.ReferenceURL       // simple assign
	out.ExternalURL = arg.ExternalURL         // simple assign
	out.ShopShipping = Convert_orderingmodel_OrderShipping_ordermodel_OrderShipping(arg.ShopShipping, nil)
	out.IsOutsideEtop = arg.IsOutsideEtop     // simple assign
	out.GhnNoteCode = arg.GhnNoteCode         // simple assign
	out.TryOn = arg.TryOn                     // simple assign
	out.FulfillmentType = arg.FulfillmentType // simple assign
	out.FulfillmentIDs = arg.FulfillmentIDs   // simple assign
	out.ExternalMeta = arg.ExternalMeta       // simple assign
	out.PaymentStatus = arg.PaymentStatus     // simple assign
	out.PaymentID = arg.PaymentID             // simple assign
	out.CustomerID = arg.CustomerID           // simple assign
	out.CreatedBy = arg.CreatedBy             // simple assign
	out.Rid = arg.Rid                         // simple assign
}

func Convert_orderingmodel_Orders_ordermodel_Orders(args []*orderingmodel.Order) (outs []*ordermodel.Order) {
	if args == nil {
		return nil
	}
	tmps := make([]ordermodel.Order, len(args))
	outs = make([]*ordermodel.Order, len(args))
	for i := range tmps {
		outs[i] = Convert_orderingmodel_Order_ordermodel_Order(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/backend/com/main/ordering/model.OrderAddress --//

func Convert_ordermodel_OrderAddress_orderingmodel_OrderAddress(arg *ordermodel.OrderAddress, out *orderingmodel.OrderAddress) *orderingmodel.OrderAddress {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &orderingmodel.OrderAddress{}
	}
	convert_ordermodel_OrderAddress_orderingmodel_OrderAddress(arg, out)
	return out
}

func convert_ordermodel_OrderAddress_orderingmodel_OrderAddress(arg *ordermodel.OrderAddress, out *orderingmodel.OrderAddress) {
	out.FullName = arg.FullName         // simple assign
	out.FirstName = arg.FirstName       // simple assign
	out.LastName = arg.LastName         // simple assign
	out.Phone = arg.Phone               // simple assign
	out.Email = arg.Email               // simple assign
	out.Country = arg.Country           // simple assign
	out.City = arg.City                 // simple assign
	out.Province = arg.Province         // simple assign
	out.District = arg.District         // simple assign
	out.Ward = arg.Ward                 // simple assign
	out.Zip = arg.Zip                   // simple assign
	out.DistrictCode = arg.DistrictCode // simple assign
	out.ProvinceCode = arg.ProvinceCode // simple assign
	out.WardCode = arg.WardCode         // simple assign
	out.Company = arg.Company           // simple assign
	out.Address1 = arg.Address1         // simple assign
	out.Address2 = arg.Address2         // simple assign
	out.Coordinates = arg.Coordinates   // simple assign
}

func Convert_ordermodel_OrderAddresses_orderingmodel_OrderAddresses(args []*ordermodel.OrderAddress) (outs []*orderingmodel.OrderAddress) {
	if args == nil {
		return nil
	}
	tmps := make([]orderingmodel.OrderAddress, len(args))
	outs = make([]*orderingmodel.OrderAddress, len(args))
	for i := range tmps {
		outs[i] = Convert_ordermodel_OrderAddress_orderingmodel_OrderAddress(args[i], &tmps[i])
	}
	return outs
}

func Convert_orderingmodel_OrderAddress_ordermodel_OrderAddress(arg *orderingmodel.OrderAddress, out *ordermodel.OrderAddress) *ordermodel.OrderAddress {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &ordermodel.OrderAddress{}
	}
	convert_orderingmodel_OrderAddress_ordermodel_OrderAddress(arg, out)
	return out
}

func convert_orderingmodel_OrderAddress_ordermodel_OrderAddress(arg *orderingmodel.OrderAddress, out *ordermodel.OrderAddress) {
	out.FullName = arg.FullName         // simple assign
	out.FirstName = arg.FirstName       // simple assign
	out.LastName = arg.LastName         // simple assign
	out.Phone = arg.Phone               // simple assign
	out.Email = arg.Email               // simple assign
	out.Country = arg.Country           // simple assign
	out.City = arg.City                 // simple assign
	out.Province = arg.Province         // simple assign
	out.District = arg.District         // simple assign
	out.Ward = arg.Ward                 // simple assign
	out.Zip = arg.Zip                   // simple assign
	out.DistrictCode = arg.DistrictCode // simple assign
	out.ProvinceCode = arg.ProvinceCode // simple assign
	out.WardCode = arg.WardCode         // simple assign
	out.Company = arg.Company           // simple assign
	out.Address1 = arg.Address1         // simple assign
	out.Address2 = arg.Address2         // simple assign
	out.Coordinates = arg.Coordinates   // simple assign
}

func Convert_orderingmodel_OrderAddresses_ordermodel_OrderAddresses(args []*orderingmodel.OrderAddress) (outs []*ordermodel.OrderAddress) {
	if args == nil {
		return nil
	}
	tmps := make([]ordermodel.OrderAddress, len(args))
	outs = make([]*ordermodel.OrderAddress, len(args))
	for i := range tmps {
		outs[i] = Convert_orderingmodel_OrderAddress_ordermodel_OrderAddress(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/backend/com/main/ordering/model.OrderCustomer --//

func Convert_ordermodel_OrderCustomer_orderingmodel_OrderCustomer(arg *ordermodel.OrderCustomer, out *orderingmodel.OrderCustomer) *orderingmodel.OrderCustomer {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &orderingmodel.OrderCustomer{}
	}
	convert_ordermodel_OrderCustomer_orderingmodel_OrderCustomer(arg, out)
	return out
}

func convert_ordermodel_OrderCustomer_orderingmodel_OrderCustomer(arg *ordermodel.OrderCustomer, out *orderingmodel.OrderCustomer) {
	out.FirstName = arg.FirstName         // simple assign
	out.LastName = arg.LastName           // simple assign
	out.FullName = arg.FullName           // simple assign
	out.Email = arg.Email                 // simple assign
	out.Phone = arg.Phone                 // simple assign
	out.Gender = arg.Gender               // simple assign
	out.Birthday = arg.Birthday           // simple assign
	out.VerifiedEmail = arg.VerifiedEmail // simple assign
	out.ExternalID = arg.ExternalID       // simple assign
}

func Convert_ordermodel_OrderCustomers_orderingmodel_OrderCustomers(args []*ordermodel.OrderCustomer) (outs []*orderingmodel.OrderCustomer) {
	if args == nil {
		return nil
	}
	tmps := make([]orderingmodel.OrderCustomer, len(args))
	outs = make([]*orderingmodel.OrderCustomer, len(args))
	for i := range tmps {
		outs[i] = Convert_ordermodel_OrderCustomer_orderingmodel_OrderCustomer(args[i], &tmps[i])
	}
	return outs
}

func Convert_orderingmodel_OrderCustomer_ordermodel_OrderCustomer(arg *orderingmodel.OrderCustomer, out *ordermodel.OrderCustomer) *ordermodel.OrderCustomer {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &ordermodel.OrderCustomer{}
	}
	convert_orderingmodel_OrderCustomer_ordermodel_OrderCustomer(arg, out)
	return out
}

func convert_orderingmodel_OrderCustomer_ordermodel_OrderCustomer(arg *orderingmodel.OrderCustomer, out *ordermodel.OrderCustomer) {
	out.FirstName = arg.FirstName         // simple assign
	out.LastName = arg.LastName           // simple assign
	out.FullName = arg.FullName           // simple assign
	out.Email = arg.Email                 // simple assign
	out.Phone = arg.Phone                 // simple assign
	out.Gender = arg.Gender               // simple assign
	out.Birthday = arg.Birthday           // simple assign
	out.VerifiedEmail = arg.VerifiedEmail // simple assign
	out.ExternalID = arg.ExternalID       // simple assign
}

func Convert_orderingmodel_OrderCustomers_ordermodel_OrderCustomers(args []*orderingmodel.OrderCustomer) (outs []*ordermodel.OrderCustomer) {
	if args == nil {
		return nil
	}
	tmps := make([]ordermodel.OrderCustomer, len(args))
	outs = make([]*ordermodel.OrderCustomer, len(args))
	for i := range tmps {
		outs[i] = Convert_orderingmodel_OrderCustomer_ordermodel_OrderCustomer(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/backend/com/main/ordering/model.OrderDiscount --//

func Convert_ordermodel_OrderDiscount_orderingmodel_OrderDiscount(arg *ordermodel.OrderDiscount, out *orderingmodel.OrderDiscount) *orderingmodel.OrderDiscount {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &orderingmodel.OrderDiscount{}
	}
	convert_ordermodel_OrderDiscount_orderingmodel_OrderDiscount(arg, out)
	return out
}

func convert_ordermodel_OrderDiscount_orderingmodel_OrderDiscount(arg *ordermodel.OrderDiscount, out *orderingmodel.OrderDiscount) {
	out.Code = arg.Code     // simple assign
	out.Type = arg.Type     // simple assign
	out.Amount = arg.Amount // simple assign
}

func Convert_ordermodel_OrderDiscounts_orderingmodel_OrderDiscounts(args []*ordermodel.OrderDiscount) (outs []*orderingmodel.OrderDiscount) {
	if args == nil {
		return nil
	}
	tmps := make([]orderingmodel.OrderDiscount, len(args))
	outs = make([]*orderingmodel.OrderDiscount, len(args))
	for i := range tmps {
		outs[i] = Convert_ordermodel_OrderDiscount_orderingmodel_OrderDiscount(args[i], &tmps[i])
	}
	return outs
}

func Convert_orderingmodel_OrderDiscount_ordermodel_OrderDiscount(arg *orderingmodel.OrderDiscount, out *ordermodel.OrderDiscount) *ordermodel.OrderDiscount {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &ordermodel.OrderDiscount{}
	}
	convert_orderingmodel_OrderDiscount_ordermodel_OrderDiscount(arg, out)
	return out
}

func convert_orderingmodel_OrderDiscount_ordermodel_OrderDiscount(arg *orderingmodel.OrderDiscount, out *ordermodel.OrderDiscount) {
	out.Code = arg.Code     // simple assign
	out.Type = arg.Type     // simple assign
	out.Amount = arg.Amount // simple assign
}

func Convert_orderingmodel_OrderDiscounts_ordermodel_OrderDiscounts(args []*orderingmodel.OrderDiscount) (outs []*ordermodel.OrderDiscount) {
	if args == nil {
		return nil
	}
	tmps := make([]ordermodel.OrderDiscount, len(args))
	outs = make([]*ordermodel.OrderDiscount, len(args))
	for i := range tmps {
		outs[i] = Convert_orderingmodel_OrderDiscount_ordermodel_OrderDiscount(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/backend/com/main/ordering/model.OrderFeeLine --//

func Convert_ordermodel_OrderFeeLine_orderingmodel_OrderFeeLine(arg *ordermodel.OrderFeeLine, out *orderingmodel.OrderFeeLine) *orderingmodel.OrderFeeLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &orderingmodel.OrderFeeLine{}
	}
	convert_ordermodel_OrderFeeLine_orderingmodel_OrderFeeLine(arg, out)
	return out
}

func convert_ordermodel_OrderFeeLine_orderingmodel_OrderFeeLine(arg *ordermodel.OrderFeeLine, out *orderingmodel.OrderFeeLine) {
	out.Amount = arg.Amount // simple assign
	out.Desc = arg.Desc     // simple assign
	out.Code = arg.Code     // simple assign
	out.Name = arg.Name     // simple assign
	out.Type = arg.Type     // simple assign
}

func Convert_ordermodel_OrderFeeLines_orderingmodel_OrderFeeLines(args []*ordermodel.OrderFeeLine) (outs []*orderingmodel.OrderFeeLine) {
	if args == nil {
		return nil
	}
	tmps := make([]orderingmodel.OrderFeeLine, len(args))
	outs = make([]*orderingmodel.OrderFeeLine, len(args))
	for i := range tmps {
		outs[i] = Convert_ordermodel_OrderFeeLine_orderingmodel_OrderFeeLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_orderingmodel_OrderFeeLine_ordermodel_OrderFeeLine(arg *orderingmodel.OrderFeeLine, out *ordermodel.OrderFeeLine) *ordermodel.OrderFeeLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &ordermodel.OrderFeeLine{}
	}
	convert_orderingmodel_OrderFeeLine_ordermodel_OrderFeeLine(arg, out)
	return out
}

func convert_orderingmodel_OrderFeeLine_ordermodel_OrderFeeLine(arg *orderingmodel.OrderFeeLine, out *ordermodel.OrderFeeLine) {
	out.Amount = arg.Amount // simple assign
	out.Desc = arg.Desc     // simple assign
	out.Code = arg.Code     // simple assign
	out.Name = arg.Name     // simple assign
	out.Type = arg.Type     // simple assign
}

func Convert_orderingmodel_OrderFeeLines_ordermodel_OrderFeeLines(args []*orderingmodel.OrderFeeLine) (outs []*ordermodel.OrderFeeLine) {
	if args == nil {
		return nil
	}
	tmps := make([]ordermodel.OrderFeeLine, len(args))
	outs = make([]*ordermodel.OrderFeeLine, len(args))
	for i := range tmps {
		outs[i] = Convert_orderingmodel_OrderFeeLine_ordermodel_OrderFeeLine(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/backend/com/main/ordering/model.OrderLine --//

func Convert_ordermodel_OrderLine_orderingmodel_OrderLine(arg *ordermodel.OrderLine, out *orderingmodel.OrderLine) *orderingmodel.OrderLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &orderingmodel.OrderLine{}
	}
	convert_ordermodel_OrderLine_orderingmodel_OrderLine(arg, out)
	return out
}

func convert_ordermodel_OrderLine_orderingmodel_OrderLine(arg *ordermodel.OrderLine, out *orderingmodel.OrderLine) {
	out.OrderID = arg.OrderID                 // simple assign
	out.VariantID = arg.VariantID             // simple assign
	out.ProductName = arg.ProductName         // simple assign
	out.ProductID = arg.ProductID             // simple assign
	out.ShopID = arg.ShopID                   // simple assign
	out.Weight = arg.Weight                   // simple assign
	out.Quantity = arg.Quantity               // simple assign
	out.ListPrice = arg.ListPrice             // simple assign
	out.RetailPrice = arg.RetailPrice         // simple assign
	out.PaymentPrice = arg.PaymentPrice       // simple assign
	out.LineAmount = arg.LineAmount           // simple assign
	out.TotalDiscount = arg.TotalDiscount     // simple assign
	out.TotalLineAmount = arg.TotalLineAmount // simple assign
	out.ImageURL = arg.ImageURL               // simple assign
	out.Attributes = arg.Attributes           // simple assign
	out.IsOutsideEtop = arg.IsOutsideEtop     // simple assign
	out.Code = arg.Code                       // simple assign
	out.MetaFields = Convert_ordermodel_MetaFields_orderingmodel_MetaFields(arg.MetaFields)
}

func Convert_ordermodel_OrderLines_orderingmodel_OrderLines(args []*ordermodel.OrderLine) (outs []*orderingmodel.OrderLine) {
	if args == nil {
		return nil
	}
	tmps := make([]orderingmodel.OrderLine, len(args))
	outs = make([]*orderingmodel.OrderLine, len(args))
	for i := range tmps {
		outs[i] = Convert_ordermodel_OrderLine_orderingmodel_OrderLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_orderingmodel_OrderLine_ordermodel_OrderLine(arg *orderingmodel.OrderLine, out *ordermodel.OrderLine) *ordermodel.OrderLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &ordermodel.OrderLine{}
	}
	convert_orderingmodel_OrderLine_ordermodel_OrderLine(arg, out)
	return out
}

func convert_orderingmodel_OrderLine_ordermodel_OrderLine(arg *orderingmodel.OrderLine, out *ordermodel.OrderLine) {
	out.OrderID = arg.OrderID                 // simple assign
	out.VariantID = arg.VariantID             // simple assign
	out.ProductName = arg.ProductName         // simple assign
	out.ProductID = arg.ProductID             // simple assign
	out.ShopID = arg.ShopID                   // simple assign
	out.Weight = arg.Weight                   // simple assign
	out.Quantity = arg.Quantity               // simple assign
	out.ListPrice = arg.ListPrice             // simple assign
	out.RetailPrice = arg.RetailPrice         // simple assign
	out.PaymentPrice = arg.PaymentPrice       // simple assign
	out.LineAmount = arg.LineAmount           // simple assign
	out.TotalDiscount = arg.TotalDiscount     // simple assign
	out.TotalLineAmount = arg.TotalLineAmount // simple assign
	out.ImageURL = arg.ImageURL               // simple assign
	out.Attributes = arg.Attributes           // simple assign
	out.IsOutsideEtop = arg.IsOutsideEtop     // simple assign
	out.Code = arg.Code                       // simple assign
	out.MetaFields = Convert_orderingmodel_MetaFields_ordermodel_MetaFields(arg.MetaFields)
}

func Convert_orderingmodel_OrderLines_ordermodel_OrderLines(args []*orderingmodel.OrderLine) (outs []*ordermodel.OrderLine) {
	if args == nil {
		return nil
	}
	tmps := make([]ordermodel.OrderLine, len(args))
	outs = make([]*ordermodel.OrderLine, len(args))
	for i := range tmps {
		outs[i] = Convert_orderingmodel_OrderLine_ordermodel_OrderLine(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/backend/com/main/ordering/model.OrderShipping --//

func Convert_ordermodel_OrderShipping_orderingmodel_OrderShipping(arg *ordermodel.OrderShipping, out *orderingmodel.OrderShipping) *orderingmodel.OrderShipping {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &orderingmodel.OrderShipping{}
	}
	convert_ordermodel_OrderShipping_orderingmodel_OrderShipping(arg, out)
	return out
}

func convert_ordermodel_OrderShipping_orderingmodel_OrderShipping(arg *ordermodel.OrderShipping, out *orderingmodel.OrderShipping) {
	out.ShopAddress = Convert_ordermodel_OrderAddress_orderingmodel_OrderAddress(arg.ShopAddress, nil)
	out.ReturnAddress = Convert_ordermodel_OrderAddress_orderingmodel_OrderAddress(arg.ReturnAddress, nil)
	out.ExternalServiceID = arg.ExternalServiceID     // simple assign
	out.ExternalShippingFee = arg.ExternalShippingFee // simple assign
	out.ExternalServiceName = arg.ExternalServiceName // simple assign
	out.ShippingProvider = arg.ShippingProvider       // simple assign
	out.ProviderServiceID = arg.ProviderServiceID     // simple assign
	out.IncludeInsurance = arg.IncludeInsurance       // simple assign
	out.Length = arg.Length                           // simple assign
	out.Width = arg.Width                             // simple assign
	out.Height = arg.Height                           // simple assign
	out.GrossWeight = arg.GrossWeight                 // simple assign
	out.ChargeableWeight = arg.ChargeableWeight       // simple assign
}

func Convert_ordermodel_OrderShippings_orderingmodel_OrderShippings(args []*ordermodel.OrderShipping) (outs []*orderingmodel.OrderShipping) {
	if args == nil {
		return nil
	}
	tmps := make([]orderingmodel.OrderShipping, len(args))
	outs = make([]*orderingmodel.OrderShipping, len(args))
	for i := range tmps {
		outs[i] = Convert_ordermodel_OrderShipping_orderingmodel_OrderShipping(args[i], &tmps[i])
	}
	return outs
}

func Convert_orderingmodel_OrderShipping_ordermodel_OrderShipping(arg *orderingmodel.OrderShipping, out *ordermodel.OrderShipping) *ordermodel.OrderShipping {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &ordermodel.OrderShipping{}
	}
	convert_orderingmodel_OrderShipping_ordermodel_OrderShipping(arg, out)
	return out
}

func convert_orderingmodel_OrderShipping_ordermodel_OrderShipping(arg *orderingmodel.OrderShipping, out *ordermodel.OrderShipping) {
	out.ShopAddress = Convert_orderingmodel_OrderAddress_ordermodel_OrderAddress(arg.ShopAddress, nil)
	out.ReturnAddress = Convert_orderingmodel_OrderAddress_ordermodel_OrderAddress(arg.ReturnAddress, nil)
	out.ExternalServiceID = arg.ExternalServiceID     // simple assign
	out.ExternalShippingFee = arg.ExternalShippingFee // simple assign
	out.ExternalServiceName = arg.ExternalServiceName // simple assign
	out.ShippingProvider = arg.ShippingProvider       // simple assign
	out.ProviderServiceID = arg.ProviderServiceID     // simple assign
	out.IncludeInsurance = arg.IncludeInsurance       // simple assign
	out.Length = arg.Length                           // simple assign
	out.Width = arg.Width                             // simple assign
	out.Height = arg.Height                           // simple assign
	out.GrossWeight = arg.GrossWeight                 // simple assign
	out.ChargeableWeight = arg.ChargeableWeight       // simple assign
}

func Convert_orderingmodel_OrderShippings_ordermodel_OrderShippings(args []*orderingmodel.OrderShipping) (outs []*ordermodel.OrderShipping) {
	if args == nil {
		return nil
	}
	tmps := make([]ordermodel.OrderShipping, len(args))
	outs = make([]*ordermodel.OrderShipping, len(args))
	for i := range tmps {
		outs[i] = Convert_orderingmodel_OrderShipping_ordermodel_OrderShipping(args[i], &tmps[i])
	}
	return outs
}
