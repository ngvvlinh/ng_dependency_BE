// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	identitymodel "etop.vn/backend/com/main/identity/model"
	conversion "etop.vn/backend/pkg/common/conversion"
	usermodel "etop.vn/backend/zexp/etl/main/user/model"
	dot "etop.vn/capi/dot"
)

/*
Custom conversions:
    ConvertUser     // in use

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*usermodel.User)(nil), (*identitymodel.User)(nil), func(arg, out interface{}) error {
		Convert_usermodel_User_identitymodel_User(arg.(*usermodel.User), out.(*identitymodel.User))
		return nil
	})
	s.Register(([]*usermodel.User)(nil), (*[]*identitymodel.User)(nil), func(arg, out interface{}) error {
		out0 := Convert_usermodel_Users_identitymodel_Users(arg.([]*usermodel.User))
		*out.(*[]*identitymodel.User) = out0
		return nil
	})
	s.Register((*identitymodel.User)(nil), (*usermodel.User)(nil), func(arg, out interface{}) error {
		Convert_identitymodel_User_usermodel_User(arg.(*identitymodel.User), out.(*usermodel.User))
		return nil
	})
	s.Register(([]*identitymodel.User)(nil), (*[]*usermodel.User)(nil), func(arg, out interface{}) error {
		out0 := Convert_identitymodel_Users_usermodel_Users(arg.([]*identitymodel.User))
		*out.(*[]*usermodel.User) = out0
		return nil
	})
	s.Register((*usermodel.UserInner)(nil), (*identitymodel.UserInner)(nil), func(arg, out interface{}) error {
		Convert_usermodel_UserInner_identitymodel_UserInner(arg.(*usermodel.UserInner), out.(*identitymodel.UserInner))
		return nil
	})
	s.Register(([]*usermodel.UserInner)(nil), (*[]*identitymodel.UserInner)(nil), func(arg, out interface{}) error {
		out0 := Convert_usermodel_UserInners_identitymodel_UserInners(arg.([]*usermodel.UserInner))
		*out.(*[]*identitymodel.UserInner) = out0
		return nil
	})
	s.Register((*identitymodel.UserInner)(nil), (*usermodel.UserInner)(nil), func(arg, out interface{}) error {
		Convert_identitymodel_UserInner_usermodel_UserInner(arg.(*identitymodel.UserInner), out.(*usermodel.UserInner))
		return nil
	})
	s.Register(([]*identitymodel.UserInner)(nil), (*[]*usermodel.UserInner)(nil), func(arg, out interface{}) error {
		out0 := Convert_identitymodel_UserInners_usermodel_UserInners(arg.([]*identitymodel.UserInner))
		*out.(*[]*usermodel.UserInner) = out0
		return nil
	})
}

//-- convert etop.vn/backend/com/main/identity/model.User --//

func Convert_usermodel_User_identitymodel_User(arg *usermodel.User, out *identitymodel.User) *identitymodel.User {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identitymodel.User{}
	}
	convert_usermodel_User_identitymodel_User(arg, out)
	return out
}

func convert_usermodel_User_identitymodel_User(arg *usermodel.User, out *identitymodel.User) {
	out.ID = arg.ID                                           // simple assign
	out.UserInner = identitymodel.UserInner{}                 // types do not match
	out.Status = arg.Status                                   // simple assign
	out.CreatedAt = arg.CreatedAt                             // simple assign
	out.UpdatedAt = arg.UpdatedAt                             // simple assign
	out.AgreedTOSAt = arg.AgreedTOSAt                         // simple assign
	out.AgreedEmailInfoAt = arg.AgreedEmailInfoAt             // simple assign
	out.EmailVerifiedAt = arg.EmailVerifiedAt                 // simple assign
	out.PhoneVerifiedAt = arg.PhoneVerifiedAt                 // simple assign
	out.EmailVerificationSentAt = arg.EmailVerificationSentAt // simple assign
	out.PhoneVerificationSentAt = arg.PhoneVerificationSentAt // simple assign
	out.IsTest = 0                                            // zero value
	out.Source = 0                                            // zero value
	out.RefUserID = 0                                         // zero value
	out.RefSaleID = 0                                         // zero value
	out.WLPartnerID = 0                                       // zero value
	out.Rid = int(arg.Rid)                                    // simple conversion
}

func Convert_usermodel_Users_identitymodel_Users(args []*usermodel.User) (outs []*identitymodel.User) {
	tmps := make([]identitymodel.User, len(args))
	outs = make([]*identitymodel.User, len(args))
	for i := range tmps {
		outs[i] = Convert_usermodel_User_identitymodel_User(args[i], &tmps[i])
	}
	return outs
}

func Convert_identitymodel_User_usermodel_User(arg *identitymodel.User, out *usermodel.User) *usermodel.User {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &usermodel.User{}
	}
	ConvertUser(arg, out)
	return out
}

func convert_identitymodel_User_usermodel_User(arg *identitymodel.User, out *usermodel.User) {
	out.ID = arg.ID                                           // simple assign
	out.UserInner = usermodel.UserInner{}                     // types do not match
	out.Status = arg.Status                                   // simple assign
	out.CreatedAt = arg.CreatedAt                             // simple assign
	out.UpdatedAt = arg.UpdatedAt                             // simple assign
	out.AgreedTOSAt = arg.AgreedTOSAt                         // simple assign
	out.AgreedEmailInfoAt = arg.AgreedEmailInfoAt             // simple assign
	out.EmailVerifiedAt = arg.EmailVerifiedAt                 // simple assign
	out.PhoneVerifiedAt = arg.PhoneVerifiedAt                 // simple assign
	out.EmailVerificationSentAt = arg.EmailVerificationSentAt // simple assign
	out.PhoneVerificationSentAt = arg.PhoneVerificationSentAt // simple assign
	out.Rid = dot.ID(arg.Rid)                                 // simple conversion
}

func Convert_identitymodel_Users_usermodel_Users(args []*identitymodel.User) (outs []*usermodel.User) {
	tmps := make([]usermodel.User, len(args))
	outs = make([]*usermodel.User, len(args))
	for i := range tmps {
		outs[i] = Convert_identitymodel_User_usermodel_User(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/backend/com/main/identity/model.UserInner --//

func Convert_usermodel_UserInner_identitymodel_UserInner(arg *usermodel.UserInner, out *identitymodel.UserInner) *identitymodel.UserInner {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identitymodel.UserInner{}
	}
	convert_usermodel_UserInner_identitymodel_UserInner(arg, out)
	return out
}

func convert_usermodel_UserInner_identitymodel_UserInner(arg *usermodel.UserInner, out *identitymodel.UserInner) {
	out.FullName = arg.FullName   // simple assign
	out.ShortName = arg.ShortName // simple assign
	out.Email = arg.Email         // simple assign
	out.Phone = arg.Phone         // simple assign
}

func Convert_usermodel_UserInners_identitymodel_UserInners(args []*usermodel.UserInner) (outs []*identitymodel.UserInner) {
	tmps := make([]identitymodel.UserInner, len(args))
	outs = make([]*identitymodel.UserInner, len(args))
	for i := range tmps {
		outs[i] = Convert_usermodel_UserInner_identitymodel_UserInner(args[i], &tmps[i])
	}
	return outs
}

func Convert_identitymodel_UserInner_usermodel_UserInner(arg *identitymodel.UserInner, out *usermodel.UserInner) *usermodel.UserInner {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &usermodel.UserInner{}
	}
	convert_identitymodel_UserInner_usermodel_UserInner(arg, out)
	return out
}

func convert_identitymodel_UserInner_usermodel_UserInner(arg *identitymodel.UserInner, out *usermodel.UserInner) {
	out.FullName = arg.FullName   // simple assign
	out.ShortName = arg.ShortName // simple assign
	out.Email = arg.Email         // simple assign
	out.Phone = arg.Phone         // simple assign
}

func Convert_identitymodel_UserInners_usermodel_UserInners(args []*identitymodel.UserInner) (outs []*usermodel.UserInner) {
	tmps := make([]usermodel.UserInner, len(args))
	outs = make([]*usermodel.UserInner, len(args))
	for i := range tmps {
		outs[i] = Convert_identitymodel_UserInner_usermodel_UserInner(args[i], &tmps[i])
	}
	return outs
}
