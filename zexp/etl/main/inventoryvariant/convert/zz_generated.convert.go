// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	inventorymodel "o.o/backend/com/main/inventory/model"
	conversion "o.o/backend/pkg/common/conversion"
	inventoryvariantmodel "o.o/backend/zexp/etl/main/inventoryvariant/model"
)

/*
Custom conversions: (none)

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*inventoryvariantmodel.InventoryVariant)(nil), (*inventorymodel.InventoryVariant)(nil), func(arg, out interface{}) error {
		Convert_inventoryvariantmodel_InventoryVariant_inventorymodel_InventoryVariant(arg.(*inventoryvariantmodel.InventoryVariant), out.(*inventorymodel.InventoryVariant))
		return nil
	})
	s.Register(([]*inventoryvariantmodel.InventoryVariant)(nil), (*[]*inventorymodel.InventoryVariant)(nil), func(arg, out interface{}) error {
		out0 := Convert_inventoryvariantmodel_InventoryVariants_inventorymodel_InventoryVariants(arg.([]*inventoryvariantmodel.InventoryVariant))
		*out.(*[]*inventorymodel.InventoryVariant) = out0
		return nil
	})
	s.Register((*inventorymodel.InventoryVariant)(nil), (*inventoryvariantmodel.InventoryVariant)(nil), func(arg, out interface{}) error {
		Convert_inventorymodel_InventoryVariant_inventoryvariantmodel_InventoryVariant(arg.(*inventorymodel.InventoryVariant), out.(*inventoryvariantmodel.InventoryVariant))
		return nil
	})
	s.Register(([]*inventorymodel.InventoryVariant)(nil), (*[]*inventoryvariantmodel.InventoryVariant)(nil), func(arg, out interface{}) error {
		out0 := Convert_inventorymodel_InventoryVariants_inventoryvariantmodel_InventoryVariants(arg.([]*inventorymodel.InventoryVariant))
		*out.(*[]*inventoryvariantmodel.InventoryVariant) = out0
		return nil
	})
}

//-- convert o.o/backend/com/main/inventory/model.InventoryVariant --//

func Convert_inventoryvariantmodel_InventoryVariant_inventorymodel_InventoryVariant(arg *inventoryvariantmodel.InventoryVariant, out *inventorymodel.InventoryVariant) *inventorymodel.InventoryVariant {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &inventorymodel.InventoryVariant{}
	}
	convert_inventoryvariantmodel_InventoryVariant_inventorymodel_InventoryVariant(arg, out)
	return out
}

func convert_inventoryvariantmodel_InventoryVariant_inventorymodel_InventoryVariant(arg *inventoryvariantmodel.InventoryVariant, out *inventorymodel.InventoryVariant) {
	out.ShopID = arg.ShopID                 // simple assign
	out.VariantID = arg.VariantID           // simple assign
	out.QuantityOnHand = arg.QuantityOnHand // simple assign
	out.QuantityPicked = arg.QuantityPicked // simple assign
	out.CostPrice = arg.CostPrice           // simple assign
	out.CreatedAt = arg.CreatedAt           // simple assign
	out.UpdatedAt = arg.UpdatedAt           // simple assign
	out.Rid = arg.Rid                       // simple assign
}

func Convert_inventoryvariantmodel_InventoryVariants_inventorymodel_InventoryVariants(args []*inventoryvariantmodel.InventoryVariant) (outs []*inventorymodel.InventoryVariant) {
	if args == nil {
		return nil
	}
	tmps := make([]inventorymodel.InventoryVariant, len(args))
	outs = make([]*inventorymodel.InventoryVariant, len(args))
	for i := range tmps {
		outs[i] = Convert_inventoryvariantmodel_InventoryVariant_inventorymodel_InventoryVariant(args[i], &tmps[i])
	}
	return outs
}

func Convert_inventorymodel_InventoryVariant_inventoryvariantmodel_InventoryVariant(arg *inventorymodel.InventoryVariant, out *inventoryvariantmodel.InventoryVariant) *inventoryvariantmodel.InventoryVariant {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &inventoryvariantmodel.InventoryVariant{}
	}
	convert_inventorymodel_InventoryVariant_inventoryvariantmodel_InventoryVariant(arg, out)
	return out
}

func convert_inventorymodel_InventoryVariant_inventoryvariantmodel_InventoryVariant(arg *inventorymodel.InventoryVariant, out *inventoryvariantmodel.InventoryVariant) {
	out.ShopID = arg.ShopID                 // simple assign
	out.VariantID = arg.VariantID           // simple assign
	out.QuantityOnHand = arg.QuantityOnHand // simple assign
	out.QuantityPicked = arg.QuantityPicked // simple assign
	out.CostPrice = arg.CostPrice           // simple assign
	out.CreatedAt = arg.CreatedAt           // simple assign
	out.UpdatedAt = arg.UpdatedAt           // simple assign
	out.Rid = arg.Rid                       // simple assign
}

func Convert_inventorymodel_InventoryVariants_inventoryvariantmodel_InventoryVariants(args []*inventorymodel.InventoryVariant) (outs []*inventoryvariantmodel.InventoryVariant) {
	if args == nil {
		return nil
	}
	tmps := make([]inventoryvariantmodel.InventoryVariant, len(args))
	outs = make([]*inventoryvariantmodel.InventoryVariant, len(args))
	for i := range tmps {
		outs[i] = Convert_inventorymodel_InventoryVariant_inventoryvariantmodel_InventoryVariant(args[i], &tmps[i])
	}
	return outs
}
