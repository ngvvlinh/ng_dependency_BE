// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "etop.vn/backend/pkg/common/sql/cmsql"
	migration "etop.vn/backend/pkg/common/sql/migration"
	core "etop.vn/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type InventoryVariants []*InventoryVariant

const __sqlInventoryVariant_Table = "inventory_variant"
const __sqlInventoryVariant_ListCols = "\"shop_id\",\"variant_id\",\"quantity_on_hand\",\"quantity_picked\",\"cost_price\",\"created_at\",\"updated_at\",\"rid\""
const __sqlInventoryVariant_ListColsOnConflict = "\"shop_id\" = EXCLUDED.\"shop_id\",\"variant_id\" = EXCLUDED.\"variant_id\",\"quantity_on_hand\" = EXCLUDED.\"quantity_on_hand\",\"quantity_picked\" = EXCLUDED.\"quantity_picked\",\"cost_price\" = EXCLUDED.\"cost_price\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"rid\" = EXCLUDED.\"rid\""
const __sqlInventoryVariant_Insert = "INSERT INTO \"inventory_variant\" (" + __sqlInventoryVariant_ListCols + ") VALUES"
const __sqlInventoryVariant_Select = "SELECT " + __sqlInventoryVariant_ListCols + " FROM \"inventory_variant\""
const __sqlInventoryVariant_Select_history = "SELECT " + __sqlInventoryVariant_ListCols + " FROM history.\"inventory_variant\""
const __sqlInventoryVariant_UpdateAll = "UPDATE \"inventory_variant\" SET (" + __sqlInventoryVariant_ListCols + ")"
const __sqlInventoryVariant_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT inventory_variant_pkey DO UPDATE SET"

func (m *InventoryVariant) SQLTableName() string  { return "inventory_variant" }
func (m *InventoryVariants) SQLTableName() string { return "inventory_variant" }
func (m *InventoryVariant) SQLListCols() string   { return __sqlInventoryVariant_ListCols }

func (m *InventoryVariant) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlInventoryVariant_ListCols + " FROM \"inventory_variant\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *InventoryVariant) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "inventory_variant"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"shop_id": {
			ColumnName:       "shop_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"variant_id": {
			ColumnName:       "variant_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"quantity_on_hand": {
			ColumnName:       "quantity_on_hand",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"quantity_picked": {
			ColumnName:       "quantity_picked",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"cost_price": {
			ColumnName:       "cost_price",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"rid": {
			ColumnName:       "rid",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "inventory_variant", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*InventoryVariant)(nil))
}

func (m *InventoryVariant) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		m.ShopID,
		m.VariantID,
		core.Int(m.QuantityOnHand),
		core.Int(m.QuantityPicked),
		core.Int(m.CostPrice),
		core.Time(m.CreatedAt),
		core.Time(m.UpdatedAt),
		m.Rid,
	}
}

func (m *InventoryVariant) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ShopID,
		&m.VariantID,
		(*core.Int)(&m.QuantityOnHand),
		(*core.Int)(&m.QuantityPicked),
		(*core.Int)(&m.CostPrice),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		&m.Rid,
	}
}

func (m *InventoryVariant) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *InventoryVariants) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(InventoryVariants, 0, 128)
	for rows.Next() {
		m := new(InventoryVariant)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *InventoryVariant) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlInventoryVariant_Select)
	return nil
}

func (_ *InventoryVariants) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlInventoryVariant_Select)
	return nil
}

func (m *InventoryVariant) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlInventoryVariant_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms InventoryVariants) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlInventoryVariant_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(8)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *InventoryVariant) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlInventoryVariant_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlInventoryVariant_ListColsOnConflict)
	return nil
}

func (ms InventoryVariants) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlInventoryVariant_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlInventoryVariant_ListColsOnConflict)
	return nil
}

func (m *InventoryVariant) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("inventory_variant")
	w.WriteRawString(" SET ")
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.VariantID != 0 {
		flag = true
		w.WriteName("variant_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.VariantID)
	}
	if m.QuantityOnHand != 0 {
		flag = true
		w.WriteName("quantity_on_hand")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityOnHand)
	}
	if m.QuantityPicked != 0 {
		flag = true
		w.WriteName("quantity_picked")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.QuantityPicked)
	}
	if m.CostPrice != 0 {
		flag = true
		w.WriteName("cost_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CostPrice)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UpdatedAt)
	}
	if m.Rid != 0 {
		flag = true
		w.WriteName("rid")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Rid)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *InventoryVariant) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlInventoryVariant_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(8)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type InventoryVariantHistory map[string]interface{}
type InventoryVariantHistories []map[string]interface{}

func (m *InventoryVariantHistory) SQLTableName() string  { return "history.\"inventory_variant\"" }
func (m InventoryVariantHistories) SQLTableName() string { return "history.\"inventory_variant\"" }

func (m *InventoryVariantHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlInventoryVariant_Select_history)
	return nil
}

func (m InventoryVariantHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlInventoryVariant_Select_history)
	return nil
}

func (m InventoryVariantHistory) ShopID() core.Interface    { return core.Interface{m["shop_id"]} }
func (m InventoryVariantHistory) VariantID() core.Interface { return core.Interface{m["variant_id"]} }
func (m InventoryVariantHistory) QuantityOnHand() core.Interface {
	return core.Interface{m["quantity_on_hand"]}
}
func (m InventoryVariantHistory) QuantityPicked() core.Interface {
	return core.Interface{m["quantity_picked"]}
}
func (m InventoryVariantHistory) CostPrice() core.Interface { return core.Interface{m["cost_price"]} }
func (m InventoryVariantHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m InventoryVariantHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }
func (m InventoryVariantHistory) Rid() core.Interface       { return core.Interface{m["rid"]} }

func (m *InventoryVariantHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(InventoryVariantHistory, 8)
	res["shop_id"] = data[0]
	res["variant_id"] = data[1]
	res["quantity_on_hand"] = data[2]
	res["quantity_picked"] = data[3]
	res["cost_price"] = data[4]
	res["created_at"] = data[5]
	res["updated_at"] = data[6]
	res["rid"] = data[7]
	*m = res
	return nil
}

func (ms *InventoryVariantHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 8)
	args := make([]interface{}, 8)
	for i := 0; i < 8; i++ {
		args[i] = &data[i]
	}
	res := make(InventoryVariantHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(InventoryVariantHistory)
		m["shop_id"] = data[0]
		m["variant_id"] = data[1]
		m["quantity_on_hand"] = data[2]
		m["quantity_picked"] = data[3]
		m["cost_price"] = data[4]
		m["created_at"] = data[5]
		m["updated_at"] = data[6]
		m["rid"] = data[7]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
