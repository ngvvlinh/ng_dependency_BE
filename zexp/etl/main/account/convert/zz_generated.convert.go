// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	identitymodel "etop.vn/backend/com/main/identity/model"
	conversion "etop.vn/backend/pkg/common/conversion"
	accountmodel "etop.vn/backend/zexp/etl/main/account/model"
)

/*
Custom conversions: (none)

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*accountmodel.Account)(nil), (*identitymodel.Account)(nil), func(arg, out interface{}) error {
		Convert_accountmodel_Account_identitymodel_Account(arg.(*accountmodel.Account), out.(*identitymodel.Account))
		return nil
	})
	s.Register(([]*accountmodel.Account)(nil), (*[]*identitymodel.Account)(nil), func(arg, out interface{}) error {
		out0 := Convert_accountmodel_Accounts_identitymodel_Accounts(arg.([]*accountmodel.Account))
		*out.(*[]*identitymodel.Account) = out0
		return nil
	})
	s.Register((*identitymodel.Account)(nil), (*accountmodel.Account)(nil), func(arg, out interface{}) error {
		Convert_identitymodel_Account_accountmodel_Account(arg.(*identitymodel.Account), out.(*accountmodel.Account))
		return nil
	})
	s.Register(([]*identitymodel.Account)(nil), (*[]*accountmodel.Account)(nil), func(arg, out interface{}) error {
		out0 := Convert_identitymodel_Accounts_accountmodel_Accounts(arg.([]*identitymodel.Account))
		*out.(*[]*accountmodel.Account) = out0
		return nil
	})
}

//-- convert etop.vn/backend/com/main/identity/model.Account --//

func Convert_accountmodel_Account_identitymodel_Account(arg *accountmodel.Account, out *identitymodel.Account) *identitymodel.Account {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &identitymodel.Account{}
	}
	convert_accountmodel_Account_identitymodel_Account(arg, out)
	return out
}

func convert_accountmodel_Account_identitymodel_Account(arg *accountmodel.Account, out *identitymodel.Account) {
	out.ID = arg.ID             // simple assign
	out.OwnerID = arg.OwnerID   // simple assign
	out.Name = arg.Name         // simple assign
	out.Type = arg.Type         // simple assign
	out.ImageURL = arg.ImageURL // simple assign
	out.URLSlug = arg.URLSlug   // simple assign
	out.Rid = arg.Rid           // simple assign
}

func Convert_accountmodel_Accounts_identitymodel_Accounts(args []*accountmodel.Account) (outs []*identitymodel.Account) {
	if args == nil {
		return nil
	}
	tmps := make([]identitymodel.Account, len(args))
	outs = make([]*identitymodel.Account, len(args))
	for i := range tmps {
		outs[i] = Convert_accountmodel_Account_identitymodel_Account(args[i], &tmps[i])
	}
	return outs
}

func Convert_identitymodel_Account_accountmodel_Account(arg *identitymodel.Account, out *accountmodel.Account) *accountmodel.Account {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &accountmodel.Account{}
	}
	convert_identitymodel_Account_accountmodel_Account(arg, out)
	return out
}

func convert_identitymodel_Account_accountmodel_Account(arg *identitymodel.Account, out *accountmodel.Account) {
	out.ID = arg.ID             // simple assign
	out.OwnerID = arg.OwnerID   // simple assign
	out.Name = arg.Name         // simple assign
	out.Type = arg.Type         // simple assign
	out.ImageURL = arg.ImageURL // simple assign
	out.URLSlug = arg.URLSlug   // simple assign
	out.Rid = arg.Rid           // simple assign
}

func Convert_identitymodel_Accounts_accountmodel_Accounts(args []*identitymodel.Account) (outs []*accountmodel.Account) {
	if args == nil {
		return nil
	}
	tmps := make([]accountmodel.Account, len(args))
	outs = make([]*accountmodel.Account, len(args))
	for i := range tmps {
		outs[i] = Convert_identitymodel_Account_accountmodel_Account(args[i], &tmps[i])
	}
	return outs
}
