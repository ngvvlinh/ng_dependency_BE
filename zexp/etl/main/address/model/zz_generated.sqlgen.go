// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "etop.vn/backend/pkg/common/sql/cmsql"
	core "etop.vn/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type Addresses []*Address

const __sqlAddress_Table = "address"
const __sqlAddress_ListCols = "\"id\",\"full_name\",\"first_name\",\"last_name\",\"phone\",\"position\",\"email\",\"country\",\"city\",\"province\",\"district\",\"ward\",\"zip\",\"district_code\",\"province_code\",\"ward_code\",\"company\",\"address1\",\"address2\",\"type\",\"account_id\",\"notes\",\"created_at\",\"updated_at\",\"coordinates\",\"rid\""
const __sqlAddress_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"full_name\" = EXCLUDED.\"full_name\",\"first_name\" = EXCLUDED.\"first_name\",\"last_name\" = EXCLUDED.\"last_name\",\"phone\" = EXCLUDED.\"phone\",\"position\" = EXCLUDED.\"position\",\"email\" = EXCLUDED.\"email\",\"country\" = EXCLUDED.\"country\",\"city\" = EXCLUDED.\"city\",\"province\" = EXCLUDED.\"province\",\"district\" = EXCLUDED.\"district\",\"ward\" = EXCLUDED.\"ward\",\"zip\" = EXCLUDED.\"zip\",\"district_code\" = EXCLUDED.\"district_code\",\"province_code\" = EXCLUDED.\"province_code\",\"ward_code\" = EXCLUDED.\"ward_code\",\"company\" = EXCLUDED.\"company\",\"address1\" = EXCLUDED.\"address1\",\"address2\" = EXCLUDED.\"address2\",\"type\" = EXCLUDED.\"type\",\"account_id\" = EXCLUDED.\"account_id\",\"notes\" = EXCLUDED.\"notes\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"coordinates\" = EXCLUDED.\"coordinates\",\"rid\" = EXCLUDED.\"rid\""
const __sqlAddress_Insert = "INSERT INTO \"address\" (" + __sqlAddress_ListCols + ") VALUES"
const __sqlAddress_Select = "SELECT " + __sqlAddress_ListCols + " FROM \"address\""
const __sqlAddress_Select_history = "SELECT " + __sqlAddress_ListCols + " FROM history.\"address\""
const __sqlAddress_UpdateAll = "UPDATE \"address\" SET (" + __sqlAddress_ListCols + ")"
const __sqlAddress_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT address_pkey DO UPDATE SET"

func (m *Address) SQLTableName() string   { return "address" }
func (m *Addresses) SQLTableName() string { return "address" }
func (m *Address) SQLListCols() string    { return __sqlAddress_ListCols }

func (m *Address) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlAddress_ListCols + " FROM \"address\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*Address)(nil))
}

func (m *Address) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		m.ID,
		core.String(m.FullName),
		core.String(m.FirstName),
		core.String(m.LastName),
		core.String(m.Phone),
		core.String(m.Position),
		core.String(m.Email),
		core.String(m.Country),
		core.String(m.City),
		core.String(m.Province),
		core.String(m.District),
		core.String(m.Ward),
		core.String(m.Zip),
		core.String(m.DistrictCode),
		core.String(m.ProvinceCode),
		core.String(m.WardCode),
		core.String(m.Company),
		core.String(m.Address1),
		core.String(m.Address2),
		core.String(m.Type),
		m.AccountID,
		core.JSON{m.Notes},
		core.Time(m.CreatedAt),
		core.Time(m.UpdatedAt),
		core.JSON{m.Coordinates},
		m.Rid,
	}
}

func (m *Address) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.FullName),
		(*core.String)(&m.FirstName),
		(*core.String)(&m.LastName),
		(*core.String)(&m.Phone),
		(*core.String)(&m.Position),
		(*core.String)(&m.Email),
		(*core.String)(&m.Country),
		(*core.String)(&m.City),
		(*core.String)(&m.Province),
		(*core.String)(&m.District),
		(*core.String)(&m.Ward),
		(*core.String)(&m.Zip),
		(*core.String)(&m.DistrictCode),
		(*core.String)(&m.ProvinceCode),
		(*core.String)(&m.WardCode),
		(*core.String)(&m.Company),
		(*core.String)(&m.Address1),
		(*core.String)(&m.Address2),
		(*core.String)(&m.Type),
		&m.AccountID,
		core.JSON{&m.Notes},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		core.JSON{&m.Coordinates},
		&m.Rid,
	}
}

func (m *Address) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Addresses) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Addresses, 0, 128)
	for rows.Next() {
		m := new(Address)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Address) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAddress_Select)
	return nil
}

func (_ *Addresses) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAddress_Select)
	return nil
}

func (m *Address) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlAddress_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(26)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Addresses) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlAddress_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(26)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Address) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlAddress_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlAddress_ListColsOnConflict)
	return nil
}

func (ms Addresses) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlAddress_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlAddress_ListColsOnConflict)
	return nil
}

func (m *Address) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("address")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.FullName != "" {
		flag = true
		w.WriteName("full_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FullName)
	}
	if m.FirstName != "" {
		flag = true
		w.WriteName("first_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FirstName)
	}
	if m.LastName != "" {
		flag = true
		w.WriteName("last_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.LastName)
	}
	if m.Phone != "" {
		flag = true
		w.WriteName("phone")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Phone)
	}
	if m.Position != "" {
		flag = true
		w.WriteName("position")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Position)
	}
	if m.Email != "" {
		flag = true
		w.WriteName("email")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Email)
	}
	if m.Country != "" {
		flag = true
		w.WriteName("country")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Country)
	}
	if m.City != "" {
		flag = true
		w.WriteName("city")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.City)
	}
	if m.Province != "" {
		flag = true
		w.WriteName("province")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Province)
	}
	if m.District != "" {
		flag = true
		w.WriteName("district")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.District)
	}
	if m.Ward != "" {
		flag = true
		w.WriteName("ward")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Ward)
	}
	if m.Zip != "" {
		flag = true
		w.WriteName("zip")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Zip)
	}
	if m.DistrictCode != "" {
		flag = true
		w.WriteName("district_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DistrictCode)
	}
	if m.ProvinceCode != "" {
		flag = true
		w.WriteName("province_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProvinceCode)
	}
	if m.WardCode != "" {
		flag = true
		w.WriteName("ward_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WardCode)
	}
	if m.Company != "" {
		flag = true
		w.WriteName("company")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Company)
	}
	if m.Address1 != "" {
		flag = true
		w.WriteName("address1")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Address1)
	}
	if m.Address2 != "" {
		flag = true
		w.WriteName("address2")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Address2)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if m.AccountID != 0 {
		flag = true
		w.WriteName("account_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AccountID)
	}
	if m.Notes != nil {
		flag = true
		w.WriteName("notes")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Notes})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UpdatedAt)
	}
	if m.Coordinates != nil {
		flag = true
		w.WriteName("coordinates")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Coordinates})
	}
	if m.Rid != 0 {
		flag = true
		w.WriteName("rid")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Rid)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Address) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlAddress_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(26)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type AddressHistory map[string]interface{}
type AddressHistories []map[string]interface{}

func (m *AddressHistory) SQLTableName() string  { return "history.\"address\"" }
func (m AddressHistories) SQLTableName() string { return "history.\"address\"" }

func (m *AddressHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAddress_Select_history)
	return nil
}

func (m AddressHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlAddress_Select_history)
	return nil
}

func (m AddressHistory) ID() core.Interface           { return core.Interface{m["id"]} }
func (m AddressHistory) FullName() core.Interface     { return core.Interface{m["full_name"]} }
func (m AddressHistory) FirstName() core.Interface    { return core.Interface{m["first_name"]} }
func (m AddressHistory) LastName() core.Interface     { return core.Interface{m["last_name"]} }
func (m AddressHistory) Phone() core.Interface        { return core.Interface{m["phone"]} }
func (m AddressHistory) Position() core.Interface     { return core.Interface{m["position"]} }
func (m AddressHistory) Email() core.Interface        { return core.Interface{m["email"]} }
func (m AddressHistory) Country() core.Interface      { return core.Interface{m["country"]} }
func (m AddressHistory) City() core.Interface         { return core.Interface{m["city"]} }
func (m AddressHistory) Province() core.Interface     { return core.Interface{m["province"]} }
func (m AddressHistory) District() core.Interface     { return core.Interface{m["district"]} }
func (m AddressHistory) Ward() core.Interface         { return core.Interface{m["ward"]} }
func (m AddressHistory) Zip() core.Interface          { return core.Interface{m["zip"]} }
func (m AddressHistory) DistrictCode() core.Interface { return core.Interface{m["district_code"]} }
func (m AddressHistory) ProvinceCode() core.Interface { return core.Interface{m["province_code"]} }
func (m AddressHistory) WardCode() core.Interface     { return core.Interface{m["ward_code"]} }
func (m AddressHistory) Company() core.Interface      { return core.Interface{m["company"]} }
func (m AddressHistory) Address1() core.Interface     { return core.Interface{m["address1"]} }
func (m AddressHistory) Address2() core.Interface     { return core.Interface{m["address2"]} }
func (m AddressHistory) Type() core.Interface         { return core.Interface{m["type"]} }
func (m AddressHistory) AccountID() core.Interface    { return core.Interface{m["account_id"]} }
func (m AddressHistory) Notes() core.Interface        { return core.Interface{m["notes"]} }
func (m AddressHistory) CreatedAt() core.Interface    { return core.Interface{m["created_at"]} }
func (m AddressHistory) UpdatedAt() core.Interface    { return core.Interface{m["updated_at"]} }
func (m AddressHistory) Coordinates() core.Interface  { return core.Interface{m["coordinates"]} }
func (m AddressHistory) Rid() core.Interface          { return core.Interface{m["rid"]} }

func (m *AddressHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 26)
	args := make([]interface{}, 26)
	for i := 0; i < 26; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(AddressHistory, 26)
	res["id"] = data[0]
	res["full_name"] = data[1]
	res["first_name"] = data[2]
	res["last_name"] = data[3]
	res["phone"] = data[4]
	res["position"] = data[5]
	res["email"] = data[6]
	res["country"] = data[7]
	res["city"] = data[8]
	res["province"] = data[9]
	res["district"] = data[10]
	res["ward"] = data[11]
	res["zip"] = data[12]
	res["district_code"] = data[13]
	res["province_code"] = data[14]
	res["ward_code"] = data[15]
	res["company"] = data[16]
	res["address1"] = data[17]
	res["address2"] = data[18]
	res["type"] = data[19]
	res["account_id"] = data[20]
	res["notes"] = data[21]
	res["created_at"] = data[22]
	res["updated_at"] = data[23]
	res["coordinates"] = data[24]
	res["rid"] = data[25]
	*m = res
	return nil
}

func (ms *AddressHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 26)
	args := make([]interface{}, 26)
	for i := 0; i < 26; i++ {
		args[i] = &data[i]
	}
	res := make(AddressHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(AddressHistory)
		m["id"] = data[0]
		m["full_name"] = data[1]
		m["first_name"] = data[2]
		m["last_name"] = data[3]
		m["phone"] = data[4]
		m["position"] = data[5]
		m["email"] = data[6]
		m["country"] = data[7]
		m["city"] = data[8]
		m["province"] = data[9]
		m["district"] = data[10]
		m["ward"] = data[11]
		m["zip"] = data[12]
		m["district_code"] = data[13]
		m["province_code"] = data[14]
		m["ward_code"] = data[15]
		m["company"] = data[16]
		m["address1"] = data[17]
		m["address2"] = data[18]
		m["type"] = data[19]
		m["account_id"] = data[20]
		m["notes"] = data[21]
		m["created_at"] = data[22]
		m["updated_at"] = data[23]
		m["coordinates"] = data[24]
		m["rid"] = data[25]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
