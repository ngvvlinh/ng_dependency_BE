// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	catalogmodel "etop.vn/backend/com/main/catalog/model"
	conversion "etop.vn/backend/pkg/common/conversion"
	shopproductmodel "etop.vn/backend/zexp/etl/main/shopproduct/model"
)

/*
Custom conversions: (none)

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*shopproductmodel.MetaField)(nil), (*catalogmodel.MetaField)(nil), func(arg, out interface{}) error {
		Convert_shopproductmodel_MetaField_catalogmodel_MetaField(arg.(*shopproductmodel.MetaField), out.(*catalogmodel.MetaField))
		return nil
	})
	s.Register(([]*shopproductmodel.MetaField)(nil), (*[]*catalogmodel.MetaField)(nil), func(arg, out interface{}) error {
		out0 := Convert_shopproductmodel_MetaFields_catalogmodel_MetaFields(arg.([]*shopproductmodel.MetaField))
		*out.(*[]*catalogmodel.MetaField) = out0
		return nil
	})
	s.Register((*catalogmodel.MetaField)(nil), (*shopproductmodel.MetaField)(nil), func(arg, out interface{}) error {
		Convert_catalogmodel_MetaField_shopproductmodel_MetaField(arg.(*catalogmodel.MetaField), out.(*shopproductmodel.MetaField))
		return nil
	})
	s.Register(([]*catalogmodel.MetaField)(nil), (*[]*shopproductmodel.MetaField)(nil), func(arg, out interface{}) error {
		out0 := Convert_catalogmodel_MetaFields_shopproductmodel_MetaFields(arg.([]*catalogmodel.MetaField))
		*out.(*[]*shopproductmodel.MetaField) = out0
		return nil
	})
	s.Register((*shopproductmodel.ShopProduct)(nil), (*catalogmodel.ShopProduct)(nil), func(arg, out interface{}) error {
		Convert_shopproductmodel_ShopProduct_catalogmodel_ShopProduct(arg.(*shopproductmodel.ShopProduct), out.(*catalogmodel.ShopProduct))
		return nil
	})
	s.Register(([]*shopproductmodel.ShopProduct)(nil), (*[]*catalogmodel.ShopProduct)(nil), func(arg, out interface{}) error {
		out0 := Convert_shopproductmodel_ShopProducts_catalogmodel_ShopProducts(arg.([]*shopproductmodel.ShopProduct))
		*out.(*[]*catalogmodel.ShopProduct) = out0
		return nil
	})
	s.Register((*catalogmodel.ShopProduct)(nil), (*shopproductmodel.ShopProduct)(nil), func(arg, out interface{}) error {
		Convert_catalogmodel_ShopProduct_shopproductmodel_ShopProduct(arg.(*catalogmodel.ShopProduct), out.(*shopproductmodel.ShopProduct))
		return nil
	})
	s.Register(([]*catalogmodel.ShopProduct)(nil), (*[]*shopproductmodel.ShopProduct)(nil), func(arg, out interface{}) error {
		out0 := Convert_catalogmodel_ShopProducts_shopproductmodel_ShopProducts(arg.([]*catalogmodel.ShopProduct))
		*out.(*[]*shopproductmodel.ShopProduct) = out0
		return nil
	})
}

//-- convert etop.vn/backend/com/main/catalog/model.MetaField --//

func Convert_shopproductmodel_MetaField_catalogmodel_MetaField(arg *shopproductmodel.MetaField, out *catalogmodel.MetaField) *catalogmodel.MetaField {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &catalogmodel.MetaField{}
	}
	convert_shopproductmodel_MetaField_catalogmodel_MetaField(arg, out)
	return out
}

func convert_shopproductmodel_MetaField_catalogmodel_MetaField(arg *shopproductmodel.MetaField, out *catalogmodel.MetaField) {
	out.Key = arg.Key     // simple assign
	out.Value = arg.Value // simple assign
}

func Convert_shopproductmodel_MetaFields_catalogmodel_MetaFields(args []*shopproductmodel.MetaField) (outs []*catalogmodel.MetaField) {
	tmps := make([]catalogmodel.MetaField, len(args))
	outs = make([]*catalogmodel.MetaField, len(args))
	for i := range tmps {
		outs[i] = Convert_shopproductmodel_MetaField_catalogmodel_MetaField(args[i], &tmps[i])
	}
	return outs
}

func Convert_catalogmodel_MetaField_shopproductmodel_MetaField(arg *catalogmodel.MetaField, out *shopproductmodel.MetaField) *shopproductmodel.MetaField {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &shopproductmodel.MetaField{}
	}
	convert_catalogmodel_MetaField_shopproductmodel_MetaField(arg, out)
	return out
}

func convert_catalogmodel_MetaField_shopproductmodel_MetaField(arg *catalogmodel.MetaField, out *shopproductmodel.MetaField) {
	out.Key = arg.Key     // simple assign
	out.Value = arg.Value // simple assign
}

func Convert_catalogmodel_MetaFields_shopproductmodel_MetaFields(args []*catalogmodel.MetaField) (outs []*shopproductmodel.MetaField) {
	tmps := make([]shopproductmodel.MetaField, len(args))
	outs = make([]*shopproductmodel.MetaField, len(args))
	for i := range tmps {
		outs[i] = Convert_catalogmodel_MetaField_shopproductmodel_MetaField(args[i], &tmps[i])
	}
	return outs
}

//-- convert etop.vn/backend/com/main/catalog/model.ShopProduct --//

func Convert_shopproductmodel_ShopProduct_catalogmodel_ShopProduct(arg *shopproductmodel.ShopProduct, out *catalogmodel.ShopProduct) *catalogmodel.ShopProduct {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &catalogmodel.ShopProduct{}
	}
	convert_shopproductmodel_ShopProduct_catalogmodel_ShopProduct(arg, out)
	return out
}

func convert_shopproductmodel_ShopProduct_catalogmodel_ShopProduct(arg *shopproductmodel.ShopProduct, out *catalogmodel.ShopProduct) {
	out.ExternalID = arg.ExternalID                 // simple assign
	out.ExternalCode = arg.ExternalCode             // simple assign
	out.PartnerID = arg.PartnerID                   // simple assign
	out.ExternalBrandID = arg.ExternalBrandID       // simple assign
	out.ExternalCategoryID = arg.ExternalCategoryID // simple assign
	out.ShopID = arg.ShopID                         // simple assign
	out.ProductID = arg.ProductID                   // simple assign
	out.CollectionIDs = arg.CollectionIDs           // simple assign
	out.Code = arg.Code                             // simple assign
	out.CodeNorm = 0                                // zero value
	out.Name = arg.Name                             // simple assign
	out.Description = arg.Description               // simple assign
	out.DescHTML = arg.DescHTML                     // simple assign
	out.ShortDesc = arg.ShortDesc                   // simple assign
	out.ImageURLs = arg.ImageURLs                   // simple assign
	out.Note = arg.Note                             // simple assign
	out.Tags = arg.Tags                             // simple assign
	out.Unit = arg.Unit                             // simple assign
	out.CategoryID = arg.CategoryID                 // simple assign
	out.CostPrice = arg.CostPrice                   // simple assign
	out.ListPrice = arg.ListPrice                   // simple assign
	out.RetailPrice = arg.RetailPrice               // simple assign
	out.BrandID = arg.BrandID                       // simple assign
	out.Status = arg.Status                         // simple assign
	out.CreatedAt = arg.CreatedAt                   // simple assign
	out.UpdatedAt = arg.UpdatedAt                   // simple assign
	out.DeletedAt = time.Time{}                     // zero value
	out.NameNorm = ""                               // zero value
	out.NameNormUa = ""                             // zero value
	out.ProductType = arg.ProductType               // simple assign
	out.MetaFields = Convert_shopproductmodel_MetaFields_catalogmodel_MetaFields(arg.MetaFields)
	out.Rid = arg.Rid // simple assign
}

func Convert_shopproductmodel_ShopProducts_catalogmodel_ShopProducts(args []*shopproductmodel.ShopProduct) (outs []*catalogmodel.ShopProduct) {
	tmps := make([]catalogmodel.ShopProduct, len(args))
	outs = make([]*catalogmodel.ShopProduct, len(args))
	for i := range tmps {
		outs[i] = Convert_shopproductmodel_ShopProduct_catalogmodel_ShopProduct(args[i], &tmps[i])
	}
	return outs
}

func Convert_catalogmodel_ShopProduct_shopproductmodel_ShopProduct(arg *catalogmodel.ShopProduct, out *shopproductmodel.ShopProduct) *shopproductmodel.ShopProduct {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &shopproductmodel.ShopProduct{}
	}
	convert_catalogmodel_ShopProduct_shopproductmodel_ShopProduct(arg, out)
	return out
}

func convert_catalogmodel_ShopProduct_shopproductmodel_ShopProduct(arg *catalogmodel.ShopProduct, out *shopproductmodel.ShopProduct) {
	out.ExternalID = arg.ExternalID                 // simple assign
	out.ExternalCode = arg.ExternalCode             // simple assign
	out.PartnerID = arg.PartnerID                   // simple assign
	out.ExternalBrandID = arg.ExternalBrandID       // simple assign
	out.ExternalCategoryID = arg.ExternalCategoryID // simple assign
	out.ShopID = arg.ShopID                         // simple assign
	out.ProductID = arg.ProductID                   // simple assign
	out.CollectionIDs = arg.CollectionIDs           // simple assign
	out.Code = arg.Code                             // simple assign
	out.Name = arg.Name                             // simple assign
	out.Description = arg.Description               // simple assign
	out.DescHTML = arg.DescHTML                     // simple assign
	out.ShortDesc = arg.ShortDesc                   // simple assign
	out.ImageURLs = arg.ImageURLs                   // simple assign
	out.Note = arg.Note                             // simple assign
	out.Tags = arg.Tags                             // simple assign
	out.Unit = arg.Unit                             // simple assign
	out.CategoryID = arg.CategoryID                 // simple assign
	out.CostPrice = arg.CostPrice                   // simple assign
	out.ListPrice = arg.ListPrice                   // simple assign
	out.RetailPrice = arg.RetailPrice               // simple assign
	out.BrandID = arg.BrandID                       // simple assign
	out.Status = arg.Status                         // simple assign
	out.CreatedAt = arg.CreatedAt                   // simple assign
	out.UpdatedAt = arg.UpdatedAt                   // simple assign
	out.ProductType = arg.ProductType               // simple assign
	out.MetaFields = Convert_catalogmodel_MetaFields_shopproductmodel_MetaFields(arg.MetaFields)
	out.Rid = arg.Rid // simple assign
}

func Convert_catalogmodel_ShopProducts_shopproductmodel_ShopProducts(args []*catalogmodel.ShopProduct) (outs []*shopproductmodel.ShopProduct) {
	tmps := make([]shopproductmodel.ShopProduct, len(args))
	outs = make([]*shopproductmodel.ShopProduct, len(args))
	for i := range tmps {
		outs[i] = Convert_catalogmodel_ShopProduct_shopproductmodel_ShopProduct(args[i], &tmps[i])
	}
	return outs
}
