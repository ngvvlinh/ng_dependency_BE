// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "etop.vn/backend/pkg/common/sql/cmsql"
	migration "etop.vn/backend/pkg/common/sql/migration"
	core "etop.vn/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type ShopVariants []*ShopVariant

const __sqlShopVariant_Table = "shop_variant"
const __sqlShopVariant_ListCols = "\"shop_id\",\"variant_id\",\"product_id\",\"code\",\"name\",\"description\",\"desc_html\",\"short_desc\",\"image_urls\",\"note\",\"tags\",\"cost_price\",\"list_price\",\"retail_price\",\"status\",\"attributes\",\"created_at\",\"updated_at\",\"rid\""
const __sqlShopVariant_ListColsOnConflict = "\"shop_id\" = EXCLUDED.\"shop_id\",\"variant_id\" = EXCLUDED.\"variant_id\",\"product_id\" = EXCLUDED.\"product_id\",\"code\" = EXCLUDED.\"code\",\"name\" = EXCLUDED.\"name\",\"description\" = EXCLUDED.\"description\",\"desc_html\" = EXCLUDED.\"desc_html\",\"short_desc\" = EXCLUDED.\"short_desc\",\"image_urls\" = EXCLUDED.\"image_urls\",\"note\" = EXCLUDED.\"note\",\"tags\" = EXCLUDED.\"tags\",\"cost_price\" = EXCLUDED.\"cost_price\",\"list_price\" = EXCLUDED.\"list_price\",\"retail_price\" = EXCLUDED.\"retail_price\",\"status\" = EXCLUDED.\"status\",\"attributes\" = EXCLUDED.\"attributes\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"rid\" = EXCLUDED.\"rid\""
const __sqlShopVariant_Insert = "INSERT INTO \"shop_variant\" (" + __sqlShopVariant_ListCols + ") VALUES"
const __sqlShopVariant_Select = "SELECT " + __sqlShopVariant_ListCols + " FROM \"shop_variant\""
const __sqlShopVariant_Select_history = "SELECT " + __sqlShopVariant_ListCols + " FROM history.\"shop_variant\""
const __sqlShopVariant_UpdateAll = "UPDATE \"shop_variant\" SET (" + __sqlShopVariant_ListCols + ")"
const __sqlShopVariant_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT shop_variant_pkey DO UPDATE SET"

func (m *ShopVariant) SQLTableName() string  { return "shop_variant" }
func (m *ShopVariants) SQLTableName() string { return "shop_variant" }
func (m *ShopVariant) SQLListCols() string   { return __sqlShopVariant_ListCols }

func (m *ShopVariant) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlShopVariant_ListCols + " FROM \"shop_variant\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *ShopVariant) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "shop_variant"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"shop_id": {
			ColumnName:       "shop_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"variant_id": {
			ColumnName:       "variant_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"product_id": {
			ColumnName:       "product_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"code": {
			ColumnName:       "code",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"name": {
			ColumnName:       "name",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"description": {
			ColumnName:       "description",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"desc_html": {
			ColumnName:       "desc_html",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"short_desc": {
			ColumnName:       "short_desc",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"image_urls": {
			ColumnName:       "image_urls",
			ColumnType:       "[]string",
			ColumnDBType:     "[]string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"note": {
			ColumnName:       "note",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"tags": {
			ColumnName:       "tags",
			ColumnType:       "[]string",
			ColumnDBType:     "[]string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"cost_price": {
			ColumnName:       "cost_price",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"list_price": {
			ColumnName:       "list_price",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"retail_price": {
			ColumnName:       "retail_price",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"status": {
			ColumnName:       "status",
			ColumnType:       "status3.Status",
			ColumnDBType:     "enum",
			ColumnTag:        "int2",
			ColumnEnumValues: []string{"Z", "P", "N"},
		},
		"attributes": {
			ColumnName:       "attributes",
			ColumnType:       "ProductAttributes",
			ColumnDBType:     "[]*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"rid": {
			ColumnName:       "rid",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "shop_variant", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*ShopVariant)(nil))
}

func (m *ShopVariant) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		m.ShopID,
		m.VariantID,
		m.ProductID,
		core.String(m.Code),
		core.String(m.Name),
		core.String(m.Description),
		core.String(m.DescHTML),
		core.String(m.ShortDesc),
		core.Array{m.ImageURLs, opts},
		core.String(m.Note),
		core.Array{m.Tags, opts},
		core.Int(m.CostPrice),
		core.Int(m.ListPrice),
		core.Int(m.RetailPrice),
		m.Status,
		core.JSON{m.Attributes},
		core.Time(m.CreatedAt),
		core.Time(m.UpdatedAt),
		m.Rid,
	}
}

func (m *ShopVariant) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ShopID,
		&m.VariantID,
		&m.ProductID,
		(*core.String)(&m.Code),
		(*core.String)(&m.Name),
		(*core.String)(&m.Description),
		(*core.String)(&m.DescHTML),
		(*core.String)(&m.ShortDesc),
		core.Array{&m.ImageURLs, opts},
		(*core.String)(&m.Note),
		core.Array{&m.Tags, opts},
		(*core.Int)(&m.CostPrice),
		(*core.Int)(&m.ListPrice),
		(*core.Int)(&m.RetailPrice),
		&m.Status,
		core.JSON{&m.Attributes},
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		&m.Rid,
	}
}

func (m *ShopVariant) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopVariants) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopVariants, 0, 128)
	for rows.Next() {
		m := new(ShopVariant)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopVariant) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Select)
	return nil
}

func (_ *ShopVariants) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Select)
	return nil
}

func (m *ShopVariant) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(19)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopVariants) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(19)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopVariant) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlShopVariant_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopVariant_ListColsOnConflict)
	return nil
}

func (ms ShopVariants) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlShopVariant_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopVariant_ListColsOnConflict)
	return nil
}

func (m *ShopVariant) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_variant")
	w.WriteRawString(" SET ")
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.VariantID != 0 {
		flag = true
		w.WriteName("variant_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.VariantID)
	}
	if m.ProductID != 0 {
		flag = true
		w.WriteName("product_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ProductID)
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if m.DescHTML != "" {
		flag = true
		w.WriteName("desc_html")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.DescHTML)
	}
	if m.ShortDesc != "" {
		flag = true
		w.WriteName("short_desc")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShortDesc)
	}
	if m.ImageURLs != nil {
		flag = true
		w.WriteName("image_urls")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.ImageURLs, opts})
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if m.Tags != nil {
		flag = true
		w.WriteName("tags")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.Tags, opts})
	}
	if m.CostPrice != 0 {
		flag = true
		w.WriteName("cost_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CostPrice)
	}
	if m.ListPrice != 0 {
		flag = true
		w.WriteName("list_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ListPrice)
	}
	if m.RetailPrice != 0 {
		flag = true
		w.WriteName("retail_price")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.RetailPrice)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if m.Attributes != nil {
		flag = true
		w.WriteName("attributes")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.Attributes})
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UpdatedAt)
	}
	if m.Rid != 0 {
		flag = true
		w.WriteName("rid")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Rid)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopVariant) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(19)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopVariantHistory map[string]interface{}
type ShopVariantHistories []map[string]interface{}

func (m *ShopVariantHistory) SQLTableName() string  { return "history.\"shop_variant\"" }
func (m ShopVariantHistories) SQLTableName() string { return "history.\"shop_variant\"" }

func (m *ShopVariantHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Select_history)
	return nil
}

func (m ShopVariantHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopVariant_Select_history)
	return nil
}

func (m ShopVariantHistory) ShopID() core.Interface      { return core.Interface{m["shop_id"]} }
func (m ShopVariantHistory) VariantID() core.Interface   { return core.Interface{m["variant_id"]} }
func (m ShopVariantHistory) ProductID() core.Interface   { return core.Interface{m["product_id"]} }
func (m ShopVariantHistory) Code() core.Interface        { return core.Interface{m["code"]} }
func (m ShopVariantHistory) Name() core.Interface        { return core.Interface{m["name"]} }
func (m ShopVariantHistory) Description() core.Interface { return core.Interface{m["description"]} }
func (m ShopVariantHistory) DescHTML() core.Interface    { return core.Interface{m["desc_html"]} }
func (m ShopVariantHistory) ShortDesc() core.Interface   { return core.Interface{m["short_desc"]} }
func (m ShopVariantHistory) ImageURLs() core.Interface   { return core.Interface{m["image_urls"]} }
func (m ShopVariantHistory) Note() core.Interface        { return core.Interface{m["note"]} }
func (m ShopVariantHistory) Tags() core.Interface        { return core.Interface{m["tags"]} }
func (m ShopVariantHistory) CostPrice() core.Interface   { return core.Interface{m["cost_price"]} }
func (m ShopVariantHistory) ListPrice() core.Interface   { return core.Interface{m["list_price"]} }
func (m ShopVariantHistory) RetailPrice() core.Interface { return core.Interface{m["retail_price"]} }
func (m ShopVariantHistory) Status() core.Interface      { return core.Interface{m["status"]} }
func (m ShopVariantHistory) Attributes() core.Interface  { return core.Interface{m["attributes"]} }
func (m ShopVariantHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m ShopVariantHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }
func (m ShopVariantHistory) Rid() core.Interface         { return core.Interface{m["rid"]} }

func (m *ShopVariantHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 19)
	args := make([]interface{}, 19)
	for i := 0; i < 19; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopVariantHistory, 19)
	res["shop_id"] = data[0]
	res["variant_id"] = data[1]
	res["product_id"] = data[2]
	res["code"] = data[3]
	res["name"] = data[4]
	res["description"] = data[5]
	res["desc_html"] = data[6]
	res["short_desc"] = data[7]
	res["image_urls"] = data[8]
	res["note"] = data[9]
	res["tags"] = data[10]
	res["cost_price"] = data[11]
	res["list_price"] = data[12]
	res["retail_price"] = data[13]
	res["status"] = data[14]
	res["attributes"] = data[15]
	res["created_at"] = data[16]
	res["updated_at"] = data[17]
	res["rid"] = data[18]
	*m = res
	return nil
}

func (ms *ShopVariantHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 19)
	args := make([]interface{}, 19)
	for i := 0; i < 19; i++ {
		args[i] = &data[i]
	}
	res := make(ShopVariantHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopVariantHistory)
		m["shop_id"] = data[0]
		m["variant_id"] = data[1]
		m["product_id"] = data[2]
		m["code"] = data[3]
		m["name"] = data[4]
		m["description"] = data[5]
		m["desc_html"] = data[6]
		m["short_desc"] = data[7]
		m["image_urls"] = data[8]
		m["note"] = data[9]
		m["tags"] = data[10]
		m["cost_price"] = data[11]
		m["list_price"] = data[12]
		m["retail_price"] = data[13]
		m["status"] = data[14]
		m["attributes"] = data[15]
		m["created_at"] = data[16]
		m["updated_at"] = data[17]
		m["rid"] = data[18]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
