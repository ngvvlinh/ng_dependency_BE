// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	catalogmodel "o.o/backend/com/main/catalog/model"
	conversion "o.o/backend/pkg/common/conversion"
	shopvariantmodel "o.o/backend/zexp/etl/main/shopvariant/model"
)

/*
Custom conversions: (none)

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*shopvariantmodel.ProductAttribute)(nil), (*catalogmodel.ProductAttribute)(nil), func(arg, out interface{}) error {
		Convert_shopvariantmodel_ProductAttribute_catalogmodel_ProductAttribute(arg.(*shopvariantmodel.ProductAttribute), out.(*catalogmodel.ProductAttribute))
		return nil
	})
	s.Register(([]*shopvariantmodel.ProductAttribute)(nil), (*[]*catalogmodel.ProductAttribute)(nil), func(arg, out interface{}) error {
		out0 := Convert_shopvariantmodel_ProductAttributes_catalogmodel_ProductAttributes(arg.([]*shopvariantmodel.ProductAttribute))
		*out.(*[]*catalogmodel.ProductAttribute) = out0
		return nil
	})
	s.Register((*catalogmodel.ProductAttribute)(nil), (*shopvariantmodel.ProductAttribute)(nil), func(arg, out interface{}) error {
		Convert_catalogmodel_ProductAttribute_shopvariantmodel_ProductAttribute(arg.(*catalogmodel.ProductAttribute), out.(*shopvariantmodel.ProductAttribute))
		return nil
	})
	s.Register(([]*catalogmodel.ProductAttribute)(nil), (*[]*shopvariantmodel.ProductAttribute)(nil), func(arg, out interface{}) error {
		out0 := Convert_catalogmodel_ProductAttributes_shopvariantmodel_ProductAttributes(arg.([]*catalogmodel.ProductAttribute))
		*out.(*[]*shopvariantmodel.ProductAttribute) = out0
		return nil
	})
	s.Register((*shopvariantmodel.ShopVariant)(nil), (*catalogmodel.ShopVariant)(nil), func(arg, out interface{}) error {
		Convert_shopvariantmodel_ShopVariant_catalogmodel_ShopVariant(arg.(*shopvariantmodel.ShopVariant), out.(*catalogmodel.ShopVariant))
		return nil
	})
	s.Register(([]*shopvariantmodel.ShopVariant)(nil), (*[]*catalogmodel.ShopVariant)(nil), func(arg, out interface{}) error {
		out0 := Convert_shopvariantmodel_ShopVariants_catalogmodel_ShopVariants(arg.([]*shopvariantmodel.ShopVariant))
		*out.(*[]*catalogmodel.ShopVariant) = out0
		return nil
	})
	s.Register((*catalogmodel.ShopVariant)(nil), (*shopvariantmodel.ShopVariant)(nil), func(arg, out interface{}) error {
		Convert_catalogmodel_ShopVariant_shopvariantmodel_ShopVariant(arg.(*catalogmodel.ShopVariant), out.(*shopvariantmodel.ShopVariant))
		return nil
	})
	s.Register(([]*catalogmodel.ShopVariant)(nil), (*[]*shopvariantmodel.ShopVariant)(nil), func(arg, out interface{}) error {
		out0 := Convert_catalogmodel_ShopVariants_shopvariantmodel_ShopVariants(arg.([]*catalogmodel.ShopVariant))
		*out.(*[]*shopvariantmodel.ShopVariant) = out0
		return nil
	})
}

//-- convert o.o/backend/com/main/catalog/model.ProductAttribute --//

func Convert_shopvariantmodel_ProductAttribute_catalogmodel_ProductAttribute(arg *shopvariantmodel.ProductAttribute, out *catalogmodel.ProductAttribute) *catalogmodel.ProductAttribute {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &catalogmodel.ProductAttribute{}
	}
	convert_shopvariantmodel_ProductAttribute_catalogmodel_ProductAttribute(arg, out)
	return out
}

func convert_shopvariantmodel_ProductAttribute_catalogmodel_ProductAttribute(arg *shopvariantmodel.ProductAttribute, out *catalogmodel.ProductAttribute) {
	out.Name = arg.Name   // simple assign
	out.Value = arg.Value // simple assign
}

func Convert_shopvariantmodel_ProductAttributes_catalogmodel_ProductAttributes(args []*shopvariantmodel.ProductAttribute) (outs []*catalogmodel.ProductAttribute) {
	if args == nil {
		return nil
	}
	tmps := make([]catalogmodel.ProductAttribute, len(args))
	outs = make([]*catalogmodel.ProductAttribute, len(args))
	for i := range tmps {
		outs[i] = Convert_shopvariantmodel_ProductAttribute_catalogmodel_ProductAttribute(args[i], &tmps[i])
	}
	return outs
}

func Convert_catalogmodel_ProductAttribute_shopvariantmodel_ProductAttribute(arg *catalogmodel.ProductAttribute, out *shopvariantmodel.ProductAttribute) *shopvariantmodel.ProductAttribute {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &shopvariantmodel.ProductAttribute{}
	}
	convert_catalogmodel_ProductAttribute_shopvariantmodel_ProductAttribute(arg, out)
	return out
}

func convert_catalogmodel_ProductAttribute_shopvariantmodel_ProductAttribute(arg *catalogmodel.ProductAttribute, out *shopvariantmodel.ProductAttribute) {
	out.Name = arg.Name   // simple assign
	out.Value = arg.Value // simple assign
}

func Convert_catalogmodel_ProductAttributes_shopvariantmodel_ProductAttributes(args []*catalogmodel.ProductAttribute) (outs []*shopvariantmodel.ProductAttribute) {
	if args == nil {
		return nil
	}
	tmps := make([]shopvariantmodel.ProductAttribute, len(args))
	outs = make([]*shopvariantmodel.ProductAttribute, len(args))
	for i := range tmps {
		outs[i] = Convert_catalogmodel_ProductAttribute_shopvariantmodel_ProductAttribute(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/backend/com/main/catalog/model.ShopVariant --//

func Convert_shopvariantmodel_ShopVariant_catalogmodel_ShopVariant(arg *shopvariantmodel.ShopVariant, out *catalogmodel.ShopVariant) *catalogmodel.ShopVariant {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &catalogmodel.ShopVariant{}
	}
	convert_shopvariantmodel_ShopVariant_catalogmodel_ShopVariant(arg, out)
	return out
}

func convert_shopvariantmodel_ShopVariant_catalogmodel_ShopVariant(arg *shopvariantmodel.ShopVariant, out *catalogmodel.ShopVariant) {
	out.ExternalID = ""               // zero value
	out.ExternalCode = ""             // zero value
	out.ExternalProductID = ""        // zero value
	out.PartnerID = 0                 // zero value
	out.ShopID = arg.ShopID           // simple assign
	out.VariantID = arg.VariantID     // simple assign
	out.ProductID = arg.ProductID     // simple assign
	out.Code = arg.Code               // simple assign
	out.CodeNorm = 0                  // zero value
	out.Name = arg.Name               // simple assign
	out.Description = arg.Description // simple assign
	out.DescHTML = arg.DescHTML       // simple assign
	out.ShortDesc = arg.ShortDesc     // simple assign
	out.ImageURLs = arg.ImageURLs     // simple assign
	out.Note = arg.Note               // simple assign
	out.Tags = arg.Tags               // simple assign
	out.CostPrice = arg.CostPrice     // simple assign
	out.ListPrice = arg.ListPrice     // simple assign
	out.RetailPrice = arg.RetailPrice // simple assign
	out.Status = arg.Status           // simple assign
	out.Attributes = Convert_shopvariantmodel_ProductAttributes_catalogmodel_ProductAttributes(arg.Attributes)
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
	out.DeletedAt = time.Time{}   // zero value
	out.NameNorm = ""             // zero value
	out.AttrNormKv = ""           // zero value
	out.Rid = arg.Rid             // simple assign
}

func Convert_shopvariantmodel_ShopVariants_catalogmodel_ShopVariants(args []*shopvariantmodel.ShopVariant) (outs []*catalogmodel.ShopVariant) {
	if args == nil {
		return nil
	}
	tmps := make([]catalogmodel.ShopVariant, len(args))
	outs = make([]*catalogmodel.ShopVariant, len(args))
	for i := range tmps {
		outs[i] = Convert_shopvariantmodel_ShopVariant_catalogmodel_ShopVariant(args[i], &tmps[i])
	}
	return outs
}

func Convert_catalogmodel_ShopVariant_shopvariantmodel_ShopVariant(arg *catalogmodel.ShopVariant, out *shopvariantmodel.ShopVariant) *shopvariantmodel.ShopVariant {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &shopvariantmodel.ShopVariant{}
	}
	convert_catalogmodel_ShopVariant_shopvariantmodel_ShopVariant(arg, out)
	return out
}

func convert_catalogmodel_ShopVariant_shopvariantmodel_ShopVariant(arg *catalogmodel.ShopVariant, out *shopvariantmodel.ShopVariant) {
	out.ShopID = arg.ShopID           // simple assign
	out.VariantID = arg.VariantID     // simple assign
	out.ProductID = arg.ProductID     // simple assign
	out.Code = arg.Code               // simple assign
	out.Name = arg.Name               // simple assign
	out.Description = arg.Description // simple assign
	out.DescHTML = arg.DescHTML       // simple assign
	out.ShortDesc = arg.ShortDesc     // simple assign
	out.ImageURLs = arg.ImageURLs     // simple assign
	out.Note = arg.Note               // simple assign
	out.Tags = arg.Tags               // simple assign
	out.CostPrice = arg.CostPrice     // simple assign
	out.ListPrice = arg.ListPrice     // simple assign
	out.RetailPrice = arg.RetailPrice // simple assign
	out.Status = arg.Status           // simple assign
	out.Attributes = Convert_catalogmodel_ProductAttributes_shopvariantmodel_ProductAttributes(arg.Attributes)
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
	out.Rid = arg.Rid             // simple assign
}

func Convert_catalogmodel_ShopVariants_shopvariantmodel_ShopVariants(args []*catalogmodel.ShopVariant) (outs []*shopvariantmodel.ShopVariant) {
	if args == nil {
		return nil
	}
	tmps := make([]shopvariantmodel.ShopVariant, len(args))
	outs = make([]*shopvariantmodel.ShopVariant, len(args))
	for i := range tmps {
		outs[i] = Convert_catalogmodel_ShopVariant_shopvariantmodel_ShopVariant(args[i], &tmps[i])
	}
	return outs
}
