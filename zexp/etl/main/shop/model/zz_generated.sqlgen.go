// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type Shops []*Shop

const __sqlShop_Table = "shop"
const __sqlShop_ListCols = "\"id\",\"name\",\"owner_id\",\"address_id\",\"ship_to_address_id\",\"ship_from_address_id\",\"phone\",\"bank_account\",\"website_url\",\"image_url\",\"email\",\"code\",\"auto_create_ffm\",\"status\",\"created_at\",\"updated_at\",\"recognized_hosts\",\"ghn_note_code\",\"try_on\",\"company_info\",\"money_transaction_rrule\",\"survey_info\",\"rid\""
const __sqlShop_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"name\" = EXCLUDED.\"name\",\"owner_id\" = EXCLUDED.\"owner_id\",\"address_id\" = EXCLUDED.\"address_id\",\"ship_to_address_id\" = EXCLUDED.\"ship_to_address_id\",\"ship_from_address_id\" = EXCLUDED.\"ship_from_address_id\",\"phone\" = EXCLUDED.\"phone\",\"bank_account\" = EXCLUDED.\"bank_account\",\"website_url\" = EXCLUDED.\"website_url\",\"image_url\" = EXCLUDED.\"image_url\",\"email\" = EXCLUDED.\"email\",\"code\" = EXCLUDED.\"code\",\"auto_create_ffm\" = EXCLUDED.\"auto_create_ffm\",\"status\" = EXCLUDED.\"status\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"recognized_hosts\" = EXCLUDED.\"recognized_hosts\",\"ghn_note_code\" = EXCLUDED.\"ghn_note_code\",\"try_on\" = EXCLUDED.\"try_on\",\"company_info\" = EXCLUDED.\"company_info\",\"money_transaction_rrule\" = EXCLUDED.\"money_transaction_rrule\",\"survey_info\" = EXCLUDED.\"survey_info\",\"rid\" = EXCLUDED.\"rid\""
const __sqlShop_Insert = "INSERT INTO \"shop\" (" + __sqlShop_ListCols + ") VALUES"
const __sqlShop_Select = "SELECT " + __sqlShop_ListCols + " FROM \"shop\""
const __sqlShop_Select_history = "SELECT " + __sqlShop_ListCols + " FROM history.\"shop\""
const __sqlShop_UpdateAll = "UPDATE \"shop\" SET (" + __sqlShop_ListCols + ")"
const __sqlShop_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT shop_pkey DO UPDATE SET"

func (m *Shop) SQLTableName() string  { return "shop" }
func (m *Shops) SQLTableName() string { return "shop" }
func (m *Shop) SQLListCols() string   { return __sqlShop_ListCols }

func (m *Shop) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlShop_ListCols + " FROM \"shop\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *Shop) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "shop"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"name": {
			ColumnName:       "name",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"owner_id": {
			ColumnName:       "owner_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"address_id": {
			ColumnName:       "address_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"ship_to_address_id": {
			ColumnName:       "ship_to_address_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"ship_from_address_id": {
			ColumnName:       "ship_from_address_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"phone": {
			ColumnName:       "phone",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"bank_account": {
			ColumnName:       "bank_account",
			ColumnType:       "*sharemodel.BankAccount",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"website_url": {
			ColumnName:       "website_url",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"image_url": {
			ColumnName:       "image_url",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"email": {
			ColumnName:       "email",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"code": {
			ColumnName:       "code",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"auto_create_ffm": {
			ColumnName:       "auto_create_ffm",
			ColumnType:       "bool",
			ColumnDBType:     "bool",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"status": {
			ColumnName:       "status",
			ColumnType:       "status3.Status",
			ColumnDBType:     "enum",
			ColumnTag:        "int2",
			ColumnEnumValues: []string{"Z", "P", "N"},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"recognized_hosts": {
			ColumnName:       "recognized_hosts",
			ColumnType:       "[]string",
			ColumnDBType:     "[]string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"ghn_note_code": {
			ColumnName:       "ghn_note_code",
			ColumnType:       "ghn_note_code.GHNNoteCode",
			ColumnDBType:     "enum",
			ColumnTag:        "enum(ghn_note_code)",
			ColumnEnumValues: []string{"unknown", "CHOTHUHANG", "CHOXEMHANGKHONGTHU", "KHONGCHOXEMHANG"},
		},
		"try_on": {
			ColumnName:       "try_on",
			ColumnType:       "try_on.TryOnCode",
			ColumnDBType:     "enum",
			ColumnTag:        "enum(try_on)",
			ColumnEnumValues: []string{"unknown", "none", "open", "try"},
		},
		"company_info": {
			ColumnName:       "company_info",
			ColumnType:       "*sharemodel.CompanyInfo",
			ColumnDBType:     "*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"money_transaction_rrule": {
			ColumnName:       "money_transaction_rrule",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"survey_info": {
			ColumnName:       "survey_info",
			ColumnType:       "[]*SurveyInfo",
			ColumnDBType:     "[]*struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"rid": {
			ColumnName:       "rid",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "shop", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*Shop)(nil))
}

func (m *Shop) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		m.ID,
		core.String(m.Name),
		m.OwnerID,
		m.AddressID,
		m.ShipToAddressID,
		m.ShipFromAddressID,
		core.String(m.Phone),
		core.JSON{m.BankAccount},
		core.String(m.WebsiteURL),
		core.String(m.ImageURL),
		core.String(m.Email),
		core.String(m.Code),
		core.Bool(m.AutoCreateFFM),
		m.Status,
		core.Time(m.CreatedAt),
		core.Time(m.UpdatedAt),
		core.Array{m.RecognizedHosts, opts},
		m.GhnNoteCode,
		m.TryOn,
		core.JSON{m.CompanyInfo},
		core.String(m.MoneyTransactionRRule),
		core.JSON{m.SurveyInfo},
		m.Rid,
	}
}

func (m *Shop) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		(*core.String)(&m.Name),
		&m.OwnerID,
		&m.AddressID,
		&m.ShipToAddressID,
		&m.ShipFromAddressID,
		(*core.String)(&m.Phone),
		core.JSON{&m.BankAccount},
		(*core.String)(&m.WebsiteURL),
		(*core.String)(&m.ImageURL),
		(*core.String)(&m.Email),
		(*core.String)(&m.Code),
		(*core.Bool)(&m.AutoCreateFFM),
		&m.Status,
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		core.Array{&m.RecognizedHosts, opts},
		&m.GhnNoteCode,
		&m.TryOn,
		core.JSON{&m.CompanyInfo},
		(*core.String)(&m.MoneyTransactionRRule),
		core.JSON{&m.SurveyInfo},
		&m.Rid,
	}
}

func (m *Shop) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *Shops) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(Shops, 0, 128)
	for rows.Next() {
		m := new(Shop)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *Shop) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShop_Select)
	return nil
}

func (_ *Shops) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShop_Select)
	return nil
}

func (m *Shop) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShop_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(23)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms Shops) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShop_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(23)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *Shop) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlShop_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShop_ListColsOnConflict)
	return nil
}

func (ms Shops) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlShop_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShop_ListColsOnConflict)
	return nil
}

func (m *Shop) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.Name != "" {
		flag = true
		w.WriteName("name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Name)
	}
	if m.OwnerID != 0 {
		flag = true
		w.WriteName("owner_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.OwnerID)
	}
	if m.AddressID != 0 {
		flag = true
		w.WriteName("address_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AddressID)
	}
	if m.ShipToAddressID != 0 {
		flag = true
		w.WriteName("ship_to_address_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShipToAddressID)
	}
	if m.ShipFromAddressID != 0 {
		flag = true
		w.WriteName("ship_from_address_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShipFromAddressID)
	}
	if m.Phone != "" {
		flag = true
		w.WriteName("phone")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Phone)
	}
	if m.BankAccount != nil {
		flag = true
		w.WriteName("bank_account")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.BankAccount})
	}
	if m.WebsiteURL != "" {
		flag = true
		w.WriteName("website_url")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.WebsiteURL)
	}
	if m.ImageURL != "" {
		flag = true
		w.WriteName("image_url")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ImageURL)
	}
	if m.Email != "" {
		flag = true
		w.WriteName("email")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Email)
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.AutoCreateFFM {
		flag = true
		w.WriteName("auto_create_ffm")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.AutoCreateFFM)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UpdatedAt)
	}
	if m.RecognizedHosts != nil {
		flag = true
		w.WriteName("recognized_hosts")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.Array{m.RecognizedHosts, opts})
	}
	if m.GhnNoteCode != 0 {
		flag = true
		w.WriteName("ghn_note_code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.GhnNoteCode)
	}
	if m.TryOn != 0 {
		flag = true
		w.WriteName("try_on")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TryOn)
	}
	if m.CompanyInfo != nil {
		flag = true
		w.WriteName("company_info")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.CompanyInfo})
	}
	if m.MoneyTransactionRRule != "" {
		flag = true
		w.WriteName("money_transaction_rrule")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.MoneyTransactionRRule)
	}
	if m.SurveyInfo != nil {
		flag = true
		w.WriteName("survey_info")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.SurveyInfo})
	}
	if m.Rid != 0 {
		flag = true
		w.WriteName("rid")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Rid)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *Shop) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShop_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(23)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopHistory map[string]interface{}
type ShopHistories []map[string]interface{}

func (m *ShopHistory) SQLTableName() string  { return "history.\"shop\"" }
func (m ShopHistories) SQLTableName() string { return "history.\"shop\"" }

func (m *ShopHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShop_Select_history)
	return nil
}

func (m ShopHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShop_Select_history)
	return nil
}

func (m ShopHistory) ID() core.Interface              { return core.Interface{m["id"]} }
func (m ShopHistory) Name() core.Interface            { return core.Interface{m["name"]} }
func (m ShopHistory) OwnerID() core.Interface         { return core.Interface{m["owner_id"]} }
func (m ShopHistory) AddressID() core.Interface       { return core.Interface{m["address_id"]} }
func (m ShopHistory) ShipToAddressID() core.Interface { return core.Interface{m["ship_to_address_id"]} }
func (m ShopHistory) ShipFromAddressID() core.Interface {
	return core.Interface{m["ship_from_address_id"]}
}
func (m ShopHistory) Phone() core.Interface           { return core.Interface{m["phone"]} }
func (m ShopHistory) BankAccount() core.Interface     { return core.Interface{m["bank_account"]} }
func (m ShopHistory) WebsiteURL() core.Interface      { return core.Interface{m["website_url"]} }
func (m ShopHistory) ImageURL() core.Interface        { return core.Interface{m["image_url"]} }
func (m ShopHistory) Email() core.Interface           { return core.Interface{m["email"]} }
func (m ShopHistory) Code() core.Interface            { return core.Interface{m["code"]} }
func (m ShopHistory) AutoCreateFFM() core.Interface   { return core.Interface{m["auto_create_ffm"]} }
func (m ShopHistory) Status() core.Interface          { return core.Interface{m["status"]} }
func (m ShopHistory) CreatedAt() core.Interface       { return core.Interface{m["created_at"]} }
func (m ShopHistory) UpdatedAt() core.Interface       { return core.Interface{m["updated_at"]} }
func (m ShopHistory) RecognizedHosts() core.Interface { return core.Interface{m["recognized_hosts"]} }
func (m ShopHistory) GhnNoteCode() core.Interface     { return core.Interface{m["ghn_note_code"]} }
func (m ShopHistory) TryOn() core.Interface           { return core.Interface{m["try_on"]} }
func (m ShopHistory) CompanyInfo() core.Interface     { return core.Interface{m["company_info"]} }
func (m ShopHistory) MoneyTransactionRRule() core.Interface {
	return core.Interface{m["money_transaction_rrule"]}
}
func (m ShopHistory) SurveyInfo() core.Interface { return core.Interface{m["survey_info"]} }
func (m ShopHistory) Rid() core.Interface        { return core.Interface{m["rid"]} }

func (m *ShopHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 23)
	args := make([]interface{}, 23)
	for i := 0; i < 23; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopHistory, 23)
	res["id"] = data[0]
	res["name"] = data[1]
	res["owner_id"] = data[2]
	res["address_id"] = data[3]
	res["ship_to_address_id"] = data[4]
	res["ship_from_address_id"] = data[5]
	res["phone"] = data[6]
	res["bank_account"] = data[7]
	res["website_url"] = data[8]
	res["image_url"] = data[9]
	res["email"] = data[10]
	res["code"] = data[11]
	res["auto_create_ffm"] = data[12]
	res["status"] = data[13]
	res["created_at"] = data[14]
	res["updated_at"] = data[15]
	res["recognized_hosts"] = data[16]
	res["ghn_note_code"] = data[17]
	res["try_on"] = data[18]
	res["company_info"] = data[19]
	res["money_transaction_rrule"] = data[20]
	res["survey_info"] = data[21]
	res["rid"] = data[22]
	*m = res
	return nil
}

func (ms *ShopHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 23)
	args := make([]interface{}, 23)
	for i := 0; i < 23; i++ {
		args[i] = &data[i]
	}
	res := make(ShopHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopHistory)
		m["id"] = data[0]
		m["name"] = data[1]
		m["owner_id"] = data[2]
		m["address_id"] = data[3]
		m["ship_to_address_id"] = data[4]
		m["ship_from_address_id"] = data[5]
		m["phone"] = data[6]
		m["bank_account"] = data[7]
		m["website_url"] = data[8]
		m["image_url"] = data[9]
		m["email"] = data[10]
		m["code"] = data[11]
		m["auto_create_ffm"] = data[12]
		m["status"] = data[13]
		m["created_at"] = data[14]
		m["updated_at"] = data[15]
		m["recognized_hosts"] = data[16]
		m["ghn_note_code"] = data[17]
		m["try_on"] = data[18]
		m["company_info"] = data[19]
		m["money_transaction_rrule"] = data[20]
		m["survey_info"] = data[21]
		m["rid"] = data[22]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
