// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	inventorymodel "o.o/backend/com/main/inventory/model"
	conversion "o.o/backend/pkg/common/conversion"
	inventoryvouchermodel "o.o/backend/zexp/etl/main/inventoryvoucher/model"
)

/*
Custom conversions: (none)

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*inventoryvouchermodel.InventoryVoucher)(nil), (*inventorymodel.InventoryVoucher)(nil), func(arg, out interface{}) error {
		Convert_inventoryvouchermodel_InventoryVoucher_inventorymodel_InventoryVoucher(arg.(*inventoryvouchermodel.InventoryVoucher), out.(*inventorymodel.InventoryVoucher))
		return nil
	})
	s.Register(([]*inventoryvouchermodel.InventoryVoucher)(nil), (*[]*inventorymodel.InventoryVoucher)(nil), func(arg, out interface{}) error {
		out0 := Convert_inventoryvouchermodel_InventoryVouchers_inventorymodel_InventoryVouchers(arg.([]*inventoryvouchermodel.InventoryVoucher))
		*out.(*[]*inventorymodel.InventoryVoucher) = out0
		return nil
	})
	s.Register((*inventorymodel.InventoryVoucher)(nil), (*inventoryvouchermodel.InventoryVoucher)(nil), func(arg, out interface{}) error {
		Convert_inventorymodel_InventoryVoucher_inventoryvouchermodel_InventoryVoucher(arg.(*inventorymodel.InventoryVoucher), out.(*inventoryvouchermodel.InventoryVoucher))
		return nil
	})
	s.Register(([]*inventorymodel.InventoryVoucher)(nil), (*[]*inventoryvouchermodel.InventoryVoucher)(nil), func(arg, out interface{}) error {
		out0 := Convert_inventorymodel_InventoryVouchers_inventoryvouchermodel_InventoryVouchers(arg.([]*inventorymodel.InventoryVoucher))
		*out.(*[]*inventoryvouchermodel.InventoryVoucher) = out0
		return nil
	})
	s.Register((*inventoryvouchermodel.InventoryVoucherItem)(nil), (*inventorymodel.InventoryVoucherItem)(nil), func(arg, out interface{}) error {
		Convert_inventoryvouchermodel_InventoryVoucherItem_inventorymodel_InventoryVoucherItem(arg.(*inventoryvouchermodel.InventoryVoucherItem), out.(*inventorymodel.InventoryVoucherItem))
		return nil
	})
	s.Register(([]*inventoryvouchermodel.InventoryVoucherItem)(nil), (*[]*inventorymodel.InventoryVoucherItem)(nil), func(arg, out interface{}) error {
		out0 := Convert_inventoryvouchermodel_InventoryVoucherItems_inventorymodel_InventoryVoucherItems(arg.([]*inventoryvouchermodel.InventoryVoucherItem))
		*out.(*[]*inventorymodel.InventoryVoucherItem) = out0
		return nil
	})
	s.Register((*inventorymodel.InventoryVoucherItem)(nil), (*inventoryvouchermodel.InventoryVoucherItem)(nil), func(arg, out interface{}) error {
		Convert_inventorymodel_InventoryVoucherItem_inventoryvouchermodel_InventoryVoucherItem(arg.(*inventorymodel.InventoryVoucherItem), out.(*inventoryvouchermodel.InventoryVoucherItem))
		return nil
	})
	s.Register(([]*inventorymodel.InventoryVoucherItem)(nil), (*[]*inventoryvouchermodel.InventoryVoucherItem)(nil), func(arg, out interface{}) error {
		out0 := Convert_inventorymodel_InventoryVoucherItems_inventoryvouchermodel_InventoryVoucherItems(arg.([]*inventorymodel.InventoryVoucherItem))
		*out.(*[]*inventoryvouchermodel.InventoryVoucherItem) = out0
		return nil
	})
	s.Register((*inventoryvouchermodel.Trader)(nil), (*inventorymodel.Trader)(nil), func(arg, out interface{}) error {
		Convert_inventoryvouchermodel_Trader_inventorymodel_Trader(arg.(*inventoryvouchermodel.Trader), out.(*inventorymodel.Trader))
		return nil
	})
	s.Register(([]*inventoryvouchermodel.Trader)(nil), (*[]*inventorymodel.Trader)(nil), func(arg, out interface{}) error {
		out0 := Convert_inventoryvouchermodel_Traders_inventorymodel_Traders(arg.([]*inventoryvouchermodel.Trader))
		*out.(*[]*inventorymodel.Trader) = out0
		return nil
	})
	s.Register((*inventorymodel.Trader)(nil), (*inventoryvouchermodel.Trader)(nil), func(arg, out interface{}) error {
		Convert_inventorymodel_Trader_inventoryvouchermodel_Trader(arg.(*inventorymodel.Trader), out.(*inventoryvouchermodel.Trader))
		return nil
	})
	s.Register(([]*inventorymodel.Trader)(nil), (*[]*inventoryvouchermodel.Trader)(nil), func(arg, out interface{}) error {
		out0 := Convert_inventorymodel_Traders_inventoryvouchermodel_Traders(arg.([]*inventorymodel.Trader))
		*out.(*[]*inventoryvouchermodel.Trader) = out0
		return nil
	})
}

//-- convert o.o/backend/com/main/inventory/model.InventoryVoucher --//

func Convert_inventoryvouchermodel_InventoryVoucher_inventorymodel_InventoryVoucher(arg *inventoryvouchermodel.InventoryVoucher, out *inventorymodel.InventoryVoucher) *inventorymodel.InventoryVoucher {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &inventorymodel.InventoryVoucher{}
	}
	convert_inventoryvouchermodel_InventoryVoucher_inventorymodel_InventoryVoucher(arg, out)
	return out
}

func convert_inventoryvouchermodel_InventoryVoucher_inventorymodel_InventoryVoucher(arg *inventoryvouchermodel.InventoryVoucher, out *inventorymodel.InventoryVoucher) {
	out.ShopID = arg.ShopID       // simple assign
	out.ID = arg.ID               // simple assign
	out.CreatedBy = arg.CreatedBy // simple assign
	out.UpdatedBy = arg.UpdatedBy // simple assign
	out.Code = arg.Code           // simple assign
	out.CodeNorm = 0              // zero value
	out.Status = arg.Status       // simple assign
	out.TraderID = arg.TraderID   // simple assign
	out.Trader = Convert_inventoryvouchermodel_Trader_inventorymodel_Trader(arg.Trader, nil)
	out.TotalAmount = arg.TotalAmount // simple assign
	out.Type = arg.Type               // simple assign
	out.Lines = Convert_inventoryvouchermodel_InventoryVoucherItems_inventorymodel_InventoryVoucherItems(arg.Lines)
	out.VariantIDs = arg.VariantIDs     // simple assign
	out.RefID = arg.RefID               // simple assign
	out.RefCode = arg.RefCode           // simple assign
	out.RefType = arg.RefType           // simple assign
	out.Title = arg.Title               // simple assign
	out.CreatedAt = arg.CreatedAt       // simple assign
	out.UpdatedAt = arg.UpdatedAt       // simple assign
	out.ConfirmedAt = arg.ConfirmedAt   // simple assign
	out.CancelledAt = arg.CancelledAt   // simple assign
	out.CancelReason = arg.CancelReason // simple assign
	out.ProductIDs = arg.ProductIDs     // simple assign
	out.Rid = arg.Rid                   // simple assign
}

func Convert_inventoryvouchermodel_InventoryVouchers_inventorymodel_InventoryVouchers(args []*inventoryvouchermodel.InventoryVoucher) (outs []*inventorymodel.InventoryVoucher) {
	if args == nil {
		return nil
	}
	tmps := make([]inventorymodel.InventoryVoucher, len(args))
	outs = make([]*inventorymodel.InventoryVoucher, len(args))
	for i := range tmps {
		outs[i] = Convert_inventoryvouchermodel_InventoryVoucher_inventorymodel_InventoryVoucher(args[i], &tmps[i])
	}
	return outs
}

func Convert_inventorymodel_InventoryVoucher_inventoryvouchermodel_InventoryVoucher(arg *inventorymodel.InventoryVoucher, out *inventoryvouchermodel.InventoryVoucher) *inventoryvouchermodel.InventoryVoucher {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &inventoryvouchermodel.InventoryVoucher{}
	}
	convert_inventorymodel_InventoryVoucher_inventoryvouchermodel_InventoryVoucher(arg, out)
	return out
}

func convert_inventorymodel_InventoryVoucher_inventoryvouchermodel_InventoryVoucher(arg *inventorymodel.InventoryVoucher, out *inventoryvouchermodel.InventoryVoucher) {
	out.ShopID = arg.ShopID       // simple assign
	out.ID = arg.ID               // simple assign
	out.CreatedBy = arg.CreatedBy // simple assign
	out.UpdatedBy = arg.UpdatedBy // simple assign
	out.Code = arg.Code           // simple assign
	out.Status = arg.Status       // simple assign
	out.TraderID = arg.TraderID   // simple assign
	out.Trader = Convert_inventorymodel_Trader_inventoryvouchermodel_Trader(arg.Trader, nil)
	out.TotalAmount = arg.TotalAmount // simple assign
	out.Type = arg.Type               // simple assign
	out.Lines = Convert_inventorymodel_InventoryVoucherItems_inventoryvouchermodel_InventoryVoucherItems(arg.Lines)
	out.VariantIDs = arg.VariantIDs     // simple assign
	out.RefID = arg.RefID               // simple assign
	out.RefCode = arg.RefCode           // simple assign
	out.RefType = arg.RefType           // simple assign
	out.Title = arg.Title               // simple assign
	out.CreatedAt = arg.CreatedAt       // simple assign
	out.UpdatedAt = arg.UpdatedAt       // simple assign
	out.ConfirmedAt = arg.ConfirmedAt   // simple assign
	out.CancelledAt = arg.CancelledAt   // simple assign
	out.CancelReason = arg.CancelReason // simple assign
	out.ProductIDs = arg.ProductIDs     // simple assign
	out.Rid = arg.Rid                   // simple assign
}

func Convert_inventorymodel_InventoryVouchers_inventoryvouchermodel_InventoryVouchers(args []*inventorymodel.InventoryVoucher) (outs []*inventoryvouchermodel.InventoryVoucher) {
	if args == nil {
		return nil
	}
	tmps := make([]inventoryvouchermodel.InventoryVoucher, len(args))
	outs = make([]*inventoryvouchermodel.InventoryVoucher, len(args))
	for i := range tmps {
		outs[i] = Convert_inventorymodel_InventoryVoucher_inventoryvouchermodel_InventoryVoucher(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/backend/com/main/inventory/model.InventoryVoucherItem --//

func Convert_inventoryvouchermodel_InventoryVoucherItem_inventorymodel_InventoryVoucherItem(arg *inventoryvouchermodel.InventoryVoucherItem, out *inventorymodel.InventoryVoucherItem) *inventorymodel.InventoryVoucherItem {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &inventorymodel.InventoryVoucherItem{}
	}
	convert_inventoryvouchermodel_InventoryVoucherItem_inventorymodel_InventoryVoucherItem(arg, out)
	return out
}

func convert_inventoryvouchermodel_InventoryVoucherItem_inventorymodel_InventoryVoucherItem(arg *inventoryvouchermodel.InventoryVoucherItem, out *inventorymodel.InventoryVoucherItem) {
	out.ProductName = arg.ProductName // simple assign
	out.ProductID = arg.ProductID     // simple assign
	out.VariantID = arg.VariantID     // simple assign
	out.VariantName = arg.VariantName // simple assign
	out.Price = arg.Price             // simple assign
	out.Quantity = arg.Quantity       // simple assign
	out.Code = arg.Code               // simple assign
	out.ImageURL = arg.ImageURL       // simple assign
	out.Attributes = arg.Attributes   // simple assign
}

func Convert_inventoryvouchermodel_InventoryVoucherItems_inventorymodel_InventoryVoucherItems(args []*inventoryvouchermodel.InventoryVoucherItem) (outs []*inventorymodel.InventoryVoucherItem) {
	if args == nil {
		return nil
	}
	tmps := make([]inventorymodel.InventoryVoucherItem, len(args))
	outs = make([]*inventorymodel.InventoryVoucherItem, len(args))
	for i := range tmps {
		outs[i] = Convert_inventoryvouchermodel_InventoryVoucherItem_inventorymodel_InventoryVoucherItem(args[i], &tmps[i])
	}
	return outs
}

func Convert_inventorymodel_InventoryVoucherItem_inventoryvouchermodel_InventoryVoucherItem(arg *inventorymodel.InventoryVoucherItem, out *inventoryvouchermodel.InventoryVoucherItem) *inventoryvouchermodel.InventoryVoucherItem {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &inventoryvouchermodel.InventoryVoucherItem{}
	}
	convert_inventorymodel_InventoryVoucherItem_inventoryvouchermodel_InventoryVoucherItem(arg, out)
	return out
}

func convert_inventorymodel_InventoryVoucherItem_inventoryvouchermodel_InventoryVoucherItem(arg *inventorymodel.InventoryVoucherItem, out *inventoryvouchermodel.InventoryVoucherItem) {
	out.ProductName = arg.ProductName // simple assign
	out.ProductID = arg.ProductID     // simple assign
	out.VariantID = arg.VariantID     // simple assign
	out.VariantName = arg.VariantName // simple assign
	out.Price = arg.Price             // simple assign
	out.Quantity = arg.Quantity       // simple assign
	out.Code = arg.Code               // simple assign
	out.ImageURL = arg.ImageURL       // simple assign
	out.Attributes = arg.Attributes   // simple assign
}

func Convert_inventorymodel_InventoryVoucherItems_inventoryvouchermodel_InventoryVoucherItems(args []*inventorymodel.InventoryVoucherItem) (outs []*inventoryvouchermodel.InventoryVoucherItem) {
	if args == nil {
		return nil
	}
	tmps := make([]inventoryvouchermodel.InventoryVoucherItem, len(args))
	outs = make([]*inventoryvouchermodel.InventoryVoucherItem, len(args))
	for i := range tmps {
		outs[i] = Convert_inventorymodel_InventoryVoucherItem_inventoryvouchermodel_InventoryVoucherItem(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/backend/com/main/inventory/model.Trader --//

func Convert_inventoryvouchermodel_Trader_inventorymodel_Trader(arg *inventoryvouchermodel.Trader, out *inventorymodel.Trader) *inventorymodel.Trader {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &inventorymodel.Trader{}
	}
	convert_inventoryvouchermodel_Trader_inventorymodel_Trader(arg, out)
	return out
}

func convert_inventoryvouchermodel_Trader_inventorymodel_Trader(arg *inventoryvouchermodel.Trader, out *inventorymodel.Trader) {
	out.ID = arg.ID             // simple assign
	out.Type = arg.Type         // simple assign
	out.FullName = arg.FullName // simple assign
	out.Phone = arg.Phone       // simple assign
}

func Convert_inventoryvouchermodel_Traders_inventorymodel_Traders(args []*inventoryvouchermodel.Trader) (outs []*inventorymodel.Trader) {
	if args == nil {
		return nil
	}
	tmps := make([]inventorymodel.Trader, len(args))
	outs = make([]*inventorymodel.Trader, len(args))
	for i := range tmps {
		outs[i] = Convert_inventoryvouchermodel_Trader_inventorymodel_Trader(args[i], &tmps[i])
	}
	return outs
}

func Convert_inventorymodel_Trader_inventoryvouchermodel_Trader(arg *inventorymodel.Trader, out *inventoryvouchermodel.Trader) *inventoryvouchermodel.Trader {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &inventoryvouchermodel.Trader{}
	}
	convert_inventorymodel_Trader_inventoryvouchermodel_Trader(arg, out)
	return out
}

func convert_inventorymodel_Trader_inventoryvouchermodel_Trader(arg *inventorymodel.Trader, out *inventoryvouchermodel.Trader) {
	out.ID = arg.ID             // simple assign
	out.Type = arg.Type         // simple assign
	out.FullName = arg.FullName // simple assign
	out.Phone = arg.Phone       // simple assign
}

func Convert_inventorymodel_Traders_inventoryvouchermodel_Traders(args []*inventorymodel.Trader) (outs []*inventoryvouchermodel.Trader) {
	if args == nil {
		return nil
	}
	tmps := make([]inventoryvouchermodel.Trader, len(args))
	outs = make([]*inventoryvouchermodel.Trader, len(args))
	for i := range tmps {
		outs[i] = Convert_inventorymodel_Trader_inventoryvouchermodel_Trader(args[i], &tmps[i])
	}
	return outs
}
