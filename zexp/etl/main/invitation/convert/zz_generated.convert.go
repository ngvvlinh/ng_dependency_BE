// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	invitationmodel "o.o/backend/com/main/invitation/model"
	conversion "o.o/backend/pkg/common/conversion"
	invitationmodel1 "o.o/backend/zexp/etl/main/invitation/model"
)

/*
Custom conversions: (none)

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*invitationmodel1.Invitation)(nil), (*invitationmodel.Invitation)(nil), func(arg, out interface{}) error {
		Convert_invitationmodel1_Invitation_invitationmodel_Invitation(arg.(*invitationmodel1.Invitation), out.(*invitationmodel.Invitation))
		return nil
	})
	s.Register(([]*invitationmodel1.Invitation)(nil), (*[]*invitationmodel.Invitation)(nil), func(arg, out interface{}) error {
		out0 := Convert_invitationmodel1_Invitations_invitationmodel_Invitations(arg.([]*invitationmodel1.Invitation))
		*out.(*[]*invitationmodel.Invitation) = out0
		return nil
	})
	s.Register((*invitationmodel.Invitation)(nil), (*invitationmodel1.Invitation)(nil), func(arg, out interface{}) error {
		Convert_invitationmodel_Invitation_invitationmodel1_Invitation(arg.(*invitationmodel.Invitation), out.(*invitationmodel1.Invitation))
		return nil
	})
	s.Register(([]*invitationmodel.Invitation)(nil), (*[]*invitationmodel1.Invitation)(nil), func(arg, out interface{}) error {
		out0 := Convert_invitationmodel_Invitations_invitationmodel1_Invitations(arg.([]*invitationmodel.Invitation))
		*out.(*[]*invitationmodel1.Invitation) = out0
		return nil
	})
}

//-- convert o.o/backend/com/main/invitation/model.Invitation --//

func Convert_invitationmodel1_Invitation_invitationmodel_Invitation(arg *invitationmodel1.Invitation, out *invitationmodel.Invitation) *invitationmodel.Invitation {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &invitationmodel.Invitation{}
	}
	convert_invitationmodel1_Invitation_invitationmodel_Invitation(arg, out)
	return out
}

func convert_invitationmodel1_Invitation_invitationmodel_Invitation(arg *invitationmodel1.Invitation, out *invitationmodel.Invitation) {
	out.ID = arg.ID                 // simple assign
	out.AccountID = arg.AccountID   // simple assign
	out.Email = arg.Email           // simple assign
	out.Phone = arg.Phone           // simple assign
	out.FullName = arg.FullName     // simple assign
	out.ShortName = arg.ShortName   // simple assign
	out.Roles = arg.Roles           // simple assign
	out.Token = arg.Token           // simple assign
	out.Status = arg.Status         // simple assign
	out.InvitedBy = arg.InvitedBy   // simple assign
	out.AcceptedAt = arg.AcceptedAt // simple assign
	out.RejectedAt = arg.RejectedAt // simple assign
	out.ExpiresAt = arg.ExpiresAt   // simple assign
	out.CreatedAt = arg.CreatedAt   // simple assign
	out.UpdatedAt = arg.UpdatedAt   // simple assign
	out.DeletedAt = time.Time{}     // zero value
	out.Rid = arg.Rid               // simple assign
}

func Convert_invitationmodel1_Invitations_invitationmodel_Invitations(args []*invitationmodel1.Invitation) (outs []*invitationmodel.Invitation) {
	if args == nil {
		return nil
	}
	tmps := make([]invitationmodel.Invitation, len(args))
	outs = make([]*invitationmodel.Invitation, len(args))
	for i := range tmps {
		outs[i] = Convert_invitationmodel1_Invitation_invitationmodel_Invitation(args[i], &tmps[i])
	}
	return outs
}

func Convert_invitationmodel_Invitation_invitationmodel1_Invitation(arg *invitationmodel.Invitation, out *invitationmodel1.Invitation) *invitationmodel1.Invitation {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &invitationmodel1.Invitation{}
	}
	convert_invitationmodel_Invitation_invitationmodel1_Invitation(arg, out)
	return out
}

func convert_invitationmodel_Invitation_invitationmodel1_Invitation(arg *invitationmodel.Invitation, out *invitationmodel1.Invitation) {
	out.ID = arg.ID                 // simple assign
	out.AccountID = arg.AccountID   // simple assign
	out.Email = arg.Email           // simple assign
	out.Phone = arg.Phone           // simple assign
	out.FullName = arg.FullName     // simple assign
	out.ShortName = arg.ShortName   // simple assign
	out.Roles = arg.Roles           // simple assign
	out.Token = arg.Token           // simple assign
	out.Status = arg.Status         // simple assign
	out.InvitedBy = arg.InvitedBy   // simple assign
	out.AcceptedAt = arg.AcceptedAt // simple assign
	out.RejectedAt = arg.RejectedAt // simple assign
	out.ExpiresAt = arg.ExpiresAt   // simple assign
	out.CreatedAt = arg.CreatedAt   // simple assign
	out.UpdatedAt = arg.UpdatedAt   // simple assign
	out.Rid = arg.Rid               // simple assign
}

func Convert_invitationmodel_Invitations_invitationmodel1_Invitations(args []*invitationmodel.Invitation) (outs []*invitationmodel1.Invitation) {
	if args == nil {
		return nil
	}
	tmps := make([]invitationmodel1.Invitation, len(args))
	outs = make([]*invitationmodel1.Invitation, len(args))
	for i := range tmps {
		outs[i] = Convert_invitationmodel_Invitation_invitationmodel1_Invitation(args[i], &tmps[i])
	}
	return outs
}
