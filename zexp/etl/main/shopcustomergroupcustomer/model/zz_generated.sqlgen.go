// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "etop.vn/backend/pkg/common/sql/cmsql"
	core "etop.vn/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type ShopCustomerGroupCustomers []*ShopCustomerGroupCustomer

const __sqlShopCustomerGroupCustomer_Table = "shop_customer_group_customer"
const __sqlShopCustomerGroupCustomer_ListCols = "\"group_id\",\"customer_id\",\"created_at\",\"updated_at\",\"rid\""
const __sqlShopCustomerGroupCustomer_ListColsOnConflict = "\"group_id\" = EXCLUDED.\"group_id\",\"customer_id\" = EXCLUDED.\"customer_id\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"rid\" = EXCLUDED.\"rid\""
const __sqlShopCustomerGroupCustomer_Insert = "INSERT INTO \"shop_customer_group_customer\" (" + __sqlShopCustomerGroupCustomer_ListCols + ") VALUES"
const __sqlShopCustomerGroupCustomer_Select = "SELECT " + __sqlShopCustomerGroupCustomer_ListCols + " FROM \"shop_customer_group_customer\""
const __sqlShopCustomerGroupCustomer_Select_history = "SELECT " + __sqlShopCustomerGroupCustomer_ListCols + " FROM history.\"shop_customer_group_customer\""
const __sqlShopCustomerGroupCustomer_UpdateAll = "UPDATE \"shop_customer_group_customer\" SET (" + __sqlShopCustomerGroupCustomer_ListCols + ")"
const __sqlShopCustomerGroupCustomer_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT shop_customer_group_customer_pkey DO UPDATE SET"

func (m *ShopCustomerGroupCustomer) SQLTableName() string  { return "shop_customer_group_customer" }
func (m *ShopCustomerGroupCustomers) SQLTableName() string { return "shop_customer_group_customer" }
func (m *ShopCustomerGroupCustomer) SQLListCols() string {
	return __sqlShopCustomerGroupCustomer_ListCols
}

func (m *ShopCustomerGroupCustomer) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlShopCustomerGroupCustomer_ListCols + " FROM \"shop_customer_group_customer\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*ShopCustomerGroupCustomer)(nil))
}

func (m *ShopCustomerGroupCustomer) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		m.GroupID,
		m.CustomerID,
		core.Time(m.CreatedAt),
		core.Time(m.UpdatedAt),
		m.Rid,
	}
}

func (m *ShopCustomerGroupCustomer) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.GroupID,
		&m.CustomerID,
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		&m.Rid,
	}
}

func (m *ShopCustomerGroupCustomer) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopCustomerGroupCustomers) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopCustomerGroupCustomers, 0, 128)
	for rows.Next() {
		m := new(ShopCustomerGroupCustomer)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopCustomerGroupCustomer) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_Select)
	return nil
}

func (_ *ShopCustomerGroupCustomers) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_Select)
	return nil
}

func (m *ShopCustomerGroupCustomer) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(5)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopCustomerGroupCustomers) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(5)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopCustomerGroupCustomer) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_ListColsOnConflict)
	return nil
}

func (ms ShopCustomerGroupCustomers) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_ListColsOnConflict)
	return nil
}

func (m *ShopCustomerGroupCustomer) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_customer_group_customer")
	w.WriteRawString(" SET ")
	if m.GroupID != 0 {
		flag = true
		w.WriteName("group_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.GroupID)
	}
	if m.CustomerID != 0 {
		flag = true
		w.WriteName("customer_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CustomerID)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UpdatedAt)
	}
	if m.Rid != 0 {
		flag = true
		w.WriteName("rid")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Rid)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopCustomerGroupCustomer) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(5)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopCustomerGroupCustomerHistory map[string]interface{}
type ShopCustomerGroupCustomerHistories []map[string]interface{}

func (m *ShopCustomerGroupCustomerHistory) SQLTableName() string {
	return "history.\"shop_customer_group_customer\""
}
func (m ShopCustomerGroupCustomerHistories) SQLTableName() string {
	return "history.\"shop_customer_group_customer\""
}

func (m *ShopCustomerGroupCustomerHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_Select_history)
	return nil
}

func (m ShopCustomerGroupCustomerHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopCustomerGroupCustomer_Select_history)
	return nil
}

func (m ShopCustomerGroupCustomerHistory) GroupID() core.Interface {
	return core.Interface{m["group_id"]}
}
func (m ShopCustomerGroupCustomerHistory) CustomerID() core.Interface {
	return core.Interface{m["customer_id"]}
}
func (m ShopCustomerGroupCustomerHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m ShopCustomerGroupCustomerHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}
func (m ShopCustomerGroupCustomerHistory) Rid() core.Interface { return core.Interface{m["rid"]} }

func (m *ShopCustomerGroupCustomerHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 5)
	args := make([]interface{}, 5)
	for i := 0; i < 5; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopCustomerGroupCustomerHistory, 5)
	res["group_id"] = data[0]
	res["customer_id"] = data[1]
	res["created_at"] = data[2]
	res["updated_at"] = data[3]
	res["rid"] = data[4]
	*m = res
	return nil
}

func (ms *ShopCustomerGroupCustomerHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 5)
	args := make([]interface{}, 5)
	for i := 0; i < 5; i++ {
		args[i] = &data[i]
	}
	res := make(ShopCustomerGroupCustomerHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopCustomerGroupCustomerHistory)
		m["group_id"] = data[0]
		m["customer_id"] = data[1]
		m["created_at"] = data[2]
		m["updated_at"] = data[3]
		m["rid"] = data[4]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
