// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	refundmodel "o.o/backend/com/main/refund/model"
	conversion "o.o/backend/pkg/common/conversion"
	refundmodel1 "o.o/backend/zexp/etl/main/refund/model"
)

/*
Custom conversions: (none)

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*refundmodel1.Refund)(nil), (*refundmodel.Refund)(nil), func(arg, out interface{}) error {
		Convert_refundmodel1_Refund_refundmodel_Refund(arg.(*refundmodel1.Refund), out.(*refundmodel.Refund))
		return nil
	})
	s.Register(([]*refundmodel1.Refund)(nil), (*[]*refundmodel.Refund)(nil), func(arg, out interface{}) error {
		out0 := Convert_refundmodel1_Refunds_refundmodel_Refunds(arg.([]*refundmodel1.Refund))
		*out.(*[]*refundmodel.Refund) = out0
		return nil
	})
	s.Register((*refundmodel.Refund)(nil), (*refundmodel1.Refund)(nil), func(arg, out interface{}) error {
		Convert_refundmodel_Refund_refundmodel1_Refund(arg.(*refundmodel.Refund), out.(*refundmodel1.Refund))
		return nil
	})
	s.Register(([]*refundmodel.Refund)(nil), (*[]*refundmodel1.Refund)(nil), func(arg, out interface{}) error {
		out0 := Convert_refundmodel_Refunds_refundmodel1_Refunds(arg.([]*refundmodel.Refund))
		*out.(*[]*refundmodel1.Refund) = out0
		return nil
	})
	s.Register((*refundmodel1.RefundLine)(nil), (*refundmodel.RefundLine)(nil), func(arg, out interface{}) error {
		Convert_refundmodel1_RefundLine_refundmodel_RefundLine(arg.(*refundmodel1.RefundLine), out.(*refundmodel.RefundLine))
		return nil
	})
	s.Register(([]*refundmodel1.RefundLine)(nil), (*[]*refundmodel.RefundLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_refundmodel1_RefundLines_refundmodel_RefundLines(arg.([]*refundmodel1.RefundLine))
		*out.(*[]*refundmodel.RefundLine) = out0
		return nil
	})
	s.Register((*refundmodel.RefundLine)(nil), (*refundmodel1.RefundLine)(nil), func(arg, out interface{}) error {
		Convert_refundmodel_RefundLine_refundmodel1_RefundLine(arg.(*refundmodel.RefundLine), out.(*refundmodel1.RefundLine))
		return nil
	})
	s.Register(([]*refundmodel.RefundLine)(nil), (*[]*refundmodel1.RefundLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_refundmodel_RefundLines_refundmodel1_RefundLines(arg.([]*refundmodel.RefundLine))
		*out.(*[]*refundmodel1.RefundLine) = out0
		return nil
	})
}

//-- convert o.o/backend/com/main/refund/model.Refund --//

func Convert_refundmodel1_Refund_refundmodel_Refund(arg *refundmodel1.Refund, out *refundmodel.Refund) *refundmodel.Refund {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &refundmodel.Refund{}
	}
	convert_refundmodel1_Refund_refundmodel_Refund(arg, out)
	return out
}

func convert_refundmodel1_Refund_refundmodel_Refund(arg *refundmodel1.Refund, out *refundmodel.Refund) {
	out.ID = arg.ID             // simple assign
	out.ShopID = arg.ShopID     // simple assign
	out.OrderID = arg.OrderID   // simple assign
	out.Code = arg.Code         // simple assign
	out.CodeNorm = arg.CodeNorm // simple assign
	out.Note = arg.Note         // simple assign
	out.Lines = Convert_refundmodel1_RefundLines_refundmodel_RefundLines(arg.Lines)
	out.AdjustmentLines = arg.AdjustmentLines // simple assign
	out.TotalAdjustment = arg.TotalAdjustment // simple assign
	out.CreatedAt = arg.CreatedAt             // simple assign
	out.UpdatedAt = arg.UpdatedAt             // simple assign
	out.CancelledAt = arg.CancelledAt         // simple assign
	out.ConfirmedAt = arg.ConfirmedAt         // simple assign
	out.CreatedBy = arg.CreatedBy             // simple assign
	out.UpdatedBy = arg.UpdatedBy             // simple assign
	out.CancelReason = arg.CancelReason       // simple assign
	out.Status = arg.Status                   // simple assign
	out.CustomerID = arg.CustomerID           // simple assign
	out.TotalAmount = arg.TotalAmount         // simple assign
	out.BasketValue = arg.BasketValue         // simple assign
	out.Rid = arg.Rid                         // simple assign
}

func Convert_refundmodel1_Refunds_refundmodel_Refunds(args []*refundmodel1.Refund) (outs []*refundmodel.Refund) {
	if args == nil {
		return nil
	}
	tmps := make([]refundmodel.Refund, len(args))
	outs = make([]*refundmodel.Refund, len(args))
	for i := range tmps {
		outs[i] = Convert_refundmodel1_Refund_refundmodel_Refund(args[i], &tmps[i])
	}
	return outs
}

func Convert_refundmodel_Refund_refundmodel1_Refund(arg *refundmodel.Refund, out *refundmodel1.Refund) *refundmodel1.Refund {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &refundmodel1.Refund{}
	}
	convert_refundmodel_Refund_refundmodel1_Refund(arg, out)
	return out
}

func convert_refundmodel_Refund_refundmodel1_Refund(arg *refundmodel.Refund, out *refundmodel1.Refund) {
	out.ID = arg.ID             // simple assign
	out.ShopID = arg.ShopID     // simple assign
	out.OrderID = arg.OrderID   // simple assign
	out.Code = arg.Code         // simple assign
	out.CodeNorm = arg.CodeNorm // simple assign
	out.Note = arg.Note         // simple assign
	out.Lines = Convert_refundmodel_RefundLines_refundmodel1_RefundLines(arg.Lines)
	out.AdjustmentLines = arg.AdjustmentLines // simple assign
	out.TotalAdjustment = arg.TotalAdjustment // simple assign
	out.CreatedAt = arg.CreatedAt             // simple assign
	out.UpdatedAt = arg.UpdatedAt             // simple assign
	out.CancelledAt = arg.CancelledAt         // simple assign
	out.ConfirmedAt = arg.ConfirmedAt         // simple assign
	out.CreatedBy = arg.CreatedBy             // simple assign
	out.UpdatedBy = arg.UpdatedBy             // simple assign
	out.CancelReason = arg.CancelReason       // simple assign
	out.Status = arg.Status                   // simple assign
	out.CustomerID = arg.CustomerID           // simple assign
	out.TotalAmount = arg.TotalAmount         // simple assign
	out.BasketValue = arg.BasketValue         // simple assign
	out.Rid = arg.Rid                         // simple assign
}

func Convert_refundmodel_Refunds_refundmodel1_Refunds(args []*refundmodel.Refund) (outs []*refundmodel1.Refund) {
	if args == nil {
		return nil
	}
	tmps := make([]refundmodel1.Refund, len(args))
	outs = make([]*refundmodel1.Refund, len(args))
	for i := range tmps {
		outs[i] = Convert_refundmodel_Refund_refundmodel1_Refund(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/backend/com/main/refund/model.RefundLine --//

func Convert_refundmodel1_RefundLine_refundmodel_RefundLine(arg *refundmodel1.RefundLine, out *refundmodel.RefundLine) *refundmodel.RefundLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &refundmodel.RefundLine{}
	}
	convert_refundmodel1_RefundLine_refundmodel_RefundLine(arg, out)
	return out
}

func convert_refundmodel1_RefundLine_refundmodel_RefundLine(arg *refundmodel1.RefundLine, out *refundmodel.RefundLine) {
	out.VariantID = arg.VariantID     // simple assign
	out.Quantity = arg.Quantity       // simple assign
	out.Code = arg.Code               // simple assign
	out.ImageURL = arg.ImageURL       // simple assign
	out.ProductName = arg.ProductName // simple assign
	out.RetailPrice = arg.RetailPrice // simple assign
	out.ProductID = arg.ProductID     // simple assign
	out.Attributes = arg.Attributes   // simple assign
	out.Adjustment = arg.Adjustment   // simple assign
}

func Convert_refundmodel1_RefundLines_refundmodel_RefundLines(args []*refundmodel1.RefundLine) (outs []*refundmodel.RefundLine) {
	if args == nil {
		return nil
	}
	tmps := make([]refundmodel.RefundLine, len(args))
	outs = make([]*refundmodel.RefundLine, len(args))
	for i := range tmps {
		outs[i] = Convert_refundmodel1_RefundLine_refundmodel_RefundLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_refundmodel_RefundLine_refundmodel1_RefundLine(arg *refundmodel.RefundLine, out *refundmodel1.RefundLine) *refundmodel1.RefundLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &refundmodel1.RefundLine{}
	}
	convert_refundmodel_RefundLine_refundmodel1_RefundLine(arg, out)
	return out
}

func convert_refundmodel_RefundLine_refundmodel1_RefundLine(arg *refundmodel.RefundLine, out *refundmodel1.RefundLine) {
	out.VariantID = arg.VariantID     // simple assign
	out.Quantity = arg.Quantity       // simple assign
	out.Code = arg.Code               // simple assign
	out.ImageURL = arg.ImageURL       // simple assign
	out.ProductName = arg.ProductName // simple assign
	out.RetailPrice = arg.RetailPrice // simple assign
	out.ProductID = arg.ProductID     // simple assign
	out.Attributes = arg.Attributes   // simple assign
	out.Adjustment = arg.Adjustment   // simple assign
}

func Convert_refundmodel_RefundLines_refundmodel1_RefundLines(args []*refundmodel.RefundLine) (outs []*refundmodel1.RefundLine) {
	if args == nil {
		return nil
	}
	tmps := make([]refundmodel1.RefundLine, len(args))
	outs = make([]*refundmodel1.RefundLine, len(args))
	for i := range tmps {
		outs[i] = Convert_refundmodel_RefundLine_refundmodel1_RefundLine(args[i], &tmps[i])
	}
	return outs
}
