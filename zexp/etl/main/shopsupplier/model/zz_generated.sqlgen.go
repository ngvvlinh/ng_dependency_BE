// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "o.o/backend/pkg/common/sql/cmsql"
	migration "o.o/backend/pkg/common/sql/migration"
	core "o.o/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type ShopSuppliers []*ShopSupplier

const __sqlShopSupplier_Table = "shop_supplier"
const __sqlShopSupplier_ListCols = "\"id\",\"shop_id\",\"full_name\",\"phone\",\"email\",\"code\",\"company_name\",\"tax_number\",\"headquater_address\",\"note\",\"status\",\"created_at\",\"updated_at\",\"rid\""
const __sqlShopSupplier_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"shop_id\" = EXCLUDED.\"shop_id\",\"full_name\" = EXCLUDED.\"full_name\",\"phone\" = EXCLUDED.\"phone\",\"email\" = EXCLUDED.\"email\",\"code\" = EXCLUDED.\"code\",\"company_name\" = EXCLUDED.\"company_name\",\"tax_number\" = EXCLUDED.\"tax_number\",\"headquater_address\" = EXCLUDED.\"headquater_address\",\"note\" = EXCLUDED.\"note\",\"status\" = EXCLUDED.\"status\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"rid\" = EXCLUDED.\"rid\""
const __sqlShopSupplier_Insert = "INSERT INTO \"shop_supplier\" (" + __sqlShopSupplier_ListCols + ") VALUES"
const __sqlShopSupplier_Select = "SELECT " + __sqlShopSupplier_ListCols + " FROM \"shop_supplier\""
const __sqlShopSupplier_Select_history = "SELECT " + __sqlShopSupplier_ListCols + " FROM history.\"shop_supplier\""
const __sqlShopSupplier_UpdateAll = "UPDATE \"shop_supplier\" SET (" + __sqlShopSupplier_ListCols + ")"
const __sqlShopSupplier_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT shop_supplier_pkey DO UPDATE SET"

func (m *ShopSupplier) SQLTableName() string  { return "shop_supplier" }
func (m *ShopSuppliers) SQLTableName() string { return "shop_supplier" }
func (m *ShopSupplier) SQLListCols() string   { return __sqlShopSupplier_ListCols }

func (m *ShopSupplier) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlShopSupplier_ListCols + " FROM \"shop_supplier\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func (m *ShopSupplier) Migration(db *cmsql.Database) {
	var mDBColumnNameAndType map[string]string
	if val, err := migration.GetColumnNamesAndTypes(db, "shop_supplier"); err != nil {
		db.RecordError(err)
		return
	} else {
		mDBColumnNameAndType = val
	}
	mModelColumnNameAndType := map[string]migration.ColumnDef{
		"id": {
			ColumnName:       "id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"shop_id": {
			ColumnName:       "shop_id",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"full_name": {
			ColumnName:       "full_name",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"phone": {
			ColumnName:       "phone",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"email": {
			ColumnName:       "email",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"code": {
			ColumnName:       "code",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"company_name": {
			ColumnName:       "company_name",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"tax_number": {
			ColumnName:       "tax_number",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"headquater_address": {
			ColumnName:       "headquater_address",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"note": {
			ColumnName:       "note",
			ColumnType:       "string",
			ColumnDBType:     "string",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"status": {
			ColumnName:       "status",
			ColumnType:       "int",
			ColumnDBType:     "int",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"created_at": {
			ColumnName:       "created_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"updated_at": {
			ColumnName:       "updated_at",
			ColumnType:       "time.Time",
			ColumnDBType:     "struct",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
		"rid": {
			ColumnName:       "rid",
			ColumnType:       "dot.ID",
			ColumnDBType:     "int64",
			ColumnTag:        "",
			ColumnEnumValues: []string{},
		},
	}
	if err := migration.Compare(db, "shop_supplier", mModelColumnNameAndType, mDBColumnNameAndType); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*ShopSupplier)(nil))
}

func (m *ShopSupplier) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		m.ID,
		m.ShopID,
		core.String(m.FullName),
		core.String(m.Phone),
		core.String(m.Email),
		core.String(m.Code),
		core.String(m.CompanyName),
		core.String(m.TaxNumber),
		core.String(m.HeadquaterAddress),
		core.String(m.Note),
		core.Int(m.Status),
		core.Time(m.CreatedAt),
		core.Time(m.UpdatedAt),
		m.Rid,
	}
}

func (m *ShopSupplier) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.ShopID,
		(*core.String)(&m.FullName),
		(*core.String)(&m.Phone),
		(*core.String)(&m.Email),
		(*core.String)(&m.Code),
		(*core.String)(&m.CompanyName),
		(*core.String)(&m.TaxNumber),
		(*core.String)(&m.HeadquaterAddress),
		(*core.String)(&m.Note),
		(*core.Int)(&m.Status),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		&m.Rid,
	}
}

func (m *ShopSupplier) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopSuppliers) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopSuppliers, 0, 128)
	for rows.Next() {
		m := new(ShopSupplier)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopSupplier) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopSupplier_Select)
	return nil
}

func (_ *ShopSuppliers) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopSupplier_Select)
	return nil
}

func (m *ShopSupplier) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopSupplier_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopSuppliers) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopSupplier_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(14)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopSupplier) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlShopSupplier_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopSupplier_ListColsOnConflict)
	return nil
}

func (ms ShopSuppliers) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlShopSupplier_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopSupplier_ListColsOnConflict)
	return nil
}

func (m *ShopSupplier) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_supplier")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.FullName != "" {
		flag = true
		w.WriteName("full_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.FullName)
	}
	if m.Phone != "" {
		flag = true
		w.WriteName("phone")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Phone)
	}
	if m.Email != "" {
		flag = true
		w.WriteName("email")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Email)
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.CompanyName != "" {
		flag = true
		w.WriteName("company_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CompanyName)
	}
	if m.TaxNumber != "" {
		flag = true
		w.WriteName("tax_number")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TaxNumber)
	}
	if m.HeadquaterAddress != "" {
		flag = true
		w.WriteName("headquater_address")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.HeadquaterAddress)
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UpdatedAt)
	}
	if m.Rid != 0 {
		flag = true
		w.WriteName("rid")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Rid)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopSupplier) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopSupplier_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(14)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopSupplierHistory map[string]interface{}
type ShopSupplierHistories []map[string]interface{}

func (m *ShopSupplierHistory) SQLTableName() string  { return "history.\"shop_supplier\"" }
func (m ShopSupplierHistories) SQLTableName() string { return "history.\"shop_supplier\"" }

func (m *ShopSupplierHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopSupplier_Select_history)
	return nil
}

func (m ShopSupplierHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopSupplier_Select_history)
	return nil
}

func (m ShopSupplierHistory) ID() core.Interface          { return core.Interface{m["id"]} }
func (m ShopSupplierHistory) ShopID() core.Interface      { return core.Interface{m["shop_id"]} }
func (m ShopSupplierHistory) FullName() core.Interface    { return core.Interface{m["full_name"]} }
func (m ShopSupplierHistory) Phone() core.Interface       { return core.Interface{m["phone"]} }
func (m ShopSupplierHistory) Email() core.Interface       { return core.Interface{m["email"]} }
func (m ShopSupplierHistory) Code() core.Interface        { return core.Interface{m["code"]} }
func (m ShopSupplierHistory) CompanyName() core.Interface { return core.Interface{m["company_name"]} }
func (m ShopSupplierHistory) TaxNumber() core.Interface   { return core.Interface{m["tax_number"]} }
func (m ShopSupplierHistory) HeadquaterAddress() core.Interface {
	return core.Interface{m["headquater_address"]}
}
func (m ShopSupplierHistory) Note() core.Interface      { return core.Interface{m["note"]} }
func (m ShopSupplierHistory) Status() core.Interface    { return core.Interface{m["status"]} }
func (m ShopSupplierHistory) CreatedAt() core.Interface { return core.Interface{m["created_at"]} }
func (m ShopSupplierHistory) UpdatedAt() core.Interface { return core.Interface{m["updated_at"]} }
func (m ShopSupplierHistory) Rid() core.Interface       { return core.Interface{m["rid"]} }

func (m *ShopSupplierHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopSupplierHistory, 14)
	res["id"] = data[0]
	res["shop_id"] = data[1]
	res["full_name"] = data[2]
	res["phone"] = data[3]
	res["email"] = data[4]
	res["code"] = data[5]
	res["company_name"] = data[6]
	res["tax_number"] = data[7]
	res["headquater_address"] = data[8]
	res["note"] = data[9]
	res["status"] = data[10]
	res["created_at"] = data[11]
	res["updated_at"] = data[12]
	res["rid"] = data[13]
	*m = res
	return nil
}

func (ms *ShopSupplierHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 14)
	args := make([]interface{}, 14)
	for i := 0; i < 14; i++ {
		args[i] = &data[i]
	}
	res := make(ShopSupplierHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopSupplierHistory)
		m["id"] = data[0]
		m["shop_id"] = data[1]
		m["full_name"] = data[2]
		m["phone"] = data[3]
		m["email"] = data[4]
		m["code"] = data[5]
		m["company_name"] = data[6]
		m["tax_number"] = data[7]
		m["headquater_address"] = data[8]
		m["note"] = data[9]
		m["status"] = data[10]
		m["created_at"] = data[11]
		m["updated_at"] = data[12]
		m["rid"] = data[13]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
