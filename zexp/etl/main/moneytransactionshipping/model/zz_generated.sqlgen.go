// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "etop.vn/backend/pkg/common/sql/cmsql"
	core "etop.vn/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type MoneyTransactionShippings []*MoneyTransactionShipping

const __sqlMoneyTransactionShipping_Table = "money_transaction_shipping"
const __sqlMoneyTransactionShipping_ListCols = "\"id\",\"shop_id\",\"created_at\",\"updated_at\",\"closed_at\",\"status\",\"total_cod\",\"total_amount\",\"total_orders\",\"code\",\"provider\",\"confirmed_at\",\"bank_account\",\"note\",\"invoice_number\",\"type\",\"rid\""
const __sqlMoneyTransactionShipping_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"shop_id\" = EXCLUDED.\"shop_id\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"closed_at\" = EXCLUDED.\"closed_at\",\"status\" = EXCLUDED.\"status\",\"total_cod\" = EXCLUDED.\"total_cod\",\"total_amount\" = EXCLUDED.\"total_amount\",\"total_orders\" = EXCLUDED.\"total_orders\",\"code\" = EXCLUDED.\"code\",\"provider\" = EXCLUDED.\"provider\",\"confirmed_at\" = EXCLUDED.\"confirmed_at\",\"bank_account\" = EXCLUDED.\"bank_account\",\"note\" = EXCLUDED.\"note\",\"invoice_number\" = EXCLUDED.\"invoice_number\",\"type\" = EXCLUDED.\"type\",\"rid\" = EXCLUDED.\"rid\""
const __sqlMoneyTransactionShipping_Insert = "INSERT INTO \"money_transaction_shipping\" (" + __sqlMoneyTransactionShipping_ListCols + ") VALUES"
const __sqlMoneyTransactionShipping_Select = "SELECT " + __sqlMoneyTransactionShipping_ListCols + " FROM \"money_transaction_shipping\""
const __sqlMoneyTransactionShipping_Select_history = "SELECT " + __sqlMoneyTransactionShipping_ListCols + " FROM history.\"money_transaction_shipping\""
const __sqlMoneyTransactionShipping_UpdateAll = "UPDATE \"money_transaction_shipping\" SET (" + __sqlMoneyTransactionShipping_ListCols + ")"
const __sqlMoneyTransactionShipping_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT money_transaction_shipping_pkey DO UPDATE SET"

func (m *MoneyTransactionShipping) SQLTableName() string  { return "money_transaction_shipping" }
func (m *MoneyTransactionShippings) SQLTableName() string { return "money_transaction_shipping" }
func (m *MoneyTransactionShipping) SQLListCols() string {
	return __sqlMoneyTransactionShipping_ListCols
}

func (m *MoneyTransactionShipping) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlMoneyTransactionShipping_ListCols + " FROM \"money_transaction_shipping\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*MoneyTransactionShipping)(nil))
}

func (m *MoneyTransactionShipping) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		m.ID,
		m.ShopID,
		core.Time(m.CreatedAt),
		core.Time(m.UpdatedAt),
		core.Time(m.ClosedAt),
		m.Status,
		core.Int(m.TotalCOD),
		core.Int(m.TotalAmount),
		core.Int(m.TotalOrders),
		core.String(m.Code),
		core.String(m.Provider),
		core.Time(m.ConfirmedAt),
		core.JSON{m.BankAccount},
		core.String(m.Note),
		core.String(m.InvoiceNumber),
		core.String(m.Type),
		m.Rid,
	}
}

func (m *MoneyTransactionShipping) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.ShopID,
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		(*core.Time)(&m.ClosedAt),
		&m.Status,
		(*core.Int)(&m.TotalCOD),
		(*core.Int)(&m.TotalAmount),
		(*core.Int)(&m.TotalOrders),
		(*core.String)(&m.Code),
		(*core.String)(&m.Provider),
		(*core.Time)(&m.ConfirmedAt),
		core.JSON{&m.BankAccount},
		(*core.String)(&m.Note),
		(*core.String)(&m.InvoiceNumber),
		(*core.String)(&m.Type),
		&m.Rid,
	}
}

func (m *MoneyTransactionShipping) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *MoneyTransactionShippings) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(MoneyTransactionShippings, 0, 128)
	for rows.Next() {
		m := new(MoneyTransactionShipping)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *MoneyTransactionShipping) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShipping_Select)
	return nil
}

func (_ *MoneyTransactionShippings) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShipping_Select)
	return nil
}

func (m *MoneyTransactionShipping) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShipping_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(17)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms MoneyTransactionShippings) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShipping_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(17)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *MoneyTransactionShipping) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlMoneyTransactionShipping_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlMoneyTransactionShipping_ListColsOnConflict)
	return nil
}

func (ms MoneyTransactionShippings) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlMoneyTransactionShipping_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlMoneyTransactionShipping_ListColsOnConflict)
	return nil
}

func (m *MoneyTransactionShipping) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("money_transaction_shipping")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UpdatedAt)
	}
	if !m.ClosedAt.IsZero() {
		flag = true
		w.WriteName("closed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ClosedAt)
	}
	if m.Status != 0 {
		flag = true
		w.WriteName("status")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Status)
	}
	if m.TotalCOD != 0 {
		flag = true
		w.WriteName("total_cod")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalCOD)
	}
	if m.TotalAmount != 0 {
		flag = true
		w.WriteName("total_amount")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalAmount)
	}
	if m.TotalOrders != 0 {
		flag = true
		w.WriteName("total_orders")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.TotalOrders)
	}
	if m.Code != "" {
		flag = true
		w.WriteName("code")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Code)
	}
	if m.Provider != "" {
		flag = true
		w.WriteName("provider")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Provider)
	}
	if !m.ConfirmedAt.IsZero() {
		flag = true
		w.WriteName("confirmed_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ConfirmedAt)
	}
	if m.BankAccount != nil {
		flag = true
		w.WriteName("bank_account")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(core.JSON{m.BankAccount})
	}
	if m.Note != "" {
		flag = true
		w.WriteName("note")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Note)
	}
	if m.InvoiceNumber != "" {
		flag = true
		w.WriteName("invoice_number")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.InvoiceNumber)
	}
	if m.Type != "" {
		flag = true
		w.WriteName("type")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Type)
	}
	if m.Rid != 0 {
		flag = true
		w.WriteName("rid")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Rid)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *MoneyTransactionShipping) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShipping_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(17)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type MoneyTransactionShippingHistory map[string]interface{}
type MoneyTransactionShippingHistories []map[string]interface{}

func (m *MoneyTransactionShippingHistory) SQLTableName() string {
	return "history.\"money_transaction_shipping\""
}
func (m MoneyTransactionShippingHistories) SQLTableName() string {
	return "history.\"money_transaction_shipping\""
}

func (m *MoneyTransactionShippingHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShipping_Select_history)
	return nil
}

func (m MoneyTransactionShippingHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlMoneyTransactionShipping_Select_history)
	return nil
}

func (m MoneyTransactionShippingHistory) ID() core.Interface     { return core.Interface{m["id"]} }
func (m MoneyTransactionShippingHistory) ShopID() core.Interface { return core.Interface{m["shop_id"]} }
func (m MoneyTransactionShippingHistory) CreatedAt() core.Interface {
	return core.Interface{m["created_at"]}
}
func (m MoneyTransactionShippingHistory) UpdatedAt() core.Interface {
	return core.Interface{m["updated_at"]}
}
func (m MoneyTransactionShippingHistory) ClosedAt() core.Interface {
	return core.Interface{m["closed_at"]}
}
func (m MoneyTransactionShippingHistory) Status() core.Interface { return core.Interface{m["status"]} }
func (m MoneyTransactionShippingHistory) TotalCOD() core.Interface {
	return core.Interface{m["total_cod"]}
}
func (m MoneyTransactionShippingHistory) TotalAmount() core.Interface {
	return core.Interface{m["total_amount"]}
}
func (m MoneyTransactionShippingHistory) TotalOrders() core.Interface {
	return core.Interface{m["total_orders"]}
}
func (m MoneyTransactionShippingHistory) Code() core.Interface { return core.Interface{m["code"]} }
func (m MoneyTransactionShippingHistory) Provider() core.Interface {
	return core.Interface{m["provider"]}
}
func (m MoneyTransactionShippingHistory) ConfirmedAt() core.Interface {
	return core.Interface{m["confirmed_at"]}
}
func (m MoneyTransactionShippingHistory) BankAccount() core.Interface {
	return core.Interface{m["bank_account"]}
}
func (m MoneyTransactionShippingHistory) Note() core.Interface { return core.Interface{m["note"]} }
func (m MoneyTransactionShippingHistory) InvoiceNumber() core.Interface {
	return core.Interface{m["invoice_number"]}
}
func (m MoneyTransactionShippingHistory) Type() core.Interface { return core.Interface{m["type"]} }
func (m MoneyTransactionShippingHistory) Rid() core.Interface  { return core.Interface{m["rid"]} }

func (m *MoneyTransactionShippingHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 17)
	args := make([]interface{}, 17)
	for i := 0; i < 17; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(MoneyTransactionShippingHistory, 17)
	res["id"] = data[0]
	res["shop_id"] = data[1]
	res["created_at"] = data[2]
	res["updated_at"] = data[3]
	res["closed_at"] = data[4]
	res["status"] = data[5]
	res["total_cod"] = data[6]
	res["total_amount"] = data[7]
	res["total_orders"] = data[8]
	res["code"] = data[9]
	res["provider"] = data[10]
	res["confirmed_at"] = data[11]
	res["bank_account"] = data[12]
	res["note"] = data[13]
	res["invoice_number"] = data[14]
	res["type"] = data[15]
	res["rid"] = data[16]
	*m = res
	return nil
}

func (ms *MoneyTransactionShippingHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 17)
	args := make([]interface{}, 17)
	for i := 0; i < 17; i++ {
		args[i] = &data[i]
	}
	res := make(MoneyTransactionShippingHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(MoneyTransactionShippingHistory)
		m["id"] = data[0]
		m["shop_id"] = data[1]
		m["created_at"] = data[2]
		m["updated_at"] = data[3]
		m["closed_at"] = data[4]
		m["status"] = data[5]
		m["total_cod"] = data[6]
		m["total_amount"] = data[7]
		m["total_orders"] = data[8]
		m["code"] = data[9]
		m["provider"] = data[10]
		m["confirmed_at"] = data[11]
		m["bank_account"] = data[12]
		m["note"] = data[13]
		m["invoice_number"] = data[14]
		m["type"] = data[15]
		m["rid"] = data[16]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
