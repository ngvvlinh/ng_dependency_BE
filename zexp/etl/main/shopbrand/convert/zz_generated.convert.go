// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	time "time"

	catalogmodel "etop.vn/backend/com/main/catalog/model"
	conversion "etop.vn/backend/pkg/common/conversion"
	shopbrandmodel "etop.vn/backend/zexp/etl/main/shopbrand/model"
)

/*
Custom conversions: (none)

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*shopbrandmodel.ShopBrand)(nil), (*catalogmodel.ShopBrand)(nil), func(arg, out interface{}) error {
		Convert_shopbrandmodel_ShopBrand_catalogmodel_ShopBrand(arg.(*shopbrandmodel.ShopBrand), out.(*catalogmodel.ShopBrand))
		return nil
	})
	s.Register(([]*shopbrandmodel.ShopBrand)(nil), (*[]*catalogmodel.ShopBrand)(nil), func(arg, out interface{}) error {
		out0 := Convert_shopbrandmodel_ShopBrands_catalogmodel_ShopBrands(arg.([]*shopbrandmodel.ShopBrand))
		*out.(*[]*catalogmodel.ShopBrand) = out0
		return nil
	})
	s.Register((*catalogmodel.ShopBrand)(nil), (*shopbrandmodel.ShopBrand)(nil), func(arg, out interface{}) error {
		Convert_catalogmodel_ShopBrand_shopbrandmodel_ShopBrand(arg.(*catalogmodel.ShopBrand), out.(*shopbrandmodel.ShopBrand))
		return nil
	})
	s.Register(([]*catalogmodel.ShopBrand)(nil), (*[]*shopbrandmodel.ShopBrand)(nil), func(arg, out interface{}) error {
		out0 := Convert_catalogmodel_ShopBrands_shopbrandmodel_ShopBrands(arg.([]*catalogmodel.ShopBrand))
		*out.(*[]*shopbrandmodel.ShopBrand) = out0
		return nil
	})
}

//-- convert etop.vn/backend/com/main/catalog/model.ShopBrand --//

func Convert_shopbrandmodel_ShopBrand_catalogmodel_ShopBrand(arg *shopbrandmodel.ShopBrand, out *catalogmodel.ShopBrand) *catalogmodel.ShopBrand {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &catalogmodel.ShopBrand{}
	}
	convert_shopbrandmodel_ShopBrand_catalogmodel_ShopBrand(arg, out)
	return out
}

func convert_shopbrandmodel_ShopBrand_catalogmodel_ShopBrand(arg *shopbrandmodel.ShopBrand, out *catalogmodel.ShopBrand) {
	out.ID = arg.ID                   // simple assign
	out.ShopID = arg.ShopID           // simple assign
	out.ExternalID = arg.ExternalID   // simple assign
	out.PartnerID = arg.PartnerID     // simple assign
	out.BrandName = arg.BrandName     // simple assign
	out.Description = arg.Description // simple assign
	out.CreatedAt = arg.CreatedAt     // simple assign
	out.UpdatedAt = arg.UpdatedAt     // simple assign
	out.DeletedAt = time.Time{}       // zero value
	out.Rid = arg.Rid                 // simple assign
}

func Convert_shopbrandmodel_ShopBrands_catalogmodel_ShopBrands(args []*shopbrandmodel.ShopBrand) (outs []*catalogmodel.ShopBrand) {
	if args == nil {
		return nil
	}
	tmps := make([]catalogmodel.ShopBrand, len(args))
	outs = make([]*catalogmodel.ShopBrand, len(args))
	for i := range tmps {
		outs[i] = Convert_shopbrandmodel_ShopBrand_catalogmodel_ShopBrand(args[i], &tmps[i])
	}
	return outs
}

func Convert_catalogmodel_ShopBrand_shopbrandmodel_ShopBrand(arg *catalogmodel.ShopBrand, out *shopbrandmodel.ShopBrand) *shopbrandmodel.ShopBrand {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &shopbrandmodel.ShopBrand{}
	}
	convert_catalogmodel_ShopBrand_shopbrandmodel_ShopBrand(arg, out)
	return out
}

func convert_catalogmodel_ShopBrand_shopbrandmodel_ShopBrand(arg *catalogmodel.ShopBrand, out *shopbrandmodel.ShopBrand) {
	out.ID = arg.ID                   // simple assign
	out.ShopID = arg.ShopID           // simple assign
	out.ExternalID = arg.ExternalID   // simple assign
	out.PartnerID = arg.PartnerID     // simple assign
	out.BrandName = arg.BrandName     // simple assign
	out.Description = arg.Description // simple assign
	out.CreatedAt = arg.CreatedAt     // simple assign
	out.UpdatedAt = arg.UpdatedAt     // simple assign
	out.Rid = arg.Rid                 // simple assign
}

func Convert_catalogmodel_ShopBrands_shopbrandmodel_ShopBrands(args []*catalogmodel.ShopBrand) (outs []*shopbrandmodel.ShopBrand) {
	if args == nil {
		return nil
	}
	tmps := make([]shopbrandmodel.ShopBrand, len(args))
	outs = make([]*shopbrandmodel.ShopBrand, len(args))
	for i := range tmps {
		outs[i] = Convert_catalogmodel_ShopBrand_shopbrandmodel_ShopBrand(args[i], &tmps[i])
	}
	return outs
}
