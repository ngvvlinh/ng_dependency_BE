// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package model

import (
	"database/sql"
	"sync"
	time "time"

	cmsql "etop.vn/backend/pkg/common/sql/cmsql"
	core "etop.vn/backend/pkg/common/sql/sq/core"
)

var __sqlModels []interface{ SQLVerifySchema(db *cmsql.Database) }
var __sqlonce sync.Once

func SQLVerifySchema(db *cmsql.Database) {
	__sqlonce.Do(func() {
		for _, m := range __sqlModels {
			m.SQLVerifySchema(db)
		}
	})
}

type SQLWriter = core.SQLWriter

type ShopBrands []*ShopBrand

const __sqlShopBrand_Table = "shop_brand"
const __sqlShopBrand_ListCols = "\"id\",\"shop_id\",\"external_id\",\"partner_id\",\"brand_name\",\"description\",\"created_at\",\"updated_at\",\"rid\""
const __sqlShopBrand_ListColsOnConflict = "\"id\" = EXCLUDED.\"id\",\"shop_id\" = EXCLUDED.\"shop_id\",\"external_id\" = EXCLUDED.\"external_id\",\"partner_id\" = EXCLUDED.\"partner_id\",\"brand_name\" = EXCLUDED.\"brand_name\",\"description\" = EXCLUDED.\"description\",\"created_at\" = EXCLUDED.\"created_at\",\"updated_at\" = EXCLUDED.\"updated_at\",\"rid\" = EXCLUDED.\"rid\""
const __sqlShopBrand_Insert = "INSERT INTO \"shop_brand\" (" + __sqlShopBrand_ListCols + ") VALUES"
const __sqlShopBrand_Select = "SELECT " + __sqlShopBrand_ListCols + " FROM \"shop_brand\""
const __sqlShopBrand_Select_history = "SELECT " + __sqlShopBrand_ListCols + " FROM history.\"shop_brand\""
const __sqlShopBrand_UpdateAll = "UPDATE \"shop_brand\" SET (" + __sqlShopBrand_ListCols + ")"
const __sqlShopBrand_UpdateOnConflict = " ON CONFLICT ON CONSTRAINT shop_brand_pkey DO UPDATE SET"

func (m *ShopBrand) SQLTableName() string  { return "shop_brand" }
func (m *ShopBrands) SQLTableName() string { return "shop_brand" }
func (m *ShopBrand) SQLListCols() string   { return __sqlShopBrand_ListCols }

func (m *ShopBrand) SQLVerifySchema(db *cmsql.Database) {
	query := "SELECT " + __sqlShopBrand_ListCols + " FROM \"shop_brand\" WHERE false"
	if _, err := db.SQL(query).Exec(); err != nil {
		db.RecordError(err)
	}
}

func init() {
	__sqlModels = append(__sqlModels, (*ShopBrand)(nil))
}

func (m *ShopBrand) SQLArgs(opts core.Opts, create bool) []interface{} {
	return []interface{}{
		m.ID,
		m.ShopID,
		core.String(m.ExternalID),
		m.PartnerID,
		core.String(m.BrandName),
		core.String(m.Description),
		core.Time(m.CreatedAt),
		core.Time(m.UpdatedAt),
		m.Rid,
	}
}

func (m *ShopBrand) SQLScanArgs(opts core.Opts) []interface{} {
	return []interface{}{
		&m.ID,
		&m.ShopID,
		(*core.String)(&m.ExternalID),
		&m.PartnerID,
		(*core.String)(&m.BrandName),
		(*core.String)(&m.Description),
		(*core.Time)(&m.CreatedAt),
		(*core.Time)(&m.UpdatedAt),
		&m.Rid,
	}
}

func (m *ShopBrand) SQLScan(opts core.Opts, row *sql.Row) error {
	return row.Scan(m.SQLScanArgs(opts)...)
}

func (ms *ShopBrands) SQLScan(opts core.Opts, rows *sql.Rows) error {
	res := make(ShopBrands, 0, 128)
	for rows.Next() {
		m := new(ShopBrand)
		args := m.SQLScanArgs(opts)
		if err := rows.Scan(args...); err != nil {
			return err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}

func (_ *ShopBrand) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopBrand_Select)
	return nil
}

func (_ *ShopBrands) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopBrand_Select)
	return nil
}

func (m *ShopBrand) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopBrand_Insert)
	w.WriteRawString(" (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), true))
	return nil
}

func (ms ShopBrands) SQLInsert(w SQLWriter) error {
	w.WriteQueryString(__sqlShopBrand_Insert)
	w.WriteRawString(" (")
	for i := 0; i < len(ms); i++ {
		w.WriteMarkers(9)
		w.WriteArgs(ms[i].SQLArgs(w.Opts(), true))
		w.WriteRawString("),(")
	}
	w.TrimLast(2)
	return nil
}

func (m *ShopBrand) SQLUpsert(w SQLWriter) error {
	m.SQLInsert(w)
	w.WriteQueryString(__sqlShopBrand_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopBrand_ListColsOnConflict)
	return nil
}

func (ms ShopBrands) SQLUpsert(w SQLWriter) error {
	ms.SQLInsert(w)
	w.WriteQueryString(__sqlShopBrand_UpdateOnConflict)
	w.WriteQueryString(" ")
	w.WriteQueryString(__sqlShopBrand_ListColsOnConflict)
	return nil
}

func (m *ShopBrand) SQLUpdate(w SQLWriter) error {
	now, opts := time.Now(), w.Opts()
	_, _ = now, opts // suppress unuse error
	var flag bool
	w.WriteRawString("UPDATE ")
	w.WriteName("shop_brand")
	w.WriteRawString(" SET ")
	if m.ID != 0 {
		flag = true
		w.WriteName("id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ID)
	}
	if m.ShopID != 0 {
		flag = true
		w.WriteName("shop_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ShopID)
	}
	if m.ExternalID != "" {
		flag = true
		w.WriteName("external_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.ExternalID)
	}
	if m.PartnerID != 0 {
		flag = true
		w.WriteName("partner_id")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.PartnerID)
	}
	if m.BrandName != "" {
		flag = true
		w.WriteName("brand_name")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.BrandName)
	}
	if m.Description != "" {
		flag = true
		w.WriteName("description")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Description)
	}
	if !m.CreatedAt.IsZero() {
		flag = true
		w.WriteName("created_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.CreatedAt)
	}
	if !m.UpdatedAt.IsZero() {
		flag = true
		w.WriteName("updated_at")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.UpdatedAt)
	}
	if m.Rid != 0 {
		flag = true
		w.WriteName("rid")
		w.WriteByte('=')
		w.WriteMarker()
		w.WriteByte(',')
		w.WriteArg(m.Rid)
	}
	if !flag {
		return core.ErrNoColumn
	}
	w.TrimLast(1)
	return nil
}

func (m *ShopBrand) SQLUpdateAll(w SQLWriter) error {
	w.WriteQueryString(__sqlShopBrand_UpdateAll)
	w.WriteRawString(" = (")
	w.WriteMarkers(9)
	w.WriteByte(')')
	w.WriteArgs(m.SQLArgs(w.Opts(), false))
	return nil
}

type ShopBrandHistory map[string]interface{}
type ShopBrandHistories []map[string]interface{}

func (m *ShopBrandHistory) SQLTableName() string  { return "history.\"shop_brand\"" }
func (m ShopBrandHistories) SQLTableName() string { return "history.\"shop_brand\"" }

func (m *ShopBrandHistory) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopBrand_Select_history)
	return nil
}

func (m ShopBrandHistories) SQLSelect(w SQLWriter) error {
	w.WriteQueryString(__sqlShopBrand_Select_history)
	return nil
}

func (m ShopBrandHistory) ID() core.Interface          { return core.Interface{m["id"]} }
func (m ShopBrandHistory) ShopID() core.Interface      { return core.Interface{m["shop_id"]} }
func (m ShopBrandHistory) ExternalID() core.Interface  { return core.Interface{m["external_id"]} }
func (m ShopBrandHistory) PartnerID() core.Interface   { return core.Interface{m["partner_id"]} }
func (m ShopBrandHistory) BrandName() core.Interface   { return core.Interface{m["brand_name"]} }
func (m ShopBrandHistory) Description() core.Interface { return core.Interface{m["description"]} }
func (m ShopBrandHistory) CreatedAt() core.Interface   { return core.Interface{m["created_at"]} }
func (m ShopBrandHistory) UpdatedAt() core.Interface   { return core.Interface{m["updated_at"]} }
func (m ShopBrandHistory) Rid() core.Interface         { return core.Interface{m["rid"]} }

func (m *ShopBrandHistory) SQLScan(opts core.Opts, row *sql.Row) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	if err := row.Scan(args...); err != nil {
		return err
	}
	res := make(ShopBrandHistory, 9)
	res["id"] = data[0]
	res["shop_id"] = data[1]
	res["external_id"] = data[2]
	res["partner_id"] = data[3]
	res["brand_name"] = data[4]
	res["description"] = data[5]
	res["created_at"] = data[6]
	res["updated_at"] = data[7]
	res["rid"] = data[8]
	*m = res
	return nil
}

func (ms *ShopBrandHistories) SQLScan(opts core.Opts, rows *sql.Rows) error {
	data := make([]interface{}, 9)
	args := make([]interface{}, 9)
	for i := 0; i < 9; i++ {
		args[i] = &data[i]
	}
	res := make(ShopBrandHistories, 0, 128)
	for rows.Next() {
		if err := rows.Scan(args...); err != nil {
			return err
		}
		m := make(ShopBrandHistory)
		m["id"] = data[0]
		m["shop_id"] = data[1]
		m["external_id"] = data[2]
		m["partner_id"] = data[3]
		m["brand_name"] = data[4]
		m["description"] = data[5]
		m["created_at"] = data[6]
		m["updated_at"] = data[7]
		m["rid"] = data[8]
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return err
	}
	*ms = res
	return nil
}
