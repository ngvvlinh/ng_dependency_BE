// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	purchaserefundmodel "o.o/backend/com/main/purchaserefund/model"
	conversion "o.o/backend/pkg/common/conversion"
	purchaserefundmodel1 "o.o/backend/zexp/etl/main/purchaserefund/model"
)

/*
Custom conversions: (none)

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*purchaserefundmodel1.PurchaseRefund)(nil), (*purchaserefundmodel.PurchaseRefund)(nil), func(arg, out interface{}) error {
		Convert_purchaserefundmodel1_PurchaseRefund_purchaserefundmodel_PurchaseRefund(arg.(*purchaserefundmodel1.PurchaseRefund), out.(*purchaserefundmodel.PurchaseRefund))
		return nil
	})
	s.Register(([]*purchaserefundmodel1.PurchaseRefund)(nil), (*[]*purchaserefundmodel.PurchaseRefund)(nil), func(arg, out interface{}) error {
		out0 := Convert_purchaserefundmodel1_PurchaseRefunds_purchaserefundmodel_PurchaseRefunds(arg.([]*purchaserefundmodel1.PurchaseRefund))
		*out.(*[]*purchaserefundmodel.PurchaseRefund) = out0
		return nil
	})
	s.Register((*purchaserefundmodel.PurchaseRefund)(nil), (*purchaserefundmodel1.PurchaseRefund)(nil), func(arg, out interface{}) error {
		Convert_purchaserefundmodel_PurchaseRefund_purchaserefundmodel1_PurchaseRefund(arg.(*purchaserefundmodel.PurchaseRefund), out.(*purchaserefundmodel1.PurchaseRefund))
		return nil
	})
	s.Register(([]*purchaserefundmodel.PurchaseRefund)(nil), (*[]*purchaserefundmodel1.PurchaseRefund)(nil), func(arg, out interface{}) error {
		out0 := Convert_purchaserefundmodel_PurchaseRefunds_purchaserefundmodel1_PurchaseRefunds(arg.([]*purchaserefundmodel.PurchaseRefund))
		*out.(*[]*purchaserefundmodel1.PurchaseRefund) = out0
		return nil
	})
	s.Register((*purchaserefundmodel1.PurchaseRefundLine)(nil), (*purchaserefundmodel.PurchaseRefundLine)(nil), func(arg, out interface{}) error {
		Convert_purchaserefundmodel1_PurchaseRefundLine_purchaserefundmodel_PurchaseRefundLine(arg.(*purchaserefundmodel1.PurchaseRefundLine), out.(*purchaserefundmodel.PurchaseRefundLine))
		return nil
	})
	s.Register(([]*purchaserefundmodel1.PurchaseRefundLine)(nil), (*[]*purchaserefundmodel.PurchaseRefundLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_purchaserefundmodel1_PurchaseRefundLines_purchaserefundmodel_PurchaseRefundLines(arg.([]*purchaserefundmodel1.PurchaseRefundLine))
		*out.(*[]*purchaserefundmodel.PurchaseRefundLine) = out0
		return nil
	})
	s.Register((*purchaserefundmodel.PurchaseRefundLine)(nil), (*purchaserefundmodel1.PurchaseRefundLine)(nil), func(arg, out interface{}) error {
		Convert_purchaserefundmodel_PurchaseRefundLine_purchaserefundmodel1_PurchaseRefundLine(arg.(*purchaserefundmodel.PurchaseRefundLine), out.(*purchaserefundmodel1.PurchaseRefundLine))
		return nil
	})
	s.Register(([]*purchaserefundmodel.PurchaseRefundLine)(nil), (*[]*purchaserefundmodel1.PurchaseRefundLine)(nil), func(arg, out interface{}) error {
		out0 := Convert_purchaserefundmodel_PurchaseRefundLines_purchaserefundmodel1_PurchaseRefundLines(arg.([]*purchaserefundmodel.PurchaseRefundLine))
		*out.(*[]*purchaserefundmodel1.PurchaseRefundLine) = out0
		return nil
	})
}

//-- convert o.o/backend/com/main/purchaserefund/model.PurchaseRefund --//

func Convert_purchaserefundmodel1_PurchaseRefund_purchaserefundmodel_PurchaseRefund(arg *purchaserefundmodel1.PurchaseRefund, out *purchaserefundmodel.PurchaseRefund) *purchaserefundmodel.PurchaseRefund {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &purchaserefundmodel.PurchaseRefund{}
	}
	convert_purchaserefundmodel1_PurchaseRefund_purchaserefundmodel_PurchaseRefund(arg, out)
	return out
}

func convert_purchaserefundmodel1_PurchaseRefund_purchaserefundmodel_PurchaseRefund(arg *purchaserefundmodel1.PurchaseRefund, out *purchaserefundmodel.PurchaseRefund) {
	out.ID = arg.ID                           // simple assign
	out.ShopID = arg.ShopID                   // simple assign
	out.PurchaseOrderID = arg.PurchaseOrderID // simple assign
	out.Code = arg.Code                       // simple assign
	out.CodeNorm = arg.CodeNorm               // simple assign
	out.Note = arg.Note                       // simple assign
	out.Lines = Convert_purchaserefundmodel1_PurchaseRefundLines_purchaserefundmodel_PurchaseRefundLines(arg.Lines)
	out.TotalAdjustment = 0             // zero value
	out.AdjustmentLines = nil           // zero value
	out.CreatedAt = arg.CreatedAt       // simple assign
	out.UpdatedAt = arg.UpdatedAt       // simple assign
	out.CancelledAt = arg.CancelledAt   // simple assign
	out.ConfirmedAt = arg.ConfirmedAt   // simple assign
	out.CreatedBy = arg.CreatedBy       // simple assign
	out.UpdatedBy = arg.UpdatedBy       // simple assign
	out.CancelReason = arg.CancelReason // simple assign
	out.Status = arg.Status             // simple assign
	out.SupplierID = arg.SupplierID     // simple assign
	out.TotalAmount = arg.TotalAmount   // simple assign
	out.BasketValue = arg.BasketValue   // simple assign
	out.Rid = arg.Rid                   // simple assign
}

func Convert_purchaserefundmodel1_PurchaseRefunds_purchaserefundmodel_PurchaseRefunds(args []*purchaserefundmodel1.PurchaseRefund) (outs []*purchaserefundmodel.PurchaseRefund) {
	if args == nil {
		return nil
	}
	tmps := make([]purchaserefundmodel.PurchaseRefund, len(args))
	outs = make([]*purchaserefundmodel.PurchaseRefund, len(args))
	for i := range tmps {
		outs[i] = Convert_purchaserefundmodel1_PurchaseRefund_purchaserefundmodel_PurchaseRefund(args[i], &tmps[i])
	}
	return outs
}

func Convert_purchaserefundmodel_PurchaseRefund_purchaserefundmodel1_PurchaseRefund(arg *purchaserefundmodel.PurchaseRefund, out *purchaserefundmodel1.PurchaseRefund) *purchaserefundmodel1.PurchaseRefund {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &purchaserefundmodel1.PurchaseRefund{}
	}
	convert_purchaserefundmodel_PurchaseRefund_purchaserefundmodel1_PurchaseRefund(arg, out)
	return out
}

func convert_purchaserefundmodel_PurchaseRefund_purchaserefundmodel1_PurchaseRefund(arg *purchaserefundmodel.PurchaseRefund, out *purchaserefundmodel1.PurchaseRefund) {
	out.ID = arg.ID                           // simple assign
	out.ShopID = arg.ShopID                   // simple assign
	out.PurchaseOrderID = arg.PurchaseOrderID // simple assign
	out.Code = arg.Code                       // simple assign
	out.CodeNorm = arg.CodeNorm               // simple assign
	out.Note = arg.Note                       // simple assign
	out.Lines = Convert_purchaserefundmodel_PurchaseRefundLines_purchaserefundmodel1_PurchaseRefundLines(arg.Lines)
	out.CreatedAt = arg.CreatedAt       // simple assign
	out.UpdatedAt = arg.UpdatedAt       // simple assign
	out.CancelledAt = arg.CancelledAt   // simple assign
	out.ConfirmedAt = arg.ConfirmedAt   // simple assign
	out.CreatedBy = arg.CreatedBy       // simple assign
	out.UpdatedBy = arg.UpdatedBy       // simple assign
	out.CancelReason = arg.CancelReason // simple assign
	out.Status = arg.Status             // simple assign
	out.SupplierID = arg.SupplierID     // simple assign
	out.TotalAmount = arg.TotalAmount   // simple assign
	out.BasketValue = arg.BasketValue   // simple assign
	out.Rid = arg.Rid                   // simple assign
}

func Convert_purchaserefundmodel_PurchaseRefunds_purchaserefundmodel1_PurchaseRefunds(args []*purchaserefundmodel.PurchaseRefund) (outs []*purchaserefundmodel1.PurchaseRefund) {
	if args == nil {
		return nil
	}
	tmps := make([]purchaserefundmodel1.PurchaseRefund, len(args))
	outs = make([]*purchaserefundmodel1.PurchaseRefund, len(args))
	for i := range tmps {
		outs[i] = Convert_purchaserefundmodel_PurchaseRefund_purchaserefundmodel1_PurchaseRefund(args[i], &tmps[i])
	}
	return outs
}

//-- convert o.o/backend/com/main/purchaserefund/model.PurchaseRefundLine --//

func Convert_purchaserefundmodel1_PurchaseRefundLine_purchaserefundmodel_PurchaseRefundLine(arg *purchaserefundmodel1.PurchaseRefundLine, out *purchaserefundmodel.PurchaseRefundLine) *purchaserefundmodel.PurchaseRefundLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &purchaserefundmodel.PurchaseRefundLine{}
	}
	convert_purchaserefundmodel1_PurchaseRefundLine_purchaserefundmodel_PurchaseRefundLine(arg, out)
	return out
}

func convert_purchaserefundmodel1_PurchaseRefundLine_purchaserefundmodel_PurchaseRefundLine(arg *purchaserefundmodel1.PurchaseRefundLine, out *purchaserefundmodel.PurchaseRefundLine) {
	out.VariantID = arg.VariantID       // simple assign
	out.Quantity = arg.Quantity         // simple assign
	out.Code = arg.Code                 // simple assign
	out.ImageURL = arg.ImageURL         // simple assign
	out.ProductName = arg.ProductName   // simple assign
	out.PaymentPrice = arg.PaymentPrice // simple assign
	out.ProductID = arg.ProductID       // simple assign
	out.Attributes = arg.Attributes     // simple assign
	out.Adjustment = arg.Adjustment     // simple assign
}

func Convert_purchaserefundmodel1_PurchaseRefundLines_purchaserefundmodel_PurchaseRefundLines(args []*purchaserefundmodel1.PurchaseRefundLine) (outs []*purchaserefundmodel.PurchaseRefundLine) {
	if args == nil {
		return nil
	}
	tmps := make([]purchaserefundmodel.PurchaseRefundLine, len(args))
	outs = make([]*purchaserefundmodel.PurchaseRefundLine, len(args))
	for i := range tmps {
		outs[i] = Convert_purchaserefundmodel1_PurchaseRefundLine_purchaserefundmodel_PurchaseRefundLine(args[i], &tmps[i])
	}
	return outs
}

func Convert_purchaserefundmodel_PurchaseRefundLine_purchaserefundmodel1_PurchaseRefundLine(arg *purchaserefundmodel.PurchaseRefundLine, out *purchaserefundmodel1.PurchaseRefundLine) *purchaserefundmodel1.PurchaseRefundLine {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &purchaserefundmodel1.PurchaseRefundLine{}
	}
	convert_purchaserefundmodel_PurchaseRefundLine_purchaserefundmodel1_PurchaseRefundLine(arg, out)
	return out
}

func convert_purchaserefundmodel_PurchaseRefundLine_purchaserefundmodel1_PurchaseRefundLine(arg *purchaserefundmodel.PurchaseRefundLine, out *purchaserefundmodel1.PurchaseRefundLine) {
	out.VariantID = arg.VariantID       // simple assign
	out.Quantity = arg.Quantity         // simple assign
	out.Code = arg.Code                 // simple assign
	out.ImageURL = arg.ImageURL         // simple assign
	out.ProductName = arg.ProductName   // simple assign
	out.PaymentPrice = arg.PaymentPrice // simple assign
	out.ProductID = arg.ProductID       // simple assign
	out.Attributes = arg.Attributes     // simple assign
	out.Adjustment = arg.Adjustment     // simple assign
}

func Convert_purchaserefundmodel_PurchaseRefundLines_purchaserefundmodel1_PurchaseRefundLines(args []*purchaserefundmodel.PurchaseRefundLine) (outs []*purchaserefundmodel1.PurchaseRefundLine) {
	if args == nil {
		return nil
	}
	tmps := make([]purchaserefundmodel1.PurchaseRefundLine, len(args))
	outs = make([]*purchaserefundmodel1.PurchaseRefundLine, len(args))
	for i := range tmps {
		outs[i] = Convert_purchaserefundmodel_PurchaseRefundLine_purchaserefundmodel1_PurchaseRefundLine(args[i], &tmps[i])
	}
	return outs
}
