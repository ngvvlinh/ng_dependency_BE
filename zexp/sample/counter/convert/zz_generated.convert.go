// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	conversion "o.o/backend/pkg/common/conversion"
	api "o.o/backend/zexp/sample/counter/api"
	countermodel "o.o/backend/zexp/sample/counter/model"
)

/*
Custom conversions:
    convertCounter         // in use
    convertCounterModel    // in use

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*countermodel.Counter)(nil), (*api.Counter)(nil), func(arg, out interface{}) error {
		Convert_countermodel_Counter_api_Counter(arg.(*countermodel.Counter), out.(*api.Counter))
		return nil
	})
	s.Register(([]*countermodel.Counter)(nil), (*[]*api.Counter)(nil), func(arg, out interface{}) error {
		out0 := Convert_countermodel_Counters_api_Counters(arg.([]*countermodel.Counter))
		*out.(*[]*api.Counter) = out0
		return nil
	})
	s.Register((*api.Counter)(nil), (*countermodel.Counter)(nil), func(arg, out interface{}) error {
		Convert_api_Counter_countermodel_Counter(arg.(*api.Counter), out.(*countermodel.Counter))
		return nil
	})
	s.Register(([]*api.Counter)(nil), (*[]*countermodel.Counter)(nil), func(arg, out interface{}) error {
		out0 := Convert_api_Counters_countermodel_Counters(arg.([]*api.Counter))
		*out.(*[]*countermodel.Counter) = out0
		return nil
	})
}

//-- convert o.o/backend/zexp/sample/counter/api.Counter --//

func Convert_countermodel_Counter_api_Counter(arg *countermodel.Counter, out *api.Counter) *api.Counter {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &api.Counter{}
	}
	convertCounter(arg, out)
	return out
}

func convert_countermodel_Counter_api_Counter(arg *countermodel.Counter, out *api.Counter) {
	out.ID = arg.ID               // simple assign
	out.Label = arg.Label         // simple assign
	out.ValueOne = 0              // zero value
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
}

func Convert_countermodel_Counters_api_Counters(args []*countermodel.Counter) (outs []*api.Counter) {
	if args == nil {
		return nil
	}
	tmps := make([]api.Counter, len(args))
	outs = make([]*api.Counter, len(args))
	for i := range tmps {
		outs[i] = Convert_countermodel_Counter_api_Counter(args[i], &tmps[i])
	}
	return outs
}

func Convert_api_Counter_countermodel_Counter(arg *api.Counter, out *countermodel.Counter) *countermodel.Counter {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &countermodel.Counter{}
	}
	convertCounterModel(arg, out)
	return out
}

func convert_api_Counter_countermodel_Counter(arg *api.Counter, out *countermodel.Counter) {
	out.ID = arg.ID               // simple assign
	out.Label = arg.Label         // simple assign
	out.Value = 0                 // zero value
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
}

func Convert_api_Counters_countermodel_Counters(args []*api.Counter) (outs []*countermodel.Counter) {
	if args == nil {
		return nil
	}
	tmps := make([]countermodel.Counter, len(args))
	outs = make([]*countermodel.Counter, len(args))
	for i := range tmps {
		outs[i] = Convert_api_Counter_countermodel_Counter(args[i], &tmps[i])
	}
	return outs
}
