// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package sqlstore

import (
	sq "o.o/backend/pkg/common/sql/sq"
	dot "o.o/capi/dot"
)

type CounterFilters struct{ prefix string }

func NewCounterFilters(prefix string) CounterFilters {
	return CounterFilters{prefix}
}

func (ft *CounterFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(&ft.prefix, pred, args...)
}

func (ft CounterFilters) Prefix() string {
	return ft.prefix
}

func (ft *CounterFilters) ByID(ID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft *CounterFilters) ByIDPtr(ID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft *CounterFilters) ByLabel(Label string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "label",
		Value:  Label,
		IsNil:  Label == "",
	}
}

func (ft *CounterFilters) ByLabelPtr(Label *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "label",
		Value:  Label,
		IsNil:  Label == nil,
		IsZero: Label != nil && (*Label) == "",
	}
}

func (ft *CounterFilters) ByValue(Value int) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "value",
		Value:  Value,
		IsNil:  Value == 0,
	}
}

func (ft *CounterFilters) ByValuePtr(Value *int) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "value",
		Value:  Value,
		IsNil:  Value == nil,
		IsZero: Value != nil && (*Value) == 0,
	}
}
