// +build !generator

// Code generated by generator enum. DO NOT EDIT.

package api

import (
	driver "database/sql/driver"
	fmt "fmt"

	mix "o.o/capi/mix"
)

var __jsonNull = []byte("null")

var enumEquationOperatorName = map[int]string{
	0: "add",
	1: "sub",
	2: "div",
	3: "mul",
}

var enumEquationOperatorValue = map[string]int{
	"add": 0,
	"sub": 1,
	"div": 2,
	"mul": 3,
}

func ParseEquationOperator(s string) (EquationOperator, bool) {
	val, ok := enumEquationOperatorValue[s]
	return EquationOperator(val), ok
}

func ParseEquationOperatorWithDefault(s string, d EquationOperator) EquationOperator {
	val, ok := enumEquationOperatorValue[s]
	if !ok {
		return d
	}
	return EquationOperator(val)
}

func (e EquationOperator) Apply(d EquationOperator) EquationOperator {
	if e == 0 {
		return d
	}
	return e
}

func (e EquationOperator) Enum() int {
	return int(e)
}

func (e EquationOperator) Name() string {
	return enumEquationOperatorName[e.Enum()]
}

func (e EquationOperator) String() string {
	s, ok := enumEquationOperatorName[e.Enum()]
	if ok {
		return s
	}
	return fmt.Sprintf("EquationOperator(%v)", e.Enum())
}

func (e EquationOperator) MarshalJSON() ([]byte, error) {
	return []byte("\"" + enumEquationOperatorName[e.Enum()] + "\""), nil
}

func (e *EquationOperator) UnmarshalJSON(data []byte) error {
	value, err := mix.UnmarshalJSONEnumInt(enumEquationOperatorValue, data, "EquationOperator")
	if err != nil {
		return err
	}
	*e = EquationOperator(value)
	return nil
}

func (e EquationOperator) Value() (driver.Value, error) {
	if e == 0 {
		return nil, nil
	}
	return e.String(), nil
}

func (e *EquationOperator) Scan(src interface{}) error {
	value, err := mix.ScanEnumInt(enumEquationOperatorValue, src, "EquationOperator")
	*e = (EquationOperator)(value)
	return err
}
