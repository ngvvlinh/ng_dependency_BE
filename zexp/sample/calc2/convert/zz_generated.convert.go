// +build !generator

// Code generated by generator convert. DO NOT EDIT.

package convert

import (
	conversion "o.o/backend/pkg/common/conversion"
	api "o.o/backend/zexp/sample/calc2/api"
	calc2model "o.o/backend/zexp/sample/calc2/model"
)

/*
Custom conversions:
    equation        // in use

Ignored functions: (none)
*/

func RegisterConversions(s *conversion.Scheme) {
	registerConversions(s)
}

func registerConversions(s *conversion.Scheme) {
	s.Register((*calc2model.Equation)(nil), (*api.Equation)(nil), func(arg, out interface{}) error {
		Convert_calc2model_Equation_api_Equation(arg.(*calc2model.Equation), out.(*api.Equation))
		return nil
	})
	s.Register(([]*calc2model.Equation)(nil), (*[]*api.Equation)(nil), func(arg, out interface{}) error {
		out0 := Convert_calc2model_Equations_api_Equations(arg.([]*calc2model.Equation))
		*out.(*[]*api.Equation) = out0
		return nil
	})
	s.Register((*api.Equation)(nil), (*calc2model.Equation)(nil), func(arg, out interface{}) error {
		Convert_api_Equation_calc2model_Equation(arg.(*api.Equation), out.(*calc2model.Equation))
		return nil
	})
	s.Register(([]*api.Equation)(nil), (*[]*calc2model.Equation)(nil), func(arg, out interface{}) error {
		out0 := Convert_api_Equations_calc2model_Equations(arg.([]*api.Equation))
		*out.(*[]*calc2model.Equation) = out0
		return nil
	})
	s.Register((*api.UpdateEquationRequest)(nil), (*api.Equation)(nil), func(arg, out interface{}) error {
		Apply_api_UpdateEquationRequest_api_Equation(arg.(*api.UpdateEquationRequest), out.(*api.Equation))
		return nil
	})
}

//-- convert o.o/backend/zexp/sample/calc2/api.Equation --//

func Convert_calc2model_Equation_api_Equation(arg *calc2model.Equation, out *api.Equation) *api.Equation {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &api.Equation{}
	}
	equation(arg, out)
	return out
}

func convert_calc2model_Equation_api_Equation(arg *calc2model.Equation, out *api.Equation) {
	out.ID = arg.ID               // simple assign
	out.Equation = arg.Equation   // simple assign
	out.Result = arg.Result       // simple assign
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
}

func Convert_calc2model_Equations_api_Equations(args []*calc2model.Equation) (outs []*api.Equation) {
	if args == nil {
		return nil
	}
	tmps := make([]api.Equation, len(args))
	outs = make([]*api.Equation, len(args))
	for i := range tmps {
		outs[i] = Convert_calc2model_Equation_api_Equation(args[i], &tmps[i])
	}
	return outs
}

func Convert_api_Equation_calc2model_Equation(arg *api.Equation, out *calc2model.Equation) *calc2model.Equation {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &calc2model.Equation{}
	}
	convert_api_Equation_calc2model_Equation(arg, out)
	return out
}

func convert_api_Equation_calc2model_Equation(arg *api.Equation, out *calc2model.Equation) {
	out.ID = arg.ID               // simple assign
	out.Equation = arg.Equation   // simple assign
	out.Result = arg.Result       // simple assign
	out.CreatedAt = arg.CreatedAt // simple assign
	out.UpdatedAt = arg.UpdatedAt // simple assign
}

func Convert_api_Equations_calc2model_Equations(args []*api.Equation) (outs []*calc2model.Equation) {
	if args == nil {
		return nil
	}
	tmps := make([]calc2model.Equation, len(args))
	outs = make([]*calc2model.Equation, len(args))
	for i := range tmps {
		outs[i] = Convert_api_Equation_calc2model_Equation(args[i], &tmps[i])
	}
	return outs
}

func Apply_api_UpdateEquationRequest_api_Equation(arg *api.UpdateEquationRequest, out *api.Equation) *api.Equation {
	if arg == nil {
		return nil
	}
	if out == nil {
		out = &api.Equation{}
	}
	apply_api_UpdateEquationRequest_api_Equation(arg, out)
	return out
}

func apply_api_UpdateEquationRequest_api_Equation(arg *api.UpdateEquationRequest, out *api.Equation) {
	out.ID = arg.ID               // simple assign
	out.Equation = out.Equation   // no change
	out.Result = out.Result       // no change
	out.CreatedAt = out.CreatedAt // no change
	out.UpdatedAt = out.UpdatedAt // no change
}
