// +build !generator

// Code generated by generator sqlgen. DO NOT EDIT.

package sqlstore

import (
	sq "o.o/backend/pkg/common/sql/sq"
	dot "o.o/capi/dot"
)

type EquationFilters struct{ prefix string }

func NewEquationFilters(prefix string) EquationFilters {
	return EquationFilters{prefix}
}

func (ft *EquationFilters) Filter(pred string, args ...interface{}) sq.WriterTo {
	return sq.Filter(&ft.prefix, pred, args...)
}

func (ft EquationFilters) Prefix() string {
	return ft.prefix
}

func (ft *EquationFilters) ByID(ID dot.ID) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == 0,
	}
}

func (ft *EquationFilters) ByIDPtr(ID *dot.ID) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "id",
		Value:  ID,
		IsNil:  ID == nil,
		IsZero: ID != nil && (*ID) == 0,
	}
}

func (ft *EquationFilters) ByEquation(Equation string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "equation",
		Value:  Equation,
		IsNil:  Equation == "",
	}
}

func (ft *EquationFilters) ByEquationPtr(Equation *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "equation",
		Value:  Equation,
		IsNil:  Equation == nil,
		IsZero: Equation != nil && (*Equation) == "",
	}
}

func (ft *EquationFilters) ByResult(Result string) *sq.ColumnFilter {
	return &sq.ColumnFilter{
		Prefix: &ft.prefix,
		Column: "result",
		Value:  Result,
		IsNil:  Result == "",
	}
}

func (ft *EquationFilters) ByResultPtr(Result *string) *sq.ColumnFilterPtr {
	return &sq.ColumnFilterPtr{
		Prefix: &ft.prefix,
		Column: "result",
		Value:  Result,
		IsNil:  Result == nil,
		IsZero: Result != nil && (*Result) == "",
	}
}
