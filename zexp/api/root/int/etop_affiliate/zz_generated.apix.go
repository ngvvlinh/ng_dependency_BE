// +build !generator

// Code generated by generator apix. DO NOT EDIT.

package affiliate

import (
	context "context"
	fmt "fmt"
	http "net/http"

	proto "github.com/golang/protobuf/proto"

	common "etop.vn/backend/pb/common"
	affiliate "etop.vn/backend/pb/etop/affiliate"
	httprpc "etop.vn/backend/pkg/common/httprpc"
)

type Server interface {
	http.Handler
	PathPrefix() string
}

type AccountServiceServer struct {
	AccountAPI
}

func NewAccountServiceServer(svc AccountAPI) Server {
	return &AccountServiceServer{
		AccountAPI: svc,
	}
}

const AccountServicePathPrefix = "/api/affiliate.Account/"

func (s *AccountServiceServer) PathPrefix() string {
	return AccountServicePathPrefix
}

func (s *AccountServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	serve, err := httprpc.ParseRequestHeader(req)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	reqMsg, exec, err := s.parseRoute(req.URL.Path)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	serve(ctx, resp, req, reqMsg, exec)
}

func (s *AccountServiceServer) parseRoute(path string) (reqMsg proto.Message, _ httprpc.ExecFunc, _ error) {
	switch path {
	case "/api/affiliate.Account/DeleteAffiliate":
		msg := new(common.IDRequest)
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.AccountAPI.DeleteAffiliate(ctx, msg)
		}
		return msg, fn, nil
	case "/api/affiliate.Account/RegisterAffiliate":
		msg := new(affiliate.RegisterAffiliateRequest)
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.AccountAPI.RegisterAffiliate(ctx, msg)
		}
		return msg, fn, nil
	case "/api/affiliate.Account/UpdateAffiliate":
		msg := new(affiliate.UpdateAffiliateRequest)
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.AccountAPI.UpdateAffiliate(ctx, msg)
		}
		return msg, fn, nil
	case "/api/affiliate.Account/UpdateAffiliateBankAccount":
		msg := new(affiliate.UpdateAffiliateBankAccountRequest)
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.AccountAPI.UpdateAffiliateBankAccount(ctx, msg)
		}
		return msg, fn, nil
	default:
		msg := fmt.Sprintf("no handler for path %q", path)
		return nil, nil, httprpc.BadRouteError(msg, "POST", path)
	}
}

type MiscServiceServer struct {
	MiscAPI
}

func NewMiscServiceServer(svc MiscAPI) Server {
	return &MiscServiceServer{
		MiscAPI: svc,
	}
}

const MiscServicePathPrefix = "/api/affiliate.Misc/"

func (s *MiscServiceServer) PathPrefix() string {
	return MiscServicePathPrefix
}

func (s *MiscServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	serve, err := httprpc.ParseRequestHeader(req)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	reqMsg, exec, err := s.parseRoute(req.URL.Path)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	serve(ctx, resp, req, reqMsg, exec)
}

func (s *MiscServiceServer) parseRoute(path string) (reqMsg proto.Message, _ httprpc.ExecFunc, _ error) {
	switch path {
	case "/api/affiliate.Misc/VersionInfo":
		msg := new(common.Empty)
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.MiscAPI.VersionInfo(ctx, msg)
		}
		return msg, fn, nil
	default:
		msg := fmt.Sprintf("no handler for path %q", path)
		return nil, nil, httprpc.BadRouteError(msg, "POST", path)
	}
}
