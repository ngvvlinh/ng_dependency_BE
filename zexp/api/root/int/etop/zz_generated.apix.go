// +build !generator

// Code generated by generator apix. DO NOT EDIT.

package etop

import (
	context "context"
	fmt "fmt"
	http "net/http"

	proto "github.com/golang/protobuf/proto"

	common "etop.vn/backend/pb/common"
	etop "etop.vn/backend/pb/etop"
	httprpc "etop.vn/backend/pkg/common/httprpc"
)

type Server interface {
	http.Handler
	PathPrefix() string
}

type AccountServiceServer struct {
	AccountAPI
}

func NewAccountServiceServer(svc AccountAPI) Server {
	return &AccountServiceServer{
		AccountAPI: svc,
	}
}

const AccountServicePathPrefix = "/etop.Account/"

func (s *AccountServiceServer) PathPrefix() string {
	return AccountServicePathPrefix
}

func (s *AccountServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	serve, err := httprpc.ParseRequestHeader(req)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	reqMsg, exec, err := s.parseRoute(req.URL.Path)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	serve(ctx, resp, req, reqMsg, exec)
}

func (s *AccountServiceServer) parseRoute(path string) (reqMsg proto.Message, _ httprpc.ExecFunc, _ error) {
	switch path {
	case "/etop.Account/GetPublicPartnerInfo":
		msg := &common.IDRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.AccountAPI.GetPublicPartnerInfo(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.Account/GetPublicPartners":
		msg := &common.IDsRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.AccountAPI.GetPublicPartners(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.Account/UpdateURLSlug":
		msg := &etop.UpdateURLSlugRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.AccountAPI.UpdateURLSlug(ctx, msg)
		}
		return msg, fn, nil
	default:
		msg := fmt.Sprintf("no handler for path %q", path)
		return nil, nil, httprpc.BadRouteError(msg, "POST", path)
	}
}

type AddressServiceServer struct {
	AddressAPI
}

func NewAddressServiceServer(svc AddressAPI) Server {
	return &AddressServiceServer{
		AddressAPI: svc,
	}
}

const AddressServicePathPrefix = "/etop.Address/"

func (s *AddressServiceServer) PathPrefix() string {
	return AddressServicePathPrefix
}

func (s *AddressServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	serve, err := httprpc.ParseRequestHeader(req)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	reqMsg, exec, err := s.parseRoute(req.URL.Path)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	serve(ctx, resp, req, reqMsg, exec)
}

func (s *AddressServiceServer) parseRoute(path string) (reqMsg proto.Message, _ httprpc.ExecFunc, _ error) {
	switch path {
	case "/etop.Address/CreateAddress":
		msg := &etop.CreateAddressRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.AddressAPI.CreateAddress(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.Address/GetAddresses":
		msg := &common.Empty{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.AddressAPI.GetAddresses(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.Address/RemoveAddress":
		msg := &common.IDRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.AddressAPI.RemoveAddress(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.Address/UpdateAddress":
		msg := &etop.UpdateAddressRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.AddressAPI.UpdateAddress(ctx, msg)
		}
		return msg, fn, nil
	default:
		msg := fmt.Sprintf("no handler for path %q", path)
		return nil, nil, httprpc.BadRouteError(msg, "POST", path)
	}
}

type BankServiceServer struct {
	BankAPI
}

func NewBankServiceServer(svc BankAPI) Server {
	return &BankServiceServer{
		BankAPI: svc,
	}
}

const BankServicePathPrefix = "/etop.Bank/"

func (s *BankServiceServer) PathPrefix() string {
	return BankServicePathPrefix
}

func (s *BankServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	serve, err := httprpc.ParseRequestHeader(req)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	reqMsg, exec, err := s.parseRoute(req.URL.Path)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	serve(ctx, resp, req, reqMsg, exec)
}

func (s *BankServiceServer) parseRoute(path string) (reqMsg proto.Message, _ httprpc.ExecFunc, _ error) {
	switch path {
	case "/etop.Bank/GetBanks":
		msg := &common.Empty{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.BankAPI.GetBanks(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.Bank/GetBranchesByBankProvince":
		msg := &etop.GetBranchesByBankProvinceResquest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.BankAPI.GetBranchesByBankProvince(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.Bank/GetProvincesByBank":
		msg := &etop.GetProvincesByBankResquest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.BankAPI.GetProvincesByBank(ctx, msg)
		}
		return msg, fn, nil
	default:
		msg := fmt.Sprintf("no handler for path %q", path)
		return nil, nil, httprpc.BadRouteError(msg, "POST", path)
	}
}

type InvitationServiceServer struct {
	InvitationAPI
}

func NewInvitationServiceServer(svc InvitationAPI) Server {
	return &InvitationServiceServer{
		InvitationAPI: svc,
	}
}

const InvitationServicePathPrefix = "/etop.Invitation/"

func (s *InvitationServiceServer) PathPrefix() string {
	return InvitationServicePathPrefix
}

func (s *InvitationServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	serve, err := httprpc.ParseRequestHeader(req)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	reqMsg, exec, err := s.parseRoute(req.URL.Path)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	serve(ctx, resp, req, reqMsg, exec)
}

func (s *InvitationServiceServer) parseRoute(path string) (reqMsg proto.Message, _ httprpc.ExecFunc, _ error) {
	switch path {
	case "/etop.Invitation/AcceptInvitation":
		msg := &etop.AcceptInvitationRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.InvitationAPI.AcceptInvitation(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.Invitation/GetInvitationByToken":
		msg := &etop.GetInvitationByTokenRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.InvitationAPI.GetInvitationByToken(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.Invitation/GetInvitations":
		msg := &etop.GetInvitationsRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.InvitationAPI.GetInvitations(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.Invitation/RejectInvitation":
		msg := &etop.RejectInvitationRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.InvitationAPI.RejectInvitation(ctx, msg)
		}
		return msg, fn, nil
	default:
		msg := fmt.Sprintf("no handler for path %q", path)
		return nil, nil, httprpc.BadRouteError(msg, "POST", path)
	}
}

type LocationServiceServer struct {
	LocationAPI
}

func NewLocationServiceServer(svc LocationAPI) Server {
	return &LocationServiceServer{
		LocationAPI: svc,
	}
}

const LocationServicePathPrefix = "/etop.Location/"

func (s *LocationServiceServer) PathPrefix() string {
	return LocationServicePathPrefix
}

func (s *LocationServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	serve, err := httprpc.ParseRequestHeader(req)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	reqMsg, exec, err := s.parseRoute(req.URL.Path)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	serve(ctx, resp, req, reqMsg, exec)
}

func (s *LocationServiceServer) parseRoute(path string) (reqMsg proto.Message, _ httprpc.ExecFunc, _ error) {
	switch path {
	case "/etop.Location/GetDistricts":
		msg := &common.Empty{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.LocationAPI.GetDistricts(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.Location/GetDistrictsByProvince":
		msg := &etop.GetDistrictsByProvinceRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.LocationAPI.GetDistrictsByProvince(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.Location/GetProvinces":
		msg := &common.Empty{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.LocationAPI.GetProvinces(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.Location/GetWards":
		msg := &common.Empty{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.LocationAPI.GetWards(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.Location/GetWardsByDistrict":
		msg := &etop.GetWardsByDistrictRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.LocationAPI.GetWardsByDistrict(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.Location/ParseLocation":
		msg := &etop.ParseLocationRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.LocationAPI.ParseLocation(ctx, msg)
		}
		return msg, fn, nil
	default:
		msg := fmt.Sprintf("no handler for path %q", path)
		return nil, nil, httprpc.BadRouteError(msg, "POST", path)
	}
}

type MiscServiceServer struct {
	MiscAPI
}

func NewMiscServiceServer(svc MiscAPI) Server {
	return &MiscServiceServer{
		MiscAPI: svc,
	}
}

const MiscServicePathPrefix = "/etop.Misc/"

func (s *MiscServiceServer) PathPrefix() string {
	return MiscServicePathPrefix
}

func (s *MiscServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	serve, err := httprpc.ParseRequestHeader(req)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	reqMsg, exec, err := s.parseRoute(req.URL.Path)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	serve(ctx, resp, req, reqMsg, exec)
}

func (s *MiscServiceServer) parseRoute(path string) (reqMsg proto.Message, _ httprpc.ExecFunc, _ error) {
	switch path {
	case "/etop.Misc/VersionInfo":
		msg := &common.Empty{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.MiscAPI.VersionInfo(ctx, msg)
		}
		return msg, fn, nil
	default:
		msg := fmt.Sprintf("no handler for path %q", path)
		return nil, nil, httprpc.BadRouteError(msg, "POST", path)
	}
}

type RelationshipServiceServer struct {
	RelationshipAPI
}

func NewRelationshipServiceServer(svc RelationshipAPI) Server {
	return &RelationshipServiceServer{
		RelationshipAPI: svc,
	}
}

const RelationshipServicePathPrefix = "/etop.Relationship/"

func (s *RelationshipServiceServer) PathPrefix() string {
	return RelationshipServicePathPrefix
}

func (s *RelationshipServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	serve, err := httprpc.ParseRequestHeader(req)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	reqMsg, exec, err := s.parseRoute(req.URL.Path)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	serve(ctx, resp, req, reqMsg, exec)
}

func (s *RelationshipServiceServer) parseRoute(path string) (reqMsg proto.Message, _ httprpc.ExecFunc, _ error) {
	switch path {
	case "/etop.Relationship/AnswerInvitation":
		msg := &etop.AnswerInvitationRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.RelationshipAPI.AnswerInvitation(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.Relationship/GetUsersInCurrentAccounts":
		msg := &etop.GetUsersInCurrentAccountsRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.RelationshipAPI.GetUsersInCurrentAccounts(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.Relationship/InviteUserToAccount":
		msg := &etop.InviteUserToAccountRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.RelationshipAPI.InviteUserToAccount(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.Relationship/LeaveAccount":
		msg := &etop.LeaveAccountRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.RelationshipAPI.LeaveAccount(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.Relationship/RemoveUserFromCurrentAccount":
		msg := &etop.RemoveUserFromCurrentAccountRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.RelationshipAPI.RemoveUserFromCurrentAccount(ctx, msg)
		}
		return msg, fn, nil
	default:
		msg := fmt.Sprintf("no handler for path %q", path)
		return nil, nil, httprpc.BadRouteError(msg, "POST", path)
	}
}

type UserServiceServer struct {
	UserAPI
}

func NewUserServiceServer(svc UserAPI) Server {
	return &UserServiceServer{
		UserAPI: svc,
	}
}

const UserServicePathPrefix = "/etop.User/"

func (s *UserServiceServer) PathPrefix() string {
	return UserServicePathPrefix
}

func (s *UserServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	serve, err := httprpc.ParseRequestHeader(req)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	reqMsg, exec, err := s.parseRoute(req.URL.Path)
	if err != nil {
		httprpc.WriteError(ctx, resp, err)
		return
	}
	serve(ctx, resp, req, reqMsg, exec)
}

func (s *UserServiceServer) parseRoute(path string) (reqMsg proto.Message, _ httprpc.ExecFunc, _ error) {
	switch path {
	case "/etop.User/ChangePassword":
		msg := &etop.ChangePasswordRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.UserAPI.ChangePassword(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.User/ChangePasswordUsingToken":
		msg := &etop.ChangePasswordUsingTokenRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.UserAPI.ChangePasswordUsingToken(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.User/Login":
		msg := &etop.LoginRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.UserAPI.Login(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.User/Register":
		msg := &etop.CreateUserRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.UserAPI.Register(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.User/ResetPassword":
		msg := &etop.ResetPasswordRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.UserAPI.ResetPassword(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.User/SendEmailVerification":
		msg := &etop.SendEmailVerificationRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.UserAPI.SendEmailVerification(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.User/SendPhoneVerification":
		msg := &etop.SendPhoneVerificationRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.UserAPI.SendPhoneVerification(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.User/SendSTokenEmail":
		msg := &etop.SendSTokenEmailRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.UserAPI.SendSTokenEmail(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.User/SessionInfo":
		msg := &common.Empty{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.UserAPI.SessionInfo(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.User/SwitchAccount":
		msg := &etop.SwitchAccountRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.UserAPI.SwitchAccount(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.User/UpdatePermission":
		msg := &etop.UpdatePermissionRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.UserAPI.UpdatePermission(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.User/UpdateReferenceSale":
		msg := &etop.UpdateReferenceSaleRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.UserAPI.UpdateReferenceSale(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.User/UpdateReferenceUser":
		msg := &etop.UpdateReferenceUserRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.UserAPI.UpdateReferenceUser(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.User/UpgradeAccessToken":
		msg := &etop.UpgradeAccessTokenRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.UserAPI.UpgradeAccessToken(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.User/VerifyEmailUsingToken":
		msg := &etop.VerifyEmailUsingTokenRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.UserAPI.VerifyEmailUsingToken(ctx, msg)
		}
		return msg, fn, nil
	case "/etop.User/VerifyPhoneUsingToken":
		msg := &etop.VerifyPhoneUsingTokenRequest{}
		fn := func(ctx context.Context) (proto.Message, error) {
			return s.UserAPI.VerifyPhoneUsingToken(ctx, msg)
		}
		return msg, fn, nil
	default:
		msg := fmt.Sprintf("no handler for path %q", path)
		return nil, nil, httprpc.BadRouteError(msg, "POST", path)
	}
}
